-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_03_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(33,45,0)
(58,11,0)
(19,41,0)
(20,14,0)
(24,56,0)
(63,19,0)
(15,66,0)
(56,24,0)
(30,24,0)
(64,38,0)
(25,29,0)
(59,15,0)
(10,6,0)
(36,22,0)
(28,52,0)
(65,56,0)
(15,7,0)
(40,7,0)
(7,48,0)
(9,66,0)
(38,28,0)
(49,41,0)
(35,63,0)
(57,11,0)
(15,52,0)
(26,28,0)
(17,7,0)
(18,66,0)
(21,19,0)
(3,19,0)
(21,63,0)
(66,41,0)
(8,9,0)
(38,63,0)
(29,45,0)
(53,36,0)
(60,19,0)
(6,31,0)
(39,24,0)
(4,17,0)
(43,38,0)
(16,56,0)
(44,46,0)
(31,6,0)
(11,29,0)
(9,7,0)
(7,17,0)
(13,27,0)
(62,15,0)
(17,61,0)
(23,41,0)
(17,4,0)
(2,21,0)
(4,29,0)
(14,19,0)
(34,63,0)
(47,45,0)
(0,27,0)
(24,19,0)
(32,31,0)
(61,17,0)
(1,19,0)
(67,9,0)
(12,29,0)
(42,6,0)
(38,66,0)
(11,46,0)
(51,11,0)
(55,66,0)
(31,14,0)
(15,63,0)
(38,7,0)
(45,37,0)
(54,4,0)
(46,11,0)
(50,15,0)
(42,32,1)
(44,11,1)
(15,66,1)
(30,63,1)
(59,50,1)
(51,29,1)
(38,63,1)
(24,56,1)
(15,62,1)
(11,29,1)
(5,21,1)
(36,53,1)
(13,0,1)
(58,51,1)
(11,57,1)
(4,54,1)
(38,66,1)
(14,20,1)
(54,40,1)
(15,63,1)
(7,17,1)
(53,46,1)
(35,7,1)
(25,27,1)
(9,7,1)
(17,61,1)
(39,30,1)
(65,16,1)
(12,25,1)
(67,8,1)
(29,12,1)
(27,13,1)
(56,65,1)
(28,26,1)
(50,9,1)
(35,36,1)
(6,10,1)
(46,44,1)
(35,27,1)
(26,38,1)
(15,7,1)
(46,11,1)
(63,34,1)
(34,35,1)
(38,7,1)
(43,64,1)
(31,6,1)
(2,28,1)
(4,29,1)
(62,59,1)
(38,43,1)
(0,66,1)
(57,58,1)
(10,42,1)
(21,63,1)
(8,14,1)
(2,9,1)
(66,18,1)
(18,55,1)
(40,46,1)
(20,31,1)
(9,66,1)
(32,24,1)
(64,15,1)
(16,39,1)
(9,67,1)
(17,4,1)
(21,2,1)
(38,7,2)
(38,66,2)
(50,9,2)
(4,29,2)
(15,66,2)
(7,46,2)
(17,4,2)
(12,27,2)
(15,9,2)
(29,27,2)
(4,46,2)
(44,27,2)
(24,56,2)
(59,9,2)
(46,27,2)
(9,66,2)
(17,61,2)
(26,9,2)
(28,9,2)
(40,46,2)
(38,63,2)
(11,29,2)
(21,63,2)
(51,27,2)
(25,27,2)
(9,7,2)
(17,46,2)
(36,46,2)
(7,17,2)
(57,27,2)
(58,27,2)
(64,9,2)
(38,9,2)
(31,6,2)
(11,27,2)
(62,9,2)
(43,9,2)
(46,11,2)
(15,63,2)
(53,46,2)
(15,7,2)
(54,46,2)
-----------------------------------
(0,5)
(1,if (data < 100)
(2,dest)
(3,source)
(4,atoi(inputBuffer)
(5,RET)
(6,100-1)
(7,data = (short)
(8,data)
(9,data < 100)
(10,1)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,"")
(13,5)
(14,source[100-1] = \\\'\\\\0\\\')
(15,memmove(dest, source, data)
(16,100)
(17,(short)
(18,0)
(19,)
(20,\\\'\\\\0\\\')
(21,printLine(dest)
(22,)
(23,if(5==5)
(24,memset(source, \\\'A\\\', 100-1)
(25,inputBuffer)
(26,\\\'\\\\0\\\')
(27,5==5)
(28,dest[data] = \\\'\\\\0\\\')
(29,inputBuffer[CHAR_ARRAY_SIZE] = "")
(30,source)
(31,source[100-1])
(32,source)
(33,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,"")
(35,dest)
(36,printLine("fgets()
(37,)
(38,dest[data])
(39,\\\'A\\\')
(40,data)
(41,)
(42,100)
(43,data)
(44,NULL)
(45,)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,inputBuffer)
(48,)
(49,data)
(50,dest)
(51,inputBuffer)
(52,)
(53,"fgets()
(54,inputBuffer)
(55,data)
(56,100-1)
(57,stdin)
(58,CHAR_ARRAY_SIZE)
(59,source)
(60,dest)
(61,short)
(62,data)
(63,dest[100] = "")
(64,dest)
(65,1)
(66,data = 0)
(67,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^