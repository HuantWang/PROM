-----label-----
1
-----code-----
static void badSink(int data)
{
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
27,28
28,29
28,30
28,31
28,32
29,30
31,32
34,35
34,36
37,38
38,39
38,40
39,40
39,41
40,41
42,43
42,44
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
53,56
53,57
54,55
56,57
58,59
60,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,6,8,13,15,17,20,22,24,26,30,32,33,35,36,41,43,44,45,49,50,55,57,59,61,66,68,69,73,75
-----computeFrom-----
34,35
34,36
38,39
38,40
42,43
42,44
47,48
47,49
63,64
63,65
-----guardedBy-----
49,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(10,27,0)
(35,10,0)
(34,23,0)
(14,21,0)
(12,27,0)
(28,8,0)
(25,27,0)
(17,28,0)
(30,8,0)
(11,22,0)
(2,22,0)
(23,10,0)
(21,26,0)
(31,21,0)
(1,28,0)
(5,10,0)
(36,33,0)
(0,25,0)
(7,6,0)
(21,37,0)
(20,19,0)
(28,27,0)
(13,8,0)
(18,36,0)
(21,10,0)
(6,26,0)
(36,19,0)
(29,21,0)
(8,28,0)
(33,27,0)
(32,19,0)
(16,33,0)
(4,27,0)
(23,6,0)
(22,37,0)
(3,27,0)
(19,36,0)
(27,24,0)
(25,10,0)
(15,23,0)
(23,37,0)
(0,6,1)
(8,30,1)
(25,0,1)
(18,28,1)
(35,5,1)
(11,2,1)
(17,1,1)
(10,35,1)
(14,29,1)
(29,31,1)
(33,16,1)
(9,25,1)
(16,36,1)
(23,15,1)
(22,11,1)
(36,19,1)
(31,22,1)
(21,14,1)
(28,8,1)
(0,22,1)
(21,37,1)
(15,34,1)
(23,10,1)
(19,20,1)
(25,10,1)
(23,37,1)
(34,21,1)
(30,13,1)
(21,10,1)
(1,10,1)
(32,18,1)
(2,33,1)
(7,23,1)
(20,32,1)
(6,7,1)
(13,17,1)
(22,37,1)
(23,10,2)
(21,10,2)
(15,22,2)
(21,22,2)
(6,22,2)
(23,22,2)
(7,22,2)
(21,37,2)
(36,19,2)
(31,22,2)
(29,22,2)
(23,37,2)
(22,37,2)
(25,10,2)
(34,22,2)
(14,22,2)
(28,8,2)
-----------------------------------
(0,dest)
(1,source)
(2,data)
(3,source)
(4,if (data < 100)
(5,dest)
(6,dest[data] = \\\'\\\\0\\\')
(7,\\\'\\\\0\\\')
(8,100-1)
(9,RET)
(10,dest[100] = "")
(11,100)
(12,dest)
(13,100)
(14,data)
(15,data)
(16,\\\'\\\\0\\\')
(17,\\\'A\\\')
(18,source)
(19,100-1)
(20,1)
(21,memcpy(dest, source, data)
(22,data < 100)
(23,dest[data])
(24,)
(25,printLine(dest)
(26,)
(27,)
(28,memset(source, \\\'A\\\', 100-1)
(29,source)
(30,1)
(31,dest)
(32,100)
(33,source[100-1] = \\\'\\\\0\\\')
(34,dest)
(35,"")
(36,source[100-1])
(37,int data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^