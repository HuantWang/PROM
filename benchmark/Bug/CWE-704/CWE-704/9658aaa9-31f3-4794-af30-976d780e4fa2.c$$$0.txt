-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,20,25,27,32,34,35,39,41,43,46,48,50,52,56,58,59,61,62,67,69,70,71,75,76,81,83,85,87,92,94,95,99,101
-----computeFrom-----
12,13
12,14
23,24
23,25
30,31
30,32
33,34
33,35
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
89,90
89,91
-----guardedBy-----
75,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(36,17,0)
(45,54,0)
(37,54,0)
(40,2,0)
(52,19,0)
(23,52,0)
(46,31,0)
(31,28,0)
(7,8,0)
(1,40,0)
(6,37,0)
(43,28,0)
(16,33,0)
(15,8,0)
(0,53,0)
(5,8,0)
(47,53,0)
(53,32,0)
(28,8,0)
(38,45,0)
(22,13,0)
(48,45,0)
(13,7,0)
(30,32,0)
(6,43,0)
(2,28,0)
(45,43,0)
(6,39,0)
(27,28,0)
(3,17,0)
(53,28,0)
(39,21,0)
(41,28,0)
(33,40,0)
(11,23,0)
(10,39,0)
(26,52,0)
(20,37,0)
(40,33,0)
(4,23,0)
(39,10,0)
(35,33,0)
(32,53,0)
(17,52,0)
(45,39,0)
(12,43,0)
(24,28,0)
(31,43,0)
(50,32,0)
(34,6,0)
(29,6,0)
(9,2,0)
(52,23,0)
(44,7,0)
(17,39,0)
(18,45,0)
(42,39,0)
(6,52,0)
(14,10,0)
(7,13,0)
(45,52,0)
(51,43,0)
(10,14,1)
(29,34,1)
(34,45,1)
(53,32,1)
(48,17,1)
(37,20,1)
(35,16,1)
(6,43,1)
(49,31,1)
(6,29,1)
(13,22,1)
(23,11,1)
(12,39,1)
(32,30,1)
(45,39,1)
(45,43,1)
(18,38,1)
(6,52,1)
(3,36,1)
(7,13,1)
(17,52,1)
(46,17,1)
(26,25,1)
(20,6,1)
(52,23,1)
(12,52,1)
(45,52,1)
(51,12,1)
(16,1,1)
(17,39,1)
(45,18,1)
(30,50,1)
(39,10,1)
(2,9,1)
(31,46,1)
(47,43,1)
(25,7,1)
(50,0,1)
(9,40,1)
(38,48,1)
(14,42,1)
(33,35,1)
(42,25,1)
(40,33,1)
(11,4,1)
(36,2,1)
(1,53,1)
(31,43,1)
(22,44,1)
(4,26,1)
(17,3,1)
(6,39,1)
(43,51,1)
(0,47,1)
(46,37,1)
(31,43,2)
(4,25,2)
(52,25,2)
(53,32,2)
(6,52,2)
(7,13,2)
(29,17,2)
(10,25,2)
(34,17,2)
(45,39,2)
(39,10,2)
(6,17,2)
(45,17,2)
(17,52,2)
(40,33,2)
(37,17,2)
(39,25,2)
(6,39,2)
(48,17,2)
(6,43,2)
(45,52,2)
(17,39,2)
(20,17,2)
(38,17,2)
(18,17,2)
(45,43,2)
(14,25,2)
(11,25,2)
(52,23,2)
(23,25,2)
(42,25,2)
(26,25,2)
-----------------------------------
(0,\\\'A\\\')
(1,source)
(2,source[100-1] = \\\'\\\\0\\\')
(3,100)
(4,100)
(5,if(globalReturnsTrueOrFalse()
(6,dest[data])
(7,data = -1)
(8,)
(9,\\\'\\\\0\\\')
(10,-1)
(11,1)
(12,dest)
(13,-1)
(14,1)
(15,data)
(16,100)
(17,data < 100)
(18,data)
(19,)
(20,\\\'\\\\0\\\')
(21,)
(22,1)
(23,100-1)
(24,if (data < 100)
(25,globalReturnsTrueOrFalse()
(26,data)
(27,source)
(28,)
(29,data)
(30,1)
(31,printLine(dest)
(32,100-1)
(33,100-1)
(34,dest)
(35,1)
(36,data)
(37,dest[data] = \\\'\\\\0\\\')
(38,source)
(39,data = -1)
(40,source[100-1])
(41,dest)
(42,data)
(43,dest[100] = "")
(44,data)
(45,memcpy(dest, source, data)
(46,dest)
(47,source)
(48,dest)
(49,RET)
(50,100)
(51,"")
(52,data = 100-1)
(53,memset(source, \\\'A\\\', 100-1)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^