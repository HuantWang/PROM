-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_10_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(13,40,0)
(5,51,0)
(30,46,0)
(34,32,0)
(26,8,0)
(10,4,0)
(52,39,0)
(3,26,0)
(28,12,0)
(50,21,0)
(18,26,0)
(15,29,0)
(48,50,0)
(38,0,0)
(33,0,0)
(12,28,0)
(43,18,0)
(14,4,0)
(32,51,0)
(5,4,0)
(51,32,0)
(27,52,0)
(14,5,0)
(21,0,0)
(49,1,0)
(32,52,0)
(37,0,0)
(26,5,0)
(22,28,0)
(19,8,0)
(39,52,0)
(24,29,0)
(47,28,0)
(44,12,0)
(32,21,0)
(8,4,0)
(52,20,0)
(7,12,0)
(42,6,0)
(17,1,0)
(2,18,0)
(31,21,0)
(18,52,0)
(29,5,0)
(40,30,0)
(30,40,0)
(51,5,0)
(35,5,0)
(6,5,0)
(12,5,0)
(21,50,0)
(36,14,0)
(26,18,0)
(28,21,0)
(28,52,0)
(6,4,0)
(51,25,0)
(18,21,0)
(25,51,0)
(1,52,0)
(1,21,0)
(12,4,0)
(45,4,0)
(28,52,1)
(39,27,1)
(1,52,1)
(14,36,1)
(13,29,1)
(12,28,1)
(47,22,1)
(18,21,1)
(16,21,1)
(1,17,1)
(52,39,1)
(5,51,1)
(40,13,1)
(17,49,1)
(1,21,1)
(29,5,1)
(18,2,1)
(28,21,1)
(19,26,1)
(32,52,1)
(51,32,1)
(44,30,1)
(27,16,1)
(34,35,1)
(7,44,1)
(48,31,1)
(21,50,1)
(8,19,1)
(14,5,1)
(42,8,1)
(32,34,1)
(44,29,1)
(50,48,1)
(26,18,1)
(2,43,1)
(18,52,1)
(36,6,1)
(6,5,1)
(22,7,1)
(32,21,1)
(6,42,1)
(30,40,1)
(41,1,1)
(15,24,1)
(49,16,1)
(43,3,1)
(12,5,1)
(24,5,1)
(51,25,1)
(49,52,1)
(41,14,1)
(28,47,1)
(29,15,1)
(3,12,1)
(26,5,1)
(35,1,1)
(39,16,2)
(12,5,2)
(14,5,2)
(51,32,2)
(18,21,2)
(18,1,2)
(13,29,2)
(30,29,2)
(12,28,2)
(26,18,2)
(43,1,2)
(14,1,2)
(26,5,2)
(42,1,2)
(29,5,2)
(51,25,2)
(6,1,2)
(7,1,2)
(32,52,2)
(52,16,2)
(44,1,2)
(24,1,2)
(35,1,2)
(26,1,2)
(5,51,2)
(1,52,2)
(5,1,2)
(40,29,2)
(32,21,2)
(8,1,2)
(30,40,2)
(27,16,2)
(36,1,2)
(22,1,2)
(28,21,2)
(32,1,2)
(19,1,2)
(34,1,2)
(1,21,2)
(12,1,2)
(18,52,2)
(52,39,2)
(29,1,2)
(3,1,2)
(51,1,2)
(6,5,2)
(15,1,2)
(47,1,2)
(28,52,2)
(28,1,2)
(21,50,2)
(2,1,2)
-----------------------------------
(0,)
(1,data < 100)
(2,1)
(3,dataBuffer)
(4,)
(5,* dataBuffer = (char *)
(6,printLine(dataBuffer)
(7,'A')
(8,dataBuffer[data-1] = '\\\\0')
(9,\'A\')
(10,if (dataBuffer == NULL)
(11,dataBuffer[data-1] = \'\\\\0\')
(12,memset(dataBuffer, 'A', data-1)
(13,1)
(14,free(dataBuffer)
(15,NULL)
(16,globalTrue)
(17,100)
(18,data-1)
(19,'\\\\0')
(20,)
(21,data = -1)
(22,data)
(23,\'\\\\0\')
(24,dataBuffer)
(25,char *)
(26,dataBuffer[data-1])
(27,data)
(28,data-1)
(29,dataBuffer == NULL)
(30,exit(-1)
(31,data)
(32,malloc(data)
(33,data)
(34,data)
(35,dataBuffer)
(36,dataBuffer)
(37,if (data < 100)
(38,if(globalTrue)
(39,RAND32()
(40,-1)
(41,RET)
(42,dataBuffer)
(43,data)
(44,dataBuffer)
(45,dataBuffer)
(46,)
(47,1)
(48,1)
(49,data)
(50,-1)
(51,(char *)
(52,data = RAND32()
(53,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^