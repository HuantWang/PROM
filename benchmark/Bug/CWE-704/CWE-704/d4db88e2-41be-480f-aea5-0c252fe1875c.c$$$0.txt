-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
54,55
54,56
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
55,67
56,57
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
82,83
85,86
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
139,140
141,142
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
150,151
152,153
154,155
156,157
156,158
157,158
161,162
161,163
162,163
162,164
163,164
163,165
164,165
166,167
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
179,180
182,183
183,184
183,185
184,185
186,187
186,188
187,188
189,190
191,192
191,193
191,194
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
199,200
201,202
203,204
204,205
205,206
205,207
206,207
208,209
210,211
211,212
212,213
212,214
213,214
215,216
218,219
218,220
219,220
219,221
220,221
222,223
224,225
225,226
226,227
226,228
227,228
229,230
231,232
231,233
232,233
232,234
233,234
236,237
236,238
236,239
236,240
236,241
236,242
237,238
238,239
238,240
240,241
240,242
240,243
243,244
244,245
244,246
245,246
245,247
247,248
249,250
249,251
250,251
252,253
254,255
254,256
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
267,268
268,269
268,270
268,271
268,272
269,270
271,272
274,275
274,276
275,276
278,279
279,280
279,281
280,281
280,282
281,282
283,284
283,285
284,285
288,289
289,290
289,291
290,291
292,293
294,295
295,296
295,297
296,297
298,299
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,34,36,40,42,45,48,50,53,59,62,64,66,68,72,74,76,80,83,84,88,93,94,96,102,103,104,107,109,114,115,118,120,125,127,131,133,136,140,142,144,148,151,153,155,158,159,160,165,167,170,171,173,178,180,181,185,188,190,195,197,200,202,207,209,214,216,217,221,223,228,230,234,235,239,241,242,246,248,251,253,257,259,264,266,270,272,273,276,277,282,285,286,287,291,293,297,299
-----computeFrom-----
12,13
12,14
57,58
57,59
70,71
70,72
90,91
90,92
98,99
98,100
111,112
111,113
122,123
122,124
146,147
146,148
156,157
156,158
162,163
162,164
163,164
163,165
168,169
168,170
175,176
175,177
183,184
183,185
192,193
192,194
193,194
193,195
198,199
198,200
205,206
205,207
212,213
212,214
219,220
219,221
232,233
232,234
255,256
255,257
274,275
274,276
279,280
279,281
283,284
283,285
-----guardedBy-----
221,230
234,285
-----guardedByNegation-----
200,216
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_10_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalTrue
globalTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(87,101,0)
(82,8,0)
(29,101,0)
(175,12,0)
(61,93,0)
(15,183,0)
(120,53,0)
(7,79,0)
(69,105,0)
(102,74,0)
(16,8,0)
(22,112,0)
(70,66,0)
(9,174,0)
(186,175,0)
(69,112,0)
(180,72,0)
(78,12,0)
(22,174,0)
(174,47,0)
(144,93,0)
(182,103,0)
(135,8,0)
(77,80,0)
(53,67,0)
(133,93,0)
(89,97,0)
(39,151,0)
(52,112,0)
(140,125,0)
(49,125,0)
(41,159,0)
(19,50,0)
(3,8,0)
(21,180,0)
(156,26,0)
(145,67,0)
(13,59,0)
(183,133,0)
(151,98,0)
(5,67,0)
(30,162,0)
(171,115,0)
(104,22,0)
(99,116,0)
(106,114,0)
(133,159,0)
(26,156,0)
(9,112,0)
(101,87,0)
(147,180,0)
(22,105,0)
(68,152,0)
(161,147,0)
(31,27,0)
(97,87,0)
(147,88,0)
(159,133,0)
(90,78,0)
(154,105,0)
(34,32,0)
(117,88,0)
(156,115,0)
(170,20,0)
(88,174,0)
(25,114,0)
(59,20,0)
(62,1,0)
(187,180,0)
(141,70,0)
(27,8,0)
(50,130,0)
(103,133,0)
(168,130,0)
(85,139,0)
(107,5,0)
(108,9,0)
(83,93,0)
(165,98,0)
(133,103,0)
(58,175,0)
(144,114,0)
(136,83,0)
(9,105,0)
(81,44,0)
(51,115,0)
(57,116,0)
(129,39,0)
(80,67,0)
(150,121,0)
(44,98,0)
(10,20,0)
(23,91,0)
(12,78,0)
(138,164,0)
(28,156,0)
(45,58,0)
(2,151,0)
(72,69,0)
(114,144,0)
(176,8,0)
(59,180,0)
(124,70,0)
(180,20,0)
(144,125,0)
(112,162,0)
(158,105,0)
(130,152,0)
(174,132,0)
(71,121,0)
(34,93,0)
(167,72,0)
(72,180,0)
(156,28,0)
(139,20,0)
(127,21,0)
(84,98,0)
(14,8,0)
(18,74,0)
(123,174,0)
(17,83,0)
(12,98,0)
(69,174,0)
(76,63,0)
(70,125,0)
(1,98,0)
(72,167,0)
(60,80,0)
(6,140,0)
(4,160,0)
(146,140,0)
(130,98,0)
(163,98,0)
(40,8,0)
(88,112,0)
(80,24,0)
(116,125,0)
(88,105,0)
(23,93,0)
(149,58,0)
(133,183,0)
(38,32,0)
(153,162,0)
(23,32,0)
(170,180,0)
(56,164,0)
(87,98,0)
(115,156,0)
(46,144,0)
(148,69,0)
(105,67,0)
(111,170,0)
(69,72,0)
(24,80,0)
(43,59,0)
(183,15,0)
(73,1,0)
(119,47,0)
(96,33,0)
(64,144,0)
(36,34,0)
(147,139,0)
(172,133,0)
(178,134,0)
(183,134,0)
(140,44,0)
(59,9,0)
(169,20,0)
(164,180,0)
(125,98,0)
(47,174,0)
(67,98,0)
(181,34,0)
(66,70,0)
(71,177,0)
(48,8,0)
(53,24,0)
(105,126,0)
(21,20,0)
(122,144,0)
(67,5,0)
(93,74,0)
(131,88,0)
(143,32,0)
(185,39,0)
(88,147,0)
(55,23,0)
(179,74,0)
(184,8,0)
(121,71,0)
(11,8,0)
(92,9,0)
(157,28,0)
(152,130,0)
(134,183,0)
(125,144,0)
(37,98,0)
(93,98,0)
(74,93,0)
(142,26,0)
(9,59,0)
(128,112,0)
(173,98,0)
(24,53,0)
(116,66,0)
(130,50,0)
(0,162,0)
(109,75,0)
(175,58,0)
(32,8,0)
(8,42,0)
(35,27,0)
(66,116,0)
(54,22,0)
(95,97,0)
(65,53,0)
(67,5,1)
(133,93,1)
(57,99,1)
(136,93,1)
(21,180,1)
(43,164,1)
(109,66,1)
(53,67,1)
(101,29,1)
(88,174,1)
(58,45,1)
(32,143,1)
(46,49,1)
(111,21,1)
(181,76,1)
(175,58,1)
(178,172,1)
(131,117,1)
(130,50,1)
(133,183,1)
(7,28,1)
(88,112,1)
(118,174,1)
(181,7,1)
(144,93,1)
(112,128,1)
(155,34,1)
(106,25,1)
(144,114,1)
(150,164,1)
(99,70,1)
(172,87,1)
(114,106,1)
(9,92,1)
(9,112,1)
(185,130,1)
(108,13,1)
(148,187,1)
(64,46,1)
(43,71,1)
(47,119,1)
(115,171,1)
(156,115,1)
(83,17,1)
(34,32,1)
(56,138,1)
(72,69,1)
(74,179,1)
(17,136,1)
(123,24,1)
(80,77,1)
(151,2,1)
(23,32,1)
(155,23,1)
(141,124,1)
(29,97,1)
(85,147,1)
(121,150,1)
(147,88,1)
(124,125,1)
(103,182,1)
(152,68,1)
(125,144,1)
(182,183,1)
(133,103,1)
(61,1,1)
(71,121,1)
(9,174,1)
(118,105,1)
(161,59,1)
(4,155,1)
(180,72,1)
(130,152,1)
(170,111,1)
(120,67,1)
(60,53,1)
(77,60,1)
(105,67,1)
(26,142,1)
(1,62,1)
(159,133,1)
(27,35,1)
(100,112,1)
(54,155,1)
(181,109,1)
(107,145,1)
(13,43,1)
(49,159,1)
(87,101,1)
(25,64,1)
(23,93,1)
(128,52,1)
(80,67,1)
(116,57,1)
(175,186,1)
(28,157,1)
(127,139,1)
(159,41,1)
(154,24,1)
(69,174,1)
(24,53,1)
(122,114,1)
(22,112,1)
(39,129,1)
(97,89,1)
(41,133,1)
(164,180,1)
(55,34,1)
(96,83,1)
(181,118,1)
(187,22,1)
(70,125,1)
(22,105,1)
(140,6,1)
(34,36,1)
(73,28,1)
(145,44,1)
(28,156,1)
(83,93,1)
(53,65,1)
(181,96,1)
(119,123,1)
(183,134,1)
(186,58,1)
(90,175,1)
(140,125,1)
(70,141,1)
(158,154,1)
(24,80,1)
(134,178,1)
(21,127,1)
(38,27,1)
(78,90,1)
(104,54,1)
(34,93,1)
(35,31,1)
(59,9,1)
(66,116,1)
(22,174,1)
(179,18,1)
(170,180,1)
(157,156,1)
(66,70,1)
(168,50,1)
(68,168,1)
(164,56,1)
(88,105,1)
(92,108,1)
(6,146,1)
(22,104,1)
(89,95,1)
(19,83,1)
(129,185,1)
(45,149,1)
(116,125,1)
(138,180,1)
(69,148,1)
(54,4,1)
(102,61,1)
(12,78,1)
(62,73,1)
(105,158,1)
(93,74,1)
(51,118,1)
(149,151,1)
(142,115,1)
(2,39,1)
(9,105,1)
(59,180,1)
(31,100,1)
(156,26,1)
(18,102,1)
(171,51,1)
(143,38,1)
(88,131,1)
(50,19,1)
(65,120,1)
(44,81,1)
(76,159,1)
(23,55,1)
(5,107,1)
(69,112,1)
(69,105,1)
(113,170,1)
(54,100,1)
(51,32,1)
(113,22,1)
(81,140,1)
(183,15,1)
(146,66,1)
(139,85,1)
(72,167,1)
(36,181,1)
(147,180,1)
(95,12,1)
(144,122,1)
(117,161,1)
(174,47,1)
(143,100,2)
(133,93,2)
(22,112,2)
(38,100,2)
(106,159,2)
(151,83,2)
(99,70,2)
(133,103,2)
(116,70,2)
(12,78,2)
(55,34,2)
(144,114,2)
(123,24,2)
(180,22,2)
(147,88,2)
(101,83,2)
(164,22,2)
(95,83,2)
(72,69,2)
(156,115,2)
(9,174,2)
(27,100,2)
(28,100,2)
(183,134,2)
(47,24,2)
(4,155,2)
(103,83,2)
(31,100,2)
(9,22,2)
(36,100,2)
(102,28,2)
(116,125,2)
(89,83,2)
(120,66,2)
(13,22,2)
(144,159,2)
(71,121,2)
(139,22,2)
(156,26,2)
(92,22,2)
(147,22,2)
(183,15,2)
(149,83,2)
(6,66,2)
(1,28,2)
(9,105,2)
(19,83,2)
(2,83,2)
(70,159,2)
(187,22,2)
(124,159,2)
(175,58,2)
(67,66,2)
(24,80,2)
(18,28,2)
(93,28,2)
(21,22,2)
(155,100,2)
(29,83,2)
(175,83,2)
(152,83,2)
(23,93,2)
(93,74,2)
(158,24,2)
(114,159,2)
(115,100,2)
(69,22,2)
(170,180,2)
(88,22,2)
(23,34,2)
(57,70,2)
(49,159,2)
(78,83,2)
(81,66,2)
(70,125,2)
(131,22,2)
(26,100,2)
(28,156,2)
(133,83,2)
(59,22,2)
(60,53,2)
(69,112,2)
(35,100,2)
(105,67,2)
(145,66,2)
(140,66,2)
(50,83,2)
(181,100,2)
(67,5,2)
(76,159,2)
(5,66,2)
(118,66,2)
(115,118,2)
(179,28,2)
(133,183,2)
(108,22,2)
(28,118,2)
(161,22,2)
(109,66,2)
(39,83,2)
(64,159,2)
(24,66,2)
(157,100,2)
(68,83,2)
(43,22,2)
(71,164,2)
(12,83,2)
(85,22,2)
(156,118,2)
(141,159,2)
(9,112,2)
(121,164,2)
(186,83,2)
(154,24,2)
(17,28,2)
(7,28,2)
(23,32,2)
(134,83,2)
(142,118,2)
(59,180,2)
(80,67,2)
(107,66,2)
(171,118,2)
(157,118,2)
(105,24,2)
(178,83,2)
(61,28,2)
(69,105,2)
(156,100,2)
(80,53,2)
(87,101,2)
(122,159,2)
(21,180,2)
(147,180,2)
(88,174,2)
(127,22,2)
(146,66,2)
(168,83,2)
(51,118,2)
(65,66,2)
(59,9,2)
(24,53,2)
(32,100,2)
(174,24,2)
(44,66,2)
(83,28,2)
(142,100,2)
(69,174,2)
(46,159,2)
(130,83,2)
(41,83,2)
(125,159,2)
(148,22,2)
(22,174,2)
(51,100,2)
(26,118,2)
(96,83,2)
(119,24,2)
(174,47,2)
(159,133,2)
(136,28,2)
(183,83,2)
(34,93,2)
(88,112,2)
(88,105,2)
(56,22,2)
(45,83,2)
(77,53,2)
(66,116,2)
(73,28,2)
(90,83,2)
(34,32,2)
(66,70,2)
(74,28,2)
(66,159,2)
(159,83,2)
(150,164,2)
(34,100,2)
(117,22,2)
(129,83,2)
(72,22,2)
(130,50,2)
(170,22,2)
(83,93,2)
(172,83,2)
(138,22,2)
(58,83,2)
(180,72,2)
(97,83,2)
(53,67,2)
(111,22,2)
(72,167,2)
(25,159,2)
(185,83,2)
(171,100,2)
(140,125,2)
(62,28,2)
(87,83,2)
(125,144,2)
(182,83,2)
(144,93,2)
(164,180,2)
(22,105,2)
(130,152,2)
(53,66,2)
-----------------------------------
(0,if (data < 100)
(1,wsaDataInit = 1)
(2,AF_INET)
(3,inputBuffer)
(4,WSACleanup()
(5,atoi(inputBuffer)
(6,recvResult)
(7,break;)
(8,)
(9,data-1)
(10,dataBuffer)
(11,connectSocket)
(12,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(13,\'A\')
(14,tempInt)
(15,struct sockaddr*)
(16,service)
(17,INVALID_SOCKET)
(18,SOCK_STREAM)
(19,service)
(20,)
(21,printLine(dataBuffer)
(22,data < 100)
(23,CLOSE_SOCKET(connectSocket)
(24,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(25,CHAR_ARRAY_SIZE)
(26,&wsaData)
(27,wsaDataInit = 0)
(28,WSAStartup(MAKEWORD(2,2)
(29,TCP_PORT)
(30,if(globalTrue)
(31,wsaDataInit)
(32,connectSocket = INVALID_SOCKET)
(33,)
(34,connectSocket != INVALID_SOCKET)
(35,0)
(36,INVALID_SOCKET)
(37,if (connect(connectSocket, (struct sockaddr*)
(38,connectSocket)
(39,service.sin_family)
(40,if (connectSocket != INVALID_SOCKET)
(41,SOCKET_ERROR)
(42,)
(43,dataBuffer)
(44,inputBuffer[recvResult] = \'\\\\0\')
(45,sin_addr)
(46,connectSocket)
(47,-1)
(48,recvResult)
(49,recvResult)
(50,&service)
(51,2)
(52,data)
(53,tempInt > SHRT_MAX)
(54,data)
(55,connectSocket)
(56,NULL)
(57,0)
(58,service.sin_addr)
(59,memset(dataBuffer, \'A\', data-1)
(60,tempInt)
(61,connectSocket)
(62,1)
(63,)
(64,inputBuffer)
(65,SHRT_MAX)
(66,recvResult == SOCKET_ERROR || recvResult == 0)
(67,tempInt = atoi(inputBuffer)
(68,service)
(69,malloc(data)
(70,recvResult == SOCKET_ERROR)
(71,exit(-1)
(72,(char *)
(73,wsaDataInit)
(74,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(75,)
(76,break;)
(77,SHRT_MIN)
(78,inet_addr(IP_ADDRESS)
(79,)
(80,tempInt < SHRT_MIN)
(81,'\\\\0')
(82,do)
(83,connectSocket == INVALID_SOCKET)
(84,if (connectSocket == INVALID_SOCKET)
(85,'\\\\0')
(86,'A')
(87,service.sin_port = htons(TCP_PORT)
(88,data-1)
(89,sin_port)
(90,IP_ADDRESS)
(91,)
(92,1)
(93,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(94,\'\\\\0\')
(95,service)
(96,break;)
(97,service.sin_port)
(98,)
(99,recvResult)
(100,globalTrue)
(101,htons(TCP_PORT)
(102,AF_INET)
(103,sizeof(service)
(104,100)
(105,data = tempInt)
(106,1)
(107,inputBuffer)
(108,data)
(109,break;)
(110,inputBuffer[recvResult] = '\\\\0')
(111,dataBuffer)
(112,data = 0)
(113,RET)
(114,CHAR_ARRAY_SIZE - 1)
(115,MAKEWORD(2,2)
(116,recvResult == 0)
(117,data)
(118,0)
(119,1)
(120,tempInt)
(121,-1)
(122,0)
(123,data)
(124,recvResult)
(125,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(126,)
(127,dataBuffer)
(128,0)
(129,sin_family)
(130,memset(&service, 0, sizeof(service)
(131,1)
(132,)
(133,connect(connectSocket, (struct sockaddr*)
(134,&service)
(135,wsaDataInit)
(136,connectSocket)
(137,\'\\\\0\')
(138,dataBuffer)
(139,dataBuffer[data-1] = \'\\\\0\')
(140,inputBuffer[recvResult])
(141,SOCKET_ERROR)
(142,wsaData)
(143,INVALID_SOCKET)
(144,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(145,tempInt)
(146,inputBuffer)
(147,dataBuffer[data-1])
(148,data)
(149,service)
(150,1)
(151,service.sin_family = AF_INET)
(152,sizeof(service)
(153,data)
(154,data)
(155,wsaDataInit)
(156,WSAStartup(MAKEWORD(2,2)
(157,NO_ERROR)
(158,tempInt)
(159,connect(connectSocket, (struct sockaddr*)
(160,)
(161,dataBuffer)
(162,)
(163,if (WSAStartup(MAKEWORD(2,2)
(164,dataBuffer == NULL)
(165,if (recvResult == SOCKET_ERROR || recvResult == 0)
(166,dataBuffer[data-1] = '\\\\0')
(167,char *)
(168,0)
(169,if (dataBuffer == NULL)
(170,free(dataBuffer)
(171,2)
(172,connectSocket)
(173,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(174,data = -1)
(175,service.sin_addr.s_addr)
(176,wsaData)
(177,)
(178,service)
(179,IPPROTO_TCP)
(180,* dataBuffer = (char *)
(181,connectSocket)
(182,service)
(183,(struct sockaddr*)
(184,if (wsaDataInit)
(185,service)
(186,s_addr)
(187,dataBuffer)
(188,memset(dataBuffer, 'A', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^