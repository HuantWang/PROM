-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
37,38
37,39
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_12_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(12,27,0)
(38,10,0)
(19,49,0)
(26,49,0)
(43,11,0)
(17,24,0)
(50,29,0)
(27,35,0)
(20,24,0)
(29,8,0)
(9,42,0)
(49,41,0)
(2,26,0)
(46,11,0)
(14,23,0)
(36,30,0)
(53,23,0)
(36,49,0)
(23,42,0)
(3,21,0)
(39,36,0)
(36,3,0)
(27,12,0)
(29,3,0)
(16,21,0)
(44,49,0)
(11,47,0)
(30,27,0)
(48,34,0)
(33,26,0)
(22,6,0)
(30,18,0)
(26,30,0)
(15,21,0)
(6,24,0)
(25,3,0)
(5,29,0)
(52,44,0)
(49,44,0)
(34,21,0)
(47,34,0)
(7,21,0)
(45,47,0)
(6,21,0)
(29,30,0)
(28,8,0)
(0,3,0)
(47,11,0)
(4,36,0)
(8,13,0)
(35,27,0)
(32,44,0)
(10,21,0)
(1,30,0)
(21,42,0)
(29,49,0)
(24,6,0)
(10,3,0)
(54,6,0)
(51,36,0)
(27,30,0)
(36,13,0)
(31,42,0)
(50,5,1)
(32,19,1)
(27,35,1)
(35,1,1)
(34,48,1)
(36,49,1)
(40,23,1)
(8,28,1)
(30,27,1)
(17,54,1)
(10,38,1)
(26,30,1)
(29,3,1)
(24,20,1)
(4,39,1)
(36,3,1)
(22,3,1)
(20,17,1)
(29,50,1)
(29,49,1)
(43,46,1)
(36,51,1)
(36,30,1)
(45,6,1)
(28,29,1)
(54,22,1)
(33,2,1)
(25,49,1)
(47,11,1)
(39,26,1)
(23,14,1)
(2,34,1)
(52,32,1)
(38,26,1)
(44,52,1)
(26,49,1)
(49,44,1)
(29,30,1)
(5,36,1)
(37,10,1)
(38,8,1)
(10,3,1)
(3,0,1)
(51,4,1)
(11,43,1)
(1,40,1)
(48,47,1)
(19,40,1)
(0,25,1)
(25,30,1)
(14,53,1)
(6,24,1)
(26,33,1)
(27,12,1)
(46,45,1)
(26,30,2)
(5,26,2)
(51,26,2)
(29,49,2)
(29,30,2)
(10,3,2)
(52,40,2)
(36,30,2)
(50,26,2)
(44,40,2)
(26,49,2)
(28,26,2)
(4,26,2)
(39,26,2)
(29,26,2)
(27,12,2)
(27,40,2)
(27,35,2)
(49,40,2)
(1,40,2)
(6,24,2)
(8,26,2)
(35,40,2)
(47,11,2)
(32,40,2)
(29,3,2)
(19,40,2)
(30,27,2)
(36,3,2)
(36,26,2)
(49,44,2)
(36,49,2)
(30,40,2)
-----------------------------------
(0,"")
(1,data)
(2,data)
(3,dest[100] = "")
(4,source)
(5,dest)
(6,memset(source, \\\'A\\\', 100-1)
(7,dest)
(8,dest[data] = \\\'\\\\0\\\')
(9,data)
(10,printLine(dest)
(11,100-1)
(12,short)
(13,)
(14,0)
(15,source)
(16,if (data < 100)
(17,100)
(18,)
(19,data)
(20,1)
(21,)
(22,source)
(23,data = 0)
(24,100-1)
(25,dest)
(26,data < 100)
(27,(short)
(28,\\\'\\\\0\\\')
(29,dest[data])
(30,data = (short)
(31,if(globalReturnsTrueOrFalse()
(32,100)
(33,100)
(34,source[100-1] = \\\'\\\\0\\\')
(35,RAND32()
(36,memmove(dest, source, data)
(37,RET)
(38,dest)
(39,dest)
(40,globalReturnsTrueOrFalse()
(41,)
(42,)
(43,1)
(44,100-1)
(45,source)
(46,100)
(47,source[100-1])
(48,\\\'\\\\0\\\')
(49,data = 100-1)
(50,data)
(51,data)
(52,1)
(53,data)
(54,\\\'A\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^