-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_07_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
42,44
42,45
45,46
46,47
46,48
47,48
47,49
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,41,43,44,48,50,53,55,59,61,66,68,72,74,75,78,79,84,87,88,89,93,95,99,101
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
57,58
57,59
76,77
76,78
81,82
81,83
85,86
85,87
-----guardedBy-----
36,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_07_bad(){    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_07_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_07_bad
{    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(55,19,0)
(32,8,0)
(47,53,0)
(9,7,0)
(0,14,0)
(47,52,0)
(17,53,0)
(18,27,0)
(54,19,0)
(24,37,0)
(33,53,0)
(45,1,0)
(12,27,0)
(4,42,0)
(11,47,0)
(11,31,0)
(20,52,0)
(25,35,0)
(26,35,0)
(15,42,0)
(1,28,0)
(16,28,0)
(51,8,0)
(28,11,0)
(23,37,0)
(10,37,0)
(27,52,0)
(27,44,0)
(3,16,0)
(27,53,0)
(19,52,0)
(44,7,0)
(48,28,0)
(6,44,0)
(48,7,0)
(52,30,0)
(53,37,0)
(25,52,0)
(46,44,0)
(19,54,0)
(34,25,0)
(1,7,0)
(31,11,0)
(35,28,0)
(44,28,0)
(52,19,0)
(19,55,0)
(36,7,0)
(11,28,0)
(44,27,0)
(2,47,0)
(29,48,0)
(47,11,0)
(38,53,0)
(14,7,0)
(35,25,0)
(40,16,0)
(51,50,0)
(25,53,0)
(39,33,0)
(22,33,0)
(5,25,0)
(35,14,0)
(8,51,0)
(33,52,0)
(28,7,0)
(21,28,0)
(1,28,1)
(1,45,1)
(33,39,1)
(22,42,1)
(38,17,1)
(6,46,1)
(53,38,1)
(51,8,1)
(42,4,1)
(46,16,1)
(48,28,1)
(12,18,1)
(47,2,1)
(26,44,1)
(34,26,1)
(33,53,1)
(3,40,1)
(0,35,1)
(47,53,1)
(11,47,1)
(2,21,1)
(44,27,1)
(16,3,1)
(29,14,1)
(21,33,1)
(47,52,1)
(20,42,1)
(35,28,1)
(55,20,1)
(28,11,1)
(5,34,1)
(22,52,1)
(8,32,1)
(27,52,1)
(19,54,1)
(4,15,1)
(48,29,1)
(35,25,1)
(13,1,1)
(44,28,1)
(45,48,1)
(16,28,1)
(27,53,1)
(39,22,1)
(19,55,1)
(13,33,1)
(32,16,1)
(15,53,1)
(25,5,1)
(18,6,1)
(46,51,1)
(25,53,1)
(25,52,1)
(40,28,1)
(14,0,1)
(52,19,1)
(27,12,1)
(33,52,1)
(11,31,1)
(52,42,2)
(55,42,2)
(32,16,2)
(0,33,2)
(47,53,2)
(47,33,2)
(35,28,2)
(6,33,2)
(2,33,2)
(51,16,2)
(27,33,2)
(27,53,2)
(48,33,2)
(8,16,2)
(3,33,2)
(28,33,2)
(12,33,2)
(19,55,2)
(11,33,2)
(11,31,2)
(33,52,2)
(20,42,2)
(27,52,2)
(52,19,2)
(40,33,2)
(16,28,2)
(19,42,2)
(51,8,2)
(34,33,2)
(26,33,2)
(25,53,2)
(21,33,2)
(47,52,2)
(44,28,2)
(1,33,2)
(25,52,2)
(1,28,2)
(25,33,2)
(44,33,2)
(16,33,2)
(14,33,2)
(28,11,2)
(46,33,2)
(11,47,2)
(35,33,2)
(48,28,2)
(29,33,2)
(44,27,2)
(18,33,2)
(5,33,2)
(33,53,2)
(45,33,2)
(19,54,2)
(35,25,2)
-----------------------------------
(0,\'\\\\0\')
(1,free(dataBuffer)
(2,data)
(3,NULL)
(4,5)
(5,1)
(6,'A')
(7,)
(8,-1)
(9,if (dataBuffer == NULL)
(10,data)
(11,(char *)
(12,1)
(13,RET)
(14,dataBuffer[data-1] = \'\\\\0\')
(15,staticFive)
(16,dataBuffer == NULL)
(17,data)
(18,data)
(19,(short)
(20,data)
(21,dataBuffer)
(22,data)
(23,if (data < 100)
(24,if(staticFive==5)
(25,data-1)
(26,dataBuffer)
(27,data-1)
(28,* dataBuffer = (char *)
(29,dataBuffer)
(30,)
(31,char *)
(32,1)
(33,data < 100)
(34,data)
(35,dataBuffer[data-1])
(36,dataBuffer)
(37,)
(38,0)
(39,100)
(40,dataBuffer)
(41,'\\\\0')
(42,staticFive==5)
(43,\'A\')
(44,memset(dataBuffer, \'A\', data-1)
(45,dataBuffer)
(46,dataBuffer)
(47,malloc(data)
(48,printLine(dataBuffer)
(49,memset(dataBuffer, 'A', data-1)
(50,)
(51,exit(-1)
(52,data = (short)
(53,data = 0)
(54,short)
(55,RAND32()
(56,dataBuffer[data-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^