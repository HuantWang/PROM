-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_12_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a random number */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
35,36
35,37
36,37
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
50,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,16,20,25,28,29,32,37,40,41,45,47,51,52,54,58,60
-----computeFrom-----
12,13
12,14
23,24
23,25
35,36
35,37
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_12_bad(){    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random number */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_rand_12_bad()
CWE197_Numeric_Truncation_Error__short_rand_12_bad
{    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random number */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random number */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a random number */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(4,20,0)
(11,7,0)
(10,28,0)
(26,18,0)
(7,0,0)
(13,7,0)
(6,16,0)
(17,2,0)
(20,18,0)
(7,13,0)
(20,23,0)
(24,16,0)
(28,23,0)
(19,2,0)
(0,29,0)
(18,20,0)
(7,11,0)
(23,2,0)
(18,14,0)
(15,18,0)
(27,0,0)
(1,21,0)
(14,16,0)
(5,23,0)
(21,2,0)
(8,9,0)
(21,9,0)
(16,14,0)
(28,20,0)
(0,7,0)
(9,21,0)
(22,14,0)
(18,15,0)
(14,12,0)
(18,0,0)
(21,9,1)
(25,28,1)
(9,8,1)
(7,13,1)
(6,22,1)
(26,4,1)
(7,11,1)
(3,21,1)
(11,27,1)
(16,24,1)
(18,26,1)
(24,6,1)
(28,20,1)
(4,0,1)
(18,14,1)
(10,20,1)
(14,16,1)
(20,18,1)
(8,1,1)
(18,0,1)
(22,3,1)
(18,15,1)
(4,14,1)
(0,7,1)
(27,3,1)
(28,10,1)
(27,3,2)
(18,15,2)
(0,7,2)
(7,13,2)
(14,3,2)
(7,11,2)
(18,0,2)
(7,3,2)
(22,3,2)
(18,14,2)
(21,9,2)
(16,3,2)
(20,18,2)
(24,3,2)
(14,16,2)
(28,20,2)
(0,3,2)
(11,3,2)
(6,3,2)
-----------------------------------
(0,data = (short)
(1,data)
(2,)
(3,globalReturnsTrueOrFalse()
(4,charData)
(5,charData)
(6,CHAR_MAX)
(7,(short)
(8,1)
(9,-1)
(10,charData)
(11,RAND32()
(12,)
(13,short)
(14,data = CHAR_MAX-5)
(15,char)
(16,CHAR_MAX-5)
(17,if(globalReturnsTrueOrFalse()
(18,(char)
(19,data)
(20,charData = (char)
(21,data = -1)
(22,data)
(23,)
(24,5)
(25,RET)
(26,data)
(27,data)
(28,printHexCharLine(charData)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^