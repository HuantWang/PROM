-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_42_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
34,37
37,38
38,39
38,40
39,40
39,41
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
77,78
77,79
78,79
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,29,33,35,36,40,42,45,47,51,53,58,60,64,66,67,70,71,76,79,80,81,85,87,91,93
-----computeFrom-----
12,13
12,14
17,18
17,19
26,27
26,28
49,50
49,51
68,69
68,70
73,74
73,75
77,78
77,79
-----guardedBy-----
28,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_42_bad(){    short data;    /* Initialize data */    data = 0;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_42_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_42_bad
{    short data;    /* Initialize data */    data = 0;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(21,10,0)
(30,42,0)
(19,17,0)
(25,3,0)
(11,3,0)
(45,16,0)
(41,13,0)
(23,19,0)
(2,19,0)
(34,41,0)
(1,13,0)
(46,3,0)
(41,44,0)
(26,22,0)
(42,3,0)
(15,42,0)
(33,17,0)
(6,19,0)
(39,29,0)
(24,44,0)
(13,17,0)
(15,1,0)
(14,41,0)
(22,13,0)
(38,15,0)
(4,30,0)
(36,11,0)
(44,41,0)
(35,28,0)
(21,16,0)
(32,28,0)
(49,1,0)
(0,1,0)
(29,3,0)
(7,17,0)
(27,30,0)
(8,3,0)
(25,42,0)
(1,15,0)
(15,11,0)
(44,3,0)
(12,13,0)
(28,35,0)
(5,42,0)
(35,42,0)
(42,35,0)
(28,13,0)
(44,42,0)
(18,44,0)
(6,13,0)
(9,25,0)
(20,6,0)
(16,21,0)
(13,6,0)
(47,35,0)
(35,47,0)
(29,42,0)
(43,22,0)
(25,42,1)
(22,26,1)
(44,41,1)
(9,11,1)
(39,25,1)
(41,13,1)
(36,15,1)
(13,6,1)
(5,22,1)
(31,29,1)
(28,32,1)
(41,14,1)
(24,30,1)
(44,42,1)
(42,35,1)
(20,12,1)
(6,19,1)
(31,22,1)
(29,39,1)
(32,5,1)
(15,42,1)
(45,30,1)
(0,49,1)
(49,38,1)
(34,18,1)
(19,23,1)
(11,36,1)
(22,13,1)
(28,13,1)
(1,0,1)
(12,19,1)
(30,42,1)
(24,21,1)
(23,2,1)
(1,13,1)
(14,34,1)
(25,9,1)
(18,24,1)
(4,27,1)
(35,28,1)
(35,47,1)
(27,42,1)
(16,45,1)
(6,20,1)
(43,13,1)
(26,43,1)
(38,44,1)
(21,16,1)
(15,1,1)
(29,42,1)
(30,4,1)
(6,19,2)
(42,35,2)
(14,22,2)
(29,42,2)
(27,22,2)
(18,22,2)
(11,22,2)
(38,22,2)
(24,22,2)
(42,22,2)
(28,13,2)
(15,42,2)
(45,30,2)
(35,28,2)
(22,13,2)
(44,41,2)
(30,42,2)
(29,22,2)
(25,22,2)
(4,22,2)
(44,22,2)
(0,22,2)
(30,22,2)
(41,22,2)
(9,22,2)
(21,16,2)
(41,13,2)
(35,22,2)
(34,22,2)
(36,22,2)
(1,13,2)
(16,30,2)
(21,30,2)
(15,1,2)
(1,22,2)
(44,42,2)
(39,22,2)
(28,22,2)
(49,22,2)
(25,42,2)
(35,47,2)
(32,22,2)
(5,22,2)
(13,6,2)
(15,22,2)
-----------------------------------
(0,1)
(1,data-1)
(2,data)
(3,)
(4,NULL)
(5,dataBuffer)
(6,badSource(data)
(7,if (data < 100)
(8,dataBuffer)
(9,dataBuffer)
(10,)
(11,dataBuffer[data-1] = '\\\\0')
(12,data)
(13,data = badSource(data)
(14,1)
(15,dataBuffer[data-1])
(16,-1)
(17,)
(18,\'A\')
(19,data = 0)
(20,data)
(21,exit(-1)
(22,data < 100)
(23,0)
(24,dataBuffer)
(25,printLine(dataBuffer)
(26,100)
(27,dataBuffer)
(28,malloc(data)
(29,free(dataBuffer)
(30,dataBuffer == NULL)
(31,RET)
(32,data)
(33,data)
(34,data)
(35,(char *)
(36,\'\\\\0\')
(37,'A')
(38,dataBuffer)
(39,dataBuffer)
(40,'\\\\0')
(41,data-1)
(42,* dataBuffer = (char *)
(43,data)
(44,memset(dataBuffer, 'A', data-1)
(45,1)
(46,if (dataBuffer == NULL)
(47,char *)
(48,dataBuffer[data-1] = \'\\\\0\')
(49,data)
(50,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^