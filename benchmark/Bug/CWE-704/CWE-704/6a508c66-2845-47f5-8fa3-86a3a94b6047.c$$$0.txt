-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a value input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
65,67
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
66,76
66,77
66,78
66,79
66,80
66,81
67,68
68,69
68,70
69,70
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
93,94
96,97
97,98
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
124,126
125,126
127,128
129,130
129,131
130,131
130,132
131,132
131,133
131,134
131,135
132,133
134,135
136,137
136,138
137,138
137,139
138,139
140,141
142,143
143,144
145,146
146,147
147,148
149,150
151,152
153,154
153,155
154,155
154,156
155,156
155,157
155,158
156,157
158,159
160,161
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
171,172
173,174
175,176
177,178
179,180
179,181
180,181
180,182
181,182
183,184
185,186
187,188
188,189
188,190
189,190
191,192
191,193
191,194
191,195
191,196
192,193
194,195
196,197
198,199
198,200
199,200
203,204
203,205
204,205
204,206
205,206
205,207
206,207
208,209
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
221,222
224,225
225,226
225,227
226,227
228,229
228,230
229,230
231,232
233,234
233,235
233,236
234,235
234,236
235,236
235,237
236,237
238,239
240,241
240,242
241,242
243,244
245,246
246,247
247,248
247,249
248,249
250,251
252,253
253,254
254,255
254,256
255,256
257,258
260,261
260,262
261,262
261,263
262,263
264,265
266,267
267,268
268,269
268,270
269,270
271,272
273,274
273,275
274,275
274,276
275,276
277,278
279,280
280,281
281,282
281,283
282,283
284,285
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
294,296
295,296
296,297
296,298
298,299
298,300
300,301
301,302
301,303
302,303
305,306
305,307
305,308
305,309
305,310
305,311
306,307
307,308
307,309
309,310
309,311
311,312
313,314
314,315
314,316
316,317
316,318
316,319
318,319
320,321
322,323
323,324
323,325
323,326
323,327
324,325
326,327
329,330
329,331
332,333
333,334
333,335
334,335
334,336
335,336
337,338
337,339
341,342
341,343
342,343
342,344
343,344
346,347
346,348
347,348
348,349
348,350
348,351
348,352
349,350
351,352
353,354
355,356
357,358
358,359
358,360
359,360
359,361
360,361
362,363
365,366
366,367
366,368
367,368
369,370
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,32,36,38,42,44,47,51,53,56,59,61,64,70,73,75,77,79,83,85,87,91,94,95,99,104,105,107,113,114,115,117,122,123,126,128,133,135,139,141,144,148,150,152,157,159,161,163,165,169,172,174,176,178,182,184,186,190,193,195,197,200,201,202,207,209,212,213,215,220,222,223,227,230,232,237,239,242,244,249,251,256,258,259,263,265,270,272,276,278,283,285,290,291,293,297,299,303,304,308,310,312,315,317,319,321,325,327,328,330,331,336,338,339,340,344,345,350,352,354,356,361,363,364,368,370
-----computeFrom-----
18,19
18,20
68,69
68,70
81,82
81,83
101,102
101,103
109,110
109,111
119,120
119,121
130,131
130,132
154,155
154,156
167,168
167,169
180,181
180,182
188,189
188,190
198,199
198,200
204,205
204,206
205,206
205,207
210,211
210,212
217,218
217,219
225,226
225,227
234,235
234,236
235,236
235,237
240,241
240,242
247,248
247,249
254,255
254,256
261,262
261,263
274,275
274,276
287,288
287,289
329,330
329,331
333,334
333,335
337,338
337,339
342,343
342,344
358,359
358,360
-----guardedBy-----
263,272
276,285
344,363
-----guardedByNegation-----
242,258
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType myUnion;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType myUnion;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(10,74,0)
(180,26,0)
(185,94,0)
(157,8,0)
(42,185,0)
(197,1,0)
(84,115,0)
(105,201,0)
(143,151,0)
(77,115,0)
(74,186,0)
(83,143,0)
(207,66,0)
(120,203,0)
(70,105,0)
(24,43,0)
(49,64,0)
(157,185,0)
(26,135,0)
(80,169,0)
(57,207,0)
(69,131,0)
(204,5,0)
(124,178,0)
(46,120,0)
(0,214,0)
(22,131,0)
(60,212,0)
(180,138,0)
(139,45,0)
(93,43,0)
(140,93,0)
(117,43,0)
(157,186,0)
(174,121,0)
(207,203,0)
(208,22,0)
(219,157,0)
(120,22,0)
(88,36,0)
(202,186,0)
(173,64,0)
(170,26,0)
(47,121,0)
(132,40,0)
(53,156,0)
(21,149,0)
(16,91,0)
(87,178,0)
(187,121,0)
(92,138,0)
(148,214,0)
(99,137,0)
(200,76,0)
(146,43,0)
(96,203,0)
(158,8,0)
(100,35,0)
(52,43,0)
(105,43,0)
(109,18,0)
(152,216,0)
(3,162,0)
(142,212,0)
(68,84,0)
(101,91,0)
(112,203,0)
(33,1,0)
(74,216,0)
(119,154,0)
(163,9,0)
(11,121,0)
(141,7,0)
(30,121,0)
(23,219,0)
(184,13,0)
(5,186,0)
(171,13,0)
(220,55,0)
(147,43,0)
(119,147,0)
(186,137,0)
(17,186,0)
(62,121,0)
(1,197,0)
(91,101,0)
(185,42,0)
(175,124,0)
(180,212,0)
(36,115,0)
(214,0,0)
(107,121,0)
(161,43,0)
(131,149,0)
(125,121,0)
(108,216,0)
(39,183,0)
(209,186,0)
(188,202,0)
(95,189,0)
(145,133,0)
(165,147,0)
(205,193,0)
(29,183,0)
(129,22,0)
(155,112,0)
(156,0,0)
(151,186,0)
(106,136,0)
(31,6,0)
(0,43,0)
(9,163,0)
(101,136,0)
(120,162,0)
(75,171,0)
(203,149,0)
(54,151,0)
(94,185,0)
(6,102,0)
(144,74,0)
(17,110,0)
(163,165,0)
(115,43,0)
(194,120,0)
(176,6,0)
(63,22,0)
(14,187,0)
(151,143,0)
(202,187,0)
(192,94,0)
(164,187,0)
(172,137,0)
(216,74,0)
(13,171,0)
(44,138,0)
(130,193,0)
(185,157,0)
(217,121,0)
(9,147,0)
(26,122,0)
(41,43,0)
(152,76,0)
(105,7,0)
(65,19,0)
(101,64,0)
(2,202,0)
(182,43,0)
(180,119,0)
(179,123,0)
(212,138,0)
(51,5,0)
(193,115,0)
(190,216,0)
(122,26,0)
(71,189,0)
(90,112,0)
(67,152,0)
(59,207,0)
(81,43,0)
(166,121,0)
(124,115,0)
(34,9,0)
(61,119,0)
(211,1,0)
(40,147,0)
(85,121,0)
(149,138,0)
(97,160,0)
(115,124,0)
(36,93,0)
(159,84,0)
(113,165,0)
(48,45,0)
(191,11,0)
(7,105,0)
(215,119,0)
(197,18,0)
(72,180,0)
(167,156,0)
(189,203,0)
(165,163,0)
(20,102,0)
(76,121,0)
(195,89,0)
(8,157,0)
(160,216,0)
(116,84,0)
(153,147,0)
(68,193,0)
(178,124,0)
(38,74,0)
(206,76,0)
(218,137,0)
(45,43,0)
(168,197,0)
(73,201,0)
(79,190,0)
(86,118,0)
(199,152,0)
(124,216,0)
(114,190,0)
(150,124,0)
(216,43,0)
(15,36,0)
(198,122,0)
(203,189,0)
(186,43,0)
(160,127,0)
(171,117,0)
(137,186,0)
(134,17,0)
(78,165,0)
(126,151,0)
(208,131,0)
(98,146,0)
(147,40,0)
(210,131,0)
(64,101,0)
(84,68,0)
(4,11,0)
(121,138,0)
(27,157,0)
(102,131,0)
(82,123,0)
(201,105,0)
(177,121,0)
(207,22,0)
(12,102,0)
(58,121,0)
(157,219,0)
(111,121,0)
(18,131,0)
(162,66,0)
(160,76,0)
(103,131,0)
(193,68,0)
(196,9,0)
(37,124,0)
(50,178,0)
(123,180,0)
(28,208,0)
(56,13,0)
(181,43,0)
(104,207,0)
(183,146,0)
(213,117,0)
(102,6,0)
(17,187,0)
(136,101,0)
(2,195,1)
(195,91,1)
(91,101,1)
(100,5,1)
(90,18,1)
(172,99,1)
(160,76,1)
(186,137,1)
(72,123,1)
(200,187,1)
(8,158,1)
(141,70,1)
(105,7,1)
(204,51,1)
(26,122,1)
(63,129,1)
(46,207,1)
(167,53,1)
(144,10,1)
(190,216,1)
(22,63,1)
(185,42,1)
(73,5,1)
(114,79,1)
(34,196,1)
(101,64,1)
(128,26,1)
(188,2,1)
(180,26,1)
(79,216,1)
(5,204,1)
(184,56,1)
(117,213,1)
(128,119,1)
(214,148,1)
(151,54,1)
(45,48,1)
(180,119,1)
(173,76,1)
(151,186,1)
(158,157,1)
(164,14,1)
(175,178,1)
(17,186,1)
(124,216,1)
(48,139,1)
(112,155,1)
(148,156,1)
(218,209,1)
(68,84,1)
(205,130,1)
(155,90,1)
(10,108,1)
(165,147,1)
(2,65,1)
(171,13,1)
(2,80,1)
(87,50,1)
(97,152,1)
(203,189,1)
(157,219,1)
(178,87,1)
(32,160,1)
(213,171,1)
(91,16,1)
(115,124,1)
(104,57,1)
(159,116,1)
(219,23,1)
(78,147,1)
(84,159,1)
(207,59,1)
(185,94,1)
(216,74,1)
(173,128,1)
(202,186,1)
(126,8,1)
(61,163,1)
(212,60,1)
(160,216,1)
(53,117,1)
(1,33,1)
(88,15,1)
(67,202,1)
(20,12,1)
(101,136,1)
(109,197,1)
(2,100,1)
(16,101,1)
(65,190,1)
(122,198,1)
(11,4,1)
(191,212,1)
(137,172,1)
(39,105,1)
(202,187,1)
(9,147,1)
(84,115,1)
(33,211,1)
(211,168,1)
(143,83,1)
(31,20,1)
(75,13,1)
(8,157,1)
(49,173,1)
(215,61,1)
(93,140,1)
(86,8,1)
(176,31,1)
(152,199,1)
(96,180,1)
(28,162,1)
(119,215,1)
(113,78,1)
(183,29,1)
(94,192,1)
(120,194,1)
(124,175,1)
(207,203,1)
(143,151,1)
(112,203,1)
(197,1,1)
(180,72,1)
(29,39,1)
(54,126,1)
(99,218,1)
(2,145,1)
(152,76,1)
(32,152,1)
(206,200,1)
(187,164,1)
(80,143,1)
(71,95,1)
(25,208,1)
(59,104,1)
(82,32,1)
(70,201,1)
(194,46,1)
(198,170,1)
(150,77,1)
(15,68,1)
(199,67,1)
(163,9,1)
(163,165,1)
(105,201,1)
(153,93,1)
(6,176,1)
(56,146,1)
(193,205,1)
(146,98,1)
(152,216,1)
(40,132,1)
(36,88,1)
(60,142,1)
(179,82,1)
(120,22,1)
(157,186,1)
(106,64,1)
(209,45,1)
(98,183,1)
(5,186,1)
(124,178,1)
(82,220,1)
(145,68,1)
(156,167,1)
(51,186,1)
(13,184,1)
(7,141,1)
(27,0,1)
(23,185,1)
(83,151,1)
(102,6,1)
(2,86,1)
(64,49,1)
(170,163,1)
(136,106,1)
(3,120,1)
(140,36,1)
(37,150,1)
(171,75,1)
(2,128,1)
(147,40,1)
(208,28,1)
(119,147,1)
(168,102,1)
(12,22,1)
(134,202,1)
(202,188,1)
(57,112,1)
(190,114,1)
(0,214,1)
(201,73,1)
(129,203,1)
(157,185,1)
(14,11,1)
(120,203,1)
(4,191,1)
(108,143,1)
(28,112,1)
(67,17,1)
(123,179,1)
(193,115,1)
(76,206,1)
(208,22,1)
(220,32,1)
(77,190,1)
(132,153,1)
(50,37,1)
(74,186,1)
(160,97,1)
(9,34,1)
(180,212,1)
(165,113,1)
(17,187,1)
(189,71,1)
(95,96,1)
(18,109,1)
(116,193,1)
(17,134,1)
(36,115,1)
(130,115,1)
(38,144,1)
(74,38,1)
(162,3,1)
(68,193,1)
(207,22,1)
(196,165,1)
(192,27,1)
(139,91,1)
(0,5,2)
(54,8,2)
(8,5,2)
(186,91,2)
(106,128,2)
(80,143,2)
(137,91,2)
(124,178,2)
(120,112,2)
(148,5,2)
(183,5,2)
(87,190,2)
(9,147,2)
(8,157,2)
(27,5,2)
(186,137,2)
(184,5,2)
(115,190,2)
(209,91,2)
(68,84,2)
(56,5,2)
(126,8,2)
(185,5,2)
(93,68,2)
(124,190,2)
(216,74,2)
(17,202,2)
(74,143,2)
(17,187,2)
(37,190,2)
(88,68,2)
(160,76,2)
(145,68,2)
(117,5,2)
(144,143,2)
(157,219,2)
(128,68,2)
(167,5,2)
(157,185,2)
(101,128,2)
(185,94,2)
(10,143,2)
(101,64,2)
(114,143,2)
(120,22,2)
(13,5,2)
(16,128,2)
(65,190,2)
(98,5,2)
(192,5,2)
(84,115,2)
(77,190,2)
(185,42,2)
(214,5,2)
(163,165,2)
(105,201,2)
(160,216,2)
(113,68,2)
(198,163,2)
(79,143,2)
(213,5,2)
(115,124,2)
(3,112,2)
(68,190,2)
(5,186,2)
(180,26,2)
(195,91,2)
(70,5,2)
(40,68,2)
(193,190,2)
(83,8,2)
(194,112,2)
(108,143,2)
(202,186,2)
(171,13,2)
(78,68,2)
(173,128,2)
(196,165,2)
(124,216,2)
(102,6,2)
(162,112,2)
(68,193,2)
(190,143,2)
(86,8,2)
(84,193,2)
(147,68,2)
(23,5,2)
(39,5,2)
(163,68,2)
(150,190,2)
(73,5,2)
(152,216,2)
(147,40,2)
(119,147,2)
(15,68,2)
(203,189,2)
(5,91,2)
(157,186,2)
(190,216,2)
(202,187,2)
(139,91,2)
(64,128,2)
(61,163,2)
(143,8,2)
(151,8,2)
(146,5,2)
(46,112,2)
(207,203,2)
(34,165,2)
(38,143,2)
(50,190,2)
(215,163,2)
(26,163,2)
(119,163,2)
(219,5,2)
(105,5,2)
(216,143,2)
(49,128,2)
(91,128,2)
(157,5,2)
(100,5,2)
(175,190,2)
(163,9,2)
(132,68,2)
(151,186,2)
(116,193,2)
(204,91,2)
(136,128,2)
(140,68,2)
(158,5,2)
(0,214,2)
(141,5,2)
(17,186,2)
(207,112,2)
(152,76,2)
(178,190,2)
(29,5,2)
(134,202,2)
(153,68,2)
(207,22,2)
(112,203,2)
(51,91,2)
(45,91,2)
(165,147,2)
(171,5,2)
(205,190,2)
(104,112,2)
(180,119,2)
(208,22,2)
(53,5,2)
(97,152,2)
(99,91,2)
(165,68,2)
(101,136,2)
(156,5,2)
(75,5,2)
(159,193,2)
(26,122,2)
(48,91,2)
(36,68,2)
(120,203,2)
(143,151,2)
(9,165,2)
(74,186,2)
(160,152,2)
(91,101,2)
(7,5,2)
(201,5,2)
(172,91,2)
(170,163,2)
(94,5,2)
(220,32,2)
(57,112,2)
(122,163,2)
(180,212,2)
(105,7,2)
(36,115,2)
(130,190,2)
(218,91,2)
(193,115,2)
(59,112,2)
(197,1,2)
-----------------------------------
(0,service.sin_port = htons(TCP_PORT)
(1,100-1)
(2,listenSocket)
(3,\\\'\\\\0\\\')
(4,0)
(5,listenSocket == INVALID_SOCKET)
(6,100-1)
(7,sizeof(service)
(8,bind(listenSocket, (struct sockaddr*)
(9,tempInt < SHRT_MIN)
(10,listenSocket)
(11,wsaDataInit = 0)
(12,source)
(13,service.sin_addr)
(14,listenSocket)
(15,inputBuffer)
(16,NO_ERROR)
(17,CLOSE_SOCKET(listenSocket)
(18,source[100-1] = \\\'\\\\0\\\')
(19,)
(20,\\\'A\\\')
(21,data)
(22,dest[100] = "")
(23,service)
(24,if (listen(listenSocket, LISTEN_BACKLOG)
(25,RET)
(26,data = -1)
(27,listenSocket)
(28,dest)
(29,sin_family)
(30,wsaDataInit)
(31,100)
(32,wsaDataInit)
(33,1)
(34,SHRT_MIN)
(35,)
(36,inputBuffer[recvResult])
(37,inputBuffer)
(38,NULL)
(39,service)
(40,atoi(inputBuffer)
(41,if (listenSocket == INVALID_SOCKET)
(42,struct sockaddr*)
(43,)
(44,myUnion)
(45,wsaDataInit = 1)
(46,dest)
(47,if (acceptSocket != INVALID_SOCKET)
(48,1)
(49,2)
(50,CHAR_ARRAY_SIZE)
(51,listenSocket)
(52,if (WSAStartup(MAKEWORD(2,2)
(53,service)
(54,LISTEN_BACKLOG)
(55,)
(56,service)
(57,dest)
(58,acceptSocket)
(59,data)
(60,0)
(61,data)
(62,listenSocket)
(63,"")
(64,MAKEWORD(2,2)
(65,break;)
(66,)
(67,acceptSocket)
(68,recvResult == SOCKET_ERROR || recvResult == 0)
(69,source)
(70,0)
(71,unionSecond)
(72,data)
(73,service)
(74,accept(listenSocket, NULL, NULL)
(75,s_addr)
(76,acceptSocket = INVALID_SOCKET)
(77,recvResult)
(78,tempInt)
(79,acceptSocket)
(80,break;)
(81,if (acceptSocket == SOCKET_ERROR)
(82,myUnion)
(83,SOCKET_ERROR)
(84,recvResult == 0)
(85,if (wsaDataInit)
(86,break;)
(87,1)
(88,recvResult)
(89,)
(90,data)
(91,WSAStartup(MAKEWORD(2,2)
(92,data)
(93,inputBuffer[recvResult] = \\\'\\\\0\\\')
(94,&service)
(95,myUnion)
(96,data)
(97,acceptSocket)
(98,AF_INET)
(99,SOCK_STREAM)
(100,break;)
(101,WSAStartup(MAKEWORD(2,2)
(102,memset(source, \\\'A\\\', 100-1)
(103,if (data < 100)
(104,source)
(105,memset(&service, 0, sizeof(service)
(106,wsaData)
(107,inputBuffer)
(108,acceptSocket)
(109,\\\'\\\\0\\\')
(110,)
(111,do)
(112,data < 100)
(113,SHRT_MAX)
(114,SOCKET_ERROR)
(115,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(116,recvResult)
(117,service.sin_addr.s_addr = INADDR_ANY)
(118,)
(119,data = tempInt)
(120,dest[data])
(121,)
(122,-1)
(123,myUnion.unionFirst)
(124,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(125,service)
(126,listenSocket)
(127,)
(128,0)
(129,dest)
(130,recvResult)
(131,)
(132,inputBuffer)
(133,)
(134,listenSocket)
(135,)
(136,&wsaData)
(137,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(138,)
(139,wsaDataInit)
(140,\\\'\\\\0\\\')
(141,service)
(142,data)
(143,listen(listenSocket, LISTEN_BACKLOG)
(144,NULL)
(145,break;)
(146,service.sin_family = AF_INET)
(147,tempInt = atoi(inputBuffer)
(148,TCP_PORT)
(149,)
(150,acceptSocket)
(151,listen(listenSocket, LISTEN_BACKLOG)
(152,acceptSocket != INVALID_SOCKET)
(153,tempInt)
(154,)
(155,100)
(156,service.sin_port)
(157,bind(listenSocket, (struct sockaddr*)
(158,SOCKET_ERROR)
(159,0)
(160,CLOSE_SOCKET(acceptSocket)
(161,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(162,dest[data] = \\\'\\\\0\\\')
(163,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(164,INVALID_SOCKET)
(165,tempInt > SHRT_MAX)
(166,wsaData)
(167,sin_port)
(168,source)
(169,)
(170,data)
(171,service.sin_addr.s_addr)
(172,IPPROTO_TCP)
(173,2)
(174,tempInt)
(175,0)
(176,1)
(177,recvResult)
(178,CHAR_ARRAY_SIZE - 1)
(179,unionFirst)
(180,myUnion.unionFirst = data)
(181,if (bind(listenSocket, (struct sockaddr*)
(182,if (recvResult == SOCKET_ERROR || recvResult == 0)
(183,service.sin_family)
(184,sin_addr)
(185,(struct sockaddr*)
(186,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(187,listenSocket = INVALID_SOCKET)
(188,INVALID_SOCKET)
(189,myUnion.unionSecond)
(190,acceptSocket == SOCKET_ERROR)
(191,wsaDataInit)
(192,service)
(193,recvResult == SOCKET_ERROR)
(194,data)
(195,break;)
(196,tempInt)
(197,source[100-1])
(198,1)
(199,INVALID_SOCKET)
(200,acceptSocket)
(201,&service)
(202,listenSocket != INVALID_SOCKET)
(203,data = myUnion.unionSecond)
(204,INVALID_SOCKET)
(205,SOCKET_ERROR)
(206,INVALID_SOCKET)
(207,strncpy(dest, source, data)
(208,printLine(dest)
(209,listenSocket)
(210,dest)
(211,100)
(212,data = 0)
(213,INADDR_ANY)
(214,htons(TCP_PORT)
(215,tempInt)
(216,acceptSocket = accept(listenSocket, NULL, NULL)
(217,if (listenSocket != INVALID_SOCKET)
(218,AF_INET)
(219,sizeof(service)
(220,WSACleanup()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^