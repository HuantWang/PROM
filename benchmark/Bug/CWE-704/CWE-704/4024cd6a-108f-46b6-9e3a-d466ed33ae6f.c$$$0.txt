-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
37,38
37,39
38,39
41,42
41,43
41,44
41,45
41,46
41,47
42,43
43,44
43,45
45,46
45,47
45,48
48,49
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
88,89
88,90
89,90
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,29,33,34,35,39,40,44,46,47,51,53,56,58,62,64,69,71,75,77,78,81,82,87,90,91,92,96,98,102,104
-----computeFrom-----
12,13
12,14
23,24
23,25
37,38
37,39
60,61
60,62
79,80
79,81
84,85
84,86
88,89
88,90
-----guardedBy-----
39,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,46,0)
(54,26,0)
(48,11,0)
(12,10,0)
(39,44,0)
(3,26,0)
(24,39,0)
(14,3,0)
(42,26,0)
(52,26,0)
(43,16,0)
(53,28,0)
(16,44,0)
(30,10,0)
(7,44,0)
(39,42,0)
(32,51,0)
(5,11,0)
(44,10,0)
(19,14,0)
(0,11,0)
(21,4,0)
(36,28,0)
(38,3,0)
(20,8,0)
(40,23,0)
(3,14,0)
(52,47,0)
(56,3,0)
(26,11,0)
(52,6,0)
(41,35,0)
(47,52,0)
(55,48,0)
(45,10,0)
(4,10,0)
(6,52,0)
(25,46,0)
(3,11,0)
(14,51,0)
(14,44,0)
(50,18,0)
(23,26,0)
(42,18,0)
(22,0,0)
(9,6,0)
(49,10,0)
(0,26,0)
(27,42,0)
(6,51,0)
(16,51,0)
(48,26,0)
(44,8,0)
(6,44,0)
(28,53,0)
(15,16,0)
(37,14,0)
(31,39,0)
(26,52,0)
(13,11,0)
(18,11,0)
(2,46,0)
(39,51,0)
(42,39,0)
(8,44,0)
(35,51,0)
(29,23,0)
(53,33,0)
(51,46,0)
(51,35,0)
(3,14,1)
(40,29,1)
(15,30,1)
(16,51,1)
(56,53,1)
(16,44,1)
(29,26,1)
(39,44,1)
(37,19,1)
(17,16,1)
(41,32,1)
(19,38,1)
(52,6,1)
(14,37,1)
(39,31,1)
(50,42,1)
(23,40,1)
(39,51,1)
(54,16,1)
(42,39,1)
(6,51,1)
(21,1,1)
(17,48,1)
(51,35,1)
(6,9,1)
(0,22,1)
(8,20,1)
(35,41,1)
(28,36,1)
(14,44,1)
(31,24,1)
(52,47,1)
(26,52,1)
(9,54,1)
(12,4,1)
(36,23,1)
(38,56,1)
(1,51,1)
(7,1,1)
(27,3,1)
(16,43,1)
(15,12,1)
(3,26,1)
(43,15,1)
(0,26,1)
(56,23,1)
(55,0,1)
(4,21,1)
(48,26,1)
(6,44,1)
(24,27,1)
(23,26,1)
(53,28,1)
(44,8,1)
(18,50,1)
(42,26,1)
(30,44,1)
(22,18,1)
(20,7,1)
(48,55,1)
(14,51,1)
(51,35,2)
(52,6,2)
(53,23,2)
(16,44,2)
(3,14,2)
(50,16,2)
(42,26,2)
(42,16,2)
(24,16,2)
(8,1,2)
(0,26,2)
(21,1,2)
(20,1,2)
(48,26,2)
(38,16,2)
(26,52,2)
(18,16,2)
(22,16,2)
(55,16,2)
(40,16,2)
(0,16,2)
(54,16,2)
(37,16,2)
(39,44,2)
(16,51,2)
(42,39,2)
(39,51,2)
(53,28,2)
(4,1,2)
(44,8,2)
(36,23,2)
(23,16,2)
(23,26,2)
(14,44,2)
(3,26,2)
(6,51,2)
(44,1,2)
(28,23,2)
(12,1,2)
(9,16,2)
(52,16,2)
(52,47,2)
(6,44,2)
(31,16,2)
(3,16,2)
(56,16,2)
(30,1,2)
(14,51,2)
(19,16,2)
(39,16,2)
(26,16,2)
(29,16,2)
(7,1,2)
(6,16,2)
(48,16,2)
(14,16,2)
(27,16,2)
-----------------------------------
(0,printLine(dataBuffer)
(1,6)
(2,if (data < 100)
(3,memset(dataBuffer, \\\'A\\\', data-1)
(4,printLine("Benign, fixed string")
(5,dataBuffer)
(6,malloc(data)
(7,data)
(8,-1)
(9,data)
(10,)
(11,)
(12,break;)
(13,if (dataBuffer == NULL)
(14,data-1)
(15,data)
(16,data < 100)
(17,RET)
(18,dataBuffer[data-1] = \\\'\\\\0\\\')
(19,data)
(20,1)
(21,"Benign, fixed string")
(22,dataBuffer)
(23,dataBuffer == NULL)
(24,data)
(25,data)
(26,* dataBuffer = (char *)
(27,dataBuffer)
(28,-1)
(29,dataBuffer)
(30,break;)
(31,1)
(32,data)
(33,)
(34,switch(6)
(35,-1)
(36,1)
(37,1)
(38,\\\'A\\\')
(39,data-1)
(40,NULL)
(41,1)
(42,dataBuffer[data-1])
(43,100)
(44,data = -1)
(45,case 6:)
(46,)
(47,char *)
(48,free(dataBuffer)
(49,default:)
(50,\\\'\\\\0\\\')
(51,data = -1)
(52,(char *)
(53,exit(-1)
(54,dataBuffer)
(55,dataBuffer)
(56,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^