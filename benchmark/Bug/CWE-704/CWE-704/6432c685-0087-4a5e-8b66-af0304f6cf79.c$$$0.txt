-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,37,39,42,44,46,48,52,54,55,57,58,63,65,66,67,71,72,77,79,81,83,88,90,91,95,97
-----computeFrom-----
12,13
12,14
22,23
22,24
56,57
56,58
60,61
60,62
64,65
64,66
69,70
69,71
85,86
85,87
-----guardedBy-----
71,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_strncpy_08_bad()
CWE194_Unexpected_Sign_Extension__rand_strncpy_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(47,16,0)
(42,14,0)
(33,0,0)
(15,6,0)
(6,20,0)
(4,45,0)
(22,26,0)
(46,1,0)
(20,6,0)
(38,27,0)
(48,1,0)
(45,18,0)
(11,0,0)
(16,14,0)
(31,22,0)
(35,27,0)
(36,18,0)
(22,44,0)
(3,45,0)
(45,34,0)
(13,26,0)
(19,0,0)
(23,11,0)
(21,27,0)
(20,0,0)
(7,18,0)
(8,37,0)
(43,38,0)
(29,34,0)
(45,27,0)
(32,20,0)
(45,14,0)
(5,38,0)
(27,1,0)
(38,14,0)
(38,18,0)
(14,37,0)
(2,37,0)
(38,41,0)
(37,14,0)
(0,1,0)
(26,22,0)
(14,40,0)
(28,16,0)
(9,44,0)
(17,26,0)
(34,41,0)
(16,27,0)
(37,8,0)
(12,6,0)
(18,0,0)
(39,20,0)
(44,0,0)
(25,0,0)
(30,38,0)
(11,18,0)
(37,2,0)
(45,4,1)
(42,10,1)
(29,45,1)
(45,18,1)
(31,20,1)
(26,17,1)
(6,12,1)
(45,14,1)
(16,14,1)
(4,3,1)
(3,38,1)
(32,18,1)
(13,31,1)
(24,11,1)
(43,30,1)
(38,18,1)
(45,27,1)
(27,35,1)
(20,6,1)
(39,32,1)
(22,26,1)
(37,2,1)
(28,44,1)
(7,10,1)
(7,14,1)
(23,34,1)
(16,47,1)
(38,27,1)
(11,23,1)
(11,18,1)
(12,15,1)
(5,16,1)
(14,37,1)
(18,36,1)
(17,13,1)
(23,16,1)
(44,9,1)
(16,27,1)
(36,7,1)
(8,42,1)
(9,22,1)
(47,28,1)
(34,29,1)
(38,14,1)
(30,5,1)
(10,27,1)
(15,39,1)
(37,8,1)
(38,43,1)
(35,21,1)
(37,10,2)
(14,37,2)
(45,27,2)
(38,16,2)
(20,6,2)
(4,16,2)
(38,27,2)
(22,26,2)
(37,8,2)
(16,14,2)
(30,16,2)
(8,10,2)
(42,10,2)
(43,16,2)
(3,16,2)
(45,16,2)
(37,2,2)
(11,18,2)
(29,16,2)
(5,16,2)
(14,10,2)
(16,27,2)
(45,14,2)
(34,16,2)
(38,14,2)
(38,18,2)
(45,18,2)
-----------------------------------
(0,)
(1,)
(2,short)
(3,dest)
(4,data)
(5,dest)
(6,100-1)
(7,dest)
(8,RAND32()
(9,\\\'\\\\0\\\')
(10,staticReturnsTrue()
(11,printLine(dest)
(12,1)
(13,100)
(14,data = (short)
(15,100)
(16,data < 100)
(17,1)
(18,dest[100] = "")
(19,dest)
(20,memset(source, \\\'A\\\', 100-1)
(21,data)
(22,source[100-1])
(23,dest)
(24,RET)
(25,source)
(26,100-1)
(27,data = 0)
(28,data)
(29,\\\'\\\\0\\\')
(30,source)
(31,source)
(32,source)
(33,if (data < 100)
(34,dest[data] = \\\'\\\\0\\\')
(35,0)
(36,"")
(37,(short)
(38,strncpy(dest, source, data)
(39,\\\'A\\\')
(40,)
(41,)
(42,data)
(43,data)
(44,source[100-1] = \\\'\\\\0\\\')
(45,dest[data])
(46,data)
(47,100)
(48,if(staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^