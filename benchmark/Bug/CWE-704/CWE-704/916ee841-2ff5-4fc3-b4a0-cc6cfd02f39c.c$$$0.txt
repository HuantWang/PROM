-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_01_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_01_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_01_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(42,25,0)
(30,2,0)
(17,28,0)
(10,28,0)
(26,10,0)
(40,17,0)
(14,28,0)
(2,17,0)
(44,34,0)
(1,14,0)
(15,44,0)
(33,28,0)
(22,0,0)
(22,14,0)
(25,43,0)
(27,17,0)
(31,0,0)
(13,14,0)
(34,44,0)
(34,14,0)
(5,18,0)
(5,3,0)
(38,3,0)
(3,14,0)
(0,14,0)
(8,34,0)
(40,25,0)
(9,27,0)
(19,0,0)
(37,27,0)
(6,19,0)
(41,19,0)
(32,14,0)
(36,0,0)
(18,5,0)
(19,43,0)
(35,34,0)
(10,2,0)
(2,10,0)
(16,22,0)
(20,10,0)
(4,40,0)
(11,40,0)
(29,18,0)
(24,18,0)
(19,17,0)
(21,44,0)
(39,17,0)
(40,0,0)
(23,5,0)
(45,19,0)
(7,17,0)
(25,42,1)
(34,44,1)
(30,20,1)
(18,29,1)
(9,37,1)
(39,7,1)
(22,16,1)
(5,18,1)
(2,30,1)
(42,40,1)
(23,34,1)
(17,39,1)
(22,0,1)
(38,5,1)
(40,4,1)
(44,15,1)
(0,31,1)
(16,27,1)
(37,3,1)
(20,26,1)
(36,10,1)
(19,17,1)
(26,17,1)
(40,17,1)
(35,8,1)
(19,6,1)
(41,27,1)
(19,0,1)
(45,41,1)
(11,19,1)
(12,22,1)
(8,0,1)
(21,35,1)
(2,17,1)
(10,2,1)
(3,38,1)
(4,11,1)
(40,0,1)
(6,45,1)
(27,9,1)
(24,23,1)
(16,25,1)
(27,17,1)
(29,24,1)
(31,36,1)
(15,21,1)
(19,27,2)
(40,0,2)
(27,17,2)
(45,27,2)
(25,27,2)
(4,27,2)
(6,27,2)
(40,17,2)
(34,44,2)
(19,17,2)
(11,27,2)
(5,18,2)
(41,27,2)
(2,17,2)
(19,0,2)
(10,2,2)
(42,27,2)
(22,0,2)
(40,27,2)
-----------------------------------
(0,dest[100] = "")
(1,source)
(2,&data)
(3,source[100-1] = \\\'\\\\0\\\')
(4,data)
(5,source[100-1])
(6,data)
(7,data)
(8,source)
(9,100)
(10,fscanf (stdin, "%hd", &data)
(11,dest)
(12,RET)
(13,dest)
(14,)
(15,1)
(16,dest)
(17,data = 0)
(18,100-1)
(19,memcpy(dest, source, data)
(20,"%hd")
(21,100)
(22,printLine(dest)
(23,source)
(24,100)
(25,dest[data] = \\\'\\\\0\\\')
(26,stdin)
(27,data < 100)
(28,)
(29,1)
(30,data)
(31,"")
(32,if (data < 100)
(33,data)
(34,memset(source, \\\'A\\\', 100-1)
(35,\\\'A\\\')
(36,dest)
(37,data)
(38,\\\'\\\\0\\\')
(39,0)
(40,dest[data])
(41,dest)
(42,\\\'\\\\0\\\')
(43,)
(44,100-1)
(45,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^