-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
68,70
69,70
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
85,87
85,88
85,89
85,90
85,91
86,87
87,88
87,89
89,90
89,91
91,92
93,94
94,95
94,96
96,97
96,98
96,99
98,99
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
109,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
121,122
121,123
122,123
122,124
123,124
126,127
126,128
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
135,136
137,138
138,139
138,140
139,140
139,141
140,141
142,143
145,146
146,147
146,148
147,148
149,150
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,70,71,73,77,79,83,84,88,90,92,95,97,99,101,105,107,108,110,111,116,118,119,120,124,125,130,132,134,136,141,143,144,148,150
-----computeFrom-----
18,19
18,20
34,35
34,36
48,49
48,50
67,68
67,69
109,110
109,111
113,114
113,115
117,118
117,119
122,123
122,124
138,139
138,140
-----guardedBy-----
39,59
124,143
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType
CWE194_Unexpected_Sign_Extension__fgets_strncpy_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,2,0)
(74,36,0)
(31,50,0)
(69,12,0)
(52,29,0)
(35,75,0)
(26,69,0)
(39,43,0)
(69,75,0)
(49,9,0)
(15,2,0)
(67,18,0)
(66,43,0)
(1,43,0)
(28,41,0)
(74,19,0)
(74,28,0)
(56,36,0)
(62,43,0)
(69,63,0)
(50,63,0)
(59,8,0)
(22,34,0)
(61,19,0)
(27,12,0)
(18,52,0)
(70,43,0)
(3,9,0)
(62,9,0)
(34,63,0)
(53,54,0)
(55,63,0)
(57,23,0)
(60,12,0)
(54,36,0)
(73,5,0)
(64,18,0)
(42,62,0)
(2,5,0)
(63,54,0)
(46,36,0)
(63,34,0)
(20,33,0)
(19,36,0)
(2,28,0)
(33,65,0)
(12,43,0)
(44,17,0)
(28,2,0)
(23,74,0)
(7,65,0)
(9,62,0)
(33,70,0)
(11,19,0)
(65,33,0)
(13,70,0)
(24,43,0)
(72,32,0)
(58,74,0)
(5,52,0)
(16,50,0)
(0,62,0)
(8,12,0)
(32,68,0)
(40,52,0)
(71,29,0)
(8,63,0)
(47,39,0)
(48,69,0)
(2,15,0)
(30,23,0)
(14,28,0)
(38,8,0)
(29,36,0)
(8,51,0)
(43,54,0)
(39,12,0)
(4,52,0)
(6,18,0)
(18,17,0)
(75,51,0)
(10,8,0)
(37,29,0)
(21,65,0)
(17,18,0)
(45,34,0)
(8,12,1)
(60,63,1)
(47,75,1)
(42,0,1)
(17,18,1)
(44,18,1)
(13,33,1)
(6,64,1)
(21,20,1)
(69,26,1)
(17,44,1)
(5,73,1)
(23,57,1)
(8,63,1)
(18,52,1)
(62,9,1)
(69,63,1)
(63,34,1)
(28,2,1)
(34,22,1)
(30,32,1)
(64,52,1)
(70,13,1)
(30,28,1)
(33,65,1)
(31,16,1)
(74,58,1)
(16,70,1)
(39,47,1)
(50,63,1)
(0,12,1)
(74,19,1)
(75,35,1)
(50,31,1)
(14,17,1)
(2,15,1)
(19,11,1)
(74,28,1)
(72,17,1)
(10,38,1)
(39,12,1)
(8,59,1)
(48,8,1)
(2,5,1)
(52,4,1)
(26,48,1)
(59,10,1)
(9,3,1)
(38,50,1)
(22,45,1)
(58,23,1)
(57,30,1)
(35,69,1)
(47,50,1)
(69,12,1)
(3,49,1)
(32,72,1)
(18,67,1)
(65,7,1)
(7,21,1)
(11,61,1)
(45,55,1)
(27,60,1)
(20,62,1)
(5,52,1)
(55,74,1)
(40,19,1)
(25,39,1)
(4,40,1)
(49,42,1)
(73,14,1)
(67,6,1)
(12,27,1)
(35,50,2)
(18,52,2)
(74,19,2)
(8,63,2)
(17,18,2)
(5,17,2)
(38,50,2)
(32,17,2)
(8,12,2)
(62,9,2)
(69,12,2)
(28,17,2)
(2,17,2)
(73,17,2)
(69,50,2)
(14,17,2)
(39,12,2)
(2,5,2)
(10,50,2)
(59,50,2)
(74,28,2)
(48,50,2)
(26,50,2)
(8,50,2)
(2,15,2)
(75,50,2)
(33,65,2)
(5,52,2)
(63,34,2)
(28,2,2)
(72,17,2)
(50,63,2)
(69,63,2)
-----------------------------------
(0,source)
(1,dest)
(2,(short)
(3,1)
(4,"")
(5,atoi(inputBuffer)
(6,CHAR_ARRAY_SIZE)
(7,1)
(8,strncpy(dest, source, data)
(9,100-1)
(10,source)
(11,0)
(12,dest[100] = "")
(13,\\\'\\\\0\\\')
(14,data)
(15,short)
(16,data)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,data = 0)
(20,source)
(21,100)
(22,unionSecond)
(23,myUnion.unionFirst)
(24,source)
(25,RET)
(26,data)
(27,"")
(28,data = (short)
(29,)
(30,myUnion)
(31,100)
(32,printLine("fgets()
(33,source[100-1])
(34,myUnion.unionSecond)
(35,\\\'\\\\0\\\')
(36,)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,dest)
(39,printLine(dest)
(40,inputBuffer)
(41,)
(42,\\\'A\\\')
(43,)
(44,NULL)
(45,myUnion)
(46,data)
(47,dest)
(48,dest)
(49,100)
(50,data < 100)
(51,)
(52,inputBuffer[CHAR_ARRAY_SIZE] = "")
(53,data)
(54,)
(55,data)
(56,myUnion)
(57,unionFirst)
(58,data)
(59,data)
(60,dest)
(61,data)
(62,memset(source, \\\'A\\\', 100-1)
(63,data = myUnion.unionSecond)
(64,inputBuffer)
(65,100-1)
(66,if (data < 100)
(67,stdin)
(68,)
(69,dest[data])
(70,source[100-1] = \\\'\\\\0\\\')
(71,inputBuffer)
(72,"fgets()
(73,inputBuffer)
(74,myUnion.unionFirst = data)
(75,dest[data] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^