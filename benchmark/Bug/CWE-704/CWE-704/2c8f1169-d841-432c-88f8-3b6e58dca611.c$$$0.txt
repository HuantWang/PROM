-----label-----
1
-----code-----
static short badSource(short data)
{
    if(badStatic)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
18,19
18,20
18,21
20,21
21,22
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,6,8,12,17,19,22,24,29,31,33,35,37,42,45,46,49,51,56,57,60
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
badStatic
badStatic
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(9,10,0)
(16,24,0)
(28,21,0)
(29,24,0)
(20,1,0)
(6,19,0)
(21,3,0)
(22,1,0)
(10,5,0)
(24,16,0)
(16,22,0)
(25,1,0)
(27,22,0)
(5,10,0)
(12,22,0)
(10,9,0)
(4,5,0)
(14,16,0)
(15,2,0)
(17,22,0)
(19,11,0)
(7,16,0)
(21,5,0)
(5,13,0)
(27,10,0)
(8,21,0)
(10,27,0)
(1,18,0)
(26,16,0)
(21,2,0)
(23,27,0)
(5,3,0)
(28,19,1)
(4,24,1)
(10,9,1)
(27,22,1)
(16,26,1)
(24,29,1)
(22,17,1)
(8,21,1)
(26,7,1)
(23,4,1)
(5,10,1)
(5,3,1)
(14,22,1)
(28,5,1)
(17,12,1)
(27,23,1)
(28,0,1)
(6,24,1)
(16,22,1)
(24,16,1)
(21,28,1)
(10,27,1)
(12,0,1)
(21,5,1)
(21,3,1)
(29,16,1)
(7,14,1)
(19,6,1)
(27,22,2)
(16,0,2)
(5,3,2)
(5,10,2)
(22,0,2)
(16,22,2)
(21,5,2)
(26,0,2)
(29,0,2)
(27,24,2)
(6,24,2)
(12,0,2)
(8,21,2)
(10,9,2)
(10,24,2)
(24,16,2)
(24,0,2)
(7,0,2)
(14,0,2)
(17,0,2)
(23,24,2)
(19,24,2)
(5,24,2)
(4,24,2)
(21,3,2)
(10,27,2)
-----------------------------------
(0,badStatic)
(1,)
(2,)
(3,short data)
(4,data)
(5,data = (short)
(6,"fgets()
(7,CHAR_ARRAY_SIZE)
(8,RET)
(9,short)
(10,(short)
(11,)
(12,inputBuffer)
(13,)
(14,inputBuffer)
(15,if(badStatic)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,"")
(18,)
(19,printLine("fgets()
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,return data;)
(22,inputBuffer[CHAR_ARRAY_SIZE] = "")
(23,inputBuffer)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,inputBuffer)
(26,stdin)
(27,atoi(inputBuffer)
(28,data)
(29,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^