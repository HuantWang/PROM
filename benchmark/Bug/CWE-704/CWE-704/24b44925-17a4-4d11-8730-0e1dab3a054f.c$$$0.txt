-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
37,38
37,39
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_12_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(18,47,0)
(54,5,0)
(33,16,0)
(30,46,0)
(10,13,0)
(36,31,0)
(40,43,0)
(5,2,0)
(46,19,0)
(45,52,0)
(11,12,0)
(24,16,0)
(50,12,0)
(2,43,0)
(46,47,0)
(19,47,0)
(8,2,0)
(45,34,0)
(16,34,0)
(13,51,0)
(32,19,0)
(1,41,0)
(52,45,0)
(48,41,0)
(43,2,0)
(3,12,0)
(42,36,0)
(51,22,0)
(28,43,0)
(5,19,0)
(34,45,0)
(26,19,0)
(20,3,0)
(5,34,0)
(6,18,0)
(45,17,0)
(16,2,0)
(3,47,0)
(2,0,0)
(21,48,0)
(53,36,0)
(7,5,0)
(34,14,0)
(9,31,0)
(47,41,0)
(4,41,0)
(12,3,0)
(38,13,0)
(31,36,0)
(44,34,0)
(29,48,0)
(31,18,0)
(13,2,0)
(13,19,0)
(37,5,0)
(17,45,0)
(35,47,0)
(5,22,0)
(27,51,0)
(13,34,0)
(25,3,0)
(23,47,0)
(49,47,0)
(38,10,1)
(40,8,1)
(46,19,1)
(15,48,1)
(17,44,1)
(44,15,1)
(32,26,1)
(26,2,1)
(16,33,1)
(7,54,1)
(8,15,1)
(11,50,1)
(6,31,1)
(13,19,1)
(26,34,1)
(13,38,1)
(37,7,1)
(30,16,1)
(31,36,1)
(5,19,1)
(39,46,1)
(34,45,1)
(28,40,1)
(51,27,1)
(25,20,1)
(48,29,1)
(29,21,1)
(5,2,1)
(5,34,1)
(24,18,1)
(53,42,1)
(20,19,1)
(45,52,1)
(3,12,1)
(13,34,1)
(54,16,1)
(16,34,1)
(27,13,1)
(16,2,1)
(45,17,1)
(36,53,1)
(18,6,1)
(9,3,1)
(13,2,1)
(33,24,1)
(42,9,1)
(2,43,1)
(43,28,1)
(30,51,1)
(12,11,1)
(10,5,1)
(50,25,1)
(46,30,1)
(19,32,1)
(5,37,1)
(16,2,2)
(27,16,2)
(37,16,2)
(40,15,2)
(44,15,2)
(13,19,2)
(10,16,2)
(34,15,2)
(45,17,2)
(34,45,2)
(2,15,2)
(5,34,2)
(46,19,2)
(13,16,2)
(7,16,2)
(13,2,2)
(16,34,2)
(54,16,2)
(51,16,2)
(8,15,2)
(45,15,2)
(5,2,2)
(3,12,2)
(2,43,2)
(13,34,2)
(45,52,2)
(43,15,2)
(28,15,2)
(5,19,2)
(31,36,2)
(5,16,2)
(17,15,2)
(38,16,2)
-----------------------------------
(0,)
(1,if(globalReturnsTrueOrFalse()
(2,data = 100-1)
(3,memset(source, \\\'A\\\', 100-1)
(4,data)
(5,memcpy(dest, source, data)
(6,\\\'\\\\0\\\')
(7,source)
(8,data)
(9,source)
(10,dest)
(11,1)
(12,100-1)
(13,dest[data])
(14,)
(15,globalReturnsTrueOrFalse()
(16,data < 100)
(17,RAND32()
(18,source[100-1] = \\\'\\\\0\\\')
(19,dest[100] = "")
(20,source)
(21,data)
(22,)
(23,source)
(24,data)
(25,\\\'A\\\')
(26,dest)
(27,\\\'\\\\0\\\')
(28,1)
(29,0)
(30,dest)
(31,source[100-1])
(32,"")
(33,100)
(34,data = (short)
(35,if (data < 100)
(36,100-1)
(37,data)
(38,data)
(39,RET)
(40,100)
(41,)
(42,100)
(43,100-1)
(44,data)
(45,(short)
(46,printLine(dest)
(47,)
(48,data = 0)
(49,dest)
(50,100)
(51,dest[data] = \\\'\\\\0\\\')
(52,short)
(53,1)
(54,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^