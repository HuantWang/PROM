-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad()
{
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,66
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad(){    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_07_bad
{    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(18,24,0)
(24,11,0)
(22,11,0)
(5,31,0)
(28,31,0)
(10,24,0)
(3,8,0)
(9,4,0)
(14,0,0)
(0,29,0)
(19,11,0)
(5,21,0)
(1,8,0)
(18,5,0)
(25,5,0)
(15,8,0)
(7,6,0)
(27,18,0)
(13,11,0)
(30,18,0)
(12,15,0)
(16,11,0)
(22,18,0)
(20,24,0)
(11,2,0)
(17,6,0)
(26,8,0)
(18,22,0)
(31,5,0)
(8,15,0)
(18,27,0)
(12,8,1)
(6,7,1)
(30,5,1)
(1,26,1)
(10,20,1)
(5,31,1)
(15,8,1)
(0,14,1)
(18,30,1)
(14,15,1)
(26,3,1)
(8,1,1)
(23,22,1)
(18,5,1)
(18,24,1)
(20,6,1)
(15,12,1)
(31,28,1)
(22,18,1)
(24,10,1)
(30,0,1)
(3,24,1)
(28,25,1)
(25,15,1)
(18,27,1)
(7,17,1)
(23,6,1)
(15,6,2)
(18,24,2)
(1,6,2)
(30,6,2)
(24,6,2)
(18,27,2)
(10,6,2)
(22,6,2)
(22,18,2)
(26,6,2)
(5,15,2)
(25,15,2)
(18,6,2)
(28,15,2)
(3,6,2)
(12,6,2)
(20,6,2)
(31,15,2)
(0,15,2)
(18,5,2)
(15,8,2)
(8,6,2)
(5,31,2)
(14,15,2)
-----------------------------------
(0,printLine("fgets()
(1,stdin)
(2,)
(3,inputBuffer)
(4,)
(5,doubleNumber = atof(inputBuffer)
(6,staticFive==5)
(7,5)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,if(staticFive==5)
(10,0)
(11,)
(12,NULL)
(13,inputBuffer)
(14,"fgets()
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,staticFive)
(18,(float)
(19,doubleNumber)
(20,doubleNumber)
(21,)
(22,printFloatLine((float)
(23,RET)
(24,doubleNumber = 0)
(25,doubleNumber)
(26,CHAR_ARRAY_SIZE)
(27,float)
(28,inputBuffer)
(29,)
(30,doubleNumber)
(31,atof(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^