-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
20,21
20,22
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_16_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(31,18,0)
(34,16,0)
(15,42,0)
(5,15,0)
(49,42,0)
(20,49,0)
(41,7,0)
(11,38,0)
(33,45,0)
(0,18,0)
(1,49,0)
(21,6,0)
(38,42,0)
(38,25,0)
(42,46,0)
(6,21,0)
(38,4,0)
(7,18,0)
(47,31,0)
(16,27,0)
(14,6,0)
(36,47,0)
(15,25,0)
(18,46,0)
(48,25,0)
(45,0,0)
(9,37,0)
(35,0,0)
(45,18,0)
(4,43,0)
(31,47,0)
(49,43,0)
(29,18,0)
(49,0,0)
(2,18,0)
(39,27,0)
(28,46,0)
(19,31,0)
(6,25,0)
(3,16,0)
(8,49,0)
(30,47,0)
(17,42,0)
(32,18,0)
(49,25,0)
(44,38,0)
(6,14,0)
(40,42,0)
(12,15,0)
(26,4,0)
(27,7,0)
(38,0,0)
(27,16,0)
(25,6,0)
(25,37,0)
(24,0,0)
(10,46,0)
(23,31,0)
(15,42,1)
(35,9,1)
(45,33,1)
(25,6,1)
(13,42,1)
(41,27,1)
(3,34,1)
(49,8,1)
(38,11,1)
(38,42,1)
(33,15,1)
(34,39,1)
(38,0,1)
(33,4,1)
(49,42,1)
(48,13,1)
(45,0,1)
(6,14,1)
(39,31,1)
(9,25,1)
(4,26,1)
(31,47,1)
(15,25,1)
(5,12,1)
(26,38,1)
(11,44,1)
(21,48,1)
(8,20,1)
(7,41,1)
(23,19,1)
(6,21,1)
(42,17,1)
(49,25,1)
(36,30,1)
(16,3,1)
(12,7,1)
(27,16,1)
(24,35,1)
(38,25,1)
(19,0,1)
(44,49,1)
(15,5,1)
(30,23,1)
(1,15,1)
(17,40,1)
(49,0,1)
(22,45,1)
(20,1,1)
(35,13,1)
(0,24,1)
(47,36,1)
(48,13,2)
(44,15,2)
(49,15,2)
(45,0,2)
(49,42,2)
(38,42,2)
(6,13,2)
(38,0,2)
(49,25,2)
(15,42,2)
(9,13,2)
(38,15,2)
(6,14,2)
(27,16,2)
(31,47,2)
(11,15,2)
(25,6,2)
(20,15,2)
(25,13,2)
(38,25,2)
(1,15,2)
(21,13,2)
(49,0,2)
(15,25,2)
(26,15,2)
(4,15,2)
(8,15,2)
(6,21,2)
-----------------------------------
(0,dest[100] = "")
(1,dest)
(2,if (data < 100)
(3,1)
(4,dest[data] = \\\'\\\\0\\\')
(5,100)
(6,(short)
(7,source[100-1] = \\\'\\\\0\\\')
(8,data)
(9,break;)
(10,while(1)
(11,data)
(12,data)
(13,1)
(14,short)
(15,data < 100)
(16,100-1)
(17,0)
(18,)
(19,source)
(20,source)
(21,RAND32()
(22,RET)
(23,\\\'A\\\')
(24,"")
(25,data = (short)
(26,\\\'\\\\0\\\')
(27,source[100-1])
(28,data)
(29,dest)
(30,100)
(31,memset(source, \\\'A\\\', 100-1)
(32,source)
(33,dest)
(34,100)
(35,dest)
(36,1)
(37,)
(38,dest[data])
(39,source)
(40,data)
(41,\\\'\\\\0\\\')
(42,data = 0)
(43,)
(44,dest)
(45,printLine(dest)
(46,)
(47,100-1)
(48,data)
(49,memmove(dest, source, data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^