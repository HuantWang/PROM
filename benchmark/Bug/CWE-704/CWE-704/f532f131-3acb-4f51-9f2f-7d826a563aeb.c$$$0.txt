-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a negative number */
    data = -1;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
21,22
21,23
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_18_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a negative number */    data = -1;
source
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,9,0)
(36,14,0)
(27,14,0)
(27,24,0)
(40,44,0)
(25,29,0)
(0,27,0)
(35,42,0)
(33,36,0)
(10,37,0)
(38,32,0)
(13,14,0)
(14,37,0)
(17,29,0)
(29,32,0)
(15,27,0)
(2,24,0)
(45,18,0)
(2,42,0)
(14,13,0)
(27,41,0)
(7,24,0)
(5,42,0)
(29,14,0)
(6,44,0)
(4,35,0)
(12,35,0)
(35,4,0)
(46,13,0)
(21,42,0)
(39,4,0)
(42,37,0)
(9,42,0)
(44,9,0)
(32,41,0)
(23,40,0)
(3,35,0)
(8,42,0)
(20,40,0)
(22,2,0)
(29,24,0)
(31,14,0)
(44,40,0)
(26,4,0)
(28,18,0)
(1,37,0)
(11,36,0)
(19,37,0)
(30,27,0)
(16,24,0)
(24,42,0)
(18,37,0)
(13,46,1)
(44,40,1)
(14,13,1)
(39,12,1)
(0,36,1)
(12,3,1)
(19,18,1)
(40,23,1)
(7,16,1)
(36,14,1)
(18,45,1)
(2,24,1)
(17,25,1)
(3,24,1)
(30,15,1)
(27,14,1)
(20,6,1)
(9,34,1)
(43,2,1)
(22,36,1)
(16,14,1)
(27,30,1)
(38,29,1)
(36,33,1)
(29,17,1)
(45,28,1)
(27,24,1)
(34,44,1)
(26,39,1)
(46,31,1)
(24,7,1)
(29,14,1)
(25,27,1)
(6,35,1)
(29,24,1)
(15,0,1)
(22,32,1)
(33,11,1)
(2,22,1)
(23,20,1)
(4,26,1)
(31,19,1)
(32,38,1)
(11,9,1)
(35,4,1)
(14,13,2)
(36,14,2)
(44,40,2)
(25,36,2)
(38,36,2)
(32,36,2)
(29,24,2)
(29,36,2)
(29,14,2)
(30,36,2)
(27,14,2)
(17,36,2)
(15,36,2)
(2,24,2)
(35,4,2)
(27,36,2)
(0,36,2)
(27,24,2)
-----------------------------------
(0,dest)
(1,source:)
(2,printLine(dest)
(3,source)
(4,100-1)
(5,source)
(6,source)
(7,"")
(8,dest)
(9,source[100-1] = \\\'\\\\0\\\')
(10,data)
(11,data)
(12,\\\'A\\\')
(13,-1)
(14,data = -1)
(15,source)
(16,dest)
(17,data)
(18,data = 0)
(19,goto source;)
(20,100)
(21,if (data < 100)
(22,dest)
(23,1)
(24,dest[100] = "")
(25,dest)
(26,1)
(27,memcpy(dest, source, data)
(28,data)
(29,dest[data])
(30,data)
(31,data)
(32,dest[data] = \\\'\\\\0\\\')
(33,100)
(34,\\\'\\\\0\\\')
(35,memset(source, \\\'A\\\', 100-1)
(36,data < 100)
(37,)
(38,\\\'\\\\0\\\')
(39,100)
(40,100-1)
(41,)
(42,)
(43,RET)
(44,source[100-1])
(45,0)
(46,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^