-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
22,23
22,24
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_strncpy_15_bad()
CWE194_Unexpected_Sign_Extension__rand_strncpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(25,13,0)
(44,42,0)
(21,33,0)
(33,18,0)
(9,38,0)
(48,13,0)
(50,13,0)
(22,8,0)
(29,53,0)
(8,18,0)
(36,38,0)
(6,12,0)
(30,53,0)
(31,53,0)
(0,33,0)
(43,23,0)
(34,23,0)
(32,44,0)
(17,46,0)
(7,44,0)
(49,46,0)
(12,18,0)
(37,13,0)
(16,45,0)
(52,10,0)
(3,38,0)
(7,19,0)
(51,45,0)
(10,24,0)
(15,37,0)
(33,21,0)
(28,2,0)
(1,30,0)
(11,18,0)
(7,46,0)
(19,23,0)
(54,12,0)
(8,19,0)
(38,23,0)
(45,10,0)
(47,7,0)
(4,19,0)
(12,19,0)
(20,7,0)
(46,38,0)
(18,33,0)
(35,30,0)
(14,8,0)
(10,45,0)
(18,13,0)
(30,38,0)
(53,30,0)
(41,19,0)
(5,12,0)
(24,38,0)
(12,42,0)
(12,46,0)
(26,24,0)
(2,46,0)
(27,13,0)
(2,38,0)
(33,0,0)
(7,18,0)
(39,2,1)
(2,28,1)
(52,30,1)
(7,18,1)
(47,20,1)
(44,32,1)
(21,11,1)
(51,16,1)
(49,17,1)
(4,41,1)
(12,19,1)
(28,8,1)
(14,22,1)
(7,19,1)
(54,6,1)
(50,37,1)
(24,26,1)
(16,52,1)
(17,48,1)
(31,29,1)
(45,51,1)
(8,18,1)
(28,44,1)
(20,12,1)
(17,50,1)
(46,49,1)
(1,46,1)
(48,18,1)
(33,0,1)
(6,8,1)
(33,21,1)
(19,4,1)
(7,47,1)
(8,14,1)
(12,18,1)
(10,45,1)
(32,7,1)
(11,40,1)
(2,46,1)
(7,46,1)
(12,46,1)
(30,53,1)
(15,40,1)
(12,5,1)
(53,31,1)
(35,1,1)
(40,19,1)
(5,54,1)
(18,33,1)
(26,10,1)
(8,19,1)
(29,35,1)
(22,24,1)
(37,15,1)
(8,18,2)
(12,18,2)
(32,8,2)
(50,40,2)
(15,40,2)
(54,8,2)
(47,8,2)
(48,40,2)
(18,40,2)
(12,8,2)
(30,53,2)
(7,8,2)
(12,46,2)
(11,40,2)
(37,40,2)
(2,46,2)
(33,0,2)
(20,8,2)
(6,8,2)
(10,45,2)
(21,40,2)
(18,33,2)
(33,40,2)
(7,46,2)
(7,19,2)
(12,19,2)
(44,8,2)
(8,19,2)
(33,21,2)
(7,18,2)
(5,8,2)
-----------------------------------
(0,short)
(1,source)
(2,printLine(dest)
(3,if (data < 100)
(4,0)
(5,data)
(6,dest)
(7,dest[data])
(8,data < 100)
(9,dest)
(10,source[100-1])
(11,data)
(12,strncpy(dest, source, data)
(13,)
(14,100)
(15,"Benign, fixed string")
(16,100)
(17,dest)
(18,data = (short)
(19,data = 0)
(20,dest)
(21,RAND32()
(22,data)
(23,)
(24,source[100-1] = \\\'\\\\0\\\')
(25,default:)
(26,\\\'\\\\0\\\')
(27,case 6:)
(28,dest)
(29,100)
(30,memset(source, \\\'A\\\', 100-1)
(31,1)
(32,\\\'\\\\0\\\')
(33,(short)
(34,data)
(35,\\\'A\\\')
(36,source)
(37,printLine("Benign, fixed string")
(38,)
(39,RET)
(40,6)
(41,data)
(42,)
(43,switch(6)
(44,dest[data] = \\\'\\\\0\\\')
(45,100-1)
(46,dest[100] = "")
(47,data)
(48,break;)
(49,"")
(50,break;)
(51,1)
(52,source)
(53,100-1)
(54,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^