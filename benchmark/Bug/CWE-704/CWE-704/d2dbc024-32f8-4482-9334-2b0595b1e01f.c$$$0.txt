-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_09_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(45,48,0)
(50,46,0)
(13,31,0)
(63,32,0)
(9,22,0)
(5,51,0)
(32,38,0)
(58,16,0)
(38,32,0)
(22,9,0)
(2,21,0)
(47,35,0)
(33,22,0)
(55,63,0)
(10,1,0)
(36,15,0)
(26,48,0)
(46,35,0)
(20,13,0)
(28,49,0)
(31,37,0)
(64,63,0)
(14,45,0)
(47,63,0)
(8,48,0)
(40,45,0)
(32,49,0)
(47,40,0)
(52,22,0)
(9,45,0)
(63,41,0)
(54,47,0)
(44,58,0)
(32,63,0)
(27,64,0)
(47,8,0)
(0,9,0)
(64,8,0)
(1,8,0)
(18,58,0)
(61,36,0)
(3,47,0)
(57,45,0)
(64,40,0)
(43,45,0)
(56,64,0)
(24,19,0)
(11,37,0)
(34,8,0)
(19,45,0)
(65,36,0)
(62,47,0)
(49,32,0)
(17,9,0)
(39,31,0)
(7,48,0)
(49,37,0)
(12,37,0)
(37,36,0)
(53,31,0)
(1,63,0)
(16,21,0)
(64,46,0)
(25,31,0)
(21,45,0)
(19,40,0)
(60,40,0)
(59,40,0)
(29,16,0)
(42,8,0)
(6,5,0)
(30,1,0)
(31,13,0)
(16,58,0)
(49,37,1)
(20,31,1)
(13,20,1)
(32,49,1)
(19,24,1)
(47,62,1)
(47,63,1)
(56,47,1)
(1,30,1)
(4,8,1)
(59,63,1)
(64,8,1)
(64,27,1)
(60,59,1)
(5,6,1)
(21,2,1)
(30,10,1)
(28,55,1)
(58,44,1)
(40,60,1)
(50,64,1)
(23,19,1)
(63,32,1)
(55,13,1)
(12,11,1)
(59,4,1)
(46,50,1)
(8,42,1)
(31,39,1)
(6,13,1)
(25,53,1)
(22,33,1)
(24,1,1)
(39,25,1)
(1,8,1)
(31,37,1)
(3,54,1)
(9,22,1)
(52,0,1)
(53,37,1)
(24,46,1)
(2,16,1)
(33,52,1)
(10,21,1)
(62,3,1)
(18,29,1)
(42,34,1)
(1,63,1)
(44,18,1)
(32,38,1)
(29,9,1)
(64,40,1)
(47,40,1)
(19,40,1)
(59,5,1)
(16,58,1)
(49,28,1)
(54,1,1)
(64,63,1)
(37,12,1)
(27,56,1)
(17,40,1)
(13,31,1)
(0,17,1)
(11,4,1)
(47,8,1)
(49,37,2)
(19,40,2)
(6,13,2)
(64,1,2)
(32,49,2)
(49,13,2)
(3,1,2)
(13,31,2)
(50,1,2)
(56,1,2)
(62,1,2)
(16,58,2)
(1,63,2)
(31,37,2)
(47,40,2)
(13,4,2)
(32,13,2)
(28,13,2)
(27,1,2)
(5,13,2)
(12,4,2)
(63,32,2)
(9,22,2)
(53,4,2)
(64,40,2)
(47,1,2)
(64,8,2)
(47,8,2)
(47,63,2)
(64,63,2)
(39,4,2)
(55,13,2)
(54,1,2)
(1,8,2)
(63,13,2)
(31,4,2)
(37,4,2)
(20,4,2)
(25,4,2)
(46,1,2)
(32,38,2)
(11,4,2)
-----------------------------------
(0,\\\'A\\\')
(1,data < 100)
(2,\\\'\\\\0\\\')
(3,source)
(4,GLOBAL_CONST_TRUE)
(5,printLine("fgets()
(6,"fgets()
(7,data)
(8,data = 0)
(9,memset(source, \\\'A\\\', 100-1)
(10,data)
(11,inputBuffer)
(12,"")
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,if (data < 100)
(15,)
(16,source[100-1])
(17,source)
(18,100)
(19,printLine(dest)
(20,NULL)
(21,source[100-1] = \\\'\\\\0\\\')
(22,100-1)
(23,RET)
(24,dest)
(25,CHAR_ARRAY_SIZE)
(26,if(GLOBAL_CONST_TRUE)
(27,data)
(28,inputBuffer)
(29,source)
(30,100)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,(short)
(33,1)
(34,data)
(35,)
(36,)
(37,inputBuffer[CHAR_ARRAY_SIZE] = "")
(38,short)
(39,stdin)
(40,dest[100] = "")
(41,)
(42,0)
(43,dest)
(44,1)
(45,)
(46,dest[data] = \\\'\\\\0\\\')
(47,memmove(dest, source, data)
(48,)
(49,atoi(inputBuffer)
(50,\\\'\\\\0\\\')
(51,)
(52,100)
(53,inputBuffer)
(54,dest)
(55,data)
(56,dest)
(57,source)
(58,100-1)
(59,dest)
(60,"")
(61,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(62,data)
(63,data = (short)
(64,dest[data])
(65,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^