-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_51b_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_51b_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_51b_badSink(short data)
CWE194_Unexpected_Sign_Extension__rand_malloc_51b_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(4,19,0)
(9,12,0)
(16,5,0)
(21,3,0)
(32,1,0)
(13,36,0)
(25,9,0)
(38,12,0)
(10,12,0)
(39,38,0)
(38,19,0)
(23,19,0)
(26,30,0)
(34,0,0)
(2,43,0)
(37,12,0)
(1,36,0)
(17,43,0)
(19,22,0)
(5,19,0)
(30,19,0)
(11,0,0)
(7,5,0)
(19,12,0)
(27,28,0)
(22,19,0)
(29,23,0)
(3,9,0)
(20,22,0)
(24,13,0)
(23,12,0)
(43,36,0)
(6,36,0)
(3,6,0)
(40,23,0)
(1,22,0)
(31,6,0)
(3,19,0)
(22,1,0)
(8,6,0)
(14,13,0)
(30,12,0)
(23,13,0)
(11,15,0)
(0,11,0)
(13,23,0)
(6,3,0)
(22,20,0)
(23,13,1)
(38,39,1)
(23,19,1)
(14,24,1)
(29,11,1)
(35,30,1)
(17,2,1)
(39,9,1)
(26,38,1)
(40,29,1)
(22,1,1)
(21,23,1)
(25,3,1)
(13,14,1)
(0,34,1)
(19,22,1)
(8,21,1)
(4,43,1)
(32,4,1)
(35,43,1)
(3,6,1)
(9,25,1)
(43,17,1)
(1,36,1)
(6,31,1)
(43,36,1)
(30,26,1)
(6,36,1)
(38,19,1)
(5,16,1)
(13,36,1)
(22,20,1)
(34,5,1)
(5,19,1)
(29,5,1)
(7,19,1)
(30,19,1)
(31,8,1)
(1,32,1)
(11,0,1)
(24,40,1)
(16,7,1)
(3,19,1)
(24,43,2)
(39,43,2)
(25,43,2)
(14,43,2)
(19,22,2)
(5,19,2)
(16,43,2)
(23,19,2)
(0,5,2)
(11,5,2)
(5,43,2)
(22,1,2)
(3,6,2)
(43,36,2)
(31,43,2)
(7,43,2)
(21,43,2)
(6,36,2)
(40,43,2)
(11,0,2)
(34,5,2)
(4,43,2)
(38,19,2)
(30,43,2)
(1,43,2)
(23,13,2)
(38,43,2)
(3,43,2)
(22,43,2)
(6,43,2)
(30,19,2)
(26,43,2)
(32,43,2)
(13,43,2)
(23,43,2)
(1,36,2)
(29,43,2)
(3,19,2)
(8,43,2)
(13,36,2)
(9,43,2)
(19,43,2)
(22,20,2)
-----------------------------------
(0,-1)
(1,malloc(data)
(2,data)
(3,dataBuffer[data-1])
(4,dataBuffer)
(5,dataBuffer == NULL)
(6,data-1)
(7,dataBuffer)
(8,data)
(9,dataBuffer[data-1] = \'\\\\0\')
(10,if (dataBuffer == NULL)
(11,exit(-1)
(12,)
(13,data-1)
(14,1)
(15,)
(16,NULL)
(17,100)
(18,dataBuffer[data-1] = '\\\\0')
(19,* dataBuffer = (char *)
(20,char *)
(21,dataBuffer)
(22,(char *)
(23,memset(dataBuffer, 'A', data-1)
(24,data)
(25,'\\\\0')
(26,dataBuffer)
(27,if (data < 100)
(28,)
(29,dataBuffer)
(30,free(dataBuffer)
(31,1)
(32,data)
(33,\'\\\\0\')
(34,1)
(35,RET)
(36,short data)
(37,dataBuffer)
(38,printLine(dataBuffer)
(39,dataBuffer)
(40,'A')
(41,\'A\')
(42,memset(dataBuffer, \'A\', data-1)
(43,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^