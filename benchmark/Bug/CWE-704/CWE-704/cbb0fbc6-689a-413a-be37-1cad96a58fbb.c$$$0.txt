-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
26,27
27,28
27,29
29,30
29,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
43,46
43,47
44,45
46,47
48,49
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
78,79
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,33,36,38,40,45,47,49,51,53,58,61,63,68,69,73,76,77,79
-----computeFrom-----
13,14
13,15
17,18
17,19
42,43
42,44
56,57
56,58
-----guardedBy-----
47,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(0,33,0)
(30,34,0)
(33,1,0)
(20,2,0)
(15,18,0)
(23,20,0)
(34,30,0)
(1,31,0)
(19,17,0)
(1,33,0)
(32,30,0)
(25,14,0)
(5,31,0)
(10,35,0)
(24,28,0)
(11,31,0)
(36,4,0)
(33,30,0)
(6,14,0)
(4,28,0)
(16,31,0)
(14,2,0)
(18,31,0)
(28,4,0)
(12,2,0)
(13,18,0)
(7,34,0)
(3,2,0)
(33,8,0)
(31,9,0)
(37,19,0)
(30,22,0)
(8,33,0)
(26,4,0)
(29,4,0)
(33,18,0)
(27,35,0)
(7,32,1)
(33,18,1)
(13,14,1)
(14,2,1)
(28,24,1)
(3,12,1)
(18,15,1)
(2,3,1)
(25,20,1)
(33,0,1)
(19,37,1)
(28,4,1)
(20,23,1)
(29,26,1)
(0,19,1)
(32,28,1)
(37,28,1)
(33,30,1)
(36,29,1)
(33,8,1)
(23,1,1)
(21,14,1)
(26,18,1)
(15,13,1)
(25,2,1)
(30,34,1)
(24,4,1)
(4,36,1)
(1,33,1)
(6,25,1)
(0,30,1)
(14,6,1)
(34,7,1)
(20,2,1)
(7,28,2)
(32,28,2)
(29,14,2)
(36,14,2)
(28,4,2)
(18,14,2)
(14,2,2)
(1,33,2)
(37,28,2)
(34,28,2)
(33,30,2)
(19,28,2)
(30,34,2)
(6,14,2)
(4,14,2)
(20,14,2)
(20,2,2)
(14,14,2)
(25,14,2)
(33,14,2)
(0,14,2)
(28,14,2)
(1,14,2)
(26,14,2)
(33,8,2)
(33,18,2)
(24,14,2)
(23,14,2)
(30,28,2)
(13,14,2)
(15,14,2)
-----------------------------------
(0,doubleNumber)
(1,printIntLine((int)
(2,j = 0)
(3,0)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,1)
(7,inputBuffer)
(8,int)
(9,)
(10,for(j = 0; j < 1; j++)
(11,inputBuffer)
(12,j)
(13,doubleNumber)
(14,j < 1)
(15,0)
(16,doubleNumber)
(17,)
(18,doubleNumber = 0)
(19,printLine("fgets()
(20,j++)
(21,RET)
(22,)
(23,j)
(24,NULL)
(25,j)
(26,inputBuffer)
(27,j)
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,CHAR_ARRAY_SIZE)
(30,doubleNumber = atof(inputBuffer)
(31,)
(32,doubleNumber)
(33,(int)
(34,atof(inputBuffer)
(35,)
(36,stdin)
(37,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^