-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,68,70
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(5,7,0)
(21,10,0)
(1,22,0)
(31,4,0)
(4,7,0)
(17,7,0)
(30,1,0)
(22,5,0)
(13,22,0)
(15,32,0)
(22,1,0)
(5,22,0)
(28,23,0)
(14,32,0)
(32,26,0)
(23,19,0)
(20,0,0)
(19,23,0)
(6,7,0)
(22,13,0)
(12,0,0)
(7,9,0)
(1,4,0)
(2,8,0)
(27,7,0)
(24,23,0)
(25,23,0)
(18,19,0)
(16,15,0)
(3,2,0)
(1,32,0)
(29,4,0)
(32,15,0)
(22,1,1)
(30,32,1)
(30,2,1)
(32,15,1)
(11,5,1)
(5,22,1)
(15,16,1)
(0,20,1)
(1,32,1)
(31,29,1)
(22,13,1)
(23,24,1)
(2,3,1)
(16,14,1)
(19,18,1)
(1,30,1)
(18,23,1)
(11,0,1)
(3,19,1)
(29,0,1)
(28,4,1)
(19,23,1)
(20,12,1)
(1,4,1)
(4,31,1)
(24,25,1)
(14,19,1)
(25,28,1)
(5,0,2)
(1,4,2)
(15,19,2)
(28,0,2)
(1,0,2)
(16,19,2)
(1,32,2)
(3,19,2)
(29,0,2)
(32,15,2)
(23,0,2)
(25,0,2)
(31,0,2)
(22,13,2)
(22,1,2)
(19,23,2)
(22,0,2)
(18,0,2)
(24,0,2)
(19,0,2)
(14,19,2)
(4,0,2)
(32,19,2)
(30,0,2)
(2,19,2)
(5,22,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE==5)
(1,sqrt(doubleNumber)
(2,printLine("fgets()
(3,"fgets()
(4,doubleNumber = 0)
(5,printIntLine((int)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,)
(8,)
(9,)
(10,)
(11,RET)
(12,GLOBAL_CONST_FIVE)
(13,int)
(14,doubleNumber)
(15,atof(inputBuffer)
(16,inputBuffer)
(17,inputBuffer)
(18,NULL)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,5)
(21,if(GLOBAL_CONST_FIVE==5)
(22,(int)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,stdin)
(25,CHAR_ARRAY_SIZE)
(26,)
(27,doubleNumber)
(28,inputBuffer)
(29,doubleNumber)
(30,doubleNumber)
(31,0)
(32,doubleNumber = atof(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^