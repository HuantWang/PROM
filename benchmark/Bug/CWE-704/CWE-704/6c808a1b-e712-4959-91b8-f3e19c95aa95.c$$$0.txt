-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_06_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,4,0)
(26,41,0)
(50,31,0)
(28,9,0)
(3,9,0)
(33,20,0)
(52,16,0)
(11,18,0)
(38,4,0)
(15,16,0)
(17,41,0)
(4,11,0)
(24,9,0)
(6,23,0)
(47,20,0)
(49,1,0)
(50,46,0)
(14,37,0)
(41,16,0)
(51,11,0)
(5,23,0)
(21,52,0)
(36,1,0)
(52,11,0)
(21,9,0)
(43,11,0)
(31,50,0)
(55,37,0)
(9,25,0)
(10,23,0)
(41,24,0)
(1,49,0)
(8,25,0)
(49,16,0)
(7,43,0)
(39,25,0)
(27,24,0)
(49,11,0)
(9,1,0)
(52,21,0)
(32,25,0)
(45,21,0)
(1,36,0)
(0,21,0)
(19,52,0)
(41,11,0)
(24,41,0)
(53,31,0)
(29,52,0)
(35,43,0)
(34,16,0)
(16,23,0)
(30,39,0)
(44,28,0)
(28,25,0)
(42,25,0)
(20,9,0)
(21,25,0)
(2,49,0)
(43,16,0)
(13,8,0)
(1,9,0)
(24,39,0)
(8,9,0)
(12,8,1)
(24,41,1)
(49,11,1)
(45,20,1)
(24,9,1)
(9,1,1)
(38,51,1)
(44,39,1)
(41,11,1)
(14,55,1)
(52,16,1)
(31,53,1)
(47,33,1)
(45,50,1)
(41,26,1)
(8,9,1)
(2,3,1)
(11,4,1)
(20,47,1)
(28,9,1)
(55,16,1)
(1,36,1)
(34,15,1)
(27,21,1)
(39,30,1)
(41,16,1)
(30,24,1)
(43,16,1)
(52,11,1)
(28,44,1)
(49,2,1)
(33,9,1)
(21,52,1)
(37,14,1)
(12,43,1)
(20,9,1)
(52,29,1)
(19,0,1)
(4,38,1)
(16,34,1)
(13,28,1)
(21,9,1)
(51,37,1)
(17,27,1)
(26,17,1)
(43,7,1)
(3,43,1)
(35,11,1)
(49,16,1)
(35,37,1)
(7,35,1)
(53,20,1)
(50,31,1)
(29,19,1)
(43,11,1)
(8,13,1)
(1,49,1)
(0,45,1)
(39,43,2)
(50,20,2)
(11,37,2)
(51,37,2)
(41,16,2)
(52,11,2)
(31,20,2)
(49,16,2)
(3,43,2)
(49,11,2)
(11,4,2)
(41,43,2)
(20,9,2)
(24,43,2)
(27,43,2)
(24,9,2)
(8,9,2)
(21,43,2)
(13,43,2)
(8,43,2)
(30,43,2)
(28,9,2)
(21,52,2)
(9,43,2)
(4,37,2)
(19,43,2)
(44,43,2)
(33,43,2)
(20,43,2)
(1,36,2)
(29,43,2)
(28,43,2)
(17,43,2)
(1,43,2)
(26,43,2)
(45,43,2)
(2,43,2)
(52,16,2)
(49,43,2)
(43,16,2)
(1,49,2)
(24,41,2)
(9,1,2)
(41,11,2)
(50,31,2)
(52,43,2)
(0,43,2)
(43,11,2)
(21,9,2)
(38,37,2)
(53,20,2)
(47,43,2)
-----------------------------------
(0,'A')
(1,(char *)
(2,data)
(3,dataBuffer)
(4,-1)
(5,if (data < 100)
(6,data)
(7,100)
(8,free(dataBuffer)
(9,* dataBuffer = (char *)
(10,if(STATIC_CONST_FIVE==5)
(11,data = -1)
(12,RET)
(13,dataBuffer)
(14,5)
(15,data)
(16,data = 0)
(17,data)
(18,)
(19,data)
(20,dataBuffer == NULL)
(21,memset(dataBuffer, 'A', data-1)
(22,\'A\')
(23,)
(24,dataBuffer[data-1])
(25,)
(26,1)
(27,dataBuffer)
(28,printLine(dataBuffer)
(29,1)
(30,'\\\\0')
(31,-1)
(32,if (dataBuffer == NULL)
(33,dataBuffer)
(34,0)
(35,data)
(36,char *)
(37,STATIC_CONST_FIVE==5)
(38,1)
(39,dataBuffer[data-1] = \'\\\\0\')
(40,\'\\\\0\')
(41,data-1)
(42,dataBuffer)
(43,data < 100)
(44,dataBuffer)
(45,dataBuffer)
(46,)
(47,NULL)
(48,memset(dataBuffer, \'A\', data-1)
(49,malloc(data)
(50,exit(-1)
(51,data)
(52,data-1)
(53,1)
(54,dataBuffer[data-1] = '\\\\0')
(55,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^