-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_07_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_07_bad(){    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_07_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_07_bad
{    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(3,1,0)
(14,1,0)
(2,8,0)
(47,8,0)
(18,29,0)
(1,3,0)
(26,1,0)
(0,20,0)
(20,16,0)
(10,3,0)
(16,31,0)
(7,16,0)
(15,45,0)
(8,47,0)
(36,33,0)
(4,45,0)
(25,44,0)
(1,16,0)
(44,50,0)
(6,15,0)
(48,16,0)
(51,50,0)
(43,29,0)
(23,18,0)
(7,15,0)
(44,29,0)
(51,29,0)
(5,30,0)
(52,15,0)
(18,27,0)
(34,43,0)
(32,30,0)
(20,32,0)
(24,7,0)
(3,29,0)
(16,12,0)
(20,15,0)
(30,50,0)
(18,23,0)
(55,50,0)
(19,31,0)
(38,20,0)
(1,15,0)
(13,45,0)
(17,51,0)
(41,7,0)
(27,15,0)
(21,43,0)
(32,29,0)
(32,20,0)
(35,45,0)
(29,18,0)
(3,50,0)
(46,50,0)
(49,27,0)
(22,29,0)
(27,16,0)
(31,16,0)
(29,50,0)
(39,33,0)
(9,32,0)
(27,18,0)
(37,3,0)
(47,54,0)
(2,43,1)
(27,16,1)
(43,34,1)
(33,36,1)
(32,20,1)
(32,29,1)
(37,43,1)
(25,30,1)
(22,7,1)
(5,32,1)
(21,29,1)
(3,29,1)
(18,27,1)
(14,26,1)
(7,16,1)
(9,3,1)
(31,19,1)
(1,14,1)
(24,16,1)
(30,5,1)
(38,0,1)
(44,25,1)
(10,37,1)
(47,8,1)
(17,44,1)
(37,47,1)
(42,7,1)
(26,10,1)
(27,15,1)
(7,41,1)
(3,1,1)
(27,49,1)
(52,6,1)
(29,18,1)
(34,21,1)
(39,15,1)
(51,17,1)
(24,33,1)
(19,48,1)
(15,52,1)
(0,9,1)
(8,2,1)
(1,15,1)
(18,23,1)
(42,51,1)
(49,22,1)
(20,16,1)
(36,39,1)
(20,38,1)
(48,33,1)
(20,15,1)
(43,29,1)
(7,15,1)
(44,29,1)
(16,31,1)
(41,24,1)
(1,16,1)
(51,29,1)
(7,16,2)
(30,7,2)
(27,15,2)
(47,8,2)
(19,33,2)
(3,29,2)
(20,16,2)
(43,7,2)
(1,16,2)
(17,7,2)
(3,1,2)
(3,7,2)
(31,33,2)
(38,7,2)
(8,43,2)
(2,43,2)
(18,27,2)
(0,7,2)
(16,33,2)
(20,7,2)
(29,18,2)
(44,29,2)
(27,16,2)
(44,7,2)
(32,20,2)
(21,7,2)
(14,7,2)
(9,7,2)
(32,29,2)
(29,7,2)
(1,7,2)
(32,7,2)
(51,7,2)
(34,7,2)
(47,43,2)
(18,23,2)
(16,31,2)
(51,29,2)
(1,15,2)
(18,7,2)
(26,7,2)
(49,7,2)
(22,7,2)
(20,15,2)
(7,15,2)
(37,7,2)
(10,7,2)
(48,33,2)
(5,7,2)
(25,7,2)
(27,7,2)
(43,29,2)
-----------------------------------
(0,data)
(1,data-1)
(2,1)
(3,memset(dataBuffer, \'A\', data-1)
(4,data)
(5,'\\\\0')
(6,data)
(7,data < 100)
(8,-1)
(9,dataBuffer)
(10,\'A\')
(11,\'\\\\0\')
(12,)
(13,if (data < 100)
(14,1)
(15,data = 0)
(16,data = -1)
(17,dataBuffer)
(18,(char *)
(19,1)
(20,data-1)
(21,dataBuffer)
(22,dataBuffer)
(23,char *)
(24,data)
(25,dataBuffer)
(26,data)
(27,malloc(data)
(28,'A')
(29,* dataBuffer = (char *)
(30,dataBuffer[data-1] = \'\\\\0\')
(31,-1)
(32,dataBuffer[data-1])
(33,staticFive==5)
(34,NULL)
(35,if(staticFive==5)
(36,5)
(37,dataBuffer)
(38,1)
(39,staticFive)
(40,memset(dataBuffer, 'A', data-1)
(41,100)
(42,RET)
(43,dataBuffer == NULL)
(44,printLine(dataBuffer)
(45,)
(46,dataBuffer)
(47,exit(-1)
(48,data)
(49,data)
(50,)
(51,free(dataBuffer)
(52,0)
(53,dataBuffer[data-1] = '\\\\0')
(54,)
(55,if (dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^