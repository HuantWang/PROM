-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_42_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
18,19
18,20
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_42_bad(){    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_42_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_42_bad
{    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(43,28,0)
(9,18,0)
(8,28,0)
(49,2,0)
(39,18,0)
(7,15,0)
(48,10,0)
(29,15,0)
(30,48,0)
(6,14,0)
(13,40,0)
(41,14,0)
(18,47,0)
(14,6,0)
(39,10,0)
(6,50,0)
(33,40,0)
(1,26,0)
(16,27,0)
(18,39,0)
(19,30,0)
(32,47,0)
(31,40,0)
(24,48,0)
(46,32,0)
(44,25,0)
(2,47,0)
(43,45,0)
(26,15,0)
(50,6,0)
(0,30,0)
(11,39,0)
(22,31,0)
(4,27,0)
(21,31,0)
(47,15,0)
(23,21,0)
(26,47,0)
(30,15,0)
(34,48,0)
(32,15,0)
(37,39,0)
(17,7,0)
(28,43,0)
(27,10,0)
(10,25,0)
(25,10,0)
(48,30,0)
(25,31,0)
(12,47,0)
(30,47,0)
(47,6,0)
(6,47,0)
(14,10,0)
(31,21,0)
(18,7,0)
(3,15,0)
(10,40,0)
(5,10,0)
(36,2,0)
(47,6,1)
(4,16,1)
(25,44,1)
(49,36,1)
(42,26,1)
(36,47,1)
(18,39,1)
(26,47,1)
(37,11,1)
(19,2,1)
(21,23,1)
(7,17,1)
(0,19,1)
(18,47,1)
(2,47,1)
(42,27,1)
(19,43,1)
(26,1,1)
(27,4,1)
(30,47,1)
(17,18,1)
(1,32,1)
(48,10,1)
(34,0,1)
(32,47,1)
(44,5,1)
(28,8,1)
(39,37,1)
(43,28,1)
(31,21,1)
(14,41,1)
(24,34,1)
(23,22,1)
(10,25,1)
(2,49,1)
(16,10,1)
(9,30,1)
(8,2,1)
(48,24,1)
(39,10,1)
(46,7,1)
(5,31,1)
(6,14,1)
(12,27,1)
(11,9,1)
(14,10,1)
(30,48,1)
(6,50,1)
(32,46,1)
(41,12,1)
(27,10,1)
(25,31,1)
(18,39,2)
(43,2,2)
(11,27,2)
(30,48,2)
(27,10,2)
(17,27,2)
(26,47,2)
(30,47,2)
(2,27,2)
(32,27,2)
(24,27,2)
(28,2,2)
(8,2,2)
(34,27,2)
(1,27,2)
(39,27,2)
(14,10,2)
(46,27,2)
(48,10,2)
(6,50,2)
(37,27,2)
(18,27,2)
(2,47,2)
(32,47,2)
(19,27,2)
(41,27,2)
(39,10,2)
(43,28,2)
(47,27,2)
(26,27,2)
(7,27,2)
(9,27,2)
(0,27,2)
(47,6,2)
(12,27,2)
(49,27,2)
(10,25,2)
(30,27,2)
(6,14,2)
(48,27,2)
(18,47,2)
(6,27,2)
(14,27,2)
(36,27,2)
(31,21,2)
(25,31,2)
-----------------------------------
(0,'A')
(1,dataBuffer)
(2,dataBuffer == NULL)
(3,if (dataBuffer == NULL)
(4,100)
(5,data)
(6,(char *)
(7,dataBuffer[data-1] = \'\\\\0\')
(8,1)
(9,dataBuffer)
(10,data = badSource(data)
(11,data)
(12,dataBuffer)
(13,data)
(14,malloc(data)
(15,)
(16,data)
(17,'\\\\0')
(18,dataBuffer[data-1])
(19,dataBuffer)
(20,\'A\')
(21,-1)
(22,data)
(23,1)
(24,1)
(25,badSource(data)
(26,free(dataBuffer)
(27,data < 100)
(28,-1)
(29,dataBuffer)
(30,memset(dataBuffer, 'A', data-1)
(31,data = -1)
(32,printLine(dataBuffer)
(33,if (data < 100)
(34,data)
(35,\'\\\\0\')
(36,dataBuffer)
(37,1)
(38,dataBuffer[data-1] = '\\\\0')
(39,data-1)
(40,)
(41,data)
(42,RET)
(43,exit(-1)
(44,data)
(45,)
(46,dataBuffer)
(47,* dataBuffer = (char *)
(48,data-1)
(49,NULL)
(50,char *)
(51,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^