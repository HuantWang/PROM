-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
71,72
72,73
72,74
74,75
74,76
76,77
77,78
77,79
78,79
78,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,73,75,79,80,82,86,88
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_short_15_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_short_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(0,38,0)
(31,35,0)
(38,0,0)
(11,21,0)
(36,1,0)
(42,0,0)
(33,40,0)
(37,35,0)
(0,1,0)
(27,13,0)
(21,5,0)
(26,11,0)
(18,8,0)
(31,37,0)
(11,14,0)
(15,6,0)
(17,13,0)
(16,1,0)
(41,30,0)
(5,21,0)
(9,0,0)
(4,31,0)
(29,13,0)
(11,37,0)
(25,0,0)
(11,40,0)
(35,6,0)
(10,24,0)
(22,41,0)
(32,35,0)
(14,11,0)
(1,3,0)
(21,6,0)
(37,11,0)
(20,21,0)
(44,13,0)
(3,13,0)
(23,37,0)
(34,3,0)
(8,1,0)
(40,8,0)
(24,13,0)
(39,6,0)
(40,28,0)
(2,5,0)
(8,40,0)
(19,38,0)
(43,3,0)
(9,25,1)
(44,24,1)
(10,7,1)
(21,5,1)
(7,21,1)
(26,23,1)
(31,4,1)
(11,40,1)
(5,2,1)
(8,1,1)
(11,14,1)
(42,1,1)
(17,41,1)
(8,18,1)
(18,33,1)
(41,22,1)
(16,36,1)
(38,0,1)
(11,21,1)
(0,1,1)
(19,0,1)
(1,16,1)
(12,31,1)
(37,11,1)
(38,19,1)
(0,9,1)
(22,38,1)
(33,38,1)
(25,42,1)
(4,37,1)
(40,8,1)
(23,44,1)
(2,20,1)
(23,17,1)
(11,26,1)
(31,37,1)
(17,40,1)
(36,7,1)
(24,10,1)
(19,7,2)
(9,7,2)
(21,5,2)
(25,7,2)
(36,7,2)
(41,38,2)
(22,38,2)
(44,7,2)
(24,7,2)
(42,7,2)
(0,7,2)
(18,38,2)
(8,1,2)
(40,8,2)
(38,7,2)
(37,11,2)
(8,38,2)
(33,38,2)
(1,7,2)
(40,38,2)
(10,7,2)
(38,0,2)
(11,21,2)
(31,37,2)
(11,40,2)
(0,1,2)
(16,7,2)
(17,7,2)
(11,14,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,inputBuffer[CHAR_ARRAY_SIZE] = "")
(2,1)
(3,)
(4,shortData)
(5,-1)
(6,)
(7,6)
(8,atoi(inputBuffer)
(9,stdin)
(10,"Benign, fixed string")
(11,(short)
(12,RET)
(13,)
(14,short)
(15,data)
(16,"")
(17,break;)
(18,inputBuffer)
(19,NULL)
(20,data)
(21,data = -1)
(22,"fgets()
(23,shortData)
(24,printLine("Benign, fixed string")
(25,CHAR_ARRAY_SIZE)
(26,data)
(27,default:)
(28,)
(29,case 6:)
(30,)
(31,printShortLine(shortData)
(32,shortData)
(33,data)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,)
(36,inputBuffer)
(37,shortData = (short)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,switch(6)
(40,data = atoi(inputBuffer)
(41,printLine("fgets()
(42,inputBuffer)
(43,inputBuffer)
(44,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^