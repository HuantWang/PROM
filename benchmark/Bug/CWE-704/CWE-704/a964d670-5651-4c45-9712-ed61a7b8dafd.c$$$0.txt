-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_09_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,41,0)
(33,39,0)
(50,24,0)
(1,24,0)
(19,28,0)
(7,38,0)
(2,14,0)
(41,30,0)
(4,5,0)
(3,10,0)
(27,45,0)
(30,52,0)
(12,36,0)
(35,10,0)
(8,36,0)
(14,2,0)
(34,41,0)
(28,45,0)
(10,35,0)
(9,4,0)
(40,2,0)
(45,27,0)
(16,12,0)
(4,39,0)
(21,38,0)
(48,8,0)
(13,36,0)
(39,47,0)
(8,5,0)
(10,12,0)
(10,5,0)
(45,11,0)
(20,14,0)
(38,5,0)
(26,36,0)
(35,47,0)
(26,5,0)
(5,14,0)
(42,45,0)
(0,39,0)
(49,28,0)
(32,24,0)
(47,24,0)
(22,47,0)
(27,18,0)
(18,27,0)
(4,36,0)
(15,35,0)
(14,20,0)
(39,45,0)
(6,26,0)
(37,35,0)
(43,36,0)
(17,5,0)
(28,47,0)
(5,36,0)
(27,53,0)
(35,45,0)
(54,47,0)
(39,4,0)
(25,4,0)
(14,5,0)
(53,27,0)
(2,45,0)
(2,47,0)
(42,51,1)
(10,5,1)
(29,28,1)
(8,48,1)
(49,51,1)
(39,47,1)
(10,35,1)
(25,9,1)
(28,47,1)
(48,12,1)
(17,28,1)
(14,2,1)
(7,5,1)
(26,6,1)
(28,45,1)
(19,49,1)
(2,40,1)
(12,16,1)
(49,45,1)
(5,14,1)
(21,7,1)
(6,8,1)
(45,27,1)
(47,54,1)
(16,10,1)
(35,37,1)
(15,3,1)
(26,5,1)
(9,38,1)
(37,15,1)
(29,26,1)
(33,25,1)
(9,30,1)
(27,18,1)
(30,41,1)
(34,38,1)
(27,53,1)
(2,45,1)
(38,5,1)
(14,20,1)
(35,45,1)
(0,33,1)
(28,19,1)
(39,45,1)
(4,5,1)
(8,5,1)
(54,22,1)
(3,4,1)
(38,21,1)
(18,42,1)
(39,0,1)
(51,47,1)
(40,17,1)
(4,39,1)
(35,47,1)
(41,34,1)
(2,47,1)
(17,28,2)
(21,28,2)
(26,5,2)
(4,5,2)
(4,28,2)
(14,28,2)
(14,20,2)
(2,28,2)
(5,14,2)
(39,45,2)
(14,2,2)
(10,35,2)
(30,41,2)
(3,28,2)
(4,39,2)
(2,47,2)
(38,28,2)
(9,28,2)
(33,28,2)
(10,28,2)
(16,28,2)
(27,18,2)
(30,38,2)
(2,45,2)
(34,38,2)
(39,47,2)
(35,45,2)
(45,27,2)
(27,51,2)
(40,28,2)
(39,28,2)
(37,28,2)
(0,28,2)
(27,53,2)
(38,5,2)
(8,5,2)
(45,51,2)
(25,28,2)
(48,28,2)
(5,28,2)
(7,28,2)
(35,47,2)
(42,51,2)
(35,28,2)
(8,28,2)
(28,45,2)
(18,51,2)
(12,28,2)
(28,47,2)
(6,28,2)
(26,28,2)
(15,28,2)
(41,38,2)
(10,5,2)
-----------------------------------
(0,1)
(1,if (data < 100)
(2,malloc(data)
(3,dataBuffer)
(4,memset(dataBuffer, \'A\', data-1)
(5,* dataBuffer = (char *)
(6,dataBuffer)
(7,dataBuffer)
(8,printLine(dataBuffer)
(9,dataBuffer)
(10,dataBuffer[data-1])
(11,)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,if (dataBuffer == NULL)
(14,(char *)
(15,data)
(16,\'\\\\0\')
(17,dataBuffer)
(18,RAND32()
(19,100)
(20,char *)
(21,NULL)
(22,data)
(23,'\\\\0')
(24,)
(25,'A')
(26,free(dataBuffer)
(27,(short)
(28,data < 100)
(29,RET)
(30,exit(-1)
(31,dataBuffer[data-1] = '\\\\0')
(32,data)
(33,data)
(34,1)
(35,data-1)
(36,)
(37,1)
(38,dataBuffer == NULL)
(39,data-1)
(40,data)
(41,-1)
(42,data)
(43,dataBuffer)
(44,\'A\')
(45,data = (short)
(46,memset(dataBuffer, 'A', data-1)
(47,data = 0)
(48,dataBuffer)
(49,data)
(50,if(GLOBAL_CONST_TRUE)
(51,GLOBAL_CONST_TRUE)
(52,)
(53,short)
(54,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^