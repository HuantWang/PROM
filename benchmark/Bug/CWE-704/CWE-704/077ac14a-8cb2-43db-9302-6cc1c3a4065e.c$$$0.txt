-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,63,65,67,70,72,74,76,80,82,83,85,86,91,93,94,95,99,100,105,107,109,111,116,118,119,123,125
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
84,85
84,86
88,89
88,90
92,93
92,94
97,98
97,99
113,114
113,115
-----guardedBy-----
37,53
99,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,47,0)
(64,37,0)
(29,39,0)
(58,38,0)
(26,37,0)
(0,9,0)
(39,47,0)
(52,44,0)
(1,49,0)
(30,14,0)
(60,3,0)
(13,25,0)
(25,62,0)
(57,29,0)
(6,64,0)
(9,58,0)
(36,42,0)
(3,60,0)
(54,38,0)
(29,64,0)
(47,38,0)
(40,29,0)
(49,11,0)
(12,19,0)
(50,9,0)
(44,47,0)
(59,60,0)
(15,3,0)
(60,47,0)
(19,42,0)
(56,24,0)
(8,11,0)
(27,38,0)
(58,4,0)
(9,39,0)
(45,19,0)
(64,34,0)
(24,28,0)
(29,20,0)
(31,3,0)
(53,47,0)
(23,25,0)
(33,64,0)
(16,49,0)
(19,45,0)
(5,39,0)
(29,58,0)
(10,1,0)
(37,64,0)
(33,58,0)
(32,33,0)
(4,58,0)
(18,39,0)
(35,58,0)
(46,11,0)
(43,4,0)
(51,60,0)
(37,11,0)
(21,33,0)
(42,47,0)
(7,49,0)
(11,25,0)
(2,29,0)
(55,49,0)
(9,64,0)
(61,45,0)
(49,1,0)
(9,14,0)
(14,20,0)
(48,45,0)
(17,47,0)
(44,39,0)
(43,35,1)
(6,1,1)
(7,16,1)
(57,33,1)
(1,49,1)
(41,58,1)
(49,11,1)
(64,37,1)
(15,59,1)
(59,51,1)
(31,15,1)
(29,58,1)
(4,43,1)
(9,39,1)
(44,52,1)
(19,45,1)
(60,3,1)
(63,44,1)
(29,2,1)
(33,58,1)
(5,18,1)
(61,12,1)
(18,24,1)
(11,8,1)
(46,41,1)
(33,21,1)
(18,64,1)
(52,14,1)
(14,30,1)
(0,29,1)
(26,6,1)
(1,10,1)
(12,60,1)
(29,64,1)
(50,0,1)
(9,64,1)
(40,57,1)
(44,39,1)
(33,64,1)
(9,58,1)
(49,55,1)
(9,50,1)
(48,61,1)
(56,1,1)
(52,33,1)
(8,46,1)
(37,11,1)
(58,4,1)
(45,48,1)
(24,56,1)
(2,40,1)
(39,5,1)
(16,11,1)
(32,42,1)
(18,41,1)
(42,36,1)
(21,32,1)
(55,7,1)
(29,39,1)
(36,19,1)
(10,49,1)
(37,26,1)
(51,39,1)
(30,9,1)
(3,31,1)
(1,49,2)
(14,33,2)
(37,1,2)
(55,41,2)
(50,33,2)
(8,41,2)
(24,1,2)
(40,33,2)
(11,41,2)
(57,33,2)
(64,1,2)
(29,64,2)
(58,4,2)
(29,33,2)
(1,41,2)
(7,41,2)
(9,33,2)
(9,58,2)
(37,11,2)
(2,33,2)
(19,45,2)
(16,41,2)
(9,64,2)
(30,33,2)
(6,1,2)
(0,33,2)
(46,41,2)
(10,41,2)
(44,39,2)
(60,3,2)
(29,39,2)
(56,1,2)
(29,58,2)
(33,58,2)
(33,64,2)
(64,37,2)
(49,41,2)
(49,11,2)
(9,39,2)
(26,1,2)
-----------------------------------
(0,dest)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,data)
(3,100-1)
(4,-1)
(5,"")
(6,data)
(7,CHAR_ARRAY_SIZE)
(8,"")
(9,dest[data])
(10,NULL)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,source)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,dest[data] = \\\'\\\\0\\\')
(15,100)
(16,inputBuffer)
(17,dest)
(18,dest)
(19,source[100-1])
(20,)
(21,100)
(22,source)
(23,inputBuffer)
(24,printLine("fgets()
(25,)
(26,inputBuffer)
(27,data)
(28,)
(29,memcpy(dest, source, data)
(30,\\\'\\\\0\\\')
(31,1)
(32,data)
(33,data < 100)
(34,)
(35,data)
(36,\\\'\\\\0\\\')
(37,atoi(inputBuffer)
(38,)
(39,dest[100] = "")
(40,source)
(41,1)
(42,source[100-1] = \\\'\\\\0\\\')
(43,1)
(44,printLine(dest)
(45,100-1)
(46,inputBuffer)
(47,)
(48,1)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,data)
(51,source)
(52,dest)
(53,if (data < 100)
(54,if(1)
(55,stdin)
(56,"fgets()
(57,dest)
(58,data = -1)
(59,\\\'A\\\')
(60,memset(source, \\\'A\\\', 100-1)
(61,100)
(62,)
(63,RET)
(64,data = atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^