-----label-----
1
-----code-----
static short badSource(short data)
{
    if(badStatic)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
18,19
18,20
18,21
20,21
21,22
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,6,8,12,17,19,22,24,29,31,33,35,37,42,45,46,49,51,56,57,60
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
badStatic
badStatic
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(13,16,0)
(5,1,0)
(2,1,0)
(10,19,0)
(1,2,0)
(19,24,0)
(3,22,0)
(25,1,0)
(29,17,0)
(28,19,0)
(12,2,0)
(6,26,0)
(22,7,0)
(21,16,0)
(19,16,0)
(28,24,0)
(18,1,0)
(16,19,0)
(17,14,0)
(15,28,0)
(19,11,0)
(7,8,0)
(13,22,0)
(9,28,0)
(23,7,0)
(0,13,0)
(27,22,0)
(16,21,0)
(16,13,0)
(28,26,0)
(20,7,0)
(1,22,0)
(12,1,1)
(19,16,1)
(22,27,1)
(28,24,1)
(15,28,1)
(29,2,1)
(1,25,1)
(9,17,1)
(19,24,1)
(13,22,1)
(17,29,1)
(28,9,1)
(2,1,1)
(2,12,1)
(9,19,1)
(18,5,1)
(13,0,1)
(5,22,1)
(28,19,1)
(16,13,1)
(25,18,1)
(1,22,1)
(16,21,1)
(0,10,1)
(27,3,1)
(10,2,1)
(3,4,1)
(9,4,1)
(1,4,2)
(19,2,2)
(15,28,2)
(1,22,2)
(3,4,2)
(29,2,2)
(18,4,2)
(22,4,2)
(19,16,2)
(16,21,2)
(28,19,2)
(16,13,2)
(2,1,2)
(19,24,2)
(13,22,2)
(28,24,2)
(10,2,2)
(17,2,2)
(5,4,2)
(13,2,2)
(12,4,2)
(16,2,2)
(2,4,2)
(0,2,2)
(27,4,2)
(25,4,2)
-----------------------------------
(0,inputBuffer)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,inputBuffer)
(4,badStatic)
(5,inputBuffer)
(6,if(badStatic)
(7,)
(8,)
(9,data)
(10,data)
(11,)
(12,NULL)
(13,atoi(inputBuffer)
(14,)
(15,RET)
(16,(short)
(17,printLine("fgets()
(18,CHAR_ARRAY_SIZE)
(19,data = (short)
(20,inputBuffer)
(21,short)
(22,inputBuffer[CHAR_ARRAY_SIZE] = "")
(23,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,short data)
(25,stdin)
(26,)
(27,"")
(28,return data;)
(29,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^