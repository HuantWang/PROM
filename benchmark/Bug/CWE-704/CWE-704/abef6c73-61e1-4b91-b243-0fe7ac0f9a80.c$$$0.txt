-----label-----
1
-----code-----
void CWE843_Type_Confusion__short_15_bad()
{
    void * data;
    /* Initialize data */
    data = NULL;
    switch(6)
    {
    case 6:
    {
        /* FLAW: Point data to a short */
        short shortBuffer = 8;
        data = &shortBuffer;
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Attempt to access data as an int */
    printIntLine(*((int*)data));
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
36,37
40,41
41,42
41,43
42,43
46,47
47,48
47,49
48,49
50,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,30,34,37,38,39,43,44,45,49,54,56,58
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE843_Type_Confusion__short_15_bad(){    void * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Attempt to access data as an int */    printIntLine(*((int*)data));}
void
CWE843_Type_Confusion__short_15_bad()
CWE843_Type_Confusion__short_15_bad
{    void * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Attempt to access data as an int */    printIntLine(*((int*)data));}
void * data;
void * data;
void
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }
short shortBuffer = 8;
short shortBuffer = 8;
short
shortBuffer = 8
shortBuffer
= 8
8
data = &shortBuffer;
data = &shortBuffer
data
data
&shortBuffer
shortBuffer
shortBuffer
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
printIntLine(*((int*)data));
printIntLine(*((int*)data))
printIntLine
printIntLine
*((int*)data)
((int*)data)
(int*)data
int*
int
*
*
data
data
-----joern-----
(10,3,0)
(28,3,0)
(19,14,0)
(16,12,0)
(17,11,0)
(7,14,0)
(18,12,0)
(14,16,0)
(27,5,0)
(25,23,0)
(6,12,0)
(4,28,0)
(14,11,0)
(3,0,0)
(24,16,0)
(20,5,0)
(21,18,0)
(23,5,0)
(14,21,0)
(0,5,0)
(22,0,0)
(28,11,0)
(26,3,0)
(14,7,0)
(11,28,0)
(2,5,0)
(11,0,0)
(13,16,0)
(15,5,0)
(9,12,0)
(21,14,0)
(18,21,0)
(27,11,1)
(8,16,1)
(17,3,1)
(14,11,1)
(11,28,1)
(16,24,1)
(19,27,1)
(26,10,1)
(28,3,1)
(28,4,1)
(19,20,1)
(14,16,1)
(21,14,1)
(4,17,1)
(3,26,1)
(23,25,1)
(10,8,1)
(14,7,1)
(25,8,1)
(24,13,1)
(18,21,1)
(1,18,1)
(14,19,1)
(20,23,1)
(27,8,2)
(17,8,2)
(25,8,2)
(14,7,2)
(11,28,2)
(14,16,2)
(20,8,2)
(28,3,2)
(23,8,2)
(14,11,2)
(21,14,2)
(10,8,2)
(28,8,2)
(26,8,2)
(11,8,2)
(3,8,2)
(18,21,2)
(4,8,2)
-----------------------------------
(0,)
(1,RET)
(2,default:)
(3,shortBuffer = 8)
(4,shortBuffer)
(5,)
(6,switch(6)
(7,int*)
(8,6)
(9,data)
(10,shortBuffer)
(11,data = &shortBuffer)
(12,)
(13,data)
(14,(int*)
(15,case 6:)
(16,data = NULL)
(17,data)
(18,printIntLine(*((int*)
(19,data)
(20,break;)
(21,*((int*)
(22,shortBuffer)
(23,printLine("Benign, fixed string")
(24,NULL)
(25,"Benign, fixed string")
(26,8)
(27,break;)
(28,&shortBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^