-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
60,61
60,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,31,33,35,38,40,42,44,48,50,51,53,54,59,61,62,63,67,68,73,75,77,79,84,86,87,91,93
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
52,53
52,54
56,57
56,58
60,61
60,62
65,66
65,67
81,82
81,83
-----guardedBy-----
67,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }
5==5
5
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(11,14,0)
(21,29,0)
(30,21,0)
(31,32,0)
(15,39,0)
(2,11,0)
(26,14,0)
(9,38,0)
(37,16,0)
(21,38,0)
(10,39,0)
(39,48,0)
(25,41,0)
(16,32,0)
(50,43,0)
(41,20,0)
(24,3,0)
(18,14,0)
(40,38,0)
(32,16,0)
(43,24,0)
(19,41,0)
(36,39,0)
(39,14,0)
(19,49,0)
(8,24,0)
(23,41,0)
(22,20,0)
(42,41,0)
(11,41,0)
(39,24,0)
(13,49,0)
(46,45,0)
(33,49,0)
(38,9,0)
(35,41,0)
(1,40,0)
(12,25,0)
(21,24,0)
(6,9,0)
(38,20,0)
(49,19,0)
(44,19,0)
(24,43,0)
(29,48,0)
(39,38,0)
(34,40,0)
(40,24,0)
(16,25,0)
(17,19,0)
(0,32,0)
(14,41,0)
(47,29,0)
(4,38,0)
(5,20,0)
(21,14,0)
(7,21,0)
(27,45,0)
(47,21,1)
(26,18,1)
(2,29,1)
(43,50,1)
(34,1,1)
(12,16,1)
(28,11,1)
(50,8,1)
(2,40,1)
(11,2,1)
(40,34,1)
(15,36,1)
(40,38,1)
(49,33,1)
(39,38,1)
(8,45,1)
(0,37,1)
(38,9,1)
(24,43,1)
(18,45,1)
(19,49,1)
(40,24,1)
(11,14,1)
(37,19,1)
(32,31,1)
(9,6,1)
(10,15,1)
(14,26,1)
(46,38,1)
(45,27,1)
(16,32,1)
(1,25,1)
(21,38,1)
(18,24,1)
(30,7,1)
(33,13,1)
(13,17,1)
(39,10,1)
(7,39,1)
(25,12,1)
(29,47,1)
(31,0,1)
(36,40,1)
(21,14,1)
(17,44,1)
(44,14,1)
(21,30,1)
(39,14,1)
(39,24,1)
(27,46,1)
(21,24,1)
(6,4,1)
(21,24,2)
(11,14,2)
(21,38,2)
(15,40,2)
(21,14,2)
(19,49,2)
(50,45,2)
(43,45,2)
(24,45,2)
(36,40,2)
(40,38,2)
(39,38,2)
(16,32,2)
(7,40,2)
(24,43,2)
(21,40,2)
(8,45,2)
(39,24,2)
(29,40,2)
(39,40,2)
(47,40,2)
(10,40,2)
(30,40,2)
(39,14,2)
(40,24,2)
(38,9,2)
-----------------------------------
(0,100)
(1,data)
(2,dest)
(3,)
(4,data)
(5,if(5==5)
(6,1)
(7,dest)
(8,data)
(9,-1)
(10,data)
(11,printLine(dest)
(12,\\\'\\\\0\\\')
(13,100)
(14,dest[100] = "")
(15,source)
(16,source[100-1])
(17,\\\'A\\\')
(18,dest)
(19,memset(source, \\\'A\\\', 100-1)
(20,)
(21,dest[data])
(22,data)
(23,source)
(24,data = -1)
(25,source[100-1] = \\\'\\\\0\\\')
(26,"")
(27,5)
(28,RET)
(29,dest[data] = \\\'\\\\0\\\')
(30,data)
(31,1)
(32,100-1)
(33,1)
(34,100)
(35,dest)
(36,dest)
(37,source)
(38,data = -1)
(39,memcpy(dest, source, data)
(40,data < 100)
(41,)
(42,if (data < 100)
(43,-1)
(44,source)
(45,5==5)
(46,5)
(47,\\\'\\\\0\\\')
(48,)
(49,100-1)
(50,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^