-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
54,55
54,56
54,57
54,58
54,59
54,60
55,56
56,57
56,58
58,59
58,60
58,61
61,62
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
86,90
87,88
89,90
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
102,103
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,14,16,20,22,26,29,34,35,37,41,43,47,48,52,53,57,59,60,64,66,69,71,75,77,82,84,88,90,91,94,95,100,103,104,105,109,111,115,117
-----computeFrom-----
18,19
18,20
24,25
24,26
31,32
31,33
50,51
50,52
73,74
73,75
92,93
92,94
97,98
97,99
101,102
101,103
-----guardedBy-----
52,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,14,0)
(32,61,0)
(42,19,0)
(48,2,0)
(15,46,0)
(42,48,0)
(18,4,0)
(27,2,0)
(59,48,0)
(36,34,0)
(28,34,0)
(16,59,0)
(13,59,0)
(49,11,0)
(46,48,0)
(56,1,0)
(3,40,0)
(31,17,0)
(26,28,0)
(61,32,0)
(6,37,0)
(8,1,0)
(60,23,0)
(37,61,0)
(9,14,0)
(21,40,0)
(30,7,0)
(11,46,0)
(29,42,0)
(38,44,0)
(5,46,0)
(17,48,0)
(19,2,0)
(0,4,0)
(17,2,0)
(7,34,0)
(11,34,0)
(25,48,0)
(24,40,0)
(14,9,0)
(47,56,0)
(62,9,0)
(4,42,0)
(46,2,0)
(46,11,0)
(22,24,0)
(43,28,0)
(42,4,0)
(4,34,0)
(61,48,0)
(44,38,0)
(40,1,0)
(57,56,0)
(51,2,0)
(58,38,0)
(61,37,0)
(34,56,0)
(24,1,0)
(23,2,0)
(54,1,0)
(52,24,0)
(12,19,0)
(34,7,0)
(44,10,0)
(20,52,0)
(41,52,0)
(48,61,0)
(14,1,0)
(37,34,0)
(55,11,0)
(23,48,0)
(40,3,0)
(35,7,0)
(17,31,1)
(14,9,1)
(62,45,1)
(42,4,1)
(9,62,1)
(22,52,1)
(34,7,1)
(43,34,1)
(48,61,1)
(60,17,1)
(15,44,1)
(39,23,1)
(59,48,1)
(4,34,1)
(59,16,1)
(26,43,1)
(24,40,1)
(20,41,1)
(58,59,1)
(44,38,1)
(41,40,1)
(18,0,1)
(23,60,1)
(46,11,1)
(46,48,1)
(28,26,1)
(35,36,1)
(42,48,1)
(5,15,1)
(11,55,1)
(7,30,1)
(49,5,1)
(61,37,1)
(13,48,1)
(11,34,1)
(21,14,1)
(4,18,1)
(23,48,1)
(37,6,1)
(28,34,1)
(29,46,1)
(30,35,1)
(15,59,1)
(24,22,1)
(19,12,1)
(37,34,1)
(31,19,1)
(55,49,1)
(25,28,1)
(36,24,1)
(3,21,1)
(38,58,1)
(0,29,1)
(39,28,1)
(12,42,1)
(52,20,1)
(6,25,1)
(61,32,1)
(40,3,1)
(17,48,1)
(16,13,1)
(61,28,2)
(59,28,2)
(48,61,2)
(11,28,2)
(14,9,2)
(61,32,2)
(0,28,2)
(17,48,2)
(37,28,2)
(60,28,2)
(24,40,2)
(17,28,2)
(46,48,2)
(12,28,2)
(42,4,2)
(31,28,2)
(16,28,2)
(40,3,2)
(44,38,2)
(5,28,2)
(58,59,2)
(4,34,2)
(37,34,2)
(48,28,2)
(19,28,2)
(34,7,2)
(42,28,2)
(23,48,2)
(4,28,2)
(61,37,2)
(15,28,2)
(25,28,2)
(23,28,2)
(59,48,2)
(46,11,2)
(18,28,2)
(38,59,2)
(28,34,2)
(55,28,2)
(49,28,2)
(29,28,2)
(44,59,2)
(42,48,2)
(13,28,2)
(6,28,2)
(46,28,2)
(11,34,2)
-----------------------------------
(0,data)
(1,)
(2,)
(3,RAND32()
(4,data-1)
(5,\'A\')
(6,data)
(7,myUnion.unionSecond)
(8,data)
(9,-1)
(10,)
(11,data-1)
(12,\'\\\\0\')
(13,dataBuffer)
(14,data = -1)
(15,dataBuffer)
(16,NULL)
(17,printLine(dataBuffer)
(18,1)
(19,dataBuffer[data-1] = '\\\\0')
(20,unionFirst)
(21,data)
(22,data)
(23,free(dataBuffer)
(24,myUnion.unionFirst = data)
(25,dataBuffer)
(26,100)
(27,dataBuffer)
(28,data < 100)
(29,dataBuffer)
(30,unionSecond)
(31,dataBuffer)
(32,char *)
(33,'A')
(34,data = myUnion.unionSecond)
(35,myUnion)
(36,data)
(37,malloc(data)
(38,-1)
(39,RET)
(40,data = RAND32()
(41,myUnion)
(42,dataBuffer[data-1])
(43,data)
(44,exit(-1)
(45,data)
(46,memset(dataBuffer, 'A', data-1)
(47,if (data < 100)
(48,* dataBuffer = (char *)
(49,data)
(50,'\\\\0')
(51,if (dataBuffer == NULL)
(52,myUnion.unionFirst)
(53,memset(dataBuffer, \'A\', data-1)
(54,myUnion)
(55,1)
(56,)
(57,data)
(58,1)
(59,dataBuffer == NULL)
(60,dataBuffer)
(61,(char *)
(62,1)
(63,dataBuffer[data-1] = \'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^