-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
20,21
20,22
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_02_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(2,6,0)
(11,43,0)
(34,43,0)
(16,43,0)
(41,43,0)
(27,40,0)
(25,43,0)
(23,29,0)
(22,18,0)
(1,22,0)
(7,15,0)
(6,32,0)
(0,8,0)
(30,8,0)
(37,15,0)
(14,7,0)
(26,44,0)
(45,35,0)
(18,40,0)
(18,42,0)
(13,23,0)
(33,30,0)
(17,22,0)
(22,34,0)
(4,18,0)
(21,29,0)
(15,7,0)
(44,18,0)
(9,35,0)
(5,29,0)
(29,23,0)
(12,8,0)
(30,18,0)
(40,18,0)
(44,32,0)
(22,6,0)
(40,27,0)
(38,34,0)
(15,43,0)
(3,34,0)
(23,41,0)
(20,7,0)
(47,43,0)
(22,8,0)
(46,44,0)
(44,8,0)
(40,31,0)
(8,35,0)
(48,44,0)
(43,35,0)
(19,15,0)
(39,41,0)
(36,25,0)
(25,34,0)
(44,34,0)
(28,30,0)
(31,40,0)
(40,31,1)
(15,7,1)
(25,36,1)
(44,8,1)
(46,48,1)
(14,20,1)
(29,21,1)
(7,14,1)
(36,6,1)
(44,34,1)
(34,38,1)
(17,44,1)
(30,28,1)
(48,30,1)
(39,23,1)
(25,34,1)
(22,1,1)
(33,41,1)
(22,8,1)
(27,4,1)
(22,34,1)
(1,17,1)
(4,24,1)
(26,46,1)
(5,13,1)
(18,40,1)
(10,25,1)
(3,18,1)
(41,39,1)
(12,0,1)
(2,22,1)
(44,26,1)
(23,29,1)
(30,8,1)
(20,19,1)
(8,12,1)
(24,8,1)
(37,34,1)
(36,30,1)
(22,18,1)
(3,24,1)
(13,15,1)
(44,18,1)
(40,27,1)
(30,18,1)
(28,33,1)
(6,2,1)
(19,37,1)
(21,5,1)
(38,3,1)
(40,24,2)
(17,30,2)
(6,30,2)
(22,34,2)
(25,34,2)
(44,34,2)
(22,30,2)
(44,8,2)
(15,7,2)
(22,8,2)
(40,27,2)
(46,30,2)
(2,30,2)
(4,24,2)
(44,18,2)
(30,18,2)
(26,30,2)
(1,30,2)
(22,18,2)
(27,24,2)
(30,8,2)
(40,31,2)
(48,30,2)
(18,24,2)
(23,29,2)
(44,30,2)
(18,40,2)
-----------------------------------
(0,data)
(1,data)
(2,\\\'\\\\0\\\')
(3,dest)
(4,data)
(5,100)
(6,dest[data] = \\\'\\\\0\\\')
(7,100-1)
(8,data = 0)
(9,if(1)
(10,RET)
(11,source)
(12,0)
(13,source)
(14,1)
(15,memset(source, \\\'A\\\', 100-1)
(16,if (data < 100)
(17,dest)
(18,data = (short)
(19,\\\'A\\\')
(20,100)
(21,1)
(22,dest[data])
(23,source[100-1])
(24,1)
(25,printLine(dest)
(26,data)
(27,RAND32()
(28,100)
(29,100-1)
(30,data < 100)
(31,short)
(32,)
(33,data)
(34,dest[100] = "")
(35,)
(36,dest)
(37,source)
(38,"")
(39,\\\'\\\\0\\\')
(40,(short)
(41,source[100-1] = \\\'\\\\0\\\')
(42,)
(43,)
(44,memcpy(dest, source, data)
(45,data)
(46,source)
(47,dest)
(48,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^