-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_63b_badSink(int * dataPtr)
{
    int data = *dataPtr;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
52,53
52,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,27,30,32,34,36,40,42,43,45,46,51,53,54,55,59,60,65,67,69,71,76,78,79,83,85
-----computeFrom-----
44,45
44,46
48,49
48,50
52,53
52,54
57,58
57,59
73,74
73,75
-----guardedBy-----
59,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_63b_badSink(int * dataPtr){    int data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_63b_badSink(int * dataPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_63b_badSink
int * dataPtr
int
* dataPtr
*
dataPtr
{    int data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data = *dataPtr;
int data = *dataPtr;
int
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(28,9,0)
(16,20,0)
(20,9,0)
(36,34,0)
(3,12,0)
(15,12,0)
(40,20,0)
(21,1,0)
(41,29,0)
(26,32,0)
(20,1,0)
(6,41,0)
(13,1,0)
(4,14,0)
(10,30,0)
(37,34,0)
(7,32,0)
(29,24,0)
(12,23,0)
(38,13,0)
(41,28,0)
(8,29,0)
(20,29,0)
(12,3,0)
(11,1,0)
(31,23,0)
(2,5,0)
(30,32,0)
(13,32,0)
(32,14,0)
(24,29,0)
(41,1,0)
(29,14,0)
(18,41,0)
(42,28,0)
(30,34,0)
(27,24,0)
(5,29,0)
(1,32,0)
(39,3,0)
(35,20,0)
(17,32,0)
(33,5,0)
(34,30,0)
(25,3,0)
(24,22,0)
(19,30,0)
(23,32,0)
(10,1,1)
(19,10,1)
(27,8,1)
(3,25,1)
(18,6,1)
(15,30,1)
(35,5,1)
(5,29,1)
(24,27,1)
(41,1,1)
(34,37,1)
(0,13,1)
(12,3,1)
(29,24,1)
(24,22,1)
(31,12,1)
(39,15,1)
(41,29,1)
(23,31,1)
(36,19,1)
(33,2,1)
(11,29,1)
(42,41,1)
(5,33,1)
(13,1,1)
(40,16,1)
(38,28,1)
(20,29,1)
(2,23,1)
(41,18,1)
(13,38,1)
(1,21,1)
(25,39,1)
(20,1,1)
(37,36,1)
(21,11,1)
(38,5,1)
(20,40,1)
(16,35,1)
(6,20,1)
(28,42,1)
(30,34,1)
(28,5,2)
(20,5,2)
(5,29,2)
(12,3,2)
(41,1,2)
(35,5,2)
(13,1,2)
(24,22,2)
(40,5,2)
(41,5,2)
(6,5,2)
(41,29,2)
(18,5,2)
(16,5,2)
(29,24,2)
(30,34,2)
(20,1,2)
(20,29,2)
(42,5,2)
-----------------------------------
(0,RET)
(1,dest[100] = "")
(2,data)
(3,100-1)
(4,data)
(5,data < 100)
(6,dest)
(7,if (data < 100)
(8,data)
(9,)
(10,source)
(11,dest)
(12,source[100-1])
(13,printLine(dest)
(14,)
(15,source)
(16,source)
(17,source)
(18,data)
(19,\\\'A\\\')
(20,memcpy(dest, source, data)
(21,"")
(22,int * dataPtr)
(23,source[100-1] = \\\'\\\\0\\\')
(24,*dataPtr)
(25,1)
(26,dest)
(27,dataPtr)
(28,dest[data] = \\\'\\\\0\\\')
(29,data = *dataPtr)
(30,memset(source, \\\'A\\\', 100-1)
(31,\\\'\\\\0\\\')
(32,)
(33,100)
(34,100-1)
(35,dest)
(36,100)
(37,1)
(38,dest)
(39,100)
(40,data)
(41,dest[data])
(42,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^