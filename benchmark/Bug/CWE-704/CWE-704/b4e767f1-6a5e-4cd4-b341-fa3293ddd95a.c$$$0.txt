-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(25,26,0)
(19,10,0)
(37,39,0)
(0,37,0)
(31,32,0)
(39,2,0)
(20,26,0)
(39,32,0)
(46,39,0)
(1,4,0)
(8,13,0)
(4,32,0)
(48,46,0)
(34,7,0)
(46,34,0)
(36,4,0)
(5,34,0)
(10,4,0)
(28,39,0)
(8,1,0)
(26,41,0)
(26,20,0)
(43,28,0)
(42,17,0)
(40,17,0)
(10,24,0)
(46,17,0)
(13,8,0)
(14,46,0)
(21,10,0)
(3,1,0)
(22,39,0)
(15,36,0)
(11,24,0)
(28,7,0)
(26,31,0)
(23,4,0)
(17,4,0)
(47,31,0)
(29,32,0)
(24,10,0)
(44,4,0)
(38,28,0)
(28,17,0)
(2,31,0)
(2,39,0)
(12,37,0)
(6,13,0)
(35,13,0)
(33,32,0)
(18,28,0)
(30,2,0)
(16,4,0)
(9,24,0)
(45,8,0)
(36,17,0)
(31,26,0)
(28,39,1)
(26,41,1)
(42,40,1)
(19,17,1)
(48,14,1)
(46,17,1)
(25,47,1)
(18,37,1)
(35,45,1)
(46,39,1)
(40,39,1)
(30,22,1)
(21,19,1)
(15,37,1)
(28,38,1)
(36,17,1)
(17,42,1)
(46,48,1)
(37,12,1)
(26,20,1)
(43,18,1)
(1,3,1)
(12,0,1)
(14,28,1)
(36,15,1)
(24,9,1)
(38,43,1)
(10,24,1)
(31,26,1)
(39,2,1)
(22,31,1)
(9,11,1)
(15,34,1)
(45,10,1)
(37,39,1)
(6,35,1)
(28,17,1)
(2,31,1)
(0,1,1)
(5,46,1)
(34,5,1)
(11,21,1)
(27,36,1)
(2,30,1)
(3,8,1)
(26,25,1)
(8,13,1)
(13,6,1)
(43,37,2)
(48,37,2)
(2,31,2)
(28,39,2)
(28,37,2)
(31,26,2)
(46,17,2)
(39,2,2)
(26,20,2)
(26,41,2)
(37,39,2)
(46,39,2)
(34,37,2)
(38,37,2)
(18,37,2)
(8,13,2)
(46,37,2)
(28,17,2)
(10,24,2)
(14,37,2)
(5,37,2)
(36,17,2)
-----------------------------------
(0,data)
(1,source[100-1] = \\\'\\\\0\\\')
(2,*dataPtr)
(3,\\\'\\\\0\\\')
(4,)
(5,\\\'\\\\0\\\')
(6,1)
(7,)
(8,source[100-1])
(9,1)
(10,memset(source, \\\'A\\\', 100-1)
(11,100)
(12,100)
(13,100-1)
(14,dest)
(15,dest)
(16,source)
(17,dest[100] = "")
(18,dest)
(19,source)
(20,int *)
(21,\\\'A\\\')
(22,data)
(23,dest)
(24,100-1)
(25,dataVoidPtr)
(26,(int *)
(27,RET)
(28,memmove(dest, source, data)
(29,dataPtr)
(30,dataPtr)
(31,* dataPtr = (int *)
(32,)
(33,data)
(34,dest[data] = \\\'\\\\0\\\')
(35,100)
(36,printLine(dest)
(37,data < 100)
(38,data)
(39,data = (*dataPtr)
(40,dest)
(41,void * dataVoidPtr)
(42,"")
(43,source)
(44,if (data < 100)
(45,source)
(46,dest[data])
(47,dataPtr)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^