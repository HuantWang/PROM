-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
57,63
58,59
59,60
59,61
61,62
61,63
61,64
64,65
65,66
65,67
66,67
66,68
68,69
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,56,60,62,63,67,69,72,74,78,80,85,87,91,93,94,97,98,103,106,107,108,112,114,118,120
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
53,54
53,55
76,77
76,78
95,96
95,97
100,101
100,102
104,105
104,106
-----guardedBy-----
55,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_34_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType
CWE194_Unexpected_Sign_Extension__rand_malloc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,19,0)
(14,21,0)
(17,20,0)
(19,13,0)
(21,32,0)
(53,39,0)
(34,20,0)
(61,32,0)
(48,58,0)
(11,3,0)
(29,52,0)
(40,56,0)
(1,3,0)
(19,3,0)
(32,52,0)
(45,56,0)
(44,16,0)
(1,20,0)
(8,37,0)
(49,58,0)
(18,13,0)
(28,58,0)
(58,48,0)
(54,20,0)
(26,56,0)
(48,39,0)
(4,57,0)
(40,26,0)
(50,24,0)
(5,32,0)
(39,20,0)
(35,56,0)
(0,48,0)
(22,61,0)
(54,3,0)
(62,17,0)
(42,1,0)
(60,10,0)
(16,32,0)
(17,3,0)
(7,61,0)
(37,26,0)
(63,54,0)
(24,3,0)
(3,20,0)
(55,41,0)
(15,16,0)
(59,40,0)
(41,56,0)
(13,32,0)
(32,21,0)
(3,19,0)
(1,61,0)
(37,36,0)
(36,37,0)
(57,27,0)
(19,38,0)
(27,6,0)
(48,3,0)
(58,32,0)
(23,26,0)
(30,1,0)
(27,57,0)
(10,40,0)
(31,10,0)
(37,8,0)
(26,37,0)
(9,24,0)
(13,19,0)
(25,20,0)
(46,41,0)
(61,1,0)
(12,21,0)
(52,56,0)
(43,52,0)
(11,16,1)
(5,40,1)
(28,49,1)
(24,3,1)
(18,11,1)
(61,32,1)
(24,9,1)
(16,44,1)
(40,59,1)
(17,62,1)
(32,21,1)
(17,3,1)
(42,27,1)
(37,36,1)
(39,53,1)
(13,18,1)
(9,50,1)
(31,26,1)
(26,37,1)
(16,32,1)
(7,30,1)
(58,32,1)
(59,10,1)
(0,1,1)
(15,32,1)
(50,3,1)
(10,60,1)
(60,31,1)
(22,7,1)
(44,15,1)
(48,3,1)
(1,61,1)
(37,8,1)
(27,57,1)
(23,41,1)
(62,39,1)
(3,19,1)
(51,54,1)
(49,0,1)
(46,55,1)
(57,4,1)
(13,32,1)
(14,12,1)
(54,3,1)
(41,46,1)
(19,13,1)
(19,38,1)
(63,17,1)
(4,24,1)
(58,28,1)
(40,26,1)
(12,5,1)
(30,42,1)
(1,3,1)
(54,63,1)
(61,22,1)
(53,48,1)
(8,23,1)
(51,16,1)
(42,24,1)
(21,14,1)
(48,58,1)
(24,16,2)
(50,16,2)
(61,16,2)
(13,32,2)
(27,24,2)
(0,16,2)
(39,16,2)
(49,16,2)
(30,16,2)
(22,16,2)
(54,16,2)
(32,21,2)
(3,19,2)
(17,3,2)
(26,37,2)
(62,16,2)
(54,3,2)
(11,16,2)
(63,16,2)
(37,36,2)
(1,16,2)
(58,32,2)
(48,16,2)
(18,16,2)
(42,16,2)
(3,16,2)
(19,16,2)
(13,16,2)
(1,3,2)
(9,16,2)
(19,38,2)
(1,61,2)
(17,16,2)
(4,24,2)
(40,26,2)
(27,57,2)
(19,13,2)
(53,16,2)
(16,32,2)
(61,32,2)
(28,16,2)
(48,3,2)
(37,8,2)
(7,16,2)
(24,3,2)
(58,16,2)
(48,58,2)
(57,24,2)
-----------------------------------
(0,dataBuffer)
(1,memset(dataBuffer, \'A\', data-1)
(2,memset(dataBuffer, 'A', data-1)
(3,* dataBuffer = (char *)
(4,1)
(5,data)
(6,)
(7,data)
(8,RAND32()
(9,NULL)
(10,myUnion.unionFirst)
(11,dataBuffer)
(12,myUnion)
(13,malloc(data)
(14,unionSecond)
(15,data)
(16,data < 100)
(17,printLine(dataBuffer)
(18,data)
(19,(char *)
(20,)
(21,myUnion.unionSecond)
(22,1)
(23,data)
(24,dataBuffer == NULL)
(25,if (dataBuffer == NULL)
(26,data = (short)
(27,exit(-1)
(28,1)
(29,data)
(30,'A')
(31,myUnion)
(32,data = myUnion.unionSecond)
(33,\'A\')
(34,dataBuffer)
(35,data)
(36,short)
(37,(short)
(38,char *)
(39,dataBuffer[data-1] = \'\\\\0\')
(40,myUnion.unionFirst = data)
(41,data = 0)
(42,dataBuffer)
(43,if (data < 100)
(44,100)
(45,myUnion)
(46,0)
(47,dataBuffer[data-1] = '\\\\0')
(48,dataBuffer[data-1])
(49,data)
(50,dataBuffer)
(51,RET)
(52,)
(53,'\\\\0')
(54,free(dataBuffer)
(55,data)
(56,)
(57,-1)
(58,data-1)
(59,data)
(60,unionFirst)
(61,data-1)
(62,dataBuffer)
(63,dataBuffer)
(64,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^