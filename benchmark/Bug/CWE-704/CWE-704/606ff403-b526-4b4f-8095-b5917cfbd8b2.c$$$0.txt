-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_connect_socket_to_char_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
65,67
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
66,76
66,77
67,68
68,69
68,70
69,70
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
93,94
96,97
97,98
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
127,129
128,129
130,131
132,133
132,134
133,134
133,135
134,135
134,136
134,137
134,138
135,136
137,138
139,140
139,141
140,141
140,142
141,142
143,144
145,146
146,147
148,149
149,150
150,151
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
160,163
160,164
160,165
161,162
163,164
165,166
167,168
167,169
168,169
172,173
172,174
173,174
173,175
174,175
174,176
175,176
177,178
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
187,189
188,189
190,191
193,194
194,195
194,196
195,196
197,198
197,199
198,199
200,201
203,204
203,205
204,205
204,206
205,206
207,208
209,210
210,211
211,212
211,213
212,213
214,215
216,217
216,218
217,218
218,219
218,220
220,221
220,222
222,223
223,224
223,225
224,225
224,226
227,228
229,230
230,231
230,232
231,232
233,234
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,45,47,51,53,56,59,61,64,70,73,75,77,79,83,85,87,91,94,95,99,104,105,107,113,114,115,118,120,125,126,129,131,136,138,142,144,147,151,153,155,159,162,164,166,169,170,171,176,178,181,182,184,189,191,192,196,199,201,202,206,208,213,215,219,221,225,226,228,232,234
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
68,69
68,70
81,82
81,83
101,102
101,103
109,110
109,111
122,123
122,124
133,134
133,135
157,158
157,159
167,168
167,169
173,174
173,175
174,175
174,176
179,180
179,181
186,187
186,188
194,195
194,196
204,205
204,206
-----guardedBy-----
206,215
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_connect_socket_to_char_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_connect_socket_to_char_17_bad()
CWE197_Numeric_Truncation_Error__int_connect_socket_to_char_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(52,37,0)
(112,96,0)
(89,102,0)
(47,18,0)
(71,26,0)
(122,45,0)
(123,78,0)
(22,48,0)
(57,139,0)
(29,78,0)
(78,39,0)
(18,37,0)
(121,21,0)
(40,37,0)
(26,37,0)
(100,6,0)
(19,100,0)
(7,130,0)
(92,47,0)
(16,72,0)
(33,37,0)
(111,26,0)
(111,95,0)
(103,63,0)
(108,10,0)
(48,58,0)
(94,129,0)
(62,146,0)
(15,8,0)
(71,18,0)
(88,37,0)
(101,130,0)
(18,8,0)
(26,71,0)
(105,37,0)
(46,2,0)
(66,39,0)
(126,11,0)
(43,40,0)
(66,89,0)
(118,58,0)
(32,56,0)
(21,26,0)
(69,127,0)
(55,145,0)
(20,47,0)
(80,102,0)
(65,71,0)
(0,129,0)
(45,122,0)
(50,19,0)
(145,33,0)
(144,109,0)
(39,78,0)
(124,146,0)
(113,45,0)
(68,8,0)
(54,95,0)
(122,37,0)
(51,37,0)
(144,133,0)
(53,136,0)
(128,71,0)
(39,89,0)
(95,37,0)
(114,145,0)
(146,26,0)
(142,136,0)
(3,4,0)
(98,96,0)
(24,136,0)
(12,2,0)
(17,146,0)
(75,102,0)
(72,37,0)
(63,51,0)
(23,72,0)
(104,63,0)
(117,0,0)
(1,0,0)
(6,127,0)
(41,53,0)
(0,18,0)
(25,12,0)
(78,2,0)
(7,0,0)
(0,1,0)
(64,26,0)
(79,116,0)
(137,102,0)
(36,48,0)
(67,42,0)
(96,136,0)
(116,53,0)
(138,40,0)
(0,7,0)
(14,144,0)
(74,109,0)
(2,12,0)
(78,40,0)
(147,66,0)
(84,136,0)
(143,37,0)
(120,111,0)
(100,19,0)
(130,7,0)
(87,136,0)
(129,0,0)
(13,18,0)
(2,102,0)
(35,53,0)
(5,116,0)
(73,136,0)
(127,6,0)
(60,135,0)
(76,136,0)
(71,65,0)
(17,21,0)
(134,109,0)
(116,18,0)
(78,29,0)
(99,71,0)
(122,139,0)
(8,18,0)
(49,71,0)
(136,34,0)
(133,144,0)
(125,58,0)
(21,17,0)
(44,65,0)
(27,65,0)
(38,51,0)
(9,7,0)
(77,21,0)
(60,18,0)
(139,122,0)
(40,43,0)
(30,89,0)
(91,118,0)
(109,144,0)
(144,14,0)
(132,100,0)
(141,19,0)
(110,1,0)
(7,9,0)
(31,122,0)
(119,8,0)
(6,37,0)
(86,58,0)
(93,83,0)
(61,136,0)
(140,111,0)
(28,14,0)
(90,60,0)
(97,136,0)
(107,39,0)
(60,53,0)
(82,136,0)
(33,83,0)
(83,33,0)
(115,133,0)
(106,43,0)
(146,17,0)
(129,94,1)
(55,114,1)
(95,54,1)
(64,1,1)
(31,139,1)
(5,81,1)
(108,47,1)
(110,0,1)
(13,72,1)
(6,127,1)
(35,96,1)
(16,23,1)
(57,47,1)
(79,5,1)
(78,40,1)
(69,100,1)
(12,25,1)
(83,93,1)
(81,40,1)
(1,110,1)
(20,92,1)
(125,86,1)
(132,19,1)
(126,1,1)
(21,26,1)
(107,48,1)
(15,68,1)
(43,106,1)
(134,74,1)
(144,14,1)
(109,134,1)
(93,145,1)
(116,53,1)
(65,27,1)
(106,138,1)
(112,98,1)
(71,49,1)
(51,38,1)
(128,99,1)
(94,7,1)
(111,26,1)
(116,18,1)
(140,120,1)
(99,64,1)
(0,18,1)
(7,130,1)
(133,115,1)
(47,20,1)
(145,55,1)
(38,63,1)
(100,132,1)
(104,122,1)
(8,15,1)
(120,17,1)
(78,123,1)
(67,17,1)
(41,35,1)
(2,12,1)
(78,2,1)
(63,103,1)
(92,18,1)
(32,70,1)
(147,39,1)
(90,116,1)
(122,139,1)
(86,2,1)
(44,128,1)
(21,121,1)
(71,65,1)
(146,124,1)
(60,90,1)
(47,18,1)
(117,33,1)
(74,81,1)
(39,78,1)
(123,107,1)
(78,29,1)
(91,70,1)
(54,111,1)
(22,36,1)
(146,26,1)
(5,126,1)
(101,117,1)
(18,8,1)
(33,83,1)
(118,58,1)
(48,58,1)
(60,18,1)
(36,58,1)
(111,140,1)
(115,144,1)
(58,125,1)
(45,113,1)
(60,53,1)
(40,43,1)
(138,95,1)
(91,32,1)
(7,9,1)
(25,46,1)
(116,79,1)
(122,45,1)
(124,62,1)
(62,21,1)
(53,41,1)
(121,77,1)
(23,133,1)
(66,39,1)
(74,53,1)
(68,119,1)
(133,144,1)
(36,118,1)
(17,21,1)
(1,0,1)
(14,28,1)
(118,91,1)
(17,146,1)
(70,60,1)
(0,7,1)
(119,13,1)
(96,112,1)
(71,18,1)
(5,3,1)
(5,108,1)
(0,129,1)
(19,50,1)
(66,147,1)
(3,133,1)
(113,31,1)
(139,57,1)
(49,65,1)
(98,48,1)
(27,44,1)
(144,109,1)
(127,69,1)
(77,26,1)
(59,66,1)
(100,19,1)
(141,51,1)
(103,104,1)
(50,141,1)
(28,109,1)
(70,116,1)
(5,67,1)
(72,16,1)
(48,22,1)
(130,101,1)
(26,71,1)
(114,6,1)
(109,81,2)
(0,18,2)
(23,133,2)
(53,48,2)
(49,1,2)
(0,129,2)
(81,17,2)
(6,47,2)
(28,81,2)
(145,47,2)
(115,48,2)
(109,48,2)
(78,40,2)
(1,0,2)
(8,133,2)
(32,70,2)
(111,17,2)
(74,81,2)
(108,47,2)
(17,146,2)
(72,133,2)
(7,9,2)
(100,19,2)
(65,1,2)
(116,53,2)
(96,48,2)
(14,48,2)
(47,18,2)
(101,47,2)
(74,48,2)
(21,1,2)
(1,47,2)
(43,17,2)
(40,43,2)
(6,127,2)
(99,1,2)
(138,17,2)
(69,47,2)
(54,17,2)
(62,21,2)
(2,12,2)
(5,48,2)
(117,47,2)
(141,47,2)
(70,48,2)
(95,17,2)
(36,48,2)
(146,21,2)
(134,48,2)
(27,1,2)
(3,133,2)
(146,26,2)
(139,47,2)
(48,58,2)
(133,144,2)
(104,47,2)
(133,48,2)
(77,1,2)
(28,48,2)
(91,48,2)
(78,29,2)
(94,47,2)
(144,109,2)
(19,47,2)
(40,17,2)
(71,18,2)
(122,45,2)
(112,48,2)
(44,1,2)
(45,47,2)
(47,133,2)
(110,47,2)
(92,133,2)
(79,48,2)
(100,47,2)
(115,81,2)
(18,133,2)
(17,1,2)
(0,47,2)
(121,1,2)
(124,21,2)
(15,133,2)
(64,1,2)
(144,14,2)
(33,83,2)
(129,47,2)
(144,48,2)
(50,47,2)
(26,1,2)
(16,133,2)
(21,26,2)
(13,133,2)
(51,47,2)
(48,48,2)
(67,17,2)
(122,139,2)
(41,48,2)
(93,47,2)
(116,48,2)
(116,18,2)
(22,48,2)
(26,71,2)
(35,48,2)
(103,47,2)
(78,2,2)
(60,53,2)
(83,47,2)
(118,58,2)
(90,116,2)
(14,81,2)
(119,133,2)
(31,47,2)
(98,48,2)
(133,81,2)
(55,47,2)
(140,17,2)
(18,8,2)
(120,17,2)
(71,1,2)
(39,78,2)
(66,39,2)
(127,47,2)
(63,47,2)
(0,7,2)
(17,21,2)
(20,133,2)
(113,47,2)
(134,81,2)
(111,26,2)
(122,47,2)
(126,1,2)
(114,47,2)
(57,47,2)
(71,65,2)
(38,47,2)
(60,116,2)
(128,1,2)
(132,47,2)
(7,47,2)
(144,81,2)
(106,17,2)
(33,47,2)
(68,133,2)
(130,47,2)
(7,130,2)
(118,48,2)
(60,18,2)
-----------------------------------
(0,connect(connectSocket, (struct sockaddr*)
(1,connect(connectSocket, (struct sockaddr*)
(2,data = -1)
(3,break;)
(4,)
(5,connectSocket)
(6,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(7,(struct sockaddr*)
(8,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(9,struct sockaddr*)
(10,)
(11,)
(12,-1)
(13,connectSocket)
(14,&wsaData)
(15,IPPROTO_TCP)
(16,1)
(17,recvResult == SOCKET_ERROR || recvResult == 0)
(18,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(19,service.sin_addr)
(20,INVALID_SOCKET)
(21,recvResult == SOCKET_ERROR)
(22,1)
(23,wsaDataInit)
(24,if (connectSocket != INVALID_SOCKET)
(25,1)
(26,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(27,1)
(28,wsaData)
(29,char)
(30,charData)
(31,0)
(32,WSACleanup()
(33,service.sin_port = htons(TCP_PORT)
(34,)
(35,connectSocket)
(36,i)
(37,)
(38,AF_INET)
(39,charData = (char)
(40,data = atoi(inputBuffer)
(41,INVALID_SOCKET)
(42,)
(43,atoi(inputBuffer)
(44,CHAR_ARRAY_SIZE)
(45,sizeof(service)
(46,data)
(47,connectSocket == INVALID_SOCKET)
(48,i < 1)
(49,0)
(50,sin_addr)
(51,service.sin_family = AF_INET)
(52,if (WSAStartup(MAKEWORD(2,2)
(53,connectSocket = INVALID_SOCKET)
(54,'\\\\0')
(55,sin_port)
(56,)
(57,service)
(58,i = 0)
(59,RET)
(60,CLOSE_SOCKET(connectSocket)
(61,do)
(62,recvResult)
(63,service.sin_family)
(64,recvResult)
(65,CHAR_ARRAY_SIZE - 1)
(66,printHexCharLine(charData)
(67,break;)
(68,SOCK_STREAM)
(69,IP_ADDRESS)
(70,wsaDataInit)
(71,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(72,wsaDataInit = 1)
(73,service)
(74,2)
(75,data)
(76,inputBuffer)
(77,recvResult)
(78,(char)
(79,INVALID_SOCKET)
(80,i)
(81,0)
(82,connectSocket)
(83,htons(TCP_PORT)
(84,wsaDataInit)
(85,\'\\\\0\')
(86,i)
(87,wsaData)
(88,if (connectSocket == INVALID_SOCKET)
(89,)
(90,connectSocket)
(91,i)
(92,connectSocket)
(93,TCP_PORT)
(94,service)
(95,inputBuffer[recvResult] = '\\\\0')
(96,wsaDataInit = 0)
(97,if (wsaDataInit)
(98,wsaDataInit)
(99,connectSocket)
(100,service.sin_addr.s_addr)
(101,service)
(102,)
(103,sin_family)
(104,service)
(105,if (connect(connectSocket, (struct sockaddr*)
(106,inputBuffer)
(107,charData)
(108,break;)
(109,MAKEWORD(2,2)
(110,SOCKET_ERROR)
(111,inputBuffer[recvResult])
(112,0)
(113,service)
(114,service)
(115,NO_ERROR)
(116,connectSocket != INVALID_SOCKET)
(117,connectSocket)
(118,i++)
(119,AF_INET)
(120,inputBuffer)
(121,SOCKET_ERROR)
(122,memset(&service, 0, sizeof(service)
(123,data)
(124,0)
(125,0)
(126,break;)
(127,inet_addr(IP_ADDRESS)
(128,inputBuffer)
(129,sizeof(service)
(130,&service)
(131,inputBuffer[recvResult] = \'\\\\0\')
(132,s_addr)
(133,WSAStartup(MAKEWORD(2,2)
(134,2)
(135,)
(136,)
(137,for(i = 0; i < 1; i++)
(138,data)
(139,&service)
(140,recvResult)
(141,service)
(142,recvResult)
(143,if (recvResult == SOCKET_ERROR || recvResult == 0)
(144,WSAStartup(MAKEWORD(2,2)
(145,service.sin_port)
(146,recvResult == 0)
(147,charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^