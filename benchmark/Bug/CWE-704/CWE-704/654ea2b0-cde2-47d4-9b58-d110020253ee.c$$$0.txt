-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,38,0)
(35,38,0)
(16,47,0)
(23,47,0)
(25,49,0)
(32,4,0)
(18,7,0)
(46,32,0)
(19,4,0)
(8,43,0)
(6,7,0)
(15,21,0)
(4,30,0)
(35,11,0)
(7,4,0)
(21,15,0)
(2,29,0)
(34,21,0)
(24,47,0)
(29,47,0)
(0,46,0)
(10,35,0)
(1,21,0)
(12,3,0)
(43,4,0)
(28,11,0)
(7,3,0)
(7,29,0)
(5,36,0)
(27,29,0)
(48,12,0)
(44,15,0)
(43,29,0)
(39,16,0)
(11,35,0)
(41,30,0)
(33,49,0)
(46,31,0)
(21,47,0)
(38,47,0)
(14,43,0)
(26,7,0)
(47,49,0)
(42,46,0)
(32,46,0)
(9,47,0)
(20,36,0)
(4,49,0)
(13,15,0)
(40,32,0)
(43,12,0)
(36,4,0)
(30,4,0)
(37,11,0)
(16,29,0)
(43,4,1)
(42,45,1)
(27,2,1)
(12,48,1)
(11,37,1)
(39,12,1)
(43,29,1)
(41,19,1)
(43,8,1)
(16,39,1)
(39,36,1)
(32,4,1)
(17,16,1)
(34,29,1)
(1,34,1)
(7,29,1)
(13,1,1)
(40,0,1)
(7,4,1)
(2,46,1)
(5,38,1)
(36,4,1)
(46,32,1)
(44,13,1)
(14,7,1)
(38,22,1)
(29,27,1)
(10,21,1)
(28,10,1)
(32,40,1)
(30,41,1)
(16,29,1)
(22,35,1)
(36,20,1)
(45,4,1)
(4,30,1)
(15,44,1)
(18,6,1)
(21,15,1)
(6,26,1)
(20,5,1)
(0,42,1)
(7,18,1)
(48,43,1)
(2,45,1)
(37,28,1)
(26,36,1)
(35,11,1)
(8,14,1)
(14,36,2)
(36,4,2)
(8,36,2)
(35,11,2)
(32,4,2)
(46,32,2)
(42,45,2)
(0,45,2)
(16,29,2)
(46,45,2)
(7,29,2)
(40,45,2)
(43,29,2)
(4,30,2)
(26,36,2)
(48,36,2)
(7,4,2)
(43,4,2)
(7,36,2)
(6,36,2)
(21,15,2)
(32,45,2)
(12,36,2)
(43,36,2)
(18,36,2)
-----------------------------------
(0,"%d")
(1,\\\'A\\\')
(2,dest)
(3,)
(4,data = -1)
(5,data)
(6,source)
(7,memcpy(dest, source, data)
(8,data)
(9,dest)
(10,source)
(11,100-1)
(12,dest[data] = \\\'\\\\0\\\')
(13,100)
(14,dest)
(15,100-1)
(16,printLine(dest)
(17,RET)
(18,data)
(19,data)
(20,100)
(21,memset(source, \\\'A\\\', 100-1)
(22,\\\'\\\\0\\\')
(23,if (data < 100)
(24,source)
(25,data)
(26,dest)
(27,"")
(28,100)
(29,dest[100] = "")
(30,-1)
(31,)
(32,&data)
(33,if(1)
(34,source)
(35,source[100-1])
(36,data < 100)
(37,1)
(38,source[100-1] = \\\'\\\\0\\\')
(39,dest)
(40,data)
(41,1)
(42,stdin)
(43,dest[data])
(44,1)
(45,1)
(46,fscanf(stdin, "%d", &data)
(47,)
(48,\\\'\\\\0\\\')
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^