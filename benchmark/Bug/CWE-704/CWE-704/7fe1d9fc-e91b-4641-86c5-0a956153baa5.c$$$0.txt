-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
37,38
37,39
38,39
38,40
39,40
42,43
42,44
42,45
42,46
42,47
42,48
43,44
44,45
44,46
46,47
46,48
46,49
49,50
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
80,81
80,82
81,82
84,85
85,86
85,87
86,87
86,88
87,88
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,35,36,40,41,45,47,48,52,54,57,59,63,65,70,72,76,78,79,82,83,88,91,92,93,97,99,103,105
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
34,35
34,36
38,39
38,40
61,62
61,63
80,81
80,82
85,86
85,87
89,90
89,91
-----guardedBy-----
40,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(40,34,0)
(26,30,0)
(23,40,0)
(53,14,0)
(54,30,0)
(1,15,0)
(13,25,0)
(57,30,0)
(14,20,0)
(21,16,0)
(15,4,0)
(40,16,0)
(10,4,0)
(27,14,0)
(16,9,0)
(45,10,0)
(5,40,0)
(40,14,0)
(18,14,0)
(38,30,0)
(34,4,0)
(55,7,0)
(47,7,0)
(14,53,0)
(49,54,0)
(13,50,0)
(44,7,0)
(43,6,0)
(32,56,0)
(46,27,0)
(4,6,0)
(34,26,0)
(3,30,0)
(34,40,0)
(31,56,0)
(8,18,0)
(2,4,0)
(18,16,0)
(22,50,0)
(4,30,0)
(50,13,0)
(37,14,0)
(12,27,0)
(39,10,0)
(6,18,0)
(6,4,0)
(17,15,0)
(27,16,0)
(10,39,0)
(33,3,0)
(0,26,0)
(44,59,0)
(24,39,0)
(3,4,0)
(39,14,0)
(39,16,0)
(18,6,0)
(56,16,0)
(42,10,0)
(48,44,0)
(54,4,0)
(59,44,0)
(10,30,0)
(16,56,0)
(41,34,0)
(29,59,0)
(19,7,0)
(36,39,0)
(6,43,0)
(36,24,1)
(59,29,1)
(16,56,1)
(32,31,1)
(54,4,1)
(2,27,1)
(14,53,1)
(39,36,1)
(24,42,1)
(18,14,1)
(28,44,1)
(54,49,1)
(39,14,1)
(49,3,1)
(42,45,1)
(37,28,1)
(3,4,1)
(40,5,1)
(26,0,1)
(44,59,1)
(12,46,1)
(0,34,1)
(1,4,1)
(13,50,1)
(50,22,1)
(35,27,1)
(56,32,1)
(3,33,1)
(53,37,1)
(21,28,1)
(33,26,1)
(40,14,1)
(27,14,1)
(39,16,1)
(46,14,1)
(10,39,1)
(10,4,1)
(6,18,1)
(18,8,1)
(15,4,1)
(34,4,1)
(6,43,1)
(27,12,1)
(31,21,1)
(41,10,1)
(45,13,1)
(8,2,1)
(17,1,1)
(34,40,1)
(27,16,1)
(15,17,1)
(18,16,1)
(45,15,1)
(23,41,1)
(40,16,1)
(4,6,1)
(46,16,1)
(22,15,1)
(5,23,1)
(29,48,1)
(35,54,1)
(54,4,2)
(54,27,2)
(6,43,2)
(44,59,2)
(6,18,2)
(26,27,2)
(13,15,2)
(14,28,2)
(39,16,2)
(13,50,2)
(41,27,2)
(36,27,2)
(15,27,2)
(50,15,2)
(4,27,2)
(23,27,2)
(8,27,2)
(45,27,2)
(56,28,2)
(10,39,2)
(2,27,2)
(3,27,2)
(10,4,2)
(0,27,2)
(49,27,2)
(3,4,2)
(34,40,2)
(18,27,2)
(14,53,2)
(27,14,2)
(17,27,2)
(24,27,2)
(34,27,2)
(16,28,2)
(40,27,2)
(18,14,2)
(32,28,2)
(42,27,2)
(15,4,2)
(53,28,2)
(18,16,2)
(1,27,2)
(39,14,2)
(33,27,2)
(27,16,2)
(34,4,2)
(16,56,2)
(37,28,2)
(22,15,2)
(10,27,2)
(4,6,2)
(6,27,2)
(21,28,2)
(39,27,2)
(40,16,2)
(5,27,2)
(40,14,2)
(31,28,2)
-----------------------------------
(0,'\\\\0')
(1,dataBuffer)
(2,dataBuffer)
(3,printLine(dataBuffer)
(4,* dataBuffer = (char *)
(5,1)
(6,(char *)
(7,)
(8,data)
(9,)
(10,memset(dataBuffer, 'A', data-1)
(11,memset(dataBuffer, \'A\', data-1)
(12,100)
(13,exit(-1)
(14,data = RAND32()
(15,dataBuffer == NULL)
(16,data = 100-1)
(17,NULL)
(18,malloc(data)
(19,if(globalReturnsTrueOrFalse()
(20,)
(21,data)
(22,1)
(23,data)
(24,data)
(25,)
(26,dataBuffer[data-1] = '\\\\0')
(27,data < 100)
(28,globalReturnsTrueOrFalse()
(29,1)
(30,)
(31,100)
(32,1)
(33,dataBuffer)
(34,dataBuffer[data-1])
(35,RET)
(36,1)
(37,data)
(38,dataBuffer)
(39,data-1)
(40,data-1)
(41,dataBuffer)
(42,'A')
(43,char *)
(44,data = -1)
(45,dataBuffer)
(46,data)
(47,data)
(48,data)
(49,dataBuffer)
(50,-1)
(51,\'\\\\0\')
(52,\'A\')
(53,RAND32()
(54,free(dataBuffer)
(55,if (data < 100)
(56,100-1)
(57,if (dataBuffer == NULL)
(58,dataBuffer[data-1] = \'\\\\0\')
(59,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^