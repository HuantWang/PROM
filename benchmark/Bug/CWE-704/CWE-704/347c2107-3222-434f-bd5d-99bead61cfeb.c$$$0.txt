-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
52,53
52,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,27,30,32,34,36,40,42,43,45,46,51,53,54,55,59,60,65,67,69,71,76,78,79,83,85
-----computeFrom-----
44,45
44,46
48,49
48,50
52,53
52,54
57,58
57,59
73,74
73,75
-----guardedBy-----
59,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_strncpy_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__negative_strncpy_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(0,10,0)
(31,17,0)
(13,16,0)
(28,2,0)
(29,10,0)
(35,3,0)
(27,10,0)
(10,32,0)
(36,0,0)
(14,30,0)
(5,34,0)
(27,22,0)
(10,30,0)
(1,16,0)
(9,17,0)
(32,10,0)
(35,38,0)
(26,3,0)
(32,6,0)
(2,24,0)
(18,31,0)
(17,31,0)
(16,1,0)
(33,16,0)
(42,38,0)
(38,30,0)
(2,10,0)
(1,34,0)
(2,3,0)
(7,38,0)
(8,22,0)
(3,38,0)
(20,32,0)
(41,35,0)
(39,1,0)
(12,31,0)
(37,27,0)
(25,2,0)
(23,2,0)
(40,17,0)
(11,27,0)
(34,38,0)
(31,38,0)
(15,38,0)
(27,3,0)
(4,0,0)
(22,24,0)
(21,3,0)
(5,1,1)
(0,4,1)
(32,20,1)
(41,22,1)
(9,12,1)
(35,41,1)
(27,3,1)
(26,10,1)
(8,27,1)
(40,9,1)
(19,35,1)
(2,25,1)
(2,3,1)
(22,8,1)
(23,0,1)
(17,40,1)
(41,0,1)
(25,28,1)
(34,5,1)
(0,10,1)
(16,13,1)
(2,10,1)
(21,26,1)
(39,31,1)
(18,3,1)
(32,6,1)
(20,29,1)
(28,23,1)
(13,33,1)
(31,17,1)
(37,2,1)
(10,32,1)
(33,39,1)
(11,37,1)
(1,16,1)
(4,36,1)
(35,3,1)
(36,34,1)
(27,11,1)
(27,10,1)
(12,18,1)
(3,21,1)
(27,10,2)
(35,3,2)
(28,0,2)
(1,16,2)
(31,17,2)
(37,0,2)
(11,0,2)
(27,0,2)
(10,32,2)
(22,0,2)
(32,6,2)
(23,0,2)
(2,10,2)
(25,0,2)
(0,10,2)
(8,0,2)
(2,3,2)
(2,0,2)
(27,3,2)
-----------------------------------
(0,data < 100)
(1,source[100-1])
(2,strncpy(dest, source, data)
(3,dest[100] = "")
(4,100)
(5,\\\'\\\\0\\\')
(6,short * dataPtr)
(7,source)
(8,\\\'\\\\0\\\')
(9,100)
(10,data = *dataPtr)
(11,data)
(12,\\\'A\\\')
(13,1)
(14,data)
(15,if (data < 100)
(16,100-1)
(17,100-1)
(18,source)
(19,RET)
(20,dataPtr)
(21,"")
(22,dest[data] = \\\'\\\\0\\\')
(23,dest)
(24,)
(25,data)
(26,dest)
(27,dest[data])
(28,source)
(29,data)
(30,)
(31,memset(source, \\\'A\\\', 100-1)
(32,*dataPtr)
(33,100)
(34,source[100-1] = \\\'\\\\0\\\')
(35,printLine(dest)
(36,data)
(37,dest)
(38,)
(39,source)
(40,1)
(41,dest)
(42,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^