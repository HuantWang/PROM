-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
49,52
49,53
49,54
49,55
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
88,89
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,48,52,54,55,59,61,64,66,70,72,77,79,83,85,86,89,90,95,98,99,100,104,106,110,112
-----computeFrom-----
12,13
12,14
17,18
17,19
45,46
45,47
68,69
68,70
87,88
87,89
92,93
92,94
96,97
96,98
-----guardedBy-----
47,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_31_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,41,0)
(10,11,0)
(42,10,0)
(44,13,0)
(35,13,0)
(19,10,0)
(39,1,0)
(54,37,0)
(7,47,0)
(34,10,0)
(33,22,0)
(8,19,0)
(14,13,0)
(12,41,0)
(6,19,0)
(58,11,0)
(51,28,0)
(45,42,0)
(47,7,0)
(12,22,0)
(28,1,0)
(40,34,0)
(16,34,0)
(20,10,0)
(30,51,0)
(42,37,0)
(49,58,0)
(26,21,0)
(43,36,0)
(9,20,0)
(34,36,0)
(4,37,0)
(52,47,0)
(17,11,0)
(31,14,0)
(29,28,0)
(23,27,0)
(36,51,0)
(10,37,0)
(24,51,0)
(0,12,0)
(14,47,0)
(22,12,0)
(18,1,0)
(2,21,0)
(58,51,0)
(46,35,0)
(11,58,0)
(5,50,0)
(47,52,0)
(51,1,0)
(59,35,0)
(27,5,0)
(38,28,0)
(34,37,0)
(25,1,0)
(36,34,0)
(57,22,0)
(11,10,0)
(12,10,0)
(47,14,0)
(3,36,0)
(5,27,0)
(22,51,0)
(1,13,0)
(41,37,0)
(11,17,0)
(21,51,0)
(20,37,0)
(53,10,0)
(28,14,0)
(20,10,1)
(27,23,1)
(14,47,1)
(9,41,1)
(51,28,1)
(43,3,1)
(29,38,1)
(30,28,1)
(20,9,1)
(6,10,1)
(28,29,1)
(12,22,1)
(40,19,1)
(10,11,1)
(0,34,1)
(32,21,1)
(35,59,1)
(58,49,1)
(41,15,1)
(28,14,1)
(5,27,1)
(31,35,1)
(2,51,1)
(40,5,1)
(21,51,1)
(33,57,1)
(24,30,1)
(16,40,1)
(45,20,1)
(38,14,1)
(42,45,1)
(52,31,1)
(58,51,1)
(47,7,1)
(22,51,1)
(23,19,1)
(15,12,1)
(21,26,1)
(12,10,1)
(34,36,1)
(11,58,1)
(22,33,1)
(3,16,1)
(53,21,1)
(19,10,1)
(32,42,1)
(47,52,1)
(8,6,1)
(36,51,1)
(51,24,1)
(57,0,1)
(42,10,1)
(11,17,1)
(49,53,1)
(34,10,1)
(26,2,1)
(59,46,1)
(36,43,1)
(19,8,1)
(49,21,2)
(58,51,2)
(12,22,2)
(53,21,2)
(14,47,2)
(43,21,2)
(34,21,2)
(27,19,2)
(6,21,2)
(40,21,2)
(20,10,2)
(42,10,2)
(20,21,2)
(11,58,2)
(10,21,2)
(5,19,2)
(10,11,2)
(42,21,2)
(22,21,2)
(0,21,2)
(11,21,2)
(5,27,2)
(3,21,2)
(36,51,2)
(45,21,2)
(12,21,2)
(22,51,2)
(12,10,2)
(9,21,2)
(11,17,2)
(23,19,2)
(47,52,2)
(19,21,2)
(58,21,2)
(36,21,2)
(33,21,2)
(16,21,2)
(19,10,2)
(8,21,2)
(34,10,2)
(28,14,2)
(21,51,2)
(41,21,2)
(15,21,2)
(34,36,2)
(57,21,2)
(51,28,2)
(47,7,2)
-----------------------------------
(0,dataBuffer)
(1,)
(2,data)
(3,data)
(4,if (dataBuffer == NULL)
(5,exit(-1)
(6,dataBuffer)
(7,short)
(8,NULL)
(9,dataBuffer)
(10,* dataBuffer = (char *)
(11,(char *)
(12,dataBuffer[data-1])
(13,)
(14,data = (short)
(15,\'\\\\0\')
(16,\'A\')
(17,char *)
(18,data)
(19,dataBuffer == NULL)
(20,printLine(dataBuffer)
(21,data < 100)
(22,data-1)
(23,1)
(24,dataCopy)
(25,if (data < 100)
(26,100)
(27,-1)
(28,dataCopy = data)
(29,data)
(30,data)
(31,data)
(32,RET)
(33,1)
(34,memset(dataBuffer, \'A\', data-1)
(35,data = 0)
(36,data-1)
(37,)
(38,dataCopy)
(39,dataCopy)
(40,dataBuffer)
(41,dataBuffer[data-1] = '\\\\0')
(42,free(dataBuffer)
(43,1)
(44,data)
(45,dataBuffer)
(46,data)
(47,(short)
(48,'\\\\0')
(49,data)
(50,)
(51,data = dataCopy)
(52,RAND32()
(53,dataBuffer)
(54,dataBuffer)
(55,memset(dataBuffer, 'A', data-1)
(56,'A')
(57,data)
(58,malloc(data)
(59,0)
(60,dataBuffer[data-1] = \'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^