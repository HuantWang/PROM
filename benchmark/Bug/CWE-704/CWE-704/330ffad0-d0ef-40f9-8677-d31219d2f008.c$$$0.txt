-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
37,53
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(54,3,0)
(16,45,0)
(35,46,0)
(58,44,0)
(19,37,0)
(59,40,0)
(24,34,0)
(0,56,0)
(32,20,0)
(20,8,0)
(11,44,0)
(29,38,0)
(53,20,0)
(46,4,0)
(21,54,0)
(28,34,0)
(41,3,0)
(7,20,0)
(5,55,0)
(56,12,0)
(45,37,0)
(20,55,0)
(60,5,0)
(9,3,0)
(3,28,0)
(8,14,0)
(63,42,0)
(55,57,0)
(40,27,0)
(18,3,0)
(15,42,0)
(61,11,0)
(51,46,0)
(47,46,0)
(36,37,0)
(51,38,0)
(0,38,0)
(52,8,0)
(65,4,0)
(55,41,0)
(8,4,0)
(1,14,0)
(26,0,0)
(10,41,0)
(37,45,0)
(42,11,0)
(17,25,0)
(22,46,0)
(43,38,0)
(33,45,0)
(41,55,0)
(13,28,0)
(0,55,0)
(0,8,0)
(31,28,0)
(25,54,0)
(30,51,0)
(11,42,0)
(20,12,0)
(45,46,0)
(20,38,0)
(44,46,0)
(49,55,0)
(5,8,0)
(54,25,0)
(64,4,0)
(50,5,0)
(2,54,0)
(23,0,0)
(38,46,0)
(14,8,0)
(48,54,0)
(39,56,0)
(5,50,1)
(59,25,1)
(61,45,1)
(5,8,1)
(48,21,1)
(44,58,1)
(1,52,1)
(60,44,1)
(9,18,1)
(53,5,1)
(56,39,1)
(0,8,1)
(21,2,1)
(51,30,1)
(2,3,1)
(10,49,1)
(7,32,1)
(54,48,1)
(18,6,1)
(55,41,1)
(14,1,1)
(26,23,1)
(43,6,1)
(24,40,1)
(23,20,1)
(3,9,1)
(25,17,1)
(32,53,1)
(20,8,1)
(30,5,1)
(54,3,1)
(45,37,1)
(42,15,1)
(43,24,1)
(11,42,1)
(41,3,1)
(40,59,1)
(50,60,1)
(24,55,1)
(58,11,1)
(37,19,1)
(38,29,1)
(63,61,1)
(19,36,1)
(8,14,1)
(20,55,1)
(49,25,1)
(36,16,1)
(0,26,1)
(39,0,1)
(6,8,1)
(15,63,1)
(0,38,1)
(25,54,1)
(5,55,1)
(41,10,1)
(0,55,1)
(20,38,1)
(29,43,1)
(20,7,1)
(51,38,1)
(33,38,1)
(62,51,1)
(17,54,1)
(30,56,1)
(16,33,1)
(54,6,2)
(41,3,2)
(20,8,2)
(0,8,2)
(7,5,2)
(8,14,2)
(24,6,2)
(51,38,2)
(0,5,2)
(20,55,2)
(20,5,2)
(9,6,2)
(5,8,2)
(0,38,2)
(5,55,2)
(23,5,2)
(17,6,2)
(39,5,2)
(3,6,2)
(20,38,2)
(21,6,2)
(18,6,2)
(55,25,2)
(59,25,2)
(10,25,2)
(25,54,2)
(53,5,2)
(45,37,2)
(48,6,2)
(11,42,2)
(54,3,2)
(26,5,2)
(0,55,2)
(56,5,2)
(41,25,2)
(32,5,2)
(49,25,2)
(2,6,2)
(25,6,2)
(55,41,2)
(40,25,2)
-----------------------------------
(0,dest[data])
(1,1)
(2,inputBuffer)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,)
(5,data < 100)
(6,1)
(7,data)
(8,data = -1)
(9,"")
(10,inputBuffer)
(11,source[100-1])
(12,)
(13,inputBuffer)
(14,-1)
(15,1)
(16,\\\'A\\\')
(17,NULL)
(18,inputBuffer)
(19,1)
(20,memmove(dest, source, data)
(21,CHAR_ARRAY_SIZE)
(22,source)
(23,dest)
(24,break;)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,data)
(27,)
(28,)
(29,"")
(30,dest)
(31,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,source)
(33,source)
(34,)
(35,dest)
(36,100)
(37,100-1)
(38,dest[100] = "")
(39,\\\'\\\\0\\\')
(40,printLine("fgets()
(41,atoi(inputBuffer)
(42,100-1)
(43,dest)
(44,source[100-1] = \\\'\\\\0\\\')
(45,memset(source, \\\'A\\\', 100-1)
(46,)
(47,if (data < 100)
(48,stdin)
(49,data)
(50,100)
(51,printLine(dest)
(52,data)
(53,dest)
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,data = atoi(inputBuffer)
(56,dest[data] = \\\'\\\\0\\\')
(57,)
(58,\\\'\\\\0\\\')
(59,"fgets()
(60,data)
(61,source)
(62,RET)
(63,100)
(64,while(1)
(65,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^