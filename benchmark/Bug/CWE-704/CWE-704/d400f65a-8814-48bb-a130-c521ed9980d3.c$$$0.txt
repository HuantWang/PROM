-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad()
{
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
62,63
-----nextToken-----
2,4,7,12,14,17,20,22,24,29,31,33,35,37,42,45,47,52,53,57,60,61,63
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad(){    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_02_bad
{    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(8,7,0)
(16,11,0)
(20,27,0)
(20,8,0)
(1,22,0)
(1,24,0)
(28,20,0)
(26,12,0)
(7,10,0)
(19,7,0)
(29,7,0)
(25,6,0)
(0,24,0)
(24,1,0)
(8,20,0)
(18,25,0)
(5,1,0)
(17,25,0)
(23,25,0)
(2,20,0)
(27,7,0)
(9,27,0)
(20,28,0)
(6,25,0)
(14,6,0)
(20,1,0)
(11,21,0)
(3,7,0)
(15,27,0)
(17,23,1)
(9,4,1)
(14,25,1)
(6,25,1)
(23,18,1)
(20,28,1)
(27,15,1)
(20,2,1)
(0,5,1)
(13,4,1)
(24,0,1)
(2,11,1)
(16,6,1)
(13,8,1)
(20,1,1)
(20,27,1)
(15,9,1)
(8,20,1)
(2,1,1)
(5,6,1)
(1,24,1)
(18,27,1)
(6,14,1)
(25,17,1)
(11,16,1)
(27,4,2)
(24,6,2)
(8,20,2)
(1,24,2)
(11,6,2)
(2,4,2)
(17,4,2)
(15,4,2)
(6,25,2)
(5,6,2)
(25,4,2)
(20,28,2)
(9,4,2)
(6,4,2)
(0,6,2)
(16,6,2)
(20,27,2)
(20,1,2)
(18,4,2)
(14,4,2)
(8,4,2)
(23,4,2)
(1,6,2)
(20,4,2)
-----------------------------------
(0,inputBuffer)
(1,doubleNumber = atof(inputBuffer)
(2,doubleNumber)
(3,doubleNumber)
(4,1)
(5,doubleNumber)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,)
(8,printIntLine((int)
(9,doubleNumber)
(10,)
(11,printLine("fgets()
(12,)
(13,RET)
(14,NULL)
(15,0)
(16,"fgets()
(17,stdin)
(18,inputBuffer)
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,(int)
(21,)
(22,)
(23,CHAR_ARRAY_SIZE)
(24,atof(inputBuffer)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,if(1)
(27,doubleNumber = 0)
(28,int)
(29,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^