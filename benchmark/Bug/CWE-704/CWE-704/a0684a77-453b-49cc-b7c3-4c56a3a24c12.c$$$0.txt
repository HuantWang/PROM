-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
39,42
39,43
39,44
39,45
40,41
41,42
41,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,42,44,46,49,51,53,55,59,61,62,64,65,70,72,73,74,78,79,84,86,88,90,95,97,98,102,104
-----computeFrom-----
12,13
12,14
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
92,93
92,94
-----guardedBy-----
78,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_15_bad()
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(46,52,0)
(44,35,0)
(32,27,0)
(37,42,0)
(54,43,0)
(27,25,0)
(48,9,0)
(8,6,0)
(7,39,0)
(25,6,0)
(27,9,0)
(12,26,0)
(50,27,0)
(26,53,0)
(31,52,0)
(14,35,0)
(3,1,0)
(6,51,0)
(41,24,0)
(36,9,0)
(11,9,0)
(30,38,0)
(19,1,0)
(13,43,0)
(52,38,0)
(26,6,0)
(28,52,0)
(47,10,0)
(2,26,0)
(19,42,0)
(43,6,0)
(15,38,0)
(35,52,0)
(35,49,0)
(49,53,0)
(40,19,0)
(10,9,0)
(0,38,0)
(34,25,0)
(28,38,0)
(16,24,0)
(20,26,0)
(45,49,0)
(5,6,0)
(35,6,0)
(38,51,0)
(24,39,0)
(22,28,0)
(21,51,0)
(1,38,0)
(25,27,0)
(33,42,0)
(18,51,0)
(24,38,0)
(29,9,0)
(39,24,0)
(42,19,0)
(4,39,0)
(26,52,0)
(29,27,1)
(3,19,1)
(31,46,1)
(6,5,1)
(50,17,1)
(26,52,1)
(41,52,1)
(25,34,1)
(46,36,1)
(37,40,1)
(26,12,1)
(35,6,1)
(13,1,1)
(17,6,1)
(34,32,1)
(39,4,1)
(43,6,1)
(23,28,1)
(20,43,1)
(47,17,1)
(26,6,1)
(27,25,1)
(19,42,1)
(25,6,1)
(40,24,1)
(28,22,1)
(2,20,1)
(14,26,1)
(28,52,1)
(4,7,1)
(44,14,1)
(42,33,1)
(7,16,1)
(45,35,1)
(35,52,1)
(49,45,1)
(5,8,1)
(52,31,1)
(10,47,1)
(35,44,1)
(46,29,1)
(22,43,1)
(54,13,1)
(36,10,1)
(22,49,1)
(32,50,1)
(24,39,1)
(12,2,1)
(43,54,1)
(16,41,1)
(1,3,1)
(33,37,1)
(44,43,2)
(25,6,2)
(26,43,2)
(34,17,2)
(14,43,2)
(12,43,2)
(49,43,2)
(24,39,2)
(26,52,2)
(43,6,2)
(35,43,2)
(25,17,2)
(35,6,2)
(20,43,2)
(29,17,2)
(27,25,2)
(32,17,2)
(27,17,2)
(10,17,2)
(19,42,2)
(26,6,2)
(35,52,2)
(28,52,2)
(2,43,2)
(36,17,2)
(50,17,2)
(47,17,2)
(45,43,2)
-----------------------------------
(0,source)
(1,source[100-1] = \\\'\\\\0\\\')
(2,source)
(3,\\\'\\\\0\\\')
(4,1)
(5,0)
(6,data = 0)
(7,100)
(8,data)
(9,)
(10,printLine("Benign, fixed string")
(11,default:)
(12,data)
(13,data)
(14,dest)
(15,if (data < 100)
(16,\\\'A\\\')
(17,6)
(18,switch(6)
(19,source[100-1])
(20,dest)
(21,data)
(22,dest)
(23,RET)
(24,memset(source, \\\'A\\\', 100-1)
(25,&data)
(26,strncpy(dest, source, data)
(27,fscanf (stdin, "%hd", &data)
(28,printLine(dest)
(29,break;)
(30,dest)
(31,"")
(32,"%hd")
(33,1)
(34,data)
(35,dest[data])
(36,break;)
(37,100)
(38,)
(39,100-1)
(40,source)
(41,source)
(42,100-1)
(43,data < 100)
(44,data)
(45,\\\'\\\\0\\\')
(46,dest)
(47,"Benign, fixed string")
(48,case 6:)
(49,dest[data] = \\\'\\\\0\\\')
(50,stdin)
(51,)
(52,dest[100] = "")
(53,)
(54,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^