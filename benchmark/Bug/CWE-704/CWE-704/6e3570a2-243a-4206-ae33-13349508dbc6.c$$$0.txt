-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66_bad()
{
    int data;
    int dataArray[5];
    /* Initialize data */
    data = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
54,55
55,56
55,57
57,58
57,59
59,60
60,61
62,63
62,64
63,64
63,65
63,66
63,67
63,68
63,69
63,70
63,71
63,72
63,73
63,74
63,75
63,76
63,77
64,65
65,66
65,67
66,67
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
85,86
86,87
86,88
86,89
86,90
87,88
89,90
90,91
93,94
94,95
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
113,114
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
128,130
128,131
128,132
129,130
131,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
142,143
143,144
144,145
146,147
148,149
150,151
150,152
151,152
151,153
152,153
152,154
152,155
153,154
155,156
157,158
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
167,170
167,171
168,169
170,171
172,173
174,175
176,177
176,178
177,178
177,179
178,179
180,181
182,183
184,185
185,186
185,187
186,187
188,189
188,190
188,191
188,192
188,193
189,190
191,192
193,194
195,196
195,197
196,197
200,201
200,202
201,202
201,203
202,203
202,204
203,204
205,206
207,208
207,209
208,209
211,212
213,214
214,215
214,216
215,216
215,217
216,217
218,219
221,222
222,223
222,224
223,224
225,226
225,227
226,227
228,229
231,232
231,233
232,233
232,234
233,234
235,236
237,238
238,239
239,240
239,241
240,241
242,243
244,245
244,246
245,246
245,247
246,247
248,249
250,251
251,252
252,253
252,254
253,254
255,256
257,258
258,259
258,260
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
269,270
-----nextToken-----
2,4,8,10,13,15,17,21,23,27,29,33,35,39,41,44,48,50,53,56,58,61,67,70,72,74,76,80,82,84,88,91,92,96,101,102,104,110,111,112,114,119,120,123,125,130,132,136,138,141,145,147,149,154,156,158,160,162,166,169,171,173,175,179,181,183,187,190,192,194,197,198,199,204,206,209,210,212,217,219,220,224,227,229,230,234,236,241,243,247,249,254,256,261,262,264,268,270
-----computeFrom-----
19,20
19,21
65,66
65,67
78,79
78,80
98,99
98,100
106,107
106,108
116,117
116,118
127,128
127,129
151,152
151,153
164,165
164,166
177,178
177,179
185,186
185,187
195,196
195,197
201,202
201,203
202,203
202,204
207,208
207,209
214,215
214,216
222,223
222,224
232,233
232,234
245,246
245,247
258,259
258,260
-----guardedBy-----
234,243
247,256
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66_bad(){    int data;    int dataArray[5];    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray);}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66_bad
{    int data;    int dataArray[5];    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray);}
int data;
int data;
int
data
data
int dataArray[5];
int dataArray[5];
int
dataArray[5]
dataArray
[5]
5
data = -1;
data = -1
data
data
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray);
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray)
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink
dataArray
dataArray
-----joern-----
(56,63,0)
(160,29,0)
(12,10,0)
(80,69,0)
(165,51,0)
(62,132,0)
(107,115,0)
(52,132,0)
(35,33,0)
(76,29,0)
(158,29,0)
(45,137,0)
(153,147,0)
(19,10,0)
(87,109,0)
(163,144,0)
(39,16,0)
(60,9,0)
(13,136,0)
(63,62,0)
(8,16,0)
(16,43,0)
(136,37,0)
(159,9,0)
(119,133,0)
(0,9,0)
(62,63,0)
(150,62,0)
(134,60,0)
(132,10,0)
(55,6,0)
(66,5,0)
(135,69,0)
(15,131,0)
(75,77,0)
(77,11,0)
(90,26,0)
(40,43,0)
(51,29,0)
(126,29,0)
(79,69,0)
(94,17,0)
(139,83,0)
(64,62,0)
(28,135,0)
(115,29,0)
(100,138,0)
(26,129,0)
(57,129,0)
(5,47,0)
(105,69,0)
(89,40,0)
(152,69,0)
(116,115,0)
(7,134,0)
(43,69,0)
(84,105,0)
(74,56,0)
(101,99,0)
(161,91,0)
(77,43,0)
(103,37,0)
(33,60,0)
(92,103,0)
(5,69,0)
(105,84,0)
(95,29,0)
(60,69,0)
(137,45,0)
(137,83,0)
(59,3,0)
(53,2,0)
(34,153,0)
(142,2,0)
(36,29,0)
(10,132,0)
(125,143,0)
(124,43,0)
(136,100,0)
(22,69,0)
(43,16,0)
(117,53,0)
(100,37,0)
(128,129,0)
(105,25,0)
(81,84,0)
(122,132,0)
(10,43,0)
(50,33,0)
(56,132,0)
(14,29,0)
(3,26,0)
(125,115,0)
(162,142,0)
(44,148,0)
(147,79,0)
(148,136,0)
(38,23,0)
(102,146,0)
(31,125,0)
(123,97,0)
(78,25,0)
(146,97,0)
(86,100,0)
(131,69,0)
(18,51,0)
(151,40,0)
(58,37,0)
(121,29,0)
(26,3,0)
(164,122,0)
(63,56,0)
(77,51,0)
(16,60,0)
(9,60,0)
(98,69,0)
(140,135,0)
(46,60,0)
(21,46,0)
(133,43,0)
(42,122,0)
(99,69,0)
(61,20,0)
(132,69,0)
(30,90,0)
(24,145,0)
(23,10,0)
(48,60,0)
(71,9,0)
(88,53,0)
(6,33,0)
(41,46,0)
(154,148,0)
(97,60,0)
(110,153,0)
(29,37,0)
(106,149,0)
(85,138,0)
(118,133,0)
(2,142,0)
(26,90,0)
(97,146,0)
(125,60,0)
(93,123,0)
(130,29,0)
(70,97,0)
(108,105,0)
(65,69,0)
(47,5,0)
(46,115,0)
(141,69,0)
(155,149,0)
(96,29,0)
(138,100,0)
(122,99,0)
(73,67,0)
(33,6,0)
(97,137,0)
(10,23,0)
(104,37,0)
(20,131,0)
(137,97,0)
(149,29,0)
(4,54,0)
(120,79,0)
(25,105,0)
(111,16,0)
(127,20,0)
(133,51,0)
(83,137,0)
(113,134,0)
(72,23,0)
(97,123,0)
(136,5,0)
(68,47,0)
(2,69,0)
(1,147,0)
(114,56,0)
(147,153,0)
(129,26,0)
(82,29,0)
(27,10,0)
(21,161,1)
(33,50,1)
(78,134,1)
(111,39,1)
(133,119,1)
(120,147,1)
(71,159,1)
(10,19,1)
(83,139,1)
(105,25,1)
(42,63,1)
(41,21,1)
(10,23,1)
(79,120,1)
(136,13,1)
(122,164,1)
(125,60,1)
(25,78,1)
(21,87,1)
(97,60,1)
(108,25,1)
(137,83,1)
(47,68,1)
(118,125,1)
(164,42,1)
(117,88,1)
(165,18,1)
(43,16,1)
(63,56,1)
(133,43,1)
(20,127,1)
(53,117,1)
(13,148,1)
(49,77,1)
(46,115,1)
(34,131,1)
(39,124,1)
(66,99,1)
(46,60,1)
(4,40,1)
(3,59,1)
(38,72,1)
(125,31,1)
(16,8,1)
(70,2,1)
(90,30,1)
(133,51,1)
(21,4,1)
(26,90,1)
(142,162,1)
(77,43,1)
(55,33,1)
(161,146,1)
(122,132,1)
(84,81,1)
(123,93,1)
(9,0,1)
(0,71,1)
(147,153,1)
(10,43,1)
(129,128,1)
(116,107,1)
(118,46,1)
(138,85,1)
(125,115,1)
(140,3,1)
(128,57,1)
(148,154,1)
(68,66,1)
(48,135,1)
(92,136,1)
(2,142,1)
(97,137,1)
(21,94,1)
(63,62,1)
(85,86,1)
(105,84,1)
(153,110,1)
(154,44,1)
(6,55,1)
(119,118,1)
(136,100,1)
(56,114,1)
(106,155,1)
(114,74,1)
(151,43,1)
(18,115,1)
(52,40,1)
(35,146,1)
(149,106,1)
(8,111,1)
(51,165,1)
(5,47,1)
(100,138,1)
(77,75,1)
(7,113,1)
(44,163,1)
(136,5,1)
(110,34,1)
(113,60,1)
(107,149,1)
(139,70,1)
(102,97,1)
(61,105,1)
(97,123,1)
(40,43,1)
(62,132,1)
(57,32,1)
(26,129,1)
(127,61,1)
(60,9,1)
(31,46,1)
(162,53,1)
(99,101,1)
(21,32,1)
(32,5,1)
(115,116,1)
(150,132,1)
(81,108,1)
(33,60,1)
(15,20,1)
(146,102,1)
(19,23,1)
(87,6,1)
(101,122,1)
(134,7,1)
(73,3,1)
(3,26,1)
(40,89,1)
(56,132,1)
(163,49,1)
(21,24,1)
(62,64,1)
(12,52,1)
(88,79,1)
(147,1,1)
(49,133,1)
(137,45,1)
(27,12,1)
(50,35,1)
(159,48,1)
(93,137,1)
(155,100,1)
(57,51,1)
(77,51,1)
(134,60,1)
(156,103,1)
(94,134,1)
(23,38,1)
(24,63,1)
(75,133,1)
(44,49,1)
(103,92,1)
(89,151,1)
(6,33,1)
(59,26,1)
(21,73,1)
(1,153,1)
(28,140,1)
(131,15,1)
(132,10,1)
(30,129,1)
(72,27,1)
(46,41,1)
(16,60,1)
(74,62,1)
(124,6,1)
(135,28,1)
(146,97,1)
(64,150,1)
(16,6,2)
(105,134,2)
(105,84,2)
(60,3,2)
(90,32,2)
(2,134,2)
(63,56,2)
(40,6,2)
(97,60,2)
(135,3,2)
(136,5,2)
(122,132,2)
(89,6,2)
(125,46,2)
(46,115,2)
(62,40,2)
(6,33,2)
(27,40,2)
(20,134,2)
(123,134,2)
(93,134,2)
(35,146,2)
(72,40,2)
(125,115,2)
(56,132,2)
(70,134,2)
(50,146,2)
(81,134,2)
(33,60,2)
(125,60,2)
(77,51,2)
(61,134,2)
(161,146,2)
(73,3,2)
(97,137,2)
(110,134,2)
(79,134,2)
(52,40,2)
(133,51,2)
(120,134,2)
(87,6,2)
(59,32,2)
(164,63,2)
(137,83,2)
(129,32,2)
(100,138,2)
(108,134,2)
(3,32,2)
(57,32,2)
(111,6,2)
(159,3,2)
(102,134,2)
(132,40,2)
(78,134,2)
(53,134,2)
(10,40,2)
(62,132,2)
(31,46,2)
(77,133,2)
(9,3,2)
(64,40,2)
(55,146,2)
(127,134,2)
(6,146,2)
(147,153,2)
(68,63,2)
(97,123,2)
(48,3,2)
(10,23,2)
(101,63,2)
(28,3,2)
(26,129,2)
(60,9,2)
(134,60,2)
(12,40,2)
(105,25,2)
(162,134,2)
(16,60,2)
(15,134,2)
(23,40,2)
(43,16,2)
(39,6,2)
(113,3,2)
(136,100,2)
(146,97,2)
(1,134,2)
(163,49,2)
(75,133,2)
(74,62,2)
(32,63,2)
(33,146,2)
(5,47,2)
(124,6,2)
(83,134,2)
(134,3,2)
(146,134,2)
(88,134,2)
(131,134,2)
(71,3,2)
(24,63,2)
(63,40,2)
(114,62,2)
(26,90,2)
(99,63,2)
(150,40,2)
(26,32,2)
(0,3,2)
(7,3,2)
(137,134,2)
(151,6,2)
(117,134,2)
(3,26,2)
(142,134,2)
(137,45,2)
(43,6,2)
(25,134,2)
(94,134,2)
(19,40,2)
(66,63,2)
(34,134,2)
(10,43,2)
(140,3,2)
(42,63,2)
(30,32,2)
(132,10,2)
(38,40,2)
(56,62,2)
(147,134,2)
(97,134,2)
(46,60,2)
(77,43,2)
(4,40,2)
(40,43,2)
(84,134,2)
(133,43,2)
(128,32,2)
(139,134,2)
(122,63,2)
(5,63,2)
(153,134,2)
(8,6,2)
(63,62,2)
(2,142,2)
(47,63,2)
-----------------------------------
(0,IPPROTO_TCP)
(1,s_addr)
(2,service.sin_port = htons(TCP_PORT)
(3,WSAStartup(MAKEWORD(2,2)
(4,break;)
(5,data = atoi(inputBuffer)
(6,listen(listenSocket, LISTEN_BACKLOG)
(7,INVALID_SOCKET)
(8,NULL)
(9,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(10,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(11,)
(12,acceptSocket)
(13,data)
(14,inputBuffer)
(15,AF_INET)
(16,accept(listenSocket, NULL, NULL)
(17,)
(18,acceptSocket)
(19,0)
(20,service.sin_family)
(21,listenSocket)
(22,if (recvResult == SOCKET_ERROR || recvResult == 0)
(23,CHAR_ARRAY_SIZE - 1)
(24,break;)
(25,&service)
(26,WSAStartup(MAKEWORD(2,2)
(27,inputBuffer)
(28,1)
(29,)
(30,wsaData)
(31,listenSocket)
(32,0)
(33,listen(listenSocket, LISTEN_BACKLOG)
(34,service)
(35,listenSocket)
(36,wsaData)
(37,)
(38,1)
(39,listenSocket)
(40,acceptSocket == SOCKET_ERROR)
(41,INVALID_SOCKET)
(42,inputBuffer)
(43,acceptSocket = accept(listenSocket, NULL, NULL)
(44,dataArray)
(45,struct sockaddr*)
(46,listenSocket != INVALID_SOCKET)
(47,atoi(inputBuffer)
(48,listenSocket)
(49,wsaDataInit)
(50,LISTEN_BACKLOG)
(51,acceptSocket = INVALID_SOCKET)
(52,recvResult)
(53,service.sin_port)
(54,)
(55,SOCKET_ERROR)
(56,recvResult == 0)
(57,2)
(58,dataArray)
(59,NO_ERROR)
(60,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(61,service)
(62,recvResult == SOCKET_ERROR)
(63,recvResult == SOCKET_ERROR || recvResult == 0)
(64,SOCKET_ERROR)
(65,if (WSAStartup(MAKEWORD(2,2)
(66,data)
(67,)
(68,inputBuffer)
(69,)
(70,listenSocket)
(71,SOCK_STREAM)
(72,CHAR_ARRAY_SIZE)
(73,break;)
(74,recvResult)
(75,acceptSocket)
(76,wsaDataInit)
(77,CLOSE_SOCKET(acceptSocket)
(78,service)
(79,service.sin_addr.s_addr = INADDR_ANY)
(80,if (bind(listenSocket, (struct sockaddr*)
(81,service)
(82,if (acceptSocket != INVALID_SOCKET)
(83,&service)
(84,sizeof(service)
(85,1)
(86,data)
(87,break;)
(88,service)
(89,SOCKET_ERROR)
(90,&wsaData)
(91,)
(92,dataArray)
(93,service)
(94,break;)
(95,do)
(96,acceptSocket)
(97,bind(listenSocket, (struct sockaddr*)
(98,if (listen(listenSocket, LISTEN_BACKLOG)
(99,inputBuffer[recvResult] = \'\\\\0\')
(100,data = -1)
(101,\'\\\\0\')
(102,SOCKET_ERROR)
(103,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_66b_badSink(dataArray)
(104,data)
(105,memset(&service, 0, sizeof(service)
(106,0)
(107,listenSocket)
(108,0)
(109,)
(110,sin_addr)
(111,NULL)
(112,'\\\\0')
(113,listenSocket)
(114,0)
(115,listenSocket = INVALID_SOCKET)
(116,INVALID_SOCKET)
(117,sin_port)
(118,acceptSocket)
(119,INVALID_SOCKET)
(120,INADDR_ANY)
(121,recvResult)
(122,inputBuffer[recvResult])
(123,sizeof(service)
(124,acceptSocket)
(125,CLOSE_SOCKET(listenSocket)
(126,if (listenSocket != INVALID_SOCKET)
(127,sin_family)
(128,2)
(129,MAKEWORD(2,2)
(130,listenSocket)
(131,service.sin_family = AF_INET)
(132,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(133,acceptSocket != INVALID_SOCKET)
(134,listenSocket == INVALID_SOCKET)
(135,wsaDataInit = 1)
(136,dataArray[2] = data)
(137,(struct sockaddr*)
(138,-1)
(139,service)
(140,wsaDataInit)
(141,if (acceptSocket == SOCKET_ERROR)
(142,htons(TCP_PORT)
(143,)
(144,)
(145,)
(146,bind(listenSocket, (struct sockaddr*)
(147,service.sin_addr.s_addr)
(148,dataArray[2])
(149,wsaDataInit = 0)
(150,recvResult)
(151,acceptSocket)
(152,if (listenSocket == INVALID_SOCKET)
(153,service.sin_addr)
(154,2)
(155,wsaDataInit)
(156,RET)
(157,inputBuffer[recvResult] = '\\\\0')
(158,service)
(159,AF_INET)
(160,if (wsaDataInit)
(161,break;)
(162,TCP_PORT)
(163,WSACleanup()
(164,recvResult)
(165,INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^