-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,33,0)
(3,23,0)
(9,24,0)
(13,15,0)
(28,7,0)
(24,16,0)
(1,5,0)
(45,14,0)
(11,6,0)
(32,17,0)
(15,44,0)
(27,51,0)
(41,23,0)
(5,36,0)
(50,0,0)
(21,41,0)
(39,5,0)
(6,32,0)
(10,33,0)
(15,13,0)
(24,51,0)
(19,36,0)
(33,36,0)
(16,23,0)
(30,40,0)
(36,47,0)
(42,7,0)
(37,39,0)
(36,7,0)
(14,23,0)
(41,15,0)
(40,41,0)
(22,0,0)
(31,39,0)
(8,51,0)
(44,15,0)
(5,0,0)
(48,5,0)
(4,16,0)
(0,20,0)
(47,36,0)
(14,41,0)
(32,6,0)
(13,36,0)
(39,23,0)
(5,39,0)
(24,41,0)
(52,41,0)
(26,47,0)
(40,23,0)
(39,41,0)
(15,41,0)
(13,0,0)
(18,13,0)
(51,36,0)
(33,0,0)
(12,7,0)
(51,24,0)
(2,52,0)
(53,23,0)
(51,0,0)
(34,52,0)
(0,22,0)
(33,0,1)
(41,15,1)
(15,13,1)
(24,41,1)
(10,25,1)
(4,24,1)
(48,1,1)
(13,18,1)
(18,21,1)
(34,2,1)
(52,34,1)
(13,36,1)
(1,37,1)
(16,4,1)
(5,48,1)
(39,5,1)
(15,44,1)
(9,39,1)
(30,16,1)
(26,19,1)
(38,10,1)
(40,41,1)
(37,31,1)
(36,47,1)
(25,36,1)
(31,52,1)
(50,25,1)
(21,33,1)
(5,0,1)
(33,36,1)
(24,51,1)
(31,32,1)
(43,33,1)
(32,6,1)
(43,14,1)
(52,41,1)
(51,27,1)
(33,38,1)
(51,36,1)
(27,8,1)
(13,0,1)
(11,52,1)
(47,26,1)
(14,45,1)
(45,40,1)
(39,41,1)
(2,41,1)
(14,41,1)
(40,30,1)
(5,36,1)
(6,11,1)
(10,0,1)
(51,0,1)
(0,22,1)
(22,50,1)
(8,9,1)
(51,33,2)
(0,22,2)
(24,41,2)
(36,47,2)
(39,5,2)
(9,33,2)
(32,6,2)
(13,0,2)
(5,36,2)
(32,52,2)
(13,33,2)
(5,33,2)
(24,51,2)
(11,52,2)
(30,33,2)
(50,25,2)
(4,33,2)
(34,33,2)
(39,41,2)
(16,33,2)
(52,33,2)
(52,41,2)
(0,25,2)
(15,44,2)
(45,33,2)
(37,33,2)
(1,33,2)
(27,33,2)
(13,36,2)
(22,25,2)
(51,0,2)
(41,15,2)
(33,36,2)
(51,36,2)
(21,33,2)
(40,33,2)
(14,33,2)
(40,41,2)
(15,33,2)
(5,0,2)
(31,33,2)
(18,33,2)
(48,33,2)
(14,41,2)
(6,52,2)
(39,33,2)
(8,33,2)
(15,13,2)
(33,0,2)
(24,33,2)
(2,33,2)
(41,33,2)
-----------------------------------
(0,data = RAND32()
(1,data)
(2,dataBuffer)
(3,if (dataBuffer == NULL)
(4,\'\\\\0\')
(5,data-1)
(6,-1)
(7,)
(8,data)
(9,dataBuffer)
(10,data)
(11,1)
(12,if(STATIC_CONST_TRUE)
(13,malloc(data)
(14,free(dataBuffer)
(15,(char *)
(16,dataBuffer[data-1] = \'\\\\0\')
(17,)
(18,data)
(19,data)
(20,)
(21,dataBuffer)
(22,RAND32()
(23,)
(24,dataBuffer[data-1])
(25,STATIC_CONST_TRUE)
(26,1)
(27,1)
(28,data)
(29,dataBuffer[data-1] = '\\\\0')
(30,dataBuffer)
(31,dataBuffer)
(32,exit(-1)
(33,data < 100)
(34,NULL)
(35,'\\\\0')
(36,data = -1)
(37,\'A\')
(38,100)
(39,memset(dataBuffer, 'A', data-1)
(40,printLine(dataBuffer)
(41,* dataBuffer = (char *)
(42,if (data < 100)
(43,RET)
(44,char *)
(45,dataBuffer)
(46,memset(dataBuffer, \'A\', data-1)
(47,-1)
(48,1)
(49,'A')
(50,data)
(51,data-1)
(52,dataBuffer == NULL)
(53,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^