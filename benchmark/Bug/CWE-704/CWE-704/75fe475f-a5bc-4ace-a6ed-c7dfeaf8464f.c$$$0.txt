-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_44_bad()
{
    short data;
    /* define a function pointer */
    void (*funcPtr) (short) = badSink;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
38,39
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,36,37,40,44,46
-----computeFrom-----
26,27
26,28
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_44_bad(){    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* use the function pointer */    funcPtr(data);}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_44_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_44_bad
{    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* use the function pointer */    funcPtr(data);}
short data;
short data;
short
data
data
void (*funcPtr) (short) = badSink;
void (*funcPtr) (short) = badSink;
void
(*funcPtr) (short) = badSink
*funcPtr
*
funcPtr
short
short


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(7,2,0)
(6,4,0)
(14,15,0)
(0,2,0)
(8,5,0)
(0,15,0)
(12,13,0)
(16,5,0)
(1,15,0)
(5,2,0)
(4,0,0)
(10,13,0)
(4,2,0)
(15,14,0)
(11,0,0)
(13,2,0)
(15,1,0)
(15,0,0)
(3,2,0)
(9,4,1)
(13,10,1)
(11,13,1)
(4,6,1)
(5,16,1)
(16,8,1)
(4,0,1)
(1,11,1)
(12,5,1)
(15,14,1)
(6,0,1)
(10,12,1)
(15,1,1)
(0,15,1)
(0,15,2)
(15,14,2)
(15,1,2)
(4,0,2)
-----------------------------------
(0,data = (short)
(1,RAND32()
(2,)
(3,funcPtr)
(4,funcPtr(data)
(5,(*funcPtr)
(6,data)
(7,data)
(8,funcPtr)
(9,RET)
(10,0)
(11,data)
(12,data)
(13,data = 0)
(14,short)
(15,(short)
(16,badSink)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^