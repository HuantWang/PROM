-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a value input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
46,54
46,55
47,48
48,49
48,50
50,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
78,79
79,80
81,82
82,83
82,84
84,85
84,86
86,87
87,88
89,90
89,91
90,91
90,92
90,93
90,94
90,95
90,96
90,97
90,98
90,99
90,100
90,101
90,102
90,103
90,104
90,105
91,92
92,93
92,94
93,94
95,96
95,97
95,98
95,99
96,97
98,99
100,101
102,103
104,105
104,106
105,106
105,107
106,107
108,109
110,111
112,113
113,114
113,115
113,116
113,117
114,115
116,117
117,118
120,121
121,122
122,123
124,125
125,126
125,127
126,127
126,128
127,128
130,131
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
140,141
142,143
143,144
143,145
144,145
144,146
145,146
148,149
148,150
149,150
151,152
153,154
153,155
154,155
154,156
155,156
155,157
155,158
155,159
156,157
158,159
160,161
160,162
161,162
161,163
162,163
164,165
166,167
167,168
169,170
170,171
171,172
173,174
175,176
177,178
177,179
178,179
178,180
179,180
179,181
179,182
180,181
182,183
184,185
186,187
188,189
190,191
191,192
191,193
192,193
194,195
194,196
194,197
194,198
195,196
197,198
199,200
201,202
203,204
203,205
204,205
204,206
205,206
207,208
209,210
211,212
212,213
212,214
213,214
215,216
215,217
215,218
215,219
215,220
216,217
218,219
220,221
222,223
222,224
223,224
227,228
227,229
228,229
228,230
229,230
229,231
230,231
232,233
234,235
234,236
235,236
238,239
240,241
241,242
241,243
242,243
242,244
243,244
245,246
248,249
249,250
249,251
250,251
252,253
252,254
253,254
255,256
257,258
257,259
257,260
258,259
258,260
259,260
259,261
260,261
262,263
264,265
264,266
265,266
267,268
269,270
270,271
271,272
271,273
272,273
274,275
276,277
277,278
278,279
278,280
279,280
281,282
284,285
284,286
285,286
285,287
286,287
288,289
290,291
291,292
292,293
292,294
293,294
295,296
297,298
297,299
298,299
298,300
299,300
301,302
303,304
304,305
305,306
305,307
306,307
308,309
310,311
311,312
311,313
312,313
313,314
315,316
317,318
317,319
318,319
319,320
319,321
321,322
321,323
323,324
324,325
325,326
327,328
327,329
327,330
327,331
327,332
327,333
328,329
329,330
329,331
331,332
331,333
333,334
335,336
336,337
336,338
338,339
338,340
338,341
340,341
342,343
344,345
345,346
345,347
345,348
345,349
346,347
348,349
351,352
351,353
354,355
355,356
355,357
356,357
356,358
357,358
359,360
359,361
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
370,371
370,372
370,373
370,374
371,372
373,374
375,376
377,378
379,380
380,381
380,382
381,382
381,383
382,383
384,385
387,388
388,389
388,390
389,390
391,392
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,60,62,66,68,71,75,77,80,83,85,88,94,97,99,101,103,107,109,111,115,118,119,123,128,129,131,137,138,139,141,146,147,150,152,157,159,163,165,168,172,174,176,181,183,185,187,189,193,196,198,200,202,206,208,210,214,217,219,221,224,225,226,231,233,236,237,239,244,246,247,251,254,256,261,263,266,268,273,275,280,282,283,287,289,294,296,300,302,307,309,314,316,320,322,326,330,332,334,337,339,341,343,347,349,350,352,353,358,360,361,362,366,367,372,374,376,378,383,385,386,390,392
-----computeFrom-----
32,33
32,34
92,93
92,94
105,106
105,107
125,126
125,127
133,134
133,135
143,144
143,145
154,155
154,156
178,179
178,180
191,192
191,193
204,205
204,206
212,213
212,214
222,223
222,224
228,229
228,230
229,230
229,231
234,235
234,236
241,242
241,243
249,250
249,251
258,259
258,260
259,260
259,261
264,265
264,266
271,272
271,273
278,279
278,280
285,286
285,287
298,299
298,300
311,312
311,313
351,352
351,353
355,356
355,357
359,360
359,361
364,365
364,366
380,381
380,382
-----guardedBy-----
287,296
300,309
366,385
-----guardedByNegation-----
266,282
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_32_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,171,0)
(131,154,0)
(232,228,0)
(82,140,0)
(24,166,0)
(181,77,0)
(206,228,0)
(182,228,0)
(89,113,0)
(220,57,0)
(57,134,0)
(144,184,0)
(176,177,0)
(30,77,0)
(162,77,0)
(18,154,0)
(69,51,0)
(178,51,0)
(209,90,0)
(19,185,0)
(156,141,0)
(207,228,0)
(144,194,0)
(13,198,0)
(164,228,0)
(9,193,0)
(116,82,0)
(97,208,0)
(4,200,0)
(198,13,0)
(87,47,0)
(88,208,0)
(41,89,0)
(210,220,0)
(50,28,0)
(79,107,0)
(169,134,0)
(22,42,0)
(11,179,0)
(127,160,0)
(14,173,0)
(13,103,0)
(40,57,0)
(43,57,0)
(218,144,0)
(156,134,0)
(29,215,0)
(216,194,0)
(56,134,0)
(151,113,0)
(199,89,0)
(18,1,0)
(78,60,0)
(42,134,0)
(3,140,0)
(55,126,0)
(136,67,0)
(31,151,0)
(101,103,0)
(138,126,0)
(195,134,0)
(132,40,0)
(222,141,0)
(193,160,0)
(130,142,0)
(189,109,0)
(161,15,0)
(40,82,0)
(1,18,0)
(200,139,0)
(102,52,0)
(33,183,0)
(60,123,0)
(220,105,0)
(26,9,0)
(47,208,0)
(184,112,0)
(49,105,0)
(186,220,0)
(192,223,0)
(114,142,0)
(94,200,0)
(16,109,0)
(104,200,0)
(144,109,0)
(108,76,0)
(33,74,0)
(62,90,0)
(116,0,0)
(143,0,0)
(220,28,0)
(87,208,0)
(202,76,0)
(230,173,0)
(5,47,0)
(52,134,0)
(124,185,0)
(92,54,0)
(155,40,0)
(203,213,0)
(161,25,0)
(84,29,0)
(165,129,0)
(140,82,0)
(70,220,0)
(193,161,0)
(41,157,0)
(38,50,0)
(2,148,0)
(74,228,0)
(188,77,0)
(109,154,0)
(146,54,0)
(89,37,0)
(33,57,0)
(85,184,0)
(180,82,0)
(111,29,0)
(30,82,0)
(223,156,0)
(53,4,0)
(65,140,0)
(76,200,0)
(133,156,0)
(76,177,0)
(39,228,0)
(1,131,0)
(86,68,0)
(149,40,0)
(45,8,0)
(150,6,0)
(168,37,0)
(119,30,0)
(126,176,0)
(104,151,0)
(46,85,0)
(147,230,0)
(28,220,0)
(219,7,0)
(68,52,0)
(99,221,0)
(142,57,0)
(201,43,0)
(215,29,0)
(8,209,0)
(196,67,0)
(200,104,0)
(212,47,0)
(157,194,0)
(185,113,0)
(58,43,0)
(105,220,0)
(161,193,0)
(190,42,0)
(221,208,0)
(163,102,0)
(83,104,0)
(103,13,0)
(122,123,0)
(157,41,0)
(228,194,0)
(54,28,0)
(57,40,0)
(231,228,0)
(126,47,0)
(153,233,0)
(187,193,0)
(208,139,0)
(156,223,0)
(121,25,0)
(172,154,0)
(139,113,0)
(90,134,0)
(224,134,0)
(75,228,0)
(20,8,0)
(110,228,0)
(23,184,0)
(191,228,0)
(82,134,0)
(95,134,0)
(13,148,0)
(145,144,0)
(148,13,0)
(131,1,0)
(160,193,0)
(227,208,0)
(32,4,0)
(76,47,0)
(27,68,0)
(60,67,0)
(118,103,0)
(128,57,0)
(43,74,0)
(17,18,0)
(61,221,0)
(166,221,0)
(162,82,0)
(229,131,0)
(98,176,0)
(175,74,0)
(21,105,0)
(211,213,0)
(93,169,0)
(174,113,0)
(73,157,0)
(96,209,0)
(214,166,0)
(64,113,0)
(15,161,0)
(80,162,0)
(12,140,0)
(173,134,0)
(125,116,0)
(141,156,0)
(215,54,0)
(25,161,0)
(193,9,0)
(225,198,0)
(77,228,0)
(91,134,0)
(52,102,0)
(170,41,0)
(71,151,0)
(209,8,0)
(51,82,0)
(100,28,0)
(109,159,0)
(66,230,0)
(135,228,0)
(107,154,0)
(50,169,0)
(0,116,0)
(218,89,0)
(30,117,0)
(35,33,0)
(10,116,0)
(44,50,0)
(67,60,0)
(194,113,0)
(167,31,0)
(63,87,0)
(48,113,0)
(144,157,0)
(137,197,0)
(120,76,0)
(154,107,0)
(29,28,0)
(213,228,0)
(221,166,0)
(106,162,0)
(226,134,0)
(158,134,0)
(151,31,0)
(123,208,0)
(81,218,0)
(72,228,0)
(59,139,0)
(126,200,0)
(154,134,0)
(193,82,0)
(184,85,0)
(37,89,0)
(115,74,0)
(28,134,0)
(152,18,0)
(217,131,0)
(54,215,0)
(144,157,1)
(145,218,1)
(52,102,1)
(37,168,1)
(151,31,1)
(29,111,1)
(103,118,1)
(116,82,1)
(26,161,1)
(35,43,1)
(19,124,1)
(215,29,1)
(203,157,1)
(144,184,1)
(133,141,1)
(106,11,1)
(225,103,1)
(123,122,1)
(93,50,1)
(74,175,1)
(50,28,1)
(51,82,1)
(204,87,1)
(31,167,1)
(130,114,1)
(175,115,1)
(45,173,1)
(111,84,1)
(214,24,1)
(170,73,1)
(81,150,1)
(41,170,1)
(144,145,1)
(33,35,1)
(78,221,1)
(70,186,1)
(220,210,1)
(187,52,1)
(21,49,1)
(42,22,1)
(219,215,1)
(14,230,1)
(5,212,1)
(184,85,1)
(43,74,1)
(124,151,1)
(54,28,1)
(41,89,1)
(205,109,1)
(162,80,1)
(44,38,1)
(150,36,1)
(142,57,1)
(125,160,1)
(28,220,1)
(217,18,1)
(132,149,1)
(161,15,1)
(178,69,1)
(201,58,1)
(188,213,1)
(193,9,1)
(30,82,1)
(101,205,1)
(22,190,1)
(94,144,1)
(156,223,1)
(180,42,1)
(163,68,1)
(40,155,1)
(220,105,1)
(43,57,1)
(192,133,1)
(218,81,1)
(138,76,1)
(77,181,1)
(54,146,1)
(17,152,1)
(27,90,1)
(106,153,1)
(12,3,1)
(23,1,1)
(155,132,1)
(189,1,1)
(18,154,1)
(20,45,1)
(143,116,1)
(36,43,1)
(24,61,1)
(172,169,1)
(160,127,1)
(126,200,1)
(119,162,1)
(58,30,1)
(169,93,1)
(154,107,1)
(60,67,1)
(80,106,1)
(196,136,1)
(106,205,1)
(96,8,1)
(98,126,1)
(126,47,1)
(126,55,1)
(131,229,1)
(147,156,1)
(166,214,1)
(73,185,1)
(104,83,1)
(116,10,1)
(121,187,1)
(107,79,1)
(76,47,1)
(16,189,1)
(50,44,1)
(58,162,1)
(1,131,1)
(205,184,1)
(2,13,1)
(173,14,1)
(4,200,1)
(128,0,1)
(71,89,1)
(211,203,1)
(209,8,1)
(29,28,1)
(33,57,1)
(49,70,1)
(89,37,1)
(115,77,1)
(25,121,1)
(210,105,1)
(90,62,1)
(69,82,1)
(165,0,1)
(168,199,1)
(86,27,1)
(153,160,1)
(33,74,1)
(1,18,1)
(92,28,1)
(46,23,1)
(30,119,1)
(0,116,1)
(146,92,1)
(106,165,1)
(209,96,1)
(131,154,1)
(141,222,1)
(11,51,1)
(109,154,1)
(229,217,1)
(137,148,1)
(34,142,1)
(108,120,1)
(120,202,1)
(83,94,1)
(104,151,1)
(176,98,1)
(200,104,1)
(198,225,1)
(38,215,1)
(106,137,1)
(47,5,1)
(230,66,1)
(142,130,1)
(222,51,1)
(55,138,1)
(136,78,1)
(63,176,1)
(144,109,1)
(221,166,1)
(106,34,1)
(13,103,1)
(32,123,1)
(106,219,1)
(186,100,1)
(85,46,1)
(57,40,1)
(118,101,1)
(185,19,1)
(181,188,1)
(193,82,1)
(148,13,1)
(87,63,1)
(101,74,1)
(30,77,1)
(127,193,1)
(13,198,1)
(10,125,1)
(62,209,1)
(4,53,1)
(87,47,1)
(82,140,1)
(152,154,1)
(157,41,1)
(162,77,1)
(215,54,1)
(212,200,1)
(156,141,1)
(99,47,1)
(167,71,1)
(76,108,1)
(18,17,1)
(65,180,1)
(161,25,1)
(84,54,1)
(102,163,1)
(63,4,1)
(213,211,1)
(105,21,1)
(100,142,1)
(223,192,1)
(79,172,1)
(0,143,1)
(76,200,1)
(190,148,1)
(122,60,1)
(68,86,1)
(67,196,1)
(8,20,1)
(148,2,1)
(218,89,1)
(193,161,1)
(51,178,1)
(114,57,1)
(36,33,1)
(162,82,1)
(9,26,1)
(160,193,1)
(81,36,1)
(140,12,1)
(3,65,1)
(202,4,1)
(66,147,1)
(61,99,1)
(149,128,1)
(109,16,1)
(43,201,1)
(40,82,1)
(220,57,1)
(53,32,1)
(193,161,2)
(68,51,2)
(65,148,2)
(0,116,2)
(69,148,2)
(153,160,2)
(152,215,2)
(22,148,2)
(144,109,2)
(18,154,2)
(178,148,2)
(220,57,2)
(4,200,2)
(86,51,2)
(30,82,2)
(13,103,2)
(125,160,2)
(52,102,2)
(108,4,2)
(33,57,2)
(40,82,2)
(82,140,2)
(210,142,2)
(156,223,2)
(229,18,2)
(165,0,2)
(176,4,2)
(51,82,2)
(209,51,2)
(219,215,2)
(126,47,2)
(50,215,2)
(133,51,2)
(220,142,2)
(218,89,2)
(138,4,2)
(20,51,2)
(107,215,2)
(43,74,2)
(0,160,2)
(100,142,2)
(14,51,2)
(154,215,2)
(54,28,2)
(29,54,2)
(121,51,2)
(76,200,2)
(41,89,2)
(13,205,2)
(109,154,2)
(52,51,2)
(116,82,2)
(131,18,2)
(55,4,2)
(28,142,2)
(29,28,2)
(172,215,2)
(225,205,2)
(230,51,2)
(33,43,2)
(25,51,2)
(109,1,2)
(186,142,2)
(180,148,2)
(87,47,2)
(161,51,2)
(189,1,2)
(54,142,2)
(184,1,2)
(93,215,2)
(120,4,2)
(11,51,2)
(143,160,2)
(162,82,2)
(1,18,2)
(26,51,2)
(169,215,2)
(126,200,2)
(98,4,2)
(89,37,2)
(119,162,2)
(45,51,2)
(62,51,2)
(40,0,2)
(184,85,2)
(70,142,2)
(193,51,2)
(49,142,2)
(147,51,2)
(126,4,2)
(33,74,2)
(96,51,2)
(101,205,2)
(3,148,2)
(21,142,2)
(162,77,2)
(151,31,2)
(160,51,2)
(43,57,2)
(57,40,2)
(76,47,2)
(209,8,2)
(217,18,2)
(28,220,2)
(173,51,2)
(111,54,2)
(27,51,2)
(215,142,2)
(118,205,2)
(82,148,2)
(85,1,2)
(116,160,2)
(198,205,2)
(149,0,2)
(155,0,2)
(35,43,2)
(105,142,2)
(187,51,2)
(161,15,2)
(128,0,2)
(205,215,2)
(90,51,2)
(12,148,2)
(103,205,2)
(18,215,2)
(38,215,2)
(140,148,2)
(156,141,2)
(1,131,2)
(9,51,2)
(150,36,2)
(114,0,2)
(51,148,2)
(92,142,2)
(102,51,2)
(220,105,2)
(79,215,2)
(50,28,2)
(200,104,2)
(154,107,2)
(34,142,2)
(30,77,2)
(137,148,2)
(223,51,2)
(157,41,2)
(193,9,2)
(76,4,2)
(8,51,2)
(146,142,2)
(148,13,2)
(60,67,2)
(44,215,2)
(13,198,2)
(30,162,2)
(161,25,2)
(144,184,2)
(17,215,2)
(57,0,2)
(127,51,2)
(2,205,2)
(66,51,2)
(215,54,2)
(46,1,2)
(10,160,2)
(23,1,2)
(202,4,2)
(132,0,2)
(148,205,2)
(141,51,2)
(222,51,2)
(142,57,2)
(215,29,2)
(221,166,2)
(131,154,2)
(160,193,2)
(104,151,2)
(190,148,2)
(42,148,2)
(1,215,2)
(163,51,2)
(84,54,2)
(192,51,2)
(130,0,2)
(156,51,2)
(142,0,2)
(16,1,2)
(193,82,2)
(144,157,2)
-----------------------------------
(0,listen(listenSocket, LISTEN_BACKLOG)
(1,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(2,NO_ERROR)
(3,SOCK_STREAM)
(4,data < 100)
(5,"")
(6,)
(7,)
(8,service.sin_addr)
(9,sizeof(service)
(10,LISTEN_BACKLOG)
(11,break;)
(12,IPPROTO_TCP)
(13,WSAStartup(MAKEWORD(2,2)
(14,AF_INET)
(15,struct sockaddr*)
(16,tempInt)
(17,SHRT_MAX)
(18,tempInt > SHRT_MAX)
(19,0)
(20,sin_addr)
(21,1)
(22,1)
(23,data)
(24,100)
(25,&service)
(26,service)
(27,service)
(28,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(29,recvResult == 0)
(30,CLOSE_SOCKET(listenSocket)
(31,&data)
(32,data)
(33,CLOSE_SOCKET(acceptSocket)
(34,break;)
(35,acceptSocket)
(36,wsaDataInit)
(37,&data)
(38,inputBuffer)
(39,if (acceptSocket != INVALID_SOCKET)
(40,accept(listenSocket, NULL, NULL)
(41,*dataPtr1)
(42,wsaDataInit = 1)
(43,acceptSocket != INVALID_SOCKET)
(44,recvResult)
(45,service)
(46,1)
(47,dest[100] = "")
(48,dataPtr1)
(49,CHAR_ARRAY_SIZE)
(50,inputBuffer[recvResult])
(51,listenSocket == INVALID_SOCKET)
(52,service.sin_port = htons(TCP_PORT)
(53,100)
(54,recvResult == SOCKET_ERROR)
(55,data)
(56,if (listenSocket == INVALID_SOCKET)
(57,acceptSocket = accept(listenSocket, NULL, NULL)
(58,acceptSocket)
(59,data)
(60,source[100-1])
(61,\\\'A\\\')
(62,INADDR_ANY)
(63,dest)
(64,data)
(65,AF_INET)
(66,sin_family)
(67,100-1)
(68,service.sin_port)
(69,listenSocket)
(70,inputBuffer)
(71,dataPtr2)
(72,wsaData)
(73,data)
(74,acceptSocket = INVALID_SOCKET)
(75,tempInt)
(76,memcpy(dest, source, data)
(77,listenSocket = INVALID_SOCKET)
(78,source)
(79,inputBuffer)
(80,INVALID_SOCKET)
(81,dataPtr1)
(82,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(83,dataPtr2)
(84,recvResult)
(85,-1)
(86,sin_port)
(87,printLine(dest)
(88,dest)
(89,*dataPtr1 = &data)
(90,service.sin_addr.s_addr = INADDR_ANY)
(91,if (WSAStartup(MAKEWORD(2,2)
(92,recvResult)
(93,\\\'\\\\0\\\')
(94,data)
(95,if (bind(listenSocket, (struct sockaddr*)
(96,s_addr)
(97,if (data < 100)
(98,\\\'\\\\0\\\')
(99,source)
(100,recvResult)
(101,2)
(102,htons(TCP_PORT)
(103,MAKEWORD(2,2)
(104,*dataPtr2)
(105,CHAR_ARRAY_SIZE - 1)
(106,listenSocket)
(107,atoi(inputBuffer)
(108,data)
(109,data = tempInt)
(110,if (wsaDataInit)
(111,0)
(112,)
(113,)
(114,acceptSocket)
(115,acceptSocket)
(116,listen(listenSocket, LISTEN_BACKLOG)
(117,)
(118,2)
(119,listenSocket)
(120,source)
(121,service)
(122,\\\'\\\\0\\\')
(123,source[100-1] = \\\'\\\\0\\\')
(124,data)
(125,listenSocket)
(126,dest[data])
(127,SOCKET_ERROR)
(128,acceptSocket)
(129,)
(130,SOCKET_ERROR)
(131,tempInt < SHRT_MIN)
(132,NULL)
(133,0)
(134,)
(135,recvResult)
(136,100)
(137,break;)
(138,dest)
(139,)
(140,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(141,&service)
(142,acceptSocket == SOCKET_ERROR)
(143,SOCKET_ERROR)
(144,*dataPtr1 = data)
(145,data)
(146,SOCKET_ERROR)
(147,service)
(148,WSAStartup(MAKEWORD(2,2)
(149,listenSocket)
(150,WSACleanup()
(151,*dataPtr2 = &data)
(152,tempInt)
(153,break;)
(154,tempInt = atoi(inputBuffer)
(155,NULL)
(156,memset(&service, 0, sizeof(service)
(157,data = *dataPtr1)
(158,if (listen(listenSocket, LISTEN_BACKLOG)
(159,)
(160,bind(listenSocket, (struct sockaddr*)
(161,(struct sockaddr*)
(162,listenSocket != INVALID_SOCKET)
(163,TCP_PORT)
(164,wsaDataInit)
(165,break;)
(166,100-1)
(167,data)
(168,data)
(169,inputBuffer[recvResult] = \\\'\\\\0\\\')
(170,dataPtr1)
(171,)
(172,tempInt)
(173,service.sin_family = AF_INET)
(174,dataPtr2)
(175,INVALID_SOCKET)
(176,dest[data] = \\\'\\\\0\\\')
(177,)
(178,INVALID_SOCKET)
(179,)
(180,listenSocket)
(181,INVALID_SOCKET)
(182,listenSocket)
(183,)
(184,data = -1)
(185,data = 0)
(186,acceptSocket)
(187,listenSocket)
(188,listenSocket)
(189,data)
(190,wsaDataInit)
(191,if (listenSocket != INVALID_SOCKET)
(192,service)
(193,bind(listenSocket, (struct sockaddr*)
(194,)
(195,if (acceptSocket == SOCKET_ERROR)
(196,1)
(197,)
(198,&wsaData)
(199,dataPtr1)
(200,data = *dataPtr2)
(201,INVALID_SOCKET)
(202,dest)
(203,wsaDataInit)
(204,RET)
(205,0)
(206,acceptSocket)
(207,service)
(208,)
(209,service.sin_addr.s_addr)
(210,0)
(211,0)
(212,dest)
(213,wsaDataInit = 0)
(214,1)
(215,recvResult == SOCKET_ERROR || recvResult == 0)
(216,data)
(217,tempInt)
(218,*dataPtr1)
(219,break;)
(220,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(221,memset(source, \\\'A\\\', 100-1)
(222,service)
(223,sizeof(service)
(224,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(225,wsaData)
(226,if (recvResult == SOCKET_ERROR || recvResult == 0)
(227,source)
(228,)
(229,SHRT_MIN)
(230,service.sin_family)
(231,inputBuffer)
(232,do)
(233,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^