-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_21_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_21_bad(){    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_strncpy_21_bad()
CWE194_Unexpected_Sign_Extension__rand_strncpy_21_bad
{    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(10,42,0)
(11,32,0)
(4,1,0)
(9,24,0)
(3,1,0)
(36,4,0)
(29,20,0)
(19,2,0)
(33,4,0)
(45,9,0)
(14,30,0)
(8,32,0)
(42,40,0)
(22,45,0)
(39,40,0)
(43,25,0)
(46,2,0)
(27,43,0)
(24,1,0)
(32,20,0)
(1,25,0)
(37,32,0)
(42,1,0)
(28,34,0)
(47,25,0)
(31,45,0)
(2,25,0)
(16,1,0)
(43,27,0)
(9,45,0)
(23,34,0)
(13,4,0)
(17,1,0)
(6,33,0)
(27,2,0)
(41,43,0)
(34,25,0)
(35,30,0)
(5,1,0)
(33,29,0)
(15,33,0)
(33,43,0)
(7,24,0)
(32,4,0)
(32,43,0)
(26,42,0)
(30,43,0)
(12,27,0)
(5,4,0)
(0,9,0)
(44,40,0)
(38,29,0)
(40,42,0)
(21,5,0)
(42,40,1)
(26,10,1)
(27,12,1)
(36,43,1)
(10,4,1)
(32,4,1)
(12,41,1)
(27,2,1)
(33,43,1)
(33,6,1)
(5,4,1)
(33,4,1)
(29,38,1)
(43,27,1)
(2,46,1)
(4,13,1)
(37,30,1)
(32,8,1)
(7,9,1)
(24,7,1)
(21,30,1)
(34,28,1)
(40,39,1)
(30,35,1)
(46,19,1)
(0,42,1)
(9,45,1)
(39,44,1)
(15,32,1)
(28,23,1)
(5,21,1)
(13,36,1)
(30,43,1)
(31,22,1)
(14,24,1)
(38,33,1)
(35,14,1)
(45,31,1)
(32,43,1)
(11,37,1)
(6,15,1)
(23,2,1)
(18,5,1)
(21,29,1)
(22,0,1)
(8,11,1)
(41,34,1)
(44,26,1)
(33,4,2)
(29,30,2)
(5,4,2)
(38,30,2)
(37,30,2)
(42,40,2)
(27,2,2)
(33,30,2)
(33,43,2)
(11,30,2)
(32,43,2)
(32,30,2)
(43,27,2)
(15,30,2)
(9,45,2)
(8,30,2)
(32,4,2)
(6,30,2)
(30,43,2)
-----------------------------------
(0,source)
(1,)
(2,data = 0)
(3,dest)
(4,dest[100] = "")
(5,printLine(dest)
(6,data)
(7,\\\'\\\\0\\\')
(8,data)
(9,source[100-1])
(10,source)
(11,source)
(12,data)
(13,"")
(14,data)
(15,dest)
(16,if (data < 100)
(17,source)
(18,RET)
(19,data)
(20,)
(21,dest)
(22,100)
(23,badStatic)
(24,source[100-1] = \\\'\\\\0\\\')
(25,)
(26,\\\'A\\\')
(27,badSource(data)
(28,1)
(29,dest[data] = \\\'\\\\0\\\')
(30,data < 100)
(31,1)
(32,strncpy(dest, source, data)
(33,dest[data])
(34,badStatic = 1)
(35,100)
(36,dest)
(37,dest)
(38,\\\'\\\\0\\\')
(39,1)
(40,100-1)
(41,data)
(42,memset(source, \\\'A\\\', 100-1)
(43,data = badSource(data)
(44,100)
(45,100-1)
(46,0)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^