-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad()
{
    goto sink;
sink:
    {
        char inputBuffer[CHAR_ARRAY_SIZE];
        double doubleNumber = 0;
        /* Enter: 1e-50, result should be 0.0 (for bad case)
         *
         * Note: alternate input
         * 999999999999999999999999999999999999999999999999999999999999999
         */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Read a double */
            doubleNumber = atof(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
        /* FLAW: should not cast without checking if conversion is safe */
        printFloatLine((float)doubleNumber);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
11,12
12,13
12,14
14,15
14,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
26,29
27,28
27,29
28,29
28,30
28,31
28,32
29,30
31,32
33,34
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
63,64
-----nextToken-----
2,4,7,9,13,15,18,21,23,25,30,32,34,36,38,43,46,48,53,54,58,61,62,64
-----computeFrom-----
27,28
27,29
41,42
41,43
-----guardedBy-----
32,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad(){    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad
{    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }}
goto sink;
sink
sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }
sink
{        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Read a double */            doubleNumber = atof(inputBuffer);        }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(4,15,0)
(22,23,0)
(19,26,0)
(26,25,0)
(24,0,0)
(1,25,0)
(28,9,0)
(0,24,0)
(8,11,0)
(7,8,0)
(8,7,0)
(8,26,0)
(13,28,0)
(8,16,0)
(16,8,0)
(25,26,0)
(16,15,0)
(18,11,0)
(5,24,0)
(12,15,0)
(21,15,0)
(14,0,0)
(6,24,0)
(20,24,0)
(17,23,0)
(11,15,0)
(15,23,0)
(26,2,0)
(10,8,0)
(27,11,0)
(0,14,1)
(14,24,1)
(26,25,1)
(19,0,1)
(6,11,1)
(8,11,1)
(16,8,1)
(3,16,1)
(24,20,1)
(8,7,1)
(10,26,1)
(25,1,1)
(8,10,1)
(1,19,1)
(18,22,1)
(11,27,1)
(13,0,1)
(5,6,1)
(8,26,1)
(28,13,1)
(20,5,1)
(10,28,1)
(0,24,1)
(27,18,1)
(16,8,2)
(25,0,2)
(1,0,2)
(26,25,2)
(8,11,2)
(26,0,2)
(8,7,2)
(0,24,2)
(8,26,2)
(28,0,2)
(13,0,2)
(19,0,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,inputBuffer)
(2,)
(3,RET)
(4,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,CHAR_ARRAY_SIZE)
(6,inputBuffer)
(7,float)
(8,(float)
(9,)
(10,doubleNumber)
(11,doubleNumber = 0)
(12,inputBuffer)
(13,"fgets()
(14,NULL)
(15,)
(16,printFloatLine((float)
(17,sink:)
(18,doubleNumber)
(19,doubleNumber)
(20,stdin)
(21,doubleNumber)
(22,goto sink;)
(23,)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,atof(inputBuffer)
(26,doubleNumber = atof(inputBuffer)
(27,0)
(28,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^