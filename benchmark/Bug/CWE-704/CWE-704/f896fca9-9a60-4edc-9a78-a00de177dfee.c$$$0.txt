-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1; /* true */
    data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,59,62,63,68,71,72,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
60,61
60,62
65,66
65,67
69,70
69,71
-----guardedBy-----
33,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_bad(){    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_bad
{    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1;
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal
1
data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data);
data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data)
data
data
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data)
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource
CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(12,36,0)
(32,17,0)
(31,33,0)
(39,10,0)
(14,6,0)
(14,17,0)
(22,7,0)
(29,7,0)
(8,24,0)
(45,36,0)
(22,14,0)
(2,14,0)
(41,39,0)
(19,12,0)
(24,10,0)
(28,39,0)
(36,12,0)
(34,31,0)
(10,24,0)
(44,0,0)
(13,10,0)
(10,33,0)
(17,32,0)
(32,10,0)
(42,14,0)
(30,32,0)
(17,20,0)
(38,33,0)
(2,6,0)
(0,10,0)
(11,36,0)
(3,6,0)
(15,31,0)
(43,0,0)
(16,22,0)
(7,6,0)
(12,14,0)
(21,14,0)
(42,6,0)
(17,14,0)
(22,0,0)
(9,42,0)
(36,10,0)
(5,37,0)
(35,33,0)
(4,12,0)
(37,33,0)
(24,37,0)
(0,22,0)
(27,2,0)
(1,37,0)
(20,17,0)
(12,6,0)
(11,45,1)
(39,10,1)
(7,29,1)
(44,43,1)
(18,2,1)
(2,27,1)
(1,5,1)
(36,10,1)
(10,24,1)
(9,7,1)
(30,21,1)
(29,22,1)
(14,17,1)
(36,11,1)
(18,39,1)
(17,32,1)
(15,34,1)
(16,12,1)
(34,37,1)
(32,30,1)
(42,9,1)
(37,1,1)
(8,13,1)
(24,8,1)
(0,10,1)
(4,14,1)
(21,39,1)
(22,0,1)
(27,42,1)
(22,14,1)
(39,28,1)
(13,31,1)
(45,19,1)
(31,15,1)
(41,10,1)
(19,4,1)
(2,14,1)
(17,20,1)
(0,44,1)
(12,14,1)
(42,14,1)
(24,37,1)
(43,16,1)
(32,10,1)
(28,41,1)
(12,36,1)
(7,39,2)
(12,36,2)
(32,10,2)
(39,10,2)
(17,32,2)
(27,39,2)
(17,20,2)
(10,24,2)
(29,39,2)
(19,39,2)
(24,37,2)
(4,39,2)
(0,10,2)
(22,0,2)
(36,10,2)
(42,39,2)
(11,39,2)
(30,39,2)
(2,39,2)
(0,39,2)
(16,39,2)
(32,39,2)
(36,39,2)
(12,14,2)
(2,14,2)
(44,39,2)
(14,17,2)
(14,39,2)
(22,14,2)
(12,39,2)
(22,39,2)
(43,39,2)
(9,39,2)
(42,14,2)
(45,39,2)
(21,39,2)
(17,39,2)
-----------------------------------
(0,data-1)
(1,0)
(2,free(dataBuffer)
(3,dataBuffer)
(4,dataBuffer)
(5,data)
(6,)
(7,dataBuffer[data-1] = '\\\\0')
(8,data)
(9,dataBuffer)
(10,data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data)
(11,1)
(12,memset(dataBuffer, \'A\', data-1)
(13,data)
(14,* dataBuffer = (char *)
(15,1)
(16,dataBuffer)
(17,(char *)
(18,RET)
(19,'A')
(20,char *)
(21,dataBuffer)
(22,dataBuffer[data-1])
(23,memset(dataBuffer, 'A', data-1)
(24,CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badSource(data)
(25,\'A\')
(26,dataBuffer[data-1] = \'\\\\0\')
(27,dataBuffer)
(28,100)
(29,'\\\\0')
(30,data)
(31,CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal = 1)
(32,malloc(data)
(33,)
(34,CWE194_Unexpected_Sign_Extension__fscanf_malloc_22_badGlobal)
(35,if (data < 100)
(36,data-1)
(37,data = 0)
(38,data)
(39,data < 100)
(40,\'\\\\0\')
(41,data)
(42,printLine(dataBuffer)
(43,data)
(44,1)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^