-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,43,44,48,50,51,55,57,60,62,66,68,73,75,79,81,82,85,86,91,94,95,96,100,102,106,108
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
64,65
64,66
83,84
83,85
88,89
88,90
92,93
92,94
-----guardedBy-----
43,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_15_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(19,3,0)
(20,3,0)
(7,55,0)
(12,21,0)
(56,13,0)
(28,36,0)
(31,49,0)
(30,31,0)
(39,21,0)
(9,3,0)
(17,49,0)
(24,4,0)
(4,13,0)
(53,50,0)
(34,39,0)
(44,23,0)
(40,16,0)
(10,36,0)
(50,31,0)
(7,1,0)
(36,39,0)
(46,18,0)
(29,49,0)
(8,21,0)
(50,18,0)
(38,21,0)
(18,2,0)
(44,39,0)
(52,23,0)
(48,3,0)
(4,18,0)
(41,3,0)
(33,39,0)
(1,7,0)
(50,40,0)
(49,31,0)
(8,39,0)
(23,18,0)
(35,23,0)
(27,44,0)
(54,2,0)
(49,17,0)
(4,31,0)
(11,8,0)
(26,21,0)
(37,48,0)
(39,40,0)
(23,44,0)
(30,18,0)
(6,4,0)
(23,31,0)
(25,30,0)
(49,29,0)
(13,39,0)
(40,50,0)
(5,31,0)
(51,18,0)
(40,39,0)
(13,38,0)
(45,2,0)
(31,3,0)
(47,44,0)
(43,30,0)
(34,21,0)
(22,38,0)
(32,1,0)
(14,34,0)
(16,40,0)
(44,21,0)
(15,2,0)
(13,4,0)
(42,18,1)
(52,35,1)
(41,31,1)
(32,36,1)
(49,29,1)
(23,18,1)
(37,42,1)
(27,36,1)
(35,47,1)
(25,9,1)
(13,4,1)
(39,40,1)
(30,18,1)
(50,18,1)
(13,39,1)
(38,22,1)
(25,41,1)
(24,56,1)
(8,39,1)
(31,49,1)
(40,16,1)
(4,6,1)
(47,27,1)
(43,25,1)
(23,31,1)
(17,5,1)
(44,39,1)
(18,46,1)
(50,31,1)
(23,52,1)
(30,43,1)
(6,24,1)
(48,37,1)
(50,53,1)
(1,32,1)
(56,44,1)
(40,50,1)
(28,10,1)
(44,23,1)
(34,14,1)
(0,30,1)
(36,39,1)
(30,31,1)
(34,39,1)
(4,31,1)
(46,51,1)
(22,13,1)
(53,33,1)
(36,28,1)
(11,38,1)
(9,48,1)
(5,42,1)
(14,8,1)
(7,1,1)
(4,18,1)
(10,39,1)
(33,30,1)
(49,17,1)
(27,7,1)
(0,34,1)
(8,11,1)
(13,4,2)
(27,30,2)
(39,30,2)
(36,39,2)
(44,23,2)
(28,30,2)
(22,30,2)
(8,30,2)
(40,16,2)
(5,42,2)
(10,30,2)
(6,30,2)
(7,1,2)
(30,31,2)
(31,42,2)
(17,42,2)
(39,40,2)
(47,30,2)
(11,30,2)
(8,39,2)
(37,42,2)
(40,50,2)
(48,42,2)
(23,31,2)
(13,39,2)
(24,30,2)
(4,30,2)
(34,39,2)
(36,30,2)
(38,30,2)
(1,36,2)
(13,30,2)
(44,30,2)
(7,36,2)
(4,31,2)
(50,18,2)
(9,42,2)
(31,49,2)
(52,30,2)
(50,30,2)
(40,30,2)
(49,42,2)
(41,42,2)
(50,31,2)
(49,17,2)
(23,30,2)
(30,18,2)
(4,18,2)
(32,36,2)
(44,39,2)
(23,18,2)
(49,29,2)
(34,30,2)
(53,30,2)
(56,30,2)
(14,30,2)
(33,30,2)
(35,30,2)
-----------------------------------
(0,RET)
(1,-1)
(2,)
(3,)
(4,data-1)
(5,data)
(6,1)
(7,exit(-1)
(8,printLine(dataBuffer)
(9,break;)
(10,dataBuffer)
(11,dataBuffer)
(12,if (dataBuffer == NULL)
(13,dataBuffer[data-1])
(14,dataBuffer)
(15,switch(6)
(16,char *)
(17,RAND32()
(18,data = 0)
(19,default:)
(20,case 6:)
(21,)
(22,\\\'\\\\0\\\')
(23,data-1)
(24,data)
(25,data)
(26,dataBuffer)
(27,dataBuffer)
(28,NULL)
(29,short)
(30,data < 100)
(31,data = (short)
(32,1)
(33,dataBuffer)
(34,free(dataBuffer)
(35,data)
(36,dataBuffer == NULL)
(37,"Benign, fixed string")
(38,dataBuffer[data-1] = \\\'\\\\0\\\')
(39,* dataBuffer = (char *)
(40,(char *)
(41,break;)
(42,6)
(43,100)
(44,memset(dataBuffer, \\\'A\\\', data-1)
(45,data)
(46,0)
(47,\\\'A\\\')
(48,printLine("Benign, fixed string")
(49,(short)
(50,malloc(data)
(51,data)
(52,1)
(53,data)
(54,if (data < 100)
(55,)
(56,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^