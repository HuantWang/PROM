-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_06_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
75,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,55,58,60,65,66,70,72,76,77,79,83,85
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
-----guardedBy-----
40,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_06_bad(){    short data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_06_bad()
CWE197_Numeric_Truncation_Error__short_fgets_06_bad
{    short data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(9,16,0)
(15,14,0)
(34,26,0)
(23,29,0)
(24,9,0)
(38,32,0)
(30,38,0)
(35,29,0)
(24,36,0)
(41,39,0)
(22,19,0)
(2,34,0)
(16,9,0)
(9,24,0)
(16,18,0)
(38,24,0)
(29,14,0)
(28,16,0)
(40,32,0)
(34,32,0)
(39,37,0)
(4,41,0)
(38,39,0)
(5,24,0)
(39,41,0)
(27,9,0)
(8,26,0)
(21,0,0)
(11,38,0)
(20,19,0)
(0,33,0)
(9,27,0)
(14,29,0)
(17,18,0)
(42,37,0)
(32,38,0)
(13,37,0)
(29,18,0)
(31,39,0)
(38,11,0)
(26,37,0)
(3,7,0)
(10,0,0)
(25,18,0)
(32,26,0)
(6,3,0)
(18,0,0)
(12,29,0)
(28,5,1)
(23,12,1)
(32,38,1)
(19,22,1)
(40,3,1)
(4,31,1)
(29,23,1)
(14,15,1)
(15,29,1)
(3,6,1)
(5,14,1)
(38,24,1)
(9,16,1)
(16,18,1)
(29,18,1)
(40,24,1)
(14,29,1)
(38,39,1)
(34,32,1)
(6,14,1)
(16,28,1)
(20,39,1)
(24,9,1)
(38,11,1)
(18,25,1)
(25,17,1)
(35,18,1)
(40,19,1)
(22,20,1)
(30,40,1)
(2,32,1)
(41,4,1)
(1,34,1)
(9,27,1)
(39,41,1)
(17,19,1)
(38,30,1)
(12,35,1)
(34,2,1)
(38,24,2)
(6,14,2)
(32,38,2)
(28,14,2)
(35,19,2)
(18,19,2)
(39,41,2)
(38,11,2)
(34,32,2)
(23,19,2)
(16,14,2)
(29,18,2)
(24,9,2)
(16,18,2)
(29,19,2)
(14,29,2)
(9,27,2)
(12,19,2)
(3,14,2)
(24,14,2)
(9,16,2)
(14,19,2)
(5,14,2)
(17,19,2)
(38,39,2)
(9,14,2)
(15,19,2)
(25,19,2)
-----------------------------------
(0,)
(1,RET)
(2,charData)
(3,printLine("fgets()
(4,1)
(5,data)
(6,"fgets()
(7,)
(8,charData)
(9,(short)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,char)
(12,CHAR_ARRAY_SIZE)
(13,if(STATIC_CONST_FIVE==5)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,NULL)
(16,atoi(inputBuffer)
(17,inputBuffer)
(18,inputBuffer[CHAR_ARRAY_SIZE] = "")
(19,STATIC_CONST_FIVE==5)
(20,STATIC_CONST_FIVE)
(21,inputBuffer)
(22,5)
(23,stdin)
(24,data = (short)
(25,"")
(26,)
(27,short)
(28,inputBuffer)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,data)
(31,data)
(32,charData = (char)
(33,)
(34,printHexCharLine(charData)
(35,inputBuffer)
(36,)
(37,)
(38,(char)
(39,data = -1)
(40,charData)
(41,-1)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^