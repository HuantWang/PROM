-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
93,94
93,95
93,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
118,119
118,120
119,120
119,121
120,121
123,124
123,125
124,125
125,126
125,127
125,128
125,129
126,127
128,129
130,131
132,133
134,135
135,136
135,137
136,137
136,138
137,138
139,140
142,143
143,144
143,145
144,145
146,147
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,56,61,62,67,68,70,74,76,80,81,85,87,89,92,94,96,98,102,104,105,107,108,113,115,116,117,121,122,127,129,131,133,138,140,141,145,147
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
106,107
106,108
110,111
110,112
114,115
114,116
119,120
119,121
135,136
135,137
-----guardedBy-----
40,56
121,140
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(3,26,0)
(9,3,0)
(55,26,0)
(59,14,0)
(52,38,0)
(8,26,0)
(16,1,0)
(21,34,0)
(27,37,0)
(33,19,0)
(0,36,0)
(58,33,0)
(19,26,0)
(42,45,0)
(46,37,0)
(11,24,0)
(18,48,0)
(70,39,0)
(60,9,0)
(22,1,0)
(19,17,0)
(1,22,0)
(14,0,0)
(12,17,0)
(33,0,0)
(25,33,0)
(49,13,0)
(41,28,0)
(38,9,0)
(0,14,0)
(71,3,0)
(4,56,0)
(56,9,0)
(2,48,0)
(31,39,0)
(63,30,0)
(54,0,0)
(72,9,0)
(23,34,0)
(15,30,0)
(13,68,0)
(51,35,0)
(24,48,0)
(39,22,0)
(30,9,0)
(6,50,0)
(33,26,0)
(61,32,0)
(74,19,0)
(48,24,0)
(45,63,0)
(48,9,0)
(28,34,0)
(20,35,0)
(35,28,0)
(10,1,0)
(5,35,0)
(50,13,0)
(34,26,0)
(53,63,0)
(63,45,0)
(7,50,0)
(32,47,0)
(56,38,0)
(67,38,0)
(57,22,0)
(50,22,0)
(40,28,0)
(22,3,0)
(73,39,0)
(62,9,0)
(43,35,0)
(64,45,0)
(37,22,0)
(66,25,0)
(29,5,0)
(50,38,0)
(14,28,0)
(65,25,0)
(69,24,0)
(39,38,0)
(17,19,0)
(39,68,0)
(35,5,0)
(52,22,1)
(48,24,1)
(27,30,1)
(63,45,1)
(73,31,1)
(51,28,1)
(57,33,1)
(50,38,1)
(7,6,1)
(18,38,1)
(65,32,1)
(39,70,1)
(35,28,1)
(28,40,1)
(56,4,1)
(56,38,1)
(43,51,1)
(42,53,1)
(64,42,1)
(46,27,1)
(50,7,1)
(37,46,1)
(58,25,1)
(41,19,1)
(12,74,1)
(2,18,1)
(50,22,1)
(22,1,1)
(13,49,1)
(0,14,1)
(31,37,1)
(24,69,1)
(19,17,1)
(30,15,1)
(61,5,1)
(6,39,1)
(35,20,1)
(59,54,1)
(10,57,1)
(16,10,1)
(65,0,1)
(33,0,1)
(20,43,1)
(49,50,1)
(39,22,1)
(45,64,1)
(69,11,1)
(32,61,1)
(70,73,1)
(5,29,1)
(5,35,1)
(33,19,1)
(54,5,1)
(4,37,1)
(37,22,1)
(25,66,1)
(40,41,1)
(11,2,1)
(39,38,1)
(66,65,1)
(67,52,1)
(1,16,1)
(53,48,1)
(29,35,1)
(33,58,1)
(38,67,1)
(4,13,1)
(14,59,1)
(17,12,1)
(15,63,1)
(44,56,1)
(14,28,1)
(19,17,2)
(35,28,2)
(39,22,2)
(22,1,2)
(56,38,2)
(0,5,2)
(50,37,2)
(50,22,2)
(48,24,2)
(0,14,2)
(13,37,2)
(14,28,2)
(63,45,2)
(14,5,2)
(5,35,2)
(39,38,2)
(6,37,2)
(61,5,2)
(50,38,2)
(39,37,2)
(31,37,2)
(32,5,2)
(54,5,2)
(37,22,2)
(59,5,2)
(73,37,2)
(33,19,2)
(7,37,2)
(33,0,2)
(49,37,2)
(70,37,2)
-----------------------------------
(0,data = atoi(inputBuffer)
(1,myUnion.unionSecond)
(2,\\\'A\\\')
(3,)
(4,dest)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,dest)
(7,data)
(8,data)
(9,)
(10,myUnion)
(11,100)
(12,1)
(13,dest[data] = \\\'\\\\0\\\')
(14,atoi(inputBuffer)
(15,\\\'\\\\0\\\')
(16,unionSecond)
(17,-1)
(18,source)
(19,data = -1)
(20,stdin)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,data = myUnion.unionSecond)
(23,inputBuffer)
(24,100-1)
(25,myUnion.unionFirst)
(26,)
(27,data)
(28,inputBuffer[CHAR_ARRAY_SIZE] = "")
(29,NULL)
(30,source[100-1] = \\\'\\\\0\\\')
(31,dest)
(32,printLine("fgets()
(33,myUnion.unionFirst = data)
(34,)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,)
(37,data < 100)
(38,dest[100] = "")
(39,strncpy(dest, source, data)
(40,"")
(41,inputBuffer)
(42,100)
(43,CHAR_ARRAY_SIZE)
(44,RET)
(45,100-1)
(46,100)
(47,)
(48,memset(source, \\\'A\\\', 100-1)
(49,\\\'\\\\0\\\')
(50,dest[data])
(51,inputBuffer)
(52,dest)
(53,source)
(54,data)
(55,myUnion)
(56,printLine(dest)
(57,data)
(58,data)
(59,inputBuffer)
(60,source)
(61,"fgets()
(62,if (data < 100)
(63,source[100-1])
(64,1)
(65,myUnion)
(66,unionFirst)
(67,"")
(68,)
(69,1)
(70,data)
(71,data)
(72,dest)
(73,source)
(74,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^