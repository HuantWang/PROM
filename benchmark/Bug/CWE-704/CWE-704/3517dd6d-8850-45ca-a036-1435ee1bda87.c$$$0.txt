-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad()
{
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,7,12,14,17,20,22,24,29,31,33,35,37,42,45,47,52,53,57,60,61,65,67,68
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad(){    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }        break;    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_16_bad
{    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }        break;    }}
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
break;
-----joern-----
(8,20,0)
(21,7,0)
(7,21,0)
(11,3,0)
(8,7,0)
(7,2,0)
(24,17,0)
(25,3,0)
(14,17,0)
(3,30,0)
(13,3,0)
(31,16,0)
(8,17,0)
(10,18,0)
(7,8,0)
(22,31,0)
(26,29,0)
(21,3,0)
(20,15,0)
(2,7,0)
(0,6,0)
(23,15,0)
(9,29,0)
(15,20,0)
(29,6,0)
(19,8,0)
(6,29,0)
(20,12,0)
(28,30,0)
(17,3,0)
(5,29,0)
(4,20,0)
(1,27,1)
(8,17,1)
(9,5,1)
(6,29,1)
(19,31,1)
(0,29,1)
(8,19,1)
(20,15,1)
(7,8,1)
(19,20,1)
(17,24,1)
(23,4,1)
(8,20,1)
(1,28,1)
(4,6,1)
(5,26,1)
(31,22,1)
(6,0,1)
(24,14,1)
(15,23,1)
(26,17,1)
(21,7,1)
(14,27,1)
(28,21,1)
(7,2,1)
(22,6,1)
(29,9,1)
(22,6,2)
(26,27,2)
(14,27,2)
(31,6,2)
(23,6,2)
(9,27,2)
(15,6,2)
(6,29,2)
(19,27,2)
(6,27,2)
(0,27,2)
(28,27,2)
(21,7,2)
(29,27,2)
(4,6,2)
(8,20,2)
(7,27,2)
(8,27,2)
(8,17,2)
(21,27,2)
(17,27,2)
(20,15,2)
(5,27,2)
(7,8,2)
(7,2,2)
(20,6,2)
(24,27,2)
-----------------------------------
(0,NULL)
(1,RET)
(2,int)
(3,)
(4,doubleNumber)
(5,CHAR_ARRAY_SIZE)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,(int)
(8,sqrt(doubleNumber)
(9,stdin)
(10,while(1)
(11,inputBuffer)
(12,)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,doubleNumber)
(15,atof(inputBuffer)
(16,)
(17,doubleNumber = 0)
(18,)
(19,doubleNumber)
(20,doubleNumber = atof(inputBuffer)
(21,printIntLine((int)
(22,"fgets()
(23,inputBuffer)
(24,0)
(25,doubleNumber)
(26,inputBuffer)
(27,1)
(28,break;)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,)
(31,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^