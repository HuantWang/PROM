-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_12_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
79,80
79,81
81,82
82,83
82,84
83,84
83,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,70,73,74,78,80,84,85,87,91,93
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
68,69
68,70
71,72
71,73
-----guardedBy-----
39,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_12_bad(){    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_12_bad()
CWE197_Numeric_Truncation_Error__short_fgets_12_bad
{    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(31,44,0)
(22,30,0)
(24,30,0)
(10,24,0)
(6,9,0)
(23,7,0)
(3,9,0)
(21,37,0)
(20,28,0)
(16,46,0)
(40,30,0)
(13,7,0)
(32,42,0)
(4,11,0)
(7,24,0)
(26,42,0)
(30,12,0)
(15,38,0)
(11,28,0)
(24,7,0)
(45,22,0)
(13,21,0)
(28,11,0)
(42,31,0)
(2,32,0)
(2,43,0)
(27,9,0)
(1,36,0)
(0,37,0)
(24,10,0)
(24,16,0)
(38,9,0)
(9,42,0)
(43,2,0)
(7,21,0)
(32,2,0)
(8,21,0)
(25,32,0)
(33,1,0)
(30,22,0)
(2,16,0)
(19,22,0)
(9,38,0)
(39,31,0)
(17,16,0)
(41,42,0)
(34,24,0)
(16,2,0)
(28,37,0)
(5,31,0)
(18,37,0)
(14,13,0)
(24,28,0)
(24,30,1)
(13,14,1)
(15,9,1)
(42,41,1)
(25,17,1)
(6,42,1)
(32,25,1)
(7,24,1)
(29,13,1)
(1,33,1)
(33,38,1)
(17,38,1)
(16,2,1)
(9,27,1)
(24,16,1)
(13,7,1)
(32,42,1)
(9,42,1)
(34,23,1)
(38,9,1)
(4,20,1)
(24,28,1)
(23,16,1)
(19,40,1)
(2,32,1)
(40,35,1)
(28,11,1)
(11,4,1)
(41,26,1)
(27,3,1)
(14,7,1)
(35,28,1)
(23,1,1)
(45,19,1)
(38,15,1)
(30,22,1)
(22,45,1)
(26,35,1)
(3,6,1)
(23,30,1)
(24,34,1)
(24,10,1)
(2,43,1)
(16,2,2)
(13,7,2)
(28,11,2)
(32,42,2)
(17,38,2)
(42,35,2)
(2,32,2)
(40,35,2)
(2,38,2)
(24,28,2)
(30,22,2)
(6,35,2)
(30,35,2)
(2,43,2)
(41,35,2)
(26,35,2)
(27,35,2)
(22,35,2)
(9,35,2)
(3,35,2)
(38,9,2)
(19,35,2)
(24,30,2)
(45,35,2)
(25,38,2)
(16,38,2)
(15,35,2)
(38,35,2)
(32,38,2)
(24,10,2)
(33,38,2)
(1,38,2)
(24,16,2)
(9,42,2)
(7,24,2)
-----------------------------------
(0,if(globalReturnsTrueOrFalse()
(1,printLine("fgets()
(2,(short)
(3,CHAR_ARRAY_SIZE)
(4,1)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,inputBuffer)
(7,charData = (char)
(8,charData)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,char)
(11,-1)
(12,)
(13,printHexCharLine(charData)
(14,charData)
(15,NULL)
(16,data = (short)
(17,data)
(18,data)
(19,CHAR_MAX)
(20,data)
(21,)
(22,CHAR_MAX-5)
(23,charData)
(24,(char)
(25,inputBuffer)
(26,inputBuffer)
(27,stdin)
(28,data = -1)
(29,RET)
(30,data = CHAR_MAX-5)
(31,)
(32,atoi(inputBuffer)
(33,"fgets()
(34,data)
(35,globalReturnsTrueOrFalse()
(36,)
(37,)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,inputBuffer)
(40,data)
(41,"")
(42,inputBuffer[CHAR_ARRAY_SIZE] = "")
(43,short)
(44,)
(45,5)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^