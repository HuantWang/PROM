-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
47,48
48,49
48,50
50,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
77,78
78,79
80,81
80,82
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
81,91
81,92
81,93
82,83
83,84
83,85
84,85
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
103,104
104,105
104,106
104,107
104,108
105,106
107,108
108,109
111,112
112,113
113,114
115,116
116,117
116,118
117,118
117,119
118,119
121,122
123,124
124,125
124,126
125,126
125,127
126,127
126,128
127,128
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
138,140
139,140
142,143
142,144
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
149,153
150,151
152,153
154,155
154,156
155,156
155,157
156,157
158,159
160,161
161,162
163,164
164,165
165,166
167,168
169,170
171,172
172,173
172,174
173,174
175,176
175,177
175,178
175,179
175,180
176,177
178,179
180,181
182,183
182,184
183,184
187,188
187,189
188,189
188,190
189,190
189,191
190,191
192,193
194,195
194,196
195,196
198,199
200,201
201,202
201,203
202,203
202,204
203,204
205,206
208,209
209,210
209,211
210,211
212,213
212,214
213,214
215,216
217,218
217,219
217,220
218,219
218,220
219,220
219,221
220,221
222,223
224,225
224,226
225,226
227,228
229,230
230,231
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
244,245
244,246
245,246
245,247
246,247
248,249
250,251
251,252
252,253
252,254
253,254
255,256
257,258
258,259
258,260
259,260
260,261
262,263
264,265
264,266
265,266
266,267
266,268
268,269
268,270
270,271
271,272
272,273
274,275
274,276
274,277
274,278
274,279
274,280
275,276
276,277
276,278
278,279
278,280
280,281
282,283
283,284
283,285
285,286
285,287
285,288
287,288
289,290
291,292
292,293
292,294
292,295
292,296
293,294
295,296
298,299
298,300
301,302
302,303
302,304
303,304
303,305
304,305
306,307
306,308
310,311
310,312
311,312
311,313
312,313
315,316
315,317
316,317
317,318
317,319
317,320
317,321
318,319
320,321
322,323
324,325
326,327
327,328
327,329
328,329
328,330
329,330
331,332
334,335
335,336
335,337
336,337
338,339
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,60,62,66,68,71,74,76,79,85,88,90,92,94,98,100,102,106,109,110,114,119,120,122,128,129,130,133,135,140,141,144,146,151,153,157,159,162,166,168,170,174,177,179,181,184,185,186,191,193,196,197,199,204,206,207,211,214,216,221,223,226,228,233,235,240,242,243,247,249,254,256,261,263,267,269,273,277,279,281,284,286,288,290,294,296,297,299,300,305,307,308,309,313,314,319,321,323,325,330,332,333,337,339
-----computeFrom-----
32,33
32,34
83,84
83,85
96,97
96,98
116,117
116,118
124,125
124,126
137,138
137,139
148,149
148,150
172,173
172,174
182,183
182,184
188,189
188,190
189,190
189,191
194,195
194,196
201,202
201,203
209,210
209,211
218,219
218,220
219,220
219,221
224,225
224,226
231,232
231,233
238,239
238,240
245,246
245,247
258,259
258,260
298,299
298,300
302,303
302,304
306,307
306,308
311,312
311,313
327,328
327,329
-----guardedBy-----
247,256
313,332
-----guardedByNegation-----
226,242
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_32_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(117,35,0)
(62,82,0)
(146,141,0)
(43,33,0)
(70,121,0)
(136,27,0)
(67,173,0)
(132,33,0)
(10,120,0)
(41,138,0)
(190,153,0)
(11,199,0)
(30,103,0)
(173,150,0)
(191,27,0)
(169,25,0)
(193,136,0)
(109,144,0)
(155,95,0)
(99,21,0)
(86,25,0)
(188,111,0)
(87,60,0)
(12,41,0)
(142,84,0)
(143,185,0)
(80,95,0)
(78,138,0)
(152,111,0)
(140,174,0)
(167,64,0)
(198,120,0)
(77,143,0)
(174,195,0)
(177,59,0)
(159,152,0)
(131,139,0)
(17,20,0)
(13,183,0)
(181,161,0)
(3,160,0)
(89,9,0)
(2,0,0)
(102,139,0)
(160,59,0)
(5,140,0)
(17,60,0)
(200,171,0)
(189,84,0)
(111,144,0)
(95,183,0)
(141,173,0)
(8,176,0)
(158,40,0)
(98,33,0)
(201,150,0)
(52,190,0)
(4,165,0)
(46,181,0)
(148,23,0)
(184,57,0)
(190,52,0)
(183,95,0)
(95,60,0)
(192,150,0)
(25,107,0)
(78,107,0)
(56,198,0)
(187,198,0)
(137,60,0)
(50,150,0)
(133,130,0)
(171,173,0)
(115,102,0)
(8,136,0)
(105,51,0)
(175,45,0)
(168,121,0)
(22,176,0)
(15,87,0)
(106,153,0)
(143,33,0)
(98,59,0)
(156,20,0)
(69,199,0)
(138,41,0)
(130,150,0)
(16,38,0)
(171,8,0)
(145,56,0)
(76,141,0)
(157,109,0)
(83,190,0)
(174,40,0)
(120,198,0)
(73,151,0)
(58,192,0)
(198,6,0)
(199,11,0)
(161,6,0)
(40,174,0)
(29,121,0)
(82,202,0)
(110,59,0)
(163,111,0)
(14,161,0)
(138,78,0)
(154,161,0)
(95,80,0)
(63,121,0)
(21,25,0)
(34,121,0)
(126,131,0)
(7,42,0)
(48,164,0)
(96,60,0)
(38,107,0)
(32,150,0)
(97,107,0)
(172,160,0)
(6,150,0)
(119,176,0)
(202,0,0)
(122,60,0)
(55,103,0)
(20,17,0)
(8,76,0)
(149,128,0)
(104,110,0)
(59,160,0)
(0,161,0)
(120,201,0)
(19,124,0)
(68,93,0)
(176,44,0)
(136,28,0)
(61,60,0)
(33,121,0)
(186,74,0)
(100,75,0)
(181,75,0)
(197,161,0)
(54,11,0)
(47,202,0)
(84,198,0)
(196,159,0)
(90,78,0)
(141,76,0)
(134,78,0)
(18,41,0)
(153,93,0)
(182,80,0)
(144,60,0)
(111,152,0)
(11,161,0)
(66,102,0)
(36,60,0)
(71,128,0)
(174,140,0)
(190,57,0)
(176,144,0)
(101,74,0)
(75,161,0)
(201,42,0)
(93,153,0)
(127,159,0)
(84,151,0)
(41,107,0)
(147,98,0)
(74,165,0)
(112,201,0)
(194,11,0)
(166,6,0)
(135,38,0)
(65,75,0)
(27,136,0)
(59,60,0)
(153,106,0)
(1,195,0)
(107,60,0)
(190,59,0)
(162,160,0)
(113,121,0)
(116,82,0)
(179,84,0)
(76,192,0)
(152,159,0)
(25,21,0)
(79,110,0)
(38,64,0)
(159,144,0)
(53,150,0)
(173,124,0)
(25,59,0)
(64,60,0)
(124,173,0)
(26,8,0)
(165,60,0)
(178,144,0)
(88,35,0)
(107,25,0)
(203,25,0)
(153,190,0)
(57,190,0)
(84,75,0)
(125,121,0)
(37,76,0)
(123,121,0)
(9,17,0)
(139,60,0)
(94,52,0)
(121,192,0)
(108,199,0)
(139,131,0)
(8,192,0)
(9,35,0)
(72,140,0)
(49,21,0)
(92,73,0)
(170,98,0)
(85,121,0)
(128,198,0)
(31,129,0)
(35,9,0)
(128,75,0)
(81,56,0)
(103,121,0)
(42,201,0)
(118,130,0)
(144,109,0)
(24,121,0)
(128,73,0)
(143,59,0)
(114,87,0)
(202,82,0)
(195,174,0)
(21,99,1)
(188,163,1)
(43,132,1)
(118,133,1)
(76,141,1)
(145,0,1)
(10,187,1)
(107,25,1)
(152,159,1)
(8,136,1)
(95,183,1)
(79,59,1)
(47,11,1)
(177,87,1)
(120,10,1)
(46,73,1)
(203,86,1)
(157,178,1)
(128,198,1)
(3,172,1)
(200,48,1)
(1,140,1)
(94,153,1)
(170,31,1)
(37,130,1)
(98,147,1)
(25,169,1)
(141,146,1)
(153,93,1)
(174,195,1)
(136,27,1)
(2,202,1)
(105,138,1)
(40,158,1)
(173,124,1)
(184,190,1)
(149,84,1)
(30,55,1)
(101,95,1)
(8,76,1)
(191,193,1)
(140,72,1)
(57,190,1)
(170,175,1)
(189,56,1)
(80,182,1)
(174,140,1)
(117,88,1)
(39,136,1)
(57,184,1)
(64,167,1)
(78,90,1)
(143,59,1)
(132,103,1)
(68,83,1)
(141,173,1)
(66,17,1)
(131,126,1)
(193,152,1)
(198,120,1)
(20,156,1)
(99,49,1)
(167,38,1)
(181,46,1)
(120,201,1)
(7,112,1)
(35,117,1)
(170,148,1)
(41,107,1)
(73,92,1)
(175,57,1)
(165,4,1)
(97,57,1)
(46,56,1)
(62,47,1)
(170,39,1)
(86,97,1)
(176,144,1)
(33,43,1)
(156,9,1)
(91,181,1)
(186,101,1)
(84,75,1)
(181,75,1)
(75,65,1)
(55,76,1)
(93,68,1)
(69,54,1)
(71,149,1)
(11,199,1)
(9,89,1)
(98,59,1)
(88,165,1)
(143,33,1)
(26,171,1)
(19,67,1)
(124,19,1)
(110,59,1)
(127,144,1)
(135,16,1)
(31,110,1)
(74,186,1)
(138,78,1)
(65,100,1)
(12,107,1)
(133,201,1)
(183,13,1)
(190,153,1)
(104,79,1)
(148,40,1)
(115,66,1)
(111,144,1)
(8,26,1)
(5,33,1)
(22,119,1)
(200,180,1)
(16,138,1)
(202,82,1)
(56,81,1)
(84,198,1)
(25,59,1)
(13,110,1)
(81,145,1)
(190,52,1)
(138,41,1)
(142,179,1)
(171,200,1)
(4,74,1)
(95,80,1)
(187,8,1)
(49,203,1)
(126,102,1)
(201,42,1)
(92,128,1)
(72,5,1)
(52,94,1)
(134,41,1)
(144,109,1)
(152,111,1)
(114,40,1)
(159,144,1)
(56,198,1)
(158,174,1)
(59,160,1)
(41,18,1)
(0,2,1)
(128,71,1)
(194,75,1)
(27,191,1)
(116,62,1)
(180,143,1)
(180,98,1)
(83,139,1)
(82,116,1)
(15,114,1)
(40,174,1)
(9,35,1)
(190,59,1)
(102,115,1)
(130,118,1)
(119,152,1)
(182,155,1)
(139,131,1)
(159,196,1)
(179,189,1)
(38,107,1)
(38,135,1)
(171,173,1)
(42,7,1)
(48,180,1)
(170,105,1)
(153,106,1)
(199,108,1)
(155,183,1)
(18,12,1)
(169,21,1)
(143,77,1)
(178,64,1)
(77,98,1)
(54,194,1)
(163,159,1)
(195,1,1)
(196,127,1)
(172,177,1)
(89,35,1)
(25,21,1)
(5,39,1)
(176,22,1)
(78,107,1)
(84,142,1)
(160,162,1)
(112,173,1)
(103,30,1)
(146,37,1)
(90,134,1)
(111,188,1)
(162,3,1)
(110,104,1)
(87,15,1)
(100,198,1)
(128,75,1)
(39,176,1)
(108,69,1)
(17,20,1)
(147,170,1)
(8,176,1)
(98,33,1)
(109,157,1)
(3,40,2)
(193,152,2)
(174,140,2)
(40,39,2)
(203,57,2)
(80,110,2)
(115,110,2)
(153,93,2)
(15,40,2)
(72,39,2)
(163,159,2)
(68,110,2)
(79,40,2)
(134,41,2)
(92,56,2)
(196,138,2)
(94,110,2)
(190,153,2)
(120,201,2)
(195,39,2)
(171,173,2)
(198,120,2)
(18,57,2)
(201,42,2)
(152,138,2)
(157,138,2)
(117,110,2)
(98,33,2)
(144,109,2)
(9,35,2)
(107,25,2)
(177,40,2)
(114,40,2)
(22,152,2)
(158,39,2)
(101,110,2)
(9,110,2)
(20,110,2)
(25,59,2)
(109,138,2)
(59,40,2)
(31,110,2)
(71,56,2)
(183,110,2)
(159,138,2)
(142,56,2)
(153,106,2)
(160,40,2)
(128,75,2)
(111,159,2)
(78,41,2)
(84,75,2)
(8,176,2)
(95,183,2)
(119,152,2)
(156,110,2)
(17,20,2)
(190,52,2)
(148,40,2)
(140,39,2)
(84,198,2)
(25,21,2)
(88,110,2)
(57,110,2)
(41,107,2)
(95,80,2)
(184,110,2)
(27,152,2)
(59,160,2)
(189,56,2)
(159,144,2)
(52,110,2)
(64,138,2)
(169,57,2)
(102,110,2)
(77,98,2)
(110,59,2)
(141,173,2)
(90,41,2)
(74,110,2)
(76,141,2)
(86,57,2)
(174,195,2)
(190,110,2)
(136,152,2)
(38,107,2)
(57,190,2)
(40,174,2)
(21,57,2)
(41,57,2)
(155,110,2)
(97,57,2)
(95,110,2)
(138,57,2)
(165,110,2)
(181,75,2)
(139,131,2)
(56,198,2)
(93,110,2)
(105,138,2)
(110,40,2)
(152,111,2)
(175,57,2)
(143,59,2)
(13,110,2)
(139,110,2)
(16,138,2)
(153,110,2)
(48,180,2)
(99,57,2)
(143,98,2)
(136,27,2)
(5,39,2)
(188,159,2)
(172,40,2)
(111,144,2)
(162,40,2)
(128,56,2)
(144,138,2)
(4,110,2)
(179,56,2)
(25,57,2)
(126,110,2)
(186,110,2)
(182,110,2)
(8,136,2)
(84,56,2)
(190,59,2)
(11,199,2)
(89,110,2)
(138,78,2)
(174,39,2)
(191,152,2)
(98,59,2)
(39,138,2)
(127,138,2)
(178,138,2)
(83,110,2)
(49,57,2)
(17,110,2)
(78,107,2)
(38,138,2)
(1,39,2)
(87,40,2)
(152,159,2)
(176,152,2)
(176,144,2)
(128,198,2)
(167,138,2)
(104,40,2)
(8,76,2)
(138,41,2)
(149,56,2)
(107,57,2)
(135,138,2)
(143,33,2)
(202,82,2)
(73,56,2)
(131,110,2)
(173,124,2)
(12,57,2)
(35,110,2)
(66,110,2)
-----------------------------------
(0,source[100-1] = \\\'\\\\0\\\')
(1,wsaData)
(2,\\\'\\\\0\\\')
(3,SOCK_STREAM)
(4,AF_INET)
(5,2)
(6,)
(7,data)
(8,*dataPtr1 = data)
(9,service.sin_addr.s_addr)
(10,dataPtr2)
(11,memset(source, \\\'A\\\', 100-1)
(12,recvResult)
(13,service)
(14,if (data < 100)
(15,1)
(16,inputBuffer)
(17,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(18,SOCKET_ERROR)
(19,data)
(20,inet_addr(IP_ADDRESS)
(21,CHAR_ARRAY_SIZE - 1)
(22,tempInt)
(23,)
(24,inputBuffer)
(25,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(26,data)
(27,-1)
(28,)
(29,connectSocket)
(30,0)
(31,break;)
(32,dataPtr1)
(33,connectSocket = INVALID_SOCKET)
(34,recvResult)
(35,service.sin_addr)
(36,if (WSAStartup(MAKEWORD(2,2)
(37,data)
(38,inputBuffer[recvResult])
(39,0)
(40,WSAStartup(MAKEWORD(2,2)
(41,recvResult == SOCKET_ERROR)
(42,&data)
(43,INVALID_SOCKET)
(44,)
(45,)
(46,dest)
(47,source)
(48,WSACleanup()
(49,CHAR_ARRAY_SIZE)
(50,dataPtr2)
(51,)
(52,sizeof(service)
(53,data)
(54,\\\'A\\\')
(55,wsaDataInit)
(56,data < 100)
(57,connect(connectSocket, (struct sockaddr*)
(58,data)
(59,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(60,)
(61,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(62,100)
(63,wsaDataInit)
(64,inputBuffer[recvResult] = \\\'\\\\0\\\')
(65,"")
(66,service)
(67,dataPtr1)
(68,service)
(69,100)
(70,do)
(71,data)
(72,2)
(73,dest[data] = \\\'\\\\0\\\')
(74,service.sin_family)
(75,dest[100] = "")
(76,data = *dataPtr1)
(77,connectSocket)
(78,recvResult == 0)
(79,connectSocket)
(80,sizeof(service)
(81,100)
(82,100-1)
(83,connectSocket)
(84,strncpy(dest, source, data)
(85,tempInt)
(86,connectSocket)
(87,wsaDataInit = 1)
(88,service)
(89,s_addr)
(90,0)
(91,RET)
(92,\\\'\\\\0\\\')
(93,&service)
(94,service)
(95,memset(&service, 0, sizeof(service)
(96,if (connect(connectSocket, (struct sockaddr*)
(97,recvResult)
(98,connectSocket != INVALID_SOCKET)
(99,1)
(100,dest)
(101,service)
(102,service.sin_port)
(103,wsaDataInit = 0)
(104,INVALID_SOCKET)
(105,break;)
(106,struct sockaddr*)
(107,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(108,1)
(109,atoi(inputBuffer)
(110,connectSocket == INVALID_SOCKET)
(111,tempInt < SHRT_MIN)
(112,dataPtr2)
(113,if (wsaDataInit)
(114,wsaDataInit)
(115,sin_port)
(116,1)
(117,sin_addr)
(118,0)
(119,data)
(120,*dataPtr2)
(121,)
(122,if (connectSocket == INVALID_SOCKET)
(123,if (connectSocket != INVALID_SOCKET)
(124,&data)
(125,service)
(126,TCP_PORT)
(127,tempInt)
(128,dest[data])
(129,)
(130,data = 0)
(131,htons(TCP_PORT)
(132,connectSocket)
(133,data)
(134,recvResult)
(135,recvResult)
(136,data = -1)
(137,if (recvResult == SOCKET_ERROR || recvResult == 0)
(138,recvResult == SOCKET_ERROR || recvResult == 0)
(139,service.sin_port = htons(TCP_PORT)
(140,MAKEWORD(2,2)
(141,*dataPtr1)
(142,data)
(143,CLOSE_SOCKET(connectSocket)
(144,tempInt = atoi(inputBuffer)
(145,data)
(146,dataPtr1)
(147,INVALID_SOCKET)
(148,break;)
(149,dest)
(150,)
(151,)
(152,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(153,(struct sockaddr*)
(154,source)
(155,0)
(156,IP_ADDRESS)
(157,inputBuffer)
(158,NO_ERROR)
(159,tempInt > SHRT_MAX)
(160,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(161,)
(162,IPPROTO_TCP)
(163,tempInt)
(164,)
(165,service.sin_family = AF_INET)
(166,data)
(167,\\\'\\\\0\\\')
(168,wsaData)
(169,0)
(170,connectSocket)
(171,*dataPtr1)
(172,AF_INET)
(173,*dataPtr1 = &data)
(174,WSAStartup(MAKEWORD(2,2)
(175,break;)
(176,data = tempInt)
(177,connectSocket)
(178,tempInt)
(179,source)
(180,wsaDataInit)
(181,printLine(dest)
(182,service)
(183,&service)
(184,SOCKET_ERROR)
(185,)
(186,sin_family)
(187,data)
(188,SHRT_MIN)
(189,dest)
(190,connect(connectSocket, (struct sockaddr*)
(191,1)
(192,)
(193,data)
(194,source)
(195,&wsaData)
(196,SHRT_MAX)
(197,dest)
(198,data = *dataPtr2)
(199,100-1)
(200,dataPtr1)
(201,*dataPtr2 = &data)
(202,source[100-1])
(203,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^