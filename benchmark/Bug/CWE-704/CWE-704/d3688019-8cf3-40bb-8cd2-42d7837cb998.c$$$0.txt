-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1; /* true */
    data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
71,72
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,60,63,64,69,72,73,74,78,80,84,86
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
61,62
61,63
66,67
66,68
70,71
70,72
-----guardedBy-----
34,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_bad(){    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_bad
{    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1;
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal
1
data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data);
data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data)
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data)
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(33,19,0)
(31,27,0)
(12,21,0)
(18,7,0)
(12,31,0)
(25,45,0)
(13,7,0)
(21,29,0)
(7,19,0)
(19,21,0)
(35,27,0)
(2,34,0)
(7,34,0)
(18,31,0)
(43,18,0)
(35,45,0)
(21,19,0)
(36,38,0)
(16,18,0)
(41,31,0)
(1,32,0)
(3,2,0)
(10,46,0)
(39,12,0)
(4,27,0)
(8,17,0)
(33,44,0)
(33,2,0)
(9,19,0)
(45,35,0)
(29,21,0)
(0,35,0)
(21,12,0)
(32,19,0)
(7,18,0)
(30,44,0)
(19,34,0)
(24,19,0)
(44,33,0)
(40,7,0)
(38,35,0)
(26,17,0)
(15,46,0)
(28,34,0)
(32,34,0)
(37,44,0)
(20,33,0)
(38,31,0)
(17,31,0)
(44,31,0)
(31,38,0)
(5,27,0)
(9,34,0)
(6,9,0)
(46,27,0)
(30,20,1)
(20,7,1)
(17,31,1)
(18,31,1)
(12,31,1)
(32,19,1)
(41,46,1)
(39,24,1)
(13,19,1)
(37,30,1)
(21,29,1)
(46,10,1)
(7,18,1)
(12,39,1)
(25,0,1)
(40,13,1)
(6,32,1)
(35,45,1)
(33,44,1)
(31,38,1)
(18,16,1)
(7,19,1)
(33,19,1)
(16,43,1)
(24,17,1)
(9,19,1)
(32,1,1)
(1,2,1)
(45,25,1)
(3,33,1)
(36,41,1)
(17,26,1)
(19,21,1)
(43,40,1)
(44,37,1)
(9,6,1)
(26,8,1)
(44,31,1)
(38,36,1)
(10,15,1)
(11,9,1)
(21,12,1)
(2,3,1)
(38,35,1)
(8,31,1)
(11,17,1)
(15,35,1)
(33,44,2)
(18,31,2)
(32,19,2)
(44,17,2)
(3,17,2)
(19,21,2)
(9,19,2)
(2,17,2)
(44,31,2)
(21,29,2)
(35,45,2)
(33,19,2)
(43,17,2)
(12,31,2)
(37,17,2)
(12,17,2)
(30,17,2)
(21,12,2)
(7,17,2)
(24,17,2)
(32,17,2)
(31,38,2)
(13,17,2)
(39,17,2)
(17,31,2)
(21,17,2)
(38,35,2)
(6,17,2)
(20,17,2)
(1,17,2)
(19,17,2)
(16,17,2)
(18,17,2)
(40,17,2)
(7,19,2)
(33,17,2)
(9,17,2)
(7,18,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,dataBuffer[data-1] = '\\\\0')
(3,'\\\\0')
(4,if (data < 100)
(5,data)
(6,dataBuffer)
(7,memset(dataBuffer, 'A', data-1)
(8,data)
(9,free(dataBuffer)
(10,1)
(11,RET)
(12,malloc(data)
(13,dataBuffer)
(14,memset(dataBuffer, \'A\', data-1)
(15,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal)
(16,1)
(17,data < 100)
(18,data-1)
(19,* dataBuffer = (char *)
(20,dataBuffer)
(21,(char *)
(22,dataBuffer[data-1] = \'\\\\0\')
(23,\'\\\\0\')
(24,dataBuffer)
(25,1)
(26,100)
(27,)
(28,dataBuffer)
(29,char *)
(30,data)
(31,data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data)
(32,printLine(dataBuffer)
(33,dataBuffer[data-1])
(34,)
(35,data = -1)
(36,data)
(37,1)
(38,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badSource(data)
(39,data)
(40,'A')
(41,data)
(42,\'A\')
(43,data)
(44,data-1)
(45,-1)
(46,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_22_badGlobal = 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^