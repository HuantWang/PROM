-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
47,51
47,52
47,53
48,49
49,50
49,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,54,57,59,61,63,67,69,70,72,73,78,80,81,82,86,87,92,94,96,98,103,105,106,110,112
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
71,72
71,73
75,76
75,77
79,80
79,81
84,85
84,86
100,101
100,102
-----guardedBy-----
86,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType
CWE194_Unexpected_Sign_Extension__negative_memcpy_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(55,26,0)
(44,8,0)
(0,2,0)
(11,26,0)
(20,41,0)
(4,10,0)
(28,31,0)
(45,41,0)
(17,56,0)
(36,43,0)
(8,41,0)
(29,43,0)
(10,4,0)
(37,52,0)
(39,48,0)
(15,10,0)
(18,57,0)
(43,36,0)
(5,52,0)
(52,4,0)
(25,35,0)
(19,4,0)
(16,40,0)
(53,23,0)
(56,43,0)
(9,45,0)
(47,48,0)
(50,22,0)
(49,10,0)
(7,47,0)
(45,32,0)
(51,31,0)
(12,23,0)
(33,57,0)
(14,32,0)
(48,47,0)
(27,51,0)
(24,47,0)
(35,51,0)
(31,2,0)
(40,22,0)
(26,41,0)
(4,31,0)
(26,4,0)
(46,2,0)
(1,51,0)
(38,26,0)
(26,13,0)
(41,51,0)
(32,13,0)
(56,2,0)
(21,40,0)
(42,51,0)
(45,4,0)
(34,41,0)
(6,45,0)
(23,2,0)
(3,36,0)
(57,56,0)
(8,51,0)
(43,2,0)
(22,40,0)
(47,51,0)
(54,48,0)
(22,35,0)
(35,25,1)
(50,47,1)
(45,41,1)
(20,4,1)
(41,34,1)
(34,20,1)
(48,54,1)
(15,19,1)
(29,23,1)
(49,15,1)
(39,24,1)
(52,37,1)
(22,40,1)
(18,43,1)
(25,22,1)
(24,7,1)
(6,9,1)
(33,18,1)
(45,4,1)
(37,5,1)
(36,3,1)
(38,55,1)
(57,33,1)
(30,8,1)
(17,57,1)
(40,16,1)
(26,41,1)
(14,45,1)
(47,48,1)
(32,14,1)
(44,32,1)
(3,29,1)
(9,26,1)
(56,17,1)
(52,4,1)
(11,52,1)
(10,49,1)
(21,50,1)
(55,11,1)
(23,53,1)
(56,43,1)
(26,4,1)
(8,44,1)
(26,38,1)
(5,35,1)
(19,56,1)
(16,21,1)
(7,41,1)
(53,12,1)
(54,39,1)
(45,6,1)
(44,52,1)
(4,10,1)
(43,36,1)
(8,41,1)
(9,52,2)
(38,52,2)
(45,52,2)
(11,52,2)
(6,52,2)
(22,40,2)
(26,52,2)
(45,41,2)
(4,10,2)
(55,52,2)
(32,52,2)
(47,48,2)
(26,41,2)
(14,52,2)
(43,36,2)
(26,4,2)
(52,4,2)
(56,43,2)
(45,4,2)
(8,41,2)
-----------------------------------
(0,data)
(1,if (data < 100)
(2,)
(3,1)
(4,data = myUnion.unionSecond)
(5,data)
(6,data)
(7,source)
(8,printLine(dest)
(9,dest)
(10,myUnion.unionSecond)
(11,dest)
(12,data)
(13,)
(14,\\\'\\\\0\\\')
(15,myUnion)
(16,1)
(17,data)
(18,myUnion)
(19,data)
(20,dest)
(21,100)
(22,source[100-1])
(23,data = 0)
(24,\\\'A\\\')
(25,\\\'\\\\0\\\')
(26,memcpy(dest, source, data)
(27,dest)
(28,data)
(29,data)
(30,RET)
(31,)
(32,dest[data] = \\\'\\\\0\\\')
(33,unionFirst)
(34,"")
(35,source[100-1] = \\\'\\\\0\\\')
(36,-1)
(37,100)
(38,data)
(39,100)
(40,100-1)
(41,dest[100] = "")
(42,source)
(43,data = -1)
(44,dest)
(45,dest[data])
(46,myUnion)
(47,memset(source, \\\'A\\\', 100-1)
(48,100-1)
(49,unionSecond)
(50,source)
(51,)
(52,data < 100)
(53,0)
(54,1)
(55,source)
(56,myUnion.unionFirst = data)
(57,myUnion.unionFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^