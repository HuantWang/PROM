-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType myStruct)
{
    int data = myStruct.structFirst;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,7,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType myStruct){    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType myStruct)
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType myStruct
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType
myStruct
myStruct
{    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = myStruct.structFirst;
int data = myStruct.structFirst;
int
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(27,44,0)
(41,13,0)
(12,17,0)
(23,17,0)
(8,30,0)
(17,31,0)
(4,18,0)
(26,10,0)
(5,27,0)
(22,48,0)
(44,17,0)
(46,21,0)
(15,21,0)
(35,30,0)
(14,10,0)
(11,32,0)
(45,1,0)
(3,9,0)
(2,46,0)
(10,11,0)
(48,44,0)
(18,38,0)
(17,44,0)
(34,13,0)
(9,3,0)
(7,3,0)
(24,48,0)
(19,21,0)
(37,21,0)
(9,44,0)
(1,32,0)
(16,44,0)
(25,32,0)
(38,36,0)
(30,21,0)
(37,11,0)
(30,11,0)
(48,30,0)
(32,1,0)
(32,25,0)
(32,11,0)
(44,13,0)
(3,11,0)
(46,11,0)
(47,11,0)
(29,9,0)
(11,21,0)
(33,27,0)
(1,44,0)
(38,18,0)
(30,48,0)
(3,19,0)
(0,9,0)
(20,19,0)
(42,37,0)
(28,21,0)
(23,12,1)
(48,44,1)
(47,27,1)
(9,0,1)
(6,46,1)
(2,37,1)
(42,19,1)
(10,11,1)
(46,2,1)
(7,30,1)
(0,29,1)
(11,32,1)
(37,42,1)
(26,11,1)
(3,11,1)
(32,1,1)
(32,25,1)
(27,5,1)
(48,22,1)
(9,44,1)
(14,26,1)
(1,45,1)
(17,31,1)
(46,11,1)
(30,11,1)
(35,8,1)
(33,44,1)
(30,48,1)
(45,47,1)
(44,17,1)
(12,16,1)
(1,44,1)
(37,11,1)
(10,14,1)
(19,20,1)
(8,38,1)
(17,23,1)
(3,9,1)
(24,35,1)
(20,3,1)
(18,4,1)
(22,24,1)
(27,44,1)
(38,18,1)
(6,27,1)
(8,10,1)
(5,33,1)
(4,10,1)
(29,7,1)
(29,27,2)
(18,10,2)
(14,27,2)
(11,32,2)
(32,25,2)
(9,27,2)
(42,27,2)
(8,27,2)
(44,17,2)
(32,27,2)
(2,27,2)
(48,27,2)
(10,11,2)
(27,44,2)
(30,48,2)
(38,18,2)
(4,10,2)
(37,27,2)
(22,27,2)
(0,27,2)
(38,10,2)
(48,44,2)
(46,11,2)
(7,27,2)
(10,27,2)
(45,27,2)
(26,27,2)
(1,44,2)
(1,27,2)
(20,27,2)
(3,9,2)
(30,11,2)
(46,27,2)
(24,27,2)
(11,27,2)
(17,31,2)
(3,27,2)
(3,11,2)
(35,27,2)
(37,11,2)
(32,1,2)
(30,27,2)
(9,44,2)
(19,27,2)
(47,27,2)
-----------------------------------
(0,1)
(1,malloc(data)
(2,dataBuffer)
(3,dataBuffer[data-1])
(4,1)
(5,100)
(6,RET)
(7,dataBuffer)
(8,dataBuffer)
(9,data-1)
(10,dataBuffer == NULL)
(11,* dataBuffer = (char *)
(12,myStruct)
(13,)
(14,NULL)
(15,if (dataBuffer == NULL)
(16,data)
(17,myStruct.structFirst)
(18,-1)
(19,dataBuffer[data-1] = '\\\\0')
(20,\'\\\\0\')
(21,)
(22,1)
(23,structFirst)
(24,data)
(25,char *)
(26,dataBuffer)
(27,data < 100)
(28,dataBuffer)
(29,data)
(30,memset(dataBuffer, \'A\', data-1)
(31,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_67_structType myStruct)
(32,(char *)
(33,data)
(34,data)
(35,'A')
(36,)
(37,printLine(dataBuffer)
(38,exit(-1)
(39,\'A\')
(40,memset(dataBuffer, 'A', data-1)
(41,if (data < 100)
(42,dataBuffer)
(43,dataBuffer[data-1] = \'\\\\0\')
(44,data = myStruct.structFirst)
(45,data)
(46,free(dataBuffer)
(47,dataBuffer)
(48,data-1)
(49,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^