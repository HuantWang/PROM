-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,18,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
21,22
21,23
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        /* FLAW: Use a negative number */        data = -1;    }
1
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(46,3,0)
(30,1,0)
(19,34,0)
(7,23,0)
(13,47,0)
(24,11,0)
(33,6,0)
(30,22,0)
(2,19,0)
(40,1,0)
(46,43,0)
(1,30,0)
(28,3,0)
(10,9,0)
(47,23,0)
(4,17,0)
(20,9,0)
(25,19,0)
(43,23,0)
(16,33,0)
(29,26,0)
(45,23,0)
(26,7,0)
(33,19,0)
(54,47,0)
(7,17,0)
(3,9,0)
(45,6,0)
(50,26,0)
(26,34,0)
(49,6,0)
(28,34,0)
(11,6,0)
(3,14,0)
(44,46,0)
(38,23,0)
(42,33,0)
(34,21,0)
(19,33,0)
(5,34,0)
(17,6,0)
(0,6,0)
(8,7,0)
(37,28,0)
(18,43,0)
(26,3,0)
(36,34,0)
(46,34,0)
(43,46,0)
(12,28,0)
(33,23,0)
(23,6,0)
(32,9,0)
(19,3,0)
(11,23,0)
(52,5,0)
(48,3,0)
(15,45,0)
(23,43,0)
(7,26,0)
(43,18,0)
(31,14,0)
(14,3,0)
(34,5,0)
(12,39,1)
(1,40,1)
(25,2,1)
(37,12,1)
(19,25,1)
(13,23,1)
(39,3,1)
(7,26,1)
(26,34,1)
(27,28,1)
(23,43,1)
(34,5,1)
(45,15,1)
(26,3,1)
(42,30,1)
(50,29,1)
(45,23,1)
(46,34,1)
(52,36,1)
(8,33,1)
(4,7,1)
(15,17,1)
(16,42,1)
(11,24,1)
(47,23,1)
(11,23,1)
(30,1,1)
(3,14,1)
(54,13,1)
(47,54,1)
(31,48,1)
(28,34,1)
(29,8,1)
(27,11,1)
(38,28,1)
(36,39,1)
(19,3,1)
(43,46,1)
(17,4,1)
(46,3,1)
(26,50,1)
(43,18,1)
(42,47,1)
(28,3,1)
(33,23,1)
(46,44,1)
(19,34,1)
(14,31,1)
(7,23,1)
(12,34,1)
(5,52,1)
(40,47,1)
(44,38,1)
(33,19,1)
(28,37,1)
(2,16,1)
(24,45,1)
(17,28,2)
(38,28,2)
(42,28,2)
(29,28,2)
(47,23,2)
(43,46,2)
(28,34,2)
(26,3,2)
(19,28,2)
(16,28,2)
(43,28,2)
(33,28,2)
(40,47,2)
(25,28,2)
(47,28,2)
(24,28,2)
(15,28,2)
(7,23,2)
(54,28,2)
(23,43,2)
(50,28,2)
(30,47,2)
(13,28,2)
(46,34,2)
(36,39,2)
(11,23,2)
(23,28,2)
(43,18,2)
(1,47,2)
(33,23,2)
(4,28,2)
(45,23,2)
(26,28,2)
(19,3,2)
(5,39,2)
(33,19,2)
(7,26,2)
(34,39,2)
(30,1,2)
(45,28,2)
(26,34,2)
(46,3,2)
(8,28,2)
(2,28,2)
(11,28,2)
(28,3,2)
(3,14,2)
(46,28,2)
(34,5,2)
(7,28,2)
(44,28,2)
(52,39,2)
(19,34,2)
-----------------------------------
(0,if (dataBuffer == NULL)
(1,-1)
(2,data)
(3,data = -1)
(4,\'\\\\0\')
(5,-1)
(6,)
(7,dataBuffer[data-1])
(8,dataBuffer)
(9,)
(10,data)
(11,free(dataBuffer)
(12,data)
(13,dataBuffer)
(14,-1)
(15,dataBuffer)
(16,'A')
(17,dataBuffer[data-1] = \'\\\\0\')
(18,char *)
(19,data-1)
(20,if (data < 100)
(21,)
(22,)
(23,* dataBuffer = (char *)
(24,dataBuffer)
(25,1)
(26,data-1)
(27,RET)
(28,data < 100)
(29,data)
(30,exit(-1)
(31,1)
(32,if(1)
(33,memset(dataBuffer, 'A', data-1)
(34,data = -1)
(35,dataBuffer[data-1] = '\\\\0')
(36,data)
(37,100)
(38,dataBuffer)
(39,1)
(40,1)
(41,'\\\\0')
(42,dataBuffer)
(43,(char *)
(44,data)
(45,printLine(dataBuffer)
(46,malloc(data)
(47,dataBuffer == NULL)
(48,data)
(49,dataBuffer)
(50,1)
(51,memset(dataBuffer, \'A\', data-1)
(52,1)
(53,\'A\')
(54,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^