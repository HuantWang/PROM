-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_13_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_13_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_13_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_13_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,35,0)
(37,26,0)
(34,24,0)
(24,51,0)
(1,21,0)
(20,52,0)
(54,13,0)
(54,31,0)
(53,35,0)
(11,15,0)
(21,40,0)
(36,24,0)
(5,30,0)
(51,47,0)
(44,40,0)
(15,31,0)
(54,51,0)
(6,40,0)
(4,51,0)
(31,42,0)
(8,9,0)
(15,21,0)
(49,19,0)
(35,31,0)
(35,44,0)
(13,54,0)
(55,47,0)
(15,51,0)
(13,22,0)
(24,31,0)
(33,0,0)
(5,26,0)
(50,9,0)
(31,27,0)
(38,6,0)
(47,51,0)
(51,0,0)
(40,13,0)
(40,9,0)
(19,40,0)
(27,31,0)
(22,13,0)
(25,15,0)
(44,9,0)
(29,31,0)
(35,51,0)
(2,9,0)
(46,14,0)
(3,8,0)
(32,0,0)
(21,15,0)
(52,40,0)
(43,6,0)
(26,5,0)
(23,44,0)
(45,0,0)
(52,9,0)
(12,14,0)
(7,54,0)
(10,44,0)
(21,8,0)
(19,9,0)
(13,40,0)
(16,40,0)
(17,35,0)
(10,23,1)
(11,1,1)
(8,3,1)
(16,24,1)
(23,5,1)
(55,4,1)
(52,40,1)
(53,10,1)
(20,19,1)
(46,12,1)
(7,16,1)
(36,14,1)
(1,44,1)
(19,40,1)
(24,31,1)
(44,40,1)
(54,7,1)
(19,49,1)
(13,22,1)
(36,31,1)
(35,17,1)
(24,51,1)
(23,6,1)
(6,40,1)
(40,13,1)
(12,51,1)
(6,43,1)
(38,40,1)
(37,6,1)
(21,40,1)
(31,27,1)
(47,55,1)
(3,21,1)
(18,52,1)
(17,53,1)
(25,11,1)
(15,51,1)
(54,31,1)
(21,15,1)
(29,14,1)
(26,37,1)
(44,35,1)
(5,26,1)
(52,20,1)
(35,51,1)
(51,47,1)
(15,31,1)
(27,29,1)
(43,38,1)
(13,54,1)
(15,25,1)
(54,51,1)
(14,46,1)
(49,8,1)
(24,34,1)
(35,31,1)
(34,36,1)
(18,24,1)
(35,51,2)
(44,35,2)
(5,6,2)
(13,22,2)
(6,24,2)
(1,24,2)
(54,24,2)
(40,24,2)
(24,51,2)
(6,40,2)
(21,24,2)
(20,24,2)
(53,24,2)
(44,40,2)
(13,24,2)
(21,40,2)
(13,54,2)
(16,24,2)
(10,24,2)
(38,24,2)
(24,31,2)
(19,24,2)
(37,6,2)
(26,6,2)
(51,47,2)
(7,24,2)
(44,24,2)
(15,31,2)
(15,51,2)
(5,26,2)
(31,27,2)
(43,24,2)
(35,24,2)
(54,51,2)
(31,14,2)
(40,13,2)
(25,24,2)
(35,31,2)
(49,24,2)
(21,15,2)
(27,14,2)
(8,24,2)
(17,24,2)
(15,24,2)
(52,40,2)
(23,24,2)
(54,31,2)
(11,24,2)
(19,40,2)
(52,24,2)
(29,14,2)
(3,24,2)
-----------------------------------
(0,)
(1,dataBuffer)
(2,if (dataBuffer == NULL)
(3,'\\\\0')
(4,data)
(5,exit(-1)
(6,dataBuffer == NULL)
(7,data)
(8,dataBuffer[data-1] = \'\\\\0\')
(9,)
(10,'A')
(11,data)
(12,GLOBAL_CONST_FIVE)
(13,(char *)
(14,GLOBAL_CONST_FIVE==5)
(15,data-1)
(16,dataBuffer)
(17,1)
(18,RET)
(19,printLine(dataBuffer)
(20,dataBuffer)
(21,dataBuffer[data-1])
(22,char *)
(23,dataBuffer)
(24,data < 100)
(25,1)
(26,-1)
(27,RAND32()
(28,\'\\\\0\')
(29,data)
(30,)
(31,data = RAND32()
(32,if (data < 100)
(33,data)
(34,100)
(35,data-1)
(36,data)
(37,1)
(38,dataBuffer)
(39,dataBuffer[data-1] = '\\\\0')
(40,* dataBuffer = (char *)
(41,\'A\')
(42,)
(43,NULL)
(44,memset(dataBuffer, 'A', data-1)
(45,if(GLOBAL_CONST_FIVE==5)
(46,5)
(47,-1)
(48,memset(dataBuffer, \'A\', data-1)
(49,dataBuffer)
(50,dataBuffer)
(51,data = -1)
(52,free(dataBuffer)
(53,data)
(54,malloc(data)
(55,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^