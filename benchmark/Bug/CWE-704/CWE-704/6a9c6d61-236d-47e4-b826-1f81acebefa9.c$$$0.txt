-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_07_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,18,0)
(6,18,0)
(36,15,0)
(14,55,0)
(39,15,0)
(9,2,0)
(8,4,0)
(52,25,0)
(29,15,0)
(43,15,0)
(35,25,0)
(9,25,0)
(18,15,0)
(2,27,0)
(34,9,0)
(41,29,0)
(2,9,0)
(15,55,0)
(18,4,0)
(16,25,0)
(0,20,0)
(22,55,0)
(24,4,0)
(36,4,0)
(7,9,0)
(23,44,0)
(17,19,0)
(10,0,0)
(44,4,0)
(29,4,0)
(19,9,0)
(32,35,0)
(11,29,0)
(5,35,0)
(38,9,0)
(28,36,0)
(30,16,0)
(44,15,0)
(35,9,0)
(45,34,0)
(18,35,0)
(31,25,0)
(29,41,0)
(26,33,0)
(19,25,0)
(44,2,0)
(49,29,0)
(2,44,0)
(41,9,0)
(54,36,0)
(7,25,0)
(53,55,0)
(20,48,0)
(1,34,0)
(15,39,0)
(3,39,0)
(41,16,0)
(21,41,0)
(4,50,0)
(4,24,0)
(13,7,0)
(35,18,0)
(27,2,0)
(20,0,0)
(12,33,0)
(29,15,1)
(12,15,1)
(6,42,1)
(13,16,1)
(18,15,1)
(1,45,1)
(0,10,1)
(32,5,1)
(24,8,1)
(34,9,1)
(29,49,1)
(44,15,1)
(54,33,1)
(44,4,1)
(10,34,1)
(19,17,1)
(36,4,1)
(11,21,1)
(49,11,1)
(45,9,1)
(2,27,1)
(15,39,1)
(18,6,1)
(28,54,1)
(34,1,1)
(35,18,1)
(36,28,1)
(23,38,1)
(17,7,1)
(2,44,1)
(26,12,1)
(33,26,1)
(54,4,1)
(46,19,1)
(4,24,1)
(30,41,1)
(5,34,1)
(19,9,1)
(9,2,1)
(16,30,1)
(29,4,1)
(21,35,1)
(41,29,1)
(7,13,1)
(42,32,1)
(44,23,1)
(36,15,1)
(7,9,1)
(20,0,1)
(38,36,1)
(46,36,1)
(8,33,1)
(18,4,1)
(35,9,1)
(39,3,1)
(5,20,1)
(3,43,1)
(41,9,1)
(35,36,2)
(49,36,2)
(34,9,2)
(5,36,2)
(4,24,2)
(19,36,2)
(21,36,2)
(11,36,2)
(36,4,2)
(23,36,2)
(32,36,2)
(35,9,2)
(7,36,2)
(4,33,2)
(29,15,2)
(30,36,2)
(41,29,2)
(2,44,2)
(8,33,2)
(34,36,2)
(36,15,2)
(42,36,2)
(18,36,2)
(6,36,2)
(10,34,2)
(7,9,2)
(45,36,2)
(20,0,2)
(15,39,2)
(2,36,2)
(1,36,2)
(18,4,2)
(17,36,2)
(29,36,2)
(0,34,2)
(41,36,2)
(35,18,2)
(44,15,2)
(41,9,2)
(44,36,2)
(29,4,2)
(13,36,2)
(2,27,2)
(18,15,2)
(9,36,2)
(16,36,2)
(38,36,2)
(44,4,2)
(24,33,2)
(19,9,2)
(20,34,2)
(9,2,2)
-----------------------------------
(0,-1)
(1,NULL)
(2,(char *)
(3,1)
(4,data = RAND32()
(5,dataBuffer)
(6,1)
(7,printLine(dataBuffer)
(8,data)
(9,* dataBuffer = (char *)
(10,1)
(11,data)
(12,staticFive)
(13,dataBuffer)
(14,data)
(15,data = -1)
(16,dataBuffer[data-1] = '\\\\0')
(17,dataBuffer)
(18,data-1)
(19,free(dataBuffer)
(20,exit(-1)
(21,dataBuffer)
(22,if(staticFive==5)
(23,data)
(24,RAND32()
(25,)
(26,5)
(27,char *)
(28,100)
(29,data-1)
(30,\'\\\\0\')
(31,dataBuffer)
(32,'A')
(33,staticFive==5)
(34,dataBuffer == NULL)
(35,memset(dataBuffer, 'A', data-1)
(36,data < 100)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,dataBuffer)
(39,-1)
(40,'\\\\0')
(41,dataBuffer[data-1])
(42,data)
(43,data)
(44,malloc(data)
(45,dataBuffer)
(46,RET)
(47,\'A\')
(48,)
(49,1)
(50,)
(51,memset(dataBuffer, \'A\', data-1)
(52,if (dataBuffer == NULL)
(53,if (data < 100)
(54,data)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^