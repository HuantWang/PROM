-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a value input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
17,18
18,19
18,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
60,74
60,75
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
185,190
186,187
188,189
190,191
192,193
192,194
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
218,219
219,220
219,221
220,221
222,223
222,224
223,224
225,226
227,228
227,229
227,230
228,229
228,230
229,230
229,231
230,231
232,233
234,235
234,236
235,236
237,238
239,240
240,241
241,242
241,243
242,243
244,245
246,247
247,248
248,249
248,250
249,250
251,252
254,255
254,256
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
267,268
267,269
268,269
268,270
269,270
271,272
273,274
274,275
275,276
275,277
276,277
278,279
280,281
280,282
280,283
281,282
282,283
282,284
284,285
284,286
286,287
287,288
289,290
290,291
290,292
292,293
292,294
294,295
295,296
297,298
297,299
297,300
297,301
297,302
297,303
298,299
299,300
299,301
301,302
301,303
303,304
305,306
306,307
306,308
308,309
308,310
308,311
310,311
312,313
314,315
315,316
315,317
315,318
315,319
316,317
318,319
321,322
321,323
324,325
325,326
325,327
326,327
326,328
327,328
329,330
329,331
333,334
333,335
334,335
334,336
335,336
338,339
338,340
339,340
340,341
340,342
340,343
340,344
341,342
343,344
345,346
347,348
349,350
350,351
350,352
351,352
351,353
352,353
354,355
357,358
358,359
358,360
359,360
361,362
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,30,32,36,38,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,111,116,117,120,122,127,129,133,135,138,142,144,146,151,153,155,157,159,163,166,168,170,172,176,178,180,184,187,189,191,194,195,196,201,203,206,207,209,214,216,217,221,224,226,231,233,236,238,243,245,250,252,253,257,259,264,266,270,272,277,279,283,285,288,291,293,296,300,302,304,307,309,311,313,317,319,320,322,323,328,330,331,332,336,337,342,344,346,348,353,355,356,360,362
-----computeFrom-----
12,13
12,14
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
113,114
113,115
124,125
124,126
148,149
148,150
161,162
161,163
174,175
174,176
182,183
182,184
192,193
192,194
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
219,220
219,221
228,229
228,230
229,230
229,231
234,235
234,236
241,242
241,243
248,249
248,250
255,256
255,257
268,269
268,270
321,322
321,323
325,326
325,327
329,330
329,331
334,335
334,336
350,351
350,352
-----guardedBy-----
257,266
270,279
336,355
-----guardedByNegation-----
236,252
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_31_bad(){    short data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_31_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_31_bad
{    short data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(216,94,0)
(65,112,0)
(196,139,0)
(24,14,0)
(59,119,0)
(118,6,0)
(193,213,0)
(57,119,0)
(91,82,0)
(69,67,0)
(67,7,0)
(157,190,0)
(92,36,0)
(53,79,0)
(76,172,0)
(109,213,0)
(71,38,0)
(152,47,0)
(43,54,0)
(102,182,0)
(97,121,0)
(30,71,0)
(190,149,0)
(124,82,0)
(7,67,0)
(121,58,0)
(146,119,0)
(77,139,0)
(82,90,0)
(80,38,0)
(58,144,0)
(100,64,0)
(66,121,0)
(62,196,0)
(54,68,0)
(82,143,0)
(193,195,0)
(22,201,0)
(205,179,0)
(55,183,0)
(103,175,0)
(162,90,0)
(171,163,0)
(56,98,0)
(117,213,0)
(172,79,0)
(179,125,0)
(83,71,0)
(23,7,0)
(208,213,0)
(19,182,0)
(12,115,0)
(141,82,0)
(210,120,0)
(61,143,0)
(22,187,0)
(121,154,0)
(191,213,0)
(88,79,0)
(142,68,0)
(26,182,0)
(52,100,0)
(197,202,0)
(32,64,0)
(1,36,0)
(86,175,0)
(113,150,0)
(7,188,0)
(9,149,0)
(105,178,0)
(131,211,0)
(67,134,0)
(60,183,0)
(42,81,0)
(190,146,0)
(75,68,0)
(4,58,0)
(87,0,0)
(178,101,0)
(0,213,0)
(168,190,0)
(165,139,0)
(67,71,0)
(140,103,0)
(121,60,0)
(150,121,0)
(39,216,0)
(214,210,0)
(46,196,0)
(84,185,0)
(27,214,0)
(161,143,0)
(128,139,0)
(177,83,0)
(89,139,0)
(164,213,0)
(34,139,0)
(98,42,0)
(184,148,0)
(41,130,0)
(139,183,0)
(106,60,0)
(73,103,0)
(48,58,0)
(13,115,0)
(209,216,0)
(167,134,0)
(36,182,0)
(207,94,0)
(133,111,0)
(214,143,0)
(50,128,0)
(86,150,0)
(185,179,0)
(187,22,0)
(130,176,0)
(156,185,0)
(202,67,0)
(154,183,0)
(125,101,0)
(136,36,0)
(110,90,0)
(129,95,0)
(212,173,0)
(176,130,0)
(169,14,0)
(115,193,0)
(155,120,0)
(179,185,0)
(146,190,0)
(71,213,0)
(83,196,0)
(86,95,0)
(68,101,0)
(186,213,0)
(42,98,0)
(149,213,0)
(61,112,0)
(104,154,0)
(85,188,0)
(21,86,0)
(132,19,0)
(147,54,0)
(25,139,0)
(134,67,0)
(63,192,0)
(107,86,0)
(127,140,0)
(160,61,0)
(176,213,0)
(123,94,0)
(206,150,0)
(7,23,0)
(45,196,0)
(122,213,0)
(216,182,0)
(120,210,0)
(108,214,0)
(173,149,0)
(40,139,0)
(143,213,0)
(94,139,0)
(6,71,0)
(5,100,0)
(198,213,0)
(18,139,0)
(120,143,0)
(15,117,0)
(37,101,0)
(17,0,0)
(47,176,0)
(176,47,0)
(203,101,0)
(8,140,0)
(159,128,0)
(158,176,0)
(188,7,0)
(178,95,0)
(210,214,0)
(96,6,0)
(51,139,0)
(145,139,0)
(35,101,0)
(10,46,0)
(99,120,0)
(81,42,0)
(174,22,0)
(121,22,0)
(46,170,0)
(150,60,0)
(82,182,0)
(116,72,0)
(112,213,0)
(64,164,0)
(46,71,0)
(67,202,0)
(180,125,0)
(111,150,0)
(3,81,0)
(101,60,0)
(143,82,0)
(29,86,0)
(79,172,0)
(2,151,0)
(140,150,0)
(194,195,0)
(182,36,0)
(36,71,0)
(78,213,0)
(182,213,0)
(126,139,0)
(28,15,0)
(215,60,0)
(149,173,0)
(44,83,0)
(79,71,0)
(114,154,0)
(119,149,0)
(195,193,0)
(14,42,0)
(64,100,0)
(140,95,0)
(16,26,0)
(93,61,0)
(20,139,0)
(119,146,0)
(138,117,0)
(181,95,0)
(189,111,0)
(11,38,0)
(42,14,0)
(137,187,0)
(31,164,0)
(33,38,0)
(199,153,0)
(200,139,0)
(49,19,0)
(26,74,0)
(95,101,0)
(26,94,0)
(68,54,0)
(38,71,0)
(166,15,0)
(90,82,0)
(58,149,0)
(66,97,1)
(202,197,1)
(193,195,1)
(2,6,1)
(81,42,1)
(54,147,1)
(50,159,1)
(128,50,1)
(118,96,1)
(86,95,1)
(99,155,1)
(177,135,1)
(0,17,1)
(49,132,1)
(147,43,1)
(187,137,1)
(204,26,1)
(6,71,1)
(59,149,1)
(1,92,1)
(121,22,1)
(117,138,1)
(140,127,1)
(177,131,1)
(9,112,1)
(216,39,1)
(8,86,1)
(197,7,1)
(84,156,1)
(92,136,1)
(64,32,1)
(190,157,1)
(194,115,1)
(189,125,1)
(107,21,1)
(160,93,1)
(216,94,1)
(142,75,1)
(174,146,1)
(36,1,1)
(52,117,1)
(111,133,1)
(155,214,1)
(12,13,1)
(64,100,1)
(83,196,1)
(67,202,1)
(14,169,1)
(53,88,1)
(47,152,1)
(161,19,1)
(67,71,1)
(30,0,1)
(133,189,1)
(3,42,1)
(90,110,1)
(57,59,1)
(21,111,1)
(17,87,1)
(171,204,1)
(48,4,1)
(167,67,1)
(19,49,1)
(209,46,1)
(176,47,1)
(100,5,1)
(209,83,1)
(31,64,1)
(83,44,1)
(125,180,1)
(173,212,1)
(134,167,1)
(169,24,1)
(56,14,1)
(44,177,1)
(88,134,1)
(124,90,1)
(121,58,1)
(214,143,1)
(86,150,1)
(81,3,1)
(103,73,1)
(70,178,1)
(123,207,1)
(22,187,1)
(207,196,1)
(199,210,1)
(188,85,1)
(41,6,1)
(204,216,1)
(83,71,1)
(119,149,1)
(195,194,1)
(26,182,1)
(24,135,1)
(28,166,1)
(82,90,1)
(196,62,1)
(158,130,1)
(157,168,1)
(185,84,1)
(214,27,1)
(164,31,1)
(7,188,1)
(19,182,1)
(61,143,1)
(177,116,1)
(138,15,1)
(119,57,1)
(166,176,1)
(178,105,1)
(112,65,1)
(136,102,1)
(79,53,1)
(62,45,1)
(97,171,1)
(172,76,1)
(46,71,1)
(114,104,1)
(26,16,1)
(205,68,1)
(184,81,1)
(178,95,1)
(73,140,1)
(27,108,1)
(152,158,1)
(177,63,1)
(140,95,1)
(86,29,1)
(146,190,1)
(61,160,1)
(135,58,1)
(212,9,1)
(45,128,1)
(69,193,1)
(33,11,1)
(94,123,1)
(58,149,1)
(113,121,1)
(132,182,1)
(210,214,1)
(131,134,1)
(129,150,1)
(177,199,1)
(13,164,1)
(71,38,1)
(135,22,1)
(5,52,1)
(46,10,1)
(102,172,1)
(216,182,1)
(176,130,1)
(141,91,1)
(80,30,1)
(111,150,1)
(43,142,1)
(177,184,1)
(36,71,1)
(146,119,1)
(154,114,1)
(67,7,1)
(168,119,1)
(11,80,1)
(108,143,1)
(82,124,1)
(116,19,1)
(29,107,1)
(120,99,1)
(6,118,1)
(58,48,1)
(15,28,1)
(206,113,1)
(97,204,1)
(39,209,1)
(143,82,1)
(181,129,1)
(115,12,1)
(95,181,1)
(190,149,1)
(150,206,1)
(93,210,1)
(140,150,1)
(65,61,1)
(137,174,1)
(63,172,1)
(38,33,1)
(68,54,1)
(16,216,1)
(10,83,1)
(159,154,1)
(82,182,1)
(98,56,1)
(76,79,1)
(105,103,1)
(85,69,1)
(32,100,1)
(127,8,1)
(179,185,1)
(110,162,1)
(24,94,1)
(156,205,1)
(105,111,1)
(46,196,1)
(26,94,1)
(134,67,1)
(120,143,1)
(172,79,1)
(130,41,1)
(180,179,1)
(182,36,1)
(150,121,1)
(91,161,1)
(177,2,1)
(149,173,1)
(42,14,1)
(162,141,1)
(121,154,1)
(7,23,1)
(96,71,1)
(87,81,1)
(75,95,1)
(79,71,1)
(121,66,1)
(210,120,1)
(4,146,1)
(42,98,1)
(3,135,2)
(65,210,2)
(81,42,2)
(188,6,2)
(193,6,2)
(121,58,2)
(79,134,2)
(48,146,2)
(210,19,2)
(182,36,2)
(2,6,2)
(83,71,2)
(197,6,2)
(32,6,2)
(56,135,2)
(162,19,2)
(164,6,2)
(26,182,2)
(19,182,2)
(12,6,2)
(108,19,2)
(19,172,2)
(14,135,2)
(202,6,2)
(112,210,2)
(111,150,2)
(64,6,2)
(172,79,2)
(169,135,2)
(82,19,2)
(161,19,2)
(46,71,2)
(90,19,2)
(216,94,2)
(31,6,2)
(47,6,2)
(212,210,2)
(171,204,2)
(49,172,2)
(67,71,2)
(64,100,2)
(195,6,2)
(120,214,2)
(210,120,2)
(81,135,2)
(141,19,2)
(152,6,2)
(58,146,2)
(0,81,2)
(216,182,2)
(99,214,2)
(16,216,2)
(150,121,2)
(93,210,2)
(30,81,2)
(149,210,2)
(131,134,2)
(140,111,2)
(28,6,2)
(146,119,2)
(119,149,2)
(69,6,2)
(134,6,2)
(179,185,2)
(146,190,2)
(127,111,2)
(86,150,2)
(52,6,2)
(120,143,2)
(118,81,2)
(42,14,2)
(182,172,2)
(76,134,2)
(116,19,2)
(83,196,2)
(67,202,2)
(59,210,2)
(130,6,2)
(11,81,2)
(80,81,2)
(173,210,2)
(1,172,2)
(63,172,2)
(176,47,2)
(26,94,2)
(53,134,2)
(194,6,2)
(67,7,2)
(143,19,2)
(155,214,2)
(178,95,2)
(17,81,2)
(33,81,2)
(174,146,2)
(168,119,2)
(71,38,2)
(21,111,2)
(132,172,2)
(79,71,2)
(27,19,2)
(190,119,2)
(107,111,2)
(82,90,2)
(124,19,2)
(157,119,2)
(172,134,2)
(110,19,2)
(42,135,2)
(26,216,2)
(85,6,2)
(41,6,2)
(135,210,2)
(92,172,2)
(134,67,2)
(7,23,2)
(67,6,2)
(13,6,2)
(15,6,2)
(137,146,2)
(140,150,2)
(46,196,2)
(5,6,2)
(7,188,2)
(214,19,2)
(176,130,2)
(24,135,2)
(73,111,2)
(68,54,2)
(22,146,2)
(103,111,2)
(86,111,2)
(8,111,2)
(58,149,2)
(138,6,2)
(61,210,2)
(36,172,2)
(210,214,2)
(86,95,2)
(158,6,2)
(214,143,2)
(121,22,2)
(102,172,2)
(88,134,2)
(136,172,2)
(146,210,2)
(119,210,2)
(6,81,2)
(98,135,2)
(4,146,2)
(121,154,2)
(160,210,2)
(96,81,2)
(82,182,2)
(9,210,2)
(36,71,2)
(167,6,2)
(10,83,2)
(176,6,2)
(42,98,2)
(117,6,2)
(166,6,2)
(46,83,2)
(199,210,2)
(29,111,2)
(143,82,2)
(71,81,2)
(7,6,2)
(22,187,2)
(187,146,2)
(91,19,2)
(193,195,2)
(115,6,2)
(190,149,2)
(100,6,2)
(140,95,2)
(38,81,2)
(61,143,2)
(184,81,2)
(149,173,2)
(6,71,2)
(57,210,2)
(87,81,2)
-----------------------------------
(0,wsaDataInit = 1)
(1,NULL)
(2,break;)
(3,NO_ERROR)
(4,data)
(5,sin_addr)
(6,listenSocket == INVALID_SOCKET)
(7,(struct sockaddr*)
(8,dest)
(9,tempInt)
(10,listenSocket)
(11,SOCK_STREAM)
(12,sin_port)
(13,service)
(14,MAKEWORD(2,2)
(15,service.sin_family)
(16,acceptSocket)
(17,1)
(18,if (wsaDataInit)
(19,acceptSocket == SOCKET_ERROR)
(20,service)
(21,dest)
(22,data = -1)
(23,struct sockaddr*)
(24,2)
(25,listenSocket)
(26,CLOSE_SOCKET(acceptSocket)
(27,SOCKET_ERROR)
(28,sin_family)
(29,data)
(30,listenSocket)
(31,INADDR_ANY)
(32,s_addr)
(33,IPPROTO_TCP)
(34,acceptSocket)
(35,source)
(36,accept(listenSocket, NULL, NULL)
(37,if (data < 100)
(38,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(39,INVALID_SOCKET)
(40,inputBuffer)
(41,service)
(42,WSAStartup(MAKEWORD(2,2)
(43,100)
(44,INVALID_SOCKET)
(45,listenSocket)
(46,CLOSE_SOCKET(listenSocket)
(47,sizeof(service)
(48,tempInt)
(49,SOCKET_ERROR)
(50,0)
(51,if (acceptSocket != INVALID_SOCKET)
(52,service)
(53,LISTEN_BACKLOG)
(54,100-1)
(55,data)
(56,wsaData)
(57,SHRT_MAX)
(58,data = tempInt)
(59,tempInt)
(60,)
(61,inputBuffer[recvResult])
(62,INVALID_SOCKET)
(63,break;)
(64,service.sin_addr.s_addr)
(65,\\\'\\\\0\\\')
(66,data)
(67,bind(listenSocket, (struct sockaddr*)
(68,memset(source, \\\'A\\\', 100-1)
(69,listenSocket)
(70,RET)
(71,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(72,)
(73,\\\'\\\\0\\\')
(74,)
(75,source)
(76,SOCKET_ERROR)
(77,tempInt)
(78,if (bind(listenSocket, (struct sockaddr*)
(79,listen(listenSocket, LISTEN_BACKLOG)
(80,AF_INET)
(81,WSAStartup(MAKEWORD(2,2)
(82,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(83,listenSocket != INVALID_SOCKET)
(84,1)
(85,service)
(86,strncpy(dest, source, data)
(87,wsaDataInit)
(88,listenSocket)
(89,if (listenSocket != INVALID_SOCKET)
(90,CHAR_ARRAY_SIZE - 1)
(91,acceptSocket)
(92,NULL)
(93,inputBuffer)
(94,acceptSocket = INVALID_SOCKET)
(95,dest[100] = "")
(96,listenSocket)
(97,dataCopy)
(98,&wsaData)
(99,0)
(100,service.sin_addr)
(101,)
(102,acceptSocket)
(103,dest[data] = \\\'\\\\0\\\')
(104,data)
(105,dest)
(106,data)
(107,source)
(108,recvResult)
(109,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(110,1)
(111,data < 100)
(112,inputBuffer[recvResult] = \\\'\\\\0\\\')
(113,data)
(114,0)
(115,service.sin_port)
(116,break;)
(117,service.sin_family = AF_INET)
(118,INVALID_SOCKET)
(119,tempInt > SHRT_MAX)
(120,recvResult == 0)
(121,dataCopy = data)
(122,if (listenSocket == INVALID_SOCKET)
(123,INVALID_SOCKET)
(124,0)
(125,source[100-1] = \\\'\\\\0\\\')
(126,wsaDataInit)
(127,data)
(128,wsaDataInit = 0)
(129,dest)
(130,&service)
(131,break;)
(132,acceptSocket)
(133,100)
(134,bind(listenSocket, (struct sockaddr*)
(135,0)
(136,listenSocket)
(137,1)
(138,AF_INET)
(139,)
(140,dest[data])
(141,inputBuffer)
(142,\\\'A\\\')
(143,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(144,)
(145,wsaData)
(146,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(147,1)
(148,)
(149,tempInt = atoi(inputBuffer)
(150,data = dataCopy)
(151,)
(152,service)
(153,)
(154,data = 0)
(155,recvResult)
(156,100)
(157,SHRT_MIN)
(158,0)
(159,wsaDataInit)
(160,recvResult)
(161,recvResult)
(162,CHAR_ARRAY_SIZE)
(163,)
(164,service.sin_addr.s_addr = INADDR_ANY)
(165,do)
(166,service)
(167,SOCKET_ERROR)
(168,tempInt)
(169,2)
(170,)
(171,WSACleanup()
(172,listen(listenSocket, LISTEN_BACKLOG)
(173,atoi(inputBuffer)
(174,data)
(175,)
(176,memset(&service, 0, sizeof(service)
(177,listenSocket)
(178,printLine(dest)
(179,source[100-1])
(180,\\\'\\\\0\\\')
(181,"")
(182,acceptSocket = accept(listenSocket, NULL, NULL)
(183,)
(184,break;)
(185,100-1)
(186,if (listen(listenSocket, LISTEN_BACKLOG)
(187,-1)
(188,&service)
(189,data)
(190,tempInt < SHRT_MIN)
(191,if (recvResult == SOCKET_ERROR || recvResult == 0)
(192,)
(193,service.sin_port = htons(TCP_PORT)
(194,TCP_PORT)
(195,htons(TCP_PORT)
(196,listenSocket = INVALID_SOCKET)
(197,service)
(198,if (WSAStartup(MAKEWORD(2,2)
(199,break;)
(200,recvResult)
(201,)
(202,sizeof(service)
(203,dest)
(204,wsaDataInit)
(205,source)
(206,dataCopy)
(207,acceptSocket)
(208,if (acceptSocket == SOCKET_ERROR)
(209,acceptSocket)
(210,recvResult == SOCKET_ERROR || recvResult == 0)
(211,)
(212,inputBuffer)
(213,)
(214,recvResult == SOCKET_ERROR)
(215,dataCopy)
(216,acceptSocket != INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^