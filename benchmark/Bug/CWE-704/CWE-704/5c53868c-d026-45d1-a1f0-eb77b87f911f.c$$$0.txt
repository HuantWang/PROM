-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
17,18
17,19
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_01_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_01_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_01_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(3,0,0)
(18,25,0)
(0,22,0)
(13,12,0)
(34,12,0)
(51,46,0)
(41,17,0)
(50,37,0)
(22,9,0)
(19,23,0)
(51,38,0)
(20,13,0)
(9,22,0)
(29,12,0)
(10,12,0)
(25,29,0)
(24,12,0)
(39,11,0)
(7,17,0)
(2,29,0)
(43,20,0)
(35,7,0)
(31,0,0)
(30,7,0)
(36,9,0)
(42,24,0)
(37,12,0)
(1,45,0)
(46,51,0)
(49,5,0)
(29,17,0)
(9,33,0)
(0,20,0)
(5,1,0)
(20,0,0)
(8,29,0)
(17,51,0)
(48,23,0)
(6,25,0)
(22,11,0)
(25,22,0)
(14,13,0)
(24,17,0)
(4,22,0)
(38,51,0)
(29,25,0)
(20,17,0)
(1,5,0)
(28,38,0)
(26,4,0)
(38,22,0)
(23,11,0)
(40,11,0)
(9,36,0)
(33,9,0)
(17,12,0)
(37,17,0)
(27,22,0)
(51,17,0)
(47,4,0)
(20,0,1)
(37,50,1)
(7,17,1)
(25,22,1)
(48,19,1)
(8,7,1)
(13,14,1)
(17,51,1)
(0,31,1)
(18,2,1)
(22,9,1)
(6,18,1)
(41,4,1)
(27,23,1)
(9,33,1)
(51,46,1)
(43,29,1)
(15,4,1)
(49,7,1)
(14,20,1)
(15,24,1)
(37,17,1)
(20,17,1)
(24,17,1)
(33,27,1)
(8,1,1)
(7,30,1)
(35,17,1)
(1,5,1)
(5,49,1)
(24,42,1)
(26,22,1)
(4,47,1)
(29,25,1)
(29,17,1)
(9,36,1)
(28,41,1)
(23,48,1)
(2,8,1)
(42,37,1)
(4,22,1)
(3,43,1)
(0,22,1)
(47,26,1)
(25,6,1)
(31,3,1)
(38,28,1)
(51,38,1)
(38,22,1)
(30,35,1)
(50,13,1)
(2,4,2)
(50,4,2)
(29,25,2)
(8,4,2)
(1,5,2)
(51,46,2)
(25,4,2)
(24,17,2)
(49,7,2)
(25,22,2)
(41,4,2)
(9,33,2)
(31,4,2)
(3,4,2)
(43,4,2)
(51,4,2)
(17,4,2)
(18,4,2)
(24,4,2)
(28,4,2)
(7,4,2)
(20,4,2)
(6,4,2)
(0,22,2)
(5,7,2)
(1,7,2)
(20,17,2)
(51,38,2)
(22,9,2)
(38,4,2)
(13,4,2)
(35,4,2)
(37,17,2)
(7,17,2)
(9,36,2)
(30,4,2)
(14,4,2)
(20,0,2)
(0,4,2)
(29,4,2)
(17,51,2)
(29,17,2)
(37,4,2)
(42,4,2)
(4,22,2)
(38,22,2)
-----------------------------------
(0,data-1)
(1,exit(-1)
(2,'A')
(3,data)
(4,data < 100)
(5,-1)
(6,1)
(7,dataBuffer == NULL)
(8,dataBuffer)
(9,(short)
(10,dataBuffer)
(11,)
(12,)
(13,dataBuffer[data-1] = '\\\\0')
(14,'\\\\0')
(15,RET)
(16,\'\\\\0\')
(17,* dataBuffer = (char *)
(18,data)
(19,data)
(20,dataBuffer[data-1])
(21,dataBuffer[data-1] = \'\\\\0\')
(22,data = (short)
(23,data = 0)
(24,free(dataBuffer)
(25,data-1)
(26,data)
(27,data)
(28,data)
(29,memset(dataBuffer, \'A\', data-1)
(30,NULL)
(31,1)
(32,\'A\')
(33,RAND32()
(34,if (dataBuffer == NULL)
(35,dataBuffer)
(36,short)
(37,printLine(dataBuffer)
(38,malloc(data)
(39,if (data < 100)
(40,data)
(41,dataBuffer)
(42,dataBuffer)
(43,dataBuffer)
(44,memset(dataBuffer, 'A', data-1)
(45,)
(46,char *)
(47,100)
(48,0)
(49,1)
(50,dataBuffer)
(51,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^