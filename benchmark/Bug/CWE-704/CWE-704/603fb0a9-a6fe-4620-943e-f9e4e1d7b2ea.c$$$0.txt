-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
52,55
52,56
52,57
52,58
53,54
54,55
54,56
56,57
56,58
58,59
60,61
61,62
61,63
63,64
63,65
63,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
95,98
95,99
96,97
98,99
100,101
102,103
104,105
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,59,62,64,66,68,72,74,75,77,78,83,85,86,87,91,92,97,99,101,103,108,110,111,115,117
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
76,77
76,78
80,81
80,82
84,85
84,86
89,90
89,91
105,106
105,107
-----guardedBy-----
91,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType
CWE194_Unexpected_Sign_Extension__rand_memcpy_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,24,0)
(40,51,0)
(23,32,0)
(25,35,0)
(9,36,0)
(18,20,0)
(6,20,0)
(22,37,0)
(7,50,0)
(58,32,0)
(17,37,0)
(14,33,0)
(52,55,0)
(54,19,0)
(51,40,0)
(41,13,0)
(2,53,0)
(36,50,0)
(26,25,0)
(57,50,0)
(31,39,0)
(49,29,0)
(29,55,0)
(27,13,0)
(4,17,0)
(47,36,0)
(5,13,0)
(37,17,0)
(39,17,0)
(38,25,0)
(3,20,0)
(25,17,0)
(5,29,0)
(42,35,0)
(16,37,0)
(12,42,0)
(17,24,0)
(25,45,0)
(43,39,0)
(44,20,0)
(50,36,0)
(53,17,0)
(40,0,0)
(48,3,0)
(39,42,0)
(24,20,0)
(40,33,0)
(0,40,0)
(18,33,0)
(32,18,0)
(11,3,0)
(50,55,0)
(10,53,0)
(56,45,0)
(33,20,0)
(13,5,0)
(45,55,0)
(28,55,0)
(1,18,0)
(33,40,0)
(46,5,0)
(39,45,0)
(19,55,0)
(15,45,0)
(34,25,0)
(19,45,0)
(21,55,0)
(55,24,0)
(33,40,1)
(22,16,1)
(2,10,1)
(25,26,1)
(54,42,1)
(43,25,1)
(41,46,1)
(19,45,1)
(7,57,1)
(36,47,1)
(29,49,1)
(54,53,1)
(27,41,1)
(3,48,1)
(16,4,1)
(57,45,1)
(38,34,1)
(19,54,1)
(39,45,1)
(12,39,1)
(34,53,1)
(14,3,1)
(23,58,1)
(40,0,1)
(39,17,1)
(10,29,1)
(32,23,1)
(46,50,1)
(40,51,1)
(1,32,1)
(18,33,1)
(39,31,1)
(47,9,1)
(15,56,1)
(50,36,1)
(51,14,1)
(26,38,1)
(48,11,1)
(58,33,1)
(53,17,1)
(31,43,1)
(49,5,1)
(37,22,1)
(53,2,1)
(9,7,1)
(25,45,1)
(56,17,1)
(13,27,1)
(5,13,1)
(17,37,1)
(45,15,1)
(4,18,1)
(8,19,1)
(42,12,1)
(25,17,1)
(18,1,1)
(40,0,2)
(43,53,2)
(39,53,2)
(5,13,2)
(19,45,2)
(26,53,2)
(38,53,2)
(40,51,2)
(33,40,2)
(53,17,2)
(34,53,2)
(17,37,2)
(25,17,2)
(25,45,2)
(31,53,2)
(39,17,2)
(42,53,2)
(25,53,2)
(12,53,2)
(50,36,2)
(39,45,2)
(18,33,2)
-----------------------------------
(0,short)
(1,data)
(2,100)
(3,data = 0)
(4,data)
(5,source[100-1])
(6,data)
(7,\\\'A\\\')
(8,RET)
(9,100)
(10,data)
(11,data)
(12,\\\'\\\\0\\\')
(13,100-1)
(14,data)
(15,"")
(16,myUnion)
(17,data = myUnion.unionSecond)
(18,myUnion.unionFirst = data)
(19,printLine(dest)
(20,)
(21,source)
(22,unionSecond)
(23,unionFirst)
(24,)
(25,memcpy(dest, source, data)
(26,data)
(27,1)
(28,dest)
(29,source[100-1] = \\\'\\\\0\\\')
(30,data)
(31,data)
(32,myUnion.unionFirst)
(33,data = (short)
(34,dest)
(35,)
(36,100-1)
(37,myUnion.unionSecond)
(38,source)
(39,dest[data])
(40,(short)
(41,100)
(42,dest[data] = \\\'\\\\0\\\')
(43,dest)
(44,myUnion)
(45,dest[100] = "")
(46,source)
(47,1)
(48,0)
(49,\\\'\\\\0\\\')
(50,memset(source, \\\'A\\\', 100-1)
(51,RAND32()
(52,if (data < 100)
(53,data < 100)
(54,dest)
(55,)
(56,dest)
(57,source)
(58,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^