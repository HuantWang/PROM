-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_01_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a number input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
47,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
69,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,49,52,54,59,60,64,66,70,71,73,77,79
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_01_bad(){    short data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_01_bad()
CWE197_Numeric_Truncation_Error__short_fgets_01_bad
{    short data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(36,17,0)
(32,1,0)
(22,1,0)
(25,27,0)
(17,31,0)
(28,29,0)
(16,27,0)
(14,4,0)
(3,21,0)
(29,4,0)
(6,22,0)
(9,16,0)
(37,13,0)
(35,32,0)
(5,1,0)
(12,16,0)
(4,29,0)
(10,4,0)
(23,12,0)
(13,37,0)
(0,3,0)
(20,29,0)
(27,32,0)
(26,32,0)
(2,37,0)
(4,22,0)
(8,16,0)
(7,17,0)
(31,17,0)
(13,1,0)
(18,14,0)
(17,36,0)
(16,12,0)
(24,7,0)
(29,7,0)
(30,16,0)
(19,31,0)
(17,7,0)
(33,13,0)
(7,15,0)
(29,20,0)
(29,13,0)
(11,27,0)
(31,27,0)
(14,22,0)
(8,30,1)
(24,12,1)
(9,8,1)
(16,27,1)
(30,27,1)
(14,4,1)
(10,7,1)
(3,0,1)
(18,4,1)
(12,16,1)
(19,24,1)
(14,18,1)
(11,25,1)
(23,16,1)
(37,2,1)
(17,31,1)
(27,11,1)
(25,13,1)
(12,23,1)
(7,17,1)
(4,29,1)
(29,28,1)
(17,36,1)
(0,12,1)
(28,10,1)
(16,9,1)
(10,3,1)
(34,14,1)
(2,33,1)
(29,7,1)
(29,13,1)
(31,19,1)
(29,20,1)
(31,27,1)
(13,37,1)
(24,12,2)
(17,31,2)
(19,12,2)
(3,12,2)
(16,27,2)
(31,27,2)
(17,36,2)
(29,13,2)
(0,12,2)
(14,4,2)
(29,20,2)
(12,16,2)
(4,29,2)
(17,12,2)
(31,12,2)
(7,12,2)
(13,37,2)
(7,17,2)
(29,7,2)
-----------------------------------
(0,"fgets()
(1,)
(2,1)
(3,printLine("fgets()
(4,charData = (char)
(5,data)
(6,charData)
(7,data = (short)
(8,CHAR_ARRAY_SIZE)
(9,stdin)
(10,charData)
(11,"")
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,data = -1)
(14,printHexCharLine(charData)
(15,)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,(short)
(18,charData)
(19,inputBuffer)
(20,char)
(21,)
(22,)
(23,NULL)
(24,data)
(25,inputBuffer)
(26,inputBuffer)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,data)
(29,(char)
(30,inputBuffer)
(31,atoi(inputBuffer)
(32,)
(33,data)
(34,RET)
(35,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,short)
(37,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^