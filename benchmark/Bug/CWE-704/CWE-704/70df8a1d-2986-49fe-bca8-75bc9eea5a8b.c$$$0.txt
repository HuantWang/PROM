-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
39,42
41,42
42,43
44,45
46,47
46,48
46,49
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
53,54
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
79,80
79,81
79,82
79,83
79,84
79,85
80,81
81,82
81,83
83,84
83,85
85,86
87,88
88,89
88,90
90,91
90,92
90,93
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
103,104
103,105
106,107
107,108
107,109
108,109
108,110
109,110
111,112
111,113
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
139,140
140,141
140,142
141,142
143,144
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,43,45,50,52,54,56,58,63,66,67,70,72,77,78,82,84,86,89,91,93,95,99,101,102,104,105,110,112,113,114,118,119,124,126,128,130,135,137,138,142,144
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
47,48
47,49
61,62
61,63
103,104
103,105
107,108
107,109
111,112
111,113
116,117
116,118
132,133
132,134
-----guardedBy-----
52,72
118,137
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_17_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(0,36,0)
(9,43,0)
(52,27,0)
(2,47,0)
(60,63,0)
(46,36,0)
(72,26,0)
(1,61,0)
(61,47,0)
(63,68,0)
(7,43,0)
(10,36,0)
(63,60,0)
(57,18,0)
(19,52,0)
(12,29,0)
(65,6,0)
(62,37,0)
(66,41,0)
(8,52,0)
(45,19,0)
(70,17,0)
(51,17,0)
(38,53,0)
(37,6,0)
(16,38,0)
(32,19,0)
(18,11,0)
(30,66,0)
(18,63,0)
(28,11,0)
(67,0,0)
(53,38,0)
(17,51,0)
(6,37,0)
(35,47,0)
(60,14,0)
(34,47,0)
(33,11,0)
(55,26,0)
(5,47,0)
(40,71,0)
(48,12,0)
(39,0,0)
(51,47,0)
(71,11,0)
(50,34,0)
(31,6,0)
(56,18,0)
(64,17,0)
(4,51,0)
(20,61,0)
(37,34,0)
(18,66,0)
(44,10,0)
(25,38,0)
(2,61,0)
(14,60,0)
(47,43,0)
(69,2,0)
(73,60,0)
(26,11,0)
(11,43,0)
(38,19,0)
(49,36,0)
(21,43,0)
(59,38,0)
(13,51,0)
(22,73,0)
(73,19,0)
(3,63,0)
(24,71,0)
(58,53,0)
(71,61,0)
(15,47,0)
(71,63,0)
(18,61,0)
(23,71,0)
(26,63,0)
(54,52,0)
(71,41,0)
(60,73,0)
(62,51,1)
(34,50,1)
(31,62,1)
(45,0,1)
(57,56,1)
(23,26,1)
(40,23,1)
(71,63,1)
(13,61,1)
(10,36,1)
(38,16,1)
(25,59,1)
(59,19,1)
(58,38,1)
(55,72,1)
(63,60,1)
(53,58,1)
(46,11,1)
(56,71,1)
(44,63,1)
(6,65,1)
(0,36,1)
(39,67,1)
(20,0,1)
(33,28,1)
(48,53,1)
(44,12,1)
(67,36,1)
(66,30,1)
(16,25,1)
(50,37,1)
(18,11,1)
(18,61,1)
(49,46,1)
(0,39,1)
(53,38,1)
(51,17,1)
(65,31,1)
(71,24,1)
(3,53,1)
(2,69,1)
(24,40,1)
(69,66,1)
(37,6,1)
(61,1,1)
(12,48,1)
(73,22,1)
(70,64,1)
(11,33,1)
(73,19,1)
(60,14,1)
(36,49,1)
(71,61,1)
(69,26,1)
(2,61,1)
(64,4,1)
(67,10,1)
(17,70,1)
(22,3,1)
(10,44,1)
(1,20,1)
(42,2,1)
(32,45,1)
(18,57,1)
(26,63,1)
(71,11,1)
(30,18,1)
(26,55,1)
(19,32,1)
(4,13,1)
(26,11,1)
(72,34,1)
(38,19,1)
(60,73,1)
(18,63,1)
(16,0,2)
(23,26,2)
(73,53,2)
(3,53,2)
(18,61,2)
(53,0,2)
(19,0,2)
(38,0,2)
(24,26,2)
(30,26,2)
(56,26,2)
(71,63,2)
(0,0,2)
(10,36,2)
(26,11,2)
(39,0,2)
(40,26,2)
(0,36,2)
(12,53,2)
(37,6,2)
(22,53,2)
(32,0,2)
(18,11,2)
(53,38,2)
(60,53,2)
(57,26,2)
(66,26,2)
(26,63,2)
(63,53,2)
(71,11,2)
(60,14,2)
(71,61,2)
(18,26,2)
(71,26,2)
(51,17,2)
(59,0,2)
(48,53,2)
(44,0,2)
(58,0,2)
(18,63,2)
(25,0,2)
(10,0,2)
(67,0,2)
(38,19,2)
(2,61,2)
(63,60,2)
(60,73,2)
(45,0,2)
(73,19,2)
-----------------------------------
(0,i < 1)
(1,"")
(2,printLine(dest)
(3,data)
(4,\\\'A\\\')
(5,dest)
(6,100-1)
(7,for(i = 0; i < 1; i++)
(8,inputBuffer)
(9,data)
(10,i++)
(11,data = 0)
(12,printLine("fgets()
(13,source)
(14,short)
(15,if (data < 100)
(16,stdin)
(17,100-1)
(18,dest[data])
(19,inputBuffer[CHAR_ARRAY_SIZE] = "")
(20,dest)
(21,i)
(22,inputBuffer)
(23,dest)
(24,data)
(25,CHAR_ARRAY_SIZE)
(26,data < 100)
(27,)
(28,data)
(29,)
(30,\\\'\\\\0\\\')
(31,100)
(32,"")
(33,0)
(34,source[100-1] = \\\'\\\\0\\\')
(35,source)
(36,i = 0)
(37,source[100-1])
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,1)
(40,source)
(41,)
(42,RET)
(43,)
(44,i)
(45,inputBuffer)
(46,i)
(47,)
(48,"fgets()
(49,0)
(50,\\\'\\\\0\\\')
(51,memset(source, \\\'A\\\', 100-1)
(52,)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,100)
(56,dest)
(57,data)
(58,NULL)
(59,inputBuffer)
(60,(short)
(61,dest[100] = "")
(62,source)
(63,data = (short)
(64,100)
(65,1)
(66,dest[data] = \\\'\\\\0\\\')
(67,i)
(68,)
(69,dest)
(70,1)
(71,memcpy(dest, source, data)
(72,data)
(73,atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^