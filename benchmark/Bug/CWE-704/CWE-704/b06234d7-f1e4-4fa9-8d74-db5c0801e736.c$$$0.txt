-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
23,24
23,25
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(1,10,0)
(45,43,0)
(24,37,0)
(31,18,0)
(52,1,0)
(44,27,0)
(52,31,0)
(19,52,0)
(35,14,0)
(5,48,0)
(11,31,0)
(0,34,0)
(22,52,0)
(10,1,0)
(23,28,0)
(42,18,0)
(37,35,0)
(50,34,0)
(33,8,0)
(36,35,0)
(18,14,0)
(31,52,0)
(44,1,0)
(12,14,0)
(43,48,0)
(31,35,0)
(2,28,0)
(9,38,0)
(38,27,0)
(48,1,0)
(16,35,0)
(25,34,0)
(43,14,0)
(33,46,0)
(16,14,0)
(27,38,0)
(6,43,0)
(8,1,0)
(33,35,0)
(13,16,0)
(23,29,0)
(41,44,0)
(40,4,0)
(48,27,0)
(52,27,0)
(17,1,0)
(32,44,0)
(39,48,0)
(1,7,0)
(8,27,0)
(49,37,0)
(27,34,0)
(28,23,0)
(43,35,0)
(8,33,0)
(20,14,0)
(46,33,0)
(3,27,0)
(4,14,0)
(4,35,0)
(48,43,0)
(35,33,0)
(21,8,0)
(4,40,1)
(44,1,1)
(8,1,1)
(21,36,1)
(8,27,1)
(38,9,1)
(44,27,1)
(8,21,1)
(31,35,1)
(27,38,1)
(52,19,1)
(6,45,1)
(16,13,1)
(22,11,1)
(48,1,1)
(16,35,1)
(44,41,1)
(33,8,1)
(43,48,1)
(13,4,1)
(31,52,1)
(15,27,1)
(43,35,1)
(37,35,1)
(45,37,1)
(39,5,1)
(23,28,1)
(45,23,1)
(35,33,1)
(41,32,1)
(1,10,1)
(24,35,1)
(28,2,1)
(48,39,1)
(36,44,1)
(37,49,1)
(10,17,1)
(9,3,1)
(42,31,1)
(49,24,1)
(11,43,1)
(2,37,1)
(5,6,1)
(33,46,1)
(48,27,1)
(30,44,1)
(18,42,1)
(52,1,1)
(32,1,1)
(52,27,1)
(32,15,1)
(30,16,1)
(40,18,1)
(4,35,1)
(17,15,1)
(19,22,1)
(23,28,2)
(36,44,2)
(8,44,2)
(48,1,2)
(17,15,2)
(16,35,2)
(52,44,2)
(48,27,2)
(21,44,2)
(27,38,2)
(33,44,2)
(33,8,2)
(31,35,2)
(35,44,2)
(4,44,2)
(23,37,2)
(52,1,2)
(1,10,2)
(5,44,2)
(4,35,2)
(48,44,2)
(10,15,2)
(42,44,2)
(16,44,2)
(19,44,2)
(45,44,2)
(40,44,2)
(39,44,2)
(22,44,2)
(28,37,2)
(33,46,2)
(18,44,2)
(13,44,2)
(52,27,2)
(8,1,2)
(44,1,2)
(49,44,2)
(6,44,2)
(43,48,2)
(37,44,2)
(24,44,2)
(1,15,2)
(35,33,2)
(43,35,2)
(11,44,2)
(2,37,2)
(37,35,2)
(31,52,2)
(44,27,2)
(43,44,2)
(31,44,2)
(8,27,2)
-----------------------------------
(0,if (data < 100)
(1,data = RAND32()
(2,1)
(3,data)
(4,printLine(dataBuffer)
(5,data)
(6,\'A\')
(7,)
(8,malloc(data)
(9,1)
(10,RAND32()
(11,dataBuffer)
(12,if (dataBuffer == NULL)
(13,dataBuffer)
(14,)
(15,staticReturnsTrue()
(16,free(dataBuffer)
(17,data)
(18,dataBuffer[data-1] = '\\\\0')
(19,1)
(20,dataBuffer)
(21,data)
(22,data)
(23,exit(-1)
(24,dataBuffer)
(25,data)
(26,'A')
(27,data = -1)
(28,-1)
(29,)
(30,RET)
(31,dataBuffer[data-1])
(32,data)
(33,(char *)
(34,)
(35,* dataBuffer = (char *)
(36,dataBuffer)
(37,dataBuffer == NULL)
(38,-1)
(39,1)
(40,dataBuffer)
(41,100)
(42,'\\\\0')
(43,memset(dataBuffer, 'A', data-1)
(44,data < 100)
(45,dataBuffer)
(46,char *)
(47,\'\\\\0\')
(48,data-1)
(49,NULL)
(50,if(staticReturnsTrue()
(51,dataBuffer[data-1] = \'\\\\0\')
(52,data-1)
(53,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^