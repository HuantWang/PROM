-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
23,24
23,25
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(26,50,0)
(53,44,0)
(41,22,0)
(33,16,0)
(8,33,0)
(31,43,0)
(39,23,0)
(50,48,0)
(5,48,0)
(28,19,0)
(37,48,0)
(2,36,0)
(14,19,0)
(22,14,0)
(39,51,0)
(30,16,0)
(9,47,0)
(27,36,0)
(17,9,0)
(22,48,0)
(6,36,0)
(16,39,0)
(42,50,0)
(50,39,0)
(31,7,0)
(48,1,0)
(45,23,0)
(4,27,0)
(23,39,0)
(53,47,0)
(47,36,0)
(14,47,0)
(14,22,0)
(48,49,0)
(37,39,0)
(52,37,0)
(10,16,0)
(3,36,0)
(33,47,0)
(22,39,0)
(6,47,0)
(53,37,0)
(19,36,0)
(16,33,0)
(0,33,0)
(49,48,0)
(34,51,0)
(47,53,0)
(25,9,0)
(13,51,0)
(18,43,0)
(44,53,0)
(33,36,0)
(46,47,0)
(43,31,0)
(37,53,0)
(38,14,0)
(27,47,0)
(12,6,0)
(24,51,0)
(32,22,0)
(11,39,0)
(16,48,0)
(22,41,1)
(26,15,1)
(26,48,1)
(0,9,1)
(9,47,1)
(33,16,1)
(45,11,1)
(22,48,1)
(39,23,1)
(4,19,1)
(6,47,1)
(10,8,1)
(53,44,1)
(30,10,1)
(50,42,1)
(16,30,1)
(17,25,1)
(27,47,1)
(28,14,1)
(21,50,1)
(0,31,1)
(5,15,1)
(27,4,1)
(50,48,1)
(8,0,1)
(9,17,1)
(49,5,1)
(14,22,1)
(37,48,1)
(47,53,1)
(32,38,1)
(25,47,1)
(53,37,1)
(22,39,1)
(16,39,1)
(43,18,1)
(42,26,1)
(19,28,1)
(16,48,1)
(46,50,1)
(18,9,1)
(23,45,1)
(37,52,1)
(21,6,1)
(52,46,1)
(33,47,1)
(37,39,1)
(48,49,1)
(12,27,1)
(38,33,1)
(50,39,1)
(14,47,1)
(6,12,1)
(15,39,1)
(31,43,1)
(41,32,1)
(5,15,2)
(22,39,2)
(41,50,2)
(9,50,2)
(9,47,2)
(14,47,2)
(17,50,2)
(6,47,2)
(28,50,2)
(16,48,2)
(12,50,2)
(14,50,2)
(32,50,2)
(22,48,2)
(53,44,2)
(19,50,2)
(43,9,2)
(27,47,2)
(14,22,2)
(46,50,2)
(37,48,2)
(38,50,2)
(33,16,2)
(30,50,2)
(49,15,2)
(18,9,2)
(52,50,2)
(8,50,2)
(48,49,2)
(33,47,2)
(50,39,2)
(16,50,2)
(37,39,2)
(31,9,2)
(27,50,2)
(53,50,2)
(31,43,2)
(6,50,2)
(39,23,2)
(0,50,2)
(47,53,2)
(16,39,2)
(48,15,2)
(10,50,2)
(37,50,2)
(4,50,2)
(33,50,2)
(53,37,2)
(50,48,2)
(25,50,2)
(47,50,2)
(22,50,2)
-----------------------------------
(0,dataBuffer)
(1,)
(2,if (dataBuffer == NULL)
(3,dataBuffer)
(4,dataBuffer)
(5,data)
(6,free(dataBuffer)
(7,)
(8,\'A\')
(9,dataBuffer == NULL)
(10,data)
(11,data)
(12,dataBuffer)
(13,data)
(14,dataBuffer[data-1])
(15,globalReturnsTrue()
(16,data-1)
(17,NULL)
(18,1)
(19,dataBuffer[data-1] = \'\\\\0\')
(20,dataBuffer[data-1] = '\\\\0')
(21,RET)
(22,data-1)
(23,-1)
(24,if (data < 100)
(25,dataBuffer)
(26,data)
(27,printLine(dataBuffer)
(28,'\\\\0')
(29,'A')
(30,1)
(31,exit(-1)
(32,data)
(33,memset(dataBuffer, 'A', data-1)
(34,if(globalReturnsTrue()
(35,memset(dataBuffer, \'A\', data-1)
(36,)
(37,malloc(data)
(38,dataBuffer)
(39,data = -1)
(40,\'\\\\0\')
(41,1)
(42,100)
(43,-1)
(44,char *)
(45,1)
(46,dataBuffer)
(47,* dataBuffer = (char *)
(48,data = RAND32()
(49,RAND32()
(50,data < 100)
(51,)
(52,data)
(53,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^