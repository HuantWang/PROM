-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
63,69
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,68,70,73,75,77,79,83,85,86,88,89,94,96,97,98,102,103,108,110,112,114,119,121,122,126,128
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
87,88
87,89
91,92
91,93
95,96
95,97
100,101
100,102
116,117
116,118
-----guardedBy-----
40,56
102,121
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_07_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(8,4,0)
(16,57,0)
(44,26,0)
(14,50,0)
(38,7,0)
(44,29,0)
(12,46,0)
(52,4,0)
(34,4,0)
(65,39,0)
(60,29,0)
(27,12,0)
(50,5,0)
(15,12,0)
(11,2,0)
(37,39,0)
(47,44,0)
(27,11,0)
(50,12,0)
(11,28,0)
(49,50,0)
(39,62,0)
(31,5,0)
(18,5,0)
(53,12,0)
(6,36,0)
(19,40,0)
(51,53,0)
(37,5,0)
(33,40,0)
(29,40,0)
(56,44,0)
(55,54,0)
(22,29,0)
(1,36,0)
(53,7,0)
(46,12,0)
(25,46,0)
(13,10,0)
(50,9,0)
(41,37,0)
(35,20,0)
(4,52,0)
(2,11,0)
(43,39,0)
(30,57,0)
(40,63,0)
(5,39,0)
(26,44,0)
(21,2,0)
(48,62,0)
(10,39,0)
(3,26,0)
(52,10,0)
(66,20,0)
(53,11,0)
(2,29,0)
(17,27,0)
(45,50,0)
(7,9,0)
(64,11,0)
(0,27,0)
(20,36,0)
(53,5,0)
(42,62,0)
(23,39,0)
(58,52,0)
(36,20,0)
(61,44,0)
(12,62,0)
(54,59,0)
(50,11,0)
(32,53,0)
(20,39,0)
(5,18,1)
(27,12,1)
(45,49,1)
(46,25,1)
(31,11,1)
(0,17,1)
(64,26,1)
(10,13,1)
(53,51,1)
(50,5,1)
(21,64,1)
(36,1,1)
(13,52,1)
(25,15,1)
(24,37,1)
(55,26,1)
(50,12,1)
(61,47,1)
(7,38,1)
(14,27,1)
(53,5,1)
(29,60,1)
(11,2,1)
(47,56,1)
(32,50,1)
(18,31,1)
(44,61,1)
(26,3,1)
(6,35,1)
(3,44,1)
(60,22,1)
(22,57,1)
(12,46,1)
(54,55,1)
(2,29,1)
(52,4,1)
(53,11,1)
(51,32,1)
(17,10,1)
(35,66,1)
(58,20,1)
(34,8,1)
(4,34,1)
(49,14,1)
(50,45,1)
(31,54,1)
(1,6,1)
(38,53,1)
(53,12,1)
(66,5,1)
(27,0,1)
(27,11,1)
(30,16,1)
(8,58,1)
(37,5,1)
(26,44,1)
(20,36,1)
(50,11,1)
(44,29,1)
(16,12,1)
(56,29,1)
(31,57,1)
(57,30,1)
(2,21,1)
(37,41,1)
(41,7,1)
(41,27,1)
(2,29,2)
(7,27,2)
(2,26,2)
(52,4,2)
(3,57,2)
(61,57,2)
(44,29,2)
(21,26,2)
(54,26,2)
(37,5,2)
(20,36,2)
(12,46,2)
(45,27,2)
(27,11,2)
(26,44,2)
(11,2,2)
(53,12,2)
(56,57,2)
(11,26,2)
(53,5,2)
(55,26,2)
(47,57,2)
(26,57,2)
(50,11,2)
(53,27,2)
(50,5,2)
(38,27,2)
(29,57,2)
(64,26,2)
(50,12,2)
(44,57,2)
(49,27,2)
(53,11,2)
(32,27,2)
(50,27,2)
(22,57,2)
(60,57,2)
(27,12,2)
(14,27,2)
(51,27,2)
-----------------------------------
(0,100)
(1,1)
(2,atoi(inputBuffer)
(3,NULL)
(4,100-1)
(5,dest[100] = "")
(6,100)
(7,dest[data] = \\\'\\\\0\\\')
(8,100)
(9,)
(10,source[100-1] = \\\'\\\\0\\\')
(11,data = atoi(inputBuffer)
(12,data = -1)
(13,\\\'\\\\0\\\')
(14,dest)
(15,data)
(16,staticFive)
(17,data)
(18,"")
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,memset(source, \\\'A\\\', 100-1)
(21,inputBuffer)
(22,inputBuffer)
(23,source)
(24,RET)
(25,1)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,data < 100)
(28,)
(29,inputBuffer[CHAR_ARRAY_SIZE] = "")
(30,5)
(31,dest)
(32,dest)
(33,inputBuffer)
(34,1)
(35,\\\'A\\\')
(36,100-1)
(37,printLine(dest)
(38,\\\'\\\\0\\\')
(39,)
(40,)
(41,dest)
(42,data)
(43,dest)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,data)
(46,-1)
(47,CHAR_ARRAY_SIZE)
(48,if(staticFive==5)
(49,source)
(50,strncpy(dest, source, data)
(51,data)
(52,source[100-1])
(53,dest[data])
(54,printLine("fgets()
(55,"fgets()
(56,inputBuffer)
(57,staticFive==5)
(58,source)
(59,)
(60,"")
(61,stdin)
(62,)
(63,)
(64,data)
(65,if (data < 100)
(66,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^