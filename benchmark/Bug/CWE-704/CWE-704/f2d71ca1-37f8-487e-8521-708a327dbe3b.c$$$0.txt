-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
46,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,36,37,41,43,47,48,50,54,56
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_char_12_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_char_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(21,3,0)
(10,2,0)
(19,9,0)
(18,2,0)
(4,21,0)
(9,13,0)
(22,18,0)
(4,13,0)
(3,1,0)
(4,14,0)
(2,1,0)
(8,17,0)
(27,12,0)
(5,21,0)
(2,18,0)
(12,24,0)
(13,9,0)
(24,12,0)
(4,12,0)
(14,4,0)
(0,9,0)
(13,6,0)
(26,4,0)
(17,21,0)
(23,13,0)
(17,3,0)
(12,7,0)
(20,3,0)
(16,1,0)
(25,1,0)
(21,4,0)
(11,2,1)
(4,12,1)
(4,26,1)
(18,22,1)
(24,27,1)
(2,18,1)
(0,23,1)
(5,13,1)
(17,21,1)
(26,5,1)
(5,12,1)
(21,4,1)
(8,21,1)
(27,11,1)
(17,8,1)
(4,13,1)
(19,0,1)
(13,9,1)
(4,14,1)
(9,19,1)
(12,24,1)
(15,17,1)
(22,10,1)
(23,11,1)
(0,11,2)
(24,11,2)
(21,4,2)
(27,11,2)
(12,11,2)
(19,11,2)
(2,18,2)
(13,9,2)
(9,11,2)
(12,24,2)
(4,13,2)
(13,11,2)
(17,21,2)
(4,12,2)
(4,14,2)
(23,11,2)
-----------------------------------
(0,CHAR_MAX)
(1,)
(2,data = -1)
(3,)
(4,(char)
(5,charData)
(6,)
(7,)
(8,charData)
(9,CHAR_MAX-5)
(10,data)
(11,globalReturnsTrueOrFalse()
(12,data = RAND32()
(13,data = CHAR_MAX-5)
(14,char)
(15,RET)
(16,data)
(17,printHexCharLine(charData)
(18,-1)
(19,5)
(20,charData)
(21,charData = (char)
(22,1)
(23,data)
(24,RAND32()
(25,if(globalReturnsTrueOrFalse()
(26,data)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^