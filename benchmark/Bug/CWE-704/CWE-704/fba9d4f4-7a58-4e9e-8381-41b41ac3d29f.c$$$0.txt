-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,32,0)
(33,47,0)
(8,16,0)
(41,17,0)
(1,30,0)
(22,16,0)
(23,27,0)
(42,15,0)
(2,51,0)
(9,1,0)
(15,30,0)
(14,25,0)
(36,22,0)
(20,2,0)
(17,5,0)
(43,1,0)
(35,13,0)
(30,26,0)
(10,5,0)
(26,31,0)
(22,18,0)
(12,22,0)
(15,5,0)
(50,2,0)
(26,30,0)
(34,30,0)
(27,5,0)
(11,25,0)
(13,2,0)
(48,41,0)
(16,22,0)
(25,11,0)
(0,41,0)
(31,2,0)
(4,47,0)
(45,5,0)
(19,10,0)
(30,5,0)
(29,51,0)
(16,2,0)
(2,47,0)
(44,48,0)
(26,28,0)
(24,31,0)
(41,48,0)
(41,30,0)
(6,47,0)
(40,10,0)
(28,26,0)
(10,13,0)
(27,30,0)
(46,20,0)
(7,48,0)
(38,20,0)
(39,13,0)
(21,17,0)
(48,2,0)
(51,2,0)
(31,26,0)
(13,10,0)
(10,30,0)
(49,5,0)
(15,42,1)
(34,20,1)
(31,2,1)
(27,30,1)
(39,19,1)
(31,24,1)
(16,2,1)
(41,30,1)
(21,41,1)
(12,36,1)
(40,1,1)
(11,25,1)
(35,39,1)
(26,31,1)
(14,1,1)
(1,43,1)
(1,30,1)
(22,16,1)
(27,23,1)
(37,20,1)
(42,17,1)
(8,12,1)
(36,3,1)
(20,46,1)
(37,27,1)
(43,9,1)
(19,40,1)
(38,3,1)
(51,29,1)
(48,2,1)
(10,13,1)
(15,30,1)
(41,48,1)
(17,21,1)
(40,11,1)
(30,26,1)
(7,44,1)
(10,30,1)
(13,35,1)
(20,2,1)
(26,28,1)
(16,8,1)
(46,38,1)
(3,2,1)
(44,0,1)
(29,50,1)
(23,15,1)
(24,34,1)
(13,2,1)
(38,22,1)
(2,51,1)
(9,30,1)
(25,14,1)
(0,10,1)
(48,7,1)
(1,20,2)
(9,20,2)
(27,30,2)
(26,28,2)
(31,2,2)
(13,2,2)
(11,1,2)
(43,20,2)
(48,20,2)
(16,2,2)
(10,30,2)
(41,48,2)
(27,20,2)
(30,20,2)
(26,31,2)
(7,20,2)
(16,3,2)
(41,30,2)
(30,26,2)
(42,20,2)
(10,20,2)
(20,2,2)
(12,3,2)
(22,16,2)
(34,20,2)
(31,20,2)
(39,20,2)
(48,2,2)
(13,20,2)
(41,20,2)
(44,20,2)
(21,20,2)
(19,20,2)
(8,3,2)
(14,1,2)
(25,1,2)
(11,25,2)
(10,13,2)
(40,20,2)
(36,3,2)
(15,30,2)
(15,20,2)
(23,20,2)
(26,20,2)
(22,3,2)
(35,20,2)
(2,51,2)
(1,30,2)
(0,20,2)
(24,20,2)
(17,20,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer == NULL)
(2,data = -1)
(3,1)
(4,if (data < 100)
(5,)
(6,if(1)
(7,1)
(8,data)
(9,dataBuffer)
(10,memset(dataBuffer, \\\'A\\\', data-1)
(11,exit(-1)
(12,"%d")
(13,data-1)
(14,1)
(15,printLine(dataBuffer)
(16,&data)
(17,dataBuffer[data-1] = \\\'\\\\0\\\')
(18,)
(19,\\\'A\\\')
(20,data < 100)
(21,\\\'\\\\0\\\')
(22,fscanf(stdin, "%d", &data)
(23,dataBuffer)
(24,data)
(25,-1)
(26,(char *)
(27,free(dataBuffer)
(28,char *)
(29,1)
(30,* dataBuffer = (char *)
(31,malloc(data)
(32,)
(33,data)
(34,dataBuffer)
(35,1)
(36,stdin)
(37,RET)
(38,data)
(39,data)
(40,dataBuffer)
(41,dataBuffer[data-1])
(42,dataBuffer)
(43,NULL)
(44,data)
(45,dataBuffer)
(46,100)
(47,)
(48,data-1)
(49,if (dataBuffer == NULL)
(50,data)
(51,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^