-----label-----
1
-----code-----
static int badSource(int data)
{
    if(badStatic)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
15,16
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
44,47
44,48
44,49
44,50
44,51
44,52
44,53
44,54
44,55
45,46
46,47
46,48
47,48
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
71,72
74,75
75,76
76,77
78,79
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
108,109
110,111
110,112
111,112
111,113
112,113
112,114
112,115
112,116
113,114
115,116
117,118
117,119
118,119
118,120
119,120
121,122
123,124
124,125
126,127
127,128
128,129
130,131
132,133
134,135
135,136
135,137
136,137
138,139
138,140
138,141
138,142
138,143
139,140
141,142
143,144
145,146
145,147
146,147
150,151
150,152
151,152
151,153
152,153
152,154
153,154
155,156
157,158
157,159
158,159
161,162
163,164
164,165
164,166
165,166
165,167
166,167
168,169
171,172
172,173
172,174
173,174
175,176
175,177
176,177
178,179
181,182
181,183
182,183
182,184
183,184
185,186
187,188
188,189
189,190
189,191
190,191
192,193
194,195
195,196
-----nextToken-----
2,4,6,8,12,17,19,23,25,29,31,34,37,39,42,48,51,53,55,57,61,63,65,69,72,73,77,82,83,85,91,92,93,96,98,103,104,107,109,114,116,120,122,125,129,131,133,137,140,142,144,147,148,149,154,156,159,160,162,167,169,170,174,177,179,180,184,186,191,193,196
-----computeFrom-----
46,47
46,48
59,60
59,61
79,80
79,81
87,88
87,89
100,101
100,102
111,112
111,113
135,136
135,137
145,146
145,147
151,152
151,153
152,153
152,154
157,158
157,159
164,165
164,166
172,173
172,174
182,183
182,184
-----guardedBy-----
184,193
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int data){    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
static int
badSource(int data)
badSource
int data
int
data
data
{    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
badStatic
badStatic
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(108,15,0)
(119,79,0)
(48,69,0)
(101,90,0)
(107,124,0)
(64,122,0)
(27,49,0)
(40,29,0)
(117,50,0)
(4,74,0)
(79,119,0)
(3,72,0)
(106,29,0)
(92,88,0)
(48,74,0)
(41,11,0)
(26,32,0)
(78,16,0)
(83,36,0)
(31,15,0)
(114,89,0)
(42,64,0)
(98,90,0)
(128,77,0)
(119,112,0)
(58,75,0)
(16,74,0)
(34,90,0)
(75,77,0)
(12,111,0)
(112,20,0)
(111,76,0)
(104,112,0)
(50,43,0)
(116,112,0)
(79,20,0)
(19,79,0)
(56,72,0)
(91,42,0)
(99,118,0)
(28,2,0)
(57,10,0)
(65,25,0)
(120,87,0)
(76,111,0)
(118,55,0)
(0,87,0)
(80,2,0)
(2,45,0)
(96,13,0)
(51,55,0)
(111,55,0)
(25,46,0)
(55,74,0)
(89,111,0)
(20,75,0)
(30,79,0)
(48,103,0)
(55,118,0)
(75,20,0)
(90,21,0)
(43,94,0)
(70,125,0)
(122,64,0)
(24,20,0)
(32,90,0)
(81,25,0)
(59,122,0)
(54,66,0)
(46,74,0)
(33,38,0)
(60,76,0)
(66,89,0)
(85,74,0)
(47,90,0)
(43,50,0)
(103,48,0)
(77,75,0)
(95,102,0)
(71,86,0)
(14,52,0)
(110,74,0)
(6,118,0)
(29,69,0)
(8,32,0)
(5,103,0)
(68,90,0)
(38,46,0)
(89,114,0)
(126,90,0)
(3,13,0)
(52,23,0)
(115,77,0)
(42,49,0)
(111,102,0)
(29,48,0)
(123,105,0)
(39,90,0)
(7,16,0)
(29,124,0)
(53,90,0)
(87,37,0)
(64,74,0)
(20,74,0)
(89,66,0)
(49,42,0)
(15,32,0)
(3,74,0)
(35,75,0)
(67,86,0)
(9,49,0)
(61,63,0)
(52,55,0)
(113,74,0)
(52,32,0)
(37,74,0)
(112,119,0)
(22,88,0)
(84,3,0)
(15,55,0)
(111,89,0)
(2,20,0)
(109,105,0)
(102,111,0)
(44,90,0)
(43,88,0)
(121,94,0)
(46,38,0)
(94,43,0)
(86,55,0)
(13,3,0)
(45,74,0)
(75,55,0)
(62,75,0)
(127,118,0)
(88,43,0)
(105,90,0)
(72,3,0)
(18,45,0)
(97,37,0)
(1,48,0)
(20,75,1)
(96,86,1)
(31,41,1)
(115,128,1)
(22,92,1)
(84,13,1)
(88,22,1)
(91,49,1)
(79,20,1)
(31,57,1)
(6,127,1)
(29,40,1)
(40,17,1)
(32,26,1)
(26,8,1)
(31,61,1)
(120,3,1)
(111,89,1)
(57,94,1)
(62,58,1)
(52,14,1)
(87,0,1)
(65,64,1)
(122,59,1)
(111,55,1)
(73,52,1)
(121,43,1)
(55,118,1)
(92,32,1)
(15,55,1)
(27,37,1)
(8,105,1)
(66,54,1)
(25,81,1)
(95,111,1)
(102,111,1)
(15,32,1)
(35,77,1)
(40,73,1)
(77,115,1)
(28,119,1)
(18,2,1)
(29,69,1)
(104,116,1)
(48,69,1)
(109,17,1)
(102,95,1)
(72,56,1)
(93,48,1)
(119,112,1)
(61,102,1)
(59,42,1)
(42,91,1)
(128,62,1)
(94,43,1)
(94,121,1)
(30,19,1)
(118,99,1)
(33,25,1)
(48,103,1)
(117,88,1)
(60,89,1)
(13,96,1)
(16,78,1)
(31,83,1)
(51,16,1)
(75,35,1)
(0,120,1)
(111,76,1)
(9,27,1)
(92,93,1)
(64,122,1)
(14,15,1)
(67,55,1)
(37,97,1)
(105,123,1)
(40,70,1)
(75,55,1)
(86,55,1)
(41,119,1)
(80,28,1)
(58,24,1)
(97,87,1)
(42,49,1)
(79,30,1)
(38,33,1)
(54,12,1)
(29,48,1)
(1,45,1)
(70,73,1)
(56,84,1)
(89,66,1)
(24,102,1)
(31,93,1)
(49,9,1)
(123,109,1)
(116,20,1)
(81,65,1)
(127,51,1)
(43,50,1)
(112,104,1)
(71,67,1)
(99,6,1)
(3,72,1)
(12,46,1)
(75,77,1)
(83,86,1)
(43,88,1)
(86,71,1)
(78,7,1)
(46,38,1)
(52,32,1)
(7,94,1)
(2,80,1)
(5,1,1)
(50,117,1)
(3,13,1)
(119,79,1)
(108,31,1)
(19,112,1)
(112,20,1)
(52,55,1)
(76,60,1)
(15,108,1)
(73,15,1)
(106,29,1)
(89,114,1)
(45,18,1)
(2,20,1)
(103,5,1)
(87,86,2)
(121,17,2)
(7,94,2)
(1,119,2)
(88,17,2)
(46,38,2)
(86,55,2)
(43,88,2)
(26,17,2)
(8,17,2)
(66,86,2)
(55,118,2)
(88,93,2)
(94,43,2)
(15,55,2)
(86,94,2)
(50,17,2)
(103,119,2)
(52,15,2)
(108,17,2)
(89,86,2)
(13,86,2)
(18,119,2)
(22,93,2)
(37,86,2)
(102,111,2)
(64,86,2)
(43,93,2)
(42,86,2)
(45,119,2)
(70,73,2)
(48,69,2)
(24,102,2)
(73,17,2)
(43,17,2)
(117,17,2)
(32,17,2)
(41,119,2)
(97,86,2)
(77,102,2)
(71,94,2)
(89,114,2)
(54,86,2)
(42,49,2)
(50,93,2)
(52,55,2)
(35,102,2)
(59,86,2)
(15,17,2)
(60,86,2)
(0,86,2)
(2,119,2)
(111,55,2)
(20,102,2)
(122,86,2)
(99,94,2)
(14,15,2)
(116,102,2)
(89,66,2)
(96,86,2)
(30,112,2)
(3,72,2)
(105,17,2)
(118,94,2)
(20,75,2)
(28,119,2)
(48,119,2)
(83,86,2)
(95,86,2)
(12,86,2)
(5,119,2)
(52,32,2)
(106,29,2)
(64,122,2)
(91,86,2)
(16,94,2)
(112,102,2)
(75,55,2)
(3,86,2)
(56,86,2)
(111,86,2)
(38,86,2)
(62,102,2)
(93,119,2)
(84,86,2)
(123,17,2)
(80,119,2)
(78,94,2)
(55,94,2)
(49,86,2)
(43,50,2)
(104,102,2)
(115,102,2)
(29,69,2)
(31,17,2)
(65,86,2)
(119,79,2)
(3,13,2)
(92,93,2)
(121,93,2)
(127,94,2)
(128,102,2)
(76,86,2)
(27,86,2)
(2,20,2)
(51,94,2)
(112,20,2)
(111,89,2)
(81,86,2)
(92,17,2)
(61,102,2)
(79,112,2)
(48,103,2)
(9,86,2)
(33,86,2)
(109,17,2)
(22,17,2)
(58,102,2)
(94,17,2)
(75,77,2)
(111,76,2)
(46,86,2)
(102,86,2)
(19,112,2)
(119,112,2)
(117,93,2)
(67,94,2)
(57,94,2)
(6,94,2)
(29,48,2)
(120,86,2)
(119,102,2)
(25,86,2)
(75,102,2)
(94,93,2)
(72,86,2)
(79,20,2)
(15,32,2)
-----------------------------------
(0,sin_family)
(1,data)
(2,inputBuffer[recvResult])
(3,memset(&service, 0, sizeof(service)
(4,if (recvResult == SOCKET_ERROR || recvResult == 0)
(5,inputBuffer)
(6,SOCK_STREAM)
(7,wsaDataInit)
(8,connectSocket)
(9,sin_addr)
(10,)
(11,)
(12,connectSocket)
(13,&service)
(14,connectSocket)
(15,connectSocket != INVALID_SOCKET)
(16,wsaDataInit = 1)
(17,badStatic)
(18,'\\\\0')
(19,recvResult)
(20,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(21,)
(22,2)
(23,)
(24,recvResult)
(25,service.sin_port)
(26,INVALID_SOCKET)
(27,service)
(28,inputBuffer)
(29,return data;)
(30,0)
(31,connectSocket)
(32,connectSocket = INVALID_SOCKET)
(33,TCP_PORT)
(34,if (connectSocket != INVALID_SOCKET)
(35,0)
(36,)
(37,service.sin_family = AF_INET)
(38,htons(TCP_PORT)
(39,if (wsaDataInit)
(40,data)
(41,break;)
(42,service.sin_addr.s_addr)
(43,WSAStartup(MAKEWORD(2,2)
(44,wsaDataInit)
(45,inputBuffer[recvResult] = '\\\\0')
(46,service.sin_port = htons(TCP_PORT)
(47,connectSocket)
(48,data = atoi(inputBuffer)
(49,service.sin_addr)
(50,&wsaData)
(51,connectSocket)
(52,CLOSE_SOCKET(connectSocket)
(53,do)
(54,service)
(55,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(56,service)
(57,break;)
(58,connectSocket)
(59,IP_ADDRESS)
(60,service)
(61,break;)
(62,inputBuffer)
(63,)
(64,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(65,service)
(66,&service)
(67,connectSocket)
(68,inputBuffer)
(69,int data)
(70,WSACleanup()
(71,INVALID_SOCKET)
(72,sizeof(service)
(73,wsaDataInit)
(74,)
(75,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(76,sizeof(service)
(77,CHAR_ARRAY_SIZE - 1)
(78,1)
(79,recvResult == 0)
(80,recvResult)
(81,sin_port)
(82,\'\\\\0\')
(83,break;)
(84,0)
(85,if (connect(connectSocket, (struct sockaddr*)
(86,connectSocket == INVALID_SOCKET)
(87,service.sin_family)
(88,MAKEWORD(2,2)
(89,(struct sockaddr*)
(90,)
(91,s_addr)
(92,2)
(93,0)
(94,WSAStartup(MAKEWORD(2,2)
(95,SOCKET_ERROR)
(96,service)
(97,AF_INET)
(98,service)
(99,IPPROTO_TCP)
(100,inputBuffer[recvResult] = \'\\\\0\')
(101,wsaData)
(102,connect(connectSocket, (struct sockaddr*)
(103,atoi(inputBuffer)
(104,SOCKET_ERROR)
(105,wsaDataInit = 0)
(106,RET)
(107,if(badStatic)
(108,INVALID_SOCKET)
(109,wsaDataInit)
(110,if (connectSocket == INVALID_SOCKET)
(111,connect(connectSocket, (struct sockaddr*)
(112,recvResult == SOCKET_ERROR)
(113,if (WSAStartup(MAKEWORD(2,2)
(114,struct sockaddr*)
(115,1)
(116,recvResult)
(117,wsaData)
(118,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(119,recvResult == SOCKET_ERROR || recvResult == 0)
(120,service)
(121,NO_ERROR)
(122,inet_addr(IP_ADDRESS)
(123,0)
(124,)
(125,)
(126,recvResult)
(127,AF_INET)
(128,CHAR_ARRAY_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^