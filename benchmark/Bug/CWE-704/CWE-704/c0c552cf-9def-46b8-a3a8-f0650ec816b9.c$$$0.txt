-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_09_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_09_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_09_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_09_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(5,33,0)
(0,23,0)
(52,22,0)
(49,11,0)
(40,38,0)
(7,41,0)
(27,33,0)
(33,27,0)
(47,37,0)
(49,37,0)
(23,35,0)
(25,14,0)
(4,49,0)
(43,23,0)
(12,1,0)
(23,43,0)
(31,14,0)
(8,6,0)
(15,19,0)
(42,35,0)
(53,6,0)
(48,38,0)
(33,14,0)
(35,11,0)
(1,11,0)
(29,14,0)
(24,8,0)
(27,6,0)
(37,43,0)
(26,49,0)
(23,0,0)
(28,6,0)
(11,1,0)
(34,43,0)
(21,25,0)
(27,11,0)
(37,10,0)
(30,34,0)
(22,15,0)
(6,53,0)
(44,43,0)
(3,27,0)
(37,49,0)
(43,14,0)
(35,23,0)
(25,43,0)
(15,22,0)
(33,43,0)
(41,43,0)
(41,14,0)
(20,38,0)
(45,10,0)
(18,33,0)
(8,11,0)
(51,11,0)
(6,2,0)
(10,14,0)
(49,6,0)
(36,27,0)
(17,34,0)
(16,8,0)
(11,38,0)
(35,6,0)
(49,26,1)
(45,37,1)
(15,22,1)
(4,47,1)
(33,27,1)
(12,51,1)
(34,43,1)
(42,44,1)
(13,41,1)
(24,16,1)
(30,43,1)
(9,11,1)
(26,4,1)
(27,11,1)
(16,6,1)
(36,3,1)
(43,23,1)
(11,1,1)
(37,43,1)
(13,8,1)
(6,53,1)
(28,9,1)
(35,42,1)
(5,34,1)
(34,17,1)
(21,10,1)
(44,8,1)
(17,30,1)
(49,11,1)
(16,9,1)
(1,12,1)
(25,21,1)
(23,0,1)
(47,33,1)
(25,43,1)
(37,49,1)
(5,15,1)
(41,7,1)
(35,11,1)
(53,28,1)
(18,5,1)
(8,24,1)
(22,52,1)
(33,43,1)
(27,36,1)
(3,18,1)
(23,35,1)
(8,6,1)
(8,11,1)
(52,34,1)
(35,6,1)
(10,45,1)
(41,43,1)
(27,6,1)
(7,25,1)
(49,6,1)
(5,8,2)
(6,9,2)
(35,6,2)
(37,8,2)
(10,8,2)
(36,8,2)
(21,8,2)
(7,8,2)
(49,8,2)
(15,34,2)
(47,8,2)
(23,0,2)
(49,6,2)
(22,34,2)
(37,43,2)
(8,6,2)
(27,8,2)
(3,8,2)
(23,8,2)
(25,43,2)
(35,8,2)
(52,34,2)
(30,8,2)
(25,8,2)
(49,11,2)
(44,8,2)
(15,22,2)
(6,53,2)
(43,8,2)
(41,43,2)
(23,35,2)
(34,8,2)
(41,8,2)
(11,1,2)
(35,11,2)
(43,23,2)
(33,8,2)
(17,8,2)
(33,27,2)
(28,9,2)
(45,8,2)
(27,11,2)
(18,8,2)
(8,11,2)
(26,8,2)
(4,8,2)
(34,43,2)
(27,6,2)
(53,9,2)
(37,49,2)
(33,43,2)
(42,8,2)
-----------------------------------
(0,char *)
(1,-1)
(2,)
(3,data)
(4,data)
(5,dataBuffer)
(6,data = RAND32()
(7,dataBuffer)
(8,data < 100)
(9,GLOBAL_CONST_TRUE)
(10,dataBuffer[data-1] = \'\\\\0\')
(11,data = -1)
(12,1)
(13,RET)
(14,)
(15,exit(-1)
(16,data)
(17,NULL)
(18,'A')
(19,)
(20,if(GLOBAL_CONST_TRUE)
(21,dataBuffer)
(22,-1)
(23,(char *)
(24,100)
(25,printLine(dataBuffer)
(26,1)
(27,data-1)
(28,data)
(29,dataBuffer)
(30,dataBuffer)
(31,if (dataBuffer == NULL)
(32,dataBuffer[data-1] = '\\\\0')
(33,memset(dataBuffer, \'A\', data-1)
(34,dataBuffer == NULL)
(35,malloc(data)
(36,1)
(37,dataBuffer[data-1])
(38,)
(39,memset(dataBuffer, 'A', data-1)
(40,if (data < 100)
(41,free(dataBuffer)
(42,data)
(43,* dataBuffer = (char *)
(44,dataBuffer)
(45,\'\\\\0\')
(46,'\\\\0')
(47,dataBuffer)
(48,data)
(49,data-1)
(50,\'A\')
(51,data)
(52,1)
(53,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^