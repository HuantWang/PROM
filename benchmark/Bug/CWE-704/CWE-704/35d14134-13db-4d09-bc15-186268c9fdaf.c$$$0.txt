-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_66b_badSink(int dataArray[])
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(6,22,0)
(43,46,0)
(38,32,0)
(44,4,0)
(5,24,0)
(27,13,0)
(4,24,0)
(12,47,0)
(21,11,0)
(15,22,0)
(1,20,0)
(21,22,0)
(43,27,0)
(42,10,0)
(40,13,0)
(48,24,0)
(6,24,0)
(4,22,0)
(30,18,0)
(10,24,0)
(3,43,0)
(28,31,0)
(17,9,0)
(20,21,0)
(46,43,0)
(33,5,0)
(34,24,0)
(26,29,0)
(46,22,0)
(8,13,0)
(45,46,0)
(10,32,0)
(37,32,0)
(23,6,0)
(22,21,0)
(46,5,0)
(35,27,0)
(32,10,0)
(20,27,0)
(31,17,0)
(18,16,0)
(2,47,0)
(18,27,0)
(22,24,0)
(29,22,0)
(7,18,0)
(41,10,0)
(27,18,0)
(17,31,0)
(39,29,0)
(14,43,0)
(47,27,0)
(21,20,0)
(11,21,0)
(10,22,0)
(32,27,0)
(44,6,1)
(37,41,1)
(5,33,1)
(12,27,1)
(10,22,1)
(42,29,1)
(6,22,1)
(23,5,1)
(30,35,1)
(46,43,1)
(33,46,1)
(6,23,1)
(18,16,1)
(20,27,1)
(38,37,1)
(46,22,1)
(21,20,1)
(32,38,1)
(32,27,1)
(15,47,1)
(17,31,1)
(42,17,1)
(27,18,1)
(2,12,1)
(47,27,1)
(43,14,1)
(21,11,1)
(4,22,1)
(10,32,1)
(43,27,1)
(0,4,1)
(0,47,1)
(26,22,1)
(14,3,1)
(22,21,1)
(7,30,1)
(41,42,1)
(39,26,1)
(31,28,1)
(28,29,1)
(29,39,1)
(20,1,1)
(3,45,1)
(29,22,1)
(45,10,1)
(4,44,1)
(47,2,1)
(1,15,1)
(18,7,1)
(10,47,2)
(28,29,2)
(43,47,2)
(5,47,2)
(10,32,2)
(15,47,2)
(43,27,2)
(29,22,2)
(46,47,2)
(18,16,2)
(6,47,2)
(1,47,2)
(39,47,2)
(46,43,2)
(4,22,2)
(45,47,2)
(44,47,2)
(31,29,2)
(20,27,2)
(33,47,2)
(10,22,2)
(27,18,2)
(47,27,2)
(26,47,2)
(37,47,2)
(3,47,2)
(14,47,2)
(32,27,2)
(32,47,2)
(4,47,2)
(29,47,2)
(21,47,2)
(21,11,2)
(22,21,2)
(41,47,2)
(46,22,2)
(17,29,2)
(6,22,2)
(42,47,2)
(21,20,2)
(38,47,2)
(17,31,2)
(23,47,2)
(22,47,2)
(20,47,2)
-----------------------------------
(0,RET)
(1,data)
(2,100)
(3,data)
(4,free(dataBuffer)
(5,dataBuffer[data-1] = \'\\\\0\')
(6,printLine(dataBuffer)
(7,2)
(8,if (data < 100)
(9,)
(10,memset(dataBuffer, 'A', data-1)
(11,char *)
(12,data)
(13,)
(14,1)
(15,dataBuffer)
(16,int dataArray[])
(17,exit(-1)
(18,dataArray[2])
(19,memset(dataBuffer, \'A\', data-1)
(20,malloc(data)
(21,(char *)
(22,* dataBuffer = (char *)
(23,dataBuffer)
(24,)
(25,dataBuffer[data-1] = '\\\\0')
(26,dataBuffer)
(27,data = dataArray[2])
(28,1)
(29,dataBuffer == NULL)
(30,dataArray)
(31,-1)
(32,data-1)
(33,'\\\\0')
(34,dataBuffer)
(35,data)
(36,\'\\\\0\')
(37,data)
(38,1)
(39,NULL)
(40,data)
(41,'A')
(42,dataBuffer)
(43,data-1)
(44,dataBuffer)
(45,dataBuffer)
(46,dataBuffer[data-1])
(47,data < 100)
(48,if (dataBuffer == NULL)
(49,\'A\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^