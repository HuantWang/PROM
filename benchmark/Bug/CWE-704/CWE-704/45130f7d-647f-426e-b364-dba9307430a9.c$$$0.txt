-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_16_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
65,66
65,67
66,67
67,68
67,69
69,70
69,71
71,72
72,73
72,74
73,74
73,75
76,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,64,68,70,74,75,77,81,83
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
-----guardedBy-----
37,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_16_bad(){    short data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_16_bad()
CWE197_Numeric_Truncation_Error__short_fgets_16_bad
{    short data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(37,27,0)
(21,41,0)
(7,41,0)
(24,29,0)
(1,38,0)
(26,39,0)
(23,19,0)
(38,28,0)
(27,8,0)
(33,14,0)
(19,38,0)
(7,20,0)
(4,0,0)
(3,20,0)
(20,37,0)
(9,31,0)
(41,29,0)
(14,7,0)
(30,38,0)
(5,29,0)
(27,36,0)
(14,41,0)
(27,37,0)
(20,7,0)
(25,9,0)
(39,13,0)
(20,0,0)
(34,19,0)
(10,7,0)
(39,19,0)
(16,39,0)
(2,20,0)
(36,19,0)
(22,37,0)
(17,0,0)
(13,39,0)
(8,27,0)
(20,2,0)
(0,29,0)
(36,27,0)
(35,36,0)
(32,4,0)
(12,13,0)
(37,40,0)
(0,4,0)
(15,28,0)
(6,39,0)
(33,7,1)
(36,19,1)
(11,0,1)
(34,23,1)
(4,32,1)
(20,37,1)
(15,9,1)
(9,25,1)
(35,22,1)
(14,7,1)
(10,15,1)
(20,2,1)
(10,11,1)
(7,20,1)
(22,13,1)
(20,0,1)
(6,16,1)
(14,33,1)
(39,19,1)
(18,14,1)
(16,19,1)
(27,8,1)
(23,11,1)
(19,34,1)
(20,3,1)
(27,36,1)
(36,35,1)
(13,39,1)
(25,13,1)
(32,17,1)
(0,4,1)
(15,37,1)
(12,39,1)
(37,27,1)
(13,12,1)
(3,10,1)
(39,26,1)
(26,6,1)
(34,11,2)
(7,20,2)
(39,11,2)
(19,11,2)
(16,11,2)
(25,13,2)
(27,13,2)
(35,13,2)
(37,13,2)
(20,0,2)
(15,11,2)
(27,36,2)
(20,2,2)
(9,13,2)
(13,39,2)
(37,27,2)
(6,11,2)
(13,11,2)
(14,7,2)
(12,11,2)
(22,13,2)
(26,11,2)
(36,13,2)
(39,19,2)
(36,19,2)
(0,4,2)
(23,11,2)
(20,37,2)
(27,8,2)
-----------------------------------
(0,data = -1)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,char)
(3,data)
(4,-1)
(5,while(1)
(6,CHAR_ARRAY_SIZE)
(7,charData = (char)
(8,short)
(9,printLine("fgets()
(10,charData)
(11,1)
(12,NULL)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,printHexCharLine(charData)
(15,break;)
(16,inputBuffer)
(17,data)
(18,RET)
(19,inputBuffer[CHAR_ARRAY_SIZE] = "")
(20,(char)
(21,charData)
(22,data)
(23,inputBuffer)
(24,data)
(25,"fgets()
(26,stdin)
(27,(short)
(28,)
(29,)
(30,inputBuffer)
(31,)
(32,1)
(33,charData)
(34,"")
(35,inputBuffer)
(36,atoi(inputBuffer)
(37,data = (short)
(38,)
(39,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^