-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
11,12
12,13
12,14
14,15
14,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
26,29
27,28
27,29
28,29
28,30
28,31
28,32
29,30
31,32
33,34
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,13,15,18,21,23,25,30,32,34,36,38,43,46,48,53,54,58,61,62,66,68
-----computeFrom-----
27,28
27,29
41,42
41,43
-----guardedBy-----
32,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(18,23,0)
(22,18,0)
(6,24,0)
(10,9,0)
(18,28,0)
(19,17,0)
(17,19,0)
(13,6,0)
(15,8,0)
(8,5,0)
(26,5,0)
(11,8,0)
(18,22,0)
(4,1,0)
(28,18,0)
(29,19,0)
(5,21,0)
(25,5,0)
(1,4,0)
(23,18,0)
(23,5,0)
(0,22,0)
(22,8,0)
(3,17,0)
(22,4,0)
(16,19,0)
(12,1,0)
(4,14,0)
(30,5,0)
(2,4,0)
(20,19,0)
(22,8,1)
(22,0,1)
(0,4,1)
(3,19,1)
(11,15,1)
(1,12,1)
(8,11,1)
(19,29,1)
(0,6,1)
(18,22,1)
(4,1,1)
(27,23,1)
(22,4,1)
(17,3,1)
(27,7,1)
(18,28,1)
(6,13,1)
(16,8,1)
(23,18,1)
(2,17,1)
(17,19,1)
(15,7,1)
(20,16,1)
(12,2,1)
(13,17,1)
(29,20,1)
(15,7,2)
(20,7,2)
(8,7,2)
(2,17,2)
(19,7,2)
(22,4,2)
(4,1,2)
(11,7,2)
(18,28,2)
(4,17,2)
(23,18,2)
(17,19,2)
(12,17,2)
(16,7,2)
(18,7,2)
(0,7,2)
(3,7,2)
(1,17,2)
(23,7,2)
(22,8,2)
(29,7,2)
(22,7,2)
(13,17,2)
(18,22,2)
(6,17,2)
(17,7,2)
-----------------------------------
(0,doubleNumber)
(1,atof(inputBuffer)
(2,doubleNumber)
(3,NULL)
(4,doubleNumber = atof(inputBuffer)
(5,)
(6,printLine("fgets()
(7,GLOBAL_CONST_TRUE)
(8,doubleNumber = 0)
(9,)
(10,if(GLOBAL_CONST_TRUE)
(11,0)
(12,inputBuffer)
(13,"fgets()
(14,)
(15,doubleNumber)
(16,inputBuffer)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,(int)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,CHAR_ARRAY_SIZE)
(21,)
(22,sqrt(doubleNumber)
(23,printIntLine((int)
(24,)
(25,doubleNumber)
(26,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,RET)
(28,int)
(29,stdin)
(30,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^