-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
84,85
84,86
84,87
84,88
85,86
87,88
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,44,46,48,51,53,55,57,61,63,64,66,67,72,74,75,76,80,81,86,88,90,92,97,99,100,104,106
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
36,37
36,38
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
94,95
94,96
-----guardedBy-----
80,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_17_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(47,43,0)
(0,21,0)
(9,14,0)
(15,16,0)
(39,14,0)
(52,23,0)
(46,27,0)
(24,11,0)
(25,26,0)
(53,10,0)
(28,12,0)
(31,18,0)
(25,27,0)
(7,25,0)
(48,42,0)
(35,49,0)
(22,32,0)
(33,12,0)
(23,16,0)
(10,18,0)
(27,50,0)
(43,51,0)
(45,32,0)
(42,23,0)
(37,11,0)
(3,26,0)
(54,32,0)
(23,38,0)
(19,25,0)
(49,11,0)
(21,18,0)
(2,4,0)
(20,42,0)
(21,26,0)
(42,26,0)
(40,21,0)
(34,43,0)
(21,50,0)
(10,14,0)
(30,18,0)
(17,51,0)
(25,18,0)
(44,26,0)
(14,12,0)
(55,45,0)
(13,21,0)
(8,54,0)
(4,14,0)
(29,12,0)
(21,23,0)
(5,32,0)
(51,43,0)
(36,14,0)
(11,49,0)
(11,14,0)
(51,4,0)
(16,23,0)
(18,14,0)
(6,45,0)
(25,23,0)
(1,49,0)
(26,12,0)
(55,32,1)
(1,35,1)
(32,5,1)
(25,18,1)
(46,25,1)
(11,49,1)
(21,23,1)
(17,11,1)
(15,52,1)
(10,53,1)
(54,32,1)
(43,47,1)
(51,43,1)
(19,21,1)
(26,3,1)
(7,19,1)
(45,32,1)
(31,45,1)
(3,44,1)
(42,26,1)
(20,48,1)
(16,15,1)
(40,42,1)
(18,30,1)
(2,51,1)
(49,1,1)
(10,18,1)
(53,27,1)
(25,23,1)
(25,26,1)
(5,22,1)
(6,55,1)
(4,2,1)
(25,7,1)
(34,17,1)
(27,46,1)
(45,6,1)
(21,26,1)
(0,40,1)
(21,13,1)
(41,10,1)
(24,18,1)
(47,34,1)
(42,20,1)
(35,37,1)
(30,31,1)
(21,18,1)
(13,0,1)
(42,23,1)
(23,16,1)
(54,8,1)
(52,45,1)
(22,26,1)
(48,4,1)
(37,24,1)
(53,42,1)
(55,54,1)
(8,23,1)
(40,42,2)
(25,23,2)
(45,45,2)
(23,16,2)
(0,42,2)
(55,45,2)
(54,45,2)
(21,23,2)
(42,23,2)
(8,45,2)
(7,42,2)
(25,26,2)
(21,42,2)
(19,42,2)
(10,18,2)
(21,18,2)
(6,45,2)
(51,43,2)
(16,45,2)
(11,49,2)
(23,45,2)
(15,45,2)
(25,42,2)
(27,42,2)
(21,26,2)
(46,42,2)
(54,32,2)
(45,32,2)
(13,42,2)
(52,45,2)
(25,18,2)
(42,26,2)
-----------------------------------
(0,source)
(1,1)
(2,\\\'\\\\0\\\')
(3,0)
(4,source[100-1] = \\\'\\\\0\\\')
(5,0)
(6,1)
(7,data)
(8,i)
(9,if (data < 100)
(10,printLine(dest)
(11,memset(source, \\\'A\\\', 100-1)
(12,)
(13,data)
(14,)
(15,1)
(16,-1)
(17,source)
(18,dest[100] = "")
(19,dest)
(20,100)
(21,memmove(dest, source, data)
(22,i)
(23,data = -1)
(24,source)
(25,dest[data])
(26,data = 0)
(27,dest[data] = \\\'\\\\0\\\')
(28,i)
(29,for(i = 0; i < 1; i++)
(30,"")
(31,dest)
(32,i = 0)
(33,data)
(34,100)
(35,100)
(36,source)
(37,\\\'A\\\')
(38,)
(39,dest)
(40,dest)
(41,RET)
(42,data < 100)
(43,100-1)
(44,data)
(45,i < 1)
(46,\\\'\\\\0\\\')
(47,1)
(48,data)
(49,100-1)
(50,)
(51,source[100-1])
(52,data)
(53,dest)
(54,i++)
(55,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^