-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    short * dataPtr = (short *)dataVoidPtr;
    /* dereference dataPtr into data */
    short data = (*dataPtr);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_64b_badSink(void * dataVoidPtr)
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short * dataPtr = (short *)dataVoidPtr;
short * dataPtr = (short *)dataVoidPtr;
short
* dataPtr = (short *)dataVoidPtr
*
dataPtr
= (short *)dataVoidPtr
(short *)dataVoidPtr
short *
short
*
*
dataVoidPtr
dataVoidPtr
short data = (*dataPtr);
short data = (*dataPtr);
short
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(37,35,0)
(15,35,0)
(4,15,0)
(7,13,0)
(28,46,0)
(9,38,0)
(12,38,0)
(43,13,0)
(18,6,0)
(11,12,0)
(17,2,0)
(33,38,0)
(19,18,0)
(23,9,0)
(6,18,0)
(20,2,0)
(9,18,0)
(30,33,0)
(22,46,0)
(13,10,0)
(20,33,0)
(46,22,0)
(40,46,0)
(27,38,0)
(18,9,0)
(11,2,0)
(34,2,0)
(3,22,0)
(41,33,0)
(0,32,0)
(42,22,0)
(37,2,0)
(24,45,0)
(25,37,0)
(11,15,0)
(46,33,0)
(12,23,0)
(44,33,0)
(39,38,0)
(45,12,0)
(8,23,0)
(18,36,0)
(10,13,0)
(31,37,0)
(10,32,0)
(23,12,0)
(2,33,0)
(37,12,0)
(16,45,0)
(21,20,0)
(48,11,0)
(14,11,0)
(1,9,0)
(32,33,0)
(29,37,0)
(47,12,0)
(26,10,0)
(20,21,1)
(34,17,1)
(13,7,1)
(46,22,1)
(42,3,1)
(37,2,1)
(0,10,1)
(29,31,1)
(18,6,1)
(15,4,1)
(45,16,1)
(28,40,1)
(5,20,1)
(11,48,1)
(11,2,1)
(14,37,1)
(48,14,1)
(7,43,1)
(45,12,1)
(43,26,1)
(11,12,1)
(3,28,1)
(23,9,1)
(26,46,1)
(2,34,1)
(10,13,1)
(21,45,1)
(24,32,1)
(20,2,1)
(19,1,1)
(31,45,1)
(22,42,1)
(21,15,1)
(25,29,1)
(18,36,1)
(8,47,1)
(40,2,1)
(9,18,1)
(4,11,1)
(37,25,1)
(12,23,1)
(37,12,1)
(23,8,1)
(18,19,1)
(32,0,1)
(16,24,1)
(17,12,1)
(47,9,1)
(14,45,2)
(29,45,2)
(11,45,2)
(37,45,2)
(9,18,2)
(15,45,2)
(23,9,2)
(11,12,2)
(45,12,2)
(31,45,2)
(4,45,2)
(18,6,2)
(25,45,2)
(20,2,2)
(37,12,2)
(10,13,2)
(18,36,2)
(11,2,2)
(48,45,2)
(12,23,2)
(37,2,2)
(46,22,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,dataPtr)
(2,dest[100] = "")
(3,100)
(4,\\\'\\\\0\\\')
(5,RET)
(6,short *)
(7,1)
(8,dataPtr)
(9,* dataPtr = (short *)
(10,source[100-1])
(11,dest[data])
(12,data = (*dataPtr)
(13,100-1)
(14,dest)
(15,dest[data] = \\\'\\\\0\\\')
(16,100)
(17,dest)
(18,(short *)
(19,dataVoidPtr)
(20,printLine(dest)
(21,dest)
(22,100-1)
(23,*dataPtr)
(24,data)
(25,data)
(26,source)
(27,data)
(28,\\\'A\\\')
(29,source)
(30,if (data < 100)
(31,dest)
(32,source[100-1] = \\\'\\\\0\\\')
(33,)
(34,"")
(35,)
(36,void * dataVoidPtr)
(37,strncpy(dest, source, data)
(38,)
(39,dataPtr)
(40,source)
(41,source)
(42,1)
(43,100)
(44,dest)
(45,data < 100)
(46,memset(source, \\\'A\\\', 100-1)
(47,data)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^