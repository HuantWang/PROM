-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_18_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();
source
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(29,35,0)
(52,8,0)
(2,30,0)
(16,8,0)
(38,35,0)
(42,7,0)
(5,40,0)
(38,44,0)
(25,8,0)
(30,8,0)
(11,35,0)
(31,13,0)
(28,49,0)
(22,25,0)
(6,50,0)
(40,16,0)
(32,35,0)
(13,8,0)
(13,24,0)
(22,16,0)
(39,32,0)
(19,35,0)
(0,1,0)
(35,12,0)
(41,12,0)
(13,16,0)
(33,11,0)
(40,8,0)
(46,8,0)
(34,24,0)
(16,1,0)
(24,35,0)
(35,38,0)
(22,29,0)
(23,25,0)
(26,50,0)
(42,17,0)
(50,16,0)
(1,0,0)
(15,12,0)
(18,22,0)
(30,16,0)
(4,29,0)
(49,12,0)
(9,12,0)
(48,29,0)
(1,32,0)
(32,1,0)
(10,11,0)
(53,16,0)
(3,13,0)
(38,47,0)
(20,49,0)
(44,38,0)
(24,13,0)
(17,42,0)
(14,12,0)
(27,24,0)
(36,17,0)
(29,22,0)
(47,38,0)
(1,16,0)
(32,35,1)
(27,3,1)
(23,22,1)
(50,16,1)
(31,50,1)
(53,11,1)
(15,49,1)
(21,40,1)
(13,24,1)
(42,17,1)
(1,0,1)
(48,4,1)
(38,47,1)
(30,2,1)
(19,15,1)
(36,50,1)
(29,35,1)
(50,26,1)
(3,31,1)
(49,28,1)
(28,20,1)
(33,10,1)
(22,16,1)
(34,27,1)
(16,1,1)
(40,16,1)
(47,19,1)
(10,35,1)
(22,29,1)
(24,34,1)
(24,35,1)
(11,35,1)
(18,13,1)
(39,53,1)
(21,11,1)
(13,16,1)
(5,30,1)
(11,33,1)
(25,23,1)
(26,6,1)
(29,48,1)
(32,39,1)
(30,16,1)
(4,18,1)
(40,5,1)
(2,25,1)
(31,42,1)
(6,16,1)
(1,32,1)
(35,38,1)
(17,36,1)
(38,44,1)
(26,11,2)
(22,11,2)
(53,11,2)
(13,24,2)
(42,17,2)
(5,11,2)
(17,50,2)
(50,11,2)
(23,11,2)
(6,11,2)
(29,11,2)
(22,16,2)
(1,0,2)
(42,50,2)
(16,1,2)
(34,11,2)
(25,11,2)
(40,11,2)
(24,11,2)
(38,44,2)
(4,11,2)
(30,11,2)
(50,16,2)
(32,35,2)
(36,50,2)
(40,16,2)
(13,16,2)
(11,35,2)
(24,35,2)
(16,11,2)
(31,11,2)
(1,32,2)
(29,35,2)
(13,11,2)
(1,11,2)
(2,11,2)
(48,11,2)
(27,11,2)
(22,29,2)
(18,11,2)
(3,11,2)
(35,38,2)
(39,11,2)
(32,11,2)
(30,16,2)
(38,47,2)
-----------------------------------
(0,char *)
(1,(char *)
(2,dataBuffer)
(3,\'A\')
(4,data)
(5,dataBuffer)
(6,dataBuffer)
(7,)
(8,)
(9,source:)
(10,data)
(11,data < 100)
(12,)
(13,memset(dataBuffer, \'A\', data-1)
(14,data)
(15,goto source;)
(16,* dataBuffer = (char *)
(17,-1)
(18,dataBuffer)
(19,data)
(20,data)
(21,RET)
(22,dataBuffer[data-1])
(23,'\\\\0')
(24,data-1)
(25,dataBuffer[data-1] = \'\\\\0\')
(26,NULL)
(27,data)
(28,0)
(29,data-1)
(30,printLine(dataBuffer)
(31,dataBuffer)
(32,malloc(data)
(33,100)
(34,1)
(35,data = (short)
(36,1)
(37,'A')
(38,(short)
(39,data)
(40,free(dataBuffer)
(41,if (data < 100)
(42,exit(-1)
(43,\'\\\\0\')
(44,short)
(45,memset(dataBuffer, 'A', data-1)
(46,dataBuffer)
(47,RAND32()
(48,1)
(49,data = 0)
(50,dataBuffer == NULL)
(51,dataBuffer[data-1] = '\\\\0')
(52,if (dataBuffer == NULL)
(53,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^