-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        /* FLAW: Use a negative number */
        data = -1;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
80,81
80,82
80,83
82,83
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
119,120
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,76,79,81,83,85,89,91,92,94,95,100,102,103,104,108,109,114,116,118,120,125,127,128,132,134
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
93,94
93,95
97,98
97,99
101,102
101,103
106,107
106,108
122,123
122,124
-----guardedBy-----
108,127
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_32_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = -1;
data = -1
data
data
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(41,18,0)
(48,63,0)
(64,5,0)
(25,31,0)
(50,57,0)
(52,70,0)
(59,21,0)
(13,17,0)
(60,8,0)
(5,69,0)
(21,66,0)
(20,21,0)
(69,18,0)
(57,63,0)
(24,50,0)
(61,0,0)
(68,14,0)
(58,57,0)
(2,21,0)
(40,61,0)
(56,21,0)
(37,47,0)
(51,12,0)
(70,57,0)
(51,6,0)
(60,69,0)
(16,70,0)
(46,51,0)
(8,60,0)
(6,18,0)
(8,6,0)
(38,46,0)
(57,66,0)
(62,60,0)
(58,31,0)
(34,51,0)
(58,2,0)
(1,2,0)
(28,58,0)
(32,12,0)
(14,47,0)
(23,50,0)
(39,57,0)
(46,6,0)
(50,10,0)
(11,18,0)
(22,50,0)
(38,69,0)
(43,46,0)
(26,17,0)
(35,41,0)
(65,17,0)
(27,69,0)
(63,57,0)
(17,13,0)
(53,0,0)
(30,18,0)
(63,61,0)
(13,56,0)
(50,2,0)
(69,5,0)
(4,14,0)
(33,21,0)
(19,6,0)
(29,21,0)
(42,8,0)
(61,18,0)
(15,56,0)
(44,33,0)
(14,21,0)
(47,14,0)
(9,58,0)
(49,2,0)
(7,66,0)
(45,47,0)
(0,61,0)
(36,18,0)
(33,2,0)
(66,18,0)
(54,41,0)
(31,10,0)
(3,38,0)
(67,13,0)
(12,51,0)
(16,56,1)
(43,38,1)
(23,22,1)
(56,15,1)
(26,65,1)
(64,27,1)
(15,13,1)
(31,25,1)
(49,57,1)
(22,24,1)
(62,42,1)
(14,47,1)
(32,34,1)
(25,58,1)
(5,64,1)
(50,23,1)
(44,31,1)
(53,40,1)
(46,51,1)
(1,49,1)
(13,17,1)
(34,8,1)
(63,61,1)
(67,14,1)
(51,12,1)
(50,2,1)
(63,48,1)
(0,53,1)
(40,69,1)
(35,61,1)
(58,57,1)
(9,28,1)
(12,32,1)
(8,60,1)
(50,57,1)
(58,2,1)
(55,33,1)
(61,0,1)
(58,9,1)
(69,5,1)
(3,51,1)
(70,57,1)
(24,70,1)
(57,63,1)
(46,43,1)
(17,26,1)
(47,45,1)
(2,1,1)
(38,3,1)
(44,70,1)
(33,44,1)
(37,68,1)
(68,4,1)
(70,52,1)
(28,50,1)
(41,54,1)
(42,41,1)
(33,2,1)
(65,67,1)
(4,2,1)
(60,69,1)
(39,46,1)
(45,37,1)
(60,62,1)
(54,35,1)
(52,16,1)
(38,69,1)
(48,39,1)
(69,5,2)
(58,2,2)
(51,12,2)
(14,47,2)
(60,69,2)
(9,70,2)
(33,2,2)
(63,61,2)
(50,57,2)
(23,70,2)
(58,70,2)
(57,63,2)
(58,57,2)
(70,57,2)
(8,60,2)
(50,2,2)
(24,70,2)
(13,17,2)
(22,70,2)
(28,70,2)
(38,69,2)
(61,0,2)
(46,51,2)
(31,70,2)
(50,70,2)
(25,70,2)
-----------------------------------
(0,&data)
(1,"")
(2,dest[100] = "")
(3,dataPtr1)
(4,source)
(5,&data)
(6,)
(7,data)
(8,data = *dataPtr1)
(9,data)
(10,)
(11,dataPtr2)
(12,-1)
(13,source[100-1])
(14,memset(source, \\\'A\\\', 100-1)
(15,\\\'\\\\0\\\')
(16,data)
(17,100-1)
(18,)
(19,data)
(20,source)
(21,)
(22,source)
(23,data)
(24,dest)
(25,\\\'\\\\0\\\')
(26,1)
(27,dataPtr1)
(28,dest)
(29,if (data < 100)
(30,data)
(31,dest[data] = \\\'\\\\0\\\')
(32,1)
(33,printLine(dest)
(34,data)
(35,data)
(36,dataPtr1)
(37,100)
(38,*dataPtr1)
(39,data)
(40,dataPtr2)
(41,data = 0)
(42,data)
(43,data)
(44,dest)
(45,1)
(46,*dataPtr1 = data)
(47,100-1)
(48,dataPtr2)
(49,dest)
(50,memcpy(dest, source, data)
(51,data = -1)
(52,100)
(53,data)
(54,0)
(55,RET)
(56,source[100-1] = \\\'\\\\0\\\')
(57,data = *dataPtr2)
(58,dest[data])
(59,dest)
(60,*dataPtr1)
(61,*dataPtr2 = &data)
(62,dataPtr1)
(63,*dataPtr2)
(64,data)
(65,100)
(66,)
(67,source)
(68,\\\'A\\\')
(69,*dataPtr1 = &data)
(70,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^