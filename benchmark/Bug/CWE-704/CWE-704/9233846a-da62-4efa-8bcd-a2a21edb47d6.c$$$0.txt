-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
-----nextToken-----
2,4,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,65
-----computeFrom-----
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad(){    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_08_bad
{    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(1,9,0)
(20,14,0)
(0,13,0)
(18,29,0)
(20,22,0)
(16,29,0)
(11,19,0)
(17,22,0)
(28,29,0)
(22,20,0)
(4,2,0)
(9,1,0)
(26,16,0)
(6,2,0)
(21,29,0)
(1,23,0)
(23,1,0)
(1,16,0)
(12,2,0)
(25,24,0)
(23,29,0)
(29,10,0)
(1,20,0)
(8,1,0)
(3,16,0)
(2,13,0)
(5,20,0)
(24,15,0)
(13,2,0)
(12,6,1)
(26,3,1)
(1,9,1)
(7,23,1)
(5,13,1)
(7,27,1)
(1,8,1)
(25,13,1)
(17,5,1)
(13,0,1)
(0,2,1)
(4,12,1)
(16,26,1)
(6,16,1)
(20,22,1)
(1,16,1)
(22,17,1)
(13,2,1)
(8,20,1)
(1,20,1)
(2,4,1)
(3,27,1)
(24,25,1)
(8,24,1)
(23,1,1)
(22,13,2)
(23,27,2)
(17,13,2)
(13,2,2)
(8,27,2)
(6,27,2)
(13,27,2)
(1,27,2)
(3,27,2)
(1,9,2)
(16,27,2)
(2,27,2)
(23,1,2)
(5,13,2)
(26,27,2)
(1,16,2)
(25,13,2)
(0,27,2)
(20,22,2)
(12,27,2)
(20,13,2)
(4,27,2)
(1,20,2)
(24,13,2)
-----------------------------------
(0,NULL)
(1,(int)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,doubleNumber)
(4,stdin)
(5,doubleNumber)
(6,inputBuffer)
(7,RET)
(8,doubleNumber)
(9,int)
(10,)
(11,if(staticReturnsTrue()
(12,CHAR_ARRAY_SIZE)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,)
(15,)
(16,doubleNumber = 0)
(17,inputBuffer)
(18,inputBuffer)
(19,)
(20,doubleNumber = atof(inputBuffer)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,atof(inputBuffer)
(23,printIntLine((int)
(24,printLine("fgets()
(25,"fgets()
(26,0)
(27,staticReturnsTrue()
(28,doubleNumber)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^