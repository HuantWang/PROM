-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
36,56
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_16_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(33,40,0)
(31,8,0)
(53,32,0)
(15,32,0)
(61,19,0)
(45,16,0)
(57,8,0)
(7,57,0)
(21,44,0)
(12,1,0)
(54,32,0)
(44,34,0)
(50,48,0)
(20,21,0)
(28,57,0)
(52,34,0)
(46,5,0)
(26,23,0)
(43,4,0)
(5,37,0)
(55,39,0)
(13,34,0)
(49,29,0)
(64,32,0)
(37,5,0)
(4,39,0)
(63,44,0)
(23,34,0)
(16,25,0)
(64,31,0)
(64,39,0)
(21,29,0)
(23,19,0)
(60,57,0)
(24,31,0)
(58,33,0)
(35,1,0)
(39,34,0)
(57,39,0)
(19,23,0)
(54,33,0)
(57,32,0)
(36,9,0)
(47,54,0)
(0,37,0)
(30,16,0)
(66,39,0)
(6,64,0)
(10,9,0)
(4,34,0)
(22,29,0)
(18,16,0)
(9,1,0)
(62,56,0)
(42,64,0)
(37,33,0)
(16,9,0)
(17,54,0)
(34,11,0)
(5,9,0)
(32,11,0)
(1,48,0)
(57,33,0)
(38,25,0)
(41,23,0)
(59,11,0)
(25,16,0)
(65,11,0)
(29,21,0)
(14,34,0)
(3,19,0)
(27,62,0)
(33,37,0)
(37,0,0)
(64,33,0)
(18,30,1)
(23,19,1)
(64,32,1)
(24,64,1)
(49,22,1)
(5,46,1)
(28,60,1)
(60,7,1)
(36,10,1)
(57,33,1)
(32,15,1)
(58,25,1)
(37,0,1)
(33,37,1)
(16,45,1)
(63,21,1)
(9,36,1)
(29,49,1)
(43,31,1)
(21,29,1)
(42,57,1)
(4,43,1)
(57,39,1)
(20,23,1)
(19,61,1)
(7,54,1)
(64,6,1)
(17,47,1)
(38,16,1)
(15,53,1)
(44,63,1)
(64,33,1)
(31,24,1)
(37,5,1)
(41,26,1)
(45,18,1)
(66,50,1)
(25,38,1)
(62,27,1)
(47,44,1)
(22,20,1)
(4,39,1)
(26,39,1)
(39,55,1)
(27,25,1)
(46,58,1)
(51,32,1)
(66,51,1)
(30,9,1)
(6,42,1)
(50,62,1)
(61,3,1)
(43,54,1)
(54,33,1)
(55,66,1)
(3,41,1)
(10,51,1)
(25,16,1)
(2,4,1)
(57,28,1)
(64,39,1)
(54,32,1)
(5,9,1)
(54,17,1)
(57,32,1)
(16,9,1)
(50,33,1)
(10,51,2)
(16,9,2)
(64,33,2)
(16,51,2)
(58,25,2)
(24,54,2)
(54,32,2)
(60,54,2)
(31,54,2)
(30,51,2)
(36,51,2)
(37,5,2)
(27,25,2)
(5,9,2)
(28,54,2)
(64,32,2)
(42,54,2)
(57,32,2)
(21,29,2)
(50,51,2)
(23,19,2)
(6,54,2)
(7,54,2)
(54,33,2)
(25,16,2)
(25,51,2)
(37,25,2)
(37,0,2)
(33,25,2)
(33,37,2)
(62,25,2)
(38,51,2)
(57,33,2)
(9,51,2)
(5,25,2)
(57,54,2)
(4,39,2)
(64,39,2)
(45,51,2)
(64,54,2)
(18,51,2)
(46,25,2)
(57,39,2)
-----------------------------------
(0,short)
(1,)
(2,RET)
(3,100)
(4,printLine(dest)
(5,atoi(inputBuffer)
(6,data)
(7,dest)
(8,)
(9,inputBuffer[CHAR_ARRAY_SIZE] = "")
(10,inputBuffer)
(11,)
(12,inputBuffer)
(13,source)
(14,if (data < 100)
(15,0)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,100)
(18,CHAR_ARRAY_SIZE)
(19,100-1)
(20,source)
(21,source[100-1])
(22,100)
(23,memset(source, \\\'A\\\', 100-1)
(24,\\\'\\\\0\\\')
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,source)
(27,"fgets()
(28,data)
(29,100-1)
(30,inputBuffer)
(31,dest[data] = \\\'\\\\0\\\')
(32,data = 0)
(33,data = (short)
(34,)
(35,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,"")
(37,(short)
(38,NULL)
(39,dest[100] = "")
(40,)
(41,\\\'A\\\')
(42,dest)
(43,dest)
(44,source[100-1] = \\\'\\\\0\\\')
(45,stdin)
(46,inputBuffer)
(47,data)
(48,)
(49,1)
(50,break;)
(51,1)
(52,dest)
(53,data)
(54,data < 100)
(55,"")
(56,)
(57,strncpy(dest, source, data)
(58,data)
(59,while(1)
(60,source)
(61,1)
(62,printLine("fgets()
(63,\\\'\\\\0\\\')
(64,dest[data])
(65,data)
(66,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^