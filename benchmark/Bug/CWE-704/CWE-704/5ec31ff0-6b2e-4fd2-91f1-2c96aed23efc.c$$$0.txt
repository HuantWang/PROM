-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
40,43
42,43
43,44
45,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
86,87
87,88
87,89
88,89
88,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,44,46,51,53,55,57,59,64,67,68,71,73,78,79,83,85,89,90,92,96,98
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
48,49
48,50
62,63
62,64
-----guardedBy-----
53,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_17_bad(){    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_17_bad()
CWE197_Numeric_Truncation_Error__short_fgets_17_bad
{    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(26,42,0)
(11,45,0)
(29,21,0)
(15,16,0)
(2,7,0)
(9,23,0)
(40,33,0)
(0,29,0)
(30,36,0)
(31,38,0)
(2,27,0)
(38,33,0)
(44,27,0)
(48,33,0)
(13,38,0)
(41,23,0)
(12,36,0)
(35,42,0)
(33,28,0)
(25,8,0)
(16,38,0)
(28,20,0)
(7,2,0)
(46,33,0)
(22,26,0)
(27,2,0)
(34,19,0)
(44,19,0)
(44,47,0)
(24,11,0)
(38,16,0)
(37,36,0)
(8,5,0)
(4,44,0)
(42,36,0)
(14,28,0)
(23,21,0)
(6,27,0)
(46,2,0)
(3,45,0)
(26,19,0)
(18,21,0)
(19,44,0)
(19,42,0)
(44,45,0)
(1,28,0)
(10,38,0)
(27,32,0)
(45,36,0)
(43,46,0)
(47,44,0)
(2,46,0)
(45,11,0)
(39,21,0)
(26,22,1)
(41,21,1)
(2,7,1)
(0,27,1)
(16,38,1)
(22,19,1)
(27,2,1)
(48,23,1)
(46,33,1)
(44,47,1)
(43,6,1)
(16,15,1)
(23,9,1)
(41,29,1)
(13,33,1)
(29,0,1)
(8,25,1)
(29,21,1)
(44,45,1)
(11,24,1)
(9,41,1)
(23,21,1)
(46,43,1)
(38,10,1)
(26,19,1)
(33,40,1)
(21,18,1)
(39,45,1)
(4,34,1)
(44,27,1)
(6,16,1)
(19,44,1)
(44,4,1)
(25,16,1)
(45,11,1)
(0,8,1)
(34,23,1)
(17,26,1)
(31,13,1)
(10,31,1)
(40,48,1)
(38,33,1)
(15,38,1)
(18,39,1)
(2,46,1)
(24,3,1)
(31,23,2)
(9,23,2)
(46,16,2)
(15,23,2)
(2,46,2)
(19,44,2)
(10,23,2)
(25,16,2)
(48,23,2)
(27,2,2)
(44,27,2)
(38,33,2)
(2,16,2)
(46,33,2)
(2,7,2)
(38,23,2)
(40,23,2)
(29,21,2)
(29,23,2)
(0,23,2)
(27,16,2)
(43,16,2)
(8,16,2)
(16,23,2)
(44,47,2)
(23,23,2)
(41,23,2)
(23,21,2)
(26,19,2)
(6,16,2)
(16,38,2)
(45,11,2)
(13,23,2)
(33,23,2)
(44,45,2)
-----------------------------------
(0,i)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,(short)
(3,data)
(4,data)
(5,)
(6,data)
(7,short)
(8,printLine("fgets()
(9,1)
(10,stdin)
(11,-1)
(12,data)
(13,inputBuffer)
(14,inputBuffer)
(15,NULL)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,RET)
(18,0)
(19,charData = (char)
(20,)
(21,i = 0)
(22,charData)
(23,i < 1)
(24,1)
(25,"fgets()
(26,printHexCharLine(charData)
(27,data = (short)
(28,)
(29,i++)
(30,i)
(31,CHAR_ARRAY_SIZE)
(32,)
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,charData)
(35,charData)
(36,)
(37,for(i = 0; i < 1; i++)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,i)
(40,"")
(41,i)
(42,)
(43,inputBuffer)
(44,(char)
(45,data = -1)
(46,atoi(inputBuffer)
(47,char)
(48,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^