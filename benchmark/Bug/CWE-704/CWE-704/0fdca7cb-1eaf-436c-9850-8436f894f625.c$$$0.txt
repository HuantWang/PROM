-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,71,73,76,78,80,82,86,88,89,91,92,97,99,100,101,105,106,111,113,115,117,122,124,125,129,131
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
90,91
90,92
94,95
94,96
98,99
98,100
103,104
103,105
119,120
119,121
-----guardedBy-----
39,59
105,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_06_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(0,25,0)
(62,52,0)
(23,37,0)
(13,11,0)
(63,60,0)
(49,44,0)
(55,7,0)
(3,60,0)
(56,11,0)
(18,36,0)
(59,40,0)
(67,40,0)
(1,36,0)
(21,37,0)
(16,49,0)
(48,36,0)
(47,63,0)
(60,25,0)
(66,36,0)
(45,51,0)
(16,60,0)
(15,43,0)
(43,36,0)
(42,29,0)
(7,36,0)
(16,7,0)
(12,16,0)
(58,10,0)
(22,18,0)
(38,48,0)
(10,32,0)
(11,64,0)
(33,45,0)
(41,25,0)
(26,37,0)
(64,40,0)
(62,49,0)
(53,10,0)
(39,64,0)
(52,64,0)
(6,62,0)
(8,16,0)
(35,23,0)
(5,32,0)
(49,62,0)
(24,63,0)
(50,5,0)
(52,62,0)
(54,20,0)
(4,60,0)
(23,43,0)
(63,49,0)
(36,25,0)
(10,49,0)
(40,46,0)
(16,5,0)
(9,11,0)
(65,36,0)
(28,10,0)
(27,11,0)
(19,7,0)
(20,48,0)
(34,52,0)
(30,29,0)
(2,49,0)
(14,48,0)
(48,20,0)
(61,9,0)
(37,23,0)
(18,7,0)
(62,6,0)
(31,64,0)
(10,7,0)
(11,9,0)
(10,60,0)
(17,20,0)
(56,13,1)
(16,7,1)
(11,56,1)
(38,14,1)
(10,60,1)
(15,23,1)
(53,63,1)
(19,45,1)
(28,53,1)
(7,55,1)
(62,52,1)
(27,64,1)
(10,49,1)
(19,29,1)
(49,62,1)
(29,30,1)
(18,22,1)
(22,5,1)
(63,60,1)
(34,2,1)
(37,21,1)
(21,26,1)
(55,19,1)
(31,39,1)
(16,49,1)
(45,33,1)
(64,31,1)
(19,49,1)
(48,20,1)
(52,64,1)
(2,9,1)
(39,29,1)
(57,18,1)
(35,48,1)
(50,16,1)
(10,7,1)
(24,47,1)
(17,54,1)
(14,7,1)
(58,28,1)
(4,3,1)
(60,4,1)
(54,38,1)
(13,27,1)
(9,61,1)
(8,12,1)
(12,10,1)
(22,63,1)
(61,11,1)
(11,64,1)
(63,49,1)
(47,43,1)
(63,24,1)
(10,58,1)
(26,35,1)
(20,17,1)
(9,11,1)
(33,9,1)
(43,15,1)
(42,60,1)
(5,50,1)
(23,37,1)
(18,7,1)
(62,6,1)
(16,60,1)
(30,42,1)
(16,8,1)
(52,34,1)
(11,29,2)
(48,20,2)
(52,64,2)
(12,63,2)
(33,9,2)
(16,60,2)
(64,29,2)
(49,62,2)
(9,29,2)
(10,7,2)
(16,7,2)
(62,6,2)
(8,63,2)
(13,29,2)
(62,52,2)
(27,29,2)
(9,11,2)
(10,63,2)
(39,29,2)
(16,49,2)
(31,29,2)
(63,49,2)
(45,9,2)
(53,63,2)
(11,64,2)
(5,63,2)
(18,7,2)
(2,9,2)
(56,29,2)
(10,60,2)
(23,37,2)
(49,9,2)
(63,60,2)
(58,63,2)
(10,49,2)
(50,63,2)
(52,9,2)
(28,63,2)
(62,9,2)
(16,63,2)
(34,9,2)
(61,29,2)
-----------------------------------
(0,data)
(1,dest)
(2,data)
(3,data)
(4,0)
(5,dest[data] = \\\'\\\\0\\\')
(6,short)
(7,dest[100] = "")
(8,data)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,strncpy(dest, source, data)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,dest)
(13,CHAR_ARRAY_SIZE)
(14,source)
(15,\\\'\\\\0\\\')
(16,dest[data])
(17,1)
(18,printLine(dest)
(19,dest)
(20,100-1)
(21,1)
(22,dest)
(23,source[100-1])
(24,100)
(25,)
(26,100)
(27,inputBuffer)
(28,source)
(29,STATIC_CONST_FIVE==5)
(30,5)
(31,"")
(32,)
(33,"fgets()
(34,inputBuffer)
(35,source)
(36,)
(37,100-1)
(38,\\\'A\\\')
(39,inputBuffer)
(40,)
(41,if(STATIC_CONST_FIVE==5)
(42,STATIC_CONST_FIVE)
(43,source[100-1] = \\\'\\\\0\\\')
(44,)
(45,printLine("fgets()
(46,)
(47,data)
(48,memset(source, \\\'A\\\', 100-1)
(49,data = (short)
(50,\\\'\\\\0\\\')
(51,)
(52,atoi(inputBuffer)
(53,dest)
(54,100)
(55,"")
(56,stdin)
(57,RET)
(58,data)
(59,inputBuffer)
(60,data = 0)
(61,NULL)
(62,(short)
(63,data < 100)
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
(65,if (data < 100)
(66,source)
(67,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^