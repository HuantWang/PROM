-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,42,0)
(9,13,0)
(6,42,0)
(4,30,0)
(31,40,0)
(0,40,0)
(14,30,0)
(0,4,0)
(30,42,0)
(22,9,0)
(45,23,0)
(8,6,0)
(18,40,0)
(40,23,0)
(29,6,0)
(3,40,0)
(17,39,0)
(12,2,0)
(32,4,0)
(8,46,0)
(41,0,0)
(20,30,0)
(2,10,0)
(13,9,0)
(13,7,0)
(30,4,0)
(44,46,0)
(10,2,0)
(25,20,0)
(46,8,0)
(20,42,0)
(46,40,0)
(16,10,0)
(43,42,0)
(38,3,0)
(15,30,0)
(26,8,0)
(37,46,0)
(5,3,0)
(1,10,0)
(4,0,0)
(2,40,0)
(27,2,0)
(24,23,0)
(34,42,0)
(39,30,0)
(19,15,0)
(28,15,0)
(39,42,0)
(10,30,0)
(4,32,0)
(8,30,0)
(19,30,1)
(22,15,1)
(10,30,1)
(0,40,1)
(28,19,1)
(16,15,1)
(2,40,1)
(3,5,1)
(12,27,1)
(35,20,1)
(37,44,1)
(40,31,1)
(38,40,1)
(15,30,1)
(2,12,1)
(17,6,1)
(1,16,1)
(31,18,1)
(25,39,1)
(6,29,1)
(41,14,1)
(3,40,1)
(8,30,1)
(13,9,1)
(35,3,1)
(30,4,1)
(39,17,1)
(39,30,1)
(4,32,1)
(26,10,1)
(5,38,1)
(8,46,1)
(44,26,1)
(20,30,1)
(10,2,1)
(0,41,1)
(15,28,1)
(20,25,1)
(9,22,1)
(46,37,1)
(14,3,1)
(27,1,1)
(29,8,1)
(4,0,1)
(46,40,1)
(16,13,1)
(6,3,2)
(10,30,2)
(29,3,2)
(28,3,2)
(41,3,2)
(8,30,2)
(2,40,2)
(46,3,2)
(39,30,2)
(39,3,2)
(25,3,2)
(30,4,2)
(20,3,2)
(19,3,2)
(1,3,2)
(30,3,2)
(16,3,2)
(9,15,2)
(22,15,2)
(2,3,2)
(17,3,2)
(15,30,2)
(8,3,2)
(14,3,2)
(4,3,2)
(12,3,2)
(13,9,2)
(4,0,2)
(13,15,2)
(15,3,2)
(44,3,2)
(27,3,2)
(4,32,2)
(26,3,2)
(0,40,2)
(37,3,2)
(0,3,2)
(3,40,2)
(8,46,2)
(10,3,2)
(46,40,2)
(10,2,2)
(20,30,2)
-----------------------------------
(0,malloc(data)
(1,\'A\')
(2,data-1)
(3,data < 100)
(4,(char *)
(5,100)
(6,dataBuffer[data-1] = \'\\\\0\')
(7,)
(8,dataBuffer[data-1])
(9,-1)
(10,memset(dataBuffer, 'A', data-1)
(11,memset(dataBuffer, \'A\', data-1)
(12,1)
(13,exit(-1)
(14,dataBuffer)
(15,dataBuffer == NULL)
(16,dataBuffer)
(17,dataBuffer)
(18,data)
(19,dataBuffer)
(20,free(dataBuffer)
(21,'A')
(22,1)
(23,)
(24,if (data < 100)
(25,dataBuffer)
(26,dataBuffer)
(27,data)
(28,NULL)
(29,'\\\\0')
(30,* dataBuffer = (char *)
(31,CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData)
(32,char *)
(33,dataBuffer[data-1] = '\\\\0')
(34,if (dataBuffer == NULL)
(35,RET)
(36,\'\\\\0\')
(37,1)
(38,data)
(39,printLine(dataBuffer)
(40,data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_45_badData)
(41,data)
(42,)
(43,dataBuffer)
(44,data)
(45,data)
(46,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^