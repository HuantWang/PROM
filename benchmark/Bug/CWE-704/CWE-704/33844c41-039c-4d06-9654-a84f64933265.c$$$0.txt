-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,20,25,27,32,34,35,39,41,43,46,48,50,52,56,58,59,61,62,67,69,70,71,75,76,81,83,85,87,92,94,95,99,101
-----computeFrom-----
12,13
12,14
23,24
23,25
30,31
30,32
33,34
33,35
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
89,90
89,91
-----guardedBy-----
75,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(20,1,0)
(29,13,0)
(24,8,0)
(37,28,0)
(14,27,0)
(17,24,0)
(0,28,0)
(42,19,0)
(46,7,0)
(44,26,0)
(53,12,0)
(15,41,0)
(13,52,0)
(16,52,0)
(31,8,0)
(34,48,0)
(22,24,0)
(50,19,0)
(1,8,0)
(39,16,0)
(6,7,0)
(18,37,0)
(36,44,0)
(32,17,0)
(38,24,0)
(21,52,0)
(51,13,0)
(41,44,0)
(43,54,0)
(19,52,0)
(9,16,0)
(3,37,0)
(49,8,0)
(4,21,0)
(19,48,0)
(44,41,0)
(13,48,0)
(52,16,0)
(33,52,0)
(27,8,0)
(40,46,0)
(1,48,0)
(23,17,0)
(19,44,0)
(28,27,0)
(54,25,0)
(13,44,0)
(30,48,0)
(13,25,0)
(48,8,0)
(21,44,0)
(52,47,0)
(12,46,0)
(10,21,0)
(5,8,0)
(2,13,0)
(45,7,0)
(8,7,0)
(28,37,0)
(46,12,0)
(19,54,0)
(24,17,0)
(30,34,1)
(48,30,1)
(34,52,1)
(37,18,1)
(20,54,1)
(43,19,1)
(22,48,1)
(21,44,1)
(19,50,1)
(13,51,1)
(53,40,1)
(21,4,1)
(1,20,1)
(9,33,1)
(13,44,1)
(38,22,1)
(34,44,1)
(29,21,1)
(41,15,1)
(19,52,1)
(15,36,1)
(17,23,1)
(39,9,1)
(54,43,1)
(20,21,1)
(19,44,1)
(23,32,1)
(10,27,1)
(12,53,1)
(2,29,1)
(4,10,1)
(35,1,1)
(1,48,1)
(11,46,1)
(16,39,1)
(19,48,1)
(24,17,1)
(27,14,1)
(21,52,1)
(0,24,1)
(51,2,1)
(13,48,1)
(18,3,1)
(13,52,1)
(46,12,1)
(52,16,1)
(33,11,1)
(28,37,1)
(32,38,1)
(3,0,1)
(14,28,1)
(42,13,1)
(36,11,1)
(44,41,1)
(50,42,1)
(43,21,2)
(24,17,2)
(21,44,2)
(9,11,2)
(19,21,2)
(19,52,2)
(36,11,2)
(1,48,2)
(42,21,2)
(19,44,2)
(41,11,2)
(52,11,2)
(39,11,2)
(28,37,2)
(15,11,2)
(13,44,2)
(44,41,2)
(13,21,2)
(44,11,2)
(2,21,2)
(16,11,2)
(54,21,2)
(51,21,2)
(13,48,2)
(13,52,2)
(29,21,2)
(46,12,2)
(52,16,2)
(19,48,2)
(50,21,2)
(33,11,2)
(21,52,2)
-----------------------------------
(0,source)
(1,printLine(dest)
(2,source)
(3,100)
(4,100)
(5,source)
(6,data)
(7,)
(8,)
(9,100)
(10,data)
(11,globalReturnsTrueOrFalse()
(12,-1)
(13,strncpy(dest, source, data)
(14,\\\'\\\\0\\\')
(15,1)
(16,100-1)
(17,100-1)
(18,1)
(19,dest[data])
(20,dest)
(21,data < 100)
(22,source)
(23,1)
(24,memset(source, \\\'A\\\', 100-1)
(25,)
(26,)
(27,source[100-1] = \\\'\\\\0\\\')
(28,source[100-1])
(29,dest)
(30,"")
(31,dest)
(32,100)
(33,data)
(34,dest)
(35,RET)
(36,data)
(37,100-1)
(38,\\\'A\\\')
(39,1)
(40,data)
(41,-1)
(42,dest)
(43,\\\'\\\\0\\\')
(44,data = -1)
(45,if(globalReturnsTrueOrFalse()
(46,data = -1)
(47,)
(48,dest[100] = "")
(49,if (data < 100)
(50,data)
(51,data)
(52,data = 100-1)
(53,1)
(54,dest[data] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^