-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_10_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(2,37,0)
(61,31,0)
(38,48,0)
(51,42,0)
(12,22,0)
(3,32,0)
(36,8,0)
(53,51,0)
(29,8,0)
(31,6,0)
(50,14,0)
(20,32,0)
(37,14,0)
(55,10,0)
(11,12,0)
(54,37,0)
(15,4,0)
(51,53,0)
(48,38,0)
(9,30,0)
(10,51,0)
(19,38,0)
(17,47,0)
(53,2,0)
(16,12,0)
(0,22,0)
(64,6,0)
(34,31,0)
(43,38,0)
(10,23,0)
(33,35,0)
(53,44,0)
(45,10,0)
(38,37,0)
(56,6,0)
(14,39,0)
(32,30,0)
(63,30,0)
(58,33,0)
(44,53,0)
(12,32,0)
(59,35,0)
(10,32,0)
(26,49,0)
(47,30,0)
(13,38,0)
(18,22,0)
(6,31,0)
(40,18,0)
(46,47,0)
(49,51,0)
(8,33,0)
(28,47,0)
(27,37,0)
(7,51,0)
(24,23,0)
(62,49,0)
(2,53,0)
(5,24,0)
(10,22,0)
(1,15,0)
(60,14,0)
(12,24,0)
(35,47,0)
(18,47,0)
(65,10,0)
(41,22,0)
(31,47,0)
(33,8,0)
(12,51,0)
(21,2,0)
(52,48,0)
(22,47,0)
(49,32,0)
(59,33,1)
(16,11,1)
(10,32,1)
(2,21,1)
(18,40,1)
(8,36,1)
(12,32,1)
(65,45,1)
(38,13,1)
(21,7,1)
(1,48,1)
(7,48,1)
(57,32,1)
(43,37,1)
(61,22,1)
(49,32,1)
(18,22,1)
(22,0,1)
(6,64,1)
(55,49,1)
(32,3,1)
(40,24,1)
(56,34,1)
(19,43,1)
(40,49,1)
(37,27,1)
(2,37,1)
(62,26,1)
(35,59,1)
(49,62,1)
(49,51,1)
(41,51,1)
(53,44,1)
(10,51,1)
(33,8,1)
(12,51,1)
(29,58,1)
(15,1,1)
(36,29,1)
(13,19,1)
(0,41,1)
(10,65,1)
(3,20,1)
(12,22,1)
(52,38,1)
(38,37,1)
(12,16,1)
(41,15,1)
(41,57,1)
(48,38,1)
(24,5,1)
(27,54,1)
(53,2,1)
(48,52,1)
(58,31,1)
(25,18,1)
(54,57,1)
(34,61,1)
(51,53,1)
(10,22,1)
(31,6,1)
(64,56,1)
(11,10,1)
(26,35,1)
(45,55,1)
(5,12,1)
(2,48,2)
(10,32,2)
(10,22,2)
(54,57,2)
(12,22,2)
(49,32,2)
(51,53,2)
(53,44,2)
(19,57,2)
(51,48,2)
(13,57,2)
(49,51,2)
(21,48,2)
(18,22,2)
(37,57,2)
(16,49,2)
(24,49,2)
(52,57,2)
(55,49,2)
(12,32,2)
(11,49,2)
(48,57,2)
(48,38,2)
(10,51,2)
(45,49,2)
(7,48,2)
(38,37,2)
(33,8,2)
(12,51,2)
(10,49,2)
(31,6,2)
(65,49,2)
(5,49,2)
(43,57,2)
(27,57,2)
(1,48,2)
(53,48,2)
(53,2,2)
(38,57,2)
(2,37,2)
(12,49,2)
(15,48,2)
-----------------------------------
(0,"")
(1,"fgets()
(2,atoi(inputBuffer)
(3,0)
(4,)
(5,\\\'\\\\0\\\')
(6,100-1)
(7,data)
(8,100-1)
(9,data)
(10,memcpy(dest, source, data)
(11,dest)
(12,dest[data])
(13,stdin)
(14,)
(15,printLine("fgets()
(16,data)
(17,if (data < 100)
(18,printLine(dest)
(19,CHAR_ARRAY_SIZE)
(20,data)
(21,inputBuffer)
(22,dest[100] = "")
(23,)
(24,dest[data] = \\\'\\\\0\\\')
(25,RET)
(26,data)
(27,"")
(28,source)
(29,100)
(30,)
(31,memset(source, \\\'A\\\', 100-1)
(32,data = 0)
(33,source[100-1])
(34,\\\'A\\\')
(35,source[100-1] = \\\'\\\\0\\\')
(36,1)
(37,inputBuffer[CHAR_ARRAY_SIZE] = "")
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,)
(40,dest)
(41,dest)
(42,)
(43,inputBuffer)
(44,short)
(45,source)
(46,dest)
(47,)
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,data < 100)
(50,inputBuffer)
(51,data = (short)
(52,NULL)
(53,(short)
(54,inputBuffer)
(55,dest)
(56,100)
(57,globalTrue)
(58,source)
(59,\\\'\\\\0\\\')
(60,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(61,source)
(62,100)
(63,if(globalTrue)
(64,1)
(65,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^