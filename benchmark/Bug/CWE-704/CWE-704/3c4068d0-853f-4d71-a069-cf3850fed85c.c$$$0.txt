-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad()
{
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,7,12,14,17,20,22,24,29,31,33,35,37,42,45,47,52,53,57,60,61,65,67
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad(){    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_02_bad
{    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(3,26,0)
(30,19,0)
(19,26,0)
(20,19,0)
(15,23,0)
(28,6,0)
(1,4,0)
(18,15,0)
(27,1,0)
(17,4,0)
(23,15,0)
(26,19,0)
(15,29,0)
(13,10,0)
(12,25,0)
(28,18,0)
(4,14,0)
(25,11,0)
(18,1,0)
(22,28,0)
(6,28,0)
(5,18,0)
(7,1,0)
(0,19,0)
(18,28,0)
(28,22,0)
(16,4,0)
(2,23,0)
(6,4,0)
(8,15,0)
(24,4,0)
(2,8,1)
(9,6,1)
(30,0,1)
(26,3,1)
(25,12,1)
(8,26,1)
(20,1,1)
(12,26,1)
(15,23,1)
(1,27,1)
(5,25,1)
(19,30,1)
(9,21,1)
(3,19,1)
(18,5,1)
(27,7,1)
(23,2,1)
(7,21,1)
(0,20,1)
(5,15,1)
(28,22,1)
(26,19,1)
(18,15,1)
(6,28,1)
(18,1,1)
(28,18,1)
(28,22,2)
(6,21,2)
(2,26,2)
(27,21,2)
(26,19,2)
(8,26,2)
(18,1,2)
(5,21,2)
(20,21,2)
(18,21,2)
(25,26,2)
(19,21,2)
(6,28,2)
(26,21,2)
(23,26,2)
(18,15,2)
(1,21,2)
(12,26,2)
(28,18,2)
(0,21,2)
(15,26,2)
(15,23,2)
(30,21,2)
(7,21,2)
(3,21,2)
(28,21,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,doubleNumber = 0)
(2,inputBuffer)
(3,NULL)
(4,)
(5,doubleNumber)
(6,printIntLine((int)
(7,doubleNumber)
(8,doubleNumber)
(9,RET)
(10,)
(11,)
(12,"fgets()
(13,if(1)
(14,)
(15,doubleNumber = atof(inputBuffer)
(16,inputBuffer)
(17,doubleNumber)
(18,sqrt(doubleNumber)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,inputBuffer)
(21,1)
(22,int)
(23,atof(inputBuffer)
(24,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,printLine("fgets()
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,0)
(28,(int)
(29,)
(30,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^