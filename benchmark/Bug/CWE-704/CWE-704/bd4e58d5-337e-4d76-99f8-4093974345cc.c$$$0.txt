-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_31_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a number input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
47,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
86,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,49,52,54,59,60,64,66,69,72,74,77,81,83,87,88,90,94,96
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_31_bad(){    short data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_31_bad()
CWE197_Numeric_Truncation_Error__short_fgets_31_bad
{    short data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(4,14,0)
(24,36,0)
(26,9,0)
(19,45,0)
(45,17,0)
(46,24,0)
(18,20,0)
(14,24,0)
(12,36,0)
(17,45,0)
(29,27,0)
(32,35,0)
(11,27,0)
(35,14,0)
(31,27,0)
(8,23,0)
(28,44,0)
(39,29,0)
(13,10,0)
(14,26,0)
(6,43,0)
(21,17,0)
(33,12,0)
(2,28,0)
(27,36,0)
(44,26,0)
(45,30,0)
(15,26,0)
(7,41,0)
(10,29,0)
(34,45,0)
(37,8,0)
(24,43,0)
(26,44,0)
(0,44,0)
(20,8,0)
(8,20,0)
(23,8,0)
(35,27,0)
(20,29,0)
(43,24,0)
(44,28,0)
(10,20,0)
(28,30,0)
(1,35,0)
(41,40,0)
(44,0,0)
(42,36,0)
(16,12,0)
(5,30,0)
(3,45,0)
(14,27,0)
(8,35,0)
(38,14,0)
(25,30,0)
(30,12,0)
(1,32,1)
(14,38,1)
(32,14,1)
(28,30,1)
(5,25,1)
(34,19,1)
(14,24,1)
(28,2,1)
(4,41,1)
(19,30,1)
(4,26,1)
(17,45,1)
(45,3,1)
(2,15,1)
(44,0,1)
(44,28,1)
(26,44,1)
(24,43,1)
(8,35,1)
(22,10,1)
(35,1,1)
(35,14,1)
(37,18,1)
(13,20,1)
(21,45,1)
(38,4,1)
(7,17,1)
(3,34,1)
(8,23,1)
(45,30,1)
(20,8,1)
(10,13,1)
(15,17,1)
(8,37,1)
(10,20,1)
(18,35,1)
(30,5,1)
(41,7,1)
(25,24,1)
(14,26,1)
(17,21,1)
(6,46,1)
(43,6,1)
(14,26,2)
(17,45,2)
(26,17,2)
(44,28,2)
(7,17,2)
(8,35,2)
(44,0,2)
(15,17,2)
(2,17,2)
(24,43,2)
(41,17,2)
(14,24,2)
(45,30,2)
(20,8,2)
(26,44,2)
(44,17,2)
(10,20,2)
(28,17,2)
(8,23,2)
(35,14,2)
(28,30,2)
-----------------------------------
(0,short)
(1,dataCopy)
(2,inputBuffer)
(3,stdin)
(4,dataCopy)
(5,"")
(6,1)
(7,"fgets()
(8,(char)
(9,)
(10,printHexCharLine(charData)
(11,dataCopy)
(12,)
(13,charData)
(14,dataCopy = data)
(15,data)
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,charData)
(19,inputBuffer)
(20,charData = (char)
(21,NULL)
(22,RET)
(23,char)
(24,data = -1)
(25,inputBuffer)
(26,data = (short)
(27,)
(28,atoi(inputBuffer)
(29,)
(30,inputBuffer[CHAR_ARRAY_SIZE] = "")
(31,data)
(32,data)
(33,inputBuffer)
(34,CHAR_ARRAY_SIZE)
(35,data = dataCopy)
(36,)
(37,data)
(38,data)
(39,charData)
(40,)
(41,printLine("fgets()
(42,data)
(43,-1)
(44,(short)
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^