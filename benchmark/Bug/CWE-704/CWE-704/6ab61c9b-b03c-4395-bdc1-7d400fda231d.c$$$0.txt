-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_05_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
staticTrue
staticTrue
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(49,3,0)
(19,27,0)
(3,13,0)
(11,36,0)
(2,22,0)
(4,14,0)
(49,36,0)
(37,30,0)
(40,3,0)
(14,30,0)
(27,41,0)
(7,40,0)
(36,49,0)
(23,41,0)
(0,30,0)
(0,31,0)
(30,36,0)
(21,14,0)
(31,3,0)
(9,30,0)
(38,3,0)
(14,4,0)
(20,44,0)
(33,4,0)
(50,1,0)
(36,30,0)
(44,30,0)
(43,49,0)
(4,3,0)
(10,41,0)
(15,14,0)
(34,44,0)
(12,13,0)
(31,0,0)
(29,25,0)
(1,2,0)
(39,0,0)
(45,37,0)
(26,40,0)
(5,13,0)
(35,3,0)
(16,29,0)
(32,3,0)
(6,41,0)
(18,4,0)
(0,27,0)
(30,41,0)
(46,31,0)
(37,41,0)
(8,31,0)
(36,11,0)
(32,29,0)
(48,32,0)
(28,29,0)
(2,1,0)
(29,32,0)
(6,30,0)
(14,41,0)
(17,13,0)
(47,6,0)
(32,48,1)
(9,40,1)
(32,3,1)
(24,3,1)
(21,2,1)
(33,15,1)
(43,9,1)
(37,30,1)
(42,40,1)
(40,3,1)
(26,24,1)
(0,31,1)
(8,46,1)
(46,39,1)
(1,50,1)
(48,16,1)
(49,3,1)
(31,8,1)
(14,4,1)
(36,11,1)
(26,29,1)
(6,30,1)
(36,49,1)
(38,35,1)
(49,43,1)
(30,36,1)
(16,28,1)
(47,27,1)
(44,34,1)
(3,38,1)
(27,19,1)
(0,30,1)
(31,3,1)
(6,47,1)
(18,33,1)
(29,32,1)
(20,30,1)
(15,21,1)
(44,30,1)
(39,14,1)
(14,30,1)
(7,26,1)
(37,45,1)
(4,18,1)
(19,0,1)
(4,3,1)
(28,24,1)
(2,1,1)
(42,37,1)
(21,44,1)
(34,20,1)
(45,6,1)
(40,7,1)
(50,44,1)
(1,44,2)
(15,40,2)
(39,40,2)
(50,44,2)
(45,40,2)
(6,30,2)
(28,24,2)
(21,40,2)
(49,3,2)
(18,40,2)
(0,31,2)
(37,40,2)
(44,40,2)
(31,3,2)
(48,24,2)
(4,3,2)
(2,44,2)
(0,30,2)
(29,24,2)
(9,40,2)
(29,32,2)
(16,24,2)
(49,40,2)
(36,40,2)
(4,40,2)
(30,36,2)
(32,3,2)
(36,11,2)
(32,24,2)
(34,40,2)
(33,40,2)
(46,40,2)
(31,40,2)
(6,40,2)
(36,49,2)
(0,40,2)
(37,30,2)
(20,40,2)
(14,4,2)
(30,40,2)
(40,3,2)
(14,30,2)
(44,30,2)
(19,40,2)
(43,40,2)
(27,40,2)
(14,40,2)
(2,1,2)
(8,40,2)
(47,40,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,-1)
(2,exit(-1)
(3,data = 0)
(4,data-1)
(5,if(staticTrue)
(6,printLine(dataBuffer)
(7,100)
(8,1)
(9,dataBuffer)
(10,if (dataBuffer == NULL)
(11,char *)
(12,if (data < 100)
(13,)
(14,memset(dataBuffer, \\\'A\\\', data-1)
(15,\\\'A\\\')
(16,"%hd")
(17,data)
(18,1)
(19,\\\'\\\\0\\\')
(20,dataBuffer)
(21,dataBuffer)
(22,)
(23,dataBuffer)
(24,staticTrue)
(25,)
(26,data)
(27,dataBuffer[data-1] = \\\'\\\\0\\\')
(28,stdin)
(29,fscanf (stdin, "%hd", &data)
(30,* dataBuffer = (char *)
(31,data-1)
(32,&data)
(33,data)
(34,NULL)
(35,data)
(36,(char *)
(37,free(dataBuffer)
(38,0)
(39,dataBuffer)
(40,data < 100)
(41,)
(42,RET)
(43,data)
(44,dataBuffer == NULL)
(45,dataBuffer)
(46,data)
(47,dataBuffer)
(48,data)
(49,malloc(data)
(50,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^