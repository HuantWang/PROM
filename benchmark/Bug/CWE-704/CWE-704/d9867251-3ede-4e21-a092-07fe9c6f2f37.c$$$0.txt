-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_44_bad()
{
    short data;
    /* define a function pointer */
    void (*funcPtr) (short) = badSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a value input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
62,63
63,64
65,66
66,67
66,68
68,69
68,70
70,71
71,72
73,74
73,75
74,75
74,76
74,77
74,78
74,79
74,80
74,81
74,82
74,83
74,84
74,85
74,86
74,87
74,88
74,89
75,76
76,77
76,78
77,78
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
101,102
104,105
105,106
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
135,136
137,138
137,139
138,139
138,140
139,140
139,141
139,142
139,143
140,141
142,143
144,145
144,146
145,146
145,147
146,147
148,149
150,151
151,152
153,154
154,155
155,156
157,158
159,160
161,162
161,163
162,163
162,164
163,164
163,165
163,166
164,165
166,167
168,169
170,171
172,173
174,175
175,176
175,177
176,177
178,179
178,180
178,181
178,182
179,180
181,182
183,184
185,186
187,188
187,189
188,189
188,190
189,190
191,192
193,194
195,196
196,197
196,198
197,198
199,200
199,201
199,202
199,203
199,204
200,201
202,203
204,205
206,207
206,208
207,208
211,212
211,213
212,213
212,214
213,214
213,215
214,215
216,217
218,219
218,220
219,220
222,223
224,225
225,226
225,227
226,227
226,228
227,228
229,230
232,233
233,234
233,235
234,235
236,237
236,238
237,238
239,240
241,242
241,243
241,244
242,243
242,244
243,244
243,245
244,245
246,247
248,249
248,250
249,250
251,252
253,254
254,255
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
268,269
268,270
269,270
269,271
270,271
272,273
274,275
275,276
276,277
276,278
277,278
279,280
281,282
281,283
282,283
282,284
283,284
285,286
287,288
288,289
289,290
289,291
290,291
292,293
294,295
295,296
295,297
296,297
298,299
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,38,40,44,46,50,52,55,59,61,64,67,69,72,78,81,83,85,87,91,93,95,99,102,103,107,112,113,115,121,122,123,125,130,131,134,136,141,143,147,149,152,156,158,160,165,167,169,171,173,177,180,182,184,186,190,192,194,198,201,203,205,208,209,210,215,217,220,221,223,228,230,231,235,238,240,245,247,250,252,257,259,264,266,267,271,273,278,280,284,286,291,293,297,299
-----computeFrom-----
26,27
26,28
76,77
76,78
89,90
89,91
109,110
109,111
117,118
117,119
127,128
127,129
138,139
138,140
162,163
162,164
175,176
175,177
188,189
188,190
196,197
196,198
206,207
206,208
212,213
212,214
213,214
213,215
218,219
218,220
225,226
225,227
233,234
233,235
242,243
242,244
243,244
243,245
248,249
248,250
255,256
255,257
262,263
262,264
269,270
269,271
282,283
282,284
-----guardedBy-----
271,280
284,293
-----guardedByNegation-----
250,266
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_44_bad(){    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_44_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_44_bad
{    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
short data;
short data;
short
data
data
void (*funcPtr) (short) = badSink;
void (*funcPtr) (short) = badSink;
void
(*funcPtr) (short) = badSink
*funcPtr
*
funcPtr
short
short


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(160,126,0)
(155,44,0)
(65,116,0)
(60,123,0)
(28,8,0)
(58,113,0)
(56,148,0)
(53,93,0)
(64,123,0)
(28,67,0)
(91,17,0)
(26,150,0)
(169,175,0)
(78,16,0)
(113,116,0)
(12,116,0)
(21,31,0)
(91,136,0)
(82,74,0)
(125,33,0)
(18,86,0)
(38,133,0)
(108,68,0)
(133,33,0)
(153,164,0)
(114,133,0)
(57,133,0)
(8,126,0)
(133,38,0)
(145,126,0)
(111,18,0)
(143,108,0)
(109,2,0)
(161,14,0)
(175,137,0)
(89,150,0)
(2,164,0)
(69,154,0)
(120,58,0)
(107,164,0)
(99,104,0)
(37,117,0)
(86,116,0)
(129,126,0)
(172,163,0)
(147,92,0)
(49,86,0)
(152,34,0)
(164,2,0)
(72,155,0)
(142,136,0)
(180,115,0)
(101,74,0)
(157,116,0)
(78,159,0)
(179,143,0)
(31,116,0)
(23,22,0)
(108,143,0)
(15,38,0)
(63,164,0)
(153,50,0)
(165,101,0)
(140,82,0)
(13,88,0)
(97,68,0)
(16,78,0)
(34,88,0)
(96,105,0)
(148,150,0)
(48,34,0)
(95,25,0)
(10,85,0)
(113,58,0)
(49,74,0)
(44,155,0)
(45,133,0)
(5,14,0)
(113,93,0)
(110,126,0)
(3,116,0)
(151,126,0)
(42,150,0)
(167,82,0)
(174,116,0)
(50,107,0)
(86,49,0)
(79,126,0)
(163,86,0)
(119,153,0)
(128,17,0)
(40,116,0)
(7,74,0)
(74,101,0)
(52,101,0)
(50,153,0)
(104,22,0)
(76,16,0)
(51,4,0)
(29,91,0)
(133,86,0)
(104,158,0)
(104,74,0)
(24,126,0)
(154,136,0)
(136,91,0)
(82,22,0)
(131,91,0)
(175,4,0)
(14,173,0)
(155,74,0)
(28,86,0)
(176,81,0)
(77,44,0)
(122,126,0)
(98,137,0)
(30,153,0)
(134,150,0)
(130,89,0)
(136,142,0)
(75,126,0)
(68,108,0)
(124,31,0)
(74,116,0)
(78,70,0)
(166,113,0)
(73,126,0)
(143,33,0)
(65,92,0)
(123,85,0)
(137,116,0)
(96,146,0)
(32,47,0)
(91,74,0)
(85,116,0)
(61,127,0)
(103,126,0)
(68,33,0)
(0,107,0)
(81,74,0)
(14,164,0)
(94,178,0)
(149,103,0)
(70,78,0)
(91,131,0)
(35,131,0)
(83,163,0)
(135,143,0)
(107,50,0)
(112,81,0)
(121,70,0)
(164,116,0)
(141,49,0)
(117,65,0)
(17,91,0)
(132,39,0)
(89,96,0)
(88,116,0)
(43,103,0)
(118,96,0)
(177,86,0)
(22,126,0)
(123,33,0)
(87,148,0)
(90,49,0)
(46,22,0)
(36,38,0)
(1,159,0)
(93,113,0)
(4,175,0)
(20,101,0)
(6,54,0)
(66,16,0)
(89,14,0)
(62,155,0)
(33,133,0)
(138,28,0)
(139,107,0)
(162,4,0)
(55,68,0)
(92,65,0)
(33,116,0)
(100,126,0)
(89,26,0)
(156,8,0)
(159,78,0)
(41,26,0)
(170,49,0)
(80,117,0)
(19,116,0)
(163,8,0)
(168,8,0)
(11,18,0)
(126,150,0)
(105,96,0)
(27,116,0)
(71,26,0)
(102,126,0)
(106,105,0)
(136,154,0)
(94,84,1)
(104,99,1)
(86,49,1)
(5,161,1)
(59,96,1)
(177,44,1)
(81,176,1)
(46,103,1)
(175,169,1)
(29,65,1)
(17,91,1)
(44,77,1)
(118,50,1)
(36,57,1)
(132,81,1)
(179,33,1)
(4,51,1)
(60,64,1)
(152,48,1)
(95,17,1)
(48,113,1)
(7,31,1)
(176,112,1)
(153,30,1)
(140,180,1)
(88,13,1)
(140,6,1)
(13,34,1)
(101,20,1)
(161,50,1)
(57,114,1)
(123,60,1)
(35,136,1)
(120,166,1)
(111,86,1)
(76,59,1)
(84,163,1)
(131,35,1)
(53,81,1)
(41,71,1)
(130,84,1)
(91,136,1)
(128,91,1)
(133,86,1)
(90,170,1)
(113,58,1)
(143,33,1)
(61,159,1)
(43,26,1)
(163,86,1)
(113,93,1)
(163,83,1)
(143,135,1)
(96,105,1)
(16,66,1)
(114,125,1)
(85,10,1)
(165,7,1)
(103,149,1)
(140,32,1)
(162,88,1)
(169,4,1)
(92,147,1)
(140,95,1)
(107,164,1)
(149,43,1)
(168,22,1)
(68,33,1)
(137,98,1)
(34,152,1)
(76,8,1)
(32,18,1)
(175,4,1)
(51,162,1)
(106,118,1)
(133,38,1)
(136,154,1)
(164,2,1)
(135,179,1)
(153,164,1)
(14,5,1)
(155,72,1)
(119,107,1)
(1,78,1)
(108,68,1)
(167,140,1)
(133,45,1)
(147,117,1)
(66,76,1)
(22,23,1)
(91,131,1)
(37,137,1)
(112,74,1)
(81,74,1)
(63,85,1)
(140,59,1)
(136,142,1)
(97,55,1)
(82,167,1)
(140,132,1)
(44,155,1)
(50,153,1)
(84,28,1)
(10,123,1)
(172,104,1)
(9,89,1)
(180,108,1)
(82,74,1)
(89,130,1)
(89,96,1)
(166,93,1)
(15,36,1)
(21,159,1)
(26,41,1)
(55,143,1)
(69,29,1)
(72,62,1)
(108,143,1)
(33,133,1)
(58,120,1)
(28,86,1)
(99,82,1)
(159,78,1)
(64,108,1)
(0,164,1)
(130,94,1)
(8,156,1)
(140,61,1)
(77,155,1)
(109,63,1)
(159,1,1)
(70,121,1)
(89,14,1)
(163,8,1)
(62,17,1)
(89,26,1)
(28,138,1)
(18,11,1)
(83,172,1)
(124,21,1)
(105,106,1)
(30,119,1)
(123,33,1)
(104,74,1)
(65,92,1)
(18,86,1)
(17,128,1)
(20,52,1)
(154,69,1)
(93,53,1)
(50,107,1)
(139,0,1)
(2,109,1)
(28,8,1)
(68,97,1)
(49,141,1)
(11,111,1)
(56,87,1)
(117,80,1)
(82,22,1)
(78,16,1)
(107,139,1)
(78,70,1)
(156,168,1)
(49,74,1)
(45,38,1)
(148,56,1)
(98,175,1)
(23,46,1)
(104,22,1)
(38,15,1)
(74,101,1)
(31,124,1)
(155,74,1)
(80,37,1)
(14,164,1)
(52,165,1)
(59,14,1)
(138,163,1)
(125,18,1)
(71,148,1)
(141,90,1)
(91,74,1)
(6,44,1)
(172,82,1)
(121,16,1)
(170,177,1)
(2,108,2)
(119,107,2)
(86,49,2)
(0,108,2)
(51,81,2)
(95,17,2)
(74,101,2)
(153,164,2)
(50,108,2)
(131,81,2)
(152,81,2)
(169,81,2)
(96,50,2)
(166,81,2)
(106,50,2)
(44,155,2)
(60,108,2)
(117,81,2)
(121,59,2)
(143,18,2)
(108,143,2)
(10,108,2)
(136,142,2)
(37,81,2)
(4,81,2)
(124,159,2)
(105,50,2)
(159,78,2)
(107,164,2)
(153,107,2)
(136,154,2)
(62,17,2)
(48,81,2)
(137,81,2)
(133,86,2)
(94,84,2)
(132,81,2)
(1,59,2)
(59,108,2)
(17,91,2)
(78,70,2)
(89,14,2)
(33,133,2)
(114,18,2)
(16,59,2)
(7,159,2)
(14,164,2)
(91,74,2)
(64,108,2)
(138,163,2)
(161,50,2)
(66,59,2)
(49,44,2)
(118,50,2)
(91,136,2)
(162,81,2)
(20,159,2)
(28,8,2)
(113,58,2)
(78,59,2)
(29,81,2)
(164,108,2)
(91,131,2)
(35,81,2)
(128,81,2)
(98,81,2)
(163,8,2)
(155,17,2)
(179,18,2)
(112,159,2)
(65,92,2)
(177,44,2)
(141,44,2)
(163,86,2)
(147,81,2)
(5,50,2)
(123,33,2)
(85,108,2)
(44,17,2)
(89,26,2)
(53,81,2)
(89,96,2)
(139,108,2)
(143,33,2)
(15,18,2)
(14,50,2)
(68,33,2)
(81,159,2)
(28,163,2)
(175,81,2)
(113,81,2)
(45,18,2)
(32,18,2)
(113,93,2)
(18,44,2)
(86,44,2)
(61,159,2)
(78,16,2)
(101,159,2)
(57,18,2)
(49,74,2)
(109,108,2)
(123,108,2)
(90,44,2)
(96,105,2)
(28,86,2)
(108,18,2)
(133,38,2)
(68,143,2)
(135,18,2)
(30,107,2)
(82,22,2)
(81,74,2)
(136,81,2)
(91,81,2)
(111,44,2)
(175,4,2)
(76,59,2)
(180,108,2)
(65,81,2)
(108,68,2)
(93,81,2)
(82,74,2)
(120,81,2)
(50,153,2)
(104,22,2)
(33,18,2)
(21,159,2)
(13,81,2)
(155,74,2)
(176,159,2)
(80,81,2)
(104,74,2)
(70,59,2)
(159,59,2)
(74,159,2)
(17,81,2)
(104,82,2)
(154,81,2)
(164,2,2)
(52,159,2)
(69,81,2)
(6,44,2)
(34,81,2)
(88,81,2)
(77,17,2)
(92,81,2)
(97,143,2)
(31,159,2)
(107,108,2)
(165,159,2)
(63,108,2)
(11,44,2)
(18,86,2)
(36,18,2)
(72,17,2)
(133,18,2)
(99,82,2)
(50,107,2)
(58,81,2)
(170,44,2)
(55,143,2)
(125,18,2)
(38,18,2)
-----------------------------------
(0,tempInt)
(1,NO_ERROR)
(2,atoi(inputBuffer)
(3,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(4,service.sin_addr)
(5,tempInt)
(6,break;)
(7,listenSocket)
(8,acceptSocket = INVALID_SOCKET)
(9,RET)
(10,\'\\\\0\')
(11,SOCKET_ERROR)
(12,if (WSAStartup(MAKEWORD(2,2)
(13,AF_INET)
(14,data = tempInt)
(15,1)
(16,MAKEWORD(2,2)
(17,bind(listenSocket, (struct sockaddr*)
(18,acceptSocket == SOCKET_ERROR)
(19,if (bind(listenSocket, (struct sockaddr*)
(20,IPPROTO_TCP)
(21,wsaDataInit)
(22,listenSocket = INVALID_SOCKET)
(23,INVALID_SOCKET)
(24,wsaDataInit)
(25,)
(26,data = 0)
(27,if (acceptSocket == SOCKET_ERROR)
(28,CLOSE_SOCKET(acceptSocket)
(29,listenSocket)
(30,SHRT_MIN)
(31,wsaDataInit = 1)
(32,break;)
(33,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(34,service.sin_family)
(35,service)
(36,CHAR_ARRAY_SIZE)
(37,service)
(38,CHAR_ARRAY_SIZE - 1)
(39,)
(40,if (recvResult == SOCKET_ERROR || recvResult == 0)
(41,0)
(42,funcPtr)
(43,wsaDataInit)
(44,listen(listenSocket, LISTEN_BACKLOG)
(45,0)
(46,listenSocket)
(47,)
(48,service)
(49,accept(listenSocket, NULL, NULL)
(50,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(51,sin_addr)
(52,SOCK_STREAM)
(53,service)
(54,)
(55,recvResult)
(56,badSink)
(57,inputBuffer)
(58,sizeof(service)
(59,0)
(60,recvResult)
(61,break;)
(62,listenSocket)
(63,tempInt)
(64,inputBuffer)
(65,service.sin_port = htons(TCP_PORT)
(66,2)
(67,)
(68,recvResult == 0)
(69,service)
(70,&wsaData)
(71,data)
(72,LISTEN_BACKLOG)
(73,listenSocket)
(74,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(75,if (listenSocket != INVALID_SOCKET)
(76,2)
(77,SOCKET_ERROR)
(78,WSAStartup(MAKEWORD(2,2)
(79,tempInt)
(80,sin_port)
(81,listenSocket == INVALID_SOCKET)
(82,listenSocket != INVALID_SOCKET)
(83,INVALID_SOCKET)
(84,wsaDataInit)
(85,inputBuffer[recvResult] = '\\\\0')
(86,acceptSocket = accept(listenSocket, NULL, NULL)
(87,funcPtr)
(88,service.sin_family = AF_INET)
(89,funcPtr(data)
(90,NULL)
(91,bind(listenSocket, (struct sockaddr*)
(92,htons(TCP_PORT)
(93,&service)
(94,WSACleanup()
(95,break;)
(96,data = -1)
(97,0)
(98,INADDR_ANY)
(99,listenSocket)
(100,acceptSocket)
(101,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(102,if (acceptSocket != INVALID_SOCKET)
(103,wsaDataInit = 0)
(104,CLOSE_SOCKET(listenSocket)
(105,-1)
(106,1)
(107,tempInt > SHRT_MAX)
(108,recvResult == SOCKET_ERROR || recvResult == 0)
(109,inputBuffer)
(110,if (wsaDataInit)
(111,acceptSocket)
(112,listenSocket)
(113,memset(&service, 0, sizeof(service)
(114,acceptSocket)
(115,)
(116,)
(117,service.sin_port)
(118,data)
(119,tempInt)
(120,service)
(121,wsaData)
(122,wsaData)
(123,inputBuffer[recvResult])
(124,1)
(125,recvResult)
(126,)
(127,)
(128,SOCKET_ERROR)
(129,recvResult)
(130,data)
(131,sizeof(service)
(132,break;)
(133,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(134,data)
(135,SOCKET_ERROR)
(136,(struct sockaddr*)
(137,service.sin_addr.s_addr = INADDR_ANY)
(138,acceptSocket)
(139,SHRT_MAX)
(140,listenSocket)
(141,NULL)
(142,struct sockaddr*)
(143,recvResult == SOCKET_ERROR)
(144,'\\\\0')
(145,inputBuffer)
(146,)
(147,TCP_PORT)
(148,(*funcPtr)
(149,0)
(150,)
(151,service)
(152,sin_family)
(153,tempInt < SHRT_MIN)
(154,&service)
(155,listen(listenSocket, LISTEN_BACKLOG)
(156,INVALID_SOCKET)
(157,if (listenSocket == INVALID_SOCKET)
(158,)
(159,WSAStartup(MAKEWORD(2,2)
(160,do)
(161,data)
(162,service)
(163,acceptSocket != INVALID_SOCKET)
(164,tempInt = atoi(inputBuffer)
(165,AF_INET)
(166,0)
(167,INVALID_SOCKET)
(168,acceptSocket)
(169,s_addr)
(170,listenSocket)
(171,inputBuffer[recvResult] = \'\\\\0\')
(172,acceptSocket)
(173,)
(174,if (listen(listenSocket, LISTEN_BACKLOG)
(175,service.sin_addr.s_addr)
(176,INVALID_SOCKET)
(177,acceptSocket)
(178,)
(179,recvResult)
(180,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^