-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,16,18,23,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
21,22
21,23
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        /* FLAW: Use a negative number */        data = -1;    }
1
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(21,13,0)
(41,15,0)
(45,5,0)
(5,13,0)
(34,11,0)
(16,1,0)
(42,37,0)
(8,37,0)
(13,32,0)
(19,37,0)
(13,38,0)
(1,42,0)
(31,20,0)
(22,42,0)
(12,11,0)
(5,0,0)
(7,38,0)
(39,15,0)
(23,39,0)
(0,20,0)
(33,1,0)
(46,14,0)
(27,0,0)
(14,4,0)
(43,44,0)
(1,14,0)
(35,9,0)
(44,10,0)
(17,32,0)
(48,38,0)
(36,42,0)
(9,42,0)
(5,42,0)
(0,18,0)
(1,0,0)
(40,10,0)
(37,38,0)
(32,13,0)
(30,37,0)
(24,37,0)
(11,0,0)
(15,39,0)
(25,5,0)
(44,30,0)
(9,37,0)
(10,44,0)
(11,13,0)
(5,4,0)
(20,0,0)
(28,10,0)
(47,15,0)
(2,30,0)
(1,13,0)
(29,5,0)
(15,37,0)
(26,39,0)
(33,5,1)
(11,0,1)
(41,47,1)
(5,0,1)
(13,32,1)
(23,26,1)
(0,20,1)
(17,21,1)
(44,10,1)
(6,13,1)
(30,2,1)
(9,35,1)
(10,40,1)
(36,6,1)
(43,15,1)
(5,42,1)
(5,29,1)
(36,0,1)
(45,25,1)
(47,42,1)
(25,11,1)
(11,13,1)
(46,1,1)
(12,34,1)
(32,17,1)
(31,27,1)
(22,36,1)
(26,41,1)
(2,44,1)
(35,11,1)
(34,30,1)
(9,42,1)
(28,43,1)
(42,22,1)
(11,12,1)
(1,16,1)
(29,45,1)
(40,28,1)
(35,14,1)
(39,23,1)
(1,42,1)
(1,13,1)
(15,39,1)
(16,33,1)
(14,46,1)
(1,0,1)
(20,31,1)
(27,6,1)
(5,13,1)
(3,9,1)
(44,10,2)
(45,11,2)
(13,32,2)
(5,42,2)
(5,11,2)
(1,0,2)
(16,11,2)
(25,11,2)
(15,39,2)
(11,0,2)
(14,11,2)
(46,11,2)
(33,11,2)
(1,11,2)
(0,20,2)
(0,6,2)
(5,0,2)
(1,13,2)
(9,42,2)
(31,6,2)
(29,11,2)
(20,6,2)
(5,13,2)
(1,42,2)
(27,6,2)
(11,13,2)
-----------------------------------
(0,data = -1)
(1,dest[data])
(2,\\\'\\\\0\\\')
(3,RET)
(4,)
(5,memcpy(dest, source, data)
(6,1)
(7,if(1)
(8,if (data < 100)
(9,printLine(dest)
(10,100-1)
(11,data < 100)
(12,100)
(13,data = -1)
(14,dest[data] = \\\'\\\\0\\\')
(15,memset(source, \\\'A\\\', 100-1)
(16,data)
(17,1)
(18,)
(19,dest)
(20,-1)
(21,data)
(22,"")
(23,1)
(24,source)
(25,dest)
(26,100)
(27,data)
(28,100)
(29,data)
(30,source[100-1] = \\\'\\\\0\\\')
(31,1)
(32,-1)
(33,dest)
(34,data)
(35,dest)
(36,dest)
(37,)
(38,)
(39,100-1)
(40,1)
(41,\\\'A\\\')
(42,dest[100] = "")
(43,source)
(44,source[100-1])
(45,source)
(46,\\\'\\\\0\\\')
(47,source)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^