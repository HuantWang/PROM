-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
52,53
52,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,27,30,32,34,36,40,42,43,45,46,51,53,54,55,59,60,65,67,69,71,76,78,79,83,85
-----computeFrom-----
44,45
44,46
48,49
48,50
52,53
52,54
57,58
57,59
73,74
73,75
-----guardedBy-----
59,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__fscanf_memmove_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(33,41,0)
(18,25,0)
(24,8,0)
(34,8,0)
(5,21,0)
(0,32,0)
(37,41,0)
(35,4,0)
(8,15,0)
(21,7,0)
(4,32,0)
(11,21,0)
(37,8,0)
(13,0,0)
(27,3,0)
(40,8,0)
(17,37,0)
(18,32,0)
(18,7,0)
(9,34,0)
(1,7,0)
(36,14,0)
(34,7,0)
(6,26,0)
(3,24,0)
(42,18,0)
(31,18,0)
(39,32,0)
(32,0,0)
(28,8,0)
(21,32,0)
(16,41,0)
(26,3,0)
(3,26,0)
(12,4,0)
(10,18,0)
(21,14,0)
(20,8,0)
(23,7,0)
(38,15,0)
(7,8,0)
(0,19,0)
(41,37,0)
(30,24,0)
(29,26,0)
(32,15,0)
(2,37,0)
(14,25,0)
(23,1,1)
(30,3,1)
(4,12,1)
(5,11,1)
(3,26,1)
(36,21,1)
(21,5,1)
(35,24,1)
(32,0,1)
(13,39,1)
(37,41,1)
(9,14,1)
(6,27,1)
(22,34,1)
(0,13,1)
(27,37,1)
(18,31,1)
(16,2,1)
(34,7,1)
(31,10,1)
(2,17,1)
(10,42,1)
(21,7,1)
(33,16,1)
(29,6,1)
(21,32,1)
(0,19,1)
(9,4,1)
(1,32,1)
(11,18,1)
(18,32,1)
(7,23,1)
(4,32,1)
(24,30,1)
(14,36,1)
(26,29,1)
(42,4,1)
(41,33,1)
(34,9,1)
(18,7,1)
(17,7,1)
(12,35,1)
(11,4,2)
(10,4,2)
(18,4,2)
(31,4,2)
(3,26,2)
(5,4,2)
(37,41,2)
(0,19,2)
(36,4,2)
(18,7,2)
(32,0,2)
(14,4,2)
(34,7,2)
(4,32,2)
(21,32,2)
(21,4,2)
(18,32,2)
(42,4,2)
(21,7,2)
-----------------------------------
(0,*dataPtr)
(1,dest)
(2,\\\'A\\\')
(3,source[100-1])
(4,data < 100)
(5,data)
(6,100)
(7,dest[100] = "")
(8,)
(9,dest)
(10,source)
(11,dest)
(12,100)
(13,dataPtr)
(14,dest[data] = \\\'\\\\0\\\')
(15,)
(16,100)
(17,source)
(18,memmove(dest, source, data)
(19,short * dataPtr)
(20,if (data < 100)
(21,dest[data])
(22,RET)
(23,"")
(24,source[100-1] = \\\'\\\\0\\\')
(25,)
(26,100-1)
(27,source)
(28,dest)
(29,1)
(30,\\\'\\\\0\\\')
(31,data)
(32,data = *dataPtr)
(33,1)
(34,printLine(dest)
(35,data)
(36,\\\'\\\\0\\\')
(37,memset(source, \\\'A\\\', 100-1)
(38,data)
(39,data)
(40,source)
(41,100-1)
(42,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^