-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_06_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,71,73,74,78,80,83,85,89,91,96,98,102,104,105,108,109,114,117,118,119,123,125,129,131
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
87,88
87,89
106,107
106,108
111,112
111,113
115,116
115,117
-----guardedBy-----
40,56
66,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_06_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_06_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_06_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(52,60,0)
(57,61,0)
(37,39,0)
(63,58,0)
(68,30,0)
(11,66,0)
(43,38,0)
(66,11,0)
(29,39,0)
(41,58,0)
(32,2,0)
(20,0,0)
(55,66,0)
(34,49,0)
(21,24,0)
(2,49,0)
(27,40,0)
(1,62,0)
(34,61,0)
(22,14,0)
(10,3,0)
(48,47,0)
(14,64,0)
(0,63,0)
(3,63,0)
(47,24,0)
(62,61,0)
(61,62,0)
(30,61,0)
(59,36,0)
(16,57,0)
(0,24,0)
(63,3,0)
(24,47,0)
(36,24,0)
(26,15,0)
(47,38,0)
(33,49,0)
(2,61,0)
(57,0,0)
(28,4,0)
(45,58,0)
(38,28,0)
(51,40,0)
(8,24,0)
(36,14,0)
(60,24,0)
(60,63,0)
(25,58,0)
(6,61,0)
(23,63,0)
(42,51,0)
(65,30,0)
(61,49,0)
(54,28,0)
(46,28,0)
(36,63,0)
(67,49,0)
(14,36,0)
(0,57,0)
(14,61,0)
(64,49,0)
(57,49,0)
(15,9,0)
(7,34,0)
(50,36,0)
(18,64,0)
(53,57,0)
(62,1,0)
(60,62,0)
(17,38,0)
(35,8,0)
(40,38,0)
(31,40,0)
(24,5,0)
(12,8,0)
(44,0,0)
(62,60,0)
(40,51,0)
(13,40,0)
(8,63,0)
(11,19,0)
(24,47,1)
(8,12,1)
(29,37,1)
(0,24,1)
(61,62,1)
(35,39,1)
(13,31,1)
(60,24,1)
(36,63,1)
(27,13,1)
(60,63,1)
(47,38,1)
(32,64,1)
(40,27,1)
(8,24,1)
(51,40,1)
(3,10,1)
(2,61,1)
(36,24,1)
(57,0,1)
(52,6,1)
(55,30,1)
(35,15,1)
(56,8,1)
(57,61,1)
(14,36,1)
(12,35,1)
(48,21,1)
(30,68,1)
(53,30,1)
(63,3,1)
(18,14,1)
(62,60,1)
(56,34,1)
(35,24,1)
(60,52,1)
(51,42,1)
(11,66,1)
(21,51,1)
(50,22,1)
(38,17,1)
(31,38,1)
(34,61,1)
(43,39,1)
(2,32,1)
(39,29,1)
(14,61,1)
(64,18,1)
(6,8,1)
(10,23,1)
(22,57,1)
(40,38,1)
(17,43,1)
(37,63,1)
(47,48,1)
(53,11,1)
(16,53,1)
(66,55,1)
(8,63,1)
(7,2,1)
(20,44,1)
(68,65,1)
(59,50,1)
(30,61,1)
(0,63,1)
(36,59,1)
(65,61,1)
(0,20,1)
(42,40,1)
(34,7,1)
(26,51,1)
(15,26,1)
(62,1,1)
(44,16,1)
(30,8,2)
(11,30,2)
(60,8,2)
(8,24,2)
(14,36,2)
(6,8,2)
(42,39,2)
(47,51,2)
(8,63,2)
(14,61,2)
(51,39,2)
(20,8,2)
(30,61,2)
(0,63,2)
(0,8,2)
(31,39,2)
(14,8,2)
(24,47,2)
(66,30,2)
(62,8,2)
(0,24,2)
(53,8,2)
(61,62,2)
(22,8,2)
(43,39,2)
(38,39,2)
(34,61,2)
(62,1,2)
(13,39,2)
(62,60,2)
(57,0,2)
(36,8,2)
(55,30,2)
(63,3,2)
(32,8,2)
(34,8,2)
(36,63,2)
(59,8,2)
(60,24,2)
(68,8,2)
(51,40,2)
(26,51,2)
(57,8,2)
(60,63,2)
(44,8,2)
(16,8,2)
(7,8,2)
(24,51,2)
(15,51,2)
(2,8,2)
(61,8,2)
(64,8,2)
(17,39,2)
(57,61,2)
(27,39,2)
(2,61,2)
(52,8,2)
(40,39,2)
(18,8,2)
(11,66,2)
(65,8,2)
(40,38,2)
(21,51,2)
(47,38,2)
(50,8,2)
(48,51,2)
(36,24,2)
-----------------------------------
(0,data-1)
(1,char *)
(2,printLine(dataBuffer)
(3,-1)
(4,)
(5,)
(6,dataBuffer)
(7,dataBuffer)
(8,data < 100)
(9,)
(10,1)
(11,exit(-1)
(12,100)
(13,CHAR_ARRAY_SIZE)
(14,dataBuffer[data-1])
(15,printLine("fgets()
(16,\\\'A\\\')
(17,"")
(18,\\\'\\\\0\\\')
(19,)
(20,1)
(21,data)
(22,dataBuffer)
(23,data)
(24,data = atoi(inputBuffer)
(25,if(STATIC_CONST_FIVE==5)
(26,"fgets()
(27,stdin)
(28,)
(29,5)
(30,dataBuffer == NULL)
(31,inputBuffer)
(32,dataBuffer)
(33,dataBuffer)
(34,free(dataBuffer)
(35,data)
(36,data-1)
(37,STATIC_CONST_FIVE)
(38,inputBuffer[CHAR_ARRAY_SIZE] = "")
(39,STATIC_CONST_FIVE==5)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,data)
(42,NULL)
(43,inputBuffer)
(44,data)
(45,if (data < 100)
(46,inputBuffer)
(47,atoi(inputBuffer)
(48,inputBuffer)
(49,)
(50,data)
(51,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(52,data)
(53,dataBuffer)
(54,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,1)
(56,RET)
(57,memset(dataBuffer, \\\'A\\\', data-1)
(58,)
(59,1)
(60,malloc(data)
(61,* dataBuffer = (char *)
(62,(char *)
(63,data = -1)
(64,dataBuffer[data-1] = \\\'\\\\0\\\')
(65,dataBuffer)
(66,-1)
(67,if (dataBuffer == NULL)
(68,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^