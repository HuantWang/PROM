-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType myStruct;
    /* Initialize data */
    data = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myStruct.structFirst = data;
    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
215,216
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,189,193,195,200,202,207,208,210,214,216
-----computeFrom-----
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
191,192
191,193
204,205
204,206
-----guardedBy-----
193,202
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType myStruct;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myStruct.structFirst = data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct);}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType myStruct;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myStruct.structFirst = data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct);}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType myStruct;
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType myStruct;
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67_structType
myStruct
myStruct
data = -1;
data = -1
data
data
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
myStruct.structFirst = data;
myStruct.structFirst = data
myStruct.structFirst
myStruct
myStruct
structFirst
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct);
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink
myStruct
myStruct
-----joern-----
(2,1,0)
(36,128,0)
(1,85,0)
(106,89,0)
(107,11,0)
(72,3,0)
(72,38,0)
(97,70,0)
(71,59,0)
(73,69,0)
(40,8,0)
(86,74,0)
(126,40,0)
(56,40,0)
(75,38,0)
(108,77,0)
(133,13,0)
(21,84,0)
(73,68,0)
(26,98,0)
(52,22,0)
(76,118,0)
(119,13,0)
(116,31,0)
(47,72,0)
(27,120,0)
(62,74,0)
(126,5,0)
(134,87,0)
(42,89,0)
(98,77,0)
(3,130,0)
(72,77,0)
(67,95,0)
(60,23,0)
(23,77,0)
(17,19,0)
(101,108,0)
(113,84,0)
(77,8,0)
(68,84,0)
(78,85,0)
(65,84,0)
(14,54,0)
(88,3,0)
(13,133,0)
(121,45,0)
(84,128,0)
(85,1,0)
(32,126,0)
(74,84,0)
(108,68,0)
(87,8,0)
(100,16,0)
(117,84,0)
(85,77,0)
(127,77,0)
(31,133,0)
(7,56,0)
(11,19,0)
(28,95,0)
(35,5,0)
(92,108,0)
(110,103,0)
(95,85,0)
(34,48,0)
(19,11,0)
(90,23,0)
(3,72,0)
(61,128,0)
(81,128,0)
(93,45,0)
(87,134,0)
(19,8,0)
(104,85,0)
(125,66,0)
(5,35,0)
(70,54,0)
(85,95,0)
(45,87,0)
(102,88,0)
(29,5,0)
(20,8,0)
(105,106,0)
(15,37,0)
(120,27,0)
(10,59,0)
(126,128,0)
(91,8,0)
(9,120,0)
(129,67,0)
(103,8,0)
(63,110,0)
(122,8,0)
(48,83,0)
(111,48,0)
(72,37,0)
(4,133,0)
(24,8,0)
(27,67,0)
(0,98,0)
(37,72,0)
(64,89,0)
(73,77,0)
(43,31,0)
(89,106,0)
(80,49,0)
(58,84,0)
(114,134,0)
(132,4,0)
(83,8,0)
(38,72,0)
(131,84,0)
(39,84,0)
(124,19,0)
(96,1,0)
(67,27,0)
(54,8,0)
(53,40,0)
(112,73,0)
(95,8,0)
(50,16,0)
(130,3,0)
(59,8,0)
(57,70,0)
(82,85,0)
(77,23,0)
(55,17,0)
(106,103,0)
(12,36,0)
(41,120,0)
(40,56,0)
(19,17,0)
(94,23,0)
(51,83,0)
(120,95,0)
(133,4,0)
(103,110,0)
(5,128,0)
(133,31,0)
(46,67,0)
(123,79,0)
(33,84,0)
(30,35,0)
(25,68,0)
(115,68,0)
(70,95,0)
(44,84,0)
(3,88,0)
(16,126,0)
(23,90,1)
(126,32,1)
(133,31,1)
(45,93,1)
(74,62,1)
(82,28,1)
(28,38,1)
(92,80,1)
(98,0,1)
(88,102,1)
(35,30,1)
(13,119,1)
(106,89,1)
(3,88,1)
(47,87,1)
(17,55,1)
(106,105,1)
(119,31,1)
(42,64,1)
(2,78,1)
(67,46,1)
(27,120,1)
(34,111,1)
(93,121,1)
(123,4,1)
(124,17,1)
(10,4,1)
(80,98,1)
(70,97,1)
(60,94,1)
(63,106,1)
(102,47,1)
(90,60,1)
(37,15,1)
(94,127,1)
(95,85,1)
(96,2,1)
(116,109,1)
(15,3,1)
(4,132,1)
(114,45,1)
(72,37,1)
(89,42,1)
(70,95,1)
(132,133,1)
(30,29,1)
(26,77,1)
(19,17,1)
(108,68,1)
(32,16,1)
(103,110,1)
(73,68,1)
(14,70,1)
(18,73,1)
(56,7,1)
(108,101,1)
(101,92,1)
(92,109,1)
(104,1,1)
(110,63,1)
(62,86,1)
(1,96,1)
(85,1,1)
(71,10,1)
(48,34,1)
(50,125,1)
(73,77,1)
(68,115,1)
(76,38,1)
(97,57,1)
(100,50,1)
(59,71,1)
(41,9,1)
(133,13,1)
(0,26,1)
(125,18,1)
(25,74,1)
(57,27,1)
(85,104,1)
(105,89,1)
(55,98,1)
(6,36,1)
(64,83,1)
(72,77,1)
(31,43,1)
(92,52,1)
(51,48,1)
(120,41,1)
(18,108,1)
(52,27,1)
(38,72,1)
(109,40,1)
(98,77,1)
(4,133,1)
(116,68,1)
(112,108,1)
(129,95,1)
(38,75,1)
(134,114,1)
(50,18,1)
(43,116,1)
(3,130,1)
(54,14,1)
(85,77,1)
(87,134,1)
(92,123,1)
(92,76,1)
(115,25,1)
(36,12,1)
(19,11,1)
(9,67,1)
(73,112,1)
(5,35,1)
(16,100,1)
(11,107,1)
(121,103,1)
(107,124,1)
(127,59,1)
(126,40,1)
(126,5,1)
(120,95,1)
(53,54,1)
(72,3,1)
(108,77,1)
(75,72,1)
(78,82,1)
(46,129,1)
(83,51,1)
(40,56,1)
(67,95,1)
(77,23,1)
(12,126,1)
(86,5,1)
(27,67,1)
(7,53,1)
(111,19,1)
(47,98,2)
(26,4,2)
(64,98,2)
(56,27,2)
(87,134,2)
(53,27,2)
(19,17,2)
(63,98,2)
(40,27,2)
(95,85,2)
(105,98,2)
(82,38,2)
(111,98,2)
(57,27,2)
(4,109,2)
(120,95,2)
(34,98,2)
(133,13,2)
(43,109,2)
(108,77,2)
(97,27,2)
(19,11,2)
(75,98,2)
(40,56,2)
(103,110,2)
(134,98,2)
(76,38,2)
(37,98,2)
(126,40,2)
(106,98,2)
(83,98,2)
(108,68,2)
(119,109,2)
(2,38,2)
(5,35,2)
(133,31,2)
(126,5,2)
(3,130,2)
(107,98,2)
(54,27,2)
(104,38,2)
(51,98,2)
(27,38,2)
(28,38,2)
(10,4,2)
(14,27,2)
(114,98,2)
(72,98,2)
(27,120,2)
(98,4,2)
(72,77,2)
(67,38,2)
(98,77,2)
(132,109,2)
(0,4,2)
(124,98,2)
(90,4,2)
(31,109,2)
(88,98,2)
(52,27,2)
(46,38,2)
(73,68,2)
(72,37,2)
(106,89,2)
(41,67,2)
(9,67,2)
(129,38,2)
(11,98,2)
(96,38,2)
(133,109,2)
(4,133,2)
(109,27,2)
(123,4,2)
(38,72,2)
(121,98,2)
(23,4,2)
(94,4,2)
(1,38,2)
(87,98,2)
(67,95,2)
(42,98,2)
(38,98,2)
(72,3,2)
(60,4,2)
(116,109,2)
(17,98,2)
(85,38,2)
(15,98,2)
(127,4,2)
(85,77,2)
(89,98,2)
(112,108,2)
(78,38,2)
(59,4,2)
(85,1,2)
(73,77,2)
(55,98,2)
(80,98,2)
(95,38,2)
(93,98,2)
(103,98,2)
(7,27,2)
(102,98,2)
(3,98,2)
(120,67,2)
(110,98,2)
(13,109,2)
(70,27,2)
(71,4,2)
(73,108,2)
(27,67,2)
(77,23,2)
(3,88,2)
(77,4,2)
(70,95,2)
(48,98,2)
(19,98,2)
(125,18,2)
(45,98,2)
-----------------------------------
(0,INVALID_SOCKET)
(1,CHAR_ARRAY_SIZE - 1)
(2,CHAR_ARRAY_SIZE)
(3,(struct sockaddr*)
(4,WSAStartup(MAKEWORD(2,2)
(5,data = -1)
(6,RET)
(7,inputBuffer)
(8,)
(9,recvResult)
(10,wsaDataInit)
(11,sizeof(service)
(12,myStruct)
(13,&wsaData)
(14,'\\\\0')
(15,service)
(16,myStruct.structFirst)
(17,&service)
(18,wsaDataInit)
(19,memset(&service, 0, sizeof(service)
(20,if (WSAStartup(MAKEWORD(2,2)
(21,recvResult)
(22,)
(23,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(24,if (connect(connectSocket, (struct sockaddr*)
(25,connectSocket)
(26,connectSocket)
(27,recvResult == SOCKET_ERROR || recvResult == 0)
(28,recvResult)
(29,data)
(30,1)
(31,MAKEWORD(2,2)
(32,data)
(33,service)
(34,sin_family)
(35,-1)
(36,CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_67b_badSink(myStruct)
(37,sizeof(service)
(38,connect(connectSocket, (struct sockaddr*)
(39,if (wsaDataInit)
(40,data = atoi(inputBuffer)
(41,0)
(42,sin_addr)
(43,2)
(44,connectSocket)
(45,service.sin_port)
(46,SOCKET_ERROR)
(47,connectSocket)
(48,service.sin_family)
(49,)
(50,myStruct)
(51,AF_INET)
(52,break;)
(53,data)
(54,inputBuffer[recvResult] = \'\\\\0\')
(55,service)
(56,atoi(inputBuffer)
(57,inputBuffer)
(58,if (connectSocket != INVALID_SOCKET)
(59,wsaDataInit = 1)
(60,SOCK_STREAM)
(61,data)
(62,0)
(63,IP_ADDRESS)
(64,service)
(65,wsaDataInit)
(66,)
(67,recvResult == SOCKET_ERROR)
(68,connectSocket = INVALID_SOCKET)
(69,)
(70,inputBuffer[recvResult])
(71,1)
(72,connect(connectSocket, (struct sockaddr*)
(73,CLOSE_SOCKET(connectSocket)
(74,wsaDataInit = 0)
(75,SOCKET_ERROR)
(76,break;)
(77,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(78,inputBuffer)
(79,)
(80,break;)
(81,myStruct)
(82,connectSocket)
(83,service.sin_family = AF_INET)
(84,)
(85,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(86,wsaDataInit)
(87,service.sin_port = htons(TCP_PORT)
(88,&service)
(89,service.sin_addr)
(90,IPPROTO_TCP)
(91,if (connectSocket == INVALID_SOCKET)
(92,connectSocket)
(93,sin_port)
(94,AF_INET)
(95,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(96,1)
(97,recvResult)
(98,connectSocket == INVALID_SOCKET)
(99,\'\\\\0\')
(100,structFirst)
(101,INVALID_SOCKET)
(102,service)
(103,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(104,0)
(105,s_addr)
(106,service.sin_addr.s_addr)
(107,service)
(108,connectSocket != INVALID_SOCKET)
(109,0)
(110,inet_addr(IP_ADDRESS)
(111,service)
(112,connectSocket)
(113,do)
(114,TCP_PORT)
(115,INVALID_SOCKET)
(116,2)
(117,wsaData)
(118,)
(119,wsaData)
(120,recvResult == 0)
(121,service)
(122,if (recvResult == SOCKET_ERROR || recvResult == 0)
(123,break;)
(124,0)
(125,WSACleanup()
(126,myStruct.structFirst = data)
(127,connectSocket)
(128,)
(129,recvResult)
(130,struct sockaddr*)
(131,inputBuffer)
(132,NO_ERROR)
(133,WSAStartup(MAKEWORD(2,2)
(134,htons(TCP_PORT)
(135,inputBuffer[recvResult] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^