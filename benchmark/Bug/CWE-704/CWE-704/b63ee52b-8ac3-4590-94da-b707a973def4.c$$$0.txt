-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType myStruct)
{
    int data = myStruct.structFirst;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,7,9,13,15,19,20,24,26,28,31,33,35,37,41,43,44,46,47,52,54,55,56,60,61,66,68,70,72,77,79,80,84,86
-----computeFrom-----
45,46
45,47
49,50
49,51
53,54
53,55
58,59
58,60
74,75
74,76
-----guardedBy-----
60,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType myStruct){    int data = myStruct.structFirst;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType myStruct)
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType myStruct
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType
myStruct
myStruct
{    int data = myStruct.structFirst;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data = myStruct.structFirst;
int data = myStruct.structFirst;
int
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,5,0)
(38,36,0)
(17,6,0)
(11,35,0)
(8,6,0)
(37,35,0)
(5,40,0)
(41,20,0)
(28,22,0)
(40,5,0)
(21,41,0)
(25,36,0)
(36,22,0)
(36,38,0)
(15,9,0)
(14,40,0)
(37,6,0)
(42,41,0)
(0,16,0)
(26,13,0)
(1,22,0)
(6,8,0)
(2,8,0)
(10,38,0)
(13,22,0)
(35,20,0)
(22,23,0)
(16,22,0)
(19,23,0)
(5,13,0)
(27,8,0)
(41,6,0)
(33,16,0)
(29,9,0)
(4,1,0)
(18,41,0)
(6,23,0)
(24,22,0)
(8,32,0)
(37,16,0)
(1,16,0)
(31,40,0)
(3,37,0)
(41,16,0)
(39,22,0)
(43,38,0)
(9,6,0)
(7,36,0)
(30,37,0)
(9,6,1)
(2,27,1)
(5,40,1)
(10,43,1)
(13,26,1)
(34,36,1)
(33,6,1)
(8,32,1)
(37,3,1)
(30,41,1)
(12,1,1)
(41,6,1)
(42,18,1)
(40,14,1)
(26,5,1)
(41,16,1)
(6,8,1)
(35,11,1)
(38,10,1)
(14,31,1)
(3,30,1)
(37,6,1)
(8,2,1)
(29,15,1)
(15,13,1)
(41,21,1)
(43,7,1)
(1,16,1)
(1,4,1)
(4,9,1)
(16,0,1)
(4,35,1)
(21,42,1)
(11,37,1)
(37,16,1)
(9,29,1)
(31,34,1)
(18,9,1)
(7,25,1)
(36,38,1)
(25,16,1)
(0,33,1)
(27,17,1)
(41,16,2)
(21,9,2)
(37,16,2)
(36,38,2)
(9,6,2)
(3,9,2)
(41,6,2)
(30,9,2)
(42,9,2)
(6,8,2)
(11,9,2)
(8,32,2)
(41,9,2)
(37,9,2)
(18,9,2)
(35,9,2)
(37,6,2)
(1,16,2)
(5,40,2)
-----------------------------------
(0,"")
(1,printLine(dest)
(2,structFirst)
(3,data)
(4,dest)
(5,source[100-1])
(6,data = myStruct.structFirst)
(7,\\\'A\\\')
(8,myStruct.structFirst)
(9,data < 100)
(10,1)
(11,\\\'\\\\0\\\')
(12,RET)
(13,source[100-1] = \\\'\\\\0\\\')
(14,1)
(15,data)
(16,dest[100] = "")
(17,data)
(18,dest)
(19,data)
(20,)
(21,data)
(22,)
(23,)
(24,source)
(25,source)
(26,\\\'\\\\0\\\')
(27,myStruct)
(28,dest)
(29,100)
(30,dest)
(31,100)
(32,CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_67_structType myStruct)
(33,dest)
(34,source)
(35,dest[data] = \\\'\\\\0\\\')
(36,memset(source, \\\'A\\\', 100-1)
(37,dest[data])
(38,100-1)
(39,if (data < 100)
(40,100-1)
(41,memcpy(dest, source, data)
(42,source)
(43,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^