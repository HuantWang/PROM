-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_04_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,37,0)
(38,40,0)
(47,12,0)
(35,37,0)
(8,40,0)
(42,10,0)
(27,43,0)
(1,37,0)
(50,40,0)
(13,43,0)
(44,12,0)
(49,15,0)
(33,1,0)
(11,8,0)
(46,15,0)
(20,38,0)
(10,12,0)
(12,3,0)
(45,3,0)
(32,16,0)
(32,6,0)
(17,0,0)
(36,47,0)
(42,21,0)
(7,50,0)
(5,47,0)
(10,42,0)
(1,18,0)
(25,9,0)
(8,15,0)
(50,37,0)
(15,12,0)
(24,8,0)
(9,37,0)
(4,18,0)
(19,10,0)
(41,12,0)
(22,34,0)
(23,40,0)
(43,1,0)
(38,37,0)
(37,40,0)
(1,43,0)
(37,42,0)
(48,40,0)
(39,16,0)
(14,9,0)
(21,42,0)
(0,34,0)
(15,8,0)
(43,12,0)
(26,3,0)
(29,3,0)
(0,28,0)
(34,12,0)
(2,0,0)
(16,32,0)
(8,37,0)
(18,40,0)
(34,0,0)
(30,38,1)
(4,1,1)
(42,10,1)
(1,37,1)
(32,16,1)
(37,42,1)
(25,37,1)
(12,41,1)
(8,15,1)
(39,9,1)
(8,37,1)
(24,32,1)
(9,14,1)
(38,37,1)
(43,12,1)
(27,13,1)
(10,19,1)
(43,27,1)
(7,18,1)
(34,22,1)
(18,4,1)
(50,37,1)
(19,35,1)
(5,0,1)
(15,46,1)
(31,12,1)
(36,5,1)
(1,43,1)
(46,49,1)
(34,12,1)
(41,44,1)
(33,8,1)
(35,47,1)
(15,12,1)
(20,50,1)
(30,47,1)
(24,9,1)
(5,31,1)
(47,36,1)
(42,21,1)
(13,33,1)
(38,20,1)
(2,31,1)
(16,39,1)
(9,37,1)
(11,24,1)
(22,17,1)
(14,25,1)
(50,7,1)
(47,12,1)
(49,11,1)
(10,12,1)
(0,34,1)
(17,2,1)
(0,31,2)
(43,47,2)
(32,9,2)
(47,12,2)
(1,47,2)
(9,47,2)
(34,12,2)
(38,37,2)
(27,47,2)
(13,47,2)
(35,47,2)
(46,47,2)
(2,31,2)
(15,12,2)
(18,47,2)
(10,12,2)
(8,47,2)
(34,31,2)
(50,37,2)
(49,47,2)
(20,47,2)
(24,47,2)
(19,47,2)
(42,10,2)
(32,16,2)
(42,47,2)
(9,37,2)
(7,47,2)
(37,47,2)
(25,47,2)
(50,47,2)
(8,37,2)
(1,37,2)
(42,21,2)
(8,15,2)
(15,47,2)
(22,31,2)
(4,47,2)
(10,47,2)
(0,34,2)
(37,42,2)
(38,47,2)
(43,12,2)
(17,31,2)
(14,47,2)
(11,47,2)
(39,9,2)
(16,9,2)
(33,47,2)
(1,43,2)
-----------------------------------
(0,fscanf (stdin, "%hd", &data)
(1,dataBuffer[data-1])
(2,stdin)
(3,)
(4,\\\'\\\\0\\\')
(5,data)
(6,)
(7,dataBuffer)
(8,memset(dataBuffer, \\\'A\\\', data-1)
(9,dataBuffer == NULL)
(10,malloc(data)
(11,\\\'A\\\')
(12,data = 0)
(13,data)
(14,NULL)
(15,data-1)
(16,-1)
(17,"%hd")
(18,dataBuffer[data-1] = \\\'\\\\0\\\')
(19,data)
(20,dataBuffer)
(21,char *)
(22,data)
(23,if (dataBuffer == NULL)
(24,dataBuffer)
(25,dataBuffer)
(26,data)
(27,1)
(28,)
(29,if(STATIC_CONST_TRUE)
(30,RET)
(31,STATIC_CONST_TRUE)
(32,exit(-1)
(33,dataBuffer)
(34,&data)
(35,dataBuffer)
(36,100)
(37,* dataBuffer = (char *)
(38,free(dataBuffer)
(39,1)
(40,)
(41,0)
(42,(char *)
(43,data-1)
(44,data)
(45,if (data < 100)
(46,1)
(47,data < 100)
(48,dataBuffer)
(49,data)
(50,printLine(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^