-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_08_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(13,14,0)
(27,39,0)
(23,39,0)
(39,13,0)
(2,54,0)
(60,54,0)
(36,41,0)
(58,2,0)
(47,65,0)
(46,49,0)
(45,36,0)
(35,30,0)
(15,30,0)
(57,54,0)
(7,65,0)
(22,13,0)
(48,13,0)
(5,62,0)
(4,22,0)
(28,43,0)
(18,15,0)
(43,49,0)
(43,55,0)
(32,54,0)
(60,2,0)
(48,2,0)
(42,2,0)
(17,14,0)
(6,54,0)
(63,47,0)
(8,48,0)
(51,34,0)
(15,54,0)
(20,51,0)
(1,13,0)
(16,15,0)
(55,43,0)
(11,22,0)
(26,44,0)
(44,5,0)
(12,29,0)
(10,34,0)
(30,15,0)
(55,51,0)
(48,49,0)
(39,49,0)
(22,29,0)
(48,3,0)
(22,2,0)
(53,48,0)
(56,13,0)
(50,14,0)
(62,54,0)
(34,61,0)
(49,43,0)
(38,48,0)
(29,3,0)
(65,51,0)
(25,34,0)
(65,47,0)
(0,51,0)
(21,65,0)
(9,44,0)
(54,14,0)
(5,44,0)
(31,5,0)
(19,60,0)
(43,28,0)
(49,52,0)
(37,55,0)
(33,30,0)
(22,49,0)
(40,65,0)
(64,62,0)
(1,56,1)
(19,39,1)
(53,38,1)
(58,49,1)
(48,2,1)
(29,12,1)
(48,49,1)
(62,64,1)
(39,27,1)
(44,26,1)
(9,31,1)
(65,51,1)
(22,49,1)
(36,45,1)
(37,46,1)
(60,19,1)
(45,47,1)
(12,22,1)
(22,13,1)
(7,21,1)
(60,2,1)
(24,13,1)
(20,0,1)
(5,44,1)
(21,51,1)
(48,53,1)
(49,43,1)
(11,48,1)
(55,51,1)
(59,60,1)
(40,7,1)
(19,29,1)
(47,65,1)
(2,42,1)
(58,24,1)
(27,23,1)
(16,18,1)
(23,62,1)
(55,37,1)
(0,24,1)
(65,40,1)
(18,2,1)
(22,2,1)
(35,16,1)
(42,58,1)
(43,55,1)
(39,13,1)
(15,30,1)
(43,28,1)
(63,65,1)
(8,39,1)
(64,5,1)
(13,1,1)
(38,8,1)
(33,35,1)
(31,15,1)
(4,11,1)
(26,9,1)
(22,4,1)
(46,47,1)
(51,20,1)
(30,33,1)
(47,63,1)
(39,49,1)
(58,36,1)
(48,13,1)
(38,39,2)
(5,44,2)
(65,51,2)
(48,49,2)
(0,24,2)
(53,39,2)
(39,13,2)
(46,47,2)
(4,39,2)
(22,13,2)
(48,2,2)
(29,39,2)
(51,24,2)
(45,47,2)
(49,43,2)
(47,65,2)
(40,24,2)
(60,2,2)
(7,24,2)
(37,47,2)
(49,47,2)
(15,30,2)
(65,24,2)
(22,2,2)
(20,24,2)
(43,47,2)
(43,55,2)
(22,39,2)
(48,39,2)
(39,49,2)
(43,28,2)
(22,49,2)
(8,39,2)
(36,47,2)
(12,39,2)
(21,24,2)
(11,39,2)
(55,51,2)
(55,47,2)
(63,24,2)
(48,13,2)
(47,24,2)
-----------------------------------
(0,inputBuffer)
(1,0)
(2,dest[100] = "")
(3,)
(4,data)
(5,source[100-1])
(6,if (data < 100)
(7,CHAR_ARRAY_SIZE)
(8,dest)
(9,100)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,dest)
(12,\\\'\\\\0\\\')
(13,data = 0)
(14,)
(15,memset(source, \\\'A\\\', 100-1)
(16,\\\'A\\\')
(17,if(staticReturnsTrue()
(18,source)
(19,dest)
(20,"")
(21,inputBuffer)
(22,dest[data])
(23,data)
(24,staticReturnsTrue()
(25,inputBuffer)
(26,1)
(27,100)
(28,short)
(29,dest[data] = \\\'\\\\0\\\')
(30,100-1)
(31,source)
(32,dest)
(33,1)
(34,)
(35,100)
(36,printLine("fgets()
(37,inputBuffer)
(38,source)
(39,data < 100)
(40,stdin)
(41,)
(42,"")
(43,(short)
(44,100-1)
(45,"fgets()
(46,data)
(47,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,strncpy(dest, source, data)
(49,data = (short)
(50,data)
(51,inputBuffer[CHAR_ARRAY_SIZE] = "")
(52,)
(53,data)
(54,)
(55,atoi(inputBuffer)
(56,data)
(57,source)
(58,dest)
(59,RET)
(60,printLine(dest)
(61,)
(62,source[100-1] = \\\'\\\\0\\\')
(63,NULL)
(64,\\\'\\\\0\\\')
(65,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^