-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        short data = *dataPtr1;
        /* FLAW: Use a random number */
        data = (short)RAND32();
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
56,57
58,59
59,60
59,61
60,61
61,62
63,64
65,66
65,67
66,67
67,68
67,69
69,70
69,71
71,72
72,73
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
81,82
82,83
82,84
83,84
83,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,54,57,62,64,68,70,74,78,80,84,85,87,91,93
-----computeFrom-----
32,33
32,34
48,49
48,50
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        short data = *dataPtr1;        /* FLAW: Use a random number */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_rand_32_bad()
CWE197_Numeric_Truncation_Error__short_rand_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        short data = *dataPtr1;        /* FLAW: Use a random number */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        short data = *dataPtr1;        /* FLAW: Use a random number */        data = (short)RAND32();        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(7,2,0)
(29,22,0)
(32,25,0)
(26,20,0)
(12,25,0)
(21,37,0)
(9,25,0)
(10,39,0)
(41,25,0)
(38,34,0)
(14,38,0)
(2,39,0)
(28,9,0)
(31,22,0)
(19,39,0)
(33,37,0)
(4,38,0)
(46,12,0)
(3,9,0)
(8,20,0)
(8,25,0)
(46,2,0)
(33,9,0)
(22,29,0)
(16,41,0)
(38,14,0)
(41,36,0)
(5,0,0)
(36,41,0)
(39,2,0)
(45,34,0)
(13,30,0)
(23,9,0)
(43,29,0)
(9,3,0)
(38,29,0)
(28,46,0)
(34,44,0)
(1,28,0)
(39,19,0)
(29,30,0)
(6,3,0)
(30,25,0)
(24,8,0)
(15,33,0)
(20,8,0)
(11,12,0)
(17,36,0)
(37,12,0)
(2,12,0)
(44,30,0)
(22,8,0)
(34,38,0)
(0,44,0)
(39,10,0)
(27,25,0)
(40,44,0)
(18,25,0)
(37,33,0)
(0,34,0)
(42,46,0)
(33,9,1)
(16,8,1)
(7,37,1)
(6,23,1)
(42,28,1)
(22,31,1)
(45,29,1)
(4,45,1)
(5,34,1)
(20,26,1)
(41,36,1)
(17,16,1)
(21,41,1)
(24,9,1)
(43,46,1)
(0,34,1)
(38,14,1)
(31,43,1)
(34,38,1)
(15,21,1)
(8,20,1)
(35,0,1)
(38,4,1)
(46,2,1)
(37,33,1)
(28,1,1)
(38,29,1)
(22,8,1)
(9,3,1)
(1,2,1)
(26,24,1)
(33,15,1)
(39,10,1)
(0,5,1)
(28,9,1)
(3,6,1)
(39,19,1)
(29,22,1)
(36,17,1)
(46,42,1)
(10,7,1)
(2,39,1)
(39,19,2)
(37,33,2)
(41,36,2)
(9,3,2)
(22,8,2)
(33,9,2)
(46,2,2)
(28,9,2)
(38,14,2)
(0,34,2)
(38,29,2)
(8,20,2)
(2,39,2)
(39,10,2)
(34,38,2)
(29,22,2)
-----------------------------------
(0,printHexCharLine(charData)
(1,dataPtr1)
(2,data = (short)
(3,&data)
(4,data)
(5,charData)
(6,data)
(7,data)
(8,*dataPtr2 = &data)
(9,*dataPtr1 = &data)
(10,RAND32()
(11,data)
(12,)
(13,data)
(14,char)
(15,dataPtr1)
(16,data)
(17,1)
(18,data)
(19,short)
(20,&data)
(21,data)
(22,*dataPtr2)
(23,dataPtr1)
(24,dataPtr2)
(25,)
(26,data)
(27,dataPtr2)
(28,*dataPtr1)
(29,data = *dataPtr2)
(30,)
(31,dataPtr2)
(32,dataPtr1)
(33,*dataPtr1)
(34,charData = (char)
(35,RET)
(36,-1)
(37,data = *dataPtr1)
(38,(char)
(39,(short)
(40,charData)
(41,data = -1)
(42,data)
(43,data)
(44,)
(45,charData)
(46,*dataPtr1 = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^