-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
70,72
71,72
71,73
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,61,65,67,68,72,74,77,79,83,85,90,92,96,98,99,102,103,108,111,112,113,117,119,123,125
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
58,59
58,60
81,82
81,83
100,101
100,102
105,106
105,107
109,110
109,111
-----guardedBy-----
34,50
60,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_01_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_01_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,55,0)
(19,37,0)
(5,46,0)
(16,40,0)
(27,29,0)
(27,36,0)
(16,19,0)
(3,16,0)
(40,7,0)
(48,60,0)
(58,17,0)
(8,15,0)
(29,27,0)
(37,19,0)
(36,59,0)
(2,23,0)
(43,19,0)
(24,28,0)
(60,48,0)
(50,29,0)
(28,14,0)
(45,37,0)
(21,17,0)
(43,36,0)
(46,5,0)
(13,11,0)
(32,40,0)
(51,59,0)
(25,36,0)
(17,10,0)
(18,27,0)
(40,16,0)
(29,23,0)
(56,46,0)
(7,23,0)
(22,7,0)
(37,21,0)
(55,52,0)
(30,46,0)
(44,7,0)
(35,19,0)
(43,60,0)
(42,23,0)
(19,57,0)
(31,36,0)
(39,17,0)
(53,31,0)
(33,11,0)
(1,10,0)
(47,5,0)
(27,19,0)
(55,15,0)
(54,21,0)
(34,23,0)
(26,23,0)
(60,43,0)
(46,21,0)
(16,36,0)
(9,31,0)
(36,10,0)
(29,7,0)
(12,16,0)
(49,29,0)
(40,26,0)
(63,44,0)
(7,60,0)
(31,19,0)
(0,27,0)
(42,7,0)
(61,21,0)
(60,7,0)
(59,36,0)
(20,46,0)
(44,23,0)
(4,43,0)
(41,26,0)
(62,10,0)
(6,42,0)
(11,7,0)
(53,9,1)
(32,29,1)
(44,7,1)
(44,63,1)
(63,26,1)
(47,46,1)
(46,56,1)
(16,19,1)
(21,54,1)
(26,41,1)
(38,31,1)
(7,60,1)
(24,5,1)
(50,55,1)
(6,44,1)
(43,4,1)
(12,32,1)
(59,51,1)
(51,25,1)
(60,48,1)
(31,36,1)
(11,7,1)
(56,30,1)
(16,3,1)
(4,22,1)
(30,20,1)
(50,11,1)
(29,27,1)
(35,5,1)
(45,35,1)
(0,18,1)
(18,49,1)
(61,36,1)
(8,11,1)
(55,15,1)
(49,50,1)
(37,21,1)
(41,40,1)
(27,19,1)
(11,13,1)
(5,46,1)
(36,59,1)
(37,45,1)
(31,19,1)
(9,28,1)
(28,24,1)
(54,61,1)
(27,36,1)
(40,7,1)
(16,36,1)
(43,19,1)
(15,8,1)
(27,0,1)
(5,47,1)
(60,43,1)
(43,36,1)
(40,16,1)
(46,21,1)
(42,6,1)
(19,37,1)
(29,7,1)
(9,19,1)
(22,31,1)
(42,7,1)
(31,53,1)
(20,21,1)
(3,12,1)
(33,7,1)
(13,33,1)
(38,42,1)
(18,31,2)
(44,7,2)
(7,31,2)
(44,31,2)
(60,43,2)
(31,36,2)
(24,5,2)
(29,7,2)
(43,36,2)
(29,27,2)
(60,31,2)
(42,31,2)
(43,31,2)
(40,31,2)
(5,46,2)
(16,31,2)
(28,5,2)
(12,31,2)
(8,11,2)
(11,31,2)
(37,5,2)
(40,7,2)
(15,11,2)
(4,31,2)
(13,31,2)
(46,21,2)
(45,5,2)
(35,5,2)
(7,60,2)
(26,31,2)
(40,16,2)
(50,31,2)
(11,7,2)
(19,37,2)
(29,31,2)
(42,7,2)
(32,31,2)
(55,11,2)
(49,31,2)
(27,19,2)
(3,31,2)
(63,31,2)
(0,31,2)
(16,36,2)
(55,15,2)
(43,19,2)
(41,31,2)
(36,59,2)
(33,31,2)
(37,21,2)
(19,5,2)
(31,19,2)
(22,31,2)
(27,31,2)
(27,36,2)
(60,48,2)
(16,19,2)
(6,31,2)
-----------------------------------
(0,1)
(1,if (data < 100)
(2,if (dataBuffer == NULL)
(3,1)
(4,data)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,dataBuffer)
(7,* dataBuffer = (char *)
(8,1)
(9,data)
(10,)
(11,dataBuffer == NULL)
(12,data)
(13,NULL)
(14,)
(15,-1)
(16,data-1)
(17,)
(18,data)
(19,data = atoi(inputBuffer)
(20,inputBuffer)
(21,inputBuffer[CHAR_ARRAY_SIZE] = "")
(22,dataBuffer)
(23,)
(24,"fgets()
(25,data)
(26,dataBuffer[data-1] = \\\'\\\\0\\\')
(27,data-1)
(28,printLine("fgets()
(29,memset(dataBuffer, \\\'A\\\', data-1)
(30,CHAR_ARRAY_SIZE)
(31,data < 100)
(32,dataBuffer)
(33,dataBuffer)
(34,dataBuffer)
(35,data)
(36,data = -1)
(37,atoi(inputBuffer)
(38,RET)
(39,inputBuffer)
(40,dataBuffer[data-1])
(41,\\\'\\\\0\\\')
(42,free(dataBuffer)
(43,malloc(data)
(44,printLine(dataBuffer)
(45,inputBuffer)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,NULL)
(48,char *)
(49,\\\'A\\\')
(50,dataBuffer)
(51,1)
(52,)
(53,100)
(54,"")
(55,exit(-1)
(56,stdin)
(57,)
(58,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(59,-1)
(60,(char *)
(61,inputBuffer)
(62,data)
(63,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^