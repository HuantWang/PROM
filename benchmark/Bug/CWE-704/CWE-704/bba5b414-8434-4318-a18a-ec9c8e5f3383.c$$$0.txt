-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,65,69,71,72,76,78,81,83,87,89,94,96,100,102,103,106,107,112,115,116,117,121,123,127,129
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
62,63
62,64
85,86
85,87
104,105
104,106
109,110
109,111
113,114
113,115
-----guardedBy-----
38,54
64,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(47,20,0)
(40,43,0)
(44,54,0)
(63,59,0)
(66,14,0)
(36,54,0)
(54,34,0)
(8,42,0)
(32,20,0)
(25,36,0)
(20,32,0)
(16,43,0)
(34,41,0)
(64,11,0)
(57,42,0)
(26,23,0)
(20,43,0)
(29,12,0)
(59,53,0)
(6,26,0)
(3,11,0)
(26,53,0)
(36,53,0)
(38,32,0)
(1,20,0)
(22,44,0)
(33,16,0)
(10,57,0)
(14,28,0)
(42,55,0)
(15,9,0)
(61,37,0)
(23,26,0)
(60,34,0)
(20,28,0)
(55,28,0)
(17,54,0)
(35,28,0)
(19,34,0)
(37,11,0)
(27,53,0)
(53,7,0)
(42,57,0)
(45,44,0)
(51,58,0)
(52,59,0)
(32,53,0)
(43,28,0)
(31,62,0)
(65,58,0)
(37,12,0)
(32,37,0)
(12,37,0)
(24,23,0)
(57,37,0)
(44,9,0)
(5,57,0)
(62,30,0)
(59,37,0)
(49,46,0)
(42,43,0)
(56,11,0)
(23,24,0)
(58,43,0)
(39,44,0)
(53,36,0)
(18,31,0)
(43,23,0)
(23,43,0)
(26,37,0)
(57,53,0)
(13,49,0)
(2,55,0)
(16,28,0)
(50,54,0)
(21,28,0)
(9,44,0)
(62,31,0)
(0,32,0)
(14,43,0)
(26,37,1)
(36,25,1)
(42,43,1)
(14,66,1)
(48,14,1)
(14,43,1)
(57,10,1)
(20,32,1)
(23,26,1)
(1,47,1)
(23,24,1)
(13,9,1)
(26,6,1)
(29,61,1)
(55,2,1)
(6,40,1)
(16,43,1)
(32,37,1)
(44,54,1)
(26,53,1)
(2,42,1)
(9,15,1)
(45,39,1)
(9,44,1)
(10,5,1)
(44,22,1)
(16,33,1)
(4,37,1)
(58,51,1)
(62,31,1)
(38,1,1)
(59,53,1)
(32,0,1)
(8,20,1)
(22,45,1)
(57,37,1)
(33,55,1)
(47,58,1)
(31,18,1)
(27,9,1)
(57,53,1)
(59,37,1)
(5,8,1)
(52,53,1)
(63,52,1)
(0,38,1)
(58,43,1)
(20,43,1)
(39,54,1)
(47,62,1)
(66,16,1)
(43,23,1)
(65,43,1)
(52,4,1)
(40,59,1)
(52,49,1)
(12,29,1)
(36,54,1)
(59,63,1)
(51,65,1)
(37,12,1)
(32,53,1)
(17,50,1)
(42,57,1)
(54,17,1)
(50,4,1)
(49,13,1)
(15,44,1)
(53,36,1)
(25,27,1)
(48,59,1)
(18,58,1)
(62,58,2)
(27,9,2)
(50,4,2)
(40,59,2)
(59,53,2)
(32,53,2)
(16,43,2)
(38,59,2)
(23,59,2)
(31,58,2)
(42,43,2)
(58,43,2)
(36,54,2)
(42,57,2)
(0,59,2)
(44,54,2)
(13,9,2)
(44,4,2)
(49,9,2)
(32,37,2)
(6,59,2)
(2,59,2)
(43,59,2)
(14,59,2)
(9,4,2)
(65,59,2)
(5,59,2)
(45,4,2)
(26,37,2)
(17,4,2)
(43,23,2)
(53,9,2)
(32,59,2)
(36,9,2)
(59,37,2)
(51,59,2)
(16,59,2)
(26,59,2)
(20,32,2)
(58,59,2)
(8,59,2)
(23,26,2)
(53,36,2)
(26,53,2)
(55,59,2)
(20,43,2)
(15,4,2)
(57,53,2)
(62,31,2)
(33,59,2)
(23,24,2)
(37,12,2)
(66,59,2)
(1,59,2)
(57,59,2)
(54,4,2)
(10,59,2)
(9,44,2)
(18,58,2)
(57,37,2)
(22,4,2)
(47,59,2)
(20,59,2)
(14,43,2)
(25,9,2)
(42,59,2)
(39,4,2)
-----------------------------------
(0,1)
(1,\\\'A\\\')
(2,\\\'\\\\0\\\')
(3,if (data < 100)
(4,staticTrue)
(5,data)
(6,data)
(7,)
(8,dataBuffer)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,1)
(11,)
(12,-1)
(13,"fgets()
(14,free(dataBuffer)
(15,NULL)
(16,printLine(dataBuffer)
(17,"")
(18,1)
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,memset(dataBuffer, \\\'A\\\', data-1)
(21,dataBuffer)
(22,stdin)
(23,(char *)
(24,char *)
(25,inputBuffer)
(26,malloc(data)
(27,data)
(28,)
(29,1)
(30,)
(31,-1)
(32,data-1)
(33,dataBuffer)
(34,)
(35,if (dataBuffer == NULL)
(36,atoi(inputBuffer)
(37,data = -1)
(38,data)
(39,inputBuffer)
(40,dataBuffer)
(41,)
(42,dataBuffer[data-1])
(43,* dataBuffer = (char *)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,CHAR_ARRAY_SIZE)
(46,)
(47,dataBuffer)
(48,RET)
(49,printLine("fgets()
(50,inputBuffer)
(51,NULL)
(52,data)
(53,data = atoi(inputBuffer)
(54,inputBuffer[CHAR_ARRAY_SIZE] = "")
(55,dataBuffer[data-1] = \\\'\\\\0\\\')
(56,data)
(57,data-1)
(58,dataBuffer == NULL)
(59,data < 100)
(60,inputBuffer)
(61,data)
(62,exit(-1)
(63,100)
(64,if(staticTrue)
(65,dataBuffer)
(66,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^