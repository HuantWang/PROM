-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,28,31,33,35,37,41,43,44,46,47,52,54,55,56,60,61,66,68,70,72,77,79,80,84,86
-----computeFrom-----
45,46
45,47
49,50
49,51
53,54
53,55
58,59
58,60
74,75
74,76
-----guardedBy-----
60,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(26,4,0)
(3,18,0)
(37,17,0)
(17,13,0)
(28,17,0)
(30,25,0)
(12,39,0)
(4,43,0)
(29,2,0)
(10,13,0)
(18,3,0)
(19,17,0)
(4,13,0)
(14,17,0)
(20,17,0)
(2,11,0)
(26,39,0)
(31,25,0)
(22,26,0)
(41,40,0)
(43,4,0)
(36,43,0)
(33,43,0)
(11,2,0)
(38,25,0)
(18,17,0)
(25,28,0)
(25,6,0)
(23,28,0)
(21,37,0)
(8,17,0)
(40,4,0)
(15,3,0)
(26,28,0)
(24,18,0)
(39,6,0)
(0,11,0)
(25,4,0)
(16,28,0)
(27,2,0)
(37,28,0)
(35,26,0)
(43,42,0)
(32,4,0)
(5,3,0)
(7,18,0)
(9,14,0)
(34,40,0)
(11,14,0)
(30,40,1)
(39,12,1)
(26,28,1)
(37,21,1)
(23,4,1)
(11,2,1)
(22,25,1)
(35,22,1)
(40,4,1)
(38,30,1)
(16,23,1)
(21,39,1)
(40,41,1)
(2,29,1)
(14,9,1)
(24,7,1)
(26,4,1)
(37,28,1)
(12,26,1)
(29,27,1)
(4,43,1)
(43,33,1)
(7,28,1)
(0,18,1)
(5,15,1)
(25,4,1)
(33,36,1)
(18,3,1)
(3,5,1)
(1,37,1)
(43,42,1)
(34,14,1)
(26,35,1)
(28,16,1)
(25,31,1)
(21,40,1)
(31,38,1)
(25,28,1)
(9,11,1)
(15,24,1)
(41,34,1)
(27,0,1)
(36,32,1)
(38,40,2)
(4,43,2)
(11,2,2)
(37,28,2)
(39,40,2)
(25,28,2)
(31,40,2)
(26,28,2)
(43,42,2)
(35,40,2)
(30,40,2)
(40,4,2)
(26,40,2)
(18,3,2)
(12,40,2)
(26,4,2)
(22,40,2)
(25,40,2)
(25,4,2)
-----------------------------------
(0,source)
(1,RET)
(2,100-1)
(3,100-1)
(4,data = dataArray[2])
(5,1)
(6,)
(7,source)
(8,dest)
(9,\\\'\\\\0\\\')
(10,data)
(11,source[100-1])
(12,\\\'\\\\0\\\')
(13,)
(14,source[100-1] = \\\'\\\\0\\\')
(15,100)
(16,"")
(17,)
(18,memset(source, \\\'A\\\', 100-1)
(19,source)
(20,if (data < 100)
(21,dest)
(22,dest)
(23,dest)
(24,\\\'A\\\')
(25,strncpy(dest, source, data)
(26,dest[data])
(27,100)
(28,dest[100] = "")
(29,1)
(30,dest)
(31,data)
(32,data)
(33,2)
(34,data)
(35,data)
(36,dataArray)
(37,printLine(dest)
(38,source)
(39,dest[data] = \\\'\\\\0\\\')
(40,data < 100)
(41,100)
(42,short dataArray[])
(43,dataArray[2])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^