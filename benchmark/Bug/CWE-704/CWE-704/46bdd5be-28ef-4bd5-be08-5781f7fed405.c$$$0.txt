-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
37,57
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_05_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(0,63,0)
(15,63,0)
(24,37,0)
(59,37,0)
(24,9,0)
(13,66,0)
(37,24,0)
(63,0,0)
(22,41,0)
(19,66,0)
(19,40,0)
(51,43,0)
(43,41,0)
(4,58,0)
(29,20,0)
(24,5,0)
(9,24,0)
(46,26,0)
(5,14,0)
(48,64,0)
(6,64,0)
(19,25,0)
(53,19,0)
(16,52,0)
(11,34,0)
(40,19,0)
(66,41,0)
(32,40,0)
(39,67,0)
(43,37,0)
(17,0,0)
(67,66,0)
(2,37,0)
(5,24,0)
(55,30,0)
(40,30,0)
(43,30,0)
(6,66,0)
(31,66,0)
(52,64,0)
(56,26,0)
(54,63,0)
(4,8,0)
(36,31,0)
(26,31,0)
(23,8,0)
(35,2,0)
(7,25,0)
(30,34,0)
(10,34,0)
(61,6,0)
(25,64,0)
(8,4,0)
(14,29,0)
(66,64,0)
(3,31,0)
(47,2,0)
(31,64,0)
(60,29,0)
(18,64,0)
(12,63,0)
(33,67,0)
(62,5,0)
(26,30,0)
(63,14,0)
(41,43,0)
(65,30,0)
(57,14,0)
(26,37,0)
(21,1,0)
(41,22,0)
(49,21,0)
(52,66,0)
(2,30,0)
(38,40,0)
(31,26,0)
(40,37,0)
(27,34,0)
(42,29,0)
(37,45,0)
(41,66,0)
(28,14,0)
(31,26,1)
(36,67,1)
(21,49,1)
(67,66,1)
(0,63,1)
(15,54,1)
(7,19,1)
(40,37,1)
(6,66,1)
(38,53,1)
(39,33,1)
(31,66,1)
(26,46,1)
(32,38,1)
(53,31,1)
(2,30,1)
(23,67,1)
(19,40,1)
(43,51,1)
(2,37,1)
(35,21,1)
(2,47,1)
(59,0,1)
(14,28,1)
(61,25,1)
(33,66,1)
(5,62,1)
(36,4,1)
(17,63,1)
(26,37,1)
(4,8,1)
(41,43,1)
(35,44,1)
(30,55,1)
(62,59,1)
(67,39,1)
(28,57,1)
(56,3,1)
(26,30,1)
(52,66,1)
(50,52,1)
(44,30,1)
(43,30,1)
(47,35,1)
(13,2,1)
(43,37,1)
(46,56,1)
(63,12,1)
(37,24,1)
(49,0,1)
(0,17,1)
(24,5,1)
(55,65,1)
(50,2,1)
(6,61,1)
(3,36,1)
(63,14,1)
(40,32,1)
(41,22,1)
(52,16,1)
(51,13,1)
(54,14,1)
(66,41,1)
(24,9,1)
(16,6,1)
(5,14,1)
(35,37,1)
(19,66,1)
(25,7,1)
(12,15,1)
(8,23,1)
(40,30,1)
(57,44,1)
(43,2,2)
(54,44,2)
(2,37,2)
(67,2,2)
(62,0,2)
(56,2,2)
(41,22,2)
(3,2,2)
(28,44,2)
(40,2,2)
(14,44,2)
(31,26,2)
(17,44,2)
(19,2,2)
(6,66,2)
(43,37,2)
(4,8,2)
(24,9,2)
(26,30,2)
(61,2,2)
(24,5,2)
(24,0,2)
(37,24,2)
(4,67,2)
(7,2,2)
(26,2,2)
(16,2,2)
(13,2,2)
(0,44,2)
(31,2,2)
(31,66,2)
(37,0,2)
(6,2,2)
(59,0,2)
(39,2,2)
(23,67,2)
(5,14,2)
(33,2,2)
(25,2,2)
(19,66,2)
(32,2,2)
(63,14,2)
(8,67,2)
(2,30,2)
(5,0,2)
(41,43,2)
(43,30,2)
(36,2,2)
(12,44,2)
(67,66,2)
(52,66,2)
(40,37,2)
(41,2,2)
(38,2,2)
(53,2,2)
(49,0,2)
(21,0,2)
(26,37,2)
(57,44,2)
(63,44,2)
(40,30,2)
(51,2,2)
(19,40,2)
(52,2,2)
(46,2,2)
(0,63,2)
(66,41,2)
(15,44,2)
(66,2,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,)
(2,data < 100)
(3,\\\'A\\\')
(4,exit(-1)
(5,atoi(inputBuffer)
(6,printLine(dataBuffer)
(7,\\\'\\\\0\\\')
(8,-1)
(9,short)
(10,if (data < 100)
(11,if(staticTrue)
(12,stdin)
(13,dataBuffer)
(14,inputBuffer[CHAR_ARRAY_SIZE] = "")
(15,CHAR_ARRAY_SIZE)
(16,dataBuffer)
(17,NULL)
(18,dataBuffer)
(19,dataBuffer[data-1])
(20,)
(21,printLine("fgets()
(22,char *)
(23,1)
(24,(short)
(25,dataBuffer[data-1] = \\\'\\\\0\\\')
(26,data-1)
(27,data)
(28,"")
(29,)
(30,data = 0)
(31,memset(dataBuffer, \\\'A\\\', data-1)
(32,1)
(33,dataBuffer)
(34,)
(35,data)
(36,dataBuffer)
(37,data = (short)
(38,data)
(39,NULL)
(40,data-1)
(41,(char *)
(42,inputBuffer)
(43,malloc(data)
(44,staticTrue)
(45,)
(46,1)
(47,100)
(48,if (dataBuffer == NULL)
(49,"fgets()
(50,RET)
(51,data)
(52,free(dataBuffer)
(53,dataBuffer)
(54,inputBuffer)
(55,0)
(56,data)
(57,inputBuffer)
(58,)
(59,data)
(60,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(61,dataBuffer)
(62,inputBuffer)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(64,)
(65,data)
(66,* dataBuffer = (char *)
(67,dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^