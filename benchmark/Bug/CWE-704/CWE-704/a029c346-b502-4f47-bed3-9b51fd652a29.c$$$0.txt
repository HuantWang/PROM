-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,65,69,71,72,76,78,81,83,87,89,94,96,100,102,103,106,107,112,115,116,117,121,123,127,129
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
62,63
62,64
85,86
85,87
104,105
104,106
109,110
109,111
113,114
113,115
-----guardedBy-----
38,54
64,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(17,46,0)
(12,5,0)
(41,58,0)
(15,51,0)
(49,20,0)
(13,20,0)
(52,46,0)
(35,57,0)
(10,13,0)
(5,47,0)
(27,47,0)
(2,20,0)
(29,17,0)
(21,57,0)
(61,30,0)
(22,40,0)
(40,20,0)
(47,28,0)
(1,30,0)
(48,59,0)
(47,5,0)
(38,57,0)
(64,0,0)
(11,46,0)
(32,27,0)
(6,21,0)
(5,46,0)
(65,4,0)
(36,24,0)
(58,57,0)
(32,34,0)
(55,58,0)
(63,53,0)
(16,47,0)
(56,47,0)
(27,21,0)
(30,21,0)
(34,20,0)
(59,48,0)
(45,34,0)
(14,17,0)
(40,50,0)
(24,50,0)
(17,53,0)
(18,4,0)
(27,32,0)
(33,57,0)
(50,24,0)
(8,44,0)
(51,50,0)
(62,27,0)
(13,50,0)
(48,23,0)
(37,56,0)
(24,56,0)
(24,36,0)
(4,47,0)
(42,50,0)
(32,50,0)
(13,4,0)
(60,27,0)
(46,58,0)
(44,20,0)
(50,20,0)
(0,26,0)
(43,21,0)
(30,47,0)
(56,21,0)
(53,17,0)
(31,57,0)
(7,59,0)
(44,50,0)
(25,13,0)
(3,17,0)
(56,24,0)
(39,51,0)
(9,43,0)
(4,21,0)
(4,13,0)
(21,43,0)
(54,32,0)
(8,40,1)
(3,29,1)
(13,50,1)
(25,10,1)
(24,56,1)
(30,21,1)
(43,9,1)
(47,5,1)
(46,11,1)
(44,50,1)
(5,12,1)
(1,61,1)
(60,62,1)
(18,25,1)
(65,18,1)
(30,47,1)
(11,52,1)
(34,45,1)
(12,16,1)
(4,65,1)
(53,17,1)
(24,36,1)
(32,50,1)
(15,39,1)
(37,42,1)
(29,14,1)
(48,59,1)
(16,53,1)
(54,13,1)
(17,46,1)
(9,6,1)
(0,64,1)
(21,43,1)
(51,15,1)
(19,30,1)
(61,0,1)
(10,51,1)
(51,50,1)
(45,32,1)
(44,8,1)
(27,60,1)
(40,22,1)
(59,7,1)
(53,63,1)
(27,21,1)
(4,47,1)
(56,37,1)
(42,30,1)
(10,48,1)
(17,3,1)
(27,47,1)
(50,24,1)
(38,21,1)
(56,47,1)
(14,46,1)
(30,1,1)
(19,44,1)
(7,51,1)
(52,38,1)
(39,50,1)
(61,47,1)
(22,34,1)
(4,21,1)
(62,54,1)
(13,4,1)
(56,21,1)
(40,50,1)
(64,53,1)
(5,46,1)
(32,27,1)
(63,17,1)
(5,53,2)
(51,30,2)
(27,30,2)
(62,30,2)
(56,30,2)
(13,4,2)
(30,47,2)
(60,30,2)
(4,21,2)
(50,30,2)
(42,30,2)
(16,53,2)
(37,30,2)
(15,30,2)
(24,56,2)
(24,36,2)
(40,50,2)
(50,24,2)
(32,30,2)
(44,30,2)
(17,46,2)
(32,27,2)
(22,30,2)
(48,59,2)
(47,5,2)
(53,17,2)
(56,21,2)
(32,50,2)
(13,30,2)
(24,30,2)
(8,30,2)
(56,47,2)
(25,30,2)
(4,30,2)
(30,21,2)
(64,53,2)
(40,30,2)
(12,53,2)
(18,30,2)
(27,47,2)
(45,30,2)
(44,50,2)
(27,21,2)
(48,51,2)
(34,30,2)
(39,30,2)
(59,51,2)
(10,30,2)
(65,30,2)
(13,50,2)
(47,53,2)
(0,53,2)
(4,47,2)
(7,51,2)
(5,46,2)
(21,43,2)
(54,30,2)
(51,50,2)
-----------------------------------
(0,printLine("fgets()
(1,100)
(2,if (dataBuffer == NULL)
(3,stdin)
(4,data-1)
(5,atoi(inputBuffer)
(6,data)
(7,1)
(8,dataBuffer)
(9,1)
(10,dataBuffer)
(11,"")
(12,inputBuffer)
(13,memset(dataBuffer, \\\'A\\\', data-1)
(14,inputBuffer)
(15,NULL)
(16,data)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,data)
(19,RET)
(20,)
(21,data = -1)
(22,dataBuffer)
(23,)
(24,(char *)
(25,\\\'A\\\')
(26,)
(27,data-1)
(28,)
(29,CHAR_ARRAY_SIZE)
(30,data < 100)
(31,source:)
(32,dataBuffer[data-1])
(33,if (data < 100)
(34,dataBuffer[data-1] = \\\'\\\\0\\\')
(35,data)
(36,char *)
(37,data)
(38,goto source;)
(39,dataBuffer)
(40,printLine(dataBuffer)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,dataBuffer)
(43,-1)
(44,free(dataBuffer)
(45,\\\'\\\\0\\\')
(46,inputBuffer[CHAR_ARRAY_SIZE] = "")
(47,data = atoi(inputBuffer)
(48,exit(-1)
(49,dataBuffer)
(50,* dataBuffer = (char *)
(51,dataBuffer == NULL)
(52,inputBuffer)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,dataBuffer)
(55,inputBuffer)
(56,malloc(data)
(57,)
(58,)
(59,-1)
(60,1)
(61,data)
(62,data)
(63,NULL)
(64,"fgets()
(65,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^