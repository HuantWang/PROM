-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
46,47
48,49
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
59,60
59,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,32,34,37,39,41,43,47,49,50,52,53,58,60,61,62,66,67,72,74,76,78,83,85,86,90,92
-----computeFrom-----
12,13
12,14
22,23
22,24
51,52
51,53
55,56
55,57
59,60
59,61
64,65
64,66
80,81
80,82
-----guardedBy-----
66,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_11_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(11,22,0)
(47,7,0)
(24,2,0)
(47,43,0)
(1,41,0)
(7,37,0)
(4,27,0)
(34,2,0)
(8,43,0)
(46,43,0)
(25,20,0)
(44,27,0)
(18,27,0)
(0,2,0)
(17,4,0)
(30,23,0)
(22,23,0)
(47,27,0)
(45,31,0)
(29,47,0)
(13,18,0)
(9,41,0)
(31,27,0)
(40,18,0)
(18,37,0)
(16,25,0)
(32,34,0)
(34,28,0)
(31,43,0)
(18,43,0)
(27,35,0)
(2,41,0)
(20,25,0)
(26,23,0)
(19,28,0)
(20,42,0)
(23,22,0)
(38,25,0)
(6,42,0)
(23,2,0)
(42,2,0)
(21,31,0)
(43,41,0)
(39,18,0)
(3,47,0)
(27,4,0)
(28,2,0)
(18,28,0)
(33,2,0)
(36,22,0)
(47,28,0)
(15,28,0)
(10,7,0)
(12,20,0)
(21,42,1)
(20,25,1)
(43,8,1)
(34,32,1)
(26,30,1)
(5,43,1)
(18,28,1)
(47,3,1)
(4,17,1)
(28,15,1)
(8,46,1)
(47,43,1)
(6,20,1)
(11,26,1)
(31,45,1)
(47,27,1)
(22,36,1)
(47,28,1)
(32,7,1)
(31,43,1)
(44,5,1)
(34,28,1)
(7,10,1)
(19,27,1)
(14,34,1)
(15,19,1)
(3,29,1)
(32,31,1)
(36,11,1)
(42,6,1)
(27,4,1)
(18,27,1)
(45,21,1)
(17,44,1)
(12,23,1)
(19,5,1)
(39,40,1)
(13,31,1)
(10,47,1)
(40,13,1)
(38,12,1)
(23,22,1)
(30,28,1)
(16,38,1)
(25,16,1)
(18,39,1)
(29,18,1)
(18,43,1)
(31,27,1)
(34,28,2)
(29,31,2)
(10,31,2)
(4,5,2)
(18,43,2)
(47,27,2)
(39,31,2)
(44,5,2)
(18,27,2)
(47,43,2)
(3,31,2)
(40,31,2)
(27,5,2)
(23,22,2)
(31,43,2)
(31,27,2)
(20,25,2)
(13,31,2)
(18,28,2)
(18,31,2)
(7,31,2)
(27,4,2)
(47,28,2)
(17,5,2)
(47,31,2)
-----------------------------------
(0,if (data < 100)
(1,data)
(2,)
(3,data)
(4,-1)
(5,globalReturnsTrue()
(6,\\\'\\\\0\\\')
(7,dest[data] = \\\'\\\\0\\\')
(8,0)
(9,if(globalReturnsTrue()
(10,\\\'\\\\0\\\')
(11,100)
(12,source)
(13,dest)
(14,RET)
(15,"")
(16,1)
(17,1)
(18,memcpy(dest, source, data)
(19,dest)
(20,source[100-1])
(21,data)
(22,100-1)
(23,memset(source, \\\'A\\\', 100-1)
(24,dest)
(25,100-1)
(26,\\\'A\\\')
(27,data = -1)
(28,dest[100] = "")
(29,dest)
(30,source)
(31,data < 100)
(32,dest)
(33,source)
(34,printLine(dest)
(35,)
(36,1)
(37,)
(38,100)
(39,data)
(40,source)
(41,)
(42,source[100-1] = \\\'\\\\0\\\')
(43,data = 0)
(44,data)
(45,100)
(46,data)
(47,dest[data])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^