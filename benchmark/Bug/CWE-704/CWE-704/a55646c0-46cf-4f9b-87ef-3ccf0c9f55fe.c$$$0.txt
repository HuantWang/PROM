-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
53,54
54,55
56,57
58,59
58,60
58,61
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
100,101
101,102
102,103
104,105
104,106
105,106
105,107
106,107
109,110
109,111
109,112
109,113
109,114
109,115
110,111
111,112
111,113
113,114
113,115
113,116
116,117
117,118
117,119
118,119
118,120
120,121
122,123
122,124
123,124
125,126
127,128
127,129
128,129
128,130
129,130
131,132
133,134
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
141,144
141,145
142,143
144,145
147,148
147,149
148,149
151,152
152,153
152,154
153,154
153,155
154,155
156,157
156,158
157,158
161,162
162,163
162,164
163,164
165,166
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,55,57,62,64,66,68,70,75,78,80,85,86,91,93,97,99,103,107,108,112,114,115,119,121,124,126,130,132,137,139,143,145,146,149,150,155,158,159,160,164,166,170,172
-----computeFrom-----
32,33
32,34
59,60
59,61
73,74
73,75
88,89
88,90
105,106
105,107
128,129
128,130
147,148
147,149
152,153
152,154
156,157
156,158
-----guardedBy-----
64,80
107,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(85,3,0)
(76,26,0)
(41,89,0)
(28,7,0)
(23,70,0)
(82,74,0)
(84,89,0)
(48,21,0)
(83,22,0)
(8,54,0)
(70,48,0)
(22,74,0)
(73,27,0)
(88,7,0)
(50,75,0)
(30,82,0)
(31,75,0)
(4,77,0)
(86,48,0)
(46,24,0)
(43,64,0)
(61,73,0)
(39,59,0)
(33,49,0)
(42,57,0)
(24,7,0)
(34,53,0)
(48,89,0)
(29,74,0)
(87,40,0)
(72,48,0)
(43,45,0)
(9,89,0)
(62,28,0)
(3,27,0)
(38,57,0)
(51,43,0)
(71,65,0)
(70,88,0)
(0,88,0)
(64,73,0)
(13,80,0)
(82,54,0)
(63,40,0)
(40,9,0)
(40,7,0)
(55,64,0)
(22,32,0)
(86,89,0)
(32,22,0)
(66,73,0)
(65,74,0)
(35,45,0)
(4,22,0)
(77,27,0)
(24,25,0)
(79,88,0)
(17,36,0)
(69,72,0)
(80,89,0)
(53,22,0)
(9,40,0)
(38,19,0)
(14,89,0)
(1,48,0)
(21,48,0)
(3,77,0)
(20,74,0)
(10,25,0)
(36,25,0)
(70,80,0)
(16,32,0)
(60,64,0)
(78,9,0)
(81,27,0)
(15,86,0)
(49,75,0)
(26,7,0)
(41,48,0)
(75,64,0)
(7,24,0)
(75,49,0)
(9,48,0)
(45,43,0)
(27,74,0)
(53,3,0)
(58,26,0)
(25,74,0)
(28,21,0)
(67,72,0)
(2,21,0)
(47,65,0)
(44,7,0)
(68,75,0)
(6,41,0)
(45,11,0)
(77,4,0)
(7,65,0)
(21,28,0)
(5,77,0)
(57,38,0)
(12,9,0)
(21,2,0)
(25,36,0)
(37,74,0)
(88,70,0)
(3,45,0)
(18,4,0)
(54,82,0)
(59,52,0)
(35,49,1)
(4,22,1)
(17,10,1)
(64,55,1)
(21,28,1)
(75,64,1)
(80,13,1)
(4,18,1)
(76,58,1)
(42,72,1)
(1,26,1)
(43,51,1)
(78,12,1)
(68,50,1)
(28,7,1)
(41,6,1)
(12,38,1)
(82,54,1)
(53,34,1)
(41,48,1)
(60,77,1)
(28,62,1)
(88,79,1)
(59,39,1)
(23,9,1)
(72,48,1)
(55,60,1)
(75,68,1)
(49,75,1)
(87,63,1)
(39,49,1)
(26,7,1)
(15,41,1)
(24,25,1)
(51,35,1)
(40,87,1)
(67,48,1)
(32,16,1)
(7,24,1)
(86,48,1)
(38,57,1)
(85,53,1)
(0,23,1)
(3,77,1)
(49,33,1)
(56,26,1)
(57,42,1)
(36,17,1)
(24,46,1)
(3,85,1)
(70,88,1)
(33,75,1)
(6,80,1)
(40,7,1)
(48,21,1)
(18,5,1)
(58,7,1)
(77,4,1)
(69,67,1)
(50,31,1)
(63,78,1)
(79,0,1)
(45,43,1)
(16,83,1)
(34,45,1)
(26,76,1)
(31,64,1)
(46,44,1)
(3,45,1)
(25,36,1)
(5,82,1)
(56,86,1)
(34,59,1)
(8,30,1)
(54,8,1)
(88,7,1)
(86,15,1)
(10,22,1)
(43,64,1)
(30,25,1)
(70,48,1)
(21,2,1)
(62,1,1)
(12,72,1)
(44,3,1)
(22,32,1)
(53,22,1)
(72,69,1)
(9,40,1)
(9,48,1)
(13,70,1)
(62,26,2)
(38,72,2)
(9,40,2)
(57,72,2)
(70,88,2)
(26,7,2)
(82,54,2)
(7,24,2)
(45,43,2)
(45,49,2)
(25,36,2)
(75,64,2)
(35,49,2)
(63,26,2)
(9,48,2)
(38,57,2)
(72,26,2)
(42,72,2)
(41,48,2)
(70,26,2)
(22,32,2)
(70,48,2)
(69,26,2)
(49,75,2)
(78,26,2)
(21,28,2)
(86,26,2)
(72,48,2)
(48,21,2)
(3,45,2)
(6,26,2)
(21,26,2)
(1,26,2)
(80,26,2)
(4,22,2)
(24,25,2)
(43,64,2)
(28,26,2)
(12,26,2)
(67,26,2)
(53,22,2)
(88,7,2)
(13,26,2)
(15,26,2)
(59,49,2)
(79,26,2)
(21,2,2)
(48,26,2)
(41,26,2)
(9,26,2)
(0,26,2)
(86,48,2)
(39,49,2)
(40,26,2)
(23,26,2)
(3,77,2)
(28,7,2)
(51,49,2)
(88,26,2)
(40,7,2)
(43,49,2)
(77,4,2)
(87,26,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,char *)
(3,*dataPtr1 = data)
(4,*dataPtr1)
(5,data)
(6,dataBuffer)
(7,data = *dataPtr2)
(8,1)
(9,memset(dataBuffer, \\\'A\\\', data-1)
(10,dataPtr2)
(11,)
(12,dataBuffer)
(13,\\\'\\\\0\\\')
(14,dataBuffer)
(15,dataBuffer)
(16,data)
(17,data)
(18,dataPtr1)
(19,)
(20,dataPtr2)
(21,(char *)
(22,*dataPtr1 = &data)
(23,dataBuffer)
(24,*dataPtr2)
(25,*dataPtr2 = &data)
(26,data < 100)
(27,)
(28,malloc(data)
(29,data)
(30,data)
(31,inputBuffer)
(32,&data)
(33,NULL)
(34,dataPtr1)
(35,data)
(36,&data)
(37,dataPtr1)
(38,exit(-1)
(39,"fgets()
(40,data-1)
(41,printLine(dataBuffer)
(42,1)
(43,atoi(inputBuffer)
(44,data)
(45,data = atoi(inputBuffer)
(46,dataPtr2)
(47,data)
(48,* dataBuffer = (char *)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,CHAR_ARRAY_SIZE)
(51,inputBuffer)
(52,)
(53,*dataPtr1)
(54,-1)
(55,"")
(56,RET)
(57,-1)
(58,data)
(59,printLine("fgets()
(60,inputBuffer)
(61,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(62,data)
(63,data)
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
(65,)
(66,inputBuffer)
(67,dataBuffer)
(68,stdin)
(69,NULL)
(70,dataBuffer[data-1])
(71,if (data < 100)
(72,dataBuffer == NULL)
(73,)
(74,)
(75,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(76,100)
(77,data = *dataPtr1)
(78,\\\'A\\\')
(79,1)
(80,dataBuffer[data-1] = \\\'\\\\0\\\')
(81,data)
(82,data = -1)
(83,dataPtr1)
(84,if (dataBuffer == NULL)
(85,data)
(86,free(dataBuffer)
(87,1)
(88,data-1)
(89,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^