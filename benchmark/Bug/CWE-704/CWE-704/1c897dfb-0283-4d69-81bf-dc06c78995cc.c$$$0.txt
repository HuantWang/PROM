-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
57,63
58,59
59,60
59,61
61,62
61,63
63,64
65,66
66,67
66,68
68,69
68,70
68,71
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
81,82
81,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
89,91
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
100,101
100,102
100,103
100,104
101,102
103,104
105,106
107,108
109,110
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,64,67,69,71,73,77,79,80,82,83,88,90,91,92,96,97,102,104,106,108,113,115,116,120,122
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
81,82
81,83
85,86
85,87
89,90
89,91
94,95
94,96
110,111
110,112
-----guardedBy-----
34,50
96,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_01_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_01_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(59,20,0)
(36,0,0)
(22,59,0)
(24,38,0)
(52,5,0)
(51,59,0)
(27,49,0)
(25,28,0)
(0,44,0)
(27,37,0)
(14,31,0)
(21,26,0)
(55,5,0)
(33,5,0)
(29,28,0)
(26,43,0)
(48,57,0)
(26,44,0)
(12,28,0)
(25,44,0)
(49,27,0)
(0,43,0)
(1,48,0)
(13,5,0)
(26,58,0)
(59,15,0)
(4,9,0)
(17,27,0)
(56,7,0)
(46,15,0)
(43,46,0)
(43,18,0)
(15,48,0)
(26,28,0)
(32,25,0)
(38,44,0)
(3,15,0)
(25,43,0)
(50,59,0)
(2,54,0)
(40,26,0)
(30,49,0)
(42,31,0)
(44,57,0)
(25,54,0)
(23,20,0)
(35,4,0)
(7,31,0)
(28,5,0)
(53,48,0)
(34,0,0)
(16,7,0)
(45,15,0)
(37,5,0)
(41,13,0)
(31,7,0)
(19,46,0)
(20,59,0)
(54,58,0)
(6,57,0)
(39,43,0)
(46,43,0)
(47,44,0)
(13,28,0)
(44,38,0)
(10,37,0)
(60,25,0)
(5,57,0)
(7,5,0)
(11,49,0)
(8,26,0)
(37,10,1)
(21,40,1)
(13,28,1)
(7,31,1)
(0,44,1)
(14,42,1)
(46,15,1)
(11,30,1)
(30,17,1)
(0,43,1)
(12,29,1)
(0,34,1)
(29,43,1)
(29,4,1)
(54,2,1)
(25,43,1)
(16,28,1)
(26,28,1)
(26,44,1)
(51,50,1)
(20,59,1)
(19,39,1)
(2,25,1)
(32,26,1)
(45,3,1)
(40,8,1)
(4,35,1)
(43,46,1)
(27,49,1)
(36,37,1)
(31,14,1)
(56,16,1)
(8,0,1)
(13,41,1)
(50,22,1)
(3,44,1)
(41,54,1)
(44,38,1)
(59,15,1)
(39,20,1)
(23,59,1)
(61,13,1)
(49,11,1)
(26,43,1)
(25,60,1)
(59,51,1)
(41,0,1)
(38,24,1)
(24,47,1)
(15,45,1)
(35,20,1)
(25,44,1)
(22,15,1)
(28,12,1)
(60,32,1)
(20,23,1)
(10,27,1)
(46,19,1)
(25,28,1)
(34,36,1)
(17,7,1)
(42,56,1)
(26,21,1)
(0,43,2)
(54,0,2)
(26,28,2)
(20,59,2)
(60,0,2)
(25,43,2)
(43,46,2)
(19,20,2)
(25,44,2)
(43,20,2)
(13,28,2)
(32,0,2)
(4,20,2)
(44,38,2)
(2,0,2)
(35,20,2)
(39,20,2)
(0,44,2)
(26,0,2)
(26,44,2)
(40,0,2)
(46,20,2)
(21,0,2)
(8,0,2)
(27,49,2)
(46,15,2)
(59,15,2)
(25,0,2)
(26,43,2)
(7,31,2)
(25,28,2)
-----------------------------------
(0,data < 100)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,\\\'\\\\0\\\')
(3,inputBuffer)
(4,printLine("fgets()
(5,)
(6,data)
(7,memset(source, \\\'A\\\', 100-1)
(8,dest)
(9,)
(10,\\\'\\\\0\\\')
(11,1)
(12,"")
(13,printLine(dest)
(14,1)
(15,inputBuffer[CHAR_ARRAY_SIZE] = "")
(16,source)
(17,source)
(18,)
(19,inputBuffer)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,data)
(22,inputBuffer)
(23,NULL)
(24,1)
(25,dest[data])
(26,memmove(dest, source, data)
(27,source[100-1])
(28,dest[100] = "")
(29,dest)
(30,100)
(31,100-1)
(32,dest)
(33,dest)
(34,100)
(35,"fgets()
(36,data)
(37,source[100-1] = \\\'\\\\0\\\')
(38,-1)
(39,data)
(40,source)
(41,dest)
(42,100)
(43,data = atoi(inputBuffer)
(44,data = -1)
(45,"")
(46,atoi(inputBuffer)
(47,data)
(48,)
(49,100-1)
(50,CHAR_ARRAY_SIZE)
(51,stdin)
(52,source)
(53,inputBuffer)
(54,dest[data] = \\\'\\\\0\\\')
(55,if (data < 100)
(56,\\\'A\\\')
(57,)
(58,)
(59,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(60,data)
(61,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^