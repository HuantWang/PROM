-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
21,22
21,23
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_05_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }
staticTrue
staticTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(45,10,0)
(31,19,0)
(36,47,0)
(24,42,0)
(9,21,0)
(38,30,0)
(47,11,0)
(14,27,0)
(46,32,0)
(4,12,0)
(11,47,0)
(3,32,0)
(12,39,0)
(33,27,0)
(7,33,0)
(18,37,0)
(27,32,0)
(42,24,0)
(25,11,0)
(34,32,0)
(4,11,0)
(17,33,0)
(11,5,0)
(28,18,0)
(43,42,0)
(30,32,0)
(22,4,0)
(10,11,0)
(33,37,0)
(40,27,0)
(1,24,0)
(23,30,0)
(6,32,0)
(44,42,0)
(10,12,0)
(24,3,0)
(41,33,0)
(20,4,0)
(33,12,0)
(29,39,0)
(32,39,0)
(13,39,0)
(19,32,0)
(15,3,0)
(19,27,0)
(21,30,0)
(26,21,0)
(2,12,0)
(33,11,0)
(4,27,0)
(4,18,0)
(8,10,0)
(0,12,0)
(30,21,0)
(24,42,1)
(21,26,1)
(10,45,1)
(45,8,1)
(27,14,1)
(10,12,1)
(38,27,1)
(40,11,1)
(35,19,1)
(36,25,1)
(11,47,1)
(12,2,1)
(15,24,1)
(19,27,1)
(42,44,1)
(10,11,1)
(41,10,1)
(4,22,1)
(30,21,1)
(17,7,1)
(31,10,1)
(4,11,1)
(9,23,1)
(28,4,1)
(31,18,1)
(33,27,1)
(33,11,1)
(2,0,1)
(33,17,1)
(25,16,1)
(23,38,1)
(22,20,1)
(3,15,1)
(26,9,1)
(33,12,1)
(47,36,1)
(16,12,1)
(7,41,1)
(20,33,1)
(18,28,1)
(40,16,1)
(1,30,1)
(19,31,1)
(4,12,1)
(14,40,1)
(43,1,1)
(8,3,1)
(44,43,1)
(4,27,1)
(20,10,2)
(47,16,2)
(33,27,2)
(18,10,2)
(33,10,2)
(36,16,2)
(11,47,2)
(24,42,2)
(10,11,2)
(4,10,2)
(28,10,2)
(25,16,2)
(30,21,2)
(7,10,2)
(19,27,2)
(11,16,2)
(41,10,2)
(4,11,2)
(22,10,2)
(17,10,2)
(4,27,2)
(10,12,2)
(33,11,2)
(4,12,2)
(33,12,2)
-----------------------------------
(0,data)
(1,source)
(2,0)
(3,source[100-1] = \\\'\\\\0\\\')
(4,dest[data])
(5,)
(6,if (data < 100)
(7,source)
(8,data)
(9,100)
(10,data < 100)
(11,data = -1)
(12,data = 0)
(13,if(staticTrue)
(14,"")
(15,\\\'\\\\0\\\')
(16,staticTrue)
(17,data)
(18,dest[data] = \\\'\\\\0\\\')
(19,printLine(dest)
(20,dest)
(21,100-1)
(22,data)
(23,\\\'A\\\')
(24,source[100-1])
(25,data)
(26,1)
(27,dest[100] = "")
(28,\\\'\\\\0\\\')
(29,data)
(30,memset(source, \\\'A\\\', 100-1)
(31,dest)
(32,)
(33,memmove(dest, source, data)
(34,source)
(35,RET)
(36,1)
(37,)
(38,source)
(39,)
(40,dest)
(41,dest)
(42,100-1)
(43,100)
(44,1)
(45,100)
(46,dest)
(47,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^