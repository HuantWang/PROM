-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_11_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(37,28,0)
(46,22,0)
(15,53,0)
(18,41,0)
(36,20,0)
(21,23,0)
(14,15,0)
(5,22,0)
(48,28,0)
(54,53,0)
(17,51,0)
(23,36,0)
(41,22,0)
(45,14,0)
(25,11,0)
(10,17,0)
(9,19,0)
(1,15,0)
(0,53,0)
(23,53,0)
(6,53,0)
(13,0,0)
(23,41,0)
(12,52,0)
(40,22,0)
(7,20,0)
(15,14,0)
(54,8,0)
(40,53,0)
(14,20,0)
(29,36,0)
(7,51,0)
(49,17,0)
(14,51,0)
(50,15,0)
(31,11,0)
(39,28,0)
(8,54,0)
(53,54,0)
(11,20,0)
(35,40,0)
(32,36,0)
(11,51,0)
(0,22,0)
(20,28,0)
(33,20,0)
(36,23,0)
(36,51,0)
(53,22,0)
(44,20,0)
(19,12,0)
(30,51,0)
(17,10,0)
(51,47,0)
(17,49,0)
(7,54,0)
(34,7,0)
(24,6,0)
(51,17,0)
(15,22,0)
(4,6,0)
(54,7,0)
(38,53,0)
(12,19,0)
(2,14,0)
(36,20,1)
(24,53,1)
(33,44,1)
(1,50,1)
(32,29,1)
(53,54,1)
(36,32,1)
(29,21,1)
(9,6,1)
(25,27,1)
(20,33,1)
(17,49,1)
(11,31,1)
(0,13,1)
(26,0,1)
(12,19,1)
(34,38,1)
(23,53,1)
(36,51,1)
(7,34,1)
(7,20,1)
(7,51,1)
(50,6,1)
(45,1,1)
(6,4,1)
(41,18,1)
(21,15,1)
(38,11,1)
(11,20,1)
(54,8,1)
(31,25,1)
(35,41,1)
(23,36,1)
(49,30,1)
(40,53,1)
(51,17,1)
(4,24,1)
(27,20,1)
(14,2,1)
(50,12,1)
(30,27,1)
(6,53,1)
(11,51,1)
(14,51,1)
(14,20,1)
(25,51,1)
(40,35,1)
(19,9,1)
(26,11,1)
(2,45,1)
(13,40,1)
(18,23,1)
(15,53,1)
(54,7,1)
(17,10,1)
(15,14,1)
(0,53,1)
(29,11,2)
(36,11,2)
(14,51,2)
(45,11,2)
(23,11,2)
(54,7,2)
(17,10,2)
(51,17,2)
(53,54,2)
(13,11,2)
(49,27,2)
(14,20,2)
(17,49,2)
(11,51,2)
(6,53,2)
(15,11,2)
(38,11,2)
(23,53,2)
(12,6,2)
(14,11,2)
(40,11,2)
(6,11,2)
(1,11,2)
(54,8,2)
(7,11,2)
(18,11,2)
(15,14,2)
(53,11,2)
(51,27,2)
(15,53,2)
(41,11,2)
(23,36,2)
(17,27,2)
(2,11,2)
(36,51,2)
(11,20,2)
(40,53,2)
(34,11,2)
(54,11,2)
(24,11,2)
(36,20,2)
(7,51,2)
(9,6,2)
(21,11,2)
(12,19,2)
(7,20,2)
(35,11,2)
(32,11,2)
(19,6,2)
(0,11,2)
(50,11,2)
(30,27,2)
(0,53,2)
(4,11,2)
-----------------------------------
(0,free(dataBuffer)
(1,\'A\')
(2,1)
(3,'A')
(4,NULL)
(5,dataBuffer)
(6,dataBuffer == NULL)
(7,malloc(data)
(8,char *)
(9,1)
(10,short)
(11,data < 100)
(12,exit(-1)
(13,dataBuffer)
(14,data-1)
(15,memset(dataBuffer, 'A', data-1)
(16,memset(dataBuffer, \'A\', data-1)
(17,(short)
(18,'\\\\0')
(19,-1)
(20,data = 0)
(21,dataBuffer)
(22,)
(23,dataBuffer[data-1])
(24,dataBuffer)
(25,data)
(26,RET)
(27,globalReturnsTrue()
(28,)
(29,data)
(30,data)
(31,100)
(32,1)
(33,0)
(34,data)
(35,dataBuffer)
(36,data-1)
(37,if (data < 100)
(38,dataBuffer)
(39,if(globalReturnsTrue()
(40,printLine(dataBuffer)
(41,dataBuffer[data-1] = '\\\\0')
(42,\'\\\\0\')
(43,dataBuffer[data-1] = \'\\\\0\')
(44,data)
(45,data)
(46,if (dataBuffer == NULL)
(47,)
(48,data)
(49,RAND32()
(50,dataBuffer)
(51,data = (short)
(52,)
(53,* dataBuffer = (char *)
(54,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^