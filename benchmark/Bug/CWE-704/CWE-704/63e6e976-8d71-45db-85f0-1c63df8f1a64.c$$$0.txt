-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
70,73
70,74
70,75
70,76
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
108,110
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
118,119
122,123
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,69,73,75,76,80,82,85,87,91,93,98,100,104,106,107,110,111,116,119,120,121,125,127,131,133
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
66,67
66,68
89,90
89,91
108,109
108,110
113,114
113,115
117,118
117,119
-----guardedBy-----
38,58
68,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_11_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,1,0)
(19,30,0)
(32,36,0)
(31,43,0)
(3,59,0)
(43,31,0)
(48,61,0)
(11,12,0)
(52,58,0)
(13,32,0)
(35,29,0)
(62,61,0)
(6,13,0)
(24,36,0)
(8,58,0)
(37,18,0)
(48,60,0)
(67,37,0)
(45,52,0)
(2,59,0)
(23,29,0)
(36,48,0)
(43,58,0)
(1,22,0)
(66,58,0)
(59,37,0)
(61,64,0)
(10,32,0)
(27,26,0)
(21,37,0)
(54,65,0)
(39,12,0)
(51,64,0)
(12,58,0)
(52,29,0)
(1,37,0)
(43,25,0)
(50,19,0)
(0,19,0)
(26,15,0)
(32,13,0)
(1,36,0)
(19,64,0)
(28,22,0)
(13,58,0)
(4,13,0)
(31,37,0)
(44,1,0)
(5,26,0)
(63,18,0)
(17,18,0)
(22,35,0)
(30,19,0)
(61,48,0)
(34,16,0)
(58,29,0)
(31,36,0)
(66,29,0)
(46,14,0)
(41,30,0)
(46,65,0)
(59,36,0)
(65,46,0)
(36,33,0)
(47,35,0)
(22,58,0)
(13,29,0)
(42,66,0)
(56,29,0)
(60,48,0)
(9,34,0)
(40,31,0)
(53,64,0)
(32,37,0)
(25,43,0)
(58,43,0)
(7,19,0)
(64,26,0)
(55,18,0)
(48,36,0)
(49,32,0)
(22,1,0)
(30,19,1)
(59,37,1)
(59,36,1)
(45,35,1)
(10,6,1)
(13,58,1)
(32,37,1)
(31,37,1)
(50,7,1)
(53,57,1)
(6,4,1)
(61,62,1)
(52,58,1)
(3,36,1)
(12,58,1)
(2,3,1)
(1,37,1)
(3,57,1)
(31,36,1)
(44,28,1)
(47,22,1)
(48,61,1)
(43,25,1)
(12,11,1)
(39,58,1)
(4,12,1)
(32,36,1)
(30,41,1)
(41,19,1)
(49,10,1)
(22,58,1)
(65,54,1)
(61,64,1)
(54,12,1)
(46,65,1)
(35,47,1)
(34,9,1)
(1,36,1)
(24,30,1)
(64,51,1)
(62,24,1)
(28,13,1)
(3,34,1)
(32,49,1)
(59,2,1)
(48,60,1)
(0,64,1)
(66,58,1)
(58,43,1)
(9,30,1)
(36,48,1)
(11,39,1)
(7,0,1)
(42,52,1)
(20,59,1)
(19,50,1)
(40,8,1)
(22,1,1)
(8,59,1)
(4,46,1)
(21,67,1)
(43,31,1)
(19,64,1)
(37,21,1)
(13,32,1)
(66,42,1)
(31,40,1)
(51,53,1)
(57,37,1)
(52,45,1)
(1,38,1)
(20,66,1)
(38,44,1)
(11,59,2)
(36,48,2)
(66,58,2)
(13,59,2)
(6,59,2)
(51,57,2)
(54,12,2)
(19,64,2)
(22,59,2)
(42,59,2)
(31,59,2)
(31,37,2)
(47,59,2)
(30,57,2)
(35,59,2)
(28,59,2)
(34,30,2)
(13,58,2)
(44,59,2)
(1,59,2)
(62,30,2)
(32,59,2)
(24,30,2)
(22,58,2)
(61,30,2)
(36,30,2)
(46,65,2)
(32,36,2)
(64,57,2)
(8,59,2)
(41,57,2)
(52,58,2)
(4,59,2)
(48,61,2)
(9,30,2)
(7,57,2)
(40,59,2)
(30,19,2)
(13,32,2)
(59,36,2)
(59,37,2)
(45,59,2)
(31,36,2)
(52,59,2)
(66,59,2)
(58,59,2)
(50,57,2)
(49,59,2)
(10,59,2)
(0,57,2)
(65,12,2)
(1,37,2)
(1,36,2)
(12,58,2)
(61,64,2)
(12,59,2)
(46,12,2)
(43,31,2)
(48,30,2)
(43,59,2)
(53,57,2)
(32,37,2)
(58,43,2)
(19,57,2)
(38,59,2)
(39,59,2)
(48,60,2)
(43,25,2)
(22,1,2)
-----------------------------------
(0,inputBuffer)
(1,data-1)
(2,100)
(3,data)
(4,dataBuffer)
(5,inputBuffer)
(6,\\\'A\\\')
(7,CHAR_ARRAY_SIZE)
(8,dataBuffer)
(9,"fgets()
(10,data)
(11,NULL)
(12,dataBuffer == NULL)
(13,memset(dataBuffer, \\\'A\\\', data-1)
(14,)
(15,)
(16,)
(17,if (data < 100)
(18,)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,RET)
(21,0)
(22,dataBuffer[data-1])
(23,dataBuffer)
(24,data)
(25,char *)
(26,)
(27,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,dataBuffer)
(29,)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,malloc(data)
(32,data-1)
(33,)
(34,printLine("fgets()
(35,dataBuffer[data-1] = \\\'\\\\0\\\')
(36,data = (short)
(37,data = 0)
(38,1)
(39,dataBuffer)
(40,data)
(41,NULL)
(42,dataBuffer)
(43,(char *)
(44,data)
(45,dataBuffer)
(46,exit(-1)
(47,\\\'\\\\0\\\')
(48,(short)
(49,1)
(50,stdin)
(51,"")
(52,printLine(dataBuffer)
(53,inputBuffer)
(54,1)
(55,if(globalReturnsTrue()
(56,if (dataBuffer == NULL)
(57,globalReturnsTrue()
(58,* dataBuffer = (char *)
(59,data < 100)
(60,short)
(61,atoi(inputBuffer)
(62,inputBuffer)
(63,data)
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
(65,-1)
(66,free(dataBuffer)
(67,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^