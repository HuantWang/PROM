-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_16_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }
1
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(22,21,0)
(25,19,0)
(21,22,0)
(9,27,0)
(47,10,0)
(49,0,0)
(29,44,0)
(13,45,0)
(45,13,0)
(16,20,0)
(35,4,0)
(11,8,0)
(1,8,0)
(34,10,0)
(40,29,0)
(8,24,0)
(0,24,0)
(8,1,0)
(20,0,0)
(24,19,0)
(43,22,0)
(15,12,0)
(26,12,0)
(34,12,0)
(50,45,0)
(22,27,0)
(37,8,0)
(46,21,0)
(12,20,0)
(51,24,0)
(0,20,0)
(28,10,0)
(41,4,0)
(5,47,0)
(14,21,0)
(48,13,0)
(12,10,0)
(6,36,0)
(1,10,0)
(1,12,0)
(3,10,0)
(20,16,0)
(20,12,0)
(7,19,0)
(39,45,0)
(21,24,0)
(13,24,0)
(4,24,0)
(44,29,0)
(23,19,0)
(31,1,0)
(27,10,0)
(47,12,0)
(32,34,0)
(22,12,0)
(2,1,0)
(44,18,0)
(30,15,0)
(33,15,0)
(17,24,0)
(45,36,0)
(29,40,1)
(27,9,1)
(8,37,1)
(6,45,1)
(50,39,1)
(17,51,1)
(32,47,1)
(5,27,1)
(41,42,1)
(1,8,1)
(48,50,1)
(11,31,1)
(26,4,1)
(0,49,1)
(13,24,1)
(15,30,1)
(38,34,1)
(4,35,1)
(8,24,1)
(49,26,1)
(45,13,1)
(13,48,1)
(43,1,1)
(2,44,1)
(15,12,1)
(42,24,1)
(22,12,1)
(24,17,1)
(46,14,1)
(34,12,1)
(44,29,1)
(38,4,1)
(47,5,1)
(4,24,1)
(31,2,1)
(14,43,1)
(20,0,1)
(0,24,1)
(12,20,1)
(2,15,1)
(37,11,1)
(33,12,1)
(40,15,1)
(47,12,1)
(39,42,1)
(34,32,1)
(21,24,1)
(41,6,1)
(22,21,1)
(35,41,1)
(9,22,1)
(20,16,1)
(1,12,1)
(21,46,1)
(30,33,1)
(44,15,2)
(22,12,2)
(22,4,2)
(8,24,2)
(32,4,2)
(26,4,2)
(15,12,2)
(47,4,2)
(39,42,2)
(37,4,2)
(13,24,2)
(20,4,2)
(27,4,2)
(20,0,2)
(45,42,2)
(11,4,2)
(46,4,2)
(44,29,2)
(20,16,2)
(49,4,2)
(2,4,2)
(50,42,2)
(33,4,2)
(40,15,2)
(14,4,2)
(31,4,2)
(34,12,2)
(48,42,2)
(5,4,2)
(30,4,2)
(43,4,2)
(45,13,2)
(8,4,2)
(0,4,2)
(1,12,2)
(34,4,2)
(9,4,2)
(29,15,2)
(21,24,2)
(13,42,2)
(12,20,2)
(47,12,2)
(1,4,2)
(21,4,2)
(12,4,2)
(15,4,2)
(4,24,2)
(6,42,2)
(22,21,2)
(1,8,2)
(0,24,2)
-----------------------------------
(0,malloc(data)
(1,memset(dataBuffer, \\\'A\\\', data-1)
(2,dataBuffer)
(3,if (dataBuffer == NULL)
(4,data < 100)
(5,dataBuffer)
(6,break;)
(7,while(1)
(8,data-1)
(9,\\\'\\\\0\\\')
(10,)
(11,data)
(12,* dataBuffer = (char *)
(13,&data)
(14,data)
(15,dataBuffer == NULL)
(16,char *)
(17,0)
(18,)
(19,)
(20,(char *)
(21,data-1)
(22,dataBuffer[data-1])
(23,data)
(24,data = 0)
(25,if (data < 100)
(26,dataBuffer)
(27,dataBuffer[data-1] = \\\'\\\\0\\\')
(28,dataBuffer)
(29,-1)
(30,NULL)
(31,\\\'A\\\')
(32,dataBuffer)
(33,dataBuffer)
(34,free(dataBuffer)
(35,100)
(36,)
(37,1)
(38,RET)
(39,stdin)
(40,1)
(41,data)
(42,1)
(43,dataBuffer)
(44,exit(-1)
(45,fscanf (stdin, "%hd", &data)
(46,1)
(47,printLine(dataBuffer)
(48,data)
(49,data)
(50,"%hd")
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^