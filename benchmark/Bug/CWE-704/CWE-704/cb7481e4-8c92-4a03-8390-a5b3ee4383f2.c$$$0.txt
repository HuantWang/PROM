-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
46,47
46,48
46,49
46,50
46,51
46,52
47,48
48,49
48,50
50,51
50,52
50,53
53,54
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
94,95
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,44,45,49,51,52,56,58,61,63,67,69,74,76,80,82,83,86,87,92,95,96,97,101,103,107,109
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
36,37
36,38
42,43
42,44
65,66
65,67
84,85
84,86
89,90
89,91
93,94
93,95
-----guardedBy-----
44,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_17_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(21,23,0)
(42,44,0)
(37,44,0)
(54,50,0)
(40,39,0)
(25,54,0)
(14,50,0)
(43,15,0)
(2,39,0)
(10,36,0)
(45,26,0)
(7,33,0)
(27,40,0)
(13,56,0)
(58,23,0)
(12,46,0)
(40,27,0)
(38,51,0)
(8,37,0)
(23,50,0)
(19,39,0)
(60,50,0)
(18,36,0)
(39,46,0)
(1,45,0)
(9,46,0)
(27,50,0)
(3,27,0)
(4,39,0)
(56,44,0)
(28,55,0)
(36,18,0)
(0,4,0)
(22,41,0)
(51,7,0)
(35,40,0)
(41,39,0)
(61,41,0)
(16,46,0)
(7,51,0)
(34,56,0)
(20,55,0)
(41,45,0)
(17,46,0)
(32,26,0)
(48,18,0)
(54,55,0)
(15,43,0)
(36,39,0)
(57,44,0)
(50,55,0)
(24,14,0)
(27,55,0)
(45,50,0)
(41,15,0)
(50,18,0)
(47,27,0)
(59,4,0)
(30,15,0)
(15,29,0)
(18,50,0)
(53,43,0)
(45,41,0)
(4,15,0)
(40,15,0)
(36,15,0)
(11,40,0)
(26,55,0)
(14,55,0)
(18,48,0)
(14,24,1)
(40,39,1)
(42,57,1)
(6,54,1)
(39,19,1)
(10,60,1)
(47,23,1)
(53,30,1)
(38,23,1)
(35,3,1)
(0,56,1)
(4,15,1)
(25,14,1)
(41,22,1)
(40,15,1)
(54,25,1)
(19,2,1)
(32,45,1)
(18,48,1)
(56,13,1)
(4,39,1)
(37,8,1)
(43,53,1)
(50,18,1)
(34,44,1)
(23,21,1)
(41,39,1)
(41,15,1)
(54,50,1)
(13,34,1)
(3,47,1)
(36,39,1)
(8,15,1)
(59,0,1)
(56,44,1)
(14,50,1)
(61,1,1)
(36,15,1)
(23,50,1)
(24,26,1)
(47,7,1)
(51,38,1)
(45,50,1)
(15,43,1)
(27,40,1)
(27,50,1)
(57,39,1)
(37,44,1)
(58,50,1)
(18,36,1)
(30,56,1)
(4,59,1)
(45,41,1)
(7,51,1)
(1,27,1)
(34,37,1)
(44,42,1)
(22,61,1)
(21,58,1)
(26,32,1)
(36,10,1)
(11,35,1)
(6,4,1)
(40,11,1)
(60,4,1)
(56,56,2)
(45,4,2)
(10,4,2)
(36,4,2)
(40,4,2)
(34,56,2)
(22,4,2)
(50,18,2)
(43,56,2)
(41,15,2)
(3,4,2)
(27,40,2)
(26,4,2)
(54,50,2)
(58,4,2)
(30,56,2)
(32,4,2)
(50,4,2)
(1,4,2)
(45,50,2)
(4,15,2)
(54,4,2)
(14,4,2)
(13,56,2)
(60,4,2)
(36,15,2)
(38,23,2)
(11,4,2)
(45,41,2)
(41,39,2)
(8,56,2)
(23,50,2)
(47,4,2)
(15,43,2)
(7,23,2)
(40,39,2)
(37,56,2)
(53,56,2)
(14,50,2)
(36,39,2)
(40,15,2)
(18,36,2)
(21,4,2)
(7,51,2)
(35,4,2)
(41,4,2)
(56,44,2)
(18,4,2)
(37,44,2)
(24,4,2)
(18,48,2)
(61,4,2)
(23,4,2)
(27,4,2)
(51,23,2)
(4,39,2)
(25,4,2)
(15,56,2)
(27,50,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,data)
(3,'A')
(4,data < 100)
(5,\'A\')
(6,RET)
(7,exit(-1)
(8,i)
(9,data)
(10,data)
(11,1)
(12,if (data < 100)
(13,1)
(14,printLine(dataBuffer)
(15,data = -1)
(16,for(i = 0; i < 1; i++)
(17,i)
(18,(char *)
(19,0)
(20,dataBuffer)
(21,NULL)
(22,1)
(23,dataBuffer == NULL)
(24,dataBuffer)
(25,dataBuffer)
(26,dataBuffer[data-1] = '\\\\0')
(27,memset(dataBuffer, 'A', data-1)
(28,if (dataBuffer == NULL)
(29,)
(30,data)
(31,dataBuffer[data-1] = \'\\\\0\')
(32,\'\\\\0\')
(33,)
(34,i)
(35,data)
(36,malloc(data)
(37,i++)
(38,1)
(39,data = 0)
(40,data-1)
(41,data-1)
(42,0)
(43,-1)
(44,i = 0)
(45,dataBuffer[data-1])
(46,)
(47,dataBuffer)
(48,char *)
(49,memset(dataBuffer, \'A\', data-1)
(50,* dataBuffer = (char *)
(51,-1)
(52,'\\\\0')
(53,1)
(54,free(dataBuffer)
(55,)
(56,i < 1)
(57,i)
(58,dataBuffer)
(59,100)
(60,dataBuffer)
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^