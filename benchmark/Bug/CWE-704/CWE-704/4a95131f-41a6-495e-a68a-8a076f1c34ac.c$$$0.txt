-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a random number */
        data = (short)RAND32();
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
41,43
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
55,57
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,43,46,50,52,56,57,59,63,65
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_17_bad(){    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random number */        data = (short)RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_rand_17_bad()
CWE197_Numeric_Truncation_Error__short_rand_17_bad
{    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random number */        data = (short)RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Use a random number */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a random number */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(4,30,0)
(9,15,0)
(7,12,0)
(5,2,0)
(17,15,0)
(7,25,0)
(23,15,0)
(5,18,0)
(24,17,0)
(12,7,0)
(26,12,0)
(6,0,0)
(12,17,0)
(20,13,0)
(13,16,0)
(10,14,0)
(28,25,0)
(0,16,0)
(27,15,0)
(25,15,0)
(17,19,0)
(5,4,0)
(3,16,0)
(18,5,0)
(29,19,0)
(19,17,0)
(14,7,0)
(1,16,0)
(11,7,0)
(21,4,0)
(2,5,0)
(12,26,0)
(8,13,0)
(31,12,0)
(12,4,0)
(14,25,0)
(4,5,0)
(21,13,1)
(6,4,1)
(19,29,1)
(3,17,1)
(12,26,1)
(8,16,1)
(12,17,1)
(18,21,1)
(0,6,1)
(22,14,1)
(12,31,1)
(5,2,1)
(0,16,1)
(17,19,1)
(12,4,1)
(14,7,1)
(14,10,1)
(13,20,1)
(7,12,1)
(20,8,1)
(29,24,1)
(16,1,1)
(13,16,1)
(4,5,1)
(5,18,1)
(31,11,1)
(11,13,1)
(10,7,1)
(8,0,1)
(1,3,1)
(0,13,2)
(6,13,2)
(17,19,2)
(20,13,2)
(8,13,2)
(4,13,2)
(4,5,2)
(18,13,2)
(12,26,2)
(0,16,2)
(21,13,2)
(5,18,2)
(12,4,2)
(13,13,2)
(14,7,2)
(5,13,2)
(7,12,2)
(12,17,2)
(5,2,2)
(13,16,2)
-----------------------------------
(0,i++)
(1,0)
(2,short)
(3,i)
(4,data = (short)
(5,(short)
(6,i)
(7,charData = (char)
(8,i)
(9,for(i = 0; i < 1; i++)
(10,charData)
(11,charData)
(12,(char)
(13,i < 1)
(14,printHexCharLine(charData)
(15,)
(16,i = 0)
(17,data = -1)
(18,RAND32()
(19,-1)
(20,1)
(21,data)
(22,RET)
(23,data)
(24,data)
(25,)
(26,char)
(27,i)
(28,charData)
(29,1)
(30,)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^