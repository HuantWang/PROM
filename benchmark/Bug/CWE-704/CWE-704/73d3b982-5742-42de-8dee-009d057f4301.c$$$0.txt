-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_07_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
71,77
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
79,81
80,81
80,82
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
119,120
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,70,74,76,77,81,83,86,88,92,94,99,101,105,107,108,111,112,117,120,121,122,126,128,132,134
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
67,68
67,69
90,91
90,92
109,110
109,111
114,115
114,116
118,119
118,120
-----guardedBy-----
39,59
69,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_07_bad(){    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_07_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_07_bad
{    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(26,45,0)
(57,6,0)
(37,39,0)
(47,10,0)
(30,10,0)
(11,35,0)
(13,34,0)
(54,13,0)
(64,6,0)
(13,67,0)
(40,56,0)
(27,56,0)
(25,58,0)
(67,24,0)
(60,58,0)
(18,0,0)
(59,20,0)
(9,65,0)
(52,67,0)
(25,20,0)
(7,8,0)
(42,23,0)
(1,7,0)
(30,23,0)
(57,10,0)
(11,10,0)
(66,49,0)
(58,20,0)
(21,0,0)
(10,56,0)
(22,34,0)
(61,13,0)
(62,42,0)
(14,20,0)
(45,58,0)
(29,24,0)
(16,39,0)
(57,23,0)
(33,57,0)
(3,45,0)
(63,68,0)
(59,58,0)
(34,13,0)
(23,42,0)
(23,31,0)
(39,23,0)
(65,30,0)
(15,67,0)
(6,20,0)
(53,30,0)
(68,63,0)
(42,62,0)
(11,23,0)
(2,6,0)
(35,49,0)
(46,35,0)
(24,44,0)
(35,11,0)
(5,57,0)
(65,58,0)
(35,58,0)
(39,10,0)
(6,58,0)
(42,52,0)
(12,24,0)
(36,52,0)
(32,11,0)
(65,9,0)
(58,65,0)
(6,57,0)
(17,23,0)
(4,25,0)
(51,56,0)
(48,11,0)
(69,20,0)
(55,13,0)
(43,59,0)
(52,42,0)
(49,20,0)
(50,63,0)
(30,65,0)
(41,67,0)
(38,10,0)
(68,19,0)
(61,55,1)
(37,23,1)
(28,25,1)
(30,53,1)
(37,7,1)
(23,42,1)
(67,15,1)
(17,34,1)
(59,43,1)
(53,60,1)
(33,64,1)
(46,6,1)
(28,39,1)
(15,41,1)
(68,63,1)
(50,45,1)
(25,4,1)
(65,30,1)
(35,11,1)
(52,36,1)
(11,10,1)
(65,9,1)
(13,61,1)
(10,47,1)
(59,58,1)
(30,23,1)
(42,52,1)
(42,62,1)
(11,23,1)
(6,58,1)
(60,39,1)
(1,34,1)
(45,58,1)
(63,50,1)
(3,26,1)
(25,58,1)
(64,2,1)
(66,35,1)
(55,54,1)
(45,3,1)
(57,5,1)
(2,45,1)
(30,10,1)
(34,22,1)
(39,16,1)
(39,23,1)
(43,49,1)
(35,58,1)
(7,1,1)
(37,0,1)
(36,17,1)
(58,65,1)
(32,48,1)
(5,33,1)
(52,67,1)
(26,58,1)
(39,10,1)
(18,21,1)
(21,10,1)
(48,46,1)
(16,37,1)
(4,59,1)
(13,67,1)
(57,23,1)
(34,13,1)
(2,68,1)
(41,0,1)
(54,67,1)
(47,38,1)
(0,18,1)
(11,32,1)
(49,66,1)
(22,13,1)
(6,57,1)
(57,10,1)
(65,9,2)
(13,67,2)
(35,58,2)
(25,39,2)
(45,58,2)
(53,39,2)
(23,42,2)
(52,67,2)
(30,39,2)
(54,0,2)
(4,39,2)
(58,39,2)
(35,11,2)
(2,39,2)
(7,34,2)
(34,13,2)
(43,39,2)
(15,0,2)
(25,58,2)
(68,45,2)
(49,39,2)
(57,39,2)
(30,10,2)
(42,52,2)
(32,39,2)
(22,0,2)
(57,23,2)
(46,39,2)
(26,39,2)
(55,0,2)
(63,45,2)
(61,0,2)
(41,0,2)
(42,34,2)
(57,10,2)
(52,34,2)
(36,34,2)
(35,39,2)
(59,58,2)
(17,34,2)
(65,30,2)
(23,34,2)
(6,57,2)
(58,65,2)
(11,10,2)
(30,23,2)
(60,39,2)
(65,39,2)
(3,39,2)
(6,39,2)
(45,39,2)
(64,39,2)
(48,39,2)
(6,58,2)
(34,0,2)
(50,45,2)
(11,39,2)
(42,62,2)
(39,23,2)
(33,39,2)
(66,39,2)
(67,0,2)
(13,0,2)
(39,10,2)
(5,39,2)
(68,63,2)
(1,34,2)
(59,39,2)
(11,23,2)
-----------------------------------
(0,staticFive==5)
(1,"fgets()
(2,dataBuffer)
(3,NULL)
(4,dataBuffer)
(5,1)
(6,memset(dataBuffer, \\\'A\\\', data-1)
(7,printLine("fgets()
(8,)
(9,char *)
(10,data = 0)
(11,data-1)
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,if (dataBuffer == NULL)
(15,"")
(16,100)
(17,data)
(18,5)
(19,)
(20,)
(21,staticFive)
(22,NULL)
(23,data = (short)
(24,)
(25,free(dataBuffer)
(26,dataBuffer)
(27,if (data < 100)
(28,RET)
(29,inputBuffer)
(30,malloc(data)
(31,)
(32,1)
(33,data)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,dataBuffer[data-1])
(36,inputBuffer)
(37,data)
(38,data)
(39,data < 100)
(40,if(staticFive==5)
(41,inputBuffer)
(42,(short)
(43,dataBuffer)
(44,)
(45,dataBuffer == NULL)
(46,dataBuffer)
(47,0)
(48,data)
(49,dataBuffer[data-1] = \\\'\\\\0\\\')
(50,1)
(51,data)
(52,atoi(inputBuffer)
(53,data)
(54,inputBuffer)
(55,CHAR_ARRAY_SIZE)
(56,)
(57,data-1)
(58,* dataBuffer = (char *)
(59,printLine(dataBuffer)
(60,dataBuffer)
(61,stdin)
(62,short)
(63,-1)
(64,\\\'A\\\')
(65,(char *)
(66,\\\'\\\\0\\\')
(67,inputBuffer[CHAR_ARRAY_SIZE] = "")
(68,exit(-1)
(69,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^