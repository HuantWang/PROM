-----label-----
1
-----code-----
static void badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(short data)
badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,38,0)
(42,23,0)
(30,21,0)
(2,3,0)
(32,9,0)
(27,34,0)
(9,29,0)
(15,34,0)
(8,26,0)
(23,3,0)
(1,38,0)
(34,21,0)
(6,19,0)
(21,4,0)
(20,21,0)
(36,23,0)
(11,42,0)
(10,36,0)
(21,23,0)
(38,13,0)
(16,14,0)
(33,24,0)
(3,23,0)
(0,4,0)
(37,39,0)
(35,18,0)
(3,2,0)
(36,4,0)
(26,4,0)
(21,34,0)
(39,4,0)
(34,13,0)
(24,13,0)
(24,3,0)
(26,23,0)
(22,18,0)
(14,23,0)
(17,32,0)
(38,14,0)
(14,39,0)
(12,23,0)
(14,38,0)
(7,4,0)
(3,24,0)
(25,42,0)
(23,4,0)
(9,32,0)
(18,13,0)
(5,18,1)
(18,35,1)
(33,12,1)
(21,23,1)
(10,26,1)
(34,13,1)
(25,23,1)
(28,16,1)
(24,33,1)
(26,8,1)
(26,23,1)
(9,32,1)
(11,25,1)
(18,13,1)
(17,42,1)
(1,28,1)
(20,30,1)
(8,39,1)
(30,42,1)
(12,18,1)
(42,11,1)
(27,15,1)
(3,2,1)
(37,14,1)
(39,37,1)
(21,34,1)
(3,24,1)
(5,36,1)
(15,20,1)
(38,1,1)
(16,21,1)
(35,22,1)
(30,9,1)
(36,10,1)
(36,23,1)
(14,38,1)
(32,17,1)
(14,23,1)
(23,3,1)
(34,27,1)
(24,13,1)
(38,13,1)
(42,23,1)
(37,18,2)
(3,18,2)
(1,18,2)
(42,18,2)
(21,18,2)
(34,18,2)
(30,18,2)
(14,38,2)
(38,13,2)
(10,18,2)
(17,42,2)
(23,3,2)
(27,18,2)
(3,2,2)
(36,18,2)
(38,18,2)
(36,23,2)
(39,18,2)
(11,18,2)
(33,18,2)
(3,24,2)
(42,23,2)
(25,18,2)
(8,18,2)
(9,42,2)
(12,18,2)
(18,13,2)
(14,23,2)
(26,18,2)
(21,34,2)
(15,18,2)
(9,32,2)
(24,18,2)
(28,18,2)
(23,18,2)
(34,13,2)
(32,42,2)
(14,18,2)
(21,23,2)
(20,18,2)
(26,23,2)
(16,18,2)
(24,13,2)
-----------------------------------
(0,if (dataBuffer == NULL)
(1,1)
(2,char *)
(3,(char *)
(4,)
(5,RET)
(6,if (data < 100)
(7,dataBuffer)
(8,dataBuffer)
(9,exit(-1)
(10,dataBuffer)
(11,NULL)
(12,dataBuffer)
(13,short data)
(14,dataBuffer[data-1])
(15,data)
(16,dataBuffer)
(17,1)
(18,data < 100)
(19,)
(20,'A')
(21,memset(dataBuffer, 'A', data-1)
(22,data)
(23,* dataBuffer = (char *)
(24,malloc(data)
(25,dataBuffer)
(26,printLine(dataBuffer)
(27,1)
(28,data)
(29,)
(30,dataBuffer)
(31,memset(dataBuffer, \'A\', data-1)
(32,-1)
(33,data)
(34,data-1)
(35,100)
(36,free(dataBuffer)
(37,'\\\\0')
(38,data-1)
(39,dataBuffer[data-1] = \'\\\\0\')
(40,dataBuffer[data-1] = '\\\\0')
(41,\'A\')
(42,dataBuffer == NULL)
(43,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^