-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
40,43
42,43
43,44
45,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
84,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,44,46,51,53,55,57,59,64,67,69,74,75,79,81,85,86,88,92,94
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
48,49
48,50
62,63
62,64
-----guardedBy-----
53,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_17_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(18,11,0)
(6,11,0)
(17,15,0)
(39,38,0)
(40,35,0)
(15,38,0)
(36,0,0)
(8,26,0)
(46,0,0)
(22,25,0)
(44,24,0)
(1,6,0)
(3,7,0)
(34,6,0)
(31,24,0)
(0,38,0)
(20,23,0)
(7,28,0)
(33,1,0)
(31,32,0)
(5,6,0)
(37,25,0)
(23,13,0)
(45,31,0)
(7,5,0)
(12,13,0)
(16,38,0)
(13,23,0)
(19,32,0)
(13,25,0)
(9,1,0)
(35,10,0)
(23,31,0)
(2,6,0)
(23,7,0)
(41,24,0)
(4,5,0)
(25,24,0)
(29,24,0)
(22,13,0)
(23,43,0)
(26,1,0)
(27,22,0)
(21,1,0)
(42,11,0)
(5,7,0)
(11,14,0)
(32,31,0)
(43,23,0)
(1,26,0)
(33,9,1)
(23,43,1)
(5,6,1)
(6,34,1)
(5,4,1)
(12,0,1)
(20,12,1)
(17,7,1)
(22,27,1)
(0,38,1)
(27,13,1)
(2,0,1)
(26,8,1)
(35,40,1)
(21,33,1)
(1,21,1)
(46,15,1)
(23,20,1)
(15,17,1)
(4,3,1)
(31,32,1)
(23,31,1)
(9,6,1)
(40,26,1)
(26,1,1)
(7,5,1)
(15,38,1)
(16,39,1)
(32,19,1)
(3,26,1)
(30,22,1)
(23,7,1)
(19,45,1)
(17,35,1)
(8,1,1)
(22,13,1)
(13,23,1)
(39,31,1)
(0,36,1)
(1,6,1)
(34,2,1)
(46,38,1)
(36,46,1)
(38,16,1)
(15,0,2)
(35,26,2)
(31,32,2)
(36,0,2)
(3,26,2)
(7,26,2)
(1,6,2)
(9,0,2)
(2,0,2)
(23,31,2)
(34,0,2)
(6,0,2)
(13,23,2)
(40,26,2)
(23,7,2)
(4,26,2)
(0,0,2)
(26,1,2)
(8,0,2)
(7,5,2)
(5,26,2)
(15,38,2)
(46,0,2)
(21,0,2)
(23,43,2)
(26,0,2)
(0,38,2)
(17,0,2)
(22,13,2)
(33,0,2)
(5,6,2)
(1,0,2)
-----------------------------------
(0,i < 1)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,inputBuffer)
(3,data)
(4,inputBuffer)
(5,atoi(inputBuffer)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,data = atoi(inputBuffer)
(8,NULL)
(9,inputBuffer)
(10,)
(11,)
(12,charData)
(13,charData = (char)
(14,)
(15,i++)
(16,0)
(17,i)
(18,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,1)
(20,data)
(21,stdin)
(22,printHexCharLine(charData)
(23,(char)
(24,)
(25,)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,charData)
(28,)
(29,i)
(30,RET)
(31,data = -1)
(32,-1)
(33,CHAR_ARRAY_SIZE)
(34,"")
(35,printLine("fgets()
(36,1)
(37,charData)
(38,i = 0)
(39,i)
(40,"fgets()
(41,for(i = 0; i < 1; i++)
(42,inputBuffer)
(43,char)
(44,data)
(45,data)
(46,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^