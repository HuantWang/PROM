-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
63,69
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,66,68,70,73,75,77,79,83,85,86,88,89,94,96,97,98,102,103,108,110,112,114,119,121,122,126,128
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
87,88
87,89
91,92
91,93
95,96
95,97
100,101
100,102
116,117
116,118
-----guardedBy-----
36,56
102,121
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_02_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,25,0)
(32,35,0)
(0,15,0)
(54,30,0)
(52,8,0)
(38,37,0)
(29,6,0)
(7,25,0)
(60,63,0)
(54,36,0)
(14,63,0)
(23,21,0)
(57,21,0)
(47,21,0)
(36,54,0)
(36,4,0)
(42,3,0)
(11,35,0)
(58,40,0)
(24,60,0)
(25,36,0)
(41,33,0)
(44,21,0)
(62,40,0)
(1,30,0)
(65,15,0)
(51,54,0)
(53,40,0)
(18,36,0)
(48,37,0)
(54,51,0)
(45,15,0)
(25,60,0)
(40,10,0)
(19,21,0)
(20,33,0)
(6,42,0)
(37,52,0)
(61,0,0)
(21,63,0)
(55,52,0)
(39,19,0)
(2,10,0)
(27,3,0)
(28,23,0)
(25,19,0)
(37,19,0)
(10,40,0)
(56,6,0)
(33,60,0)
(40,0,0)
(34,0,0)
(33,36,0)
(37,36,0)
(46,63,0)
(42,6,0)
(30,0,0)
(26,42,0)
(5,23,0)
(3,21,0)
(23,35,0)
(37,60,0)
(15,12,0)
(31,16,0)
(22,60,0)
(50,25,0)
(59,19,0)
(64,49,0)
(49,21,0)
(25,8,0)
(49,19,0)
(43,31,0)
(30,54,0)
(35,23,0)
(13,49,1)
(59,31,1)
(11,5,1)
(27,42,1)
(2,40,1)
(19,39,1)
(6,29,1)
(39,59,1)
(40,0,1)
(25,19,1)
(59,17,1)
(36,54,1)
(3,27,1)
(9,7,1)
(33,36,1)
(42,6,1)
(60,24,1)
(38,48,1)
(41,20,1)
(58,0,1)
(25,60,1)
(1,18,1)
(32,11,1)
(54,51,1)
(64,52,1)
(31,43,1)
(49,64,1)
(37,19,1)
(25,9,1)
(30,0,1)
(53,58,1)
(30,1,1)
(64,33,1)
(33,60,1)
(52,55,1)
(24,22,1)
(62,53,1)
(23,35,1)
(25,36,1)
(28,19,1)
(0,61,1)
(34,17,1)
(10,2,1)
(43,10,1)
(26,23,1)
(48,25,1)
(37,36,1)
(29,56,1)
(37,60,1)
(33,41,1)
(18,10,1)
(17,60,1)
(49,19,1)
(7,50,1)
(61,34,1)
(59,36,1)
(40,62,1)
(20,3,1)
(55,37,1)
(35,32,1)
(50,33,1)
(10,40,1)
(54,30,1)
(5,28,1)
(37,38,1)
(56,26,1)
(25,19,2)
(10,17,2)
(25,33,2)
(42,6,2)
(50,33,2)
(55,33,2)
(33,60,2)
(40,17,2)
(53,17,2)
(36,10,2)
(49,19,2)
(61,17,2)
(62,17,2)
(25,60,2)
(34,17,2)
(43,10,2)
(0,17,2)
(52,33,2)
(1,10,2)
(23,35,2)
(40,0,2)
(54,30,2)
(30,10,2)
(7,33,2)
(36,54,2)
(9,33,2)
(54,10,2)
(38,33,2)
(48,33,2)
(18,10,2)
(58,17,2)
(37,19,2)
(30,0,2)
(54,51,2)
(37,33,2)
(10,40,2)
(33,36,2)
(2,17,2)
(25,36,2)
(37,36,2)
(31,10,2)
(37,60,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,inputBuffer)
(2,NULL)
(3,source[100-1] = \\\'\\\\0\\\')
(4,)
(5,\\\'A\\\')
(6,100-1)
(7,source)
(8,)
(9,data)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,100)
(12,)
(13,RET)
(14,if(1)
(15,)
(16,)
(17,1)
(18,data)
(19,dest[100] = "")
(20,data)
(21,)
(22,data)
(23,memset(source, \\\'A\\\', 100-1)
(24,0)
(25,memmove(dest, source, data)
(26,source)
(27,\\\'\\\\0\\\')
(28,source)
(29,1)
(30,atoi(inputBuffer)
(31,printLine("fgets()
(32,1)
(33,data < 100)
(34,inputBuffer)
(35,100-1)
(36,data = (short)
(37,dest[data])
(38,data)
(39,"")
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,100)
(42,source[100-1])
(43,"fgets()
(44,dest)
(45,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,data)
(47,source)
(48,dest)
(49,printLine(dest)
(50,dest)
(51,short)
(52,dest[data] = \\\'\\\\0\\\')
(53,CHAR_ARRAY_SIZE)
(54,(short)
(55,\\\'\\\\0\\\')
(56,100)
(57,if (data < 100)
(58,inputBuffer)
(59,dest)
(60,data = 0)
(61,"")
(62,stdin)
(63,)
(64,dest)
(65,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^