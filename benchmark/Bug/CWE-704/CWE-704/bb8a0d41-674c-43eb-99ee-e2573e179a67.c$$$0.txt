-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_13_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
42,44
42,45
45,46
46,47
46,48
47,48
47,49
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,41,43,44,48,50,53,55,59,61,66,68,72,74,75,78,79,84,87,88,89,93,95,99,101
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
57,58
57,59
76,77
76,78
81,82
81,83
85,86
85,87
-----guardedBy-----
36,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_13_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_13_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_13_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,36,0)
(40,10,0)
(19,52,0)
(45,13,0)
(22,27,0)
(42,25,0)
(32,47,0)
(36,31,0)
(40,22,0)
(49,31,0)
(3,22,0)
(18,47,0)
(19,7,0)
(5,32,0)
(24,15,0)
(44,36,0)
(10,27,0)
(40,18,0)
(18,40,0)
(28,27,0)
(29,19,0)
(8,18,0)
(53,10,0)
(2,18,0)
(43,12,0)
(12,20,0)
(16,27,0)
(47,21,0)
(37,41,0)
(26,32,0)
(12,27,0)
(39,30,0)
(1,21,0)
(47,30,0)
(0,50,0)
(9,25,0)
(25,10,0)
(11,52,0)
(36,10,0)
(53,27,0)
(6,30,0)
(35,20,0)
(13,10,0)
(20,47,0)
(17,19,0)
(12,10,0)
(33,40,0)
(52,19,0)
(31,47,0)
(20,12,0)
(4,15,0)
(34,30,0)
(52,47,0)
(36,44,0)
(23,20,0)
(51,12,0)
(0,41,0)
(41,0,0)
(46,10,0)
(14,53,0)
(21,47,0)
(31,36,0)
(13,27,0)
(38,47,0)
(47,21,1)
(41,37,1)
(52,47,1)
(53,10,1)
(42,9,1)
(33,12,1)
(35,43,1)
(46,32,1)
(3,40,1)
(12,20,1)
(48,53,1)
(8,33,1)
(40,18,1)
(31,49,1)
(15,4,1)
(1,38,1)
(51,0,1)
(24,47,1)
(36,31,1)
(0,41,1)
(18,47,1)
(29,15,1)
(5,26,1)
(19,52,1)
(2,8,1)
(43,51,1)
(25,42,1)
(10,36,1)
(25,10,1)
(32,5,1)
(18,2,1)
(20,23,1)
(37,25,1)
(49,46,1)
(26,19,1)
(23,35,1)
(40,10,1)
(17,29,1)
(12,10,1)
(22,3,1)
(14,13,1)
(21,1,1)
(4,24,1)
(53,14,1)
(48,32,1)
(13,45,1)
(51,25,1)
(20,47,1)
(9,10,1)
(26,15,1)
(13,10,1)
(36,44,1)
(11,17,1)
(32,47,1)
(31,47,1)
(45,22,1)
(52,11,1)
(13,32,2)
(10,32,2)
(47,21,2)
(23,32,2)
(25,10,2)
(25,32,2)
(12,10,2)
(36,31,2)
(31,32,2)
(49,32,2)
(46,32,2)
(2,32,2)
(52,47,2)
(20,32,2)
(12,32,2)
(52,15,2)
(13,10,2)
(40,32,2)
(35,32,2)
(0,25,2)
(32,47,2)
(18,47,2)
(36,44,2)
(53,10,2)
(37,25,2)
(0,41,2)
(42,32,2)
(40,10,2)
(29,15,2)
(12,20,2)
(14,32,2)
(19,15,2)
(8,32,2)
(36,32,2)
(18,32,2)
(51,32,2)
(22,32,2)
(11,15,2)
(9,32,2)
(17,15,2)
(31,47,2)
(20,47,2)
(41,25,2)
(33,32,2)
(53,32,2)
(40,18,2)
(45,32,2)
(19,52,2)
(10,36,2)
(43,32,2)
(3,32,2)
-----------------------------------
(0,exit(-1)
(1,1)
(2,1)
(3,\\\'\\\\0\\\')
(4,5)
(5,100)
(6,data)
(7,)
(8,data)
(9,dataBuffer)
(10,* dataBuffer = (char *)
(11,data)
(12,memset(dataBuffer, \\\'A\\\', data-1)
(13,printLine(dataBuffer)
(14,dataBuffer)
(15,GLOBAL_CONST_FIVE==5)
(16,dataBuffer)
(17,"%d")
(18,data-1)
(19,fscanf(stdin, "%d", &data)
(20,data-1)
(21,-1)
(22,dataBuffer[data-1] = \\\'\\\\0\\\')
(23,1)
(24,GLOBAL_CONST_FIVE)
(25,dataBuffer == NULL)
(26,data)
(27,)
(28,if (dataBuffer == NULL)
(29,stdin)
(30,)
(31,malloc(data)
(32,data < 100)
(33,dataBuffer)
(34,if (data < 100)
(35,data)
(36,(char *)
(37,1)
(38,data)
(39,if(GLOBAL_CONST_FIVE==5)
(40,dataBuffer[data-1])
(41,-1)
(42,NULL)
(43,\\\'A\\\')
(44,char *)
(45,dataBuffer)
(46,dataBuffer)
(47,data = -1)
(48,RET)
(49,data)
(50,)
(51,dataBuffer)
(52,&data)
(53,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^