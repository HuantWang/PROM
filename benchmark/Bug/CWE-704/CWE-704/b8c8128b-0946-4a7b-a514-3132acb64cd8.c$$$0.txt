-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
46,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,36,37,41,43,47,48,50,54,56
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_short_12_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_short_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(9,10,0)
(8,12,0)
(20,11,0)
(8,7,0)
(12,25,0)
(5,11,0)
(24,4,0)
(12,17,0)
(7,8,0)
(10,2,0)
(1,8,0)
(3,12,0)
(6,10,0)
(10,9,0)
(15,23,0)
(0,9,0)
(8,10,0)
(11,23,0)
(5,7,0)
(21,5,0)
(4,24,0)
(16,9,0)
(14,23,0)
(22,4,0)
(27,24,0)
(13,7,0)
(25,12,0)
(18,8,0)
(7,11,0)
(24,23,0)
(8,18,0)
(7,8,1)
(8,18,1)
(5,7,1)
(22,27,1)
(6,19,1)
(21,7,1)
(8,10,1)
(25,3,1)
(16,0,1)
(19,24,1)
(0,6,1)
(3,19,1)
(13,12,1)
(24,4,1)
(26,5,1)
(10,9,1)
(1,13,1)
(8,1,1)
(5,21,1)
(12,25,1)
(4,22,1)
(13,10,1)
(8,12,1)
(9,16,1)
(8,18,2)
(3,19,2)
(16,19,2)
(0,19,2)
(24,4,2)
(8,12,2)
(10,9,2)
(5,7,2)
(9,19,2)
(8,10,2)
(12,19,2)
(12,25,2)
(7,8,2)
(10,19,2)
(6,19,2)
(25,19,2)
-----------------------------------
(0,CHAR_MAX)
(1,data)
(2,)
(3,data)
(4,-1)
(5,printShortLine(shortData)
(6,data)
(7,shortData = (short)
(8,(short)
(9,CHAR_MAX-5)
(10,data = CHAR_MAX-5)
(11,)
(12,data = RAND32()
(13,shortData)
(14,if(globalReturnsTrueOrFalse()
(15,data)
(16,5)
(17,)
(18,short)
(19,globalReturnsTrueOrFalse()
(20,shortData)
(21,shortData)
(22,1)
(23,)
(24,data = -1)
(25,RAND32()
(26,RET)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^