-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,6,0)
(39,33,0)
(5,30,0)
(16,33,0)
(10,15,0)
(3,27,0)
(4,36,0)
(6,15,0)
(27,33,0)
(43,2,0)
(38,2,0)
(26,32,0)
(0,2,0)
(42,13,0)
(1,17,0)
(13,2,0)
(29,20,0)
(21,33,0)
(24,27,0)
(36,20,0)
(27,20,0)
(41,9,0)
(17,23,0)
(20,33,0)
(31,9,0)
(44,43,0)
(29,33,0)
(27,43,0)
(6,20,0)
(39,20,0)
(12,13,0)
(22,33,0)
(43,27,0)
(23,17,0)
(2,30,0)
(34,30,0)
(8,32,0)
(32,2,0)
(23,18,0)
(19,43,0)
(25,6,0)
(13,36,0)
(6,25,0)
(35,16,0)
(15,2,0)
(11,29,0)
(36,16,0)
(14,20,0)
(20,6,0)
(46,39,0)
(9,20,0)
(36,13,0)
(39,46,1)
(14,32,1)
(19,44,1)
(1,9,1)
(29,11,1)
(36,13,1)
(20,6,1)
(6,25,1)
(15,10,1)
(31,20,1)
(42,12,1)
(24,9,1)
(29,20,1)
(13,42,1)
(4,27,1)
(2,0,1)
(9,41,1)
(11,39,1)
(43,19,1)
(39,20,1)
(9,20,1)
(32,8,1)
(0,38,1)
(13,2,1)
(17,1,1)
(3,24,1)
(27,20,1)
(23,17,1)
(36,20,1)
(15,2,1)
(46,16,1)
(10,14,1)
(6,15,1)
(32,2,1)
(41,31,1)
(26,2,1)
(12,4,1)
(35,36,1)
(16,35,1)
(43,2,1)
(27,43,1)
(45,29,1)
(45,32,1)
(44,3,1)
(24,23,1)
(8,26,1)
(29,32,2)
(9,20,2)
(11,32,2)
(31,32,2)
(24,32,2)
(1,9,2)
(36,20,2)
(41,32,2)
(6,32,2)
(39,32,2)
(36,32,2)
(44,32,2)
(27,32,2)
(10,32,2)
(15,32,2)
(23,17,2)
(36,13,2)
(29,20,2)
(12,32,2)
(27,20,2)
(6,15,2)
(20,32,2)
(3,32,2)
(14,32,2)
(6,25,2)
(20,6,2)
(46,32,2)
(17,9,2)
(39,20,2)
(9,32,2)
(15,2,2)
(27,43,2)
(19,32,2)
(13,2,2)
(13,32,2)
(43,32,2)
(42,32,2)
(43,2,2)
(23,9,2)
(16,32,2)
(35,32,2)
(32,2,2)
(4,32,2)
-----------------------------------
(0,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData)
(1,1)
(2,data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_45_badData)
(3,\'A\')
(4,dataBuffer)
(5,if (data < 100)
(6,(char *)
(7,'A')
(8,100)
(9,dataBuffer == NULL)
(10,data)
(11,dataBuffer)
(12,data)
(13,data-1)
(14,dataBuffer)
(15,malloc(data)
(16,dataBuffer[data-1] = '\\\\0')
(17,-1)
(18,)
(19,1)
(20,* dataBuffer = (char *)
(21,if (dataBuffer == NULL)
(22,dataBuffer)
(23,exit(-1)
(24,dataBuffer)
(25,char *)
(26,data)
(27,memset(dataBuffer, \'A\', data-1)
(28,dataBuffer[data-1] = \'\\\\0\')
(29,free(dataBuffer)
(30,)
(31,dataBuffer)
(32,data < 100)
(33,)
(34,data)
(35,\'\\\\0\')
(36,dataBuffer[data-1])
(37,'\\\\0')
(38,data)
(39,printLine(dataBuffer)
(40,memset(dataBuffer, 'A', data-1)
(41,NULL)
(42,1)
(43,data-1)
(44,data)
(45,RET)
(46,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^