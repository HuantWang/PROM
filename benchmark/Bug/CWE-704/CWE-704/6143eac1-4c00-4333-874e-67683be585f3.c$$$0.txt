-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_65b_badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_65b_badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_65b_badSink(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_65b_badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(35,7,0)
(43,42,0)
(43,7,0)
(25,42,0)
(34,6,0)
(3,5,0)
(6,7,0)
(11,30,0)
(42,25,0)
(34,37,0)
(29,20,0)
(36,2,0)
(6,43,0)
(14,34,0)
(18,34,0)
(30,15,0)
(19,15,0)
(33,13,0)
(15,12,0)
(1,7,0)
(42,43,0)
(22,43,0)
(20,43,0)
(38,6,0)
(20,7,0)
(2,43,0)
(8,0,0)
(0,42,0)
(23,43,0)
(5,26,0)
(15,43,0)
(12,7,0)
(26,41,0)
(39,13,0)
(22,7,0)
(26,5,0)
(40,22,0)
(10,12,0)
(13,37,0)
(17,2,0)
(15,30,0)
(4,6,0)
(42,0,0)
(9,30,0)
(27,28,0)
(0,37,0)
(6,34,0)
(30,37,0)
(2,43,1)
(34,37,1)
(12,10,1)
(0,8,1)
(15,43,1)
(39,33,1)
(26,5,1)
(2,17,1)
(19,6,1)
(4,38,1)
(40,20,1)
(5,3,1)
(15,30,1)
(8,23,1)
(42,0,1)
(17,36,1)
(22,40,1)
(9,19,1)
(14,18,1)
(22,43,1)
(30,37,1)
(3,2,1)
(13,39,1)
(43,42,1)
(6,43,1)
(18,4,1)
(23,13,1)
(34,14,1)
(29,12,1)
(10,15,1)
(20,29,1)
(30,11,1)
(21,22,1)
(11,9,1)
(36,43,1)
(38,26,1)
(42,25,1)
(6,34,1)
(21,13,1)
(13,37,1)
(38,2,1)
(20,43,1)
(0,37,1)
(4,13,2)
(10,13,2)
(34,37,2)
(15,30,2)
(8,13,2)
(2,43,2)
(18,13,2)
(0,37,2)
(42,13,2)
(38,13,2)
(15,43,2)
(43,42,2)
(22,43,2)
(6,34,2)
(30,37,2)
(12,13,2)
(11,13,2)
(42,25,2)
(0,13,2)
(34,13,2)
(36,13,2)
(6,13,2)
(26,2,2)
(9,13,2)
(42,0,2)
(2,13,2)
(3,2,2)
(29,13,2)
(5,2,2)
(23,13,2)
(20,13,2)
(17,13,2)
(40,13,2)
(22,13,2)
(6,43,2)
(20,43,2)
(19,13,2)
(15,13,2)
(26,5,2)
(14,13,2)
(13,37,2)
(30,13,2)
(43,13,2)
-----------------------------------
(0,malloc(data)
(1,dataBuffer)
(2,dataBuffer == NULL)
(3,1)
(4,\'A\')
(5,-1)
(6,memset(dataBuffer, \'A\', data-1)
(7,)
(8,data)
(9,data)
(10,'\\\\0')
(11,1)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,data < 100)
(14,1)
(15,dataBuffer[data-1])
(16,\'\\\\0\')
(17,NULL)
(18,data)
(19,dataBuffer)
(20,printLine(dataBuffer)
(21,RET)
(22,free(dataBuffer)
(23,dataBuffer)
(24,'A')
(25,char *)
(26,exit(-1)
(27,if (data < 100)
(28,)
(29,dataBuffer)
(30,data-1)
(31,memset(dataBuffer, 'A', data-1)
(32,dataBuffer[data-1] = '\\\\0')
(33,data)
(34,data-1)
(35,if (dataBuffer == NULL)
(36,dataBuffer)
(37,int data)
(38,dataBuffer)
(39,100)
(40,dataBuffer)
(41,)
(42,(char *)
(43,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^