-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_09_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(48,30,0)
(2,11,0)
(63,57,0)
(49,46,0)
(37,56,0)
(33,27,0)
(52,19,0)
(18,55,0)
(19,57,0)
(11,10,0)
(3,40,0)
(23,2,0)
(24,11,0)
(4,18,0)
(62,2,0)
(8,37,0)
(38,1,0)
(17,55,0)
(64,48,0)
(63,40,0)
(32,24,0)
(61,24,0)
(5,18,0)
(12,33,0)
(2,47,0)
(58,2,0)
(9,56,0)
(13,38,0)
(11,36,0)
(43,59,0)
(46,41,0)
(46,11,0)
(60,56,0)
(0,63,0)
(56,37,0)
(54,55,0)
(33,7,0)
(10,11,0)
(40,63,0)
(44,27,0)
(7,33,0)
(46,59,0)
(27,55,0)
(41,28,0)
(57,48,0)
(15,11,0)
(21,18,0)
(53,37,0)
(20,41,0)
(56,55,0)
(2,41,0)
(25,28,0)
(51,57,0)
(5,55,0)
(35,28,0)
(24,41,0)
(31,48,0)
(42,7,0)
(29,10,0)
(59,47,0)
(55,28,0)
(10,29,0)
(2,18,0)
(45,5,0)
(26,7,0)
(34,63,0)
(10,19,0)
(19,10,0)
(14,46,0)
(22,41,0)
(39,63,0)
(6,57,0)
(65,55,0)
(46,18,0)
(46,41,1)
(8,60,1)
(16,41,1)
(24,41,1)
(56,37,1)
(46,14,1)
(32,61,1)
(62,23,1)
(42,12,1)
(50,5,1)
(6,16,1)
(45,59,1)
(46,11,1)
(63,57,1)
(37,53,1)
(46,18,1)
(51,6,1)
(58,24,1)
(38,13,1)
(39,57,1)
(24,32,1)
(53,8,1)
(20,22,1)
(2,62,1)
(21,38,1)
(26,42,1)
(61,27,1)
(52,15,1)
(27,44,1)
(11,10,1)
(24,11,1)
(43,46,1)
(21,11,1)
(10,29,1)
(19,52,1)
(57,51,1)
(59,43,1)
(40,3,1)
(10,19,1)
(3,63,1)
(4,21,1)
(44,33,1)
(14,49,1)
(9,18,1)
(19,57,1)
(7,26,1)
(2,11,1)
(5,45,1)
(41,20,1)
(23,58,1)
(2,41,1)
(0,39,1)
(63,34,1)
(49,2,1)
(13,40,1)
(2,18,1)
(12,56,1)
(15,40,1)
(21,16,1)
(34,0,1)
(18,4,1)
(60,9,1)
(33,7,1)
(40,63,1)
(5,18,1)
(45,24,1)
(57,16,2)
(46,24,2)
(10,40,2)
(2,18,2)
(33,7,2)
(2,11,2)
(11,10,2)
(23,24,2)
(51,16,2)
(62,24,2)
(5,18,2)
(40,16,2)
(43,24,2)
(46,11,2)
(3,16,2)
(10,29,2)
(11,40,2)
(24,41,2)
(38,40,2)
(56,37,2)
(63,16,2)
(59,24,2)
(39,16,2)
(63,57,2)
(19,40,2)
(40,63,2)
(24,11,2)
(13,40,2)
(2,24,2)
(46,41,2)
(2,41,2)
(0,16,2)
(19,57,2)
(58,24,2)
(49,24,2)
(52,40,2)
(10,19,2)
(6,16,2)
(15,40,2)
(14,24,2)
(46,18,2)
(34,16,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,)
(2,memcpy(dest, source, data)
(3,NULL)
(4,"")
(5,printLine(dest)
(6,inputBuffer)
(7,100-1)
(8,100)
(9,source)
(10,(short)
(11,data = (short)
(12,source)
(13,"fgets()
(14,data)
(15,data)
(16,GLOBAL_CONST_TRUE)
(17,dest)
(18,dest[100] = "")
(19,atoi(inputBuffer)
(20,0)
(21,dest)
(22,data)
(23,source)
(24,data < 100)
(25,if(GLOBAL_CONST_TRUE)
(26,1)
(27,source[100-1] = \\\'\\\\0\\\')
(28,)
(29,short)
(30,)
(31,inputBuffer)
(32,100)
(33,source[100-1])
(34,stdin)
(35,data)
(36,)
(37,100-1)
(38,printLine("fgets()
(39,inputBuffer)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,data = 0)
(42,100)
(43,\\\'\\\\0\\\')
(44,\\\'\\\\0\\\')
(45,dest)
(46,dest[data])
(47,)
(48,)
(49,dest)
(50,RET)
(51,"")
(52,inputBuffer)
(53,1)
(54,if (data < 100)
(55,)
(56,memset(source, \\\'A\\\', 100-1)
(57,inputBuffer[CHAR_ARRAY_SIZE] = "")
(58,dest)
(59,dest[data] = \\\'\\\\0\\\')
(60,\\\'A\\\')
(61,data)
(62,data)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(64,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^