-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int dataCopy = data;
        int data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
79,82
79,83
79,84
79,85
80,81
81,82
81,83
83,84
83,85
83,86
86,87
87,88
87,89
88,89
88,90
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
111,114
111,115
112,113
114,115
117,118
117,119
118,119
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
131,132
132,133
132,134
133,134
135,136
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,77,78,82,84,85,89,91,94,96,100,102,107,109,113,115,116,119,120,125,128,129,130,134,136,140,142
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
75,76
75,77
98,99
98,100
117,118
117,119
122,123
122,124
126,127
126,128
-----guardedBy-----
34,50
77,128
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_31_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_31_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(57,29,0)
(19,16,0)
(42,31,0)
(59,41,0)
(47,71,0)
(54,7,0)
(65,15,0)
(15,54,0)
(35,49,0)
(40,33,0)
(72,49,0)
(26,13,0)
(33,53,0)
(67,8,0)
(33,40,0)
(66,35,0)
(13,26,0)
(9,41,0)
(52,40,0)
(34,71,0)
(36,16,0)
(45,4,0)
(30,51,0)
(17,7,0)
(41,71,0)
(51,35,0)
(38,51,0)
(10,29,0)
(58,26,0)
(54,46,0)
(20,8,0)
(57,51,0)
(6,33,0)
(5,53,0)
(31,1,0)
(44,10,0)
(20,43,0)
(51,57,0)
(27,9,0)
(29,26,0)
(2,63,0)
(4,71,0)
(48,8,0)
(37,57,0)
(35,15,0)
(50,43,0)
(7,54,0)
(1,31,0)
(43,20,0)
(63,29,0)
(26,29,0)
(12,49,0)
(3,20,0)
(9,29,0)
(8,5,0)
(22,56,0)
(7,8,0)
(39,58,0)
(56,21,0)
(69,35,0)
(23,29,0)
(61,49,0)
(26,58,0)
(16,35,0)
(24,53,0)
(55,57,0)
(4,29,0)
(28,60,0)
(11,5,0)
(15,33,0)
(29,71,0)
(25,54,0)
(70,5,0)
(57,71,0)
(62,15,0)
(63,71,0)
(32,10,0)
(49,53,0)
(58,35,0)
(15,49,0)
(14,60,0)
(1,0,0)
(16,9,0)
(68,20,0)
(18,20,0)
(9,16,0)
(60,35,0)
(1,31,1)
(4,45,1)
(4,29,1)
(48,67,1)
(8,48,1)
(43,20,1)
(3,8,1)
(36,27,1)
(58,39,1)
(2,4,1)
(69,66,1)
(20,18,1)
(27,57,1)
(16,35,1)
(62,56,1)
(10,44,1)
(28,14,1)
(17,25,1)
(62,54,1)
(23,60,1)
(32,29,1)
(25,43,1)
(60,35,1)
(15,33,1)
(15,54,1)
(30,37,1)
(52,6,1)
(65,62,1)
(41,59,1)
(9,16,1)
(7,17,1)
(39,23,1)
(18,68,1)
(54,7,1)
(44,32,1)
(16,19,1)
(26,13,1)
(55,1,1)
(22,43,1)
(66,15,1)
(43,50,1)
(9,29,1)
(33,40,1)
(59,9,1)
(35,69,1)
(64,63,1)
(67,33,1)
(40,52,1)
(68,3,1)
(60,28,1)
(45,41,1)
(26,58,1)
(10,29,1)
(56,22,1)
(15,65,1)
(20,8,1)
(19,36,1)
(57,51,1)
(63,29,1)
(35,15,1)
(51,38,1)
(38,30,1)
(55,10,1)
(29,26,1)
(51,35,1)
(63,2,1)
(7,8,1)
(58,35,1)
(42,10,1)
(31,42,1)
(37,55,1)
(14,35,1)
(64,60,1)
(50,20,1)
(57,29,1)
(42,10,2)
(37,60,2)
(4,60,2)
(57,29,2)
(4,29,2)
(56,43,2)
(26,60,2)
(9,29,2)
(59,60,2)
(26,13,2)
(16,35,2)
(15,33,2)
(30,60,2)
(58,60,2)
(7,8,2)
(57,51,2)
(16,60,2)
(60,35,2)
(20,8,2)
(10,29,2)
(1,31,2)
(27,60,2)
(29,60,2)
(23,60,2)
(44,60,2)
(15,54,2)
(2,60,2)
(32,60,2)
(10,60,2)
(17,43,2)
(7,43,2)
(45,60,2)
(63,29,2)
(33,40,2)
(36,60,2)
(1,10,2)
(19,60,2)
(55,60,2)
(43,20,2)
(35,15,2)
(54,43,2)
(25,43,2)
(58,35,2)
(54,7,2)
(31,10,2)
(38,60,2)
(39,60,2)
(57,60,2)
(41,60,2)
(63,60,2)
(22,43,2)
(51,35,2)
(9,16,2)
(29,26,2)
(26,58,2)
(51,60,2)
(9,60,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,dataBuffer)
(3,inputBuffer)
(4,printLine(dataBuffer)
(5,)
(6,data)
(7,atoi(inputBuffer)
(8,inputBuffer[CHAR_ARRAY_SIZE] = "")
(9,dataBuffer[data-1])
(10,dataBuffer == NULL)
(11,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,dataCopy)
(13,char *)
(14,data)
(15,dataCopy = data)
(16,data-1)
(17,inputBuffer)
(18,stdin)
(19,1)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,)
(22,"fgets()
(23,dataBuffer)
(24,data)
(25,data)
(26,(char *)
(27,dataBuffer)
(28,100)
(29,* dataBuffer = (char *)
(30,data)
(31,-1)
(32,dataBuffer)
(33,data = -1)
(34,if (dataBuffer == NULL)
(35,data = dataCopy)
(36,data)
(37,\\\'A\\\')
(38,1)
(39,data)
(40,-1)
(41,dataBuffer[data-1] = \\\'\\\\0\\\')
(42,1)
(43,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,NULL)
(45,dataBuffer)
(46,)
(47,dataBuffer)
(48,"")
(49,)
(50,NULL)
(51,data-1)
(52,1)
(53,)
(54,data = atoi(inputBuffer)
(55,dataBuffer)
(56,printLine("fgets()
(57,memset(dataBuffer, \\\'A\\\', data-1)
(58,malloc(data)
(59,\\\'\\\\0\\\')
(60,data < 100)
(61,if (data < 100)
(62,dataCopy)
(63,free(dataBuffer)
(64,RET)
(65,data)
(66,data)
(67,inputBuffer)
(68,CHAR_ARRAY_SIZE)
(69,dataCopy)
(70,inputBuffer)
(71,)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^