-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
41,44
41,45
41,46
41,47
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
84,85
84,86
84,87
84,88
85,86
87,88
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,14,16,20,23,27,29,32,35,37,40,44,46,48,51,53,55,57,61,63,64,66,67,72,74,75,76,80,81,86,88,90,92,97,99,100,104,106
-----computeFrom-----
12,13
12,14
18,19
18,20
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
94,95
94,96
-----guardedBy-----
80,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_31_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_31_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(25,24,0)
(29,41,0)
(23,16,0)
(10,3,0)
(20,16,0)
(24,41,0)
(3,16,0)
(1,7,0)
(46,3,0)
(52,4,0)
(48,10,0)
(35,21,0)
(19,41,0)
(26,12,0)
(8,11,0)
(10,48,0)
(39,28,0)
(9,28,0)
(28,16,0)
(34,21,0)
(21,32,0)
(13,48,0)
(43,22,0)
(37,32,0)
(11,28,0)
(30,22,0)
(11,36,0)
(22,43,0)
(15,16,0)
(40,39,0)
(38,4,0)
(0,50,0)
(32,4,0)
(19,50,0)
(32,6,0)
(21,52,0)
(19,28,0)
(51,24,0)
(14,52,0)
(42,43,0)
(5,41,0)
(17,43,0)
(43,16,0)
(47,28,0)
(39,16,0)
(18,10,0)
(7,12,0)
(16,52,0)
(50,36,0)
(53,52,0)
(27,19,0)
(2,22,0)
(11,41,0)
(44,48,0)
(7,4,0)
(33,11,0)
(41,21,0)
(6,32,0)
(12,7,0)
(45,11,0)
(49,19,0)
(41,52,0)
(5,21,1)
(17,28,1)
(48,44,1)
(40,24,1)
(37,7,1)
(8,33,1)
(19,41,1)
(24,41,1)
(30,42,1)
(11,45,1)
(19,27,1)
(41,21,1)
(43,22,1)
(40,50,1)
(47,41,1)
(31,39,1)
(26,1,1)
(46,10,1)
(0,19,1)
(25,51,1)
(11,28,1)
(10,48,1)
(45,8,1)
(39,40,1)
(41,29,1)
(29,5,1)
(49,11,1)
(19,28,1)
(51,3,1)
(6,37,1)
(18,43,1)
(33,24,1)
(21,32,1)
(21,35,1)
(27,49,1)
(9,47,1)
(28,9,1)
(11,41,1)
(39,28,1)
(2,30,1)
(44,13,1)
(3,46,1)
(35,34,1)
(34,32,1)
(32,6,1)
(7,12,1)
(42,17,1)
(13,18,1)
(50,0,1)
(22,2,1)
(24,25,1)
(12,26,1)
(33,24,2)
(32,6,2)
(39,28,2)
(50,24,2)
(24,41,2)
(8,24,2)
(7,12,2)
(0,24,2)
(45,24,2)
(11,41,2)
(10,48,2)
(11,24,2)
(19,24,2)
(19,28,2)
(19,41,2)
(43,22,2)
(27,24,2)
(49,24,2)
(41,21,2)
(11,28,2)
(21,32,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,data)
(2,1)
(3,source[100-1] = \\\'\\\\0\\\')
(4,)
(5,data)
(6,RAND32()
(7,data = -1)
(8,source)
(9,"")
(10,source[100-1])
(11,memmove(dest, source, data)
(12,-1)
(13,100)
(14,data)
(15,if (data < 100)
(16,)
(17,source)
(18,source)
(19,dest[data])
(20,dest)
(21,dataCopy = data)
(22,100-1)
(23,source)
(24,data < 100)
(25,100)
(26,1)
(27,data)
(28,dest[100] = "")
(29,dataCopy)
(30,100)
(31,RET)
(32,data = RAND32()
(33,dest)
(34,dataCopy)
(35,data)
(36,)
(37,data)
(38,data)
(39,printLine(dest)
(40,dest)
(41,data = dataCopy)
(42,\\\'A\\\')
(43,memset(source, \\\'A\\\', 100-1)
(44,1)
(45,data)
(46,\\\'\\\\0\\\')
(47,dest)
(48,100-1)
(49,dest)
(50,dest[data] = \\\'\\\\0\\\')
(51,data)
(52,)
(53,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^