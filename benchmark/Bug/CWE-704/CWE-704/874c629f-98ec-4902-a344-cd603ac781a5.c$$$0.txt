-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_68b_badSink()
{
    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_68b_badSink(){    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_68b_badSink()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_68b_badSink
{    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData;
short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData;
short
data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData
data
= CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData
CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData
CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(33,36,0)
(42,27,0)
(7,4,0)
(26,41,0)
(21,14,0)
(32,4,0)
(36,28,0)
(13,37,0)
(31,6,0)
(3,24,0)
(44,24,0)
(41,1,0)
(1,41,0)
(6,23,0)
(12,32,0)
(17,44,0)
(9,36,0)
(14,24,0)
(38,6,0)
(42,36,0)
(23,6,0)
(4,34,0)
(43,34,0)
(27,40,0)
(37,34,0)
(9,32,0)
(32,9,0)
(27,24,0)
(8,2,0)
(14,34,0)
(37,24,0)
(24,27,0)
(15,44,0)
(23,36,0)
(6,24,0)
(40,27,0)
(27,42,0)
(6,34,0)
(22,9,0)
(24,34,0)
(29,23,0)
(30,23,0)
(2,36,0)
(18,36,0)
(1,5,0)
(35,9,0)
(46,28,0)
(16,2,0)
(19,28,0)
(11,34,0)
(20,42,0)
(32,24,0)
(36,18,1)
(27,40,1)
(9,22,1)
(13,4,1)
(17,15,1)
(35,12,1)
(42,20,1)
(8,16,1)
(6,23,1)
(16,36,1)
(15,24,1)
(3,2,1)
(24,27,1)
(4,7,1)
(9,36,1)
(27,42,1)
(18,33,1)
(37,24,1)
(14,21,1)
(37,13,1)
(23,36,1)
(38,31,1)
(2,8,1)
(2,36,1)
(12,6,1)
(0,2,1)
(29,30,1)
(22,35,1)
(42,36,1)
(26,44,1)
(21,37,1)
(31,44,1)
(14,24,1)
(0,14,1)
(32,9,1)
(31,1,1)
(20,3,1)
(41,26,1)
(23,29,1)
(32,24,1)
(44,24,1)
(6,24,1)
(7,32,1)
(30,38,1)
(44,17,1)
(1,41,1)
(12,2,2)
(1,41,2)
(29,2,2)
(32,24,2)
(41,44,2)
(6,23,2)
(24,27,2)
(32,9,2)
(7,2,2)
(27,2,2)
(27,42,2)
(44,2,2)
(37,2,2)
(6,2,2)
(23,36,2)
(4,2,2)
(17,2,2)
(31,2,2)
(23,2,2)
(9,36,2)
(1,44,2)
(26,44,2)
(24,2,2)
(37,24,2)
(35,2,2)
(42,2,2)
(20,2,2)
(27,40,2)
(32,2,2)
(30,2,2)
(42,36,2)
(6,24,2)
(15,2,2)
(22,2,2)
(13,2,2)
(2,36,2)
(9,2,2)
(44,24,2)
(14,2,2)
(21,2,2)
(3,2,2)
(14,24,2)
(38,2,2)
-----------------------------------
(0,RET)
(1,exit(-1)
(2,data < 100)
(3,dataBuffer)
(4,dataBuffer[data-1] = '\\\\0')
(5,)
(6,memset(dataBuffer, 'A', data-1)
(7,\'\\\\0\')
(8,100)
(9,data-1)
(10,'\\\\0')
(11,if (dataBuffer == NULL)
(12,dataBuffer)
(13,dataBuffer)
(14,free(dataBuffer)
(15,dataBuffer)
(16,data)
(17,NULL)
(18,CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData)
(19,if (data < 100)
(20,data)
(21,dataBuffer)
(22,1)
(23,data-1)
(24,* dataBuffer = (char *)
(25,memset(dataBuffer, \'A\', data-1)
(26,1)
(27,(char *)
(28,)
(29,1)
(30,data)
(31,dataBuffer)
(32,dataBuffer[data-1])
(33,data)
(34,)
(35,data)
(36,data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_68_badData)
(37,printLine(dataBuffer)
(38,'A')
(39,dataBuffer[data-1] = \'\\\\0\')
(40,char *)
(41,-1)
(42,malloc(data)
(43,dataBuffer)
(44,dataBuffer == NULL)
(45,\'A\')
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^