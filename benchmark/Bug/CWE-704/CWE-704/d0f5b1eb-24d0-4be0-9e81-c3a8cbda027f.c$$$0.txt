-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_strncpy_15_bad()
CWE194_Unexpected_Sign_Extension__negative_strncpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(26,27,0)
(51,5,0)
(8,28,0)
(34,25,0)
(36,16,0)
(53,28,0)
(1,35,0)
(16,7,0)
(46,40,0)
(22,29,0)
(41,38,0)
(37,44,0)
(5,51,0)
(38,40,0)
(35,29,0)
(23,47,0)
(18,51,0)
(50,48,0)
(42,44,0)
(47,44,0)
(0,29,0)
(32,49,0)
(27,44,0)
(2,5,0)
(25,35,0)
(7,48,0)
(11,47,0)
(39,27,0)
(38,19,0)
(47,4,0)
(45,28,0)
(24,40,0)
(44,28,0)
(30,28,0)
(40,38,0)
(9,51,0)
(25,29,0)
(19,29,0)
(47,35,0)
(21,5,0)
(6,7,0)
(29,48,0)
(13,48,0)
(16,44,0)
(12,52,0)
(43,35,0)
(16,52,0)
(49,28,0)
(52,4,0)
(31,7,0)
(14,16,0)
(16,35,0)
(15,19,0)
(51,29,0)
(27,7,0)
(20,42,0)
(47,7,0)
(33,47,0)
(44,42,0)
(3,29,0)
(51,5,1)
(37,17,1)
(43,1,1)
(35,43,1)
(32,17,1)
(12,16,1)
(34,27,1)
(1,45,1)
(46,41,1)
(41,51,1)
(5,2,1)
(36,47,1)
(11,33,1)
(17,7,1)
(2,21,1)
(27,7,1)
(45,49,1)
(26,19,1)
(27,44,1)
(18,9,1)
(7,6,1)
(33,27,1)
(9,35,1)
(23,11,1)
(34,52,1)
(49,32,1)
(21,18,1)
(19,15,1)
(24,46,1)
(40,24,1)
(42,20,1)
(10,25,1)
(39,26,1)
(15,38,1)
(6,31,1)
(25,34,1)
(20,37,1)
(52,12,1)
(47,44,1)
(44,42,1)
(47,7,1)
(25,35,1)
(38,40,1)
(47,23,1)
(1,8,1)
(14,36,1)
(16,7,1)
(27,39,1)
(8,44,1)
(16,14,1)
(47,35,1)
(16,44,1)
(16,35,1)
(11,27,2)
(36,27,2)
(49,17,2)
(16,27,2)
(16,35,2)
(23,27,2)
(12,27,2)
(27,7,2)
(47,27,2)
(47,7,2)
(47,35,2)
(33,27,2)
(20,17,2)
(47,44,2)
(32,17,2)
(8,17,2)
(52,27,2)
(27,44,2)
(25,35,2)
(44,17,2)
(14,27,2)
(16,44,2)
(45,17,2)
(42,17,2)
(51,5,2)
(16,7,2)
(44,42,2)
(38,40,2)
(37,17,2)
-----------------------------------
(0,source)
(1,dest)
(2,1)
(3,if (data < 100)
(4,)
(5,100-1)
(6,0)
(7,data = 0)
(8,break;)
(9,source)
(10,RET)
(11,source)
(12,\\\'\\\\0\\\')
(13,switch(6)
(14,data)
(15,\\\'\\\\0\\\')
(16,dest[data])
(17,6)
(18,\\\'A\\\')
(19,source[100-1] = \\\'\\\\0\\\')
(20,1)
(21,100)
(22,dest)
(23,data)
(24,1)
(25,printLine(dest)
(26,data)
(27,data < 100)
(28,)
(29,)
(30,default:)
(31,data)
(32,"Benign, fixed string")
(33,dest)
(34,dest)
(35,dest[100] = "")
(36,dest)
(37,data)
(38,source[100-1])
(39,100)
(40,100-1)
(41,source)
(42,-1)
(43,"")
(44,data = -1)
(45,break;)
(46,100)
(47,strncpy(dest, source, data)
(48,)
(49,printLine("Benign, fixed string")
(50,data)
(51,memset(source, \\\'A\\\', 100-1)
(52,dest[data] = \\\'\\\\0\\\')
(53,case 6:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^