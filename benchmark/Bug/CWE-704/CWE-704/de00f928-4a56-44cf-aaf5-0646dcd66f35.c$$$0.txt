-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,65,67,70,72,74,76,80,82,83,85,86,91,93,94,95,99,100,105,107,109,111,116,118,119,123,125
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
84,85
84,86
88,89
88,90
92,93
92,94
97,98
97,99
113,114
113,115
-----guardedBy-----
33,53
99,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_01_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_01_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_01_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(38,2,0)
(26,57,0)
(46,12,0)
(38,19,0)
(22,21,0)
(32,57,0)
(27,2,0)
(19,38,0)
(21,62,0)
(35,2,0)
(12,9,0)
(57,40,0)
(21,47,0)
(51,56,0)
(48,12,0)
(54,8,0)
(9,37,0)
(49,37,0)
(6,21,0)
(55,19,0)
(59,0,0)
(28,59,0)
(59,24,0)
(8,2,0)
(51,24,0)
(2,37,0)
(20,54,0)
(25,38,0)
(44,2,0)
(53,19,0)
(59,9,0)
(33,59,0)
(60,31,0)
(14,60,0)
(11,49,0)
(57,24,0)
(0,40,0)
(13,8,0)
(31,60,0)
(3,47,0)
(36,24,0)
(15,51,0)
(56,51,0)
(61,49,0)
(30,60,0)
(57,8,0)
(62,21,0)
(39,37,0)
(24,51,0)
(23,57,0)
(58,9,0)
(17,47,0)
(41,8,0)
(31,10,0)
(34,9,0)
(24,50,0)
(56,47,0)
(57,9,0)
(10,2,0)
(54,2,0)
(1,31,0)
(47,49,0)
(29,0,0)
(45,21,0)
(59,8,0)
(43,18,0)
(42,38,0)
(52,43,0)
(7,56,0)
(4,10,0)
(51,15,0)
(12,24,0)
(5,62,0)
(21,6,1)
(25,42,1)
(29,59,1)
(12,48,1)
(12,9,1)
(59,8,1)
(57,9,1)
(30,1,1)
(57,8,1)
(22,47,1)
(10,4,1)
(13,43,1)
(12,24,1)
(42,8,1)
(4,31,1)
(59,24,1)
(60,14,1)
(23,26,1)
(21,47,1)
(20,12,1)
(47,3,1)
(51,56,1)
(38,19,1)
(46,10,1)
(7,36,1)
(26,12,1)
(54,20,1)
(36,62,1)
(17,9,1)
(59,33,1)
(33,28,1)
(16,54,1)
(6,45,1)
(0,29,1)
(55,25,1)
(19,53,1)
(32,23,1)
(3,17,1)
(20,0,1)
(45,22,1)
(56,7,1)
(43,52,1)
(48,46,1)
(62,5,1)
(1,38,1)
(52,62,1)
(24,51,1)
(41,13,1)
(51,15,1)
(59,9,1)
(34,58,1)
(5,21,1)
(14,30,1)
(57,24,1)
(28,57,1)
(56,47,1)
(57,32,1)
(13,24,1)
(53,55,1)
(62,21,1)
(9,34,1)
(8,41,1)
(54,8,1)
(31,60,1)
(59,8,2)
(33,12,2)
(38,19,2)
(7,62,2)
(43,62,2)
(56,62,2)
(28,12,2)
(57,8,2)
(51,62,2)
(21,47,2)
(59,9,2)
(24,62,2)
(24,51,2)
(59,24,2)
(29,12,2)
(36,62,2)
(31,60,2)
(56,47,2)
(51,56,2)
(12,9,2)
(32,12,2)
(52,62,2)
(23,12,2)
(26,12,2)
(62,21,2)
(54,8,2)
(51,15,2)
(0,12,2)
(57,24,2)
(59,12,2)
(57,12,2)
(12,24,2)
(57,9,2)
-----------------------------------
(0,dest[data] = \\\'\\\\0\\\')
(1,source)
(2,)
(3,"")
(4,\\\'\\\\0\\\')
(5,NULL)
(6,stdin)
(7,inputBuffer)
(8,dest[100] = "")
(9,data = 0)
(10,source[100-1] = \\\'\\\\0\\\')
(11,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,data < 100)
(13,dest)
(14,1)
(15,short)
(16,RET)
(17,inputBuffer)
(18,)
(19,100-1)
(20,dest)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,inputBuffer)
(23,source)
(24,data = (short)
(25,\\\'A\\\')
(26,dest)
(27,dest)
(28,dest)
(29,\\\'\\\\0\\\')
(30,100)
(31,source[100-1])
(32,data)
(33,data)
(34,0)
(35,source)
(36,data)
(37,)
(38,memset(source, \\\'A\\\', 100-1)
(39,data)
(40,)
(41,"")
(42,source)
(43,printLine("fgets()
(44,if (data < 100)
(45,CHAR_ARRAY_SIZE)
(46,data)
(47,inputBuffer[CHAR_ARRAY_SIZE] = "")
(48,100)
(49,)
(50,)
(51,(short)
(52,"fgets()
(53,1)
(54,printLine(dest)
(55,100)
(56,atoi(inputBuffer)
(57,memcpy(dest, source, data)
(58,data)
(59,dest[data])
(60,100-1)
(61,inputBuffer)
(62,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^