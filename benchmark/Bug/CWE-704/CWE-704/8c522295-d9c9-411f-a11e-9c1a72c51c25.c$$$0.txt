-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }
5==5
5
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,41,0)
(37,30,0)
(18,30,0)
(17,24,0)
(50,52,0)
(52,45,0)
(14,0,0)
(36,50,0)
(34,41,0)
(21,34,0)
(13,30,0)
(53,52,0)
(3,6,0)
(50,9,0)
(3,49,0)
(26,41,0)
(39,53,0)
(25,49,0)
(9,0,0)
(49,30,0)
(32,7,0)
(20,32,0)
(29,50,0)
(23,26,0)
(15,52,0)
(6,24,0)
(55,24,0)
(48,24,0)
(47,44,0)
(7,33,0)
(56,22,0)
(22,24,0)
(2,6,0)
(43,35,0)
(31,53,0)
(50,49,0)
(7,32,0)
(22,41,0)
(41,24,0)
(10,34,0)
(55,41,0)
(26,23,0)
(35,49,0)
(6,41,0)
(0,24,0)
(9,50,0)
(4,3,0)
(5,9,0)
(45,52,0)
(28,3,0)
(52,1,0)
(54,45,0)
(8,12,0)
(11,44,0)
(26,35,0)
(35,52,0)
(3,52,0)
(49,12,0)
(6,3,0)
(19,6,0)
(42,55,0)
(12,49,0)
(53,49,0)
(41,26,0)
(27,41,0)
(35,26,0)
(44,47,1)
(10,21,1)
(9,41,1)
(52,45,1)
(6,41,1)
(35,52,1)
(20,34,1)
(43,27,1)
(38,53,1)
(14,9,1)
(12,8,1)
(53,49,1)
(6,3,1)
(56,55,1)
(53,52,1)
(50,49,1)
(29,36,1)
(3,28,1)
(22,41,1)
(3,49,1)
(32,20,1)
(45,54,1)
(49,12,1)
(31,44,1)
(36,5,1)
(38,22,1)
(53,39,1)
(41,26,1)
(21,41,1)
(11,49,1)
(47,11,1)
(7,32,1)
(27,53,1)
(34,10,1)
(26,35,1)
(0,14,1)
(42,0,1)
(15,44,1)
(35,49,1)
(19,7,1)
(34,41,1)
(55,41,1)
(39,31,1)
(3,52,1)
(2,19,1)
(35,43,1)
(4,2,1)
(22,56,1)
(9,50,1)
(19,34,1)
(8,25,1)
(50,52,1)
(55,42,1)
(26,23,1)
(50,29,1)
(54,15,1)
(5,6,1)
(31,52,1)
(28,4,1)
(56,53,2)
(22,53,2)
(0,53,2)
(42,53,2)
(26,53,2)
(28,53,2)
(29,53,2)
(2,53,2)
(41,53,2)
(35,49,2)
(5,53,2)
(9,50,2)
(50,52,2)
(55,53,2)
(36,53,2)
(50,49,2)
(34,41,2)
(15,44,2)
(49,12,2)
(52,44,2)
(53,52,2)
(27,53,2)
(41,26,2)
(35,53,2)
(21,53,2)
(10,53,2)
(50,53,2)
(6,53,2)
(6,41,2)
(14,53,2)
(4,53,2)
(26,35,2)
(34,53,2)
(22,41,2)
(45,44,2)
(32,34,2)
(53,49,2)
(9,41,2)
(3,52,2)
(3,49,2)
(19,53,2)
(7,32,2)
(6,3,2)
(35,52,2)
(3,53,2)
(52,45,2)
(55,41,2)
(7,34,2)
(20,34,2)
(26,23,2)
(54,44,2)
(43,53,2)
(9,53,2)
-----------------------------------
(0,dataBuffer[data-1] = '\\\\0')
(1,)
(2,'A')
(3,data-1)
(4,data)
(5,dataBuffer)
(6,memset(dataBuffer, 'A', data-1)
(7,exit(-1)
(8,1)
(9,dataBuffer[data-1])
(10,NULL)
(11,5)
(12,-1)
(13,if(5==5)
(14,\'\\\\0\')
(15,data)
(16,dataBuffer[data-1] = \'\\\\0\')
(17,dataBuffer)
(18,if (data < 100)
(19,dataBuffer)
(20,1)
(21,dataBuffer)
(22,free(dataBuffer)
(23,char *)
(24,)
(25,data)
(26,(char *)
(27,dataBuffer)
(28,1)
(29,1)
(30,)
(31,data)
(32,-1)
(33,)
(34,dataBuffer == NULL)
(35,malloc(data)
(36,data)
(37,data)
(38,RET)
(39,100)
(40,memset(dataBuffer, \'A\', data-1)
(41,* dataBuffer = (char *)
(42,dataBuffer)
(43,data)
(44,5==5)
(45,-1)
(46,\'A\')
(47,5)
(48,if (dataBuffer == NULL)
(49,data = -1)
(50,data-1)
(51,'\\\\0')
(52,data = -1)
(53,data < 100)
(54,1)
(55,printLine(dataBuffer)
(56,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^