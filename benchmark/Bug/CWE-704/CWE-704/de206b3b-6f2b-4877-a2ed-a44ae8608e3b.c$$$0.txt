-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
71,77
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
79,81
80,81
80,82
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
119,120
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,70,74,76,77,81,83,86,88,92,94,99,101,105,107,108,111,112,117,120,121,122,126,128,132,134
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
67,68
67,69
90,91
90,92
109,110
109,111
114,115
114,116
118,119
118,120
-----guardedBy-----
39,59
69,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_06_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(41,61,0)
(23,43,0)
(12,29,0)
(15,68,0)
(11,27,0)
(42,13,0)
(51,7,0)
(18,5,0)
(52,37,0)
(6,7,0)
(44,23,0)
(14,1,0)
(13,12,0)
(1,27,0)
(9,2,0)
(61,1,0)
(53,69,0)
(38,12,0)
(14,27,0)
(57,44,0)
(63,23,0)
(37,5,0)
(26,47,0)
(30,14,0)
(8,27,0)
(33,22,0)
(22,0,0)
(43,47,0)
(16,69,0)
(31,1,0)
(23,3,0)
(24,1,0)
(32,37,0)
(60,23,0)
(10,60,0)
(47,13,0)
(61,41,0)
(44,5,0)
(41,5,0)
(37,32,0)
(37,23,0)
(32,39,0)
(65,27,0)
(31,27,0)
(11,1,0)
(39,27,0)
(64,5,0)
(55,41,0)
(46,12,0)
(20,44,0)
(25,61,0)
(21,24,0)
(48,14,0)
(14,60,0)
(19,11,0)
(67,37,0)
(22,33,0)
(1,61,0)
(36,68,0)
(56,69,0)
(54,16,0)
(69,13,0)
(47,43,0)
(50,1,0)
(41,23,0)
(28,33,0)
(60,5,0)
(69,16,0)
(59,39,0)
(40,32,0)
(60,14,0)
(34,43,0)
(32,1,0)
(45,60,0)
(58,24,0)
(61,25,0)
(43,34,0)
(35,7,0)
(66,69,0)
(17,31,0)
(5,7,0)
(62,13,0)
(43,23,0)
(2,49,0)
(44,5,1)
(32,1,1)
(17,11,1)
(10,45,1)
(1,61,1)
(14,1,1)
(48,22,1)
(41,5,1)
(60,5,1)
(37,23,1)
(44,23,1)
(40,14,1)
(43,34,1)
(60,10,1)
(26,63,1)
(63,16,1)
(47,13,1)
(48,24,1)
(68,36,1)
(28,24,1)
(9,16,1)
(59,32,1)
(57,23,1)
(56,53,1)
(58,21,1)
(42,62,1)
(36,15,1)
(60,23,1)
(18,64,1)
(37,5,1)
(41,55,1)
(57,68,1)
(43,47,1)
(69,13,1)
(31,1,1)
(33,28,1)
(11,1,1)
(11,19,1)
(61,25,1)
(52,67,1)
(55,50,1)
(4,44,1)
(2,9,1)
(5,18,1)
(4,31,1)
(19,39,1)
(32,37,1)
(53,13,1)
(31,17,1)
(37,52,1)
(23,43,1)
(62,68,1)
(20,57,1)
(15,5,1)
(47,26,1)
(30,48,1)
(21,1,1)
(41,23,1)
(24,1,1)
(50,44,1)
(66,56,1)
(39,59,1)
(14,60,1)
(44,20,1)
(54,69,1)
(13,42,1)
(16,54,1)
(61,41,1)
(45,30,1)
(69,66,1)
(22,33,1)
(16,69,1)
(67,40,1)
(57,2,1)
(24,58,1)
(56,68,2)
(30,44,2)
(53,68,2)
(16,68,2)
(24,44,2)
(23,43,2)
(14,44,2)
(45,44,2)
(60,23,2)
(59,44,2)
(22,33,2)
(41,44,2)
(44,23,2)
(60,44,2)
(54,68,2)
(26,16,2)
(47,16,2)
(58,44,2)
(43,34,2)
(67,44,2)
(42,68,2)
(11,1,2)
(10,44,2)
(23,16,2)
(1,44,2)
(31,1,2)
(32,37,2)
(43,16,2)
(32,1,2)
(14,60,2)
(33,24,2)
(44,5,2)
(48,44,2)
(62,68,2)
(50,44,2)
(16,69,2)
(28,24,2)
(21,44,2)
(69,68,2)
(63,16,2)
(41,23,2)
(2,16,2)
(11,44,2)
(13,68,2)
(60,5,2)
(14,1,2)
(61,25,2)
(37,5,2)
(17,44,2)
(19,44,2)
(41,5,2)
(37,44,2)
(32,44,2)
(66,68,2)
(31,44,2)
(52,44,2)
(43,47,2)
(9,16,2)
(1,61,2)
(55,44,2)
(40,44,2)
(39,44,2)
(24,1,2)
(69,13,2)
(61,41,2)
(22,24,2)
(61,44,2)
(47,13,2)
(37,23,2)
-----------------------------------
(0,)
(1,* dataBuffer = (char *)
(2,printLine("fgets()
(3,)
(4,RET)
(5,data = 0)
(6,if(STATIC_CONST_FIVE==5)
(7,)
(8,dataBuffer)
(9,"fgets()
(10,1)
(11,printLine(dataBuffer)
(12,)
(13,inputBuffer[CHAR_ARRAY_SIZE] = "")
(14,memset(dataBuffer, \\\'A\\\', data-1)
(15,STATIC_CONST_FIVE)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,dataBuffer)
(18,0)
(19,dataBuffer)
(20,100)
(21,dataBuffer)
(22,exit(-1)
(23,data = (short)
(24,dataBuffer == NULL)
(25,char *)
(26,inputBuffer)
(27,)
(28,1)
(29,)
(30,\\\'A\\\')
(31,free(dataBuffer)
(32,dataBuffer[data-1])
(33,-1)
(34,short)
(35,if (data < 100)
(36,5)
(37,data-1)
(38,inputBuffer)
(39,dataBuffer[data-1] = \\\'\\\\0\\\')
(40,dataBuffer)
(41,malloc(data)
(42,"")
(43,(short)
(44,data < 100)
(45,data)
(46,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,atoi(inputBuffer)
(48,dataBuffer)
(49,)
(50,dataBuffer)
(51,data)
(52,1)
(53,inputBuffer)
(54,NULL)
(55,data)
(56,CHAR_ARRAY_SIZE)
(57,data)
(58,NULL)
(59,\\\'\\\\0\\\')
(60,data-1)
(61,(char *)
(62,inputBuffer)
(63,data)
(64,data)
(65,if (dataBuffer == NULL)
(66,stdin)
(67,data)
(68,STATIC_CONST_FIVE==5)
(69,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^