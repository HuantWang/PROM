-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_08_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,36,0)
(2,0,0)
(45,6,0)
(31,64,0)
(45,11,0)
(56,42,0)
(40,60,0)
(27,2,0)
(39,6,0)
(43,60,0)
(34,14,0)
(28,14,0)
(49,11,0)
(65,0,0)
(8,35,0)
(32,49,0)
(35,64,0)
(25,35,0)
(19,6,0)
(14,34,0)
(18,3,0)
(46,16,0)
(24,62,0)
(63,49,0)
(50,2,0)
(13,6,0)
(22,45,0)
(61,62,0)
(50,46,0)
(26,64,0)
(46,50,0)
(15,35,0)
(10,43,0)
(11,46,0)
(12,11,0)
(4,55,0)
(9,55,0)
(29,55,0)
(55,2,0)
(38,50,0)
(43,11,0)
(23,62,0)
(51,61,0)
(20,42,0)
(47,61,0)
(55,1,0)
(3,58,0)
(43,6,0)
(30,2,0)
(49,42,0)
(33,14,0)
(62,35,0)
(36,35,0)
(13,35,0)
(16,46,0)
(45,40,0)
(43,42,0)
(52,43,0)
(48,13,0)
(34,36,0)
(62,61,0)
(54,43,0)
(17,0,0)
(42,64,0)
(1,55,0)
(21,1,0)
(45,42,0)
(53,40,0)
(7,45,0)
(41,34,0)
(11,59,0)
(0,57,0)
(6,35,0)
(46,11,0)
(1,55,1)
(19,37,1)
(47,24,1)
(54,10,1)
(7,22,1)
(43,54,1)
(52,49,1)
(1,21,1)
(45,11,1)
(19,11,1)
(5,34,1)
(53,45,1)
(61,51,1)
(49,11,1)
(42,56,1)
(13,48,1)
(46,16,1)
(27,37,1)
(41,62,1)
(43,6,1)
(50,38,1)
(43,11,1)
(2,30,1)
(21,55,1)
(18,1,1)
(43,42,1)
(9,2,1)
(36,5,1)
(44,13,1)
(45,7,1)
(48,40,1)
(29,9,1)
(32,36,1)
(23,6,1)
(51,47,1)
(24,23,1)
(28,33,1)
(11,46,1)
(37,42,1)
(48,49,1)
(56,20,1)
(4,29,1)
(50,2,1)
(10,52,1)
(49,42,1)
(63,32,1)
(55,2,1)
(40,53,1)
(62,61,1)
(30,27,1)
(22,43,1)
(13,6,1)
(46,50,1)
(6,39,1)
(39,19,1)
(55,4,1)
(12,1,1)
(38,12,1)
(45,42,1)
(45,6,1)
(3,18,1)
(33,41,1)
(19,3,1)
(34,14,1)
(49,63,1)
(14,28,1)
(38,1,2)
(18,1,2)
(49,11,2)
(10,49,2)
(45,11,2)
(43,42,2)
(50,2,2)
(40,49,2)
(27,37,2)
(50,1,2)
(3,1,2)
(45,42,2)
(52,49,2)
(43,49,2)
(13,6,2)
(30,37,2)
(54,49,2)
(43,11,2)
(53,49,2)
(21,37,2)
(62,61,2)
(46,16,2)
(46,50,2)
(1,55,2)
(49,42,2)
(4,37,2)
(55,37,2)
(43,6,2)
(45,6,2)
(7,49,2)
(11,46,2)
(22,49,2)
(1,37,2)
(34,14,2)
(11,1,2)
(55,2,2)
(29,37,2)
(12,1,2)
(2,37,2)
(45,49,2)
(46,1,2)
(9,37,2)
-----------------------------------
(0,)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,inputBuffer[CHAR_ARRAY_SIZE] = "")
(3,printLine("fgets()
(4,stdin)
(5,\\\'\\\\0\\\')
(6,dest[100] = "")
(7,data)
(8,if (data < 100)
(9,inputBuffer)
(10,source)
(11,data = (short)
(12,data)
(13,printLine(dest)
(14,100-1)
(15,dest)
(16,short)
(17,inputBuffer)
(18,"fgets()
(19,dest)
(20,data)
(21,NULL)
(22,dest)
(23,source)
(24,\\\'A\\\')
(25,source)
(26,if(staticReturnsTrue()
(27,inputBuffer)
(28,1)
(29,CHAR_ARRAY_SIZE)
(30,"")
(31,data)
(32,data)
(33,100)
(34,source[100-1])
(35,)
(36,source[100-1] = \\\'\\\\0\\\')
(37,staticReturnsTrue()
(38,inputBuffer)
(39,"")
(40,dest[data] = \\\'\\\\0\\\')
(41,source)
(42,data = 0)
(43,memcpy(dest, source, data)
(44,RET)
(45,dest[data])
(46,(short)
(47,100)
(48,dest)
(49,data < 100)
(50,atoi(inputBuffer)
(51,1)
(52,dest)
(53,\\\'\\\\0\\\')
(54,data)
(55,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,0)
(57,)
(58,)
(59,)
(60,)
(61,100-1)
(62,memset(source, \\\'A\\\', 100-1)
(63,100)
(64,)
(65,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^