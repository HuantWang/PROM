-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_08_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,13,0)
(44,9,0)
(39,27,0)
(40,45,0)
(28,38,0)
(5,10,0)
(4,42,0)
(43,34,0)
(1,38,0)
(3,18,0)
(34,18,0)
(18,13,0)
(23,45,0)
(24,13,0)
(27,14,0)
(36,27,0)
(23,27,0)
(25,13,0)
(47,24,0)
(15,36,0)
(18,38,0)
(48,14,0)
(11,50,0)
(35,23,0)
(32,14,0)
(8,36,0)
(12,26,0)
(2,34,0)
(26,50,0)
(21,42,0)
(31,50,0)
(50,26,0)
(5,9,0)
(29,27,0)
(7,49,0)
(13,24,0)
(33,27,0)
(24,47,0)
(42,13,0)
(49,38,0)
(6,38,0)
(9,5,0)
(17,14,0)
(34,27,0)
(46,6,0)
(13,38,0)
(6,13,0)
(49,13,0)
(24,29,0)
(26,27,0)
(29,24,0)
(45,23,0)
(20,38,0)
(18,34,0)
(0,28,0)
(19,29,0)
(45,28,0)
(30,23,0)
(50,22,0)
(16,18,0)
(50,26,1)
(18,34,1)
(30,35,1)
(3,16,1)
(11,37,1)
(29,27,1)
(6,13,1)
(41,6,1)
(27,33,1)
(13,24,1)
(24,29,1)
(15,8,1)
(5,9,1)
(19,25,1)
(24,47,1)
(21,4,1)
(41,36,1)
(6,46,1)
(49,7,1)
(45,13,1)
(36,27,1)
(40,18,1)
(4,13,1)
(44,42,1)
(25,36,1)
(12,31,1)
(2,43,1)
(8,37,1)
(8,50,1)
(26,27,1)
(49,13,1)
(45,23,1)
(29,19,1)
(33,39,1)
(7,28,1)
(42,21,1)
(16,42,1)
(34,2,1)
(23,27,1)
(46,49,1)
(28,0,1)
(23,30,1)
(43,3,1)
(42,13,1)
(31,11,1)
(16,5,1)
(26,12,1)
(34,27,1)
(18,13,1)
(9,44,1)
(36,15,1)
(35,40,1)
(0,45,1)
(37,27,1)
(5,9,2)
(35,36,2)
(49,13,2)
(30,36,2)
(6,36,2)
(42,36,2)
(18,36,2)
(0,36,2)
(24,36,2)
(43,36,2)
(44,42,2)
(50,26,2)
(18,13,2)
(40,36,2)
(23,27,2)
(25,36,2)
(26,27,2)
(45,23,2)
(29,27,2)
(29,36,2)
(45,13,2)
(24,29,2)
(9,42,2)
(42,13,2)
(23,36,2)
(13,24,2)
(7,36,2)
(49,36,2)
(50,37,2)
(34,36,2)
(2,36,2)
(3,36,2)
(34,27,2)
(31,37,2)
(46,36,2)
(5,42,2)
(11,37,2)
(28,36,2)
(13,36,2)
(16,36,2)
(19,36,2)
(6,13,2)
(24,47,2)
(21,36,2)
(12,37,2)
(36,27,2)
(45,36,2)
(4,36,2)
(26,37,2)
(18,34,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,dataBuffer)
(2,1)
(3,\\\'A\\\')
(4,dataBuffer)
(5,exit(-1)
(6,free(dataBuffer)
(7,dataBuffer)
(8,data)
(9,-1)
(10,)
(11,stdin)
(12,data)
(13,* dataBuffer = (char *)
(14,)
(15,100)
(16,dataBuffer)
(17,data)
(18,memset(dataBuffer, \\\'A\\\', data-1)
(19,data)
(20,if (dataBuffer == NULL)
(21,NULL)
(22,)
(23,data-1)
(24,(char *)
(25,dataBuffer)
(26,&data)
(27,data = 0)
(28,dataBuffer[data-1] = \\\'\\\\0\\\')
(29,malloc(data)
(30,1)
(31,"%hd")
(32,if(staticReturnsTrue()
(33,0)
(34,data-1)
(35,data)
(36,data < 100)
(37,staticReturnsTrue()
(38,)
(39,data)
(40,dataBuffer)
(41,RET)
(42,dataBuffer == NULL)
(43,data)
(44,1)
(45,dataBuffer[data-1])
(46,dataBuffer)
(47,char *)
(48,if (data < 100)
(49,printLine(dataBuffer)
(50,fscanf (stdin, "%hd", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^