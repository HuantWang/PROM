-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_31_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a random number */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
25,26
26,27
28,29
28,30
28,31
29,30
30,31
30,32
32,33
32,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
53,55
56,57
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,14,16,20,23,24,27,31,33,36,39,41,44,48,50,54,55,57,61,63
-----computeFrom-----
12,13
12,14
18,19
18,20
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_31_bad(){    short data;    /* Initialize data */    data = -1;    /* FLAW: Use a random number */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_rand_31_bad()
CWE197_Numeric_Truncation_Error__short_rand_31_bad
{    short data;    /* Initialize data */    data = -1;    /* FLAW: Use a random number */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(12,13,0)
(1,15,0)
(20,1,0)
(24,3,0)
(22,9,0)
(22,4,0)
(4,21,0)
(0,15,0)
(13,15,0)
(6,3,0)
(2,18,0)
(6,19,0)
(27,6,0)
(7,3,0)
(23,2,0)
(14,22,0)
(13,12,0)
(19,21,0)
(1,25,0)
(13,6,0)
(11,19,0)
(28,18,0)
(26,19,0)
(15,25,0)
(8,13,0)
(5,25,0)
(3,19,0)
(18,2,0)
(18,21,0)
(15,13,0)
(17,21,0)
(22,14,0)
(10,6,0)
(29,4,0)
(9,22,0)
(3,4,0)
(4,22,0)
(25,19,0)
(22,14,1)
(13,8,1)
(13,12,1)
(3,4,1)
(1,15,1)
(15,13,1)
(24,7,1)
(7,4,1)
(10,27,1)
(14,29,1)
(1,20,1)
(6,10,1)
(8,0,1)
(6,3,1)
(2,23,1)
(22,9,1)
(3,24,1)
(13,6,1)
(20,15,1)
(18,2,1)
(4,22,1)
(16,1,1)
(23,28,1)
(29,18,1)
(27,3,1)
(0,6,1)
(22,9,2)
(13,6,2)
(4,22,2)
(15,13,2)
(13,12,2)
(18,2,2)
(3,4,2)
(1,15,2)
(22,14,2)
(6,3,2)
-----------------------------------
(0,charData)
(1,printHexCharLine(charData)
(2,-1)
(3,dataCopy = data)
(4,data = (short)
(5,charData)
(6,data = dataCopy)
(7,dataCopy)
(8,data)
(9,short)
(10,dataCopy)
(11,data)
(12,char)
(13,(char)
(14,RAND32()
(15,charData = (char)
(16,RET)
(17,data)
(18,data = -1)
(19,)
(20,charData)
(21,)
(22,(short)
(23,1)
(24,data)
(25,)
(26,dataCopy)
(27,data)
(28,data)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^