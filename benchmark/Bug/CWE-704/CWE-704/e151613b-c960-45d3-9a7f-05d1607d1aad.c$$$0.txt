-----label-----
1
-----code-----
static void badSink()
{
    short data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    short data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    short data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData;
short data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData;
short
data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData
data
= CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData
CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData
CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,7,0)
(15,7,0)
(20,44,0)
(42,14,0)
(5,15,0)
(31,30,0)
(30,19,0)
(9,15,0)
(9,7,0)
(11,2,0)
(24,36,0)
(1,9,0)
(14,40,0)
(45,15,0)
(44,15,0)
(40,14,0)
(6,38,0)
(14,15,0)
(28,5,0)
(21,14,0)
(40,43,0)
(3,43,0)
(33,40,0)
(4,46,0)
(19,30,0)
(23,5,0)
(2,7,0)
(30,43,0)
(32,40,0)
(5,23,0)
(41,38,0)
(0,23,0)
(15,19,0)
(43,46,0)
(13,45,0)
(39,44,0)
(23,43,0)
(38,41,0)
(22,19,0)
(18,7,0)
(14,7,0)
(19,22,0)
(34,15,0)
(8,23,0)
(41,10,0)
(17,43,0)
(29,7,0)
(5,2,0)
(19,15,0)
(36,43,0)
(35,36,0)
(27,46,0)
(30,31,1)
(5,23,1)
(6,44,1)
(45,15,1)
(2,11,1)
(37,36,1)
(20,15,1)
(13,9,1)
(38,6,1)
(1,2,1)
(44,39,1)
(41,38,1)
(9,15,1)
(36,43,1)
(42,41,1)
(30,43,1)
(19,22,1)
(42,44,1)
(34,36,1)
(19,30,1)
(31,34,1)
(32,33,1)
(8,0,1)
(0,28,1)
(28,14,1)
(24,43,1)
(21,42,1)
(39,20,1)
(15,19,1)
(40,32,1)
(23,43,1)
(11,5,1)
(45,13,1)
(23,8,1)
(36,35,1)
(5,15,1)
(14,15,1)
(37,45,1)
(14,40,1)
(35,24,1)
(44,15,1)
(33,21,1)
(17,3,1)
(9,1,1)
(43,17,1)
(40,43,1)
(44,15,2)
(9,36,2)
(21,36,2)
(13,36,2)
(14,15,2)
(40,43,2)
(5,23,2)
(23,43,2)
(28,36,2)
(34,36,2)
(5,15,2)
(30,36,2)
(8,36,2)
(14,40,2)
(36,43,2)
(42,36,2)
(15,36,2)
(20,36,2)
(41,38,2)
(32,36,2)
(33,36,2)
(5,36,2)
(40,36,2)
(39,36,2)
(38,44,2)
(30,43,2)
(19,22,2)
(19,36,2)
(41,44,2)
(31,36,2)
(15,19,2)
(9,15,2)
(19,30,2)
(6,44,2)
(1,36,2)
(14,36,2)
(2,36,2)
(45,36,2)
(44,36,2)
(23,36,2)
(45,15,2)
(11,36,2)
(0,36,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,dataBuffer[data-1] = '\\\\0')
(3,data)
(4,data)
(5,dataBuffer[data-1])
(6,1)
(7,)
(8,1)
(9,printLine(dataBuffer)
(10,)
(11,'\\\\0')
(12,dataBuffer[data-1] = \'\\\\0\')
(13,dataBuffer)
(14,memset(dataBuffer, 'A', data-1)
(15,* dataBuffer = (char *)
(16,\'\\\\0\')
(17,CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData)
(18,if (dataBuffer == NULL)
(19,(char *)
(20,dataBuffer)
(21,\'A\')
(22,char *)
(23,data-1)
(24,data)
(25,memset(dataBuffer, \'A\', data-1)
(26,'A')
(27,if (data < 100)
(28,dataBuffer)
(29,dataBuffer)
(30,malloc(data)
(31,data)
(32,1)
(33,data)
(34,dataBuffer)
(35,100)
(36,data < 100)
(37,RET)
(38,-1)
(39,NULL)
(40,data-1)
(41,exit(-1)
(42,dataBuffer)
(43,data = CWE194_Unexpected_Sign_Extension__fgets_malloc_45_badData)
(44,dataBuffer == NULL)
(45,free(dataBuffer)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^