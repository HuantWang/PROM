-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,43,44,48,50,51,55,57,60,62,66,68,73,75,79,81,82,85,86,91,94,95,96,100,102,106,108
-----computeFrom-----
12,13
12,14
41,42
41,43
64,65
64,66
83,84
83,85
88,89
88,90
92,93
92,94
-----guardedBy-----
43,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,35,0)
(50,15,0)
(27,48,0)
(6,50,0)
(41,27,0)
(8,48,0)
(50,35,0)
(19,22,0)
(33,35,0)
(3,24,0)
(9,48,0)
(30,10,0)
(28,26,0)
(15,27,0)
(18,41,0)
(13,48,0)
(17,35,0)
(12,38,0)
(25,38,0)
(21,15,0)
(27,15,0)
(35,31,0)
(15,50,0)
(2,49,0)
(26,27,0)
(46,13,0)
(41,49,0)
(56,25,0)
(16,22,0)
(11,38,0)
(13,27,0)
(10,27,0)
(45,24,0)
(34,27,0)
(41,8,0)
(44,31,0)
(35,22,0)
(47,5,0)
(49,41,0)
(55,28,0)
(49,35,0)
(40,49,0)
(54,5,0)
(7,26,0)
(43,25,0)
(10,48,0)
(24,27,0)
(42,33,0)
(57,43,0)
(43,35,0)
(53,38,0)
(23,22,0)
(14,33,0)
(37,28,0)
(31,35,0)
(39,8,0)
(26,48,0)
(25,43,0)
(32,26,0)
(15,21,0)
(20,38,0)
(1,38,0)
(5,54,0)
(0,48,0)
(4,53,0)
(26,28,0)
(51,25,0)
(54,36,0)
(32,7,1)
(54,5,1)
(6,34,1)
(39,41,1)
(7,54,1)
(46,10,1)
(28,35,1)
(29,35,1)
(56,51,1)
(43,35,1)
(57,56,1)
(33,14,1)
(10,27,1)
(15,21,1)
(8,39,1)
(26,27,1)
(34,33,1)
(28,55,1)
(2,18,1)
(55,37,1)
(42,11,1)
(40,2,1)
(52,13,1)
(45,27,1)
(24,3,1)
(37,32,1)
(25,43,1)
(49,40,1)
(27,15,1)
(49,35,1)
(42,12,1)
(31,44,1)
(3,45,1)
(12,25,1)
(13,46,1)
(11,53,1)
(52,33,1)
(53,4,1)
(50,35,1)
(18,26,1)
(35,31,1)
(41,49,1)
(7,24,1)
(33,35,1)
(10,30,1)
(13,27,1)
(4,29,1)
(51,29,1)
(50,6,1)
(24,27,1)
(5,47,1)
(41,27,1)
(43,57,1)
(30,8,1)
(47,24,1)
(26,28,1)
(44,17,1)
(14,42,1)
(15,50,1)
(3,33,2)
(51,29,2)
(7,33,2)
(10,27,2)
(4,29,2)
(10,33,2)
(46,33,2)
(57,29,2)
(26,27,2)
(47,24,2)
(5,24,2)
(25,29,2)
(50,35,2)
(15,21,2)
(28,35,2)
(55,33,2)
(43,35,2)
(15,50,2)
(45,33,2)
(40,33,2)
(24,27,2)
(56,29,2)
(12,29,2)
(41,33,2)
(2,33,2)
(41,27,2)
(8,33,2)
(26,33,2)
(53,29,2)
(39,33,2)
(49,33,2)
(6,33,2)
(15,33,2)
(28,33,2)
(54,24,2)
(24,33,2)
(43,29,2)
(54,5,2)
(18,33,2)
(11,29,2)
(30,33,2)
(32,33,2)
(34,33,2)
(27,15,2)
(50,33,2)
(13,33,2)
(33,35,2)
(49,35,2)
(25,43,2)
(27,33,2)
(37,33,2)
(35,31,2)
(26,28,2)
(41,49,2)
(13,27,2)
-----------------------------------
(0,dataBuffer)
(1,case 6:)
(2,data)
(3,NULL)
(4,"Benign, fixed string")
(5,-1)
(6,data)
(7,dataBuffer)
(8,dataBuffer[data-1] = \\\'\\\\0\\\')
(9,if (dataBuffer == NULL)
(10,printLine(dataBuffer)
(11,break;)
(12,break;)
(13,free(dataBuffer)
(14,100)
(15,(char *)
(16,if (data < 100)
(17,data)
(18,dataBuffer)
(19,switch(6)
(20,default:)
(21,char *)
(22,)
(23,data)
(24,dataBuffer == NULL)
(25,fscanf(stdin, "%d", &data)
(26,memset(dataBuffer, \\\'A\\\', data-1)
(27,* dataBuffer = (char *)
(28,data-1)
(29,6)
(30,dataBuffer)
(31,-1)
(32,\\\'A\\\')
(33,data < 100)
(34,dataBuffer)
(35,data = -1)
(36,)
(37,data)
(38,)
(39,\\\'\\\\0\\\')
(40,1)
(41,dataBuffer[data-1])
(42,data)
(43,&data)
(44,1)
(45,dataBuffer)
(46,dataBuffer)
(47,1)
(48,)
(49,data-1)
(50,malloc(data)
(51,stdin)
(52,RET)
(53,printLine("Benign, fixed string")
(54,exit(-1)
(55,1)
(56,"%d")
(57,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^