-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_54e_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_54e_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_54e_badSink(short data)
CWE194_Unexpected_Sign_Extension__fgets_malloc_54e_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(14,19,0)
(18,39,0)
(33,40,0)
(21,10,0)
(36,30,0)
(3,1,0)
(30,29,0)
(20,19,0)
(37,1,0)
(12,14,0)
(22,15,0)
(32,10,0)
(1,3,0)
(0,2,0)
(23,15,0)
(34,39,0)
(2,0,0)
(19,8,0)
(40,8,0)
(9,8,0)
(8,15,0)
(4,15,0)
(13,15,0)
(41,29,0)
(27,9,0)
(10,29,0)
(10,40,0)
(31,30,0)
(41,0,0)
(26,22,0)
(39,8,0)
(5,8,0)
(40,10,0)
(8,0,0)
(24,14,0)
(19,13,0)
(40,15,0)
(17,13,0)
(3,6,0)
(9,15,0)
(19,14,0)
(7,40,0)
(0,8,0)
(35,16,0)
(22,8,0)
(38,41,0)
(14,29,0)
(0,41,0)
(11,30,1)
(7,33,1)
(41,38,1)
(10,29,1)
(24,20,1)
(41,29,1)
(37,39,1)
(38,5,1)
(40,8,1)
(19,8,1)
(26,9,1)
(1,37,1)
(11,22,1)
(31,36,1)
(10,32,1)
(5,30,1)
(12,24,1)
(32,21,1)
(33,39,1)
(8,0,1)
(22,26,1)
(30,31,1)
(21,7,1)
(0,41,1)
(39,34,1)
(14,29,1)
(9,27,1)
(33,3,1)
(0,2,1)
(17,19,1)
(39,8,1)
(18,8,1)
(22,8,1)
(30,29,1)
(3,1,1)
(40,10,1)
(9,8,1)
(19,14,1)
(34,18,1)
(20,40,1)
(13,17,1)
(14,12,1)
(27,13,1)
(5,30,2)
(13,30,2)
(38,30,2)
(0,41,2)
(41,30,2)
(8,0,2)
(19,14,2)
(40,8,2)
(40,10,2)
(0,2,2)
(14,30,2)
(8,30,2)
(26,30,2)
(37,39,2)
(9,30,2)
(3,1,2)
(14,29,2)
(10,30,2)
(1,39,2)
(22,8,2)
(34,30,2)
(39,8,2)
(39,30,2)
(9,8,2)
(10,29,2)
(17,30,2)
(21,30,2)
(41,29,2)
(0,30,2)
(12,30,2)
(19,30,2)
(30,29,2)
(40,30,2)
(27,30,2)
(19,8,2)
(32,30,2)
(3,39,2)
(24,30,2)
(22,30,2)
(18,30,2)
(7,30,2)
(33,30,2)
(20,30,2)
-----------------------------------
(0,(char *)
(1,-1)
(2,char *)
(3,exit(-1)
(4,if (dataBuffer == NULL)
(5,dataBuffer)
(6,)
(7,'A')
(8,* dataBuffer = (char *)
(9,printLine(dataBuffer)
(10,data-1)
(11,RET)
(12,1)
(13,dataBuffer[data-1] = '\\\\0')
(14,data-1)
(15,)
(16,)
(17,'\\\\0')
(18,dataBuffer)
(19,dataBuffer[data-1])
(20,dataBuffer)
(21,data)
(22,free(dataBuffer)
(23,dataBuffer)
(24,data)
(25,\'\\\\0\')
(26,dataBuffer)
(27,dataBuffer)
(28,dataBuffer[data-1] = \'\\\\0\')
(29,short data)
(30,data < 100)
(31,100)
(32,1)
(33,dataBuffer)
(34,NULL)
(35,if (data < 100)
(36,data)
(37,1)
(38,data)
(39,dataBuffer == NULL)
(40,memset(dataBuffer, 'A', data-1)
(41,malloc(data)
(42,memset(dataBuffer, \'A\', data-1)
(43,\'A\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^