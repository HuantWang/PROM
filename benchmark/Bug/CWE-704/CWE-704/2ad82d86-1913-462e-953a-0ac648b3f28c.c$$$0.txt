-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,31,35,37,40,42,46,48,53,55,59,61,62,65,66,71,74,75,76,80,82,86,88
-----computeFrom-----
21,22
21,23
44,45
44,46
63,64
63,65
68,69
68,70
72,73
72,74
-----guardedBy-----
23,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_63b_badSink(short * dataPtr){    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__negative_malloc_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(18,46,0)
(8,18,0)
(8,36,0)
(20,6,0)
(23,31,0)
(0,12,0)
(32,43,0)
(45,34,0)
(31,36,0)
(3,8,0)
(2,26,0)
(5,23,0)
(4,32,0)
(47,13,0)
(26,43,0)
(17,16,0)
(34,36,0)
(6,46,0)
(16,22,0)
(39,37,0)
(44,17,0)
(23,43,0)
(25,8,0)
(16,46,0)
(12,43,0)
(10,34,0)
(36,19,0)
(18,26,0)
(12,46,0)
(9,43,0)
(17,36,0)
(18,8,0)
(46,16,0)
(37,39,0)
(7,23,0)
(29,31,0)
(32,46,0)
(13,36,0)
(13,41,0)
(24,19,0)
(35,43,0)
(40,19,0)
(14,18,0)
(48,6,0)
(16,17,0)
(39,11,0)
(33,31,0)
(22,16,0)
(27,36,0)
(31,23,0)
(15,46,0)
(46,43,0)
(1,37,0)
(23,46,0)
(36,13,0)
(32,4,1)
(34,45,1)
(8,36,1)
(46,16,1)
(7,39,1)
(45,10,1)
(3,14,1)
(12,0,1)
(20,48,1)
(36,13,1)
(10,36,1)
(13,41,1)
(7,6,1)
(33,29,1)
(17,36,1)
(18,8,1)
(23,46,1)
(25,3,1)
(6,20,1)
(32,46,1)
(23,31,1)
(4,12,1)
(17,44,1)
(37,1,1)
(44,15,1)
(29,5,1)
(14,23,1)
(15,34,1)
(47,27,1)
(26,2,1)
(48,46,1)
(8,25,1)
(0,26,1)
(13,47,1)
(16,22,1)
(34,36,1)
(30,34,1)
(31,36,1)
(16,17,1)
(30,32,1)
(2,18,1)
(31,33,1)
(39,37,1)
(12,46,1)
(5,7,1)
(6,46,1)
(1,6,1)
(18,46,1)
(14,34,2)
(12,34,2)
(15,34,2)
(31,34,2)
(32,46,2)
(32,34,2)
(39,37,2)
(16,22,2)
(23,46,2)
(17,36,2)
(37,6,2)
(17,34,2)
(23,31,2)
(18,46,2)
(13,41,2)
(33,34,2)
(16,34,2)
(12,46,2)
(5,34,2)
(3,34,2)
(46,34,2)
(4,34,2)
(6,34,2)
(2,34,2)
(44,34,2)
(34,36,2)
(23,34,2)
(18,8,2)
(29,34,2)
(20,34,2)
(0,34,2)
(31,36,2)
(1,6,2)
(39,6,2)
(46,16,2)
(36,13,2)
(6,46,2)
(18,34,2)
(7,34,2)
(8,34,2)
(26,34,2)
(48,34,2)
(8,36,2)
(25,34,2)
(16,17,2)
-----------------------------------
(0,dataBuffer)
(1,1)
(2,\'\\\\0\')
(3,data)
(4,dataBuffer)
(5,\'A\')
(6,dataBuffer == NULL)
(7,dataBuffer)
(8,data-1)
(9,dataBuffer)
(10,data)
(11,)
(12,printLine(dataBuffer)
(13,*dataPtr)
(14,dataBuffer)
(15,dataBuffer)
(16,(char *)
(17,malloc(data)
(18,dataBuffer[data-1])
(19,)
(20,NULL)
(21,'A')
(22,char *)
(23,memset(dataBuffer, 'A', data-1)
(24,if (data < 100)
(25,1)
(26,dataBuffer[data-1] = \'\\\\0\')
(27,data)
(28,dataBuffer[data-1] = '\\\\0')
(29,data)
(30,RET)
(31,data-1)
(32,free(dataBuffer)
(33,1)
(34,data < 100)
(35,if (dataBuffer == NULL)
(36,data = *dataPtr)
(37,-1)
(38,memset(dataBuffer, \'A\', data-1)
(39,exit(-1)
(40,data)
(41,short * dataPtr)
(42,'\\\\0')
(43,)
(44,data)
(45,100)
(46,* dataBuffer = (char *)
(47,dataPtr)
(48,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^