-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
57,63
58,59
59,60
59,61
61,62
61,63
61,64
64,65
65,66
65,67
66,67
66,68
68,69
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,29,32,37,38,40,44,46,50,51,55,56,60,62,63,67,69,72,74,78,80,85,87,91,93,94,97,98,103,106,107,108,112,114,118,120
-----computeFrom-----
18,19
18,20
34,35
34,36
53,54
53,55
76,77
76,78
95,96
95,97
100,101
100,102
104,105
104,106
-----guardedBy-----
55,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(21,57,0)
(11,3,0)
(44,15,0)
(13,38,0)
(42,60,0)
(59,15,0)
(24,58,0)
(34,18,0)
(52,24,0)
(58,47,0)
(53,60,0)
(42,38,0)
(51,47,0)
(45,48,0)
(31,42,0)
(21,48,0)
(48,11,0)
(30,21,0)
(32,33,0)
(3,11,0)
(52,8,0)
(60,42,0)
(42,31,0)
(12,38,0)
(27,21,0)
(28,29,0)
(46,54,0)
(5,11,0)
(11,57,0)
(37,6,0)
(48,21,0)
(38,42,0)
(12,29,0)
(22,12,0)
(56,50,0)
(52,38,0)
(13,29,0)
(60,58,0)
(25,29,0)
(9,6,0)
(54,50,0)
(28,38,0)
(33,38,0)
(43,13,0)
(39,54,0)
(13,15,0)
(15,58,0)
(14,58,0)
(55,13,0)
(61,47,0)
(47,57,0)
(7,3,0)
(58,14,0)
(41,52,0)
(16,14,0)
(2,34,0)
(4,8,0)
(10,14,0)
(50,11,0)
(8,29,0)
(1,33,0)
(24,52,0)
(35,57,0)
(20,2,0)
(38,29,0)
(15,13,0)
(40,24,0)
(49,57,0)
(17,58,0)
(50,57,0)
(0,24,0)
(23,28,0)
(6,58,0)
(34,2,0)
(19,38,0)
(26,29,0)
(10,16,1)
(56,54,1)
(46,21,1)
(21,48,1)
(6,37,1)
(13,38,1)
(14,10,1)
(50,11,1)
(52,38,1)
(48,45,1)
(42,60,1)
(45,27,1)
(32,1,1)
(38,42,1)
(24,58,1)
(4,52,1)
(12,22,1)
(55,43,1)
(0,40,1)
(36,6,1)
(15,44,1)
(17,50,1)
(15,58,1)
(16,17,1)
(59,55,1)
(40,41,1)
(8,4,1)
(7,5,1)
(11,3,1)
(28,38,1)
(50,56,1)
(42,31,1)
(33,32,1)
(34,2,1)
(6,58,1)
(20,33,1)
(24,0,1)
(19,6,1)
(60,53,1)
(33,38,1)
(41,13,1)
(48,11,1)
(44,59,1)
(43,33,1)
(2,20,1)
(60,58,1)
(54,39,1)
(52,24,1)
(37,9,1)
(30,11,1)
(22,8,1)
(28,23,1)
(9,58,1)
(43,34,1)
(23,12,1)
(53,19,1)
(39,46,1)
(1,38,1)
(13,15,1)
(58,14,1)
(27,30,1)
(3,7,1)
(36,28,1)
(12,38,1)
(48,11,2)
(44,6,2)
(60,58,2)
(24,58,2)
(13,15,2)
(55,6,2)
(11,3,2)
(28,6,2)
(34,2,2)
(28,38,2)
(12,6,2)
(33,38,2)
(13,6,2)
(0,6,2)
(53,6,2)
(59,6,2)
(60,6,2)
(52,24,2)
(38,6,2)
(43,6,2)
(34,33,2)
(24,6,2)
(52,6,2)
(38,42,2)
(33,6,2)
(50,11,2)
(15,58,2)
(15,6,2)
(1,6,2)
(42,31,2)
(42,6,2)
(23,6,2)
(4,6,2)
(52,38,2)
(58,14,2)
(6,58,2)
(19,6,2)
(20,33,2)
(32,6,2)
(2,33,2)
(13,38,2)
(22,6,2)
(40,6,2)
(41,6,2)
(12,38,2)
(8,6,2)
(21,48,2)
(42,60,2)
-----------------------------------
(0,1)
(1,dataBuffer)
(2,-1)
(3,-1)
(4,\\\'\\\\0\\\')
(5,data)
(6,data < 100)
(7,1)
(8,dataBuffer[data-1] = \\\'\\\\0\\\')
(9,data)
(10,unionSecond)
(11,data = -1)
(12,printLine(dataBuffer)
(13,memset(dataBuffer, \\\'A\\\', data-1)
(14,myUnion.unionSecond)
(15,data-1)
(16,myUnion)
(17,data)
(18,)
(19,dataBuffer)
(20,1)
(21,fscanf(stdin, "%d", &data)
(22,dataBuffer)
(23,dataBuffer)
(24,data-1)
(25,dataBuffer)
(26,if (dataBuffer == NULL)
(27,"%d")
(28,free(dataBuffer)
(29,)
(30,stdin)
(31,char *)
(32,NULL)
(33,dataBuffer == NULL)
(34,exit(-1)
(35,myUnion)
(36,RET)
(37,100)
(38,* dataBuffer = (char *)
(39,unionFirst)
(40,data)
(41,dataBuffer)
(42,(char *)
(43,dataBuffer)
(44,1)
(45,data)
(46,myUnion)
(47,)
(48,&data)
(49,data)
(50,myUnion.unionFirst = data)
(51,data)
(52,dataBuffer[data-1])
(53,data)
(54,myUnion.unionFirst)
(55,\\\'A\\\')
(56,data)
(57,)
(58,data = myUnion.unionSecond)
(59,data)
(60,malloc(data)
(61,if (data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^