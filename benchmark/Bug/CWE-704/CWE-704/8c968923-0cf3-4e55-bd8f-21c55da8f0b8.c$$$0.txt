-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
    else
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FIX: check to make sure conversion is safe */
            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)
            {
                printLine("Value is too small or large to be represented as a float");
            }
            else
            {
                printFloatLine((float)doubleNumber);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
69,70
69,71
71,72
71,73
73,74
74,75
76,77
77,78
77,79
79,80
79,81
81,82
83,84
83,85
83,86
84,85
84,86
85,86
85,87
85,88
85,89
86,87
88,89
90,91
92,93
94,95
96,97
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
112,113
112,114
112,115
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
120,121
122,123
124,125
125,126
126,127
126,128
127,128
130,131
131,132
132,133
132,134
133,134
135,136
135,137
136,137
136,138
139,140
-----nextToken-----
2,4,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,65,70,72,75,78,80,82,87,89,91,93,95,100,103,105,110,111,116,118,121,123,128,129,134,137,138,140
-----computeFrom-----
28,29
28,30
42,43
42,44
84,85
84,86
98,99
98,100
113,114
113,115
114,115
114,116
119,120
119,121
-----guardedBy-----
33,49
89,105
-----guardedByNegation-----
121,140
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: check to make sure conversion is safe */            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: check to make sure conversion is safe */            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }        }    }}
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: check to make sure conversion is safe */            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: check to make sure conversion is safe */            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: check to make sure conversion is safe */            if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)            {                printLine("Value is too small or large to be represented as a float");            }            else            {                printFloatLine((float)doubleNumber);            }
doubleNumber > FLT_MAX || doubleNumber < FLT_MIN
doubleNumber > FLT_MAX
doubleNumber
doubleNumber
FLT_MAX
FLT_MAX
doubleNumber < FLT_MIN
doubleNumber
doubleNumber
FLT_MIN
FLT_MIN
{                printLine("Value is too small or large to be represented as a float");            }
printLine("Value is too small or large to be represented as a float");
printLine("Value is too small or large to be represented as a float")
printLine
printLine
"Value is too small or large to be represented as a float"
{                printFloatLine((float)doubleNumber);            }
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(0,52,0)
(16,15,0)
(51,54,0)
(56,46,0)
(52,9,0)
(31,51,0)
(18,9,0)
(52,53,0)
(34,38,0)
(32,42,0)
(38,9,0)
(10,38,0)
(27,25,0)
(54,30,0)
(62,3,0)
(52,29,0)
(66,27,0)
(15,16,0)
(58,11,0)
(61,9,0)
(22,51,0)
(54,51,0)
(38,53,0)
(23,35,0)
(64,2,0)
(65,32,0)
(51,31,0)
(56,55,0)
(37,32,0)
(50,9,0)
(35,23,0)
(26,53,0)
(1,38,0)
(55,56,0)
(11,53,0)
(44,55,0)
(38,1,0)
(19,23,0)
(18,29,0)
(53,60,0)
(36,15,0)
(13,30,0)
(51,56,0)
(1,7,0)
(17,23,0)
(40,23,0)
(28,18,0)
(53,11,0)
(49,52,0)
(6,43,0)
(47,59,0)
(18,53,0)
(24,3,0)
(29,18,0)
(45,35,0)
(21,30,0)
(8,32,0)
(5,30,0)
(33,18,0)
(20,32,0)
(48,16,0)
(30,41,0)
(12,6,0)
(63,56,0)
(67,64,0)
(51,3,0)
(38,10,0)
(3,30,0)
(9,32,0)
(39,15,0)
(57,15,0)
(29,52,0)
(28,33,1)
(3,62,1)
(38,53,1)
(44,63,1)
(52,53,1)
(35,23,1)
(67,16,1)
(61,14,1)
(51,31,1)
(38,10,1)
(52,9,1)
(45,23,1)
(56,55,1)
(57,36,1)
(18,28,1)
(4,6,1)
(33,52,1)
(27,66,1)
(48,15,1)
(15,39,1)
(9,50,1)
(26,16,1)
(39,57,1)
(49,53,1)
(40,17,1)
(23,19,1)
(52,0,1)
(38,9,1)
(35,45,1)
(58,26,1)
(64,67,1)
(51,3,1)
(49,64,1)
(4,1,1)
(53,11,1)
(0,49,1)
(63,35,1)
(11,58,1)
(29,52,1)
(6,12,1)
(12,29,1)
(17,3,1)
(62,24,1)
(54,51,1)
(51,56,1)
(36,9,1)
(55,44,1)
(16,15,1)
(22,56,1)
(29,18,1)
(24,14,1)
(22,27,1)
(16,48,1)
(19,40,1)
(18,9,1)
(38,34,1)
(18,53,1)
(51,22,1)
(66,35,1)
(34,29,1)
(50,61,1)
(1,38,1)
(4,54,1)
(27,35,2)
(3,14,2)
(38,29,2)
(51,56,2)
(18,53,2)
(15,14,2)
(52,53,2)
(63,35,2)
(55,35,2)
(26,16,2)
(53,11,2)
(35,14,2)
(19,14,2)
(29,18,2)
(64,16,2)
(35,23,2)
(1,29,2)
(1,38,2)
(29,52,2)
(56,35,2)
(66,35,2)
(51,31,2)
(67,16,2)
(9,14,2)
(16,14,2)
(38,53,2)
(45,14,2)
(44,35,2)
(29,14,2)
(12,29,2)
(34,29,2)
(48,14,2)
(52,9,2)
(56,55,2)
(22,14,2)
(50,14,2)
(38,10,2)
(39,14,2)
(53,16,2)
(6,29,2)
(16,15,2)
(36,14,2)
(18,9,2)
(24,14,2)
(62,14,2)
(58,16,2)
(33,52,2)
(51,14,2)
(54,51,2)
(38,9,2)
(49,14,2)
(52,14,2)
(0,14,2)
(54,14,2)
(23,14,2)
(11,16,2)
(28,52,2)
(17,14,2)
(51,3,2)
(57,14,2)
(40,14,2)
(61,14,2)
(18,52,2)
-----------------------------------
(0,FLT_MAX)
(1,printFloatLine((float)
(2,)
(3,doubleNumber = 0)
(4,RET)
(5,doubleNumber)
(6,printLine("Value is too small or large to be represented as a float")
(7,)
(8,doubleNumber)
(9,doubleNumber = 0)
(10,float)
(11,atof(inputBuffer)
(12,"Value is too small or large to be represented as a float")
(13,inputBuffer)
(14,globalReturnsTrueOrFalse()
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,inputBuffer)
(18,doubleNumber < FLT_MIN)
(19,stdin)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,doubleNumber)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,doubleNumber)
(25,)
(26,doubleNumber)
(27,printLine("fgets()
(28,FLT_MIN)
(29,doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)
(30,)
(31,float)
(32,)
(33,doubleNumber)
(34,doubleNumber)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,inputBuffer)
(37,if (doubleNumber > FLT_MAX || doubleNumber < FLT_MIN)
(38,(float)
(39,stdin)
(40,CHAR_ARRAY_SIZE)
(41,)
(42,)
(43,)
(44,inputBuffer)
(45,NULL)
(46,)
(47,if(globalReturnsTrueOrFalse()
(48,NULL)
(49,doubleNumber)
(50,0)
(51,(float)
(52,doubleNumber > FLT_MAX)
(53,doubleNumber = atof(inputBuffer)
(54,printFloatLine((float)
(55,atof(inputBuffer)
(56,doubleNumber = atof(inputBuffer)
(57,CHAR_ARRAY_SIZE)
(58,inputBuffer)
(59,)
(60,)
(61,doubleNumber)
(62,0)
(63,doubleNumber)
(64,printLine("fgets()
(65,inputBuffer)
(66,"fgets()
(67,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^