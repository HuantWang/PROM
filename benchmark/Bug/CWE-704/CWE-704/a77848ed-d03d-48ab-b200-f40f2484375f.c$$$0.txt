-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_51b_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_51b_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_51b_badSink(short data)
CWE194_Unexpected_Sign_Extension__negative_malloc_51b_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,13,0)
(43,36,0)
(5,21,0)
(43,23,0)
(21,39,0)
(20,32,0)
(28,39,0)
(8,0,0)
(24,29,0)
(22,23,0)
(11,0,0)
(13,39,0)
(36,43,0)
(1,21,0)
(31,33,0)
(18,37,0)
(11,21,0)
(37,0,0)
(29,39,0)
(41,37,0)
(32,43,0)
(23,43,0)
(33,17,0)
(35,37,0)
(6,8,0)
(21,23,0)
(32,0,0)
(15,11,0)
(25,11,0)
(23,39,0)
(35,13,0)
(2,4,0)
(3,35,0)
(10,7,0)
(34,8,0)
(29,23,0)
(37,35,0)
(9,16,0)
(43,32,0)
(21,11,0)
(35,23,0)
(7,23,0)
(17,33,0)
(14,39,0)
(16,23,0)
(16,39,0)
(17,19,0)
(26,7,0)
(3,21,1)
(34,6,1)
(11,0,1)
(16,23,1)
(7,10,1)
(26,23,1)
(43,36,1)
(21,23,1)
(23,43,1)
(41,18,1)
(17,33,1)
(1,5,1)
(29,24,1)
(35,23,1)
(16,9,1)
(32,0,1)
(8,34,1)
(8,0,1)
(10,26,1)
(15,25,1)
(38,8,1)
(37,41,1)
(5,17,1)
(20,22,1)
(25,1,1)
(22,8,1)
(33,31,1)
(37,0,1)
(24,16,1)
(31,7,1)
(11,15,1)
(9,13,1)
(18,3,1)
(35,37,1)
(29,23,1)
(21,11,1)
(43,32,1)
(38,29,1)
(32,20,1)
(30,35,1)
(7,23,1)
(5,7,1)
(13,30,1)
(30,8,2)
(22,8,2)
(17,7,2)
(29,23,2)
(43,8,2)
(15,8,2)
(7,23,2)
(31,7,2)
(43,32,2)
(21,8,2)
(11,0,2)
(1,8,2)
(35,23,2)
(24,8,2)
(16,23,2)
(8,0,2)
(20,8,2)
(26,8,2)
(37,8,2)
(41,8,2)
(25,8,2)
(35,37,2)
(3,8,2)
(17,33,2)
(7,8,2)
(5,8,2)
(9,8,2)
(32,8,2)
(21,11,2)
(16,8,2)
(43,36,2)
(29,8,2)
(21,23,2)
(13,8,2)
(23,8,2)
(37,0,2)
(32,0,2)
(18,8,2)
(23,43,2)
(10,8,2)
(35,8,2)
(33,7,2)
(11,8,2)
-----------------------------------
(0,short data)
(1,'A')
(2,if (data < 100)
(3,dataBuffer)
(4,)
(5,dataBuffer)
(6,data)
(7,dataBuffer == NULL)
(8,data < 100)
(9,dataBuffer)
(10,NULL)
(11,data-1)
(12,\'A\')
(13,dataBuffer[data-1] = '\\\\0')
(14,dataBuffer)
(15,1)
(16,printLine(dataBuffer)
(17,exit(-1)
(18,data)
(19,)
(20,data)
(21,memset(dataBuffer, \'A\', data-1)
(22,dataBuffer)
(23,* dataBuffer = (char *)
(24,dataBuffer)
(25,data)
(26,dataBuffer)
(27,memset(dataBuffer, 'A', data-1)
(28,if (dataBuffer == NULL)
(29,free(dataBuffer)
(30,\'\\\\0\')
(31,1)
(32,malloc(data)
(33,-1)
(34,100)
(35,dataBuffer[data-1])
(36,char *)
(37,data-1)
(38,RET)
(39,)
(40,dataBuffer[data-1] = \'\\\\0\')
(41,1)
(42,'\\\\0')
(43,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^