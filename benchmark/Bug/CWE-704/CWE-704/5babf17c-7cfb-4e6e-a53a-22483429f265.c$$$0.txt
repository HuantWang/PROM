-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_05_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
staticTrue
staticTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,4,0)
(36,9,0)
(36,31,0)
(11,15,0)
(54,28,0)
(37,4,0)
(53,4,0)
(29,47,0)
(8,0,0)
(12,42,0)
(4,43,0)
(9,27,0)
(8,9,0)
(51,7,0)
(31,7,0)
(29,7,0)
(33,47,0)
(18,43,0)
(16,25,0)
(9,16,0)
(5,43,0)
(21,33,0)
(20,31,0)
(38,43,0)
(16,35,0)
(39,47,0)
(26,7,0)
(54,9,0)
(22,54,0)
(31,36,0)
(6,7,0)
(36,4,0)
(54,4,0)
(28,17,0)
(10,8,0)
(16,9,0)
(0,8,0)
(0,51,0)
(47,7,0)
(48,31,0)
(14,8,0)
(42,47,0)
(30,50,0)
(3,0,0)
(41,9,0)
(40,36,0)
(2,42,0)
(34,29,0)
(0,47,0)
(1,36,0)
(47,28,0)
(25,16,0)
(49,50,0)
(46,15,0)
(33,7,0)
(15,9,0)
(35,16,0)
(30,45,0)
(28,54,0)
(17,28,0)
(50,30,0)
(31,47,0)
(8,4,0)
(19,51,0)
(28,47,0)
(0,47,1)
(31,36,1)
(1,20,1)
(48,30,1)
(40,1,1)
(4,37,1)
(54,9,1)
(8,4,1)
(19,0,1)
(30,50,1)
(33,21,1)
(15,9,1)
(49,42,1)
(46,9,1)
(47,28,1)
(46,44,1)
(11,46,1)
(12,2,1)
(15,11,1)
(20,48,1)
(9,16,1)
(31,47,1)
(29,34,1)
(13,33,1)
(29,47,1)
(42,12,1)
(33,47,1)
(10,14,1)
(8,10,1)
(36,4,1)
(44,4,1)
(41,44,1)
(37,53,1)
(2,47,1)
(21,29,1)
(39,15,1)
(15,4,1)
(36,9,1)
(36,40,1)
(25,41,1)
(28,54,1)
(54,22,1)
(0,8,1)
(54,4,1)
(13,15,1)
(14,3,1)
(51,19,1)
(3,31,1)
(22,39,1)
(16,25,1)
(48,42,1)
(16,35,1)
(28,17,1)
(42,47,1)
(34,51,1)
(8,9,1)
(50,49,1)
(34,15,2)
(54,4,2)
(2,15,2)
(31,36,2)
(51,15,2)
(9,16,2)
(29,47,2)
(47,28,2)
(54,9,2)
(9,44,2)
(8,9,2)
(36,15,2)
(36,4,2)
(39,15,2)
(47,15,2)
(16,44,2)
(16,35,2)
(48,15,2)
(33,47,2)
(12,15,2)
(22,15,2)
(28,17,2)
(19,15,2)
(31,47,2)
(30,50,2)
(10,15,2)
(29,15,2)
(0,15,2)
(3,15,2)
(36,9,2)
(28,15,2)
(28,54,2)
(54,15,2)
(42,15,2)
(30,42,2)
(16,25,2)
(8,4,2)
(15,9,2)
(25,44,2)
(8,15,2)
(15,4,2)
(0,47,2)
(1,15,2)
(41,44,2)
(42,47,2)
(40,15,2)
(50,42,2)
(33,15,2)
(0,8,2)
(49,42,2)
(14,15,2)
(20,15,2)
(21,15,2)
(31,15,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,data)
(2,dataBuffer)
(3,dataBuffer)
(4,data = 0)
(5,if(staticTrue)
(6,dataBuffer)
(7,)
(8,data-1)
(9,data = (short)
(10,1)
(11,100)
(12,NULL)
(13,RET)
(14,data)
(15,data < 100)
(16,(short)
(17,char *)
(18,data)
(19,'\\\\0')
(20,\'A\')
(21,dataBuffer)
(22,data)
(23,'A')
(24,\'\\\\0\')
(25,RAND32()
(26,if (dataBuffer == NULL)
(27,)
(28,(char *)
(29,printLine(dataBuffer)
(30,exit(-1)
(31,memset(dataBuffer, 'A', data-1)
(32,memset(dataBuffer, \'A\', data-1)
(33,free(dataBuffer)
(34,dataBuffer)
(35,short)
(36,data-1)
(37,0)
(38,if (data < 100)
(39,dataBuffer)
(40,1)
(41,data)
(42,dataBuffer == NULL)
(43,)
(44,staticTrue)
(45,)
(46,data)
(47,* dataBuffer = (char *)
(48,dataBuffer)
(49,1)
(50,-1)
(51,dataBuffer[data-1] = '\\\\0')
(52,dataBuffer[data-1] = \'\\\\0\')
(53,data)
(54,malloc(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^