-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_06_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_06_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_06_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_06_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(53,47,0)
(6,52,0)
(34,40,0)
(45,14,0)
(1,52,0)
(15,34,0)
(15,48,0)
(14,45,0)
(45,24,0)
(35,28,0)
(20,48,0)
(7,1,0)
(39,52,0)
(39,37,0)
(1,26,0)
(25,56,0)
(9,52,0)
(16,19,0)
(35,38,0)
(36,3,0)
(48,12,0)
(43,34,0)
(21,52,0)
(33,9,0)
(49,56,0)
(6,26,0)
(56,52,0)
(9,26,0)
(30,14,0)
(22,34,0)
(20,39,0)
(12,48,0)
(28,35,0)
(23,15,0)
(34,3,0)
(32,6,0)
(13,12,0)
(43,48,0)
(2,37,0)
(31,43,0)
(5,26,0)
(27,26,0)
(50,20,0)
(55,20,0)
(29,19,0)
(10,47,0)
(52,26,0)
(44,15,0)
(4,6,0)
(54,48,0)
(43,6,0)
(35,52,0)
(52,35,0)
(3,34,0)
(37,26,0)
(48,19,0)
(18,39,0)
(6,43,0)
(39,20,0)
(20,34,0)
(38,34,0)
(38,48,0)
(51,38,0)
(38,35,0)
(8,19,0)
(0,43,0)
(33,1,1)
(20,34,1)
(38,48,1)
(9,52,1)
(15,23,1)
(3,36,1)
(6,52,1)
(43,0,1)
(35,28,1)
(20,50,1)
(49,25,1)
(10,48,1)
(44,47,1)
(13,54,1)
(6,43,1)
(15,48,1)
(56,52,1)
(9,33,1)
(2,39,1)
(15,34,1)
(36,22,1)
(38,51,1)
(1,52,1)
(18,6,1)
(56,49,1)
(0,31,1)
(45,14,1)
(39,52,1)
(39,20,1)
(44,34,1)
(34,3,1)
(7,37,1)
(23,44,1)
(21,15,1)
(48,12,1)
(37,2,1)
(22,47,1)
(12,13,1)
(1,7,1)
(51,21,1)
(32,56,1)
(4,32,1)
(43,34,1)
(20,48,1)
(35,38,1)
(32,45,1)
(17,9,1)
(17,15,1)
(30,56,1)
(53,10,1)
(38,34,1)
(25,52,1)
(50,55,1)
(52,35,1)
(43,48,1)
(31,4,1)
(14,30,1)
(55,18,1)
(47,53,1)
(43,15,2)
(52,15,2)
(6,52,2)
(33,15,2)
(9,15,2)
(35,28,2)
(38,34,2)
(1,52,2)
(50,15,2)
(38,48,2)
(43,48,2)
(6,15,2)
(39,20,2)
(6,43,2)
(7,15,2)
(56,52,2)
(51,15,2)
(1,15,2)
(0,15,2)
(49,15,2)
(15,34,2)
(55,15,2)
(3,47,2)
(31,15,2)
(48,12,2)
(38,15,2)
(37,15,2)
(39,52,2)
(20,15,2)
(36,47,2)
(56,15,2)
(22,47,2)
(20,34,2)
(14,56,2)
(34,3,2)
(45,56,2)
(39,15,2)
(35,38,2)
(21,15,2)
(43,34,2)
(18,15,2)
(20,48,2)
(32,15,2)
(52,35,2)
(34,47,2)
(15,48,2)
(2,15,2)
(4,15,2)
(35,15,2)
(45,14,2)
(9,52,2)
(30,56,2)
(25,15,2)
-----------------------------------
(0,1)
(1,printLine(dataBuffer)
(2,\'\\\\0\')
(3,-1)
(4,\'A\')
(5,dataBuffer)
(6,memset(dataBuffer, \'A\', data-1)
(7,dataBuffer)
(8,if(STATIC_CONST_FIVE==5)
(9,free(dataBuffer)
(10,STATIC_CONST_FIVE)
(11,'A')
(12,-1)
(13,1)
(14,-1)
(15,data < 100)
(16,if (data < 100)
(17,RET)
(18,dataBuffer)
(19,)
(20,data-1)
(21,dataBuffer)
(22,data)
(23,100)
(24,)
(25,dataBuffer)
(26,)
(27,if (dataBuffer == NULL)
(28,char *)
(29,data)
(30,1)
(31,data)
(32,dataBuffer)
(33,dataBuffer)
(34,data = -1)
(35,(char *)
(36,1)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,malloc(data)
(39,dataBuffer[data-1])
(40,)
(41,'\\\\0')
(42,dataBuffer[data-1] = '\\\\0')
(43,data-1)
(44,data)
(45,exit(-1)
(46,memset(dataBuffer, 'A', data-1)
(47,STATIC_CONST_FIVE==5)
(48,data = -1)
(49,NULL)
(50,1)
(51,data)
(52,* dataBuffer = (char *)
(53,5)
(54,data)
(55,data)
(56,dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^