-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
22,25
22,26
22,27
22,28
22,29
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
56,58
57,58
57,59
57,60
57,61
57,62
57,63
57,64
57,65
57,66
57,67
57,68
57,69
58,59
59,60
59,61
60,61
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
84,85
87,88
88,89
89,90
91,92
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
100,102
101,102
101,103
102,103
102,104
103,104
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
148,149
148,150
149,150
151,152
151,153
151,154
151,155
151,156
152,153
154,155
156,157
158,159
158,160
159,160
163,164
163,165
164,165
164,166
165,166
165,167
166,167
168,169
170,171
170,172
171,172
174,175
176,177
177,178
177,179
178,179
178,180
179,180
181,182
184,185
185,186
185,187
186,187
188,189
188,190
189,190
191,192
193,194
193,195
193,196
194,195
194,196
195,196
195,197
196,197
198,199
200,201
200,202
201,202
203,204
205,206
206,207
207,208
207,209
208,209
210,211
212,213
213,214
214,215
214,216
215,216
217,218
220,221
220,222
221,222
221,223
222,223
224,225
226,227
227,228
228,229
228,230
229,230
231,232
233,234
233,235
234,235
234,236
235,236
238,239
238,240
238,241
238,242
238,243
238,244
239,240
240,241
240,242
242,243
242,244
242,245
245,246
246,247
246,248
247,248
247,249
249,250
251,252
251,253
252,253
254,255
256,257
256,258
257,258
257,259
258,259
260,261
262,263
263,264
264,265
264,266
265,266
267,268
269,270
270,271
270,272
270,273
270,274
271,272
273,274
276,277
276,278
277,278
280,281
281,282
281,283
282,283
282,284
283,284
285,286
285,287
286,287
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
298,299
300,301
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,36,38,42,44,47,50,52,55,61,64,66,68,70,74,76,78,82,85,86,90,95,96,98,104,105,106,109,111,116,117,120,122,127,129,133,135,138,142,144,146,150,153,155,157,160,161,162,167,169,172,173,175,180,182,183,187,190,192,197,199,202,204,209,211,216,218,219,223,225,230,232,236,237,241,243,244,248,250,253,255,259,261,266,268,272,274,275,278,279,284,287,288,289,293,295,299,301
-----computeFrom-----
12,13
12,14
17,18
17,19
59,60
59,61
72,73
72,74
92,93
92,94
100,101
100,102
113,114
113,115
124,125
124,126
148,149
148,150
158,159
158,160
164,165
164,166
165,166
165,167
170,171
170,172
177,178
177,179
185,186
185,187
194,195
194,196
195,196
195,197
200,201
200,202
207,208
207,209
214,215
214,216
221,222
221,223
234,235
234,236
257,258
257,259
276,277
276,278
281,282
281,283
285,286
285,287
-----guardedBy-----
223,232
236,287
-----guardedByNegation-----
202,218
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_06_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(108,72,0)
(180,109,0)
(103,72,0)
(134,58,0)
(18,136,0)
(160,68,0)
(56,13,0)
(37,154,0)
(43,24,0)
(101,33,0)
(33,101,0)
(29,189,0)
(33,17,0)
(72,150,0)
(85,74,0)
(137,156,0)
(154,127,0)
(147,87,0)
(140,126,0)
(44,41,0)
(33,153,0)
(107,130,0)
(145,156,0)
(144,168,0)
(182,51,0)
(25,11,0)
(105,36,0)
(168,8,0)
(27,75,0)
(7,103,0)
(161,137,0)
(129,150,0)
(11,186,0)
(130,159,0)
(142,71,0)
(87,71,0)
(3,109,0)
(8,95,0)
(108,109,0)
(138,30,0)
(75,27,0)
(88,72,0)
(103,121,0)
(109,188,0)
(127,154,0)
(26,22,0)
(44,30,0)
(65,72,0)
(159,130,0)
(95,8,0)
(70,13,0)
(30,71,0)
(91,141,0)
(130,13,0)
(23,95,0)
(11,20,0)
(170,186,0)
(75,133,0)
(128,41,0)
(64,137,0)
(108,70,0)
(151,133,0)
(93,128,0)
(118,71,0)
(172,20,0)
(179,127,0)
(24,32,0)
(153,104,0)
(58,172,0)
(65,121,0)
(24,11,0)
(135,11,0)
(90,154,0)
(70,130,0)
(153,33,0)
(177,153,0)
(153,177,0)
(139,30,0)
(146,1,0)
(126,41,0)
(171,172,0)
(159,157,0)
(0,156,0)
(84,54,0)
(133,75,0)
(41,20,0)
(82,181,0)
(104,153,0)
(51,13,0)
(22,130,0)
(39,143,0)
(77,84,0)
(18,135,0)
(123,37,0)
(97,136,0)
(156,20,0)
(38,150,0)
(62,56,0)
(67,137,0)
(184,22,0)
(70,108,0)
(121,89,0)
(178,103,0)
(152,90,0)
(19,128,0)
(6,156,0)
(119,186,0)
(186,41,0)
(106,27,0)
(169,70,0)
(8,20,0)
(187,111,0)
(185,20,0)
(47,92,0)
(114,104,0)
(52,37,0)
(180,107,0)
(98,65,0)
(107,56,0)
(109,148,0)
(49,20,0)
(71,176,0)
(46,87,0)
(21,13,0)
(175,15,0)
(165,49,0)
(12,75,0)
(122,71,0)
(116,74,0)
(53,101,0)
(57,71,0)
(63,1,0)
(36,20,0)
(9,180,0)
(96,126,0)
(31,40,0)
(154,90,0)
(44,14,0)
(33,41,0)
(103,109,0)
(172,171,0)
(107,180,0)
(141,41,0)
(1,49,0)
(124,20,0)
(92,186,0)
(115,188,0)
(121,156,0)
(113,92,0)
(162,41,0)
(110,71,0)
(135,18,0)
(58,74,0)
(137,67,0)
(4,150,0)
(69,44,0)
(159,65,0)
(59,70,0)
(180,121,0)
(186,11,0)
(111,13,0)
(17,33,0)
(80,20,0)
(45,121,0)
(54,84,0)
(157,159,0)
(65,159,0)
(32,20,0)
(164,171,0)
(112,20,0)
(149,24,0)
(79,108,0)
(154,37,0)
(54,34,0)
(74,58,0)
(2,71,0)
(99,135,0)
(60,71,0)
(0,67,0)
(155,136,0)
(108,121,0)
(35,180,0)
(78,71,0)
(131,20,0)
(5,0,0)
(75,20,0)
(65,109,0)
(132,13,0)
(16,108,0)
(102,130,0)
(61,33,0)
(10,17,0)
(141,30,0)
(156,6,0)
(67,0,0)
(111,130,0)
(55,36,0)
(136,18,0)
(166,71,0)
(186,92,0)
(120,121,0)
(73,135,0)
(42,71,0)
(50,181,0)
(48,0,0)
(180,72,0)
(167,107,0)
(100,6,0)
(183,168,0)
(188,109,0)
(190,186,0)
(41,128,0)
(125,72,0)
(76,32,0)
(136,11,0)
(83,128,0)
(174,141,0)
(51,130,0)
(39,101,1)
(6,100,1)
(56,62,1)
(180,121,1)
(26,130,1)
(44,30,1)
(58,74,1)
(138,87,1)
(186,92,1)
(22,130,1)
(30,139,1)
(5,137,1)
(41,128,1)
(37,123,1)
(171,164,1)
(61,8,1)
(70,130,1)
(65,109,1)
(135,73,1)
(79,16,1)
(174,28,1)
(156,6,1)
(145,32,1)
(19,93,1)
(98,102,1)
(180,109,1)
(47,190,1)
(133,151,1)
(175,127,1)
(155,97,1)
(33,17,1)
(24,43,1)
(3,67,1)
(139,138,1)
(11,186,1)
(174,160,1)
(126,41,1)
(44,69,1)
(136,155,1)
(0,156,1)
(111,187,1)
(12,27,1)
(17,10,1)
(140,41,1)
(67,0,1)
(130,159,1)
(184,26,1)
(44,41,1)
(76,24,1)
(159,65,1)
(66,111,1)
(67,137,1)
(141,41,1)
(54,84,1)
(141,91,1)
(167,70,1)
(161,64,1)
(174,29,1)
(0,48,1)
(159,157,1)
(120,67,1)
(51,130,1)
(187,51,1)
(154,37,1)
(102,103,1)
(144,172,1)
(7,173,1)
(113,47,1)
(33,153,1)
(151,12,1)
(48,5,1)
(136,11,1)
(7,181,1)
(181,82,1)
(103,178,1)
(121,156,1)
(18,135,1)
(90,152,1)
(108,109,1)
(65,121,1)
(173,44,1)
(107,130,1)
(25,101,1)
(28,121,1)
(108,121,1)
(111,130,1)
(103,72,1)
(182,56,1)
(116,49,1)
(108,79,1)
(153,177,1)
(85,116,1)
(27,106,1)
(72,88,1)
(128,83,1)
(126,96,1)
(35,9,1)
(172,171,1)
(59,169,1)
(88,125,1)
(23,168,1)
(154,90,1)
(83,19,1)
(46,147,1)
(101,53,1)
(97,135,1)
(84,77,1)
(179,154,1)
(174,39,1)
(149,18,1)
(66,103,1)
(82,50,1)
(53,33,1)
(45,120,1)
(87,46,1)
(190,170,1)
(100,145,1)
(169,22,1)
(186,119,1)
(127,179,1)
(165,1,1)
(77,22,1)
(29,126,1)
(146,63,1)
(58,134,1)
(162,36,1)
(52,28,1)
(49,165,1)
(180,35,1)
(31,173,1)
(36,55,1)
(103,121,1)
(127,154,1)
(178,7,1)
(9,167,1)
(103,109,1)
(93,162,1)
(22,184,1)
(121,45,1)
(188,115,1)
(96,140,1)
(107,180,1)
(95,23,1)
(33,41,1)
(10,153,1)
(16,59,1)
(91,174,1)
(105,127,1)
(28,109,1)
(141,30,1)
(123,52,1)
(173,141,1)
(114,61,1)
(32,76,1)
(169,54,1)
(99,11,1)
(64,156,1)
(18,136,1)
(69,141,1)
(52,30,1)
(147,181,1)
(8,95,1)
(75,27,1)
(170,25,1)
(65,72,1)
(153,104,1)
(119,92,1)
(134,74,1)
(50,72,1)
(108,72,1)
(135,11,1)
(70,108,1)
(65,98,1)
(168,183,1)
(73,99,1)
(7,31,1)
(74,85,1)
(137,161,1)
(115,3,1)
(101,33,1)
(186,41,1)
(180,72,1)
(164,58,1)
(43,149,1)
(92,113,1)
(152,37,1)
(75,133,1)
(183,144,1)
(63,75,1)
(51,182,1)
(62,107,1)
(160,18,1)
(106,126,1)
(109,188,1)
(55,105,1)
(24,11,1)
(137,156,1)
(1,146,1)
(104,114,1)
(174,175,1)
(111,103,2)
(22,103,2)
(18,136,2)
(179,181,2)
(84,22,2)
(126,41,2)
(43,18,2)
(70,103,2)
(152,28,2)
(156,18,2)
(92,101,2)
(87,181,2)
(36,127,2)
(18,135,2)
(102,103,2)
(179,28,2)
(153,104,2)
(159,157,2)
(154,181,2)
(164,126,2)
(37,181,2)
(170,101,2)
(8,95,2)
(11,186,2)
(79,103,2)
(17,126,2)
(138,181,2)
(171,126,2)
(90,28,2)
(180,109,2)
(103,72,2)
(65,109,2)
(107,180,2)
(108,121,2)
(67,0,2)
(63,126,2)
(33,17,2)
(24,11,2)
(173,181,2)
(99,101,2)
(33,41,2)
(90,181,2)
(130,159,2)
(120,67,2)
(159,65,2)
(11,101,2)
(108,109,2)
(10,126,2)
(95,126,2)
(0,156,2)
(54,22,2)
(49,126,2)
(128,127,2)
(30,181,2)
(113,101,2)
(151,126,2)
(29,126,2)
(52,28,2)
(91,181,2)
(108,72,2)
(139,181,2)
(127,181,2)
(123,28,2)
(135,101,2)
(16,103,2)
(108,103,2)
(104,126,2)
(32,18,2)
(9,103,2)
(33,153,2)
(140,127,2)
(75,126,2)
(147,181,2)
(136,11,2)
(105,127,2)
(182,103,2)
(25,101,2)
(159,103,2)
(167,103,2)
(141,181,2)
(186,92,2)
(162,127,2)
(180,121,2)
(103,121,2)
(77,22,2)
(19,127,2)
(109,67,2)
(172,126,2)
(154,28,2)
(98,103,2)
(126,127,2)
(172,171,2)
(1,126,2)
(31,173,2)
(24,18,2)
(55,127,2)
(67,137,2)
(74,126,2)
(155,135,2)
(64,18,2)
(188,67,2)
(53,126,2)
(130,103,2)
(65,103,2)
(127,28,2)
(141,41,2)
(180,103,2)
(137,156,2)
(6,18,2)
(44,30,2)
(168,126,2)
(187,103,2)
(141,30,2)
(106,126,2)
(111,130,2)
(109,188,2)
(75,27,2)
(70,108,2)
(51,103,2)
(61,126,2)
(44,141,2)
(58,126,2)
(100,18,2)
(37,28,2)
(136,135,2)
(69,141,2)
(153,126,2)
(152,181,2)
(186,41,2)
(165,126,2)
(41,127,2)
(39,101,2)
(154,37,2)
(116,126,2)
(46,181,2)
(160,18,2)
(73,101,2)
(75,133,2)
(62,103,2)
(0,137,2)
(35,103,2)
(190,101,2)
(103,109,2)
(45,67,2)
(156,6,2)
(154,90,2)
(85,126,2)
(65,121,2)
(123,181,2)
(26,103,2)
(23,126,2)
(76,18,2)
(149,18,2)
(93,127,2)
(47,101,2)
(137,18,2)
(5,137,2)
(135,11,2)
(59,103,2)
(56,103,2)
(183,126,2)
(54,84,2)
(96,127,2)
(52,181,2)
(65,72,2)
(127,154,2)
(121,156,2)
(22,130,2)
(8,126,2)
(174,181,2)
(27,126,2)
(28,18,2)
(134,126,2)
(67,18,2)
(144,126,2)
(153,177,2)
(186,101,2)
(83,127,2)
(70,130,2)
(145,18,2)
(121,67,2)
(51,130,2)
(119,101,2)
(12,126,2)
(101,33,2)
(161,18,2)
(18,101,2)
(107,103,2)
(58,74,2)
(107,130,2)
(41,128,2)
(180,72,2)
(97,135,2)
(175,127,2)
(115,67,2)
(146,126,2)
(33,126,2)
(101,126,2)
(114,126,2)
(133,126,2)
(48,137,2)
(184,103,2)
(3,67,2)
(44,41,2)
(169,103,2)
-----------------------------------
(0,tempInt < SHRT_MIN)
(1,service.sin_family)
(2,wsaData)
(3,data)
(4,if (data < 100)
(5,tempInt)
(6,atoi(inputBuffer)
(7,data)
(8,service.sin_port = htons(TCP_PORT)
(9,data)
(10,service)
(11,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(12,0)
(13,)
(14,)
(15,)
(16,data)
(17,sizeof(service)
(18,recvResult == SOCKET_ERROR || recvResult == 0)
(19,SOCK_STREAM)
(20,)
(21,dataBuffer)
(22,dataBuffer == NULL)
(23,TCP_PORT)
(24,inputBuffer[recvResult])
(25,recvResult)
(26,dataBuffer)
(27,&service)
(28,0)
(29,break;)
(30,connectSocket = INVALID_SOCKET)
(31,WSACleanup()
(32,inputBuffer[recvResult] = '\\\\0')
(33,connect(connectSocket, (struct sockaddr*)
(34,)
(35,1)
(36,wsaDataInit = 1)
(37,MAKEWORD(2,2)
(38,if(STATIC_CONST_FIVE==5)
(39,break;)
(40,)
(41,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(42,wsaDataInit)
(43,recvResult)
(44,CLOSE_SOCKET(connectSocket)
(45,tempInt)
(46,0)
(47,CHAR_ARRAY_SIZE)
(48,SHRT_MIN)
(49,service.sin_family = AF_INET)
(50,STATIC_CONST_FIVE)
(51,printLine(dataBuffer)
(52,2)
(53,SOCKET_ERROR)
(54,exit(-1)
(55,1)
(56,dataBuffer[data-1] = '\\\\0')
(57,do)
(58,service.sin_addr.s_addr)
(59,'A')
(60,service)
(61,connectSocket)
(62,'\\\\0')
(63,service)
(64,tempInt)
(65,malloc(data)
(66,RET)
(67,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(68,)
(69,connectSocket)
(70,memset(dataBuffer, 'A', data-1)
(71,)
(72,data = 0)
(73,SOCKET_ERROR)
(74,service.sin_addr)
(75,memset(&service, 0, sizeof(service)
(76,\'\\\\0\')
(77,1)
(78,connectSocket)
(79,1)
(80,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(81,memset(dataBuffer, \'A\', data-1)
(82,5)
(83,IPPROTO_TCP)
(84,-1)
(85,sin_addr)
(86,inputBuffer[recvResult] = \'\\\\0\')
(87,wsaDataInit = 0)
(88,0)
(89,)
(90,&wsaData)
(91,INVALID_SOCKET)
(92,CHAR_ARRAY_SIZE - 1)
(93,AF_INET)
(94,\'\\\\0\')
(95,htons(TCP_PORT)
(96,INVALID_SOCKET)
(97,recvResult)
(98,data)
(99,recvResult)
(100,inputBuffer)
(101,connect(connectSocket, (struct sockaddr*)
(102,dataBuffer)
(103,data < 100)
(104,&service)
(105,wsaDataInit)
(106,service)
(107,dataBuffer[data-1])
(108,data-1)
(109,data = -1)
(110,inputBuffer)
(111,free(dataBuffer)
(112,if (recvResult == SOCKET_ERROR || recvResult == 0)
(113,1)
(114,service)
(115,1)
(116,service)
(117,\'A\')
(118,if (connectSocket != INVALID_SOCKET)
(119,0)
(120,data)
(121,data = tempInt)
(122,if (wsaDataInit)
(123,2)
(124,if (connect(connectSocket, (struct sockaddr*)
(125,data)
(126,connectSocket == INVALID_SOCKET)
(127,WSAStartup(MAKEWORD(2,2)
(128,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(129,data)
(130,* dataBuffer = (char *)
(131,if (connectSocket == INVALID_SOCKET)
(132,if (dataBuffer == NULL)
(133,sizeof(service)
(134,s_addr)
(135,recvResult == SOCKET_ERROR)
(136,recvResult == 0)
(137,tempInt > SHRT_MAX)
(138,connectSocket)
(139,INVALID_SOCKET)
(140,connectSocket)
(141,connectSocket != INVALID_SOCKET)
(142,recvResult)
(143,)
(144,service)
(145,tempInt)
(146,sin_family)
(147,wsaDataInit)
(148,)
(149,inputBuffer)
(150,)
(151,service)
(152,wsaData)
(153,(struct sockaddr*)
(154,WSAStartup(MAKEWORD(2,2)
(155,0)
(156,tempInt = atoi(inputBuffer)
(157,char *)
(158,dataBuffer[data-1] = \'\\\\0\')
(159,(char *)
(160,break;)
(161,SHRT_MAX)
(162,connectSocket)
(163,'\\\\0')
(164,IP_ADDRESS)
(165,AF_INET)
(166,tempInt)
(167,dataBuffer)
(168,service.sin_port)
(169,dataBuffer)
(170,connectSocket)
(171,inet_addr(IP_ADDRESS)
(172,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(173,wsaDataInit)
(174,connectSocket)
(175,break;)
(176,)
(177,struct sockaddr*)
(178,100)
(179,NO_ERROR)
(180,data-1)
(181,STATIC_CONST_FIVE==5)
(182,dataBuffer)
(183,sin_port)
(184,NULL)
(185,if (WSAStartup(MAKEWORD(2,2)
(186,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(187,dataBuffer)
(188,-1)
(189,)
(190,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^