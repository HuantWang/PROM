-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
60,61
61,62
61,63
62,63
62,64
63,64
65,66
65,67
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
85,86
86,87
86,88
87,88
87,89
88,89
90,91
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,38,40,43,45,47,49,53,55,56,58,59,64,66,67,68,72,73,78,80,82,84,89,91,92,96,98
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
57,58
57,59
61,62
61,63
65,66
65,67
70,71
70,72
86,87
86,88
-----guardedBy-----
72,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_14_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(10,36,0)
(44,43,0)
(34,29,0)
(37,22,0)
(8,26,0)
(28,43,0)
(9,36,0)
(0,36,0)
(6,29,0)
(16,40,0)
(42,39,0)
(35,22,0)
(42,40,0)
(3,36,0)
(47,46,0)
(24,32,0)
(32,40,0)
(38,43,0)
(3,40,0)
(38,47,0)
(3,39,0)
(36,0,0)
(43,38,0)
(10,39,0)
(30,3,0)
(18,42,0)
(0,14,0)
(20,45,0)
(7,39,0)
(25,38,0)
(41,46,0)
(26,5,0)
(50,42,0)
(4,0,0)
(1,42,0)
(46,45,0)
(17,47,0)
(39,45,0)
(2,40,0)
(42,36,0)
(19,3,0)
(29,6,0)
(32,46,0)
(40,46,0)
(48,46,0)
(11,39,0)
(29,46,0)
(49,6,0)
(27,6,0)
(21,10,0)
(3,26,0)
(12,10,0)
(42,5,0)
(36,23,0)
(31,45,0)
(0,4,0)
(13,29,0)
(33,46,0)
(14,0,0)
(34,13,1)
(22,35,1)
(42,50,1)
(30,42,1)
(19,30,1)
(39,7,1)
(50,18,1)
(3,40,1)
(16,36,1)
(24,26,1)
(4,9,1)
(24,10,1)
(15,32,1)
(27,49,1)
(10,21,1)
(3,39,1)
(10,36,1)
(37,39,1)
(36,0,1)
(17,38,1)
(3,36,1)
(16,22,1)
(1,10,1)
(12,47,1)
(32,24,1)
(43,44,1)
(42,39,1)
(10,39,1)
(29,6,1)
(3,19,1)
(18,1,1)
(0,14,1)
(44,28,1)
(40,2,1)
(9,22,1)
(2,16,1)
(42,36,1)
(35,37,1)
(32,40,1)
(7,11,1)
(21,12,1)
(25,29,1)
(42,40,1)
(0,4,1)
(13,40,1)
(8,3,1)
(28,25,1)
(47,17,1)
(49,34,1)
(38,43,1)
(26,8,1)
(6,27,1)
(4,22,2)
(3,40,2)
(42,10,2)
(0,4,2)
(9,22,2)
(0,14,2)
(3,10,2)
(26,10,2)
(0,22,2)
(36,0,2)
(29,6,2)
(1,10,2)
(32,40,2)
(50,10,2)
(30,10,2)
(19,10,2)
(3,39,2)
(42,39,2)
(3,36,2)
(8,10,2)
(42,36,2)
(10,39,2)
(38,43,2)
(10,36,2)
(18,10,2)
(42,40,2)
(36,22,2)
-----------------------------------
(0,(short)
(1,dest)
(2,"")
(3,dest[data])
(4,RAND32()
(5,)
(6,100-1)
(7,0)
(8,\\\'\\\\0\\\')
(9,data)
(10,data < 100)
(11,data)
(12,data)
(13,source)
(14,short)
(15,RET)
(16,dest)
(17,\\\'\\\\0\\\')
(18,source)
(19,data)
(20,if(globalFive==5)
(21,100)
(22,globalFive==5)
(23,)
(24,dest)
(25,source)
(26,dest[data] = \\\'\\\\0\\\')
(27,1)
(28,100)
(29,memset(source, \\\'A\\\', 100-1)
(30,dest)
(31,data)
(32,printLine(dest)
(33,source)
(34,\\\'A\\\')
(35,5)
(36,data = (short)
(37,globalFive)
(38,source[100-1])
(39,data = 0)
(40,dest[100] = "")
(41,dest)
(42,memcpy(dest, source, data)
(43,100-1)
(44,1)
(45,)
(46,)
(47,source[100-1] = \\\'\\\\0\\\')
(48,if (data < 100)
(49,100)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^