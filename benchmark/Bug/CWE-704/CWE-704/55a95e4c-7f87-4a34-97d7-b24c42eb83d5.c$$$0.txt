-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
-----nextToken-----
2,4,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,65
-----computeFrom-----
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad(){    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_08_bad
{    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(6,13,0)
(0,12,0)
(7,12,0)
(15,9,0)
(21,3,0)
(24,3,0)
(24,1,0)
(19,9,0)
(8,16,0)
(4,24,0)
(8,28,0)
(9,22,0)
(13,29,0)
(8,24,0)
(12,26,0)
(11,8,0)
(8,7,0)
(16,8,0)
(28,8,0)
(17,7,0)
(10,7,0)
(22,9,0)
(2,9,0)
(3,24,0)
(23,12,0)
(14,22,0)
(20,12,0)
(25,5,0)
(16,12,0)
(9,2,1)
(22,14,1)
(27,16,1)
(8,11,1)
(22,9,1)
(19,15,1)
(14,9,1)
(8,28,1)
(21,4,1)
(7,10,1)
(8,7,1)
(15,7,1)
(10,17,1)
(2,19,1)
(11,24,1)
(11,13,1)
(4,22,1)
(24,3,1)
(17,18,1)
(27,18,1)
(6,22,1)
(16,8,1)
(3,21,1)
(8,24,1)
(13,6,1)
(16,8,2)
(22,18,2)
(24,3,2)
(3,22,2)
(8,28,2)
(24,22,2)
(9,18,2)
(11,18,2)
(13,22,2)
(14,18,2)
(10,18,2)
(15,18,2)
(8,24,2)
(8,18,2)
(4,22,2)
(22,9,2)
(21,22,2)
(7,18,2)
(8,7,2)
(17,18,2)
(6,22,2)
(16,18,2)
(2,18,2)
(19,18,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,)
(2,stdin)
(3,atof(inputBuffer)
(4,doubleNumber)
(5,)
(6,"fgets()
(7,doubleNumber = 0)
(8,(float)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,0)
(11,doubleNumber)
(12,)
(13,printLine("fgets()
(14,NULL)
(15,inputBuffer)
(16,printFloatLine((float)
(17,doubleNumber)
(18,staticReturnsTrue()
(19,CHAR_ARRAY_SIZE)
(20,doubleNumber)
(21,inputBuffer)
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,inputBuffer)
(24,doubleNumber = atof(inputBuffer)
(25,if(staticReturnsTrue()
(26,)
(27,RET)
(28,float)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^