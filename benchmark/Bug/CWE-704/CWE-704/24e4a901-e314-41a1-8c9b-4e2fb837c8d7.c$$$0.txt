-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
73,75
73,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,67,69,72,74,76,78,82,84,85,87,88,93,95,96,97,101,102,107,109,111,113,118,120,121,125,127
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
86,87
86,88
90,91
90,92
94,95
94,96
99,100
99,101
115,116
115,117
-----guardedBy-----
39,55
101,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(55,10,0)
(15,56,0)
(32,33,0)
(42,11,0)
(30,24,0)
(37,34,0)
(36,11,0)
(39,24,0)
(54,40,0)
(34,47,0)
(43,34,0)
(34,29,0)
(10,63,0)
(48,40,0)
(3,31,0)
(4,20,0)
(29,58,0)
(20,53,0)
(22,34,0)
(17,29,0)
(24,40,0)
(13,47,0)
(59,57,0)
(20,19,0)
(18,11,0)
(34,63,0)
(34,11,0)
(0,24,0)
(3,57,0)
(44,18,0)
(7,1,0)
(60,30,0)
(53,20,0)
(56,29,0)
(40,1,0)
(5,13,0)
(2,29,0)
(62,56,0)
(52,28,0)
(23,53,0)
(46,36,0)
(25,57,0)
(2,57,0)
(14,18,0)
(11,36,0)
(16,53,0)
(11,1,0)
(26,63,0)
(45,3,0)
(18,29,0)
(57,28,0)
(38,31,0)
(56,11,0)
(35,3,0)
(31,3,0)
(24,30,0)
(28,64,0)
(9,3,0)
(19,40,0)
(8,2,0)
(18,63,0)
(21,19,0)
(51,1,0)
(33,6,0)
(18,13,0)
(63,40,0)
(50,63,0)
(27,40,0)
(61,30,0)
(29,2,0)
(10,40,0)
(12,28,0)
(15,19,1)
(31,3,1)
(56,29,1)
(38,3,1)
(33,32,1)
(2,8,1)
(36,46,1)
(46,42,1)
(34,11,1)
(62,15,1)
(26,50,1)
(53,23,1)
(10,63,1)
(45,57,1)
(20,53,1)
(44,34,1)
(60,61,1)
(29,2,1)
(57,59,1)
(4,24,1)
(50,29,1)
(8,17,1)
(22,43,1)
(61,39,1)
(3,9,1)
(25,49,1)
(56,11,1)
(23,16,1)
(55,56,1)
(55,13,1)
(16,4,1)
(11,36,1)
(18,11,1)
(35,45,1)
(39,0,1)
(2,57,1)
(24,30,1)
(31,38,1)
(63,26,1)
(50,49,1)
(37,56,1)
(9,35,1)
(50,33,1)
(18,63,1)
(43,37,1)
(34,22,1)
(19,21,1)
(18,14,1)
(49,11,1)
(34,63,1)
(30,60,1)
(56,62,1)
(13,5,1)
(59,25,1)
(34,29,1)
(5,18,1)
(3,57,1)
(18,29,1)
(17,31,1)
(41,10,1)
(21,20,1)
(32,31,1)
(14,44,1)
(0,63,1)
(10,55,1)
(5,56,2)
(25,49,2)
(38,49,2)
(11,36,2)
(34,11,2)
(18,29,2)
(34,29,2)
(3,49,2)
(18,11,2)
(29,2,2)
(22,56,2)
(44,56,2)
(29,31,2)
(10,63,2)
(33,31,2)
(31,49,2)
(18,63,2)
(45,49,2)
(2,57,2)
(3,57,2)
(43,56,2)
(2,31,2)
(34,56,2)
(34,63,2)
(31,3,2)
(8,31,2)
(56,29,2)
(14,56,2)
(57,49,2)
(35,49,2)
(32,31,2)
(24,30,2)
(20,53,2)
(18,56,2)
(37,56,2)
(13,56,2)
(9,49,2)
(17,31,2)
(59,49,2)
(56,11,2)
-----------------------------------
(0,source)
(1,)
(2,atoi(inputBuffer)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,source)
(5,\\\'\\\\0\\\')
(6,)
(7,if(globalReturnsTrue()
(8,inputBuffer)
(9,stdin)
(10,printLine(dest)
(11,data = -1)
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,dest[data] = \\\'\\\\0\\\')
(14,data)
(15,data)
(16,100)
(17,data)
(18,dest[data])
(19,source[100-1] = \\\'\\\\0\\\')
(20,source[100-1])
(21,\\\'\\\\0\\\')
(22,data)
(23,1)
(24,memset(source, \\\'A\\\', 100-1)
(25,inputBuffer)
(26,"")
(27,source)
(28,)
(29,data = atoi(inputBuffer)
(30,100-1)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,"fgets()
(33,printLine("fgets()
(34,memmove(dest, source, data)
(35,CHAR_ARRAY_SIZE)
(36,-1)
(37,dest)
(38,NULL)
(39,\\\'A\\\')
(40,)
(41,RET)
(42,data)
(43,source)
(44,dest)
(45,inputBuffer)
(46,1)
(47,)
(48,dest)
(49,globalReturnsTrue()
(50,dest)
(51,data)
(52,inputBuffer)
(53,100-1)
(54,if (data < 100)
(55,dest)
(56,data < 100)
(57,inputBuffer[CHAR_ARRAY_SIZE] = "")
(58,)
(59,"")
(60,1)
(61,100)
(62,100)
(63,dest[100] = "")
(64,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^