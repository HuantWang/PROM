-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a number larger than SHRT_MAX */
        data = SHRT_MAX + 5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
52,54
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,43,47,49,53,54,56,60,62
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_large_to_char_17_bad()
CWE197_Numeric_Truncation_Error__int_large_to_char_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
data = SHRT_MAX + 5;
data = SHRT_MAX + 5
data
data
SHRT_MAX + 5
SHRT_MAX
SHRT_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(5,16,0)
(11,17,0)
(0,16,0)
(8,0,0)
(22,29,0)
(19,27,0)
(18,17,0)
(14,0,0)
(13,15,0)
(27,29,0)
(11,29,0)
(10,16,0)
(17,9,0)
(6,7,0)
(0,14,0)
(18,9,0)
(7,15,0)
(12,15,0)
(2,11,0)
(31,11,0)
(9,16,0)
(21,14,0)
(29,27,0)
(20,16,0)
(3,13,0)
(11,31,0)
(26,17,0)
(17,11,0)
(28,18,0)
(4,15,0)
(25,27,0)
(30,13,0)
(29,1,0)
(23,9,0)
(11,0,0)
(4,12,1)
(7,15,1)
(30,15,1)
(11,29,1)
(28,17,1)
(26,13,1)
(15,4,1)
(7,6,1)
(13,15,1)
(0,14,1)
(18,17,1)
(12,0,1)
(29,27,1)
(2,26,1)
(11,0,1)
(17,11,1)
(11,31,1)
(6,29,1)
(25,22,1)
(3,30,1)
(14,21,1)
(22,13,1)
(13,3,1)
(27,19,1)
(11,2,1)
(18,28,1)
(30,7,1)
(24,18,1)
(19,25,1)
(21,8,1)
(22,13,2)
(11,29,2)
(30,13,2)
(3,13,2)
(7,13,2)
(13,15,2)
(19,13,2)
(6,13,2)
(17,11,2)
(27,13,2)
(18,17,2)
(0,14,2)
(25,13,2)
(11,31,2)
(11,0,2)
(13,13,2)
(7,15,2)
(29,27,2)
(29,13,2)
-----------------------------------
(0,data = -1)
(1,)
(2,data)
(3,1)
(4,0)
(5,data)
(6,i)
(7,i++)
(8,data)
(9,)
(10,for(i = 0; i < 1; i++)
(11,(char)
(12,i)
(13,i < 1)
(14,-1)
(15,i = 0)
(16,)
(17,charData = (char)
(18,printHexCharLine(charData)
(19,5)
(20,i)
(21,1)
(22,data)
(23,charData)
(24,RET)
(25,SHRT_MAX)
(26,charData)
(27,SHRT_MAX + 5)
(28,charData)
(29,data = SHRT_MAX + 5)
(30,i)
(31,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^