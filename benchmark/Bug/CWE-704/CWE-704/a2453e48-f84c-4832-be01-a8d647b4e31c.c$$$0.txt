-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
42,44
42,45
45,46
46,47
46,48
47,48
47,49
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,41,43,44,48,50,53,55,59,61,66,68,72,74,75,78,79,84,87,88,89,93,95,99,101
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
57,58
57,59
76,77
76,78
81,82
81,83
85,86
85,87
-----guardedBy-----
36,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_14_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(29,43,0)
(47,40,0)
(20,41,0)
(14,44,0)
(26,28,0)
(19,33,0)
(56,22,0)
(37,10,0)
(16,12,0)
(24,33,0)
(25,22,0)
(38,25,0)
(36,28,0)
(17,11,0)
(45,20,0)
(6,15,0)
(27,20,0)
(18,0,0)
(1,40,0)
(44,10,0)
(28,36,0)
(15,33,0)
(43,29,0)
(16,51,0)
(36,15,0)
(34,33,0)
(32,36,0)
(55,6,0)
(36,41,0)
(20,15,0)
(8,22,0)
(4,36,0)
(0,15,0)
(39,47,0)
(40,22,0)
(45,13,0)
(6,41,0)
(10,45,0)
(23,15,0)
(29,35,0)
(7,6,0)
(41,16,0)
(31,37,0)
(10,22,0)
(5,11,0)
(52,10,0)
(16,41,0)
(45,10,0)
(20,45,0)
(12,16,0)
(41,53,0)
(9,43,0)
(3,15,0)
(47,10,0)
(46,0,0)
(44,22,0)
(51,16,0)
(6,47,0)
(54,37,0)
(13,45,0)
(21,28,0)
(25,10,0)
(0,41,0)
(28,10,0)
(42,41,0)
(47,6,0)
(28,22,0)
(40,1,1)
(12,42,1)
(44,14,1)
(15,3,1)
(30,0,1)
(42,11,1)
(54,10,1)
(52,0,1)
(36,41,1)
(6,41,1)
(37,31,1)
(26,37,1)
(7,55,1)
(45,20,1)
(46,18,1)
(16,51,1)
(27,52,1)
(28,36,1)
(21,26,1)
(11,5,1)
(39,28,1)
(3,23,1)
(36,4,1)
(6,15,1)
(0,15,1)
(26,29,1)
(25,38,1)
(47,10,1)
(47,6,1)
(55,39,1)
(28,10,1)
(10,45,1)
(31,54,1)
(6,7,1)
(20,27,1)
(32,21,1)
(20,15,1)
(17,15,1)
(36,15,1)
(30,44,1)
(18,11,1)
(18,41,1)
(38,40,1)
(9,37,1)
(16,12,1)
(25,10,1)
(43,9,1)
(45,13,1)
(29,43,1)
(0,46,1)
(44,10,1)
(20,41,1)
(5,17,1)
(14,25,1)
(4,32,1)
(41,16,1)
(0,41,1)
(37,10,1)
(1,47,1)
(40,0,2)
(54,0,2)
(41,16,2)
(0,15,2)
(0,41,2)
(55,0,2)
(37,10,2)
(25,0,2)
(47,10,2)
(52,0,2)
(38,0,2)
(25,10,2)
(12,11,2)
(16,11,2)
(45,13,2)
(16,51,2)
(44,0,2)
(10,45,2)
(21,0,2)
(28,36,2)
(31,0,2)
(45,20,2)
(4,0,2)
(9,37,2)
(6,0,2)
(10,0,2)
(36,0,2)
(6,15,2)
(7,0,2)
(28,0,2)
(47,0,2)
(36,41,2)
(37,0,2)
(45,0,2)
(28,10,2)
(32,0,2)
(29,37,2)
(47,6,2)
(20,41,2)
(27,0,2)
(6,41,2)
(1,0,2)
(41,11,2)
(43,37,2)
(14,0,2)
(36,15,2)
(20,0,2)
(44,10,2)
(42,11,2)
(29,43,2)
(39,0,2)
(26,0,2)
(16,12,2)
(20,15,2)
-----------------------------------
(0,data < 100)
(1,\'\\\\0\')
(2,'\\\\0')
(3,0)
(4,1)
(5,5)
(6,data-1)
(7,1)
(8,if (dataBuffer == NULL)
(9,1)
(10,* dataBuffer = (char *)
(11,globalFive==5)
(12,RAND32()
(13,char *)
(14,dataBuffer)
(15,data = 0)
(16,(short)
(17,globalFive)
(18,data)
(19,if(globalFive==5)
(20,malloc(data)
(21,'A')
(22,)
(23,data)
(24,if (data < 100)
(25,printLine(dataBuffer)
(26,dataBuffer)
(27,data)
(28,memset(dataBuffer, 'A', data-1)
(29,exit(-1)
(30,RET)
(31,NULL)
(32,data)
(33,)
(34,data)
(35,)
(36,data-1)
(37,dataBuffer == NULL)
(38,dataBuffer)
(39,dataBuffer)
(40,dataBuffer[data-1] = \'\\\\0\')
(41,data = (short)
(42,data)
(43,-1)
(44,free(dataBuffer)
(45,(char *)
(46,100)
(47,dataBuffer[data-1])
(48,memset(dataBuffer, \'A\', data-1)
(49,\'A\')
(50,dataBuffer[data-1] = '\\\\0')
(51,short)
(52,dataBuffer)
(53,)
(54,dataBuffer)
(55,data)
(56,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^