-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad()
{
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE];
        double doubleNumber = 0;
        /*  * Enter: -2.0, result should be 0 (for bad case)
         *
         * Square root of a negative number is NaN. NaN when casted to int is 0.
         */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Read a double */
            doubleNumber = atof(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
        /* FLAW: should not cast without checking if conversion is safe */
        printIntLine((int)(sqrt(doubleNumber)));
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
65,66
65,67
66,67
68,69
72,73
73,74
73,75
74,75
-----nextToken-----
2,4,7,10,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,67,69,70,71,75,76,77
-----computeFrom-----
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad(){    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_15_bad
{    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Read a double */            doubleNumber = atof(inputBuffer);        }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(19,35,0)
(7,12,0)
(3,17,0)
(11,19,0)
(18,2,0)
(25,12,0)
(14,6,0)
(29,25,0)
(20,36,0)
(5,6,0)
(32,2,0)
(8,9,0)
(34,25,0)
(35,4,0)
(1,20,0)
(28,35,0)
(27,2,0)
(20,28,0)
(26,32,0)
(12,25,0)
(28,32,0)
(15,22,0)
(2,6,0)
(35,19,0)
(1,2,0)
(0,32,0)
(31,6,0)
(17,6,0)
(20,1,0)
(16,6,0)
(21,28,0)
(30,2,0)
(36,20,0)
(13,25,0)
(33,8,0)
(28,20,0)
(23,35,0)
(12,7,1)
(31,1,1)
(19,11,1)
(0,24,1)
(7,25,1)
(25,13,1)
(3,24,1)
(13,34,1)
(10,5,1)
(21,8,1)
(26,0,1)
(28,21,1)
(28,35,1)
(8,33,1)
(32,26,1)
(23,12,1)
(5,17,1)
(28,32,1)
(21,35,1)
(12,25,1)
(1,20,1)
(11,23,1)
(34,29,1)
(35,19,1)
(29,32,1)
(20,36,1)
(33,12,1)
(20,28,1)
(10,31,1)
(17,3,1)
(5,24,2)
(28,35,2)
(20,24,2)
(35,12,2)
(23,12,2)
(20,36,2)
(31,24,2)
(21,24,2)
(1,24,2)
(20,28,2)
(28,32,2)
(12,25,2)
(35,19,2)
(28,24,2)
(1,20,2)
(8,12,2)
(33,12,2)
(3,24,2)
(32,24,2)
(25,24,2)
(7,24,2)
(17,24,2)
(29,24,2)
(0,24,2)
(26,24,2)
(12,24,2)
(11,12,2)
(34,24,2)
(19,12,2)
(13,24,2)
-----------------------------------
(0,doubleNumber)
(1,printIntLine((int)
(2,)
(3,"Benign, fixed string")
(4,)
(5,break;)
(6,)
(7,NULL)
(8,printLine("fgets()
(9,)
(10,RET)
(11,inputBuffer)
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,stdin)
(14,default:)
(15,switch(6)
(16,case 6:)
(17,printLine("Benign, fixed string")
(18,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,atof(inputBuffer)
(20,(int)
(21,doubleNumber)
(22,)
(23,doubleNumber)
(24,6)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,0)
(27,inputBuffer)
(28,sqrt(doubleNumber)
(29,inputBuffer)
(30,doubleNumber)
(31,break;)
(32,doubleNumber = 0)
(33,"fgets()
(34,CHAR_ARRAY_SIZE)
(35,doubleNumber = atof(inputBuffer)
(36,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^