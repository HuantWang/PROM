-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_12_bad()
{
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
    }
    else
    {
        /* FIX: Set data to point to a twoIntsStruct struct */
        data = &dataGoodBuffer;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
39,42
40,41
41,42
43,44
44,45
45,46
45,47
46,47
48,49
49,50
51,52
52,53
53,54
53,55
54,55
56,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,29,30,31,36,37,38,42,47,50,55,58,62,66,68,70
-----computeFrom-----
26,27
26,28
33,34
33,35
45,46
45,47
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_12_bad(){    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    else    {        /* FIX: Set data to point to a twoIntsStruct struct */        data = &dataGoodBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_12_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_12_bad
{    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    else    {        /* FIX: Set data to point to a twoIntsStruct struct */        data = &dataGoodBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    else    {        /* FIX: Set data to point to a twoIntsStruct struct */        data = &dataGoodBuffer;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
{        /* FIX: Set data to point to a twoIntsStruct struct */        data = &dataGoodBuffer;    }
data = &dataGoodBuffer;
data = &dataGoodBuffer
data
data
&dataGoodBuffer
dataGoodBuffer
dataGoodBuffer
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(28,33,0)
(13,33,0)
(9,11,0)
(30,33,0)
(17,9,0)
(24,33,0)
(21,3,0)
(12,16,0)
(19,11,0)
(27,3,0)
(29,33,0)
(15,26,0)
(2,24,0)
(20,9,0)
(3,33,0)
(32,4,0)
(9,10,0)
(18,26,0)
(26,24,0)
(25,27,0)
(10,33,0)
(11,22,0)
(9,4,0)
(5,3,0)
(6,22,0)
(27,4,0)
(7,16,0)
(10,9,0)
(4,27,0)
(9,20,0)
(1,28,0)
(31,33,0)
(11,0,0)
(22,11,0)
(4,23,0)
(16,28,0)
(27,25,1)
(6,19,1)
(17,11,1)
(9,11,1)
(3,21,1)
(26,18,1)
(21,5,1)
(28,1,1)
(12,24,1)
(18,15,1)
(10,9,1)
(14,28,1)
(24,2,1)
(27,3,1)
(25,32,1)
(15,3,1)
(19,14,1)
(1,16,1)
(8,10,1)
(7,12,1)
(22,6,1)
(2,26,1)
(9,20,1)
(17,4,1)
(9,4,1)
(11,22,1)
(4,27,1)
(32,14,1)
(9,17,1)
(16,7,1)
(19,14,2)
(4,14,2)
(10,9,2)
(9,11,2)
(11,14,2)
(11,22,2)
(9,20,2)
(27,14,2)
(22,14,2)
(32,14,2)
(25,14,2)
(27,3,2)
(4,27,2)
(9,4,2)
(6,14,2)
-----------------------------------
(0,)
(1,0)
(2,0)
(3,dataBadBuffer = 100)
(4,data = &dataBadBuffer)
(5,dataBadBuffer)
(6,dataGoodBuffer)
(7,intTwo)
(8,RET)
(9,(twoIntsStruct *)
(10,printStructLine((twoIntsStruct *)
(11,data = &dataGoodBuffer)
(12,dataGoodBuffer)
(13,dataGoodBuffer)
(14,globalReturnsTrueOrFalse()
(15,dataGoodBuffer)
(16,dataGoodBuffer.intTwo)
(17,data)
(18,intOne)
(19,data)
(20,twoIntsStruct *)
(21,100)
(22,&dataGoodBuffer)
(23,)
(24,dataGoodBuffer.intOne = 0)
(25,dataBadBuffer)
(26,dataGoodBuffer.intOne)
(27,&dataBadBuffer)
(28,dataGoodBuffer.intTwo = 0)
(29,dataBadBuffer)
(30,data)
(31,if(globalReturnsTrueOrFalse()
(32,data)
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^