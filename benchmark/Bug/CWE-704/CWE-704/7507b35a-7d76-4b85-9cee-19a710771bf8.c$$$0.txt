-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_listen_socket_67_bad()
{
    short data;
    CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType myStruct;
    /* Initialize data */
    data = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a number input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myStruct.structFirst = data;
    CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
143,144
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
152,153
154,155
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
175,177
176,177
176,178
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
187,192
188,189
190,191
192,193
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
220,221
221,222
221,223
222,223
224,225
224,226
225,226
225,227
228,229
228,230
229,230
231,232
234,235
234,236
235,236
235,237
236,237
238,239
240,241
241,242
242,243
242,244
243,244
245,246
247,248
247,249
248,249
248,250
249,250
251,252
253,254
254,255
255,256
255,257
256,257
258,259
260,261
261,262
261,263
262,263
262,264
263,264
266,267
268,269
269,270
269,271
270,271
272,273
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,38,40,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,113,118,119,122,124,129,131,135,137,140,144,146,148,153,155,157,159,161,165,168,170,172,174,178,180,182,186,189,191,193,196,197,198,203,205,208,209,211,216,218,219,223,226,227,230,232,233,237,239,244,246,250,252,257,259,264,265,267,271,273
-----computeFrom-----
18,19
18,20
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
115,116
115,117
126,127
126,128
150,151
150,152
163,164
163,165
176,177
176,178
184,185
184,186
194,195
194,196
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
221,222
221,223
235,236
235,237
248,249
248,250
261,262
261,263
-----guardedBy-----
237,246
250,259
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_listen_socket_67_bad(){    short data;    CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType myStruct;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a number input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short */            data = (short)atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myStruct.structFirst = data;    CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct);}
void
CWE197_Numeric_Truncation_Error__short_listen_socket_67_bad()
CWE197_Numeric_Truncation_Error__short_listen_socket_67_bad
{    short data;    CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType myStruct;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a number input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short */            data = (short)atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myStruct.structFirst = data;    CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct);}
short data;
short data;
short
data
data
CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType myStruct;
CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType myStruct;
CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType
CWE197_Numeric_Truncation_Error__short_listen_socket_67_structType
myStruct
myStruct
data = -1;
data = -1
data
data
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a number input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short */            data = (short)atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a number input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short */            data = (short)atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a number input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short */            data = (short)atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
myStruct.structFirst = data;
myStruct.structFirst = data
myStruct.structFirst
myStruct
myStruct
structFirst
data
data
CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct);
CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct)
CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink
CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink
myStruct
myStruct
-----joern-----
(5,4,0)
(22,138,0)
(115,77,0)
(124,77,0)
(11,4,0)
(119,37,0)
(103,126,0)
(76,47,0)
(116,24,0)
(74,11,0)
(78,48,0)
(59,23,0)
(54,37,0)
(11,162,0)
(63,148,0)
(57,17,0)
(13,105,0)
(109,110,0)
(33,151,0)
(49,138,0)
(16,37,0)
(150,113,0)
(77,153,0)
(71,72,0)
(166,12,0)
(149,167,0)
(147,130,0)
(6,37,0)
(146,37,0)
(157,135,0)
(70,47,0)
(56,153,0)
(72,16,0)
(72,76,0)
(110,148,0)
(111,113,0)
(164,73,0)
(100,47,0)
(151,68,0)
(153,37,0)
(156,113,0)
(143,37,0)
(136,38,0)
(88,91,0)
(73,131,0)
(77,4,0)
(8,30,0)
(84,37,0)
(46,56,0)
(152,159,0)
(10,68,0)
(102,86,0)
(60,113,0)
(3,96,0)
(27,82,0)
(106,37,0)
(129,135,0)
(96,76,0)
(66,140,0)
(57,130,0)
(36,81,0)
(32,142,0)
(92,7,0)
(75,30,0)
(105,53,0)
(55,23,0)
(82,48,0)
(62,148,0)
(151,33,0)
(40,106,0)
(125,41,0)
(98,39,0)
(44,47,0)
(12,91,0)
(61,58,0)
(145,129,0)
(86,4,0)
(56,99,0)
(23,55,0)
(130,57,0)
(133,119,0)
(123,113,0)
(131,73,0)
(56,30,0)
(129,4,0)
(14,167,0)
(142,126,0)
(34,77,0)
(18,37,0)
(35,84,0)
(141,16,0)
(165,140,0)
(138,4,0)
(2,86,0)
(89,153,0)
(0,106,0)
(7,72,0)
(131,161,0)
(126,53,0)
(67,57,0)
(16,48,0)
(58,151,0)
(137,43,0)
(127,65,0)
(9,153,0)
(108,43,0)
(69,42,0)
(26,113,0)
(126,4,0)
(121,138,0)
(128,73,0)
(68,151,0)
(12,153,0)
(48,82,0)
(117,42,0)
(101,41,0)
(113,47,0)
(148,113,0)
(149,37,0)
(19,17,0)
(55,6,0)
(94,113,0)
(38,126,0)
(64,161,0)
(4,37,0)
(52,110,0)
(89,30,0)
(139,12,0)
(17,57,0)
(155,37,0)
(28,114,0)
(134,33,0)
(53,118,0)
(126,38,0)
(76,96,0)
(53,126,0)
(104,76,0)
(85,113,0)
(43,119,0)
(29,114,0)
(114,12,0)
(4,138,0)
(163,113,0)
(160,129,0)
(87,91,0)
(57,37,0)
(158,7,0)
(48,16,0)
(25,33,0)
(167,149,0)
(88,84,0)
(51,6,0)
(72,47,0)
(12,114,0)
(95,161,0)
(53,105,0)
(107,12,0)
(31,112,0)
(1,89,0)
(42,149,0)
(126,142,0)
(97,154,0)
(15,89,0)
(91,12,0)
(45,44,0)
(30,113,0)
(132,23,0)
(48,78,0)
(93,88,0)
(73,91,0)
(120,113,0)
(140,153,0)
(161,131,0)
(79,55,0)
(122,113,0)
(11,148,0)
(153,77,0)
(151,58,0)
(91,37,0)
(20,37,0)
(135,129,0)
(41,113,0)
(118,53,0)
(80,88,0)
(161,91,0)
(110,4,0)
(109,52,1)
(45,72,1)
(89,153,1)
(11,148,1)
(102,4,1)
(116,144,1)
(167,14,1)
(64,95,1)
(38,136,1)
(115,9,1)
(46,89,1)
(144,89,1)
(89,1,1)
(52,98,1)
(127,86,1)
(82,27,1)
(165,66,1)
(53,118,1)
(32,53,1)
(130,147,1)
(140,165,1)
(158,116,1)
(76,96,1)
(80,93,1)
(59,119,1)
(114,28,1)
(12,166,1)
(77,34,1)
(7,92,1)
(8,148,1)
(43,108,1)
(48,82,1)
(48,78,1)
(151,68,1)
(3,104,1)
(53,105,1)
(126,4,1)
(52,152,1)
(72,16,1)
(57,130,1)
(10,33,1)
(132,59,1)
(15,110,1)
(142,32,1)
(117,6,1)
(0,58,1)
(101,76,1)
(9,135,1)
(16,48,1)
(158,144,1)
(22,121,1)
(1,15,1)
(148,62,1)
(51,55,1)
(149,167,1)
(135,129,1)
(73,91,1)
(121,5,1)
(152,38,1)
(69,117,1)
(58,61,1)
(11,74,1)
(93,131,1)
(72,76,1)
(72,71,1)
(128,164,1)
(145,38,1)
(49,22,1)
(107,139,1)
(41,125,1)
(160,145,1)
(44,45,1)
(50,16,1)
(153,77,1)
(135,157,1)
(129,4,1)
(124,115,1)
(106,40,1)
(31,135,1)
(66,153,1)
(129,160,1)
(40,0,1)
(42,69,1)
(96,3,1)
(14,42,1)
(110,109,1)
(13,103,1)
(161,91,1)
(147,86,1)
(52,97,1)
(89,30,1)
(19,67,1)
(15,11,1)
(88,80,1)
(52,127,1)
(164,91,1)
(140,153,1)
(29,107,1)
(52,36,1)
(73,128,1)
(87,140,1)
(110,4,1)
(68,10,1)
(56,153,1)
(75,8,1)
(62,63,1)
(92,158,1)
(137,57,1)
(133,43,1)
(58,151,1)
(4,138,1)
(131,161,1)
(91,12,1)
(34,124,1)
(141,84,1)
(28,29,1)
(56,30,1)
(35,88,1)
(98,131,1)
(125,101,1)
(136,126,1)
(84,35,1)
(55,79,1)
(23,132,1)
(126,142,1)
(63,41,1)
(27,141,1)
(67,130,1)
(138,49,1)
(166,114,1)
(161,64,1)
(103,149,1)
(108,137,1)
(56,46,1)
(12,114,1)
(55,23,1)
(57,17,1)
(95,73,1)
(134,50,1)
(71,7,1)
(86,4,1)
(105,13,1)
(131,73,1)
(88,91,1)
(157,129,1)
(74,110,1)
(151,33,1)
(17,19,1)
(21,44,1)
(38,126,1)
(110,148,1)
(33,25,1)
(134,30,1)
(12,153,1)
(144,56,1)
(79,23,1)
(2,102,1)
(126,53,1)
(11,4,1)
(6,51,1)
(36,140,1)
(77,4,1)
(61,151,1)
(52,50,1)
(30,75,1)
(25,134,1)
(5,106,1)
(86,2,1)
(97,58,1)
(52,31,1)
(119,133,1)
(139,87,1)
(10,50,2)
(72,16,2)
(89,30,2)
(115,135,2)
(49,58,2)
(117,86,2)
(32,86,2)
(95,73,2)
(135,38,2)
(55,23,2)
(152,38,2)
(73,140,2)
(56,153,2)
(72,76,2)
(108,86,2)
(141,131,2)
(119,86,2)
(91,12,2)
(11,4,2)
(13,86,2)
(91,140,2)
(11,110,2)
(151,68,2)
(136,86,2)
(2,58,2)
(16,48,2)
(16,131,2)
(38,126,2)
(87,140,2)
(4,138,2)
(116,144,2)
(129,38,2)
(14,86,2)
(86,4,2)
(145,38,2)
(157,38,2)
(93,131,2)
(88,131,2)
(74,110,2)
(127,86,2)
(82,131,2)
(23,86,2)
(27,131,2)
(50,131,2)
(153,135,2)
(126,86,2)
(114,140,2)
(73,91,2)
(29,140,2)
(133,86,2)
(68,50,2)
(40,58,2)
(46,89,2)
(110,4,2)
(57,17,2)
(131,161,2)
(151,50,2)
(106,58,2)
(110,148,2)
(11,148,2)
(103,86,2)
(160,38,2)
(69,86,2)
(48,131,2)
(57,86,2)
(35,131,2)
(164,140,2)
(0,58,2)
(19,86,2)
(57,130,2)
(107,140,2)
(147,86,2)
(17,86,2)
(58,151,2)
(12,153,2)
(34,135,2)
(42,86,2)
(53,105,2)
(6,86,2)
(61,50,2)
(149,167,2)
(129,4,2)
(53,118,2)
(166,140,2)
(134,50,2)
(102,58,2)
(142,86,2)
(77,4,2)
(151,33,2)
(88,91,2)
(55,86,2)
(126,53,2)
(56,30,2)
(132,86,2)
(97,58,2)
(48,78,2)
(140,135,2)
(31,135,2)
(58,50,2)
(22,58,2)
(89,153,2)
(161,73,2)
(138,58,2)
(12,140,2)
(64,73,2)
(5,58,2)
(28,140,2)
(12,114,2)
(131,140,2)
(33,50,2)
(130,86,2)
(167,86,2)
(131,73,2)
(66,135,2)
(59,86,2)
(79,86,2)
(86,58,2)
(161,91,2)
(48,82,2)
(43,86,2)
(139,140,2)
(76,96,2)
(98,131,2)
(149,86,2)
(77,135,2)
(124,135,2)
(36,140,2)
(9,135,2)
(126,142,2)
(56,89,2)
(105,86,2)
(140,153,2)
(153,77,2)
(126,4,2)
(25,50,2)
(67,86,2)
(135,129,2)
(121,58,2)
(84,131,2)
(53,86,2)
(128,140,2)
(4,58,2)
(137,86,2)
(165,135,2)
(38,86,2)
(80,131,2)
(51,86,2)
-----------------------------------
(0,wsaDataInit)
(1,INVALID_SOCKET)
(2,INVALID_SOCKET)
(3,1)
(4,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(5,listenSocket)
(6,service.sin_addr.s_addr = INADDR_ANY)
(7,myStruct.structFirst)
(8,acceptSocket)
(9,acceptSocket)
(10,wsaData)
(11,CLOSE_SOCKET(listenSocket)
(12,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(13,service)
(14,TCP_PORT)
(15,acceptSocket)
(16,data = (short)
(17,sizeof(service)
(18,if (recvResult == SOCKET_ERROR || recvResult == 0)
(19,service)
(20,if (acceptSocket == SOCKET_ERROR)
(21,RET)
(22,SOCK_STREAM)
(23,service.sin_addr)
(24,)
(25,2)
(26,wsaDataInit)
(27,inputBuffer)
(28,1)
(29,CHAR_ARRAY_SIZE)
(30,acceptSocket = INVALID_SOCKET)
(31,break;)
(32,service)
(33,MAKEWORD(2,2)
(34,NULL)
(35,'\\\\0')
(36,break;)
(37,)
(38,bind(listenSocket, (struct sockaddr*)
(39,)
(40,1)
(41,wsaDataInit = 0)
(42,service.sin_port)
(43,service.sin_family)
(44,CWE197_Numeric_Truncation_Error__short_listen_socket_67b_badSink(myStruct)
(45,myStruct)
(46,acceptSocket)
(47,)
(48,(short)
(49,IPPROTO_TCP)
(50,0)
(51,INADDR_ANY)
(52,listenSocket)
(53,(struct sockaddr*)
(54,if (listen(listenSocket, LISTEN_BACKLOG)
(55,service.sin_addr.s_addr)
(56,CLOSE_SOCKET(acceptSocket)
(57,memset(&service, 0, sizeof(service)
(58,WSAStartup(MAKEWORD(2,2)
(59,service)
(60,if (listenSocket != INVALID_SOCKET)
(61,NO_ERROR)
(62,INVALID_SOCKET)
(63,listenSocket)
(64,0)
(65,)
(66,acceptSocket)
(67,0)
(68,&wsaData)
(69,sin_port)
(70,myStruct)
(71,data)
(72,myStruct.structFirst = data)
(73,recvResult == SOCKET_ERROR)
(74,listenSocket)
(75,INVALID_SOCKET)
(76,data = -1)
(77,accept(listenSocket, NULL, NULL)
(78,short)
(79,s_addr)
(80,recvResult)
(81,)
(82,atoi(inputBuffer)
(83,\'\\\\0\')
(84,inputBuffer[recvResult] = \'\\\\0\')
(85,recvResult)
(86,listenSocket == INVALID_SOCKET)
(87,recvResult)
(88,inputBuffer[recvResult])
(89,acceptSocket != INVALID_SOCKET)
(90,inputBuffer[recvResult] = '\\\\0')
(91,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(92,structFirst)
(93,inputBuffer)
(94,inputBuffer)
(95,recvResult)
(96,-1)
(97,break;)
(98,break;)
(99,)
(100,data)
(101,wsaDataInit)
(102,listenSocket)
(103,listenSocket)
(104,data)
(105,&service)
(106,wsaDataInit = 1)
(107,inputBuffer)
(108,sin_family)
(109,INVALID_SOCKET)
(110,listenSocket != INVALID_SOCKET)
(111,if (acceptSocket != INVALID_SOCKET)
(112,)
(113,)
(114,CHAR_ARRAY_SIZE - 1)
(115,listenSocket)
(116,WSACleanup()
(117,service)
(118,struct sockaddr*)
(119,service.sin_family = AF_INET)
(120,wsaData)
(121,AF_INET)
(122,do)
(123,listenSocket)
(124,NULL)
(125,0)
(126,bind(listenSocket, (struct sockaddr*)
(127,break;)
(128,SOCKET_ERROR)
(129,listen(listenSocket, LISTEN_BACKLOG)
(130,&service)
(131,recvResult == SOCKET_ERROR || recvResult == 0)
(132,sin_addr)
(133,AF_INET)
(134,2)
(135,listen(listenSocket, LISTEN_BACKLOG)
(136,SOCKET_ERROR)
(137,service)
(138,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(139,acceptSocket)
(140,acceptSocket == SOCKET_ERROR)
(141,data)
(142,sizeof(service)
(143,if (listenSocket == INVALID_SOCKET)
(144,wsaDataInit)
(145,listenSocket)
(146,if (WSAStartup(MAKEWORD(2,2)
(147,service)
(148,listenSocket = INVALID_SOCKET)
(149,service.sin_port = htons(TCP_PORT)
(150,if (wsaDataInit)
(151,WSAStartup(MAKEWORD(2,2)
(152,break;)
(153,acceptSocket = accept(listenSocket, NULL, NULL)
(154,)
(155,if (bind(listenSocket, (struct sockaddr*)
(156,service)
(157,SOCKET_ERROR)
(158,myStruct)
(159,)
(160,LISTEN_BACKLOG)
(161,recvResult == 0)
(162,)
(163,acceptSocket)
(164,recvResult)
(165,SOCKET_ERROR)
(166,0)
(167,htons(TCP_PORT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^