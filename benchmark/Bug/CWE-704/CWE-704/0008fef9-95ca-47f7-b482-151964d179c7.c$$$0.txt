-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
35,37
35,38
35,39
35,40
35,41
35,42
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
69,71
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
70,79
70,80
70,81
70,82
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
97,98
100,101
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
138,141
138,142
139,140
141,142
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
152,153
153,154
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
164,169
165,166
167,168
169,170
171,172
171,173
172,173
176,177
176,178
177,178
177,179
178,179
178,180
179,180
181,182
183,184
183,185
184,185
187,188
189,190
190,191
190,192
191,192
191,193
192,193
194,195
197,198
198,199
198,200
199,200
201,202
201,203
202,203
204,205
206,207
206,208
206,209
207,208
207,209
208,209
208,210
209,210
211,212
213,214
213,215
214,215
216,217
218,219
219,220
220,221
220,222
221,222
223,224
225,226
226,227
227,228
227,229
228,229
230,231
233,234
233,235
234,235
234,236
235,236
237,238
239,240
240,241
241,242
241,243
242,243
244,245
246,247
246,248
247,248
247,249
248,249
251,252
251,253
251,254
251,255
251,256
251,257
252,253
253,254
253,255
255,256
255,257
255,258
258,259
259,260
259,261
260,261
260,262
262,263
264,265
264,266
265,266
267,268
269,270
269,271
270,271
270,272
271,272
273,274
275,276
276,277
277,278
277,279
278,279
280,281
282,283
283,284
283,285
283,286
283,287
284,285
286,287
289,290
289,291
290,291
293,294
294,295
294,296
295,296
295,297
296,297
298,299
298,300
299,300
303,304
304,305
304,306
305,306
307,308
309,310
310,311
310,312
311,312
313,314
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,43,45,49,51,55,57,60,63,65,68,74,77,79,81,83,87,89,91,95,98,99,103,108,109,111,117,118,119,122,124,129,130,133,135,140,142,146,148,151,155,157,159,163,166,168,170,173,174,175,180,182,185,186,188,193,195,196,200,203,205,210,212,215,217,222,224,229,231,232,236,238,243,245,249,250,254,256,257,261,263,266,268,272,274,279,281,285,287,288,291,292,297,300,301,302,306,308,312,314
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
72,73
72,74
85,86
85,87
105,106
105,107
113,114
113,115
126,127
126,128
137,138
137,139
161,162
161,163
171,172
171,173
177,178
177,179
178,179
178,180
183,184
183,185
190,191
190,192
198,199
198,200
207,208
207,209
208,209
208,210
213,214
213,215
220,221
220,222
227,228
227,229
234,235
234,236
247,248
247,249
270,271
270,272
289,290
289,291
294,295
294,296
298,299
298,300
-----guardedBy-----
236,245
249,300
-----guardedByNegation-----
215,231
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_17_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(69,64,0)
(120,135,0)
(93,137,0)
(189,93,0)
(71,18,0)
(86,10,0)
(161,64,0)
(117,113,0)
(118,188,0)
(176,76,0)
(108,161,0)
(67,18,0)
(19,122,0)
(166,188,0)
(47,161,0)
(152,93,0)
(193,108,0)
(23,167,0)
(155,14,0)
(196,157,0)
(106,13,0)
(159,110,0)
(25,58,0)
(135,194,0)
(188,166,0)
(92,63,0)
(53,168,0)
(138,182,0)
(60,63,0)
(6,122,0)
(17,173,0)
(122,113,0)
(95,93,0)
(150,138,0)
(174,84,0)
(141,153,0)
(85,193,0)
(111,190,0)
(89,158,0)
(84,35,0)
(110,84,0)
(23,191,0)
(146,16,0)
(14,39,0)
(188,118,0)
(23,154,0)
(51,93,0)
(179,76,0)
(34,3,0)
(111,75,0)
(175,189,0)
(193,64,0)
(83,135,0)
(84,13,0)
(158,89,0)
(172,100,0)
(136,140,0)
(125,11,0)
(31,173,0)
(9,83,0)
(177,16,0)
(28,45,0)
(41,191,0)
(61,136,0)
(104,93,0)
(94,45,0)
(110,64,0)
(83,9,0)
(46,110,0)
(11,10,0)
(98,84,0)
(119,117,0)
(89,13,0)
(64,110,0)
(100,98,0)
(9,86,0)
(110,159,0)
(186,93,0)
(27,20,0)
(66,159,0)
(70,10,0)
(98,87,0)
(3,34,0)
(87,98,0)
(4,9,0)
(171,166,0)
(140,136,0)
(174,145,0)
(126,2,0)
(83,63,0)
(50,113,0)
(127,39,0)
(48,158,0)
(167,23,0)
(56,162,0)
(173,89,0)
(184,76,0)
(33,93,0)
(148,94,0)
(59,70,0)
(142,118,0)
(63,60,0)
(191,10,0)
(167,63,0)
(188,151,0)
(112,81,0)
(117,63,0)
(97,136,0)
(22,45,0)
(88,76,0)
(39,93,0)
(26,29,0)
(16,191,0)
(105,41,0)
(65,110,0)
(73,26,0)
(29,26,0)
(154,23,0)
(98,34,0)
(134,84,0)
(144,10,0)
(12,135,0)
(18,13,0)
(14,84,0)
(2,84,0)
(41,117,0)
(98,100,0)
(143,13,0)
(114,13,0)
(178,159,0)
(117,41,0)
(132,161,0)
(122,135,0)
(0,67,0)
(163,29,0)
(113,76,0)
(7,13,0)
(1,110,0)
(55,162,0)
(136,168,0)
(37,87,0)
(103,2,0)
(133,174,0)
(78,83,0)
(83,113,0)
(165,45,0)
(168,58,0)
(107,35,0)
(149,167,0)
(181,13,0)
(156,83,0)
(81,8,0)
(79,93,0)
(109,35,0)
(40,35,0)
(5,193,0)
(161,108,0)
(15,113,0)
(182,138,0)
(26,73,0)
(58,168,0)
(68,26,0)
(90,157,0)
(74,165,0)
(67,64,0)
(49,77,0)
(34,98,0)
(170,14,0)
(21,13,0)
(11,191,0)
(26,13,0)
(34,195,0)
(192,75,0)
(52,67,0)
(182,13,0)
(130,166,0)
(108,193,0)
(8,182,0)
(96,86,0)
(124,180,0)
(121,73,0)
(164,189,0)
(151,188,0)
(140,157,0)
(35,84,0)
(32,93,0)
(167,135,0)
(54,191,0)
(102,93,0)
(63,123,0)
(101,10,0)
(160,8,0)
(44,60,0)
(30,7,0)
(38,81,0)
(131,151,0)
(117,135,0)
(91,41,0)
(82,3,0)
(57,165,0)
(75,111,0)
(191,23,0)
(41,10,0)
(80,93,0)
(168,13,0)
(157,168,0)
(36,180,0)
(157,140,0)
(162,7,0)
(9,191,0)
(169,98,0)
(99,62,0)
(122,63,0)
(64,13,0)
(195,34,0)
(180,13,0)
(70,191,0)
(174,39,0)
(135,168,0)
(8,81,0)
(167,113,0)
(139,39,0)
(115,185,0)
(42,117,0)
(129,174,1)
(68,29,1)
(148,141,1)
(139,127,1)
(64,110,1)
(170,183,1)
(9,83,1)
(5,85,1)
(60,44,1)
(188,118,1)
(108,161,1)
(192,16,1)
(182,138,1)
(171,130,1)
(44,92,1)
(142,166,1)
(161,132,1)
(117,135,1)
(99,87,1)
(156,4,1)
(4,41,1)
(111,75,1)
(98,84,1)
(30,162,1)
(162,56,1)
(164,165,1)
(117,113,1)
(8,81,1)
(167,149,1)
(196,136,1)
(70,191,1)
(105,91,1)
(78,156,1)
(3,82,1)
(119,42,1)
(130,183,1)
(34,3,1)
(183,63,1)
(27,151,1)
(98,100,1)
(158,48,1)
(138,150,1)
(180,124,1)
(59,11,1)
(136,97,1)
(129,14,1)
(18,71,1)
(67,64,1)
(38,112,1)
(122,63,1)
(193,5,1)
(178,66,1)
(12,120,1)
(167,113,1)
(157,168,1)
(127,189,1)
(188,166,1)
(87,37,1)
(55,26,1)
(83,135,1)
(87,98,1)
(155,170,1)
(191,23,1)
(14,84,1)
(41,191,1)
(69,87,1)
(31,182,1)
(91,16,1)
(91,111,1)
(86,96,1)
(116,122,1)
(2,126,1)
(9,191,1)
(94,148,1)
(92,140,1)
(108,193,1)
(73,121,1)
(81,38,1)
(189,175,1)
(40,134,1)
(94,45,1)
(54,122,1)
(23,154,1)
(37,98,1)
(2,84,1)
(42,105,1)
(74,45,1)
(170,99,1)
(1,69,1)
(173,17,1)
(121,68,1)
(170,49,1)
(117,63,1)
(166,171,1)
(17,31,1)
(175,164,1)
(134,180,1)
(34,195,1)
(165,45,1)
(116,70,1)
(113,50,1)
(131,188,1)
(167,135,1)
(97,61,1)
(90,196,1)
(26,73,1)
(122,6,1)
(177,191,1)
(170,115,1)
(174,39,1)
(122,113,1)
(36,151,1)
(117,119,1)
(58,25,1)
(53,18,1)
(133,14,1)
(85,161,1)
(22,113,1)
(150,8,1)
(160,81,1)
(149,54,1)
(159,178,1)
(70,59,1)
(174,84,1)
(49,2,1)
(135,168,1)
(35,107,1)
(61,168,1)
(14,155,1)
(163,2,1)
(120,140,1)
(98,34,1)
(107,109,1)
(67,0,1)
(110,159,1)
(83,63,1)
(84,35,1)
(130,39,1)
(110,84,1)
(23,167,1)
(110,65,1)
(16,146,1)
(26,29,1)
(19,165,1)
(63,60,1)
(25,53,1)
(157,90,1)
(136,168,1)
(141,129,1)
(75,192,1)
(125,86,1)
(14,39,1)
(8,160,1)
(28,22,1)
(96,9,1)
(126,103,1)
(71,67,1)
(109,40,1)
(146,177,1)
(48,173,1)
(47,64,1)
(167,63,1)
(124,36,1)
(29,163,1)
(7,30,1)
(46,1,1)
(151,131,1)
(83,113,1)
(57,74,1)
(11,125,1)
(183,135,1)
(140,157,1)
(103,84,1)
(161,64,1)
(16,191,1)
(100,172,1)
(52,108,1)
(122,135,1)
(170,27,1)
(193,64,1)
(168,58,1)
(45,28,1)
(0,52,1)
(140,136,1)
(41,117,1)
(135,12,1)
(65,159,1)
(11,191,1)
(39,139,1)
(6,19,1)
(89,158,1)
(169,89,1)
(118,142,1)
(66,46,1)
(50,15,1)
(151,188,1)
(174,133,1)
(82,169,1)
(172,34,1)
(115,108,1)
(74,94,1)
(148,129,1)
(132,47,1)
(56,55,1)
(83,78,1)
(165,57,1)
(112,7,1)
(27,151,2)
(103,151,2)
(109,151,2)
(64,87,2)
(174,84,2)
(41,122,2)
(155,165,2)
(140,157,2)
(26,29,2)
(142,183,2)
(164,165,2)
(191,122,2)
(36,151,2)
(111,16,2)
(167,122,2)
(34,2,2)
(161,64,2)
(67,64,2)
(3,2,2)
(138,2,2)
(177,122,2)
(63,140,2)
(71,108,2)
(122,63,2)
(173,2,2)
(63,60,2)
(74,165,2)
(157,168,2)
(134,151,2)
(172,2,2)
(156,122,2)
(192,16,2)
(193,161,2)
(78,122,2)
(166,165,2)
(120,140,2)
(175,165,2)
(135,168,2)
(16,191,2)
(83,135,2)
(65,87,2)
(83,63,2)
(26,73,2)
(83,122,2)
(87,98,2)
(11,191,2)
(193,64,2)
(159,87,2)
(160,2,2)
(130,183,2)
(136,168,2)
(41,117,2)
(29,2,2)
(111,75,2)
(142,165,2)
(122,135,2)
(115,108,2)
(124,151,2)
(12,140,2)
(40,151,2)
(188,166,2)
(69,87,2)
(73,2,2)
(9,191,2)
(117,122,2)
(56,2,2)
(84,151,2)
(8,81,2)
(34,3,2)
(60,140,2)
(42,122,2)
(121,2,2)
(108,87,2)
(125,122,2)
(90,136,2)
(119,122,2)
(41,191,2)
(126,151,2)
(182,2,2)
(157,136,2)
(151,165,2)
(180,151,2)
(0,108,2)
(91,122,2)
(98,100,2)
(130,165,2)
(89,158,2)
(168,108,2)
(68,2,2)
(174,14,2)
(132,87,2)
(58,108,2)
(171,183,2)
(83,113,2)
(49,2,2)
(67,108,2)
(183,108,2)
(64,110,2)
(108,193,2)
(189,165,2)
(170,165,2)
(53,108,2)
(188,183,2)
(46,87,2)
(110,87,2)
(135,140,2)
(35,151,2)
(118,165,2)
(167,63,2)
(161,87,2)
(162,2,2)
(149,122,2)
(52,108,2)
(182,138,2)
(48,2,2)
(81,2,2)
(26,2,2)
(94,45,2)
(140,136,2)
(55,2,2)
(108,161,2)
(127,165,2)
(2,84,2)
(141,129,2)
(9,122,2)
(148,165,2)
(97,108,2)
(2,151,2)
(107,151,2)
(98,2,2)
(87,2,2)
(75,16,2)
(178,87,2)
(163,2,2)
(136,108,2)
(70,122,2)
(59,122,2)
(9,83,2)
(112,2,2)
(165,45,2)
(100,2,2)
(70,191,2)
(4,122,2)
(166,183,2)
(167,135,2)
(18,108,2)
(30,2,2)
(129,165,2)
(122,113,2)
(110,159,2)
(14,39,2)
(131,165,2)
(94,165,2)
(133,14,2)
(37,2,2)
(54,122,2)
(8,2,2)
(86,122,2)
(66,87,2)
(34,195,2)
(151,188,2)
(146,122,2)
(167,113,2)
(196,136,2)
(11,122,2)
(25,108,2)
(168,58,2)
(17,2,2)
(5,161,2)
(98,34,2)
(92,140,2)
(191,23,2)
(47,87,2)
(23,122,2)
(39,165,2)
(16,122,2)
(61,108,2)
(118,183,2)
(131,183,2)
(169,2,2)
(44,140,2)
(98,84,2)
(151,183,2)
(165,165,2)
(85,161,2)
(158,2,2)
(139,165,2)
(140,108,2)
(82,2,2)
(117,63,2)
(31,2,2)
(7,2,2)
(23,167,2)
(171,165,2)
(188,165,2)
(150,2,2)
(110,84,2)
(1,87,2)
(96,122,2)
(38,2,2)
(188,118,2)
(99,87,2)
(14,165,2)
(117,113,2)
(14,84,2)
(57,165,2)
(174,39,2)
(117,135,2)
(89,2,2)
(105,122,2)
(84,35,2)
(23,154,2)
-----------------------------------
(0,recvResult)
(1,connectSocket)
(2,connectSocket == INVALID_SOCKET)
(3,&service)
(4,dataBuffer)
(5,0)
(6,100)
(7,service.sin_family = AF_INET)
(8,service.sin_addr.s_addr)
(9,dataBuffer[data-1])
(10,)
(11,printLine(dataBuffer)
(12,tempInt)
(13,)
(14,connectSocket != INVALID_SOCKET)
(15,data)
(16,dataBuffer == NULL)
(17,sin_port)
(18,inputBuffer[recvResult] = \'\\\\0\')
(19,data)
(20,)
(21,if (WSAStartup(MAKEWORD(2,2)
(22,i)
(23,(char *)
(24,inputBuffer[recvResult] = '\\\\0')
(25,inputBuffer)
(26,memset(&service, 0, sizeof(service)
(27,break;)
(28,0)
(29,&service)
(30,AF_INET)
(31,service)
(32,service)
(33,wsaDataInit)
(34,(struct sockaddr*)
(35,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(36,wsaDataInit)
(37,SOCKET_ERROR)
(38,sin_addr)
(39,connectSocket = INVALID_SOCKET)
(40,AF_INET)
(41,memset(dataBuffer, \'A\', data-1)
(42,data)
(43,memset(dataBuffer, 'A', data-1)
(44,1)
(45,i = 0)
(46,inputBuffer)
(47,recvResult)
(48,TCP_PORT)
(49,break;)
(50,0)
(51,inputBuffer)
(52,inputBuffer)
(53,tempInt)
(54,dataBuffer)
(55,service)
(56,sin_family)
(57,1)
(58,atoi(inputBuffer)
(59,dataBuffer)
(60,-1)
(61,tempInt)
(62,)
(63,data = -1)
(64,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(65,0)
(66,CHAR_ARRAY_SIZE)
(67,inputBuffer[recvResult])
(68,0)
(69,recvResult)
(70,free(dataBuffer)
(71,\'\\\\0\')
(72,'\\\\0')
(73,sizeof(service)
(74,i)
(75,-1)
(76,)
(77,)
(78,1)
(79,if (wsaDataInit)
(80,connectSocket)
(81,service.sin_addr)
(82,service)
(83,data-1)
(84,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(85,recvResult)
(86,dataBuffer[data-1] = '\\\\0')
(87,connect(connectSocket, (struct sockaddr*)
(88,if (data < 100)
(89,service.sin_port = htons(TCP_PORT)
(90,SHRT_MIN)
(91,dataBuffer)
(92,data)
(93,)
(94,i++)
(95,tempInt)
(96,'\\\\0')
(97,SHRT_MAX)
(98,connect(connectSocket, (struct sockaddr*)
(99,break;)
(100,sizeof(service)
(101,dataBuffer)
(102,wsaData)
(103,connectSocket)
(104,if (connectSocket != INVALID_SOCKET)
(105,'A')
(106,if (connect(connectSocket, (struct sockaddr*)
(107,IPPROTO_TCP)
(108,recvResult == SOCKET_ERROR || recvResult == 0)
(109,SOCK_STREAM)
(110,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(111,exit(-1)
(112,service)
(113,data = 0)
(114,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(115,break;)
(116,RET)
(117,data-1)
(118,&wsaData)
(119,1)
(120,data)
(121,service)
(122,data < 100)
(123,)
(124,1)
(125,dataBuffer)
(126,INVALID_SOCKET)
(127,connectSocket)
(128,\'A\')
(129,wsaDataInit)
(130,2)
(131,NO_ERROR)
(132,SOCKET_ERROR)
(133,connectSocket)
(134,connectSocket)
(135,data = tempInt)
(136,tempInt > SHRT_MAX)
(137,)
(138,inet_addr(IP_ADDRESS)
(139,INVALID_SOCKET)
(140,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(141,WSACleanup()
(142,wsaData)
(143,if (recvResult == SOCKET_ERROR || recvResult == 0)
(144,if (dataBuffer == NULL)
(145,)
(146,NULL)
(147,\'\\\\0\')
(148,i)
(149,data)
(150,IP_ADDRESS)
(151,WSAStartup(MAKEWORD(2,2)
(152,do)
(153,)
(154,char *)
(155,INVALID_SOCKET)
(156,data)
(157,tempInt < SHRT_MIN)
(158,htons(TCP_PORT)
(159,CHAR_ARRAY_SIZE - 1)
(160,s_addr)
(161,recvResult == SOCKET_ERROR)
(162,service.sin_family)
(163,service)
(164,wsaDataInit)
(165,i < 1)
(166,MAKEWORD(2,2)
(167,malloc(data)
(168,tempInt = atoi(inputBuffer)
(169,connectSocket)
(170,connectSocket)
(171,2)
(172,service)
(173,service.sin_port)
(174,CLOSE_SOCKET(connectSocket)
(175,0)
(176,for(i = 0; i < 1; i++)
(177,dataBuffer)
(178,1)
(179,i)
(180,wsaDataInit = 1)
(181,if (connectSocket == INVALID_SOCKET)
(182,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(183,0)
(184,data)
(185,)
(186,recvResult)
(187,dataBuffer[data-1] = \'\\\\0\')
(188,WSAStartup(MAKEWORD(2,2)
(189,wsaDataInit = 0)
(190,)
(191,* dataBuffer = (char *)
(192,1)
(193,recvResult == 0)
(194,)
(195,struct sockaddr*)
(196,tempInt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^