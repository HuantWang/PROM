-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
47,50
47,51
47,52
47,53
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
73,74
74,75
76,77
76,78
77,78
77,79
77,80
77,81
77,82
77,83
77,84
77,85
77,86
77,87
77,88
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
104,105
107,108
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
141,142
143,144
143,145
144,145
144,146
145,146
145,147
145,148
145,149
146,147
148,149
150,151
150,152
151,152
151,153
152,153
154,155
156,157
157,158
159,160
160,161
161,162
163,164
165,166
167,168
168,169
168,170
169,170
171,172
171,173
171,174
171,175
171,176
172,173
174,175
176,177
178,179
178,180
179,180
183,184
183,185
184,185
184,186
185,186
185,187
186,187
188,189
190,191
190,192
191,192
194,195
196,197
197,198
197,199
198,199
198,200
199,200
201,202
204,205
205,206
205,207
206,207
208,209
208,210
209,210
211,212
214,215
214,216
215,216
215,217
216,217
218,219
220,221
221,222
222,223
222,224
223,224
225,226
227,228
228,229
228,230
229,230
230,231
232,233
234,235
234,236
235,236
236,237
236,238
238,239
238,240
240,241
241,242
242,243
244,245
244,246
244,247
244,248
244,249
244,250
245,246
246,247
246,248
248,249
248,250
250,251
252,253
253,254
253,255
255,256
255,257
255,258
257,258
259,260
261,262
262,263
262,264
262,265
262,266
263,264
265,266
268,269
268,270
271,272
272,273
272,274
273,274
273,275
274,275
276,277
276,278
280,281
280,282
281,282
281,283
282,283
285,286
285,287
286,287
287,288
287,289
287,290
287,291
288,289
290,291
292,293
294,295
296,297
297,298
297,299
298,299
298,300
299,300
301,302
304,305
305,306
305,307
306,307
308,309
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,56,58,62,64,67,70,72,75,81,84,86,88,90,94,96,98,102,105,106,110,115,116,118,124,125,126,129,131,136,137,140,142,147,149,153,155,158,162,164,166,170,173,175,177,180,181,182,187,189,192,193,195,200,202,203,207,210,212,213,217,219,224,226,231,233,237,239,243,247,249,251,254,256,258,260,264,266,267,269,270,275,277,278,279,283,284,289,291,293,295,300,302,303,307,309
-----computeFrom-----
32,33
32,34
79,80
79,81
92,93
92,94
112,113
112,114
120,121
120,122
133,134
133,135
144,145
144,146
168,169
168,170
178,179
178,180
184,185
184,186
185,186
185,187
190,191
190,192
197,198
197,199
205,206
205,207
215,216
215,217
228,229
228,230
268,269
268,270
272,273
272,274
276,277
276,278
281,282
281,283
297,298
297,299
-----guardedBy-----
217,226
283,302
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memmove_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(40,93,0)
(42,45,0)
(185,45,0)
(80,74,0)
(63,129,0)
(128,113,0)
(16,73,0)
(161,43,0)
(59,159,0)
(25,77,0)
(72,130,0)
(107,136,0)
(20,3,0)
(100,73,0)
(181,1,0)
(162,102,0)
(54,129,0)
(153,70,0)
(76,89,0)
(18,80,0)
(105,1,0)
(56,97,0)
(105,8,0)
(34,100,0)
(2,159,0)
(33,32,0)
(183,159,0)
(14,109,0)
(6,169,0)
(3,20,0)
(64,76,0)
(88,129,0)
(32,97,0)
(164,55,0)
(175,172,0)
(102,1,0)
(53,165,0)
(25,73,0)
(134,141,0)
(131,38,0)
(171,84,0)
(178,21,0)
(107,44,0)
(98,45,0)
(140,74,0)
(152,100,0)
(13,34,0)
(163,32,0)
(91,44,0)
(147,159,0)
(159,183,0)
(38,165,0)
(146,31,0)
(34,58,0)
(141,107,0)
(172,136,0)
(79,73,0)
(85,75,0)
(20,89,0)
(142,22,0)
(165,53,0)
(115,57,0)
(157,59,0)
(41,58,0)
(167,1,0)
(110,177,0)
(176,84,0)
(89,76,0)
(92,129,0)
(67,185,0)
(19,165,0)
(97,56,0)
(175,90,0)
(43,45,0)
(48,174,0)
(97,32,0)
(75,173,0)
(62,45,0)
(130,73,0)
(17,160,0)
(75,43,0)
(0,105,0)
(129,100,0)
(137,136,0)
(170,141,0)
(45,150,0)
(148,124,0)
(74,100,0)
(55,22,0)
(74,80,0)
(93,40,0)
(7,32,0)
(130,72,0)
(46,70,0)
(120,129,0)
(75,159,0)
(34,74,0)
(104,90,0)
(76,84,0)
(109,3,0)
(32,1,0)
(58,136,0)
(52,7,0)
(10,75,0)
(32,7,0)
(31,89,0)
(168,40,0)
(28,129,0)
(158,69,0)
(32,163,0)
(124,58,0)
(68,136,0)
(118,73,0)
(166,59,0)
(15,175,0)
(117,21,0)
(103,125,0)
(89,136,0)
(39,136,0)
(1,136,0)
(4,34,0)
(154,20,0)
(37,102,0)
(59,149,0)
(99,49,0)
(105,28,0)
(61,19,0)
(97,135,0)
(133,181,0)
(36,185,0)
(138,28,0)
(112,90,0)
(29,113,0)
(77,25,0)
(47,76,0)
(155,136,0)
(9,129,0)
(71,173,0)
(21,136,0)
(95,72,0)
(55,78,0)
(94,172,0)
(165,19,0)
(169,1,0)
(186,76,0)
(55,136,0)
(165,38,0)
(116,49,0)
(159,150,0)
(86,179,0)
(66,77,0)
(135,97,0)
(111,59,0)
(80,40,0)
(23,38,0)
(27,150,0)
(60,20,0)
(13,40,0)
(3,109,0)
(122,94,0)
(78,55,0)
(150,73,0)
(123,53,0)
(26,130,0)
(172,94,0)
(12,184,0)
(65,109,0)
(127,93,0)
(69,179,0)
(58,124,0)
(143,163,0)
(82,13,0)
(183,25,0)
(5,69,0)
(67,70,0)
(30,181,0)
(119,136,0)
(70,67,0)
(22,55,0)
(57,43,0)
(11,102,0)
(49,184,0)
(50,28,0)
(139,31,0)
(145,2,0)
(126,129,0)
(31,137,0)
(108,184,0)
(76,1,0)
(84,76,0)
(173,149,0)
(132,137,0)
(83,2,0)
(81,129,0)
(90,175,0)
(179,136,0)
(151,67,0)
(44,107,0)
(184,49,0)
(101,169,0)
(35,43,0)
(40,73,0)
(109,89,0)
(182,25,0)
(49,45,0)
(181,28,0)
(51,129,0)
(156,89,0)
(106,183,0)
(1,102,0)
(121,144,0)
(57,45,0)
(59,43,0)
(24,78,0)
(114,56,0)
(113,129,0)
(75,159,1)
(30,180,1)
(18,140,1)
(10,85,1)
(32,1,1)
(109,14,1)
(80,40,1)
(161,35,1)
(96,181,1)
(124,148,1)
(49,184,1)
(112,179,1)
(154,89,1)
(65,20,1)
(156,163,1)
(167,21,1)
(89,76,1)
(180,58,1)
(28,138,1)
(29,74,1)
(107,44,1)
(22,142,1)
(105,0,1)
(114,33,1)
(169,101,1)
(72,95,1)
(104,112,1)
(71,75,1)
(78,24,1)
(56,114,1)
(173,71,1)
(171,176,1)
(85,59,1)
(23,28,1)
(82,96,1)
(142,164,1)
(31,89,1)
(34,4,1)
(134,172,1)
(165,19,1)
(181,28,1)
(170,134,1)
(141,170,1)
(14,65,1)
(91,141,1)
(30,48,1)
(11,37,1)
(128,29,1)
(162,167,1)
(93,127,1)
(2,83,1)
(1,102,1)
(43,161,1)
(133,30,1)
(55,78,1)
(179,86,1)
(40,93,1)
(101,6,1)
(76,1,1)
(96,105,1)
(117,178,1)
(77,66,1)
(137,132,1)
(6,1,1)
(17,163,1)
(109,89,1)
(76,186,1)
(59,111,1)
(86,69,1)
(33,107,1)
(47,64,1)
(181,133,1)
(105,28,1)
(175,90,1)
(48,169,1)
(59,159,1)
(34,58,1)
(184,12,1)
(3,20,1)
(44,91,1)
(176,47,1)
(121,53,1)
(7,52,1)
(64,156,1)
(69,5,1)
(87,57,1)
(0,181,1)
(26,25,1)
(131,23,1)
(15,90,1)
(2,159,1)
(172,94,1)
(127,168,1)
(94,122,1)
(4,13,1)
(80,18,1)
(183,25,1)
(97,56,1)
(139,146,1)
(181,1,1)
(5,158,1)
(90,104,1)
(25,77,1)
(178,53,1)
(67,70,1)
(175,15,1)
(113,128,1)
(36,67,1)
(70,46,1)
(138,50,1)
(163,32,1)
(116,99,1)
(143,32,1)
(57,115,1)
(32,7,1)
(38,131,1)
(30,121,1)
(84,171,1)
(66,182,1)
(182,40,1)
(183,106,1)
(169,1,1)
(57,43,1)
(13,82,1)
(103,3,1)
(52,97,1)
(61,38,1)
(95,26,1)
(19,61,1)
(24,169,1)
(186,84,1)
(164,78,1)
(12,108,1)
(122,175,1)
(159,183,1)
(76,84,1)
(148,41,1)
(55,22,1)
(130,72,1)
(53,123,1)
(99,43,1)
(165,38,1)
(30,103,1)
(110,96,1)
(147,34,1)
(153,151,1)
(82,110,1)
(157,166,1)
(151,49,1)
(37,162,1)
(21,117,1)
(132,31,1)
(185,36,1)
(166,2,1)
(102,11,1)
(20,89,1)
(83,145,1)
(158,55,1)
(31,139,1)
(75,43,1)
(20,60,1)
(123,165,1)
(32,97,1)
(115,173,1)
(50,113,1)
(59,43,1)
(58,124,1)
(105,1,1)
(53,165,1)
(97,135,1)
(106,147,1)
(41,137,1)
(140,130,1)
(13,40,1)
(111,157,1)
(34,74,1)
(145,185,1)
(115,2,1)
(23,180,1)
(60,154,1)
(163,143,1)
(3,109,1)
(108,116,1)
(30,17,1)
(75,10,1)
(46,153,1)
(35,159,1)
(74,80,1)
(146,3,1)
(24,169,2)
(154,163,2)
(164,169,2)
(6,53,2)
(165,38,2)
(55,169,2)
(55,78,2)
(158,169,2)
(15,169,2)
(146,3,2)
(139,3,2)
(109,20,2)
(97,56,2)
(97,169,2)
(103,3,2)
(94,169,2)
(157,2,2)
(102,53,2)
(71,2,2)
(13,40,2)
(64,163,2)
(156,163,2)
(176,163,2)
(75,2,2)
(3,163,2)
(32,1,2)
(22,169,2)
(167,53,2)
(109,89,2)
(117,53,2)
(101,53,2)
(110,96,2)
(172,169,2)
(175,169,2)
(173,2,2)
(31,89,2)
(52,169,2)
(76,1,2)
(112,169,2)
(186,163,2)
(165,19,2)
(130,72,2)
(169,1,2)
(181,28,2)
(179,169,2)
(121,53,2)
(10,2,2)
(172,94,2)
(38,180,2)
(107,44,2)
(58,124,2)
(2,159,2)
(20,163,2)
(80,40,2)
(166,2,2)
(58,3,2)
(31,3,2)
(32,169,2)
(170,169,2)
(122,169,2)
(34,58,2)
(78,169,2)
(183,25,2)
(59,2,2)
(59,43,2)
(181,1,2)
(34,74,2)
(55,22,2)
(143,169,2)
(107,169,2)
(163,169,2)
(44,169,2)
(47,163,2)
(23,180,2)
(32,7,2)
(53,165,2)
(69,169,2)
(163,32,2)
(178,53,2)
(56,169,2)
(14,20,2)
(105,1,2)
(1,102,2)
(19,180,2)
(137,3,2)
(131,180,2)
(48,169,2)
(17,163,2)
(53,180,2)
(74,80,2)
(20,89,2)
(37,53,2)
(89,163,2)
(76,84,2)
(5,169,2)
(162,53,2)
(175,90,2)
(59,159,2)
(85,2,2)
(7,169,2)
(57,43,2)
(159,183,2)
(124,3,2)
(86,169,2)
(3,109,2)
(89,76,2)
(61,180,2)
(165,180,2)
(132,3,2)
(67,70,2)
(142,169,2)
(134,169,2)
(1,53,2)
(105,181,2)
(60,163,2)
(32,97,2)
(40,93,2)
(75,159,2)
(91,169,2)
(148,3,2)
(75,43,2)
(104,169,2)
(123,180,2)
(111,2,2)
(0,181,2)
(3,20,2)
(171,163,2)
(25,77,2)
(49,184,2)
(76,163,2)
(180,3,2)
(84,163,2)
(90,169,2)
(97,135,2)
(41,3,2)
(114,169,2)
(169,53,2)
(141,169,2)
(33,169,2)
(11,53,2)
(21,53,2)
(65,20,2)
(105,28,2)
-----------------------------------
(0,connectSocket)
(1,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(2,data < 100)
(3,recvResult == SOCKET_ERROR || recvResult == 0)
(4,data)
(5,sin_family)
(6,connectSocket)
(7,sizeof(service)
(8,)
(9,service)
(10,data)
(11,IPPROTO_TCP)
(12,1)
(13,*dataPtr1)
(14,0)
(15,s_addr)
(16,dataPtr2)
(17,break;)
(18,dataPtr1)
(19,&wsaData)
(20,recvResult == SOCKET_ERROR)
(21,wsaDataInit = 1)
(22,sizeof(service)
(23,2)
(24,service)
(25,*dataPtr2 = &data)
(26,data)
(27,data)
(28,connectSocket = INVALID_SOCKET)
(29,wsaDataInit)
(30,connectSocket)
(31,inputBuffer[recvResult])
(32,connect(connectSocket, (struct sockaddr*)
(33,connectSocket)
(34,*dataPtr1 = data)
(35,dest)
(36,\\\'\\\\0\\\')
(37,SOCK_STREAM)
(38,MAKEWORD(2,2)
(39,if (connectSocket == INVALID_SOCKET)
(40,*dataPtr1 = &data)
(41,data)
(42,if (data < 100)
(43,dest[100] = "")
(44,htons(TCP_PORT)
(45,)
(46,1)
(47,inputBuffer)
(48,break;)
(49,memset(source, \\\'A\\\', 100-1)
(50,connectSocket)
(51,wsaDataInit)
(52,service)
(53,WSAStartup(MAKEWORD(2,2)
(54,if (connectSocket != INVALID_SOCKET)
(55,memset(&service, 0, sizeof(service)
(56,&service)
(57,printLine(dest)
(58,data = atoi(inputBuffer)
(59,memmove(dest, source, data)
(60,SOCKET_ERROR)
(61,wsaData)
(62,source)
(63,if (wsaDataInit)
(64,connectSocket)
(65,recvResult)
(66,data)
(67,source[100-1])
(68,if (WSAStartup(MAKEWORD(2,2)
(69,service.sin_family)
(70,100-1)
(71,\\\'\\\\0\\\')
(72,-1)
(73,)
(74,data = *dataPtr1)
(75,dest[data])
(76,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(77,&data)
(78,&service)
(79,data)
(80,*dataPtr1)
(81,inputBuffer)
(82,dataPtr1)
(83,100)
(84,CHAR_ARRAY_SIZE - 1)
(85,dest)
(86,AF_INET)
(87,RET)
(88,wsaData)
(89,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(90,service.sin_addr)
(91,TCP_PORT)
(92,do)
(93,&data)
(94,inet_addr(IP_ADDRESS)
(95,1)
(96,wsaDataInit)
(97,(struct sockaddr*)
(98,dest)
(99,source)
(100,)
(101,INVALID_SOCKET)
(102,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(103,break;)
(104,sin_addr)
(105,CLOSE_SOCKET(connectSocket)
(106,dataPtr2)
(107,service.sin_port = htons(TCP_PORT)
(108,100)
(109,recvResult == 0)
(110,WSACleanup()
(111,data)
(112,service)
(113,wsaDataInit = 0)
(114,service)
(115,dest)
(116,\\\'A\\\')
(117,1)
(118,dataPtr1)
(119,if (connect(connectSocket, (struct sockaddr*)
(120,recvResult)
(121,break;)
(122,IP_ADDRESS)
(123,NO_ERROR)
(124,atoi(inputBuffer)
(125,)
(126,connectSocket)
(127,data)
(128,0)
(129,)
(130,data = -1)
(131,2)
(132,\\\'\\\\0\\\')
(133,INVALID_SOCKET)
(134,service)
(135,struct sockaddr*)
(136,)
(137,inputBuffer[recvResult] = \\\'\\\\0\\\')
(138,INVALID_SOCKET)
(139,recvResult)
(140,data)
(141,service.sin_port)
(142,service)
(143,SOCKET_ERROR)
(144,)
(145,data)
(146,inputBuffer)
(147,data)
(148,inputBuffer)
(149,)
(150,)
(151,source)
(152,data)
(153,100)
(154,recvResult)
(155,if (recvResult == SOCKET_ERROR || recvResult == 0)
(156,recvResult)
(157,source)
(158,service)
(159,data = *dataPtr2)
(160,)
(161,"")
(162,AF_INET)
(163,connect(connectSocket, (struct sockaddr*)
(164,0)
(165,WSAStartup(MAKEWORD(2,2)
(166,dest)
(167,connectSocket)
(168,dataPtr1)
(169,connectSocket == INVALID_SOCKET)
(170,sin_port)
(171,1)
(172,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(173,dest[data] = \\\'\\\\0\\\')
(174,)
(175,service.sin_addr.s_addr)
(176,CHAR_ARRAY_SIZE)
(177,)
(178,wsaDataInit)
(179,service.sin_family = AF_INET)
(180,0)
(181,connectSocket != INVALID_SOCKET)
(182,dataPtr2)
(183,*dataPtr2)
(184,100-1)
(185,source[100-1] = \\\'\\\\0\\\')
(186,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^