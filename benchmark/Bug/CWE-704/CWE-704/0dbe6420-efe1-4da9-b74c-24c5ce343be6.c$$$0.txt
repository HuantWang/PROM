-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1; /* true */
    data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
71,72
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,60,63,64,69,72,73,74,78,80,84,86
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
61,62
61,63
66,67
66,68
70,71
70,72
-----guardedBy-----
34,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_bad(){    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_bad
{    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1;
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal
1
data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data);
data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data)
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data)
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,37,0)
(23,37,0)
(38,2,0)
(46,5,0)
(1,21,0)
(32,14,0)
(14,27,0)
(3,35,0)
(5,6,0)
(35,27,0)
(25,21,0)
(37,6,0)
(38,19,0)
(7,5,0)
(1,27,0)
(26,38,0)
(43,5,0)
(39,1,0)
(40,16,0)
(35,21,0)
(34,6,0)
(5,16,0)
(39,5,0)
(36,15,0)
(27,30,0)
(27,21,0)
(41,7,0)
(33,39,0)
(19,38,0)
(19,5,0)
(30,7,0)
(37,15,0)
(1,39,0)
(16,37,0)
(9,1,0)
(10,30,0)
(4,2,0)
(12,6,0)
(42,39,0)
(13,27,0)
(16,5,0)
(8,43,0)
(7,30,0)
(45,12,0)
(30,10,0)
(11,1,0)
(0,19,0)
(30,27,0)
(18,6,0)
(31,12,0)
(14,21,0)
(38,27,0)
(17,19,0)
(2,21,0)
(24,43,0)
(14,32,1)
(3,2,1)
(44,43,1)
(9,27,1)
(19,5,1)
(30,7,1)
(7,5,1)
(35,3,1)
(45,31,1)
(32,35,1)
(13,43,1)
(1,39,1)
(33,11,1)
(41,13,1)
(30,10,1)
(39,5,1)
(19,17,1)
(17,0,1)
(2,4,1)
(14,27,1)
(43,5,1)
(0,26,1)
(1,27,1)
(15,36,1)
(5,16,1)
(16,40,1)
(26,1,1)
(4,38,1)
(46,12,1)
(11,9,1)
(38,19,1)
(43,24,1)
(27,30,1)
(16,37,1)
(38,27,1)
(12,45,1)
(37,15,1)
(24,8,1)
(40,46,1)
(36,23,1)
(7,41,1)
(35,27,1)
(42,33,1)
(44,14,1)
(31,37,1)
(39,42,1)
(8,5,1)
(0,43,2)
(27,30,2)
(37,15,2)
(11,43,2)
(4,43,2)
(17,43,2)
(33,43,2)
(7,43,2)
(2,43,2)
(1,27,2)
(38,27,2)
(26,43,2)
(7,5,2)
(19,5,2)
(14,43,2)
(35,43,2)
(1,39,2)
(30,43,2)
(27,43,2)
(1,43,2)
(14,27,2)
(9,43,2)
(39,43,2)
(39,5,2)
(30,10,2)
(38,43,2)
(41,43,2)
(42,43,2)
(32,43,2)
(19,43,2)
(5,16,2)
(30,7,2)
(3,43,2)
(13,43,2)
(43,5,2)
(38,19,2)
(16,37,2)
(35,27,2)
-----------------------------------
(0,data)
(1,memset(dataBuffer, \'A\', data-1)
(2,dataBuffer[data-1] = '\\\\0')
(3,dataBuffer)
(4,\'\\\\0\')
(5,data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data)
(6,)
(7,malloc(data)
(8,data)
(9,dataBuffer)
(10,char *)
(11,\'A\')
(12,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal = 1)
(13,dataBuffer)
(14,free(dataBuffer)
(15,-1)
(16,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badSource(data)
(17,1)
(18,if (data < 100)
(19,data-1)
(20,'\\\\0')
(21,)
(22,dataBuffer[data-1] = \'\\\\0\')
(23,data)
(24,100)
(25,dataBuffer)
(26,dataBuffer)
(27,* dataBuffer = (char *)
(28,memset(dataBuffer, 'A', data-1)
(29,'A')
(30,(char *)
(31,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_badGlobal)
(32,dataBuffer)
(33,data)
(34,data)
(35,printLine(dataBuffer)
(36,1)
(37,data = -1)
(38,dataBuffer[data-1])
(39,data-1)
(40,data)
(41,data)
(42,1)
(43,data < 100)
(44,RET)
(45,1)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^