-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_03_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(39,64,0)
(56,39,0)
(55,39,0)
(61,15,0)
(54,37,0)
(42,64,0)
(13,48,0)
(57,64,0)
(38,15,0)
(43,26,0)
(51,32,0)
(58,24,0)
(7,4,0)
(20,43,0)
(67,52,0)
(9,4,0)
(30,33,0)
(46,21,0)
(14,41,0)
(42,52,0)
(65,32,0)
(39,52,0)
(25,26,0)
(66,42,0)
(40,62,0)
(41,24,0)
(21,46,0)
(48,32,0)
(33,5,0)
(32,19,0)
(46,52,0)
(24,26,0)
(64,4,0)
(42,15,0)
(27,61,0)
(24,41,0)
(6,20,0)
(11,26,0)
(34,24,0)
(31,15,0)
(61,37,0)
(20,50,0)
(44,31,0)
(46,10,0)
(50,20,0)
(8,64,0)
(18,50,0)
(36,21,0)
(61,64,0)
(21,19,0)
(29,42,0)
(32,48,0)
(10,46,0)
(22,2,0)
(15,26,0)
(12,15,0)
(52,46,0)
(53,2,0)
(26,4,0)
(49,26,0)
(2,3,0)
(59,43,0)
(23,32,0)
(0,61,0)
(1,41,0)
(31,26,0)
(17,19,0)
(63,50,0)
(61,52,0)
(37,47,0)
(52,16,0)
(42,47,0)
(28,42,0)
(19,2,0)
(35,19,0)
(60,62,0)
(62,60,1)
(48,13,1)
(45,31,1)
(12,52,1)
(39,56,1)
(36,67,1)
(39,52,1)
(61,15,1)
(23,65,1)
(27,0,1)
(12,33,1)
(65,19,1)
(50,18,1)
(29,28,1)
(18,63,1)
(39,64,1)
(32,19,1)
(58,34,1)
(32,51,1)
(21,36,1)
(63,6,1)
(52,46,1)
(34,15,1)
(0,42,1)
(61,52,1)
(51,23,1)
(37,54,1)
(42,52,1)
(38,12,1)
(40,64,1)
(6,24,1)
(21,19,1)
(66,39,1)
(15,38,1)
(64,8,1)
(60,40,1)
(41,1,1)
(31,15,1)
(48,32,1)
(35,17,1)
(43,59,1)
(54,61,1)
(44,39,1)
(61,27,1)
(24,41,1)
(42,15,1)
(46,10,1)
(42,29,1)
(30,48,1)
(33,30,1)
(56,55,1)
(61,64,1)
(12,62,1)
(13,32,1)
(20,50,1)
(67,48,1)
(1,14,1)
(44,37,1)
(28,66,1)
(59,20,1)
(19,35,1)
(55,43,1)
(42,64,1)
(14,58,1)
(17,62,1)
(31,44,1)
(8,57,1)
(46,21,1)
(19,62,2)
(46,48,2)
(65,62,2)
(23,62,2)
(66,39,2)
(32,62,2)
(21,19,2)
(36,48,2)
(61,15,2)
(52,46,2)
(17,62,2)
(13,62,2)
(61,64,2)
(61,52,2)
(21,48,2)
(67,48,2)
(52,48,2)
(46,21,2)
(39,64,2)
(46,10,2)
(48,32,2)
(51,62,2)
(33,48,2)
(37,39,2)
(61,39,2)
(27,39,2)
(0,39,2)
(42,64,2)
(42,52,2)
(32,19,2)
(28,39,2)
(54,39,2)
(29,39,2)
(42,15,2)
(48,62,2)
(39,52,2)
(35,62,2)
(24,41,2)
(31,15,2)
(30,48,2)
(20,50,2)
(42,39,2)
-----------------------------------
(0,dest)
(1,1)
(2,)
(3,)
(4,)
(5,)
(6,source)
(7,data)
(8,0)
(9,if(5==5)
(10,short)
(11,if (data < 100)
(12,dest)
(13,NULL)
(14,100)
(15,dest[100] = "")
(16,)
(17,inputBuffer)
(18,1)
(19,inputBuffer[CHAR_ARRAY_SIZE] = "")
(20,source[100-1])
(21,atoi(inputBuffer)
(22,inputBuffer)
(23,CHAR_ARRAY_SIZE)
(24,memset(source, \\\'A\\\', 100-1)
(25,source)
(26,)
(27,data)
(28,source)
(29,data)
(30,"fgets()
(31,printLine(dest)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,printLine("fgets()
(34,source)
(35,"")
(36,inputBuffer)
(37,dest[data] = \\\'\\\\0\\\')
(38,"")
(39,data < 100)
(40,5)
(41,100-1)
(42,memcpy(dest, source, data)
(43,source[100-1] = \\\'\\\\0\\\')
(44,dest)
(45,RET)
(46,(short)
(47,)
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,dest)
(50,100-1)
(51,stdin)
(52,data = (short)
(53,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,\\\'\\\\0\\\')
(55,data)
(56,100)
(57,data)
(58,\\\'A\\\')
(59,\\\'\\\\0\\\')
(60,5)
(61,dest[data])
(62,5==5)
(63,100)
(64,data = 0)
(65,inputBuffer)
(66,dest)
(67,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^