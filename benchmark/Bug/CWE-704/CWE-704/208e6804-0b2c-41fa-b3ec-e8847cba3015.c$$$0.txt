-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,71,73,76,78,80,82,86,88,89,91,92,97,99,100,101,105,106,111,113,115,117,122,124,125,129,131
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
90,91
90,92
94,95
94,96
98,99
98,100
103,104
103,105
119,120
119,121
-----guardedBy-----
39,59
105,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_06_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,11,0)
(59,53,0)
(39,34,0)
(4,59,0)
(58,46,0)
(59,43,0)
(41,20,0)
(21,7,0)
(30,21,0)
(48,50,0)
(47,35,0)
(62,61,0)
(28,46,0)
(3,50,0)
(11,64,0)
(46,28,0)
(54,47,0)
(16,49,0)
(65,19,0)
(38,12,0)
(27,10,0)
(5,8,0)
(36,53,0)
(18,0,0)
(13,43,0)
(53,36,0)
(49,20,0)
(40,10,0)
(66,52,0)
(61,19,0)
(26,53,0)
(10,34,0)
(8,67,0)
(32,29,0)
(67,10,0)
(53,26,0)
(52,47,0)
(1,61,0)
(61,67,0)
(28,43,0)
(57,29,0)
(29,0,0)
(63,34,0)
(50,65,0)
(25,28,0)
(22,67,0)
(44,67,0)
(35,10,0)
(55,61,0)
(2,11,0)
(31,26,0)
(17,35,0)
(50,0,0)
(0,34,0)
(29,26,0)
(6,28,0)
(49,10,0)
(9,12,0)
(45,20,0)
(42,65,0)
(47,52,0)
(50,26,0)
(43,11,0)
(60,28,0)
(23,52,0)
(56,10,0)
(15,43,0)
(8,10,0)
(61,0,0)
(61,26,0)
(33,0,0)
(20,49,0)
(53,59,0)
(51,49,0)
(50,67,0)
(26,24,0)
(55,29,1)
(26,53,1)
(49,20,1)
(17,47,1)
(61,26,1)
(35,17,1)
(6,25,1)
(41,16,1)
(50,0,1)
(59,43,1)
(44,12,1)
(3,61,1)
(61,67,1)
(29,0,1)
(5,29,1)
(60,43,1)
(50,26,1)
(65,42,1)
(29,32,1)
(45,41,1)
(33,18,1)
(48,3,1)
(0,33,1)
(23,66,1)
(13,15,1)
(51,67,1)
(28,6,1)
(15,12,1)
(28,43,1)
(46,58,1)
(31,46,1)
(20,45,1)
(30,46,1)
(32,57,1)
(44,26,1)
(59,4,1)
(22,44,1)
(54,49,1)
(4,31,1)
(21,30,1)
(44,21,1)
(8,67,1)
(38,9,1)
(29,26,1)
(66,54,1)
(37,8,1)
(9,0,1)
(58,28,1)
(42,50,1)
(57,35,1)
(5,65,1)
(53,59,1)
(52,23,1)
(50,48,1)
(67,22,1)
(46,28,1)
(50,67,1)
(16,51,1)
(8,5,1)
(47,52,1)
(61,62,1)
(61,0,1)
(1,55,1)
(62,1,1)
(53,36,1)
(43,13,1)
(25,60,1)
(12,38,1)
(30,46,2)
(15,12,2)
(53,46,2)
(53,36,2)
(29,26,2)
(25,12,2)
(61,26,2)
(50,26,2)
(26,46,2)
(6,12,2)
(13,12,2)
(1,29,2)
(31,46,2)
(61,29,2)
(62,29,2)
(61,0,2)
(43,12,2)
(58,12,2)
(21,46,2)
(65,29,2)
(61,67,2)
(42,29,2)
(50,29,2)
(48,29,2)
(29,0,2)
(49,20,2)
(53,59,2)
(59,43,2)
(50,0,2)
(55,29,2)
(28,12,2)
(8,67,2)
(60,12,2)
(3,29,2)
(59,46,2)
(28,43,2)
(46,12,2)
(4,46,2)
(50,67,2)
(26,53,2)
(46,28,2)
(47,52,2)
-----------------------------------
(0,data = 0)
(1,source)
(2,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,dest)
(4,inputBuffer)
(5,dest)
(6,stdin)
(7,)
(8,printLine(dest)
(9,STATIC_CONST_FIVE)
(10,)
(11,)
(12,STATIC_CONST_FIVE==5)
(13,"")
(14,inputBuffer)
(15,inputBuffer)
(16,\\\'A\\\')
(17,\\\'\\\\0\\\')
(18,data)
(19,)
(20,100-1)
(21,printLine("fgets()
(22,"")
(23,1)
(24,)
(25,CHAR_ARRAY_SIZE)
(26,data = (short)
(27,source)
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,data < 100)
(30,"fgets()
(31,data)
(32,100)
(33,0)
(34,)
(35,source[100-1] = \\\'\\\\0\\\')
(36,short)
(37,RET)
(38,5)
(39,if(STATIC_CONST_FIVE==5)
(40,if (data < 100)
(41,100)
(42,\\\'\\\\0\\\')
(43,inputBuffer[CHAR_ARRAY_SIZE] = "")
(44,dest)
(45,1)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,source[100-1])
(48,data)
(49,memset(source, \\\'A\\\', 100-1)
(50,dest[data])
(51,source)
(52,100-1)
(53,(short)
(54,source)
(55,dest)
(56,dest)
(57,data)
(58,NULL)
(59,atoi(inputBuffer)
(60,inputBuffer)
(61,memmove(dest, source, data)
(62,data)
(63,data)
(64,)
(65,dest[data] = \\\'\\\\0\\\')
(66,100)
(67,dest[100] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^