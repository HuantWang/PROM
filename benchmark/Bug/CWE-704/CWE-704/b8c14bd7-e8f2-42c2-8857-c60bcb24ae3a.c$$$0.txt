-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_16_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }
1
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(6,46,0)
(38,22,0)
(33,46,0)
(12,15,0)
(26,1,0)
(49,47,0)
(0,36,0)
(11,26,0)
(47,13,0)
(8,16,0)
(27,6,0)
(19,14,0)
(13,46,0)
(16,33,0)
(48,46,0)
(6,14,0)
(15,32,0)
(34,13,0)
(22,13,0)
(45,21,0)
(41,1,0)
(44,6,0)
(42,20,0)
(1,20,0)
(16,5,0)
(10,21,0)
(2,47,0)
(7,21,0)
(32,15,0)
(40,5,0)
(5,16,0)
(18,5,0)
(47,36,0)
(35,46,0)
(30,20,0)
(31,13,0)
(21,13,0)
(32,1,0)
(15,3,0)
(37,33,0)
(29,15,0)
(47,1,0)
(9,32,0)
(25,46,0)
(4,1,0)
(14,6,0)
(21,1,0)
(21,39,0)
(24,26,0)
(22,46,0)
(43,3,0)
(46,20,0)
(23,14,0)
(36,39,0)
(9,29,1)
(23,19,1)
(22,13,1)
(34,31,1)
(14,23,1)
(12,17,1)
(36,0,1)
(22,38,1)
(38,26,1)
(32,9,1)
(8,6,1)
(7,10,1)
(32,1,1)
(15,32,1)
(6,14,1)
(43,15,1)
(28,22,1)
(33,37,1)
(45,7,1)
(24,11,1)
(31,43,1)
(17,1,1)
(37,16,1)
(44,13,1)
(2,21,1)
(21,1,1)
(13,34,1)
(10,26,1)
(18,40,1)
(5,18,1)
(47,49,1)
(21,13,1)
(47,1,1)
(11,33,1)
(26,1,1)
(1,4,1)
(49,2,1)
(26,24,1)
(40,8,1)
(4,41,1)
(19,27,1)
(31,17,1)
(47,13,1)
(0,47,1)
(29,12,1)
(38,36,1)
(27,44,1)
(21,45,1)
(16,5,1)
(32,17,2)
(47,26,2)
(15,32,2)
(22,13,2)
(43,17,2)
(21,13,2)
(10,26,2)
(47,1,2)
(47,13,2)
(36,26,2)
(2,26,2)
(45,26,2)
(21,1,2)
(26,1,2)
(29,17,2)
(21,26,2)
(12,17,2)
(49,26,2)
(9,17,2)
(7,26,2)
(0,26,2)
(16,5,2)
(6,14,2)
(15,17,2)
(32,1,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,data = 0)
(2,dest)
(3,)
(4,0)
(5,100-1)
(6,memset(source, \\\'A\\\', 100-1)
(7,source)
(8,source)
(9,data)
(10,dest)
(11,data)
(12,stdin)
(13,dest[100] = "")
(14,100-1)
(15,fscanf (stdin, "%hd", &data)
(16,source[100-1])
(17,1)
(18,1)
(19,100)
(20,)
(21,memcpy(dest, source, data)
(22,printLine(dest)
(23,1)
(24,100)
(25,source)
(26,data < 100)
(27,\\\'A\\\')
(28,RET)
(29,"%hd")
(30,while(1)
(31,dest)
(32,&data)
(33,source[100-1] = \\\'\\\\0\\\')
(34,"")
(35,if (data < 100)
(36,dest[data] = \\\'\\\\0\\\')
(37,\\\'\\\\0\\\')
(38,dest)
(39,)
(40,100)
(41,data)
(42,data)
(43,break;)
(44,source)
(45,data)
(46,)
(47,dest[data])
(48,dest)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^