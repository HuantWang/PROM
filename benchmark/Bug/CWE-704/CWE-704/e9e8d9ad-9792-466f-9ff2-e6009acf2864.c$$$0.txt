-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,65,67,70,72,74,76,80,82,83,85,86,91,93,94,95,99,100,105,107,109,111,116,118,119,123,125
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
84,85
84,86
88,89
88,90
92,93
92,94
97,98
97,99
113,114
113,115
-----guardedBy-----
33,53
99,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_01_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_01_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_01_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(24,6,0)
(24,53,0)
(3,31,0)
(38,44,0)
(7,54,0)
(15,42,0)
(26,3,0)
(57,43,0)
(4,53,0)
(52,21,0)
(28,15,0)
(6,20,0)
(25,43,0)
(1,24,0)
(37,7,0)
(10,3,0)
(33,15,0)
(17,46,0)
(5,11,0)
(21,57,0)
(24,42,0)
(2,21,0)
(44,43,0)
(4,42,0)
(0,42,0)
(39,12,0)
(41,60,0)
(40,39,0)
(23,4,0)
(30,54,0)
(11,51,0)
(45,43,0)
(32,53,0)
(29,4,0)
(15,53,0)
(14,54,0)
(56,53,0)
(43,60,0)
(35,56,0)
(22,3,0)
(39,49,0)
(34,15,0)
(13,12,0)
(24,44,0)
(19,43,0)
(53,47,0)
(53,56,0)
(59,6,0)
(36,57,0)
(49,43,0)
(27,44,0)
(62,57,0)
(42,60,0)
(12,39,0)
(16,56,0)
(56,35,0)
(16,7,0)
(15,20,0)
(61,31,0)
(46,44,0)
(3,7,0)
(50,7,0)
(55,49,0)
(18,16,0)
(54,60,0)
(56,16,0)
(9,24,0)
(31,3,0)
(48,42,0)
(15,44,0)
(57,21,0)
(8,12,0)
(46,43,0)
(16,18,1)
(17,6,1)
(24,42,1)
(36,44,1)
(4,53,1)
(24,9,1)
(17,4,1)
(11,5,1)
(23,29,1)
(15,34,1)
(56,16,1)
(59,24,1)
(34,33,1)
(31,61,1)
(39,12,1)
(40,57,1)
(10,22,1)
(8,40,1)
(24,53,1)
(15,53,1)
(3,10,1)
(50,42,1)
(12,13,1)
(1,15,1)
(38,11,1)
(26,7,1)
(27,38,1)
(3,7,1)
(58,46,1)
(22,26,1)
(4,23,1)
(49,55,1)
(62,36,1)
(6,59,1)
(21,2,1)
(15,44,1)
(52,62,1)
(38,53,1)
(15,42,1)
(55,39,1)
(28,4,1)
(32,31,1)
(18,32,1)
(16,7,1)
(44,27,1)
(61,3,1)
(31,3,1)
(2,52,1)
(42,48,1)
(5,31,1)
(9,1,1)
(46,17,1)
(4,42,1)
(53,56,1)
(29,49,1)
(57,21,1)
(46,44,1)
(56,35,1)
(13,8,1)
(7,37,1)
(48,0,1)
(33,28,1)
(37,50,1)
(24,44,1)
(46,44,2)
(5,31,2)
(16,7,2)
(24,4,2)
(28,4,2)
(15,44,2)
(34,4,2)
(4,42,2)
(15,53,2)
(53,31,2)
(16,31,2)
(4,53,2)
(15,4,2)
(32,31,2)
(56,31,2)
(24,44,2)
(1,4,2)
(24,42,2)
(15,42,2)
(56,35,2)
(57,21,2)
(39,12,2)
(11,31,2)
(56,16,2)
(59,4,2)
(24,53,2)
(31,3,2)
(3,7,2)
(33,4,2)
(6,4,2)
(9,4,2)
(53,56,2)
(18,31,2)
-----------------------------------
(0,data)
(1,dest)
(2,1)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,data < 100)
(5,"fgets()
(6,dest[data] = \\\'\\\\0\\\')
(7,inputBuffer[CHAR_ARRAY_SIZE] = "")
(8,100)
(9,data)
(10,stdin)
(11,printLine("fgets()
(12,100-1)
(13,1)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,memmove(dest, source, data)
(16,atoi(inputBuffer)
(17,dest)
(18,inputBuffer)
(19,source)
(20,)
(21,100-1)
(22,CHAR_ARRAY_SIZE)
(23,100)
(24,dest[data])
(25,dest)
(26,inputBuffer)
(27,"")
(28,dest)
(29,data)
(30,inputBuffer)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,data)
(33,source)
(34,data)
(35,short)
(36,source)
(37,"")
(38,dest)
(39,source[100-1])
(40,source)
(41,data)
(42,data = 0)
(43,)
(44,dest[100] = "")
(45,if (data < 100)
(46,printLine(dest)
(47,)
(48,0)
(49,source[100-1] = \\\'\\\\0\\\')
(50,inputBuffer)
(51,)
(52,100)
(53,data = (short)
(54,)
(55,\\\'\\\\0\\\')
(56,(short)
(57,memset(source, \\\'A\\\', 100-1)
(58,RET)
(59,\\\'\\\\0\\\')
(60,)
(61,NULL)
(62,\\\'A\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^