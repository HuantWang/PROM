-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
60,61
60,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,31,33,35,38,40,42,44,48,50,51,53,54,59,61,62,63,67,68,73,75,77,79,84,86,87,91,93
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
52,53
52,54
56,57
56,58
60,61
60,62
65,66
65,67
81,82
81,83
-----guardedBy-----
67,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }
5==5
5
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(28,27,0)
(41,37,0)
(1,41,0)
(2,42,0)
(40,46,0)
(18,13,0)
(41,45,0)
(32,5,0)
(19,30,0)
(20,48,0)
(9,46,0)
(17,22,0)
(30,45,0)
(8,42,0)
(43,27,0)
(36,37,0)
(39,0,0)
(22,42,0)
(3,32,0)
(16,37,0)
(37,11,0)
(29,13,0)
(44,10,0)
(41,5,0)
(50,0,0)
(23,5,0)
(10,38,0)
(27,10,0)
(13,0,0)
(25,34,0)
(48,37,0)
(15,48,0)
(49,45,0)
(45,34,0)
(6,12,0)
(33,30,0)
(42,22,0)
(35,22,0)
(32,13,0)
(12,26,0)
(47,5,0)
(24,13,0)
(37,36,0)
(7,41,0)
(48,5,0)
(42,13,0)
(10,27,0)
(34,45,0)
(5,13,0)
(14,36,0)
(30,37,0)
(31,41,0)
(45,0,0)
(41,26,0)
(38,13,0)
(48,12,0)
(4,38,0)
(48,45,0)
(30,37,1)
(48,37,1)
(36,14,1)
(22,17,1)
(14,16,1)
(3,12,1)
(30,45,1)
(6,48,1)
(34,25,1)
(10,27,1)
(47,37,1)
(27,43,1)
(17,35,1)
(28,44,1)
(40,45,1)
(2,5,1)
(25,49,1)
(41,37,1)
(3,30,1)
(44,42,1)
(47,46,1)
(48,45,1)
(4,10,1)
(37,36,1)
(8,2,1)
(38,4,1)
(43,28,1)
(41,45,1)
(32,5,1)
(31,7,1)
(9,40,1)
(16,46,1)
(30,33,1)
(1,30,1)
(41,5,1)
(5,23,1)
(48,5,1)
(7,1,1)
(48,20,1)
(32,3,1)
(46,9,1)
(20,15,1)
(15,41,1)
(12,6,1)
(19,38,1)
(33,19,1)
(23,47,1)
(21,32,1)
(42,22,1)
(35,8,1)
(41,31,1)
(45,34,1)
(37,36,2)
(20,30,2)
(41,45,2)
(41,5,2)
(15,30,2)
(30,45,2)
(31,30,2)
(16,46,2)
(6,30,2)
(30,37,2)
(10,27,2)
(14,46,2)
(48,30,2)
(12,30,2)
(42,22,2)
(41,30,2)
(7,30,2)
(48,45,2)
(32,5,2)
(45,34,2)
(41,37,2)
(36,46,2)
(48,37,2)
(1,30,2)
(37,46,2)
(48,5,2)
-----------------------------------
(0,)
(1,dest)
(2,source)
(3,dest)
(4,\\\'\\\\0\\\')
(5,dest[100] = "")
(6,\\\'\\\\0\\\')
(7,source)
(8,\\\'A\\\')
(9,5)
(10,source[100-1])
(11,)
(12,dest[data] = \\\'\\\\0\\\')
(13,)
(14,1)
(15,dest)
(16,data)
(17,1)
(18,source)
(19,data)
(20,data)
(21,RET)
(22,100-1)
(23,"")
(24,if (data < 100)
(25,1)
(26,)
(27,100-1)
(28,100)
(29,dest)
(30,data < 100)
(31,data)
(32,printLine(dest)
(33,100)
(34,-1)
(35,100)
(36,-1)
(37,data = -1)
(38,source[100-1] = \\\'\\\\0\\\')
(39,if(5==5)
(40,5)
(41,memmove(dest, source, data)
(42,memset(source, \\\'A\\\', 100-1)
(43,1)
(44,source)
(45,data = -1)
(46,5==5)
(47,dest)
(48,dest[data])
(49,data)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^