-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,37,39,42,44,46,48,52,54,55,57,58,63,65,66,67,71,72,77,79,81,83,88,90,91,95,97
-----computeFrom-----
12,13
12,14
22,23
22,24
56,57
56,58
60,61
60,62
64,65
64,66
69,70
69,71
85,86
85,87
-----guardedBy-----
71,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_08_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,41,0)
(41,43,0)
(2,9,0)
(26,42,0)
(12,20,0)
(42,40,0)
(33,27,0)
(45,23,0)
(27,43,0)
(47,27,0)
(5,38,0)
(14,23,0)
(38,5,0)
(22,43,0)
(36,18,0)
(47,37,0)
(29,6,0)
(37,47,0)
(10,19,0)
(6,41,0)
(0,41,0)
(14,19,0)
(9,23,0)
(38,19,0)
(35,43,0)
(40,42,0)
(9,41,0)
(13,6,0)
(34,37,0)
(32,14,0)
(30,43,0)
(9,36,0)
(21,20,0)
(1,37,0)
(25,41,0)
(6,23,0)
(38,4,0)
(44,40,0)
(42,43,0)
(8,42,0)
(15,36,0)
(11,6,0)
(31,43,0)
(24,40,0)
(19,38,0)
(17,47,0)
(6,19,0)
(39,23,0)
(43,20,0)
(16,14,0)
(28,30,0)
(7,9,0)
(4,38,0)
(23,20,0)
(9,19,0)
(19,46,0)
(6,18,0)
(5,10,1)
(0,19,1)
(6,29,1)
(6,41,1)
(37,1,1)
(3,23,1)
(38,4,1)
(19,38,1)
(15,9,1)
(14,32,1)
(40,44,1)
(6,23,1)
(28,36,1)
(6,19,1)
(39,45,1)
(47,37,1)
(16,27,1)
(34,17,1)
(9,2,1)
(9,23,1)
(42,40,1)
(29,13,1)
(2,7,1)
(17,42,1)
(1,34,1)
(44,24,1)
(7,6,1)
(9,19,1)
(14,19,1)
(11,14,1)
(32,16,1)
(9,41,1)
(41,25,1)
(24,26,1)
(30,28,1)
(14,23,1)
(0,3,1)
(38,5,1)
(25,0,1)
(23,39,1)
(13,11,1)
(33,47,1)
(8,41,1)
(36,15,1)
(28,14,1)
(27,33,1)
(30,41,1)
(48,30,1)
(26,8,1)
(10,3,1)
(10,3,2)
(38,5,2)
(36,14,2)
(14,23,2)
(15,14,2)
(2,14,2)
(7,14,2)
(9,19,2)
(9,23,2)
(6,23,2)
(38,4,2)
(42,40,2)
(6,14,2)
(29,14,2)
(47,37,2)
(13,14,2)
(19,38,2)
(9,14,2)
(9,41,2)
(5,3,2)
(30,41,2)
(14,19,2)
(6,41,2)
(38,3,2)
(19,3,2)
(11,14,2)
(6,19,2)
-----------------------------------
(0,dest)
(1,1)
(2,data)
(3,staticReturnsTrue()
(4,short)
(5,RAND32()
(6,memcpy(dest, source, data)
(7,dest)
(8,source)
(9,dest[data])
(10,data)
(11,dest)
(12,data)
(13,source)
(14,data < 100)
(15,\\\'\\\\0\\\')
(16,data)
(17,source)
(18,)
(19,data = (short)
(20,)
(21,if(staticReturnsTrue()
(22,source)
(23,data = 0)
(24,100)
(25,"")
(26,\\\'A\\\')
(27,source[100-1] = \\\'\\\\0\\\')
(28,dest)
(29,data)
(30,printLine(dest)
(31,if (data < 100)
(32,100)
(33,\\\'\\\\0\\\')
(34,100)
(35,dest)
(36,dest[data] = \\\'\\\\0\\\')
(37,100-1)
(38,(short)
(39,0)
(40,100-1)
(41,dest[100] = "")
(42,memset(source, \\\'A\\\', 100-1)
(43,)
(44,1)
(45,data)
(46,)
(47,source[100-1])
(48,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^