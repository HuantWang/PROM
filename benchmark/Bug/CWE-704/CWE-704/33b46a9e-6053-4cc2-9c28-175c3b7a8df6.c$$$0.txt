-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
22,23
22,24
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_15_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(51,54,0)
(8,3,0)
(7,51,0)
(42,48,0)
(35,24,0)
(42,36,0)
(24,15,0)
(4,19,0)
(20,42,0)
(51,52,0)
(44,40,0)
(25,10,0)
(13,3,0)
(28,48,0)
(18,48,0)
(52,15,0)
(23,13,0)
(3,15,0)
(14,13,0)
(0,15,0)
(40,0,0)
(43,15,0)
(36,32,0)
(30,36,0)
(21,41,0)
(24,3,0)
(13,19,0)
(16,4,0)
(9,54,0)
(27,41,0)
(37,54,0)
(15,41,0)
(32,36,0)
(12,15,0)
(39,0,0)
(11,31,0)
(5,48,0)
(0,40,0)
(46,20,0)
(13,27,0)
(38,41,0)
(6,27,0)
(17,42,0)
(47,52,0)
(31,42,0)
(29,31,0)
(26,3,0)
(20,27,0)
(45,27,0)
(36,42,0)
(31,4,0)
(31,27,0)
(54,51,0)
(22,20,0)
(31,3,0)
(1,48,0)
(49,15,0)
(50,0,0)
(33,40,0)
(13,42,0)
(10,48,0)
(36,30,0)
(34,13,0)
(0,40,1)
(17,2,1)
(5,42,1)
(50,39,1)
(13,27,1)
(14,34,1)
(34,23,1)
(44,50,1)
(39,3,1)
(31,42,1)
(31,11,1)
(24,3,1)
(24,35,1)
(16,31,1)
(30,17,1)
(13,3,1)
(13,14,1)
(22,46,1)
(3,8,1)
(33,44,1)
(20,27,1)
(2,27,1)
(31,3,1)
(20,42,1)
(25,2,1)
(46,52,1)
(53,24,1)
(35,20,1)
(42,36,1)
(27,45,1)
(31,27,1)
(11,29,1)
(35,4,1)
(36,32,1)
(18,10,1)
(9,7,1)
(37,9,1)
(10,25,1)
(26,18,1)
(4,16,1)
(29,13,1)
(36,30,1)
(45,6,1)
(13,42,1)
(8,26,1)
(47,51,1)
(51,54,1)
(40,33,1)
(23,20,1)
(26,5,1)
(7,0,1)
(52,47,1)
(20,22,1)
(54,37,1)
(36,30,2)
(30,2,2)
(13,20,2)
(17,2,2)
(20,27,2)
(31,20,2)
(24,3,2)
(11,20,2)
(16,20,2)
(42,2,2)
(4,20,2)
(36,32,2)
(51,54,2)
(31,3,2)
(20,42,2)
(25,2,2)
(29,20,2)
(0,40,2)
(13,27,2)
(13,42,2)
(23,20,2)
(31,27,2)
(31,42,2)
(36,2,2)
(10,2,2)
(42,36,2)
(18,2,2)
(34,20,2)
(5,2,2)
(13,3,2)
(14,20,2)
-----------------------------------
(0,memset(source, \\\'A\\\', 100-1)
(1,case 6:)
(2,6)
(3,dest[100] = "")
(4,dest[data] = \\\'\\\\0\\\')
(5,break;)
(6,data)
(7,source)
(8,"")
(9,100)
(10,printLine("Benign, fixed string")
(11,data)
(12,dest)
(13,memmove(dest, source, data)
(14,data)
(15,)
(16,\\\'\\\\0\\\')
(17,data)
(18,break;)
(19,)
(20,data < 100)
(21,switch(6)
(22,100)
(23,dest)
(24,printLine(dest)
(25,"Benign, fixed string")
(26,dest)
(27,data = 0)
(28,default:)
(29,dest)
(30,RAND32()
(31,dest[data])
(32,short)
(33,1)
(34,source)
(35,dest)
(36,(short)
(37,1)
(38,data)
(39,source)
(40,100-1)
(41,)
(42,data = (short)
(43,if (data < 100)
(44,100)
(45,0)
(46,data)
(47,\\\'\\\\0\\\')
(48,)
(49,source)
(50,\\\'A\\\')
(51,source[100-1])
(52,source[100-1] = \\\'\\\\0\\\')
(53,RET)
(54,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^