-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(47,43,0)
(2,33,0)
(46,48,0)
(40,8,0)
(37,21,0)
(35,43,0)
(28,5,0)
(28,0,0)
(10,22,0)
(25,43,0)
(50,21,0)
(31,8,0)
(24,0,0)
(27,48,0)
(3,42,0)
(30,35,0)
(15,50,0)
(40,39,0)
(1,14,0)
(18,14,0)
(28,39,0)
(26,43,0)
(49,16,0)
(9,39,0)
(0,28,0)
(36,50,0)
(4,7,0)
(45,25,0)
(51,22,0)
(21,50,0)
(8,40,0)
(39,28,0)
(12,16,0)
(7,17,0)
(22,39,0)
(17,23,0)
(32,2,0)
(2,48,0)
(6,8,0)
(50,38,0)
(44,48,0)
(41,47,0)
(5,28,0)
(16,2,0)
(14,2,0)
(14,42,0)
(11,43,0)
(42,14,0)
(8,2,0)
(42,39,0)
(21,2,0)
(47,39,0)
(25,39,0)
(19,40,0)
(20,40,0)
(13,33,0)
(17,7,0)
(39,43,0)
(42,35,0)
(33,2,0)
(40,43,0)
(0,2,0)
(40,8,1)
(21,37,1)
(28,0,1)
(14,1,1)
(17,7,1)
(2,33,1)
(22,39,1)
(29,2,1)
(25,39,1)
(12,50,1)
(50,21,1)
(51,10,1)
(0,24,1)
(19,20,1)
(22,51,1)
(12,29,1)
(14,2,1)
(18,3,1)
(7,4,1)
(4,22,1)
(21,2,1)
(33,13,1)
(20,17,1)
(20,22,1)
(25,45,1)
(36,29,1)
(34,47,1)
(13,32,1)
(37,15,1)
(34,16,1)
(31,19,1)
(16,2,1)
(41,25,1)
(8,2,1)
(8,6,1)
(15,36,1)
(16,49,1)
(47,39,1)
(0,2,1)
(47,41,1)
(39,28,1)
(45,35,1)
(1,18,1)
(6,31,1)
(42,39,1)
(10,39,1)
(49,12,1)
(3,40,1)
(30,42,1)
(24,9,1)
(28,5,1)
(42,14,1)
(40,39,1)
(35,30,1)
(9,16,1)
(28,5,2)
(22,39,2)
(39,28,2)
(2,33,2)
(8,2,2)
(22,16,2)
(25,16,2)
(0,16,2)
(17,22,2)
(40,16,2)
(31,16,2)
(21,2,2)
(28,16,2)
(42,14,2)
(42,16,2)
(28,0,2)
(20,16,2)
(37,29,2)
(39,16,2)
(18,16,2)
(10,16,2)
(40,39,2)
(1,16,2)
(14,16,2)
(16,2,2)
(7,22,2)
(0,2,2)
(21,29,2)
(9,16,2)
(3,16,2)
(24,16,2)
(17,7,2)
(36,29,2)
(25,39,2)
(41,16,2)
(50,21,2)
(8,16,2)
(14,2,2)
(42,39,2)
(19,16,2)
(6,16,2)
(15,29,2)
(4,22,2)
(40,8,2)
(51,16,2)
(47,39,2)
(45,16,2)
(50,29,2)
(35,16,2)
(30,16,2)
(47,16,2)
-----------------------------------
(0,malloc(data)
(1,1)
(2,data = -1)
(3,dataBuffer)
(4,1)
(5,char *)
(6,1)
(7,-1)
(8,data-1)
(9,dataBuffer)
(10,dataBuffer)
(11,dataBuffer)
(12,data)
(13,1)
(14,data-1)
(15,"%d")
(16,data < 100)
(17,exit(-1)
(18,data)
(19,\\\'A\\\')
(20,dataBuffer)
(21,&data)
(22,dataBuffer == NULL)
(23,)
(24,data)
(25,printLine(dataBuffer)
(26,if (dataBuffer == NULL)
(27,if (data < 100)
(28,(char *)
(29,STATIC_CONST_TRUE)
(30,\\\'\\\\0\\\')
(31,data)
(32,data)
(33,-1)
(34,RET)
(35,dataBuffer[data-1] = \\\'\\\\0\\\')
(36,stdin)
(37,data)
(38,)
(39,* dataBuffer = (char *)
(40,memset(dataBuffer, \\\'A\\\', data-1)
(41,dataBuffer)
(42,dataBuffer[data-1])
(43,)
(44,data)
(45,dataBuffer)
(46,if(STATIC_CONST_TRUE)
(47,free(dataBuffer)
(48,)
(49,100)
(50,fscanf(stdin, "%d", &data)
(51,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^