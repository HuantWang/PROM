-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(54,50,0)
(26,14,0)
(35,43,0)
(51,22,0)
(0,18,0)
(8,22,0)
(15,32,0)
(58,11,0)
(38,54,0)
(13,32,0)
(22,41,0)
(56,50,0)
(31,47,0)
(28,60,0)
(60,28,0)
(32,13,0)
(30,22,0)
(4,6,0)
(57,34,0)
(53,60,0)
(14,32,0)
(21,50,0)
(17,28,0)
(29,41,0)
(63,6,0)
(52,41,0)
(13,18,0)
(15,43,0)
(28,22,0)
(3,41,0)
(62,61,0)
(54,32,0)
(42,60,0)
(46,3,0)
(6,4,0)
(33,15,0)
(6,41,0)
(59,28,0)
(34,55,0)
(48,18,0)
(37,47,0)
(15,50,0)
(39,41,0)
(45,49,0)
(49,61,0)
(27,3,0)
(10,54,0)
(51,50,0)
(47,37,0)
(54,6,0)
(61,49,0)
(25,13,0)
(11,22,0)
(32,16,0)
(37,11,0)
(20,15,0)
(24,37,0)
(54,44,0)
(61,18,0)
(36,61,0)
(18,3,0)
(15,6,0)
(1,51,0)
(23,61,0)
(43,44,0)
(5,54,0)
(7,47,0)
(50,22,0)
(40,32,0)
(2,22,0)
(12,14,0)
(14,6,0)
(9,4,0)
(26,12,1)
(49,61,1)
(61,23,1)
(54,5,1)
(61,18,1)
(50,21,1)
(13,25,1)
(52,6,1)
(45,61,1)
(14,32,1)
(24,28,1)
(49,45,1)
(62,36,1)
(54,6,1)
(35,15,1)
(43,35,1)
(56,34,1)
(56,32,1)
(10,14,1)
(4,9,1)
(59,50,1)
(21,56,1)
(53,42,1)
(1,14,1)
(33,20,1)
(54,50,1)
(9,63,1)
(1,43,1)
(23,62,1)
(47,31,1)
(57,49,1)
(6,4,1)
(13,18,1)
(5,38,1)
(0,48,1)
(28,60,1)
(48,52,1)
(14,26,1)
(31,7,1)
(17,59,1)
(38,10,1)
(54,32,1)
(20,54,1)
(15,32,1)
(15,6,1)
(42,17,1)
(25,40,1)
(32,13,1)
(15,50,1)
(37,47,1)
(18,0,1)
(51,50,1)
(7,24,1)
(15,33,1)
(19,51,1)
(34,57,1)
(40,49,1)
(36,18,1)
(60,53,1)
(58,37,1)
(51,1,1)
(11,58,1)
(14,6,1)
(12,11,1)
(51,50,2)
(10,14,2)
(54,32,2)
(49,61,2)
(25,49,2)
(40,49,2)
(38,14,2)
(57,49,2)
(15,50,2)
(28,60,2)
(54,6,2)
(14,6,2)
(14,32,2)
(33,14,2)
(37,47,2)
(20,14,2)
(35,14,2)
(15,14,2)
(34,49,2)
(61,18,2)
(43,14,2)
(15,32,2)
(5,14,2)
(15,6,2)
(13,18,2)
(32,13,2)
(13,49,2)
(6,4,2)
(32,49,2)
(54,50,2)
(54,14,2)
-----------------------------------
(0,"")
(1,dest)
(2,source)
(3,)
(4,-1)
(5,data)
(6,data = -1)
(7,100)
(8,dest)
(9,1)
(10,dest)
(11,source[100-1] = \\\'\\\\0\\\')
(12,data)
(13,atoi(inputBuffer)
(14,data < 100)
(15,dest[data])
(16,)
(17,\\\'A\\\')
(18,inputBuffer[CHAR_ARRAY_SIZE] = "")
(19,RET)
(20,dest)
(21,"")
(22,)
(23,stdin)
(24,source)
(25,inputBuffer)
(26,100)
(27,inputBuffer)
(28,memset(source, \\\'A\\\', 100-1)
(29,source:)
(30,if (data < 100)
(31,1)
(32,data = atoi(inputBuffer)
(33,data)
(34,printLine("fgets()
(35,\\\'\\\\0\\\')
(36,inputBuffer)
(37,source[100-1])
(38,source)
(39,data)
(40,data)
(41,)
(42,100)
(43,dest[data] = \\\'\\\\0\\\')
(44,)
(45,NULL)
(46,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,100-1)
(48,inputBuffer)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,dest[100] = "")
(51,printLine(dest)
(52,goto source;)
(53,1)
(54,memcpy(dest, source, data)
(55,)
(56,dest)
(57,"fgets()
(58,\\\'\\\\0\\\')
(59,source)
(60,100-1)
(61,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(62,CHAR_ARRAY_SIZE)
(63,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^