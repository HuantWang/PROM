-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(3,12,0)
(33,29,0)
(47,4,0)
(41,6,0)
(49,38,0)
(24,34,0)
(4,26,0)
(31,53,0)
(12,23,0)
(25,34,0)
(45,6,0)
(22,7,0)
(48,7,0)
(55,34,0)
(28,48,0)
(15,6,0)
(5,56,0)
(3,7,0)
(7,38,0)
(57,61,0)
(36,41,0)
(31,12,0)
(48,12,0)
(34,52,0)
(3,29,0)
(42,48,0)
(3,15,0)
(18,14,0)
(27,58,0)
(50,53,0)
(0,6,0)
(21,58,0)
(20,48,0)
(61,7,0)
(62,6,0)
(56,62,0)
(9,38,0)
(60,52,0)
(35,12,0)
(53,13,0)
(12,31,0)
(29,63,0)
(48,15,0)
(32,15,0)
(0,15,0)
(16,3,0)
(58,12,0)
(17,0,0)
(46,31,0)
(41,14,0)
(1,6,0)
(11,14,0)
(58,7,0)
(54,62,0)
(8,38,0)
(40,53,0)
(6,38,0)
(14,41,0)
(7,61,0)
(34,53,0)
(19,13,0)
(56,5,0)
(2,15,0)
(51,5,0)
(37,3,0)
(52,34,0)
(59,6,0)
(30,56,0)
(43,13,0)
(44,41,0)
(39,5,0)
(13,38,0)
(48,63,0)
(21,62,1)
(3,7,1)
(36,44,1)
(52,34,1)
(51,39,1)
(11,18,1)
(60,34,1)
(3,15,1)
(42,20,1)
(2,32,1)
(16,37,1)
(3,16,1)
(58,27,1)
(61,57,1)
(55,25,1)
(35,52,1)
(40,49,1)
(39,30,1)
(48,12,1)
(41,14,1)
(48,15,1)
(28,58,1)
(50,40,1)
(56,5,1)
(32,12,1)
(4,47,1)
(31,53,1)
(17,58,1)
(32,4,1)
(33,3,1)
(14,11,1)
(49,7,1)
(47,52,1)
(37,48,1)
(62,54,1)
(25,53,1)
(12,31,1)
(58,12,1)
(34,24,1)
(58,7,1)
(20,28,1)
(24,55,1)
(27,21,1)
(3,12,1)
(54,56,1)
(48,42,1)
(7,61,1)
(0,15,1)
(18,36,1)
(31,46,1)
(15,2,1)
(57,22,1)
(30,41,1)
(44,15,1)
(46,35,1)
(17,29,1)
(53,50,1)
(5,51,1)
(52,60,1)
(29,33,1)
(0,17,1)
(34,53,1)
(10,0,1)
(48,7,1)
(35,52,2)
(31,53,2)
(58,12,2)
(7,61,2)
(52,34,2)
(29,58,2)
(3,58,2)
(16,58,2)
(3,12,2)
(33,58,2)
(34,53,2)
(4,52,2)
(31,52,2)
(0,15,2)
(48,58,2)
(48,7,2)
(3,7,2)
(48,12,2)
(56,5,2)
(20,58,2)
(58,7,2)
(42,58,2)
(3,15,2)
(48,15,2)
(46,52,2)
(47,52,2)
(28,58,2)
(37,58,2)
(12,52,2)
(12,31,2)
(41,14,2)
-----------------------------------
(0,printLine(dest)
(1,source)
(2,"")
(3,dest[data])
(4,printLine("fgets()
(5,100-1)
(6,)
(7,data = -1)
(8,source:)
(9,data)
(10,RET)
(11,1)
(12,data = atoi(inputBuffer)
(13,)
(14,100-1)
(15,dest[100] = "")
(16,data)
(17,dest)
(18,100)
(19,inputBuffer)
(20,source)
(21,data)
(22,data)
(23,)
(24,stdin)
(25,inputBuffer)
(26,)
(27,100)
(28,dest)
(29,dest[data] = \\\'\\\\0\\\')
(30,source)
(31,atoi(inputBuffer)
(32,dest)
(33,\\\'\\\\0\\\')
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,data)
(36,\\\'A\\\')
(37,dest)
(38,)
(39,100)
(40,inputBuffer)
(41,memset(source, \\\'A\\\', 100-1)
(42,data)
(43,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,source)
(45,dest)
(46,inputBuffer)
(47,"fgets()
(48,strncpy(dest, source, data)
(49,goto source;)
(50,"")
(51,1)
(52,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,inputBuffer[CHAR_ARRAY_SIZE] = "")
(54,\\\'\\\\0\\\')
(55,CHAR_ARRAY_SIZE)
(56,source[100-1])
(57,1)
(58,data < 100)
(59,if (data < 100)
(60,NULL)
(61,-1)
(62,source[100-1] = \\\'\\\\0\\\')
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^