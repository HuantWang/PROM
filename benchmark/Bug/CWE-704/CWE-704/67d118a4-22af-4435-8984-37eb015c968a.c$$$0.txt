-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_03_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
5==5
5
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,35,0)
(21,17,0)
(28,37,0)
(14,3,0)
(33,36,0)
(29,3,0)
(45,17,0)
(34,21,0)
(9,33,0)
(39,1,0)
(11,36,0)
(27,14,0)
(48,45,0)
(10,26,0)
(4,17,0)
(22,37,0)
(44,55,0)
(42,20,0)
(24,30,0)
(55,3,0)
(17,36,0)
(29,33,0)
(7,37,0)
(33,29,0)
(23,1,0)
(21,14,0)
(21,26,0)
(5,14,0)
(0,17,0)
(45,36,0)
(46,3,0)
(38,3,0)
(3,37,0)
(6,29,0)
(15,36,0)
(54,15,0)
(19,36,0)
(15,17,0)
(12,17,0)
(39,41,0)
(50,31,0)
(30,50,0)
(1,39,0)
(50,42,0)
(25,18,0)
(42,50,0)
(17,12,0)
(55,12,0)
(55,50,0)
(35,42,0)
(13,29,0)
(40,4,0)
(32,18,0)
(14,50,0)
(49,30,0)
(8,4,0)
(12,51,0)
(2,33,0)
(16,50,0)
(12,55,0)
(29,50,0)
(26,36,0)
(33,17,0)
(14,21,0)
(51,12,0)
(30,3,0)
(20,42,0)
(49,18,1)
(4,8,1)
(42,20,1)
(33,29,1)
(53,30,1)
(48,26,1)
(23,4,1)
(17,12,1)
(3,46,1)
(26,10,1)
(53,15,1)
(30,24,1)
(21,17,1)
(29,6,1)
(12,55,1)
(16,18,1)
(40,17,1)
(10,21,1)
(21,14,1)
(39,1,1)
(29,3,1)
(55,50,1)
(42,35,1)
(4,17,1)
(33,17,1)
(20,16,1)
(30,50,1)
(5,27,1)
(55,44,1)
(9,2,1)
(54,45,1)
(1,23,1)
(32,25,1)
(18,32,1)
(6,13,1)
(45,48,1)
(55,3,1)
(30,3,1)
(34,33,1)
(12,51,1)
(0,30,1)
(45,17,1)
(44,0,1)
(8,40,1)
(2,39,1)
(50,42,1)
(14,5,1)
(14,3,1)
(29,50,1)
(15,54,1)
(46,38,1)
(13,9,1)
(49,50,1)
(2,4,1)
(24,49,1)
(27,34,1)
(14,50,1)
(15,17,1)
(25,3,1)
(8,30,2)
(1,4,2)
(48,30,2)
(14,30,2)
(23,4,2)
(29,50,2)
(12,30,2)
(39,1,2)
(42,35,2)
(17,30,2)
(21,14,2)
(6,30,2)
(55,30,2)
(39,4,2)
(2,30,2)
(29,3,2)
(20,18,2)
(0,30,2)
(42,18,2)
(33,30,2)
(33,29,2)
(12,55,2)
(13,30,2)
(55,3,2)
(45,17,2)
(50,18,2)
(54,30,2)
(5,30,2)
(21,17,2)
(50,42,2)
(15,17,2)
(42,20,2)
(40,30,2)
(14,3,2)
(44,30,2)
(45,30,2)
(4,30,2)
(12,51,2)
(30,3,2)
(15,30,2)
(9,30,2)
(29,30,2)
(27,30,2)
(34,30,2)
(55,50,2)
(17,12,2)
(21,30,2)
(26,30,2)
(4,17,2)
(33,17,2)
(16,18,2)
(10,30,2)
(30,50,2)
(14,50,2)
-----------------------------------
(0,dataBuffer)
(1,-1)
(2,dataBuffer)
(3,data = 0)
(4,dataBuffer == NULL)
(5,1)
(6,1)
(7,if(5==5)
(8,NULL)
(9,\'A\')
(10,\'\\\\0\')
(11,if (dataBuffer == NULL)
(12,(char *)
(13,data)
(14,data-1)
(15,free(dataBuffer)
(16,data)
(17,* dataBuffer = (char *)
(18,5==5)
(19,dataBuffer)
(20,RAND32()
(21,dataBuffer[data-1])
(22,data)
(23,1)
(24,100)
(25,5)
(26,dataBuffer[data-1] = \'\\\\0\')
(27,data)
(28,if (data < 100)
(29,data-1)
(30,data < 100)
(31,)
(32,5)
(33,memset(dataBuffer, 'A', data-1)
(34,dataBuffer)
(35,short)
(36,)
(37,)
(38,data)
(39,exit(-1)
(40,dataBuffer)
(41,)
(42,(short)
(43,memset(dataBuffer, \'A\', data-1)
(44,data)
(45,printLine(dataBuffer)
(46,0)
(47,'\\\\0')
(48,dataBuffer)
(49,data)
(50,data = (short)
(51,char *)
(52,dataBuffer[data-1] = '\\\\0')
(53,RET)
(54,dataBuffer)
(55,malloc(data)
(56,'A')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^