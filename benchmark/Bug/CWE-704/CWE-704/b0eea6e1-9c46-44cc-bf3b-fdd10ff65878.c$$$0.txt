-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,71,73,76,78,80,82,86,88,89,91,92,97,99,100,101,105,106,111,113,115,117,122,124,125,129,131
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
90,91
90,92
94,95
94,96
98,99
98,100
103,104
103,105
119,120
119,121
-----guardedBy-----
39,59
105,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_14_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(24,30,0)
(36,38,0)
(53,21,0)
(15,46,0)
(45,40,0)
(26,21,0)
(27,47,0)
(64,31,0)
(31,0,0)
(67,22,0)
(60,26,0)
(44,23,0)
(59,23,0)
(26,46,0)
(33,0,0)
(34,39,0)
(47,37,0)
(13,51,0)
(6,3,0)
(40,45,0)
(11,3,0)
(20,65,0)
(66,0,0)
(52,46,0)
(61,23,0)
(19,40,0)
(12,38,0)
(38,37,0)
(18,4,0)
(30,24,0)
(40,31,0)
(25,39,0)
(38,23,0)
(38,3,0)
(35,8,0)
(4,67,0)
(10,45,0)
(16,52,0)
(7,40,0)
(63,57,0)
(8,31,0)
(41,16,0)
(8,24,0)
(46,65,0)
(43,46,0)
(3,46,0)
(17,48,0)
(56,46,0)
(23,65,0)
(49,67,0)
(50,21,0)
(44,47,0)
(24,8,0)
(24,67,0)
(28,31,0)
(58,4,0)
(67,24,0)
(29,51,0)
(57,2,0)
(4,23,0)
(51,16,0)
(14,38,0)
(44,3,0)
(1,65,0)
(44,67,0)
(32,52,0)
(21,26,0)
(38,67,0)
(0,62,0)
(9,44,0)
(16,51,0)
(48,3,0)
(42,26,0)
(48,46,0)
(54,40,0)
(5,44,0)
(16,51,1)
(63,45,1)
(21,50,1)
(47,27,1)
(4,58,1)
(13,41,1)
(38,3,1)
(11,39,1)
(17,47,1)
(67,24,1)
(45,40,1)
(48,3,1)
(44,67,1)
(36,4,1)
(45,10,1)
(49,45,1)
(3,6,1)
(44,23,1)
(38,67,1)
(41,26,1)
(44,3,1)
(29,13,1)
(55,48,1)
(8,31,1)
(6,11,1)
(12,14,1)
(59,61,1)
(25,34,1)
(4,23,1)
(11,57,1)
(60,42,1)
(40,31,1)
(17,4,1)
(10,40,1)
(31,28,1)
(44,9,1)
(14,36,1)
(42,3,1)
(27,44,1)
(38,23,1)
(5,38,1)
(35,49,1)
(64,39,1)
(8,35,1)
(34,23,1)
(23,59,1)
(24,30,1)
(11,67,1)
(18,52,1)
(51,29,1)
(39,25,1)
(57,63,1)
(28,64,1)
(54,19,1)
(48,17,1)
(19,7,1)
(4,67,1)
(38,12,1)
(26,21,1)
(32,16,1)
(58,18,1)
(9,5,1)
(52,32,1)
(7,31,1)
(40,54,1)
(24,8,1)
(50,53,1)
(53,60,1)
(45,40,2)
(24,45,2)
(44,67,2)
(8,45,2)
(5,4,2)
(19,39,2)
(63,45,2)
(4,67,2)
(48,3,2)
(10,39,2)
(44,3,2)
(45,39,2)
(4,23,2)
(24,30,2)
(40,31,2)
(7,39,2)
(38,23,2)
(67,24,2)
(28,39,2)
(57,45,2)
(9,4,2)
(54,39,2)
(47,4,2)
(31,39,2)
(44,23,2)
(35,45,2)
(38,67,2)
(67,45,2)
(8,31,2)
(64,39,2)
(12,4,2)
(26,21,2)
(38,4,2)
(44,4,2)
(38,3,2)
(40,39,2)
(14,4,2)
(27,4,2)
(16,51,2)
(24,8,2)
(36,4,2)
(49,45,2)
-----------------------------------
(0,)
(1,if(globalFive==5)
(2,)
(3,dest[100] = "")
(4,data < 100)
(5,dest)
(6,"")
(7,inputBuffer)
(8,atoi(inputBuffer)
(9,data)
(10,NULL)
(11,dest)
(12,data)
(13,100)
(14,source)
(15,dest)
(16,source[100-1])
(17,dest)
(18,data)
(19,CHAR_ARRAY_SIZE)
(20,data)
(21,100-1)
(22,)
(23,data = 0)
(24,(short)
(25,5)
(26,memset(source, \\\'A\\\', 100-1)
(27,\\\'\\\\0\\\')
(28,"")
(29,1)
(30,short)
(31,inputBuffer[CHAR_ARRAY_SIZE] = "")
(32,\\\'\\\\0\\\')
(33,inputBuffer)
(34,globalFive)
(35,inputBuffer)
(36,dest)
(37,)
(38,memcpy(dest, source, data)
(39,globalFive==5)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,source)
(42,source)
(43,source)
(44,dest[data])
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,)
(47,dest[data] = \\\'\\\\0\\\')
(48,printLine(dest)
(49,data)
(50,1)
(51,100-1)
(52,source[100-1] = \\\'\\\\0\\\')
(53,100)
(54,stdin)
(55,RET)
(56,if (data < 100)
(57,printLine("fgets()
(58,100)
(59,0)
(60,\\\'A\\\')
(61,data)
(62,)
(63,"fgets()
(64,inputBuffer)
(65,)
(66,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(67,data = (short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^