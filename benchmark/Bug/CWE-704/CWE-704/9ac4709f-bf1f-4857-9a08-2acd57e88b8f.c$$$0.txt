-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_07_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(56,4,0)
(49,51,0)
(16,6,0)
(17,4,0)
(20,4,0)
(9,0,0)
(5,51,0)
(14,4,0)
(26,14,0)
(44,54,0)
(29,45,0)
(18,51,0)
(40,22,0)
(39,7,0)
(31,17,0)
(9,17,0)
(17,45,0)
(50,41,0)
(12,35,0)
(46,1,0)
(54,47,0)
(42,0,0)
(47,54,0)
(51,7,0)
(52,17,0)
(3,22,0)
(24,12,0)
(21,35,0)
(30,15,0)
(41,14,0)
(27,5,0)
(28,14,0)
(32,15,0)
(1,12,0)
(14,41,0)
(0,4,0)
(14,17,0)
(37,9,0)
(52,4,0)
(11,6,0)
(9,49,0)
(53,22,0)
(45,17,0)
(5,12,0)
(12,22,0)
(43,17,0)
(15,17,0)
(45,29,0)
(8,43,0)
(1,51,0)
(35,12,0)
(51,19,0)
(7,51,0)
(23,41,0)
(41,51,0)
(49,12,0)
(36,49,0)
(49,9,0)
(45,1,0)
(41,12,0)
(48,52,0)
(43,4,0)
(13,5,0)
(47,25,0)
(1,45,0)
(10,49,0)
(47,54,1)
(0,42,1)
(52,17,1)
(23,50,1)
(50,28,1)
(1,51,1)
(46,31,1)
(36,10,1)
(49,12,1)
(31,5,1)
(5,13,1)
(35,21,1)
(14,41,1)
(49,36,1)
(13,27,1)
(26,47,1)
(45,29,1)
(21,24,1)
(51,7,1)
(7,39,1)
(30,17,1)
(10,37,1)
(1,12,1)
(14,17,1)
(43,17,1)
(2,52,1)
(5,12,1)
(27,51,1)
(15,17,1)
(43,8,1)
(41,23,1)
(41,51,1)
(8,0,1)
(41,12,1)
(5,51,1)
(6,16,1)
(18,6,1)
(45,1,1)
(44,15,1)
(42,9,1)
(9,49,1)
(27,6,1)
(54,44,1)
(16,11,1)
(28,26,1)
(39,18,1)
(11,12,1)
(15,32,1)
(26,15,1)
(17,45,1)
(12,35,1)
(48,43,1)
(37,14,1)
(1,46,1)
(49,51,1)
(9,17,1)
(2,5,1)
(52,48,1)
(32,30,1)
(28,5,2)
(37,5,2)
(47,15,2)
(31,5,2)
(9,49,2)
(45,29,2)
(5,12,2)
(1,5,2)
(44,15,2)
(14,17,2)
(52,5,2)
(45,1,2)
(51,7,2)
(30,5,2)
(23,5,2)
(8,5,2)
(12,35,2)
(41,51,2)
(18,6,2)
(17,45,2)
(39,6,2)
(1,51,2)
(10,5,2)
(49,5,2)
(5,51,2)
(36,5,2)
(7,6,2)
(0,5,2)
(50,5,2)
(1,12,2)
(9,17,2)
(43,5,2)
(52,17,2)
(32,5,2)
(51,6,2)
(42,5,2)
(26,5,2)
(41,12,2)
(9,5,2)
(47,54,2)
(14,41,2)
(43,17,2)
(45,5,2)
(14,5,2)
(48,5,2)
(54,15,2)
(17,5,2)
(15,5,2)
(49,12,2)
(46,5,2)
(41,5,2)
(15,17,2)
(49,51,2)
-----------------------------------
(0,dataBuffer[data-1] = '\\\\0')
(1,malloc(data)
(2,RET)
(3,if(staticFive==5)
(4,)
(5,data < 100)
(6,staticFive==5)
(7,-1)
(8,dataBuffer)
(9,dataBuffer[data-1])
(10,data)
(11,staticFive)
(12,data = -1)
(13,100)
(14,memset(dataBuffer, 'A', data-1)
(15,dataBuffer == NULL)
(16,5)
(17,* dataBuffer = (char *)
(18,data)
(19,)
(20,if (dataBuffer == NULL)
(21,1)
(22,)
(23,1)
(24,data)
(25,)
(26,dataBuffer)
(27,data)
(28,'A')
(29,char *)
(30,dataBuffer)
(31,dataBuffer)
(32,NULL)
(33,memset(dataBuffer, \'A\', data-1)
(34,dataBuffer[data-1] = \'\\\\0\')
(35,-1)
(36,1)
(37,dataBuffer)
(38,\'A\')
(39,1)
(40,data)
(41,data-1)
(42,'\\\\0')
(43,printLine(dataBuffer)
(44,1)
(45,(char *)
(46,data)
(47,exit(-1)
(48,dataBuffer)
(49,data-1)
(50,data)
(51,data = -1)
(52,free(dataBuffer)
(53,if (data < 100)
(54,-1)
(55,\'\\\\0\')
(56,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^