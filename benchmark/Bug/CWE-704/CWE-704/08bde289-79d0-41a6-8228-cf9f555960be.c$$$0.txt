-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
71,72
71,73
72,73
75,76
75,77
75,78
75,79
75,80
75,81
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
91,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
107,111
108,109
110,111
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
122,124
123,124
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,73,74,78,80,81,85,87,90,92,96,98,103,105,109,111,112,115,116,121,124,125,126,130,132,136,138
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
71,72
71,73
94,95
94,96
113,114
113,115
118,119
118,120
122,123
122,124
-----guardedBy-----
39,55
73,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(16,52,0)
(55,44,0)
(23,8,0)
(4,23,0)
(46,52,0)
(43,33,0)
(7,32,0)
(33,69,0)
(31,40,0)
(35,37,0)
(30,64,0)
(63,45,0)
(45,32,0)
(51,44,0)
(40,31,0)
(72,14,0)
(9,29,0)
(69,33,0)
(34,69,0)
(43,8,0)
(27,37,0)
(67,32,0)
(37,29,0)
(25,45,0)
(57,63,0)
(15,9,0)
(18,26,0)
(23,33,0)
(0,58,0)
(65,58,0)
(18,17,0)
(56,8,0)
(2,41,0)
(48,50,0)
(38,44,0)
(63,33,0)
(8,64,0)
(52,65,0)
(42,51,0)
(40,29,0)
(8,53,0)
(35,33,0)
(68,35,0)
(69,65,0)
(19,52,0)
(24,32,0)
(66,52,0)
(45,29,0)
(63,8,0)
(1,35,0)
(20,45,0)
(11,63,0)
(10,44,0)
(12,44,0)
(40,43,0)
(67,29,0)
(47,67,0)
(37,35,0)
(29,40,0)
(45,63,0)
(22,26,0)
(28,65,0)
(33,61,0)
(62,58,0)
(70,43,0)
(71,29,0)
(37,14,0)
(29,32,0)
(5,53,0)
(43,40,0)
(49,64,0)
(9,32,0)
(26,18,0)
(58,44,0)
(52,19,0)
(13,33,0)
(60,23,0)
(36,65,0)
(53,8,0)
(35,8,0)
(39,48,0)
(59,19,0)
(54,64,0)
(14,32,0)
(21,41,0)
(41,29,0)
(52,46,1)
(20,41,1)
(67,47,1)
(23,8,1)
(52,65,1)
(40,31,1)
(9,15,1)
(36,28,1)
(45,29,1)
(35,1,1)
(23,33,1)
(9,29,1)
(19,52,1)
(67,29,1)
(20,18,1)
(8,53,1)
(47,9,1)
(23,60,1)
(11,57,1)
(29,40,1)
(1,68,1)
(15,14,1)
(45,63,1)
(3,8,1)
(37,29,1)
(12,51,1)
(43,8,1)
(69,65,1)
(59,52,1)
(63,33,1)
(43,70,1)
(72,37,1)
(34,13,1)
(4,10,1)
(14,72,1)
(37,35,1)
(46,16,1)
(10,48,1)
(4,12,1)
(10,33,1)
(21,29,1)
(25,20,1)
(65,36,1)
(68,27,1)
(66,65,1)
(40,43,1)
(41,2,1)
(43,33,1)
(51,42,1)
(5,56,1)
(22,41,1)
(69,34,1)
(27,45,1)
(42,3,1)
(13,19,1)
(63,8,1)
(60,4,1)
(18,26,1)
(57,25,1)
(41,29,1)
(28,3,1)
(6,23,1)
(33,69,1)
(63,11,1)
(35,33,1)
(26,22,1)
(2,21,1)
(16,66,1)
(53,5,1)
(70,71,1)
(71,23,1)
(35,8,1)
(39,19,1)
(19,59,1)
(48,39,1)
(6,67,1)
(37,35,2)
(41,23,2)
(2,23,2)
(69,65,2)
(19,3,2)
(43,8,2)
(35,33,2)
(23,8,2)
(45,29,2)
(48,19,2)
(46,3,2)
(45,63,2)
(45,23,2)
(40,43,2)
(25,23,2)
(11,23,2)
(66,3,2)
(71,23,2)
(63,8,2)
(29,40,2)
(40,23,2)
(9,23,2)
(59,3,2)
(47,23,2)
(14,23,2)
(70,23,2)
(15,23,2)
(19,52,2)
(68,23,2)
(8,53,2)
(67,29,2)
(63,33,2)
(22,41,2)
(37,29,2)
(35,23,2)
(20,23,2)
(69,19,2)
(27,23,2)
(21,23,2)
(52,3,2)
(13,19,2)
(35,8,2)
(37,23,2)
(18,26,2)
(16,3,2)
(63,23,2)
(41,29,2)
(67,23,2)
(43,23,2)
(18,41,2)
(39,19,2)
(26,41,2)
(12,3,2)
(33,19,2)
(33,69,2)
(42,3,2)
(40,31,2)
(36,3,2)
(28,3,2)
(23,33,2)
(51,3,2)
(52,65,2)
(43,33,2)
(57,23,2)
(65,3,2)
(9,29,2)
(34,19,2)
(72,23,2)
(10,3,2)
(1,23,2)
(29,23,2)
-----------------------------------
(0,inputBuffer)
(1,1)
(2,NULL)
(3,6)
(4,data)
(5,1)
(6,RET)
(7,dataBuffer)
(8,data = -1)
(9,printLine(dataBuffer)
(10,break;)
(11,1)
(12,break;)
(13,data)
(14,dataBuffer[data-1] = \\\'\\\\0\\\')
(15,dataBuffer)
(16,CHAR_ARRAY_SIZE)
(17,)
(18,exit(-1)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,dataBuffer)
(21,dataBuffer)
(22,1)
(23,data < 100)
(24,if (dataBuffer == NULL)
(25,\\\'A\\\')
(26,-1)
(27,dataBuffer)
(28,inputBuffer)
(29,* dataBuffer = (char *)
(30,data)
(31,char *)
(32,)
(33,data = atoi(inputBuffer)
(34,inputBuffer)
(35,data-1)
(36,"")
(37,dataBuffer[data-1])
(38,case 6:)
(39,"fgets()
(40,(char *)
(41,dataBuffer == NULL)
(42,"Benign, fixed string")
(43,malloc(data)
(44,)
(45,memset(dataBuffer, \\\'A\\\', data-1)
(46,stdin)
(47,dataBuffer)
(48,printLine("fgets()
(49,switch(6)
(50,)
(51,printLine("Benign, fixed string")
(52,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,-1)
(54,if (data < 100)
(55,default:)
(56,data)
(57,data)
(58,)
(59,NULL)
(60,100)
(61,)
(62,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(63,data-1)
(64,)
(65,inputBuffer[CHAR_ARRAY_SIZE] = "")
(66,inputBuffer)
(67,free(dataBuffer)
(68,data)
(69,atoi(inputBuffer)
(70,data)
(71,dataBuffer)
(72,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^