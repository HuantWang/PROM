-----label-----
1
-----code-----
int CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_strncpy_61b_badSource(int data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
48,50
49,50
49,51
49,52
49,53
49,54
49,55
49,56
49,57
49,58
49,59
49,60
49,61
49,62
49,63
50,51
51,52
51,53
52,53
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
76,77
79,80
80,81
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
114,116
114,117
114,118
115,116
117,118
119,120
119,121
120,121
120,122
121,122
123,124
125,126
126,127
128,129
129,130
130,131
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
138,141
139,140
141,142
143,144
145,146
147,148
149,150
150,151
150,152
151,152
153,154
153,155
153,156
153,157
154,155
156,157
158,159
160,161
162,163
162,164
163,164
163,165
164,165
166,167
168,169
170,171
171,172
171,173
172,173
174,175
174,176
174,177
174,178
174,179
175,176
177,178
179,180
181,182
181,183
182,183
186,187
186,188
187,188
187,189
188,189
188,190
189,190
191,192
193,194
193,195
194,195
197,198
199,200
200,201
200,202
201,202
201,203
202,203
204,205
207,208
208,209
208,210
209,210
211,212
211,213
212,213
214,215
217,218
217,219
218,219
218,220
219,220
221,222
223,224
224,225
225,226
225,227
226,227
228,229
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
244,245
-----nextToken-----
2,4,6,8,13,15,19,21,25,27,30,34,36,39,42,44,47,53,56,58,60,62,66,68,70,74,77,78,82,87,88,90,96,97,98,100,105,106,109,111,116,118,122,124,127,131,133,135,140,142,144,146,148,152,155,157,159,161,165,167,169,173,176,178,180,183,184,185,190,192,195,196,198,203,205,206,210,213,215,216,220,222,227,229,233,235,240,242,245
-----computeFrom-----
51,52
51,53
64,65
64,66
84,85
84,86
92,93
92,94
102,103
102,104
113,114
113,115
137,138
137,139
150,151
150,152
163,164
163,165
171,172
171,173
181,182
181,183
187,188
187,189
188,189
188,190
193,194
193,195
200,201
200,202
208,209
208,210
218,219
218,220
231,232
231,233
-----guardedBy-----
220,229
233,242
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_strncpy_61b_badSource(int data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
int
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_strncpy_61b_badSource(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_strncpy_61b_badSource
int data
int
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(62,29,0)
(121,32,0)
(74,137,0)
(2,43,0)
(16,128,0)
(116,144,0)
(91,72,0)
(79,137,0)
(84,11,0)
(36,71,0)
(20,140,0)
(72,32,0)
(52,137,0)
(83,32,0)
(81,128,0)
(18,92,0)
(145,61,0)
(73,92,0)
(10,83,0)
(138,12,0)
(123,49,0)
(45,32,0)
(18,103,0)
(107,84,0)
(9,137,0)
(131,34,0)
(19,82,0)
(84,78,0)
(111,69,0)
(1,137,0)
(30,59,0)
(50,121,0)
(148,53,0)
(13,137,0)
(58,114,0)
(120,145,0)
(128,81,0)
(89,140,0)
(140,89,0)
(103,136,0)
(132,32,0)
(103,71,0)
(0,73,0)
(144,78,0)
(28,125,0)
(12,22,0)
(56,53,0)
(4,63,0)
(113,75,0)
(12,138,0)
(53,137,0)
(86,145,0)
(147,109,0)
(49,45,0)
(144,84,0)
(129,34,0)
(85,24,0)
(41,34,0)
(135,64,0)
(141,155,0)
(14,64,0)
(109,92,0)
(59,41,0)
(5,32,0)
(3,32,0)
(12,77,0)
(22,12,0)
(92,24,0)
(109,61,0)
(100,88,0)
(57,44,0)
(117,11,0)
(21,82,0)
(7,40,0)
(48,30,0)
(42,30,0)
(61,32,0)
(125,45,0)
(14,72,0)
(136,103,0)
(88,137,0)
(153,88,0)
(18,126,0)
(97,101,0)
(112,41,0)
(150,24,0)
(18,124,0)
(149,63,0)
(106,138,0)
(17,62,0)
(55,15,0)
(69,88,0)
(80,137,0)
(58,61,0)
(51,77,0)
(99,137,0)
(102,32,0)
(81,92,0)
(77,12,0)
(43,61,0)
(152,41,0)
(44,32,0)
(89,75,0)
(33,43,0)
(131,121,0)
(143,73,0)
(54,131,0)
(61,109,0)
(105,14,0)
(92,32,0)
(47,81,0)
(27,124,0)
(11,84,0)
(137,8,0)
(104,137,0)
(118,120,0)
(95,18,0)
(64,14,0)
(89,32,0)
(62,92,0)
(98,137,0)
(37,24,0)
(127,94,0)
(110,131,0)
(26,89,0)
(103,18,0)
(94,53,0)
(146,137,0)
(46,64,0)
(108,32,0)
(70,49,0)
(76,144,0)
(69,92,0)
(87,77,0)
(6,126,0)
(122,61,0)
(30,34,0)
(34,32,0)
(67,120,0)
(119,109,0)
(24,92,0)
(62,88,0)
(90,32,0)
(45,125,0)
(60,23,0)
(142,92,0)
(25,145,0)
(133,38,0)
(75,89,0)
(134,83,0)
(139,69,0)
(34,145,0)
(96,22,0)
(94,61,0)
(84,32,0)
(93,81,0)
(71,103,0)
(68,109,0)
(41,59,0)
(145,34,0)
(59,30,0)
(63,44,0)
(35,58,0)
(82,137,0)
(31,94,0)
(151,145,0)
(145,120,0)
(144,8,0)
(124,18,0)
(58,53,0)
(66,39,0)
(126,18,0)
(65,94,1)
(138,106,1)
(116,7,1)
(125,28,1)
(105,64,1)
(75,113,1)
(111,130,1)
(100,82,1)
(83,10,1)
(50,131,1)
(96,77,1)
(24,85,1)
(113,73,1)
(28,49,1)
(16,81,1)
(27,103,1)
(147,119,1)
(30,34,1)
(41,34,1)
(82,19,1)
(72,91,1)
(124,27,1)
(84,11,1)
(35,94,1)
(97,126,1)
(111,55,1)
(106,12,1)
(59,30,1)
(130,84,1)
(51,53,1)
(103,71,1)
(18,124,1)
(129,43,1)
(62,88,1)
(61,109,1)
(89,75,1)
(111,133,1)
(152,30,1)
(17,69,1)
(31,127,1)
(126,18,1)
(6,18,1)
(57,63,1)
(37,142,1)
(131,34,1)
(25,86,1)
(14,64,1)
(128,81,1)
(92,24,1)
(121,50,1)
(94,61,1)
(0,92,1)
(117,107,1)
(26,75,1)
(139,111,1)
(69,139,1)
(91,14,1)
(76,144,1)
(49,70,1)
(111,66,1)
(109,92,1)
(149,4,1)
(12,77,1)
(142,83,1)
(94,53,1)
(64,135,1)
(103,136,1)
(144,78,1)
(77,87,1)
(30,42,1)
(54,110,1)
(81,93,1)
(144,84,1)
(145,151,1)
(86,129,1)
(81,92,1)
(58,61,1)
(122,128,1)
(56,148,1)
(34,145,1)
(145,61,1)
(20,26,1)
(58,53,1)
(43,33,1)
(67,118,1)
(51,130,1)
(62,92,1)
(60,43,1)
(111,60,1)
(58,35,1)
(62,17,1)
(68,122,1)
(43,61,1)
(18,92,1)
(18,103,1)
(47,126,1)
(135,46,1)
(127,62,1)
(131,54,1)
(69,88,1)
(110,59,1)
(4,89,1)
(150,37,1)
(71,36,1)
(53,56,1)
(128,16,1)
(93,47,1)
(116,65,1)
(109,147,1)
(95,45,1)
(118,25,1)
(22,96,1)
(66,73,1)
(46,44,1)
(69,92,1)
(153,100,1)
(119,68,1)
(12,22,1)
(120,67,1)
(126,6,1)
(107,121,1)
(11,117,1)
(88,153,1)
(143,0,1)
(127,69,1)
(134,138,1)
(111,97,1)
(59,41,1)
(70,123,1)
(33,2,1)
(19,21,1)
(151,120,1)
(41,112,1)
(63,149,1)
(140,20,1)
(123,72,1)
(148,88,1)
(7,65,1)
(141,138,1)
(138,12,1)
(112,152,1)
(144,116,1)
(89,140,1)
(55,59,1)
(42,48,1)
(94,31,1)
(73,92,1)
(111,141,1)
(87,51,1)
(44,57,1)
(48,34,1)
(73,143,1)
(36,95,1)
(10,134,1)
(85,150,1)
(45,125,1)
(133,128,1)
(145,120,1)
(65,58,1)
(84,78,1)
(2,61,1)
(14,105,1)
(135,73,2)
(60,43,2)
(138,12,2)
(138,130,2)
(72,73,2)
(81,126,2)
(142,138,2)
(126,18,2)
(92,138,2)
(62,92,2)
(44,73,2)
(131,59,2)
(42,43,2)
(59,41,2)
(150,138,2)
(58,94,2)
(129,43,2)
(121,59,2)
(59,43,2)
(54,59,2)
(110,59,2)
(112,30,2)
(14,73,2)
(61,109,2)
(6,73,2)
(46,73,2)
(92,24,2)
(140,73,2)
(128,126,2)
(145,43,2)
(118,43,2)
(109,128,2)
(131,34,2)
(144,78,2)
(57,73,2)
(4,73,2)
(0,138,2)
(75,73,2)
(28,73,2)
(94,53,2)
(61,128,2)
(134,138,2)
(67,43,2)
(18,73,2)
(26,73,2)
(37,138,2)
(152,30,2)
(143,138,2)
(55,59,2)
(130,59,2)
(120,43,2)
(49,73,2)
(93,126,2)
(85,138,2)
(89,75,2)
(107,59,2)
(35,94,2)
(58,61,2)
(43,61,2)
(2,128,2)
(41,34,2)
(126,73,2)
(24,138,2)
(145,61,2)
(96,130,2)
(89,140,2)
(45,125,2)
(20,73,2)
(95,73,2)
(128,81,2)
(149,73,2)
(124,73,2)
(12,77,2)
(69,88,2)
(84,11,2)
(89,73,2)
(58,53,2)
(105,73,2)
(17,69,2)
(147,128,2)
(91,73,2)
(43,128,2)
(94,61,2)
(14,64,2)
(66,73,2)
(50,59,2)
(84,78,2)
(59,30,2)
(103,73,2)
(25,43,2)
(109,92,2)
(76,144,2)
(16,126,2)
(18,124,2)
(73,92,2)
(63,73,2)
(70,73,2)
(68,128,2)
(34,43,2)
(62,69,2)
(18,92,2)
(151,43,2)
(12,130,2)
(123,73,2)
(69,92,2)
(71,73,2)
(11,59,2)
(113,73,2)
(117,59,2)
(18,103,2)
(27,73,2)
(47,126,2)
(81,92,2)
(87,130,2)
(10,138,2)
(125,73,2)
(62,88,2)
(22,130,2)
(144,84,2)
(48,43,2)
(84,59,2)
(86,43,2)
(30,34,2)
(36,73,2)
(30,43,2)
(7,65,2)
(106,130,2)
(103,136,2)
(133,128,2)
(34,145,2)
(83,138,2)
(64,73,2)
(12,22,2)
(73,138,2)
(122,128,2)
(51,130,2)
(77,130,2)
(97,126,2)
(45,73,2)
(119,128,2)
(41,30,2)
(103,71,2)
(145,120,2)
(141,138,2)
(33,128,2)
-----------------------------------
(0,listenSocket)
(1,wsaDataInit)
(2,acceptSocket)
(3,if (listen(listenSocket, LISTEN_BACKLOG)
(4,service)
(5,if (WSAStartup(MAKEWORD(2,2)
(6,SOCKET_ERROR)
(7,WSACleanup()
(8,)
(9,recvResult)
(10,1)
(11,atoi(inputBuffer)
(12,WSAStartup(MAKEWORD(2,2)
(13,if (listenSocket != INVALID_SOCKET)
(14,service.sin_addr.s_addr)
(15,)
(16,SOCKET_ERROR)
(17,listenSocket)
(18,bind(listenSocket, (struct sockaddr*)
(19,0)
(20,service)
(21,wsaDataInit)
(22,&wsaData)
(23,)
(24,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(25,inputBuffer)
(26,0)
(27,service)
(28,TCP_PORT)
(29,)
(30,recvResult == SOCKET_ERROR)
(31,INVALID_SOCKET)
(32,)
(33,SOCKET_ERROR)
(34,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(35,acceptSocket)
(36,service)
(37,AF_INET)
(38,)
(39,)
(40,)
(41,recvResult == 0)
(42,SOCKET_ERROR)
(43,acceptSocket == SOCKET_ERROR)
(44,service.sin_family = AF_INET)
(45,service.sin_port = htons(TCP_PORT)
(46,service)
(47,listenSocket)
(48,recvResult)
(49,service.sin_port)
(50,'\\\\0')
(51,2)
(52,service)
(53,acceptSocket = INVALID_SOCKET)
(54,recvResult)
(55,break;)
(56,INVALID_SOCKET)
(57,AF_INET)
(58,CLOSE_SOCKET(acceptSocket)
(59,recvResult == SOCKET_ERROR || recvResult == 0)
(60,break;)
(61,acceptSocket = accept(listenSocket, NULL, NULL)
(62,CLOSE_SOCKET(listenSocket)
(63,service.sin_family)
(64,service.sin_addr)
(65,wsaDataInit)
(66,break;)
(67,1)
(68,listenSocket)
(69,listenSocket != INVALID_SOCKET)
(70,sin_port)
(71,&service)
(72,service.sin_addr.s_addr = INADDR_ANY)
(73,listenSocket == INVALID_SOCKET)
(74,acceptSocket)
(75,&service)
(76,RET)
(77,MAKEWORD(2,2)
(78,int data)
(79,if (acceptSocket != INVALID_SOCKET)
(80,inputBuffer)
(81,listen(listenSocket, LISTEN_BACKLOG)
(82,wsaDataInit = 0)
(83,wsaDataInit = 1)
(84,data = atoi(inputBuffer)
(85,IPPROTO_TCP)
(86,acceptSocket)
(87,2)
(88,listenSocket = INVALID_SOCKET)
(89,memset(&service, 0, sizeof(service)
(90,if (recvResult == SOCKET_ERROR || recvResult == 0)
(91,INADDR_ANY)
(92,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(93,LISTEN_BACKLOG)
(94,acceptSocket != INVALID_SOCKET)
(95,listenSocket)
(96,wsaData)
(97,break;)
(98,if (wsaDataInit)
(99,do)
(100,listenSocket)
(101,)
(102,if (bind(listenSocket, (struct sockaddr*)
(103,(struct sockaddr*)
(104,wsaData)
(105,s_addr)
(106,NO_ERROR)
(107,data)
(108,if (acceptSocket == SOCKET_ERROR)
(109,accept(listenSocket, NULL, NULL)
(110,inputBuffer)
(111,listenSocket)
(112,0)
(113,service)
(114,)
(115,\'\\\\0\')
(116,data)
(117,inputBuffer)
(118,CHAR_ARRAY_SIZE)
(119,NULL)
(120,CHAR_ARRAY_SIZE - 1)
(121,inputBuffer[recvResult] = '\\\\0')
(122,acceptSocket)
(123,service)
(124,sizeof(service)
(125,htons(TCP_PORT)
(126,bind(listenSocket, (struct sockaddr*)
(127,acceptSocket)
(128,listen(listenSocket, LISTEN_BACKLOG)
(129,recvResult)
(130,0)
(131,inputBuffer[recvResult])
(132,if (listenSocket == INVALID_SOCKET)
(133,break;)
(134,wsaDataInit)
(135,sin_addr)
(136,struct sockaddr*)
(137,)
(138,WSAStartup(MAKEWORD(2,2)
(139,INVALID_SOCKET)
(140,sizeof(service)
(141,break;)
(142,listenSocket)
(143,INVALID_SOCKET)
(144,return data;)
(145,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(146,listenSocket)
(147,NULL)
(148,acceptSocket)
(149,sin_family)
(150,SOCK_STREAM)
(151,0)
(152,recvResult)
(153,INVALID_SOCKET)
(154,inputBuffer[recvResult] = \'\\\\0\')
(155,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^