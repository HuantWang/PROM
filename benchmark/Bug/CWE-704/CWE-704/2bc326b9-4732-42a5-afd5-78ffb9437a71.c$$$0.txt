-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68b_badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68b_badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68b_badSink()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68b_badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(5,31,0)
(44,14,0)
(27,46,0)
(34,14,0)
(12,34,0)
(43,35,0)
(37,26,0)
(40,28,0)
(6,37,0)
(11,3,0)
(4,1,0)
(46,27,0)
(11,14,0)
(28,14,0)
(0,3,0)
(29,11,0)
(40,26,0)
(22,28,0)
(35,26,0)
(20,14,0)
(21,40,0)
(9,3,0)
(13,23,0)
(28,40,0)
(38,2,0)
(9,14,0)
(23,14,0)
(30,44,0)
(10,28,0)
(23,13,0)
(2,26,0)
(36,26,0)
(37,44,0)
(26,31,0)
(7,3,0)
(16,31,0)
(23,35,0)
(14,3,0)
(33,26,0)
(24,9,0)
(14,23,0)
(28,3,0)
(42,37,0)
(44,37,0)
(1,3,0)
(35,23,0)
(17,34,0)
(45,2,0)
(19,40,0)
(41,27,0)
(44,1,0)
(46,15,0)
(23,35,1)
(22,46,1)
(32,2,1)
(44,14,1)
(46,27,1)
(2,38,1)
(37,26,1)
(40,21,1)
(20,2,1)
(29,1,1)
(37,42,1)
(28,40,1)
(26,33,1)
(44,37,1)
(12,17,1)
(34,12,1)
(34,14,1)
(11,14,1)
(41,34,1)
(9,24,1)
(40,26,1)
(32,9,1)
(42,6,1)
(27,41,1)
(10,22,1)
(22,34,1)
(4,44,1)
(45,26,1)
(21,19,1)
(1,4,1)
(35,26,1)
(33,36,1)
(28,14,1)
(2,26,1)
(43,20,1)
(14,23,1)
(6,30,1)
(35,43,1)
(17,14,1)
(30,28,1)
(11,29,1)
(9,14,1)
(24,11,1)
(38,45,1)
(19,10,1)
(23,13,1)
(43,2,2)
(22,2,2)
(27,34,2)
(28,40,2)
(46,27,2)
(11,2,2)
(40,26,2)
(23,13,2)
(40,2,2)
(44,37,2)
(35,2,2)
(41,34,2)
(35,26,2)
(28,14,2)
(34,14,2)
(14,2,2)
(1,2,2)
(24,2,2)
(10,2,2)
(19,2,2)
(28,2,2)
(23,35,2)
(9,2,2)
(21,2,2)
(30,2,2)
(29,2,2)
(20,2,2)
(12,2,2)
(9,14,2)
(34,2,2)
(2,26,2)
(14,23,2)
(42,2,2)
(17,2,2)
(44,14,2)
(4,2,2)
(23,2,2)
(6,2,2)
(44,2,2)
(37,26,2)
(46,34,2)
(37,2,2)
(11,14,2)
-----------------------------------
(0,if (dataBuffer == NULL)
(1,dataBuffer[data-1] = '\\\\0')
(2,data < 100)
(3,)
(4,\'\\\\0\')
(5,if (data < 100)
(6,data)
(7,dataBuffer)
(8,dataBuffer[data-1] = \'\\\\0\')
(9,free(dataBuffer)
(10,'A')
(11,printLine(dataBuffer)
(12,NULL)
(13,char *)
(14,* dataBuffer = (char *)
(15,)
(16,data)
(17,dataBuffer)
(18,'\\\\0')
(19,data)
(20,dataBuffer)
(21,1)
(22,dataBuffer)
(23,(char *)
(24,dataBuffer)
(25,\'A\')
(26,data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData)
(27,-1)
(28,memset(dataBuffer, \'A\', data-1)
(29,dataBuffer)
(30,dataBuffer)
(31,)
(32,RET)
(33,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_68_badData)
(34,dataBuffer == NULL)
(35,malloc(data)
(36,data)
(37,data-1)
(38,100)
(39,memset(dataBuffer, 'A', data-1)
(40,data-1)
(41,1)
(42,1)
(43,data)
(44,dataBuffer[data-1])
(45,data)
(46,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^