-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
52,55
52,56
52,57
52,58
53,54
54,55
54,56
56,57
56,58
58,59
60,61
61,62
61,63
63,64
63,65
63,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
95,98
95,99
96,97
98,99
100,101
102,103
104,105
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,59,62,64,66,68,72,74,75,77,78,83,85,86,87,91,92,97,99,101,103,108,110,111,115,117
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
76,77
76,78
80,81
80,82
84,85
84,86
89,90
89,91
105,106
105,107
-----guardedBy-----
91,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_34_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType
CWE194_Unexpected_Sign_Extension__rand_memmove_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(35,29,0)
(53,33,0)
(46,3,0)
(53,20,0)
(58,56,0)
(1,13,0)
(20,22,0)
(24,14,0)
(13,1,0)
(11,22,0)
(38,30,0)
(9,6,0)
(39,58,0)
(22,3,0)
(53,46,0)
(48,56,0)
(43,15,0)
(45,30,0)
(0,3,0)
(56,22,0)
(19,33,0)
(14,20,0)
(50,49,0)
(44,13,0)
(51,53,0)
(29,49,0)
(3,31,0)
(14,22,0)
(12,46,0)
(16,1,0)
(42,20,0)
(27,53,0)
(56,58,0)
(29,5,0)
(13,44,0)
(54,56,0)
(49,22,0)
(55,16,0)
(28,22,0)
(23,37,0)
(10,58,0)
(37,31,0)
(15,46,0)
(9,20,0)
(41,5,0)
(21,22,0)
(17,37,0)
(47,15,0)
(2,31,0)
(57,16,0)
(9,46,0)
(36,9,0)
(5,29,0)
(33,6,0)
(7,1,0)
(34,5,0)
(18,20,0)
(30,46,0)
(52,57,0)
(1,31,0)
(26,57,0)
(16,31,0)
(13,32,0)
(32,13,0)
(46,15,0)
(4,9,0)
(8,31,0)
(40,9,0)
(54,48,1)
(14,20,1)
(13,32,1)
(24,33,1)
(25,14,1)
(52,26,1)
(30,46,1)
(26,1,1)
(49,50,1)
(1,13,1)
(9,40,1)
(35,56,1)
(47,12,1)
(50,29,1)
(17,23,1)
(46,15,1)
(12,16,1)
(15,43,1)
(58,39,1)
(56,58,1)
(24,30,1)
(51,9,1)
(7,37,1)
(5,41,1)
(39,10,1)
(4,30,1)
(16,55,1)
(41,34,1)
(37,17,1)
(53,27,1)
(48,20,1)
(27,51,1)
(53,20,1)
(9,46,1)
(19,53,1)
(16,1,1)
(42,46,1)
(43,47,1)
(13,44,1)
(18,42,1)
(57,52,1)
(30,38,1)
(36,4,1)
(10,54,1)
(29,5,1)
(20,18,1)
(14,24,1)
(38,45,1)
(45,49,1)
(40,36,1)
(33,19,1)
(55,57,1)
(32,7,1)
(9,20,1)
(53,46,1)
(34,35,1)
(13,44,2)
(9,30,2)
(36,30,2)
(53,30,2)
(16,1,2)
(53,46,2)
(19,30,2)
(53,20,2)
(51,30,2)
(29,5,2)
(13,32,2)
(14,20,2)
(4,30,2)
(9,20,2)
(40,30,2)
(46,15,2)
(33,30,2)
(56,58,2)
(1,13,2)
(9,46,2)
(27,30,2)
(30,46,2)
-----------------------------------
(0,data)
(1,data = (short)
(2,myUnion)
(3,)
(4,dest)
(5,100-1)
(6,)
(7,data)
(8,data)
(9,memmove(dest, source, data)
(10,100)
(11,if (data < 100)
(12,data)
(13,(short)
(14,printLine(dest)
(15,myUnion.unionSecond)
(16,myUnion.unionFirst = data)
(17,0)
(18,"")
(19,\\\'\\\\0\\\')
(20,dest[100] = "")
(21,source)
(22,)
(23,data)
(24,dest)
(25,RET)
(26,myUnion)
(27,data)
(28,dest)
(29,source[100-1])
(30,data < 100)
(31,)
(32,RAND32()
(33,dest[data] = \\\'\\\\0\\\')
(34,100)
(35,source)
(36,source)
(37,data = 0)
(38,100)
(39,1)
(40,data)
(41,1)
(42,dest)
(43,unionSecond)
(44,short)
(45,data)
(46,data = myUnion.unionSecond)
(47,myUnion)
(48,source)
(49,source[100-1] = \\\'\\\\0\\\')
(50,\\\'\\\\0\\\')
(51,dest)
(52,unionFirst)
(53,dest[data])
(54,\\\'A\\\')
(55,data)
(56,memset(source, \\\'A\\\', 100-1)
(57,myUnion.unionFirst)
(58,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^