-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_18_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,14,0)
(7,14,0)
(18,53,0)
(58,1,0)
(36,55,0)
(25,7,0)
(55,14,0)
(9,55,0)
(32,31,0)
(11,57,0)
(48,45,0)
(37,55,0)
(42,7,0)
(56,7,0)
(53,45,0)
(2,1,0)
(41,46,0)
(52,28,0)
(31,28,0)
(27,57,0)
(6,58,0)
(13,1,0)
(12,35,0)
(16,46,0)
(46,14,0)
(54,31,0)
(17,56,0)
(26,45,0)
(38,10,0)
(24,20,0)
(4,58,0)
(64,35,0)
(58,55,0)
(15,47,0)
(19,37,0)
(57,34,0)
(35,12,0)
(34,62,0)
(29,10,0)
(1,7,0)
(56,1,0)
(28,42,0)
(43,12,0)
(60,14,0)
(30,15,0)
(0,7,0)
(3,34,0)
(49,20,0)
(57,27,0)
(10,55,0)
(37,34,0)
(11,20,0)
(57,11,0)
(23,61,0)
(20,46,0)
(59,14,0)
(10,34,0)
(63,35,0)
(28,31,0)
(50,42,0)
(51,7,0)
(61,33,0)
(45,53,0)
(35,7,0)
(44,37,0)
(58,34,0)
(58,61,0)
(45,20,0)
(34,57,0)
(40,10,0)
(8,11,0)
(21,12,0)
(10,1,0)
(22,45,0)
(10,33,0)
(26,22,1)
(53,45,1)
(32,54,1)
(57,27,1)
(11,8,1)
(10,29,1)
(56,1,1)
(44,19,1)
(19,42,1)
(17,37,1)
(10,1,1)
(29,40,1)
(11,20,1)
(30,53,1)
(58,55,1)
(39,56,1)
(15,30,1)
(49,24,1)
(3,53,1)
(21,63,1)
(42,50,1)
(58,34,1)
(13,2,1)
(2,15,1)
(4,10,1)
(12,43,1)
(45,20,1)
(28,31,1)
(8,3,1)
(52,35,1)
(37,34,1)
(10,55,1)
(45,26,1)
(38,37,1)
(34,57,1)
(1,13,1)
(31,32,1)
(18,45,1)
(48,20,1)
(35,12,1)
(23,58,1)
(37,55,1)
(50,28,1)
(64,1,1)
(36,9,1)
(22,48,1)
(2,34,1)
(57,11,1)
(17,61,1)
(37,44,1)
(54,52,1)
(63,64,1)
(40,38,1)
(10,34,1)
(43,21,1)
(55,36,1)
(58,1,1)
(53,18,1)
(6,4,1)
(20,49,1)
(56,17,1)
(24,5,1)
(58,6,1)
(5,55,1)
(61,23,1)
(56,1,2)
(57,27,2)
(58,1,2)
(38,37,2)
(10,34,2)
(10,55,2)
(4,37,2)
(61,37,2)
(57,11,2)
(23,37,2)
(58,34,2)
(34,53,2)
(10,37,2)
(58,55,2)
(35,12,2)
(58,37,2)
(37,34,2)
(37,55,2)
(53,45,2)
(40,37,2)
(11,20,2)
(57,53,2)
(3,53,2)
(45,20,2)
(6,37,2)
(29,37,2)
(15,53,2)
(11,53,2)
(34,57,2)
(8,53,2)
(10,1,2)
(28,31,2)
(30,53,2)
-----------------------------------
(0,source)
(1,dest[100] = "")
(2,dest)
(3,data)
(4,dest)
(5,goto source;)
(6,data)
(7,)
(8,inputBuffer)
(9,data)
(10,memmove(dest, source, data)
(11,atoi(inputBuffer)
(12,100-1)
(13,"")
(14,)
(15,printLine("fgets()
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,dest)
(18,NULL)
(19,data)
(20,inputBuffer[CHAR_ARRAY_SIZE] = "")
(21,100)
(22,CHAR_ARRAY_SIZE)
(23,\\\'\\\\0\\\')
(24,inputBuffer)
(25,if (data < 100)
(26,stdin)
(27,short)
(28,source[100-1])
(29,data)
(30,"fgets()
(31,100-1)
(32,1)
(33,)
(34,data = (short)
(35,memset(source, \\\'A\\\', 100-1)
(36,0)
(37,data < 100)
(38,dest)
(39,RET)
(40,source)
(41,inputBuffer)
(42,source[100-1] = \\\'\\\\0\\\')
(43,1)
(44,100)
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,)
(47,)
(48,inputBuffer)
(49,"")
(50,\\\'\\\\0\\\')
(51,dest)
(52,source)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,100)
(55,data = 0)
(56,printLine(dest)
(57,(short)
(58,dest[data])
(59,source:)
(60,data)
(61,dest[data] = \\\'\\\\0\\\')
(62,)
(63,\\\'A\\\')
(64,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^