-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
37,57
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_09_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(36,49,0)
(5,25,0)
(67,57,0)
(16,29,0)
(8,57,0)
(39,0,0)
(44,39,0)
(8,22,0)
(46,60,0)
(23,1,0)
(22,33,0)
(43,1,0)
(30,51,0)
(58,64,0)
(29,56,0)
(57,8,0)
(17,55,0)
(41,9,0)
(60,59,0)
(55,24,0)
(38,39,0)
(39,41,0)
(26,56,0)
(10,16,0)
(56,40,0)
(11,9,0)
(53,8,0)
(14,22,0)
(56,29,0)
(9,15,0)
(64,3,0)
(23,25,0)
(48,26,0)
(28,3,0)
(0,39,0)
(28,1,0)
(23,26,0)
(13,59,0)
(50,56,0)
(47,56,0)
(4,23,0)
(47,22,0)
(2,57,0)
(54,41,0)
(62,3,0)
(65,49,0)
(8,56,0)
(32,29,0)
(37,3,0)
(16,41,0)
(27,28,0)
(52,9,0)
(59,22,0)
(63,22,0)
(29,32,0)
(20,47,0)
(64,1,0)
(49,1,0)
(55,17,0)
(29,16,0)
(61,33,0)
(6,8,0)
(59,56,0)
(12,39,0)
(66,33,0)
(60,1,0)
(26,23,0)
(42,26,0)
(7,0,0)
(19,33,0)
(57,3,0)
(31,41,0)
(45,30,0)
(60,46,0)
(57,1,0)
(35,17,0)
(18,47,0)
(26,22,0)
(1,60,0)
(59,60,0)
(25,3,0)
(1,3,0)
(25,5,1)
(27,64,1)
(42,4,1)
(64,58,1)
(4,57,1)
(30,45,1)
(60,46,1)
(43,47,1)
(16,10,1)
(16,41,1)
(1,60,1)
(55,17,1)
(45,0,1)
(22,63,1)
(65,36,1)
(59,13,1)
(5,23,1)
(34,22,1)
(47,18,1)
(0,39,1)
(26,56,1)
(28,1,1)
(53,6,1)
(67,2,1)
(6,67,1)
(7,39,1)
(29,16,1)
(8,56,1)
(35,49,1)
(39,38,1)
(26,48,1)
(60,59,1)
(36,1,1)
(8,22,1)
(12,44,1)
(49,65,1)
(48,42,1)
(23,1,1)
(29,32,1)
(54,34,1)
(26,22,1)
(50,0,1)
(44,41,1)
(49,1,1)
(10,50,1)
(64,1,1)
(31,54,1)
(59,22,1)
(28,27,1)
(39,41,1)
(41,31,1)
(56,29,1)
(57,1,1)
(21,28,1)
(2,55,1)
(18,20,1)
(47,22,1)
(20,34,1)
(20,56,1)
(57,8,1)
(2,49,1)
(47,56,1)
(13,43,1)
(23,26,1)
(8,53,1)
(20,30,1)
(63,14,1)
(0,7,1)
(38,12,1)
(17,35,1)
(58,25,1)
(21,47,1)
(59,56,1)
(56,29,2)
(8,22,2)
(29,0,2)
(60,59,2)
(57,1,2)
(59,47,2)
(23,1,2)
(36,47,2)
(5,47,2)
(8,56,2)
(57,47,2)
(64,1,2)
(35,49,2)
(4,47,2)
(27,47,2)
(55,17,2)
(31,34,2)
(59,22,2)
(57,8,2)
(59,56,2)
(45,0,2)
(42,47,2)
(0,34,2)
(23,47,2)
(64,47,2)
(23,26,2)
(12,34,2)
(10,0,2)
(53,47,2)
(47,22,2)
(6,47,2)
(28,47,2)
(2,47,2)
(67,47,2)
(17,49,2)
(41,34,2)
(49,47,2)
(26,47,2)
(39,41,2)
(47,56,2)
(16,0,2)
(48,47,2)
(29,16,2)
(38,34,2)
(49,1,2)
(50,0,2)
(65,47,2)
(25,47,2)
(43,47,2)
(1,60,2)
(44,34,2)
(29,32,2)
(16,41,2)
(60,47,2)
(8,47,2)
(60,46,2)
(56,0,2)
(58,47,2)
(1,47,2)
(39,34,2)
(0,39,2)
(28,1,2)
(26,56,2)
(26,22,2)
(7,34,2)
(13,47,2)
(54,34,2)
(55,49,2)
(30,0,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,* dataBuffer = (char *)
(2,dataBuffer)
(3,)
(4,dataBuffer)
(5,\\\'\\\\0\\\')
(6,data)
(7,NULL)
(8,data-1)
(9,)
(10,inputBuffer)
(11,inputBuffer)
(12,CHAR_ARRAY_SIZE)
(13,data)
(14,data)
(15,)
(16,atoi(inputBuffer)
(17,-1)
(18,100)
(19,if(GLOBAL_CONST_TRUE)
(20,data)
(21,RET)
(22,data = 0)
(23,dataBuffer[data-1])
(24,)
(25,dataBuffer[data-1] = \\\'\\\\0\\\')
(26,data-1)
(27,dataBuffer)
(28,free(dataBuffer)
(29,(short)
(30,printLine("fgets()
(31,"")
(32,short)
(33,)
(34,GLOBAL_CONST_TRUE)
(35,1)
(36,dataBuffer)
(37,dataBuffer)
(38,stdin)
(39,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,)
(41,inputBuffer[CHAR_ARRAY_SIZE] = "")
(42,data)
(43,dataBuffer)
(44,inputBuffer)
(45,"fgets()
(46,char *)
(47,data < 100)
(48,1)
(49,dataBuffer == NULL)
(50,data)
(51,)
(52,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,1)
(54,inputBuffer)
(55,exit(-1)
(56,data = (short)
(57,memset(dataBuffer, \\\'A\\\', data-1)
(58,dataBuffer)
(59,malloc(data)
(60,(char *)
(61,if (data < 100)
(62,if (dataBuffer == NULL)
(63,0)
(64,printLine(dataBuffer)
(65,NULL)
(66,data)
(67,\\\'A\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^