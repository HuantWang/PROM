-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
71,77
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
79,81
80,81
80,82
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
119,120
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,70,74,76,77,81,83,86,88,92,94,99,101,105,107,108,111,112,117,120,121,122,126,128,132,134
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
67,68
67,69
90,91
90,92
109,110
109,111
114,115
114,116
118,119
118,120
-----guardedBy-----
39,59
69,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_14_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(49,25,0)
(20,65,0)
(53,19,0)
(2,5,0)
(50,22,0)
(12,55,0)
(31,28,0)
(49,55,0)
(41,53,0)
(13,21,0)
(6,20,0)
(19,53,0)
(18,6,0)
(25,22,0)
(66,22,0)
(0,28,0)
(5,68,0)
(28,31,0)
(51,49,0)
(33,12,0)
(19,21,0)
(43,68,0)
(39,7,0)
(55,31,0)
(1,21,0)
(61,19,0)
(8,25,0)
(38,2,0)
(48,31,0)
(55,21,0)
(13,55,0)
(26,55,0)
(25,49,0)
(53,22,0)
(68,30,0)
(58,68,0)
(46,13,0)
(4,21,0)
(29,23,0)
(11,32,0)
(2,6,0)
(60,53,0)
(35,12,0)
(59,7,0)
(49,4,0)
(37,20,0)
(15,21,0)
(34,58,0)
(5,56,0)
(10,7,0)
(7,6,0)
(5,2,0)
(52,14,0)
(1,55,0)
(68,5,0)
(17,21,0)
(44,6,0)
(45,20,0)
(14,7,0)
(25,68,0)
(9,42,0)
(27,57,0)
(28,68,0)
(19,55,0)
(31,48,0)
(54,11,0)
(69,23,0)
(40,57,0)
(47,25,0)
(56,5,0)
(40,62,0)
(7,14,0)
(28,22,0)
(67,23,0)
(57,40,0)
(63,19,0)
(22,23,0)
(31,55,0)
(24,58,0)
(64,4,0)
(58,22,0)
(53,68,0)
(3,42,0)
(16,1,0)
(36,13,1)
(28,22,1)
(40,57,1)
(2,38,1)
(14,52,1)
(18,44,1)
(12,33,1)
(55,31,1)
(36,58,1)
(51,19,1)
(61,12,1)
(53,22,1)
(68,5,1)
(54,14,1)
(58,24,1)
(35,55,1)
(33,35,1)
(53,68,1)
(49,55,1)
(25,22,1)
(13,55,1)
(1,55,1)
(7,59,1)
(28,68,1)
(27,12,1)
(5,56,1)
(4,64,1)
(64,49,1)
(47,51,1)
(31,48,1)
(3,22,1)
(44,42,1)
(42,9,1)
(12,55,1)
(34,11,1)
(11,54,1)
(53,60,1)
(38,43,1)
(5,2,1)
(60,41,1)
(1,16,1)
(8,47,1)
(43,14,1)
(14,7,1)
(52,7,1)
(13,46,1)
(2,6,1)
(16,4,1)
(46,1,1)
(26,58,1)
(10,6,1)
(58,68,1)
(41,63,1)
(34,42,1)
(19,53,1)
(19,55,1)
(28,0,1)
(25,68,1)
(39,10,1)
(22,50,1)
(31,28,1)
(0,26,1)
(58,22,1)
(59,39,1)
(63,61,1)
(9,3,1)
(49,25,1)
(61,40,1)
(7,6,1)
(34,68,1)
(6,18,1)
(24,34,1)
(25,8,1)
(50,66,1)
(57,27,1)
(31,28,2)
(68,5,2)
(4,58,2)
(41,58,2)
(53,58,2)
(49,58,2)
(19,55,2)
(47,58,2)
(35,58,2)
(12,55,2)
(31,58,2)
(5,2,2)
(53,22,2)
(6,42,2)
(14,7,2)
(40,57,2)
(46,58,2)
(58,68,2)
(12,58,2)
(8,58,2)
(2,14,2)
(55,31,2)
(63,58,2)
(25,68,2)
(49,25,2)
(7,6,2)
(26,58,2)
(1,55,2)
(11,14,2)
(25,58,2)
(1,58,2)
(58,22,2)
(49,55,2)
(0,58,2)
(5,56,2)
(10,42,2)
(43,14,2)
(59,42,2)
(27,12,2)
(2,6,2)
(14,42,2)
(57,12,2)
(28,22,2)
(55,58,2)
(31,48,2)
(7,42,2)
(5,14,2)
(51,58,2)
(53,68,2)
(28,68,2)
(18,42,2)
(44,42,2)
(64,58,2)
(13,55,2)
(19,58,2)
(25,22,2)
(16,58,2)
(28,58,2)
(39,42,2)
(54,14,2)
(61,58,2)
(19,53,2)
(52,42,2)
(68,14,2)
(60,58,2)
(38,14,2)
(33,58,2)
(40,12,2)
(13,58,2)
-----------------------------------
(0,data)
(1,printLine(dataBuffer)
(2,atoi(inputBuffer)
(3,globalFive)
(4,dataBuffer[data-1] = \\\'\\\\0\\\')
(5,(short)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,1)
(9,5)
(10,inputBuffer)
(11,printLine("fgets()
(12,dataBuffer == NULL)
(13,free(dataBuffer)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,dataBuffer)
(16,dataBuffer)
(17,if (dataBuffer == NULL)
(18,"")
(19,memset(dataBuffer, \\\'A\\\', data-1)
(20,)
(21,)
(22,data = 0)
(23,)
(24,100)
(25,data-1)
(26,dataBuffer)
(27,1)
(28,malloc(data)
(29,data)
(30,)
(31,(char *)
(32,)
(33,NULL)
(34,data)
(35,dataBuffer)
(36,RET)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,inputBuffer)
(39,CHAR_ARRAY_SIZE)
(40,exit(-1)
(41,data)
(42,globalFive==5)
(43,data)
(44,inputBuffer)
(45,inputBuffer)
(46,dataBuffer)
(47,data)
(48,char *)
(49,dataBuffer[data-1])
(50,0)
(51,dataBuffer)
(52,NULL)
(53,data-1)
(54,"fgets()
(55,* dataBuffer = (char *)
(56,short)
(57,-1)
(58,data < 100)
(59,stdin)
(60,1)
(61,dataBuffer)
(62,)
(63,\\\'A\\\')
(64,\\\'\\\\0\\\')
(65,)
(66,data)
(67,if(globalFive==5)
(68,data = (short)
(69,if (data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^