-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(39,45,0)
(6,24,0)
(54,6,0)
(19,39,0)
(27,25,0)
(24,28,0)
(38,6,0)
(14,24,0)
(6,52,0)
(11,22,0)
(43,35,0)
(10,31,0)
(2,33,0)
(11,52,0)
(32,11,0)
(26,15,0)
(15,24,0)
(30,31,0)
(48,37,0)
(31,10,0)
(49,11,0)
(53,5,0)
(48,45,0)
(0,5,0)
(45,48,0)
(20,5,0)
(29,33,0)
(52,35,0)
(33,39,0)
(44,46,0)
(39,3,0)
(25,48,0)
(21,4,0)
(18,4,0)
(13,0,0)
(16,22,0)
(22,45,0)
(3,5,0)
(1,45,0)
(25,24,0)
(9,50,0)
(11,24,0)
(22,5,0)
(10,36,0)
(25,52,0)
(22,11,0)
(24,15,0)
(34,3,0)
(0,45,0)
(47,22,0)
(35,52,0)
(51,50,0)
(33,24,0)
(50,45,0)
(45,5,0)
(46,5,0)
(52,4,0)
(39,33,0)
(48,25,0)
(37,48,0)
(33,52,0)
(46,45,0)
(8,4,0)
(23,52,0)
(31,30,1)
(33,52,1)
(6,38,1)
(34,39,1)
(47,10,1)
(2,29,1)
(35,43,1)
(22,45,1)
(1,6,1)
(44,3,1)
(3,34,1)
(22,11,1)
(43,23,1)
(51,45,1)
(11,24,1)
(25,27,1)
(48,37,1)
(54,24,1)
(30,50,1)
(46,45,1)
(11,52,1)
(11,49,1)
(32,16,1)
(14,12,1)
(6,24,1)
(26,14,1)
(33,24,1)
(39,33,1)
(6,52,1)
(48,25,1)
(0,13,1)
(45,48,1)
(54,12,1)
(19,22,1)
(15,26,1)
(25,52,1)
(16,47,1)
(47,50,1)
(50,45,1)
(41,0,1)
(13,46,1)
(12,52,1)
(38,54,1)
(25,24,1)
(39,45,1)
(52,35,1)
(10,31,1)
(41,6,1)
(29,19,1)
(27,1,1)
(9,51,1)
(0,45,1)
(49,32,1)
(33,2,1)
(24,15,1)
(46,44,1)
(50,9,1)
(25,52,2)
(45,6,2)
(19,6,2)
(27,6,2)
(44,6,2)
(22,6,2)
(16,6,2)
(25,6,2)
(10,50,2)
(50,45,2)
(6,24,2)
(10,31,2)
(11,52,2)
(2,6,2)
(31,50,2)
(15,12,2)
(39,45,2)
(1,6,2)
(39,33,2)
(30,50,2)
(39,6,2)
(29,6,2)
(22,45,2)
(32,6,2)
(25,24,2)
(52,35,2)
(11,6,2)
(48,6,2)
(11,24,2)
(3,6,2)
(51,6,2)
(24,15,2)
(0,45,2)
(6,52,2)
(48,25,2)
(33,52,2)
(49,6,2)
(45,48,2)
(33,6,2)
(13,6,2)
(46,6,2)
(24,12,2)
(26,12,2)
(46,45,2)
(48,37,2)
(33,24,2)
(14,12,2)
(0,6,2)
(34,6,2)
(9,6,2)
(50,6,2)
(22,11,2)
(47,6,2)
-----------------------------------
(0,free(dataBuffer)
(1,dataBuffer)
(2,1)
(3,dataBuffer[data-1] = \'\\\\0\')
(4,)
(5,)
(6,data < 100)
(7,dataBuffer[data-1] = '\\\\0')
(8,data)
(9,NULL)
(10,exit(-1)
(11,data-1)
(12,globalReturnsTrue()
(13,dataBuffer)
(14,data)
(15,-1)
(16,'A')
(17,\'A\')
(18,if(globalReturnsTrue()
(19,dataBuffer)
(20,if (dataBuffer == NULL)
(21,if (data < 100)
(22,memset(dataBuffer, 'A', data-1)
(23,data)
(24,data = -1)
(25,malloc(data)
(26,1)
(27,data)
(28,)
(29,data)
(30,1)
(31,-1)
(32,data)
(33,data-1)
(34,\'\\\\0\')
(35,-1)
(36,)
(37,char *)
(38,100)
(39,dataBuffer[data-1])
(40,'\\\\0')
(41,RET)
(42,memset(dataBuffer, \'A\', data-1)
(43,1)
(44,dataBuffer)
(45,* dataBuffer = (char *)
(46,printLine(dataBuffer)
(47,dataBuffer)
(48,(char *)
(49,1)
(50,dataBuffer == NULL)
(51,dataBuffer)
(52,data = -1)
(53,dataBuffer)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^