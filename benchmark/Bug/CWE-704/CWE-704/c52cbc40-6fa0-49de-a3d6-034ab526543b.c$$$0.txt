-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a value input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
19,28
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
54,55
55,56
55,57
57,58
57,59
59,60
60,61
62,63
62,64
63,64
63,65
63,66
63,67
63,68
63,69
63,70
63,71
63,72
63,73
63,74
63,75
63,76
63,77
63,78
64,65
65,66
65,67
66,67
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
85,86
86,87
86,88
86,89
86,90
87,88
89,90
90,91
93,94
94,95
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
113,114
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
128,130
128,131
128,132
129,130
131,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
142,143
143,144
144,145
146,147
148,149
150,151
150,152
151,152
151,153
152,153
152,154
152,155
153,154
155,156
157,158
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
167,170
167,171
168,169
170,171
172,173
174,175
176,177
176,178
177,178
177,179
178,179
180,181
182,183
184,185
185,186
185,187
186,187
188,189
188,190
188,191
188,192
188,193
189,190
191,192
193,194
195,196
195,197
196,197
200,201
200,202
201,202
201,203
202,203
202,204
203,204
205,206
207,208
207,209
208,209
211,212
213,214
214,215
214,216
215,216
215,217
216,217
218,219
221,222
222,223
222,224
223,224
225,226
225,227
226,227
228,229
230,231
230,232
230,233
231,232
231,233
232,233
232,234
233,234
235,236
237,238
237,239
238,239
240,241
242,243
243,244
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
257,258
257,259
258,259
258,260
259,260
261,262
263,264
264,265
265,266
265,267
266,267
268,269
270,271
270,272
271,272
271,273
272,273
274,275
276,277
277,278
278,279
278,280
279,280
281,282
284,285
284,286
284,287
284,288
284,289
284,290
285,286
286,287
286,288
288,289
288,290
290,291
292,293
293,294
293,295
295,296
295,297
295,298
297,298
299,300
301,302
302,303
302,304
302,305
302,306
303,304
305,306
308,309
308,310
311,312
312,313
312,314
313,314
313,315
314,315
316,317
316,318
320,321
320,322
321,322
321,323
322,323
325,326
325,327
326,327
327,328
327,329
327,330
327,331
328,329
330,331
332,333
334,335
336,337
337,338
337,339
338,339
338,340
339,340
341,342
344,345
345,346
345,347
346,347
348,349
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,33,35,39,41,44,48,50,53,56,58,61,67,70,72,74,76,80,82,84,88,91,92,96,101,102,104,110,111,112,114,119,120,123,125,130,132,136,138,141,145,147,149,154,156,158,160,162,166,169,171,173,175,179,181,183,187,190,192,194,197,198,199,204,206,209,210,212,217,219,220,224,227,229,234,236,239,241,246,248,253,255,256,260,262,267,269,273,275,280,282,283,287,289,291,294,296,298,300,304,306,307,309,310,315,317,318,319,323,324,329,331,333,335,340,342,343,347,349
-----computeFrom-----
12,13
12,14
65,66
65,67
78,79
78,80
98,99
98,100
106,107
106,108
116,117
116,118
127,128
127,129
151,152
151,153
164,165
164,166
177,178
177,179
185,186
185,187
195,196
195,197
201,202
201,203
202,203
202,204
207,208
207,209
214,215
214,216
222,223
222,224
231,232
231,233
232,233
232,234
237,238
237,239
244,245
244,246
251,252
251,253
258,259
258,260
271,272
271,273
308,309
308,310
312,313
312,314
316,317
316,318
321,322
321,323
337,338
337,339
-----guardedBy-----
260,269
273,282
323,342
-----guardedByNegation-----
239,255
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_16_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(82,55,0)
(142,175,0)
(20,93,0)
(74,87,0)
(35,46,0)
(31,153,0)
(90,15,0)
(17,173,0)
(81,153,0)
(15,117,0)
(175,31,0)
(78,193,0)
(130,173,0)
(141,193,0)
(84,119,0)
(115,65,0)
(60,145,0)
(197,66,0)
(112,153,0)
(105,85,0)
(180,157,0)
(23,37,0)
(195,162,0)
(56,50,0)
(203,4,0)
(82,202,0)
(8,48,0)
(165,130,0)
(147,20,0)
(12,2,0)
(89,187,0)
(61,164,0)
(178,85,0)
(184,130,0)
(207,83,0)
(122,145,0)
(64,51,0)
(24,169,0)
(4,153,0)
(50,56,0)
(98,37,0)
(128,173,0)
(59,65,0)
(26,50,0)
(121,46,0)
(144,200,0)
(149,60,0)
(54,144,0)
(107,208,0)
(167,8,0)
(45,74,0)
(192,93,0)
(68,209,0)
(88,8,0)
(116,200,0)
(210,193,0)
(96,153,0)
(75,141,0)
(70,207,0)
(87,162,0)
(7,101,0)
(0,141,0)
(173,130,0)
(3,9,0)
(37,145,0)
(57,153,0)
(58,17,0)
(22,32,0)
(207,173,0)
(62,126,0)
(133,209,0)
(50,153,0)
(183,86,0)
(200,144,0)
(126,59,0)
(199,185,0)
(53,8,0)
(102,199,0)
(31,17,0)
(168,163,0)
(86,51,0)
(86,193,0)
(134,48,0)
(198,171,0)
(5,119,0)
(170,164,0)
(100,186,0)
(166,87,0)
(132,83,0)
(110,153,0)
(136,209,0)
(46,50,0)
(176,68,0)
(143,8,0)
(37,196,0)
(137,119,0)
(52,8,0)
(140,68,0)
(29,17,0)
(93,20,0)
(129,8,0)
(190,194,0)
(117,68,0)
(84,31,0)
(40,101,0)
(205,68,0)
(79,128,0)
(14,68,0)
(33,153,0)
(108,117,0)
(114,176,0)
(186,100,0)
(77,167,0)
(182,167,0)
(159,157,0)
(162,153,0)
(164,187,0)
(25,112,0)
(6,173,0)
(10,31,0)
(109,4,0)
(128,167,0)
(177,143,0)
(163,59,0)
(193,209,0)
(208,101,0)
(141,82,0)
(196,37,0)
(181,50,0)
(86,82,0)
(120,86,0)
(194,157,0)
(160,15,0)
(169,112,0)
(22,173,0)
(51,18,0)
(19,50,0)
(158,114,0)
(43,194,0)
(139,26,0)
(194,31,0)
(141,26,0)
(104,194,0)
(32,22,0)
(34,67,0)
(145,153,0)
(199,119,0)
(95,93,0)
(83,207,0)
(106,169,0)
(60,196,0)
(145,194,0)
(164,145,0)
(27,60,0)
(138,176,0)
(101,68,0)
(140,101,0)
(85,173,0)
(208,26,0)
(28,8,0)
(148,175,0)
(189,140,0)
(186,44,0)
(17,31,0)
(211,8,0)
(124,82,0)
(146,181,0)
(188,143,0)
(76,39,0)
(154,181,0)
(155,128,0)
(135,17,0)
(87,74,0)
(172,22,0)
(123,8,0)
(71,56,0)
(125,208,0)
(171,173,0)
(119,8,0)
(63,54,0)
(46,151,0)
(156,8,0)
(49,202,0)
(59,126,0)
(171,47,0)
(97,126,0)
(181,151,0)
(66,114,0)
(13,207,0)
(1,103,0)
(151,181,0)
(208,82,0)
(171,167,0)
(202,82,0)
(157,194,0)
(191,26,0)
(36,192,0)
(117,15,0)
(65,59,0)
(72,8,0)
(152,130,0)
(86,101,0)
(86,26,0)
(59,163,0)
(174,32,0)
(186,22,0)
(26,80,0)
(93,153,0)
(99,74,0)
(199,31,0)
(206,8,0)
(173,153,0)
(11,16,0)
(73,117,0)
(131,54,0)
(38,84,0)
(30,8,0)
(194,145,0)
(204,153,0)
(196,60,0)
(161,153,0)
(187,153,0)
(91,100,0)
(92,68,0)
(113,22,0)
(111,8,0)
(151,46,0)
(93,192,0)
(208,18,0)
(208,193,0)
(69,208,0)
(127,84,0)
(179,113,0)
(42,66,0)
(150,41,0)
(44,186,0)
(22,186,0)
(22,113,0)
(114,66,0)
(144,153,0)
(76,201,1)
(208,82,1)
(194,31,1)
(200,116,1)
(175,148,1)
(77,182,1)
(54,131,1)
(127,128,1)
(112,25,1)
(106,24,1)
(163,168,1)
(104,157,1)
(114,66,1)
(167,77,1)
(202,49,1)
(93,20,1)
(87,166,1)
(164,170,1)
(62,97,1)
(19,187,1)
(197,158,1)
(83,132,1)
(69,125,1)
(105,178,1)
(152,184,1)
(107,69,1)
(210,78,1)
(122,175,1)
(5,167,1)
(73,101,1)
(1,83,1)
(120,208,1)
(124,151,1)
(186,100,1)
(173,130,1)
(137,5,1)
(17,173,1)
(46,35,1)
(201,199,1)
(143,177,1)
(85,105,1)
(171,167,1)
(59,126,1)
(128,167,1)
(208,193,1)
(155,118,1)
(132,207,1)
(125,141,1)
(134,76,1)
(113,179,1)
(188,21,1)
(75,0,1)
(171,173,1)
(141,82,1)
(66,42,1)
(117,15,1)
(58,10,1)
(142,31,1)
(140,189,1)
(208,26,1)
(199,119,1)
(199,102,1)
(15,90,1)
(63,162,1)
(140,101,1)
(115,59,1)
(43,190,1)
(194,157,1)
(172,144,1)
(119,137,1)
(118,82,1)
(155,12,1)
(27,145,1)
(189,141,1)
(89,164,1)
(82,202,1)
(108,73,1)
(139,191,1)
(154,46,1)
(4,203,1)
(162,195,1)
(91,172,1)
(128,173,1)
(128,79,1)
(195,87,1)
(193,210,1)
(101,7,1)
(158,117,1)
(160,108,1)
(147,85,1)
(127,171,1)
(182,143,1)
(165,152,1)
(159,180,1)
(21,193,1)
(126,62,1)
(26,50,1)
(45,112,1)
(181,146,1)
(99,45,1)
(131,63,1)
(12,196,1)
(51,64,1)
(86,101,1)
(60,145,1)
(64,86,1)
(151,181,1)
(65,59,1)
(141,193,1)
(207,173,1)
(24,93,1)
(37,145,1)
(87,74,1)
(74,99,1)
(203,109,1)
(189,51,1)
(61,196,1)
(20,147,1)
(149,27,1)
(183,120,1)
(10,83,1)
(135,58,1)
(83,207,1)
(22,32,1)
(178,173,1)
(170,61,1)
(49,124,1)
(116,54,1)
(155,3,1)
(35,121,1)
(166,74,1)
(98,60,1)
(40,134,1)
(93,192,1)
(155,11,1)
(25,169,1)
(37,23,1)
(31,17,1)
(179,22,1)
(0,176,1)
(29,135,1)
(22,186,1)
(86,26,1)
(118,26,1)
(141,75,1)
(192,36,1)
(42,197,1)
(150,85,1)
(191,151,1)
(3,113,1)
(187,89,1)
(84,31,1)
(70,13,1)
(121,50,1)
(38,127,1)
(181,50,1)
(184,6,1)
(145,194,1)
(97,119,1)
(146,154,1)
(7,40,1)
(169,106,1)
(17,29,1)
(6,4,1)
(196,60,1)
(207,70,1)
(34,175,1)
(90,160,1)
(84,38,1)
(59,163,1)
(196,37,1)
(155,1,1)
(198,128,1)
(130,165,1)
(95,20,1)
(138,114,1)
(157,159,1)
(174,186,1)
(175,31,1)
(144,200,1)
(100,91,1)
(190,122,1)
(155,34,1)
(13,113,1)
(56,71,1)
(109,65,1)
(11,65,1)
(94,140,1)
(46,50,1)
(180,43,1)
(201,84,1)
(134,201,1)
(164,145,1)
(50,56,1)
(177,188,1)
(86,183,1)
(102,84,1)
(168,126,1)
(79,155,1)
(113,22,1)
(141,26,1)
(23,98,1)
(84,119,1)
(36,95,1)
(40,21,1)
(151,46,1)
(86,82,1)
(32,174,1)
(60,149,1)
(65,115,1)
(22,173,1)
(199,31,1)
(26,139,1)
(194,104,1)
(155,150,1)
(85,173,1)
(208,107,1)
(148,142,1)
(208,101,1)
(97,118,1)
(71,19,1)
(86,193,1)
(171,198,1)
(186,44,1)
(176,138,1)
(151,46,2)
(100,85,2)
(45,85,2)
(64,141,2)
(192,85,2)
(12,196,2)
(59,21,2)
(200,85,2)
(32,85,2)
(22,32,2)
(113,22,2)
(93,20,2)
(198,128,2)
(3,113,2)
(27,175,2)
(34,175,2)
(59,118,2)
(31,17,2)
(187,196,2)
(144,85,2)
(6,65,2)
(87,74,2)
(104,175,2)
(174,85,2)
(87,85,2)
(190,175,2)
(118,196,2)
(74,85,2)
(194,175,2)
(125,141,2)
(71,196,2)
(175,83,2)
(95,85,2)
(126,21,2)
(135,83,2)
(179,85,2)
(97,21,2)
(61,196,2)
(168,118,2)
(84,21,2)
(163,118,2)
(1,83,2)
(38,21,2)
(89,196,2)
(36,85,2)
(194,31,2)
(69,141,2)
(22,173,2)
(184,65,2)
(137,21,2)
(127,21,2)
(171,128,2)
(117,15,2)
(126,118,2)
(97,118,2)
(143,21,2)
(85,65,2)
(106,85,2)
(22,85,2)
(147,85,2)
(46,196,2)
(114,66,2)
(149,175,2)
(166,85,2)
(208,141,2)
(180,175,2)
(20,85,2)
(109,65,2)
(49,151,2)
(82,151,2)
(99,85,2)
(84,119,2)
(131,85,2)
(46,50,2)
(163,21,2)
(164,145,2)
(171,173,2)
(107,141,2)
(157,175,2)
(139,151,2)
(148,83,2)
(23,60,2)
(167,21,2)
(22,186,2)
(162,85,2)
(181,50,2)
(91,85,2)
(56,196,2)
(86,82,2)
(196,175,2)
(207,173,2)
(51,141,2)
(86,141,2)
(140,101,2)
(208,82,2)
(29,83,2)
(83,207,2)
(105,65,2)
(70,113,2)
(208,193,2)
(165,65,2)
(62,21,2)
(150,85,2)
(188,21,2)
(84,31,2)
(82,202,2)
(50,56,2)
(199,31,2)
(25,85,2)
(37,145,2)
(146,46,2)
(159,175,2)
(152,65,2)
(151,196,2)
(128,167,2)
(186,44,2)
(201,21,2)
(19,196,2)
(195,85,2)
(26,151,2)
(177,21,2)
(194,157,2)
(134,21,2)
(154,46,2)
(132,113,2)
(93,85,2)
(4,65,2)
(172,85,2)
(83,113,2)
(178,65,2)
(37,60,2)
(171,167,2)
(130,65,2)
(173,65,2)
(169,85,2)
(144,200,2)
(93,192,2)
(76,201,2)
(173,130,2)
(196,37,2)
(62,118,2)
(86,26,2)
(26,50,2)
(60,175,2)
(128,173,2)
(10,83,2)
(182,21,2)
(141,26,2)
(155,21,2)
(79,21,2)
(58,83,2)
(115,21,2)
(199,84,2)
(164,196,2)
(141,82,2)
(199,119,2)
(59,126,2)
(183,141,2)
(102,84,2)
(31,83,2)
(151,181,2)
(5,21,2)
(86,101,2)
(208,26,2)
(50,196,2)
(115,118,2)
(119,21,2)
(24,85,2)
(175,31,2)
(65,59,2)
(142,83,2)
(203,65,2)
(202,151,2)
(168,21,2)
(145,175,2)
(63,85,2)
(186,85,2)
(59,163,2)
(17,83,2)
(191,151,2)
(124,151,2)
(116,85,2)
(128,21,2)
(54,85,2)
(196,60,2)
(60,145,2)
(13,113,2)
(43,175,2)
(65,118,2)
(120,141,2)
(186,100,2)
(208,101,2)
(65,21,2)
(98,60,2)
(145,194,2)
(181,46,2)
(122,175,2)
(112,85,2)
(170,196,2)
(11,65,2)
(207,113,2)
(113,85,2)
(85,173,2)
(77,21,2)
(121,196,2)
(17,173,2)
(35,196,2)
(86,193,2)
(141,193,2)
-----------------------------------
(0,data)
(1,break;)
(2,)
(3,break;)
(4,wsaDataInit = 1)
(5,acceptSocket)
(6,listenSocket)
(7,"")
(8,)
(9,)
(10,acceptSocket)
(11,break;)
(12,break;)
(13,listenSocket)
(14,if (data < 100)
(15,100-1)
(16,)
(17,accept(listenSocket, NULL, NULL)
(18,)
(19,tempInt)
(20,&service)
(21,1)
(22,bind(listenSocket, (struct sockaddr*)
(23,0)
(24,service)
(25,AF_INET)
(26,data = tempInt)
(27,recvResult)
(28,do)
(29,NULL)
(30,wsaDataInit)
(31,acceptSocket = accept(listenSocket, NULL, NULL)
(32,sizeof(service)
(33,if (acceptSocket == SOCKET_ERROR)
(34,break;)
(35,SHRT_MAX)
(36,service)
(37,recvResult == 0)
(38,INVALID_SOCKET)
(39,)
(40,dest)
(41,)
(42,1)
(43,inputBuffer)
(44,struct sockaddr*)
(45,service)
(46,tempInt > SHRT_MAX)
(47,)
(48,)
(49,1)
(50,tempInt = atoi(inputBuffer)
(51,dest[data] = \\\'\\\\0\\\')
(52,tempInt)
(53,listenSocket)
(54,service.sin_port)
(55,)
(56,atoi(inputBuffer)
(57,if (bind(listenSocket, (struct sockaddr*)
(58,listenSocket)
(59,WSAStartup(MAKEWORD(2,2)
(60,recvResult == SOCKET_ERROR)
(61,inputBuffer)
(62,2)
(63,service)
(64,\\\'\\\\0\\\')
(65,WSAStartup(MAKEWORD(2,2)
(66,100-1)
(67,)
(68,)
(69,source)
(70,LISTEN_BACKLOG)
(71,inputBuffer)
(72,acceptSocket)
(73,source)
(74,service.sin_addr)
(75,100)
(76,WSACleanup()
(77,INVALID_SOCKET)
(78,data)
(79,INVALID_SOCKET)
(80,)
(81,if (WSAStartup(MAKEWORD(2,2)
(82,data = -1)
(83,listen(listenSocket, LISTEN_BACKLOG)
(84,acceptSocket != INVALID_SOCKET)
(85,listenSocket == INVALID_SOCKET)
(86,dest[data])
(87,service.sin_addr.s_addr)
(88,inputBuffer)
(89,\\\'\\\\0\\\')
(90,1)
(91,service)
(92,dest)
(93,memset(&service, 0, sizeof(service)
(94,RET)
(95,0)
(96,if (listenSocket == INVALID_SOCKET)
(97,2)
(98,recvResult)
(99,sin_addr)
(100,&service)
(101,dest[100] = "")
(102,acceptSocket)
(103,)
(104,0)
(105,INVALID_SOCKET)
(106,sin_family)
(107,data)
(108,\\\'A\\\')
(109,wsaDataInit)
(110,if (recvResult == SOCKET_ERROR || recvResult == 0)
(111,if (wsaDataInit)
(112,service.sin_family = AF_INET)
(113,bind(listenSocket, (struct sockaddr*)
(114,source[100-1])
(115,NO_ERROR)
(116,TCP_PORT)
(117,memset(source, \\\'A\\\', 100-1)
(118,0)
(119,acceptSocket = INVALID_SOCKET)
(120,dest)
(121,tempInt)
(122,recvResult)
(123,recvResult)
(124,data)
(125,dest)
(126,MAKEWORD(2,2)
(127,acceptSocket)
(128,listenSocket != INVALID_SOCKET)
(129,if (acceptSocket != INVALID_SOCKET)
(130,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(131,sin_port)
(132,SOCKET_ERROR)
(133,data)
(134,break;)
(135,NULL)
(136,while(1)
(137,INVALID_SOCKET)
(138,\\\'\\\\0\\\')
(139,tempInt)
(140,printLine(dest)
(141,data < 100)
(142,acceptSocket)
(143,wsaDataInit = 0)
(144,service.sin_port = htons(TCP_PORT)
(145,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(146,SHRT_MIN)
(147,service)
(148,SOCKET_ERROR)
(149,SOCKET_ERROR)
(150,break;)
(151,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(152,SOCK_STREAM)
(153,)
(154,tempInt)
(155,listenSocket)
(156,service)
(157,CHAR_ARRAY_SIZE - 1)
(158,source)
(159,1)
(160,100)
(161,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(162,service.sin_addr.s_addr = INADDR_ANY)
(163,&wsaData)
(164,inputBuffer[recvResult])
(165,IPPROTO_TCP)
(166,s_addr)
(167,listenSocket = INVALID_SOCKET)
(168,wsaData)
(169,service.sin_family)
(170,recvResult)
(171,CLOSE_SOCKET(listenSocket)
(172,listenSocket)
(173,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(174,service)
(175,acceptSocket == SOCKET_ERROR)
(176,source[100-1] = \\\'\\\\0\\\')
(177,0)
(178,listenSocket)
(179,SOCKET_ERROR)
(180,CHAR_ARRAY_SIZE)
(181,tempInt < SHRT_MIN)
(182,listenSocket)
(183,data)
(184,AF_INET)
(185,)
(186,(struct sockaddr*)
(187,inputBuffer[recvResult] = \\\'\\\\0\\\')
(188,wsaDataInit)
(189,dest)
(190,acceptSocket)
(191,data)
(192,sizeof(service)
(193,data = 0)
(194,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(195,INADDR_ANY)
(196,recvResult == SOCKET_ERROR || recvResult == 0)
(197,100)
(198,listenSocket)
(199,CLOSE_SOCKET(acceptSocket)
(200,htons(TCP_PORT)
(201,wsaDataInit)
(202,-1)
(203,1)
(204,if (listen(listenSocket, LISTEN_BACKLOG)
(205,source)
(206,wsaData)
(207,listen(listenSocket, LISTEN_BACKLOG)
(208,memcpy(dest, source, data)
(209,)
(210,0)
(211,if (listenSocket != INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^