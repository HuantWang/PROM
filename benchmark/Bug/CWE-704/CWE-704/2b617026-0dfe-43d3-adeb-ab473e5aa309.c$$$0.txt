-----label-----
1
-----code-----
static int badSource(int data)
{
    if(badStatic)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
15,16
15,17
16,17
18,19
19,20
21,22
22,23
-----nextToken-----
2,4,6,8,12,17,20,23
-----computeFrom-----
15,16
15,17
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int data){    if(badStatic)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    return data;}
static int
badSource(int data)
badSource
int data
int
data
data
{    if(badStatic)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    return data;}
if(badStatic)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
badStatic
badStatic
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
return data;
data
data
-----joern-----
(4,0,0)
(2,9,0)
(7,10,0)
(2,4,0)
(8,4,0)
(4,8,0)
(4,9,0)
(2,10,0)
(6,2,0)
(5,4,0)
(3,2,0)
(5,1,1)
(8,5,1)
(2,9,1)
(2,3,1)
(6,2,1)
(4,9,1)
(4,8,1)
(2,4,1)
(3,1,1)
(3,4,1)
(4,8,2)
(6,2,2)
(2,9,2)
(2,4,2)
(4,1,2)
(5,1,2)
(4,9,2)
(8,1,2)
-----------------------------------
(0,)
(1,badStatic)
(2,return data;)
(3,data)
(4,data = RAND32()
(5,data)
(6,RET)
(7,if(badStatic)
(8,RAND32()
(9,int data)
(10,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^