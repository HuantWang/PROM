-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
60,61
60,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,33,35,38,40,42,44,48,50,51,53,54,59,61,62,63,67,68,73,75,77,79,84,86,87,91,93
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
56,57
56,58
60,61
60,62
65,66
65,67
81,82
81,83
-----guardedBy-----
67,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_10_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(21,43,0)
(22,16,0)
(23,16,0)
(13,12,0)
(3,45,0)
(14,10,0)
(37,20,0)
(2,45,0)
(27,3,0)
(41,2,0)
(43,31,0)
(5,16,0)
(30,34,0)
(3,35,0)
(25,20,0)
(16,45,0)
(6,44,0)
(38,24,0)
(18,12,0)
(7,10,0)
(11,9,0)
(47,9,0)
(12,34,0)
(33,37,0)
(8,14,0)
(1,35,0)
(16,31,0)
(35,19,0)
(16,10,0)
(24,9,0)
(4,20,0)
(19,35,0)
(36,24,0)
(45,17,0)
(9,12,0)
(39,45,0)
(42,45,0)
(15,12,0)
(32,34,0)
(9,24,0)
(2,10,0)
(37,44,0)
(20,37,0)
(35,34,0)
(46,3,0)
(40,10,0)
(2,43,0)
(14,12,0)
(45,39,0)
(28,19,0)
(2,35,0)
(44,12,0)
(0,2,0)
(10,12,0)
(16,35,0)
(11,47,1)
(3,27,1)
(16,10,1)
(16,5,1)
(27,46,1)
(20,25,1)
(39,42,1)
(41,16,1)
(2,35,1)
(42,26,1)
(37,20,1)
(33,9,1)
(4,33,1)
(3,45,1)
(22,3,1)
(14,10,1)
(16,35,1)
(0,41,1)
(24,36,1)
(35,19,1)
(8,3,1)
(5,23,1)
(8,43,1)
(40,45,1)
(43,21,1)
(2,45,1)
(28,1,1)
(2,10,1)
(9,24,1)
(45,39,1)
(2,0,1)
(25,4,1)
(21,2,1)
(38,11,1)
(16,45,1)
(46,44,1)
(26,35,1)
(7,40,1)
(47,10,1)
(29,14,1)
(40,26,1)
(44,6,1)
(19,28,1)
(10,7,1)
(36,38,1)
(14,8,1)
(3,35,1)
(6,37,1)
(23,22,1)
(43,3,2)
(16,3,2)
(41,3,2)
(2,45,2)
(16,10,2)
(35,19,2)
(0,3,2)
(39,26,2)
(9,24,2)
(45,39,2)
(45,26,2)
(2,3,2)
(5,3,2)
(3,35,2)
(22,3,2)
(2,35,2)
(2,10,2)
(21,3,2)
(3,45,2)
(23,3,2)
(16,45,2)
(14,10,2)
(37,20,2)
(16,35,2)
(42,26,2)
-----------------------------------
(0,data)
(1,data)
(2,dest[data])
(3,data < 100)
(4,100)
(5,data)
(6,\\\'\\\\0\\\')
(7,"")
(8,dest)
(9,memset(source, \\\'A\\\', 100-1)
(10,dest[100] = "")
(11,\\\'A\\\')
(12,)
(13,source)
(14,printLine(dest)
(15,if (data < 100)
(16,memmove(dest, source, data)
(17,)
(18,dest)
(19,-1)
(20,100-1)
(21,\\\'\\\\0\\\')
(22,dest)
(23,source)
(24,100-1)
(25,1)
(26,globalTrue)
(27,100)
(28,1)
(29,RET)
(30,if(globalTrue)
(31,)
(32,data)
(33,source)
(34,)
(35,data = -1)
(36,1)
(37,source[100-1])
(38,100)
(39,RAND32()
(40,dest)
(41,dest)
(42,data)
(43,dest[data] = \\\'\\\\0\\\')
(44,source[100-1] = \\\'\\\\0\\\')
(45,data = RAND32()
(46,data)
(47,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^