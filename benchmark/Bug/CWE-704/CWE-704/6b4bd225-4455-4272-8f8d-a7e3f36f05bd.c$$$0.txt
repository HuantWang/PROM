-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
37,40
37,41
38,39
40,41
43,44
44,45
46,47
46,48
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
51,57
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,42,45,49,50,54,56,57,61,63,66,68,72,74,79,81,85,87,88,91,92,97,100,101,102,106,108,112,114
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
47,48
47,49
70,71
70,72
89,90
89,91
94,95
94,96
98,99
98,100
-----guardedBy-----
49,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(1,43,0)
(45,26,0)
(39,26,0)
(38,27,0)
(23,9,0)
(36,34,0)
(56,15,0)
(20,29,0)
(40,15,0)
(53,15,0)
(14,12,0)
(25,18,0)
(44,26,0)
(36,24,0)
(33,12,0)
(29,10,0)
(22,15,0)
(34,26,0)
(52,10,0)
(9,34,0)
(8,50,0)
(43,50,0)
(37,18,0)
(43,15,0)
(18,34,0)
(3,24,0)
(0,34,0)
(22,7,0)
(40,50,0)
(32,55,0)
(47,8,0)
(42,36,0)
(12,34,0)
(35,50,0)
(27,34,0)
(7,22,0)
(50,15,0)
(28,40,0)
(55,9,0)
(22,50,0)
(46,16,0)
(7,34,0)
(9,55,0)
(31,17,0)
(19,35,0)
(21,56,0)
(57,29,0)
(54,26,0)
(30,10,0)
(51,50,0)
(34,27,0)
(50,55,0)
(5,22,0)
(17,46,0)
(35,18,0)
(24,13,0)
(6,7,0)
(18,35,0)
(59,8,0)
(11,24,0)
(55,50,0)
(48,10,0)
(35,56,0)
(2,22,0)
(41,15,0)
(46,17,0)
(55,32,0)
(58,48,0)
(24,36,0)
(49,7,0)
(8,50,1)
(37,19,1)
(57,48,1)
(40,50,1)
(29,10,1)
(33,29,1)
(24,36,1)
(36,42,1)
(7,49,1)
(51,12,1)
(58,24,1)
(25,37,1)
(7,34,1)
(18,34,1)
(4,12,1)
(5,46,1)
(48,10,1)
(46,17,1)
(23,51,1)
(34,27,1)
(56,21,1)
(5,8,1)
(30,34,1)
(6,2,1)
(28,56,1)
(47,59,1)
(43,1,1)
(49,6,1)
(4,43,1)
(48,58,1)
(2,5,1)
(27,38,1)
(21,35,1)
(18,25,1)
(1,40,1)
(17,31,1)
(35,18,1)
(55,32,1)
(19,22,1)
(36,34,1)
(55,9,1)
(59,50,1)
(43,50,1)
(12,14,1)
(22,7,1)
(50,55,1)
(12,34,1)
(3,29,1)
(11,3,1)
(20,57,1)
(31,8,1)
(52,30,1)
(9,34,1)
(22,50,1)
(14,33,1)
(57,10,1)
(10,52,1)
(29,20,1)
(42,11,1)
(8,47,1)
(9,23,1)
(35,50,1)
(40,28,1)
(38,0,1)
(40,50,2)
(34,27,2)
(3,29,2)
(28,12,2)
(9,12,2)
(20,29,2)
(18,12,2)
(18,34,2)
(23,12,2)
(50,55,2)
(55,12,2)
(46,17,2)
(22,50,2)
(17,8,2)
(24,36,2)
(43,50,2)
(11,29,2)
(22,7,2)
(7,34,2)
(51,12,2)
(55,9,2)
(5,12,2)
(50,12,2)
(35,12,2)
(59,12,2)
(7,12,2)
(19,12,2)
(58,29,2)
(36,34,2)
(24,29,2)
(35,18,2)
(37,12,2)
(12,34,2)
(43,12,2)
(8,12,2)
(8,50,2)
(29,29,2)
(31,8,2)
(42,29,2)
(55,32,2)
(56,12,2)
(35,50,2)
(49,12,2)
(1,12,2)
(2,12,2)
(29,10,2)
(47,12,2)
(9,34,2)
(46,8,2)
(48,29,2)
(21,12,2)
(6,12,2)
(22,12,2)
(40,12,2)
(36,29,2)
(57,29,2)
(48,10,2)
(25,12,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,\\\'A\\\')
(3,stdin)
(4,RET)
(5,dataBuffer)
(6,data)
(7,data-1)
(8,dataBuffer == NULL)
(9,malloc(data)
(10,i = 0)
(11,"%d")
(12,data < 100)
(13,)
(14,100)
(15,)
(16,)
(17,-1)
(18,data-1)
(19,dataBuffer)
(20,1)
(21,\\\'\\\\0\\\')
(22,memset(dataBuffer, \\\'A\\\', data-1)
(23,data)
(24,fscanf(stdin, "%d", &data)
(25,1)
(26,)
(27,-1)
(28,dataBuffer)
(29,i < 1)
(30,i)
(31,1)
(32,char *)
(33,data)
(34,data = -1)
(35,dataBuffer[data-1])
(36,&data)
(37,data)
(38,1)
(39,i)
(40,printLine(dataBuffer)
(41,dataBuffer)
(42,data)
(43,free(dataBuffer)
(44,if (data < 100)
(45,data)
(46,exit(-1)
(47,NULL)
(48,i++)
(49,1)
(50,* dataBuffer = (char *)
(51,dataBuffer)
(52,0)
(53,if (dataBuffer == NULL)
(54,for(i = 0; i < 1; i++)
(55,(char *)
(56,dataBuffer[data-1] = \\\'\\\\0\\\')
(57,i)
(58,i)
(59,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^