-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
18,19
18,20
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,34,0)
(33,34,0)
(47,18,0)
(30,19,0)
(1,18,0)
(34,21,0)
(4,47,0)
(38,39,0)
(2,34,0)
(41,44,0)
(50,16,0)
(12,39,0)
(14,13,0)
(13,34,0)
(25,12,0)
(33,47,0)
(22,34,0)
(17,48,0)
(10,18,0)
(34,22,0)
(10,12,0)
(52,33,0)
(41,20,0)
(43,13,0)
(53,16,0)
(47,12,0)
(39,38,0)
(44,41,0)
(16,11,0)
(37,11,0)
(6,10,0)
(29,18,0)
(9,41,0)
(11,27,0)
(11,12,0)
(16,34,0)
(11,16,0)
(31,5,0)
(12,18,0)
(46,0,0)
(28,22,0)
(48,34,0)
(45,18,0)
(39,48,0)
(23,5,0)
(27,18,0)
(45,12,0)
(39,12,0)
(49,21,0)
(32,44,0)
(35,19,0)
(3,47,0)
(7,21,0)
(48,39,0)
(30,51,0)
(15,41,0)
(47,33,0)
(8,0,0)
(24,21,0)
(26,33,0)
(36,45,0)
(19,30,0)
(5,12,0)
(42,27,0)
(16,34,1)
(11,16,1)
(33,34,1)
(52,4,1)
(42,11,1)
(12,39,1)
(33,26,1)
(26,52,1)
(37,47,1)
(47,12,1)
(22,28,1)
(44,32,1)
(5,12,1)
(30,19,1)
(10,6,1)
(40,45,1)
(44,34,1)
(27,42,1)
(28,2,1)
(9,15,1)
(0,8,1)
(25,13,1)
(13,14,1)
(17,25,1)
(19,35,1)
(41,44,1)
(32,9,1)
(45,12,1)
(39,48,1)
(34,22,1)
(50,53,1)
(5,23,1)
(8,46,1)
(23,31,1)
(15,0,1)
(3,5,1)
(13,34,1)
(16,50,1)
(53,37,1)
(3,30,1)
(35,5,1)
(31,12,1)
(47,33,1)
(10,12,1)
(4,3,1)
(43,0,1)
(43,41,1)
(36,10,1)
(14,43,1)
(39,38,1)
(11,12,1)
(45,36,1)
(46,34,1)
(40,13,1)
(48,17,1)
(6,27,1)
(48,34,1)
(19,5,2)
(31,13,2)
(33,13,2)
(48,13,2)
(3,13,2)
(47,13,2)
(13,34,2)
(52,13,2)
(12,39,2)
(27,13,2)
(26,13,2)
(5,12,2)
(39,13,2)
(17,13,2)
(12,13,2)
(5,13,2)
(35,5,2)
(11,13,2)
(44,34,2)
(9,0,2)
(47,33,2)
(30,19,2)
(53,13,2)
(11,12,2)
(41,44,2)
(44,0,2)
(42,13,2)
(37,13,2)
(30,5,2)
(48,34,2)
(32,0,2)
(45,13,2)
(6,13,2)
(15,0,2)
(16,34,2)
(50,13,2)
(39,48,2)
(33,34,2)
(10,13,2)
(45,12,2)
(4,13,2)
(25,13,2)
(10,12,2)
(11,16,2)
(41,0,2)
(34,22,2)
(47,12,2)
(39,38,2)
(36,13,2)
(16,13,2)
(23,13,2)
-----------------------------------
(0,5==5)
(1,if (dataBuffer == NULL)
(2,data)
(3,dataBuffer)
(4,\\\'A\\\')
(5,dataBuffer == NULL)
(6,dataBuffer)
(7,data)
(8,5)
(9,"%d")
(10,printLine(dataBuffer)
(11,dataBuffer[data-1])
(12,* dataBuffer = (char *)
(13,data < 100)
(14,100)
(15,stdin)
(16,data-1)
(17,data)
(18,)
(19,-1)
(20,)
(21,)
(22,-1)
(23,NULL)
(24,if(5==5)
(25,dataBuffer)
(26,1)
(27,dataBuffer[data-1] = \\\'\\\\0\\\')
(28,1)
(29,dataBuffer)
(30,exit(-1)
(31,dataBuffer)
(32,data)
(33,data-1)
(34,data = -1)
(35,1)
(36,dataBuffer)
(37,dataBuffer)
(38,char *)
(39,(char *)
(40,RET)
(41,fscanf(stdin, "%d", &data)
(42,\\\'\\\\0\\\')
(43,data)
(44,&data)
(45,free(dataBuffer)
(46,5)
(47,memset(dataBuffer, \\\'A\\\', data-1)
(48,malloc(data)
(49,if (data < 100)
(50,1)
(51,)
(52,data)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^