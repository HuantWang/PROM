-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
39,40
39,41
39,42
39,43
39,44
39,45
40,41
41,42
41,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,37,38,42,44,46,49,51,53,55,59,61,62,64,65,70,72,73,74,78,79,84,86,88,90,95,97,98,102,104
-----computeFrom-----
12,13
12,14
33,34
33,35
36,37
36,38
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
92,93
92,94
-----guardedBy-----
78,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_12_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(7,10,0)
(44,18,0)
(41,46,0)
(37,24,0)
(32,20,0)
(45,10,0)
(40,0,0)
(24,12,0)
(53,27,0)
(15,33,0)
(17,16,0)
(45,27,0)
(4,1,0)
(45,29,0)
(5,12,0)
(6,46,0)
(33,27,0)
(27,24,0)
(54,51,0)
(48,12,0)
(42,33,0)
(23,45,0)
(30,37,0)
(28,6,0)
(43,16,0)
(25,20,0)
(22,45,0)
(17,20,0)
(19,4,0)
(51,9,0)
(11,51,0)
(33,10,0)
(16,24,0)
(54,29,0)
(29,12,0)
(46,6,0)
(8,24,0)
(6,24,0)
(26,24,0)
(20,17,0)
(33,29,0)
(18,29,0)
(3,27,0)
(10,21,0)
(50,24,0)
(47,6,0)
(39,29,0)
(0,10,0)
(13,51,0)
(2,17,0)
(33,1,0)
(31,18,0)
(10,0,0)
(38,46,0)
(34,33,0)
(36,0,0)
(18,10,0)
(49,29,0)
(51,54,0)
(37,27,0)
(45,4,0)
(14,54,0)
(25,32,1)
(13,52,1)
(19,45,1)
(18,29,1)
(16,43,1)
(33,29,1)
(30,4,1)
(31,44,1)
(0,40,1)
(36,7,1)
(39,49,1)
(10,0,1)
(54,29,1)
(6,46,1)
(23,33,1)
(33,27,1)
(51,54,1)
(52,29,1)
(33,10,1)
(18,10,1)
(2,6,1)
(44,16,1)
(33,34,1)
(53,3,1)
(45,10,1)
(34,15,1)
(27,53,1)
(29,39,1)
(43,17,1)
(37,30,1)
(42,18,1)
(45,29,1)
(18,31,1)
(28,47,1)
(22,23,1)
(40,36,1)
(4,19,1)
(37,27,1)
(17,20,1)
(20,25,1)
(45,22,1)
(15,42,1)
(35,37,1)
(41,28,1)
(7,52,1)
(14,11,1)
(46,38,1)
(3,51,1)
(11,13,1)
(38,41,1)
(30,18,1)
(54,14,1)
(47,27,1)
(45,27,1)
(32,2,1)
(3,10,1)
(54,52,2)
(10,52,2)
(19,18,2)
(37,27,2)
(22,18,2)
(18,29,2)
(10,0,2)
(17,20,2)
(40,52,2)
(42,18,2)
(13,52,2)
(18,10,2)
(54,29,2)
(45,29,2)
(51,54,2)
(4,18,2)
(7,52,2)
(33,27,2)
(33,10,2)
(33,29,2)
(6,46,2)
(51,52,2)
(11,52,2)
(45,10,2)
(45,18,2)
(14,52,2)
(33,18,2)
(0,52,2)
(15,18,2)
(45,27,2)
(23,18,2)
(34,18,2)
(36,52,2)
-----------------------------------
(0,100-1)
(1,)
(2,source)
(3,dest)
(4,dest[data] = \\\'\\\\0\\\')
(5,if(globalReturnsTrueOrFalse()
(6,memset(source, \\\'A\\\', 100-1)
(7,data)
(8,if (data < 100)
(9,)
(10,data = 100-1)
(11,"%hd")
(12,)
(13,stdin)
(14,data)
(15,source)
(16,source[100-1] = \\\'\\\\0\\\')
(17,source[100-1])
(18,data < 100)
(19,\\\'\\\\0\\\')
(20,100-1)
(21,)
(22,data)
(23,dest)
(24,)
(25,1)
(26,dest)
(27,dest[100] = "")
(28,\\\'A\\\')
(29,data = 0)
(30,dest)
(31,100)
(32,100)
(33,memcpy(dest, source, data)
(34,data)
(35,RET)
(36,100)
(37,printLine(dest)
(38,1)
(39,0)
(40,1)
(41,100)
(42,dest)
(43,\\\'\\\\0\\\')
(44,data)
(45,dest[data])
(46,100-1)
(47,source)
(48,data)
(49,data)
(50,source)
(51,fscanf (stdin, "%hd", &data)
(52,globalReturnsTrueOrFalse()
(53,"")
(54,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^