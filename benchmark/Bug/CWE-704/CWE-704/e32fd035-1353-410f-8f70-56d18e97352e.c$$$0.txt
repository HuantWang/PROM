-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
40,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,34,36,39,41,43,45,49,51,52,54,55,60,62,63,64,68,69,74,76,78,80,85,87,88,92,94
-----computeFrom-----
12,13
12,14
23,24
23,25
53,54
53,55
57,58
57,59
61,62
61,63
66,67
66,68
82,83
82,84
-----guardedBy-----
68,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,43,0)
(39,47,0)
(40,32,0)
(21,47,0)
(38,30,0)
(43,23,0)
(20,12,0)
(11,41,0)
(16,43,0)
(11,43,0)
(29,2,0)
(24,32,0)
(35,45,0)
(20,43,0)
(11,13,0)
(36,14,0)
(17,9,0)
(20,41,0)
(9,45,0)
(12,31,0)
(46,23,0)
(21,15,0)
(0,9,0)
(37,21,0)
(7,41,0)
(4,41,0)
(41,14,0)
(45,14,0)
(25,12,0)
(18,20,0)
(7,14,0)
(10,11,0)
(47,14,0)
(19,11,0)
(5,15,0)
(45,9,0)
(30,12,0)
(26,41,0)
(28,14,0)
(2,13,0)
(27,45,0)
(43,32,0)
(44,20,0)
(6,15,0)
(33,11,0)
(3,30,0)
(22,7,0)
(14,32,0)
(8,12,0)
(20,2,0)
(11,12,0)
(23,43,0)
(15,21,0)
(12,25,0)
(1,14,0)
(4,12,1)
(17,0,1)
(19,33,1)
(4,42,1)
(8,42,1)
(44,18,1)
(26,4,1)
(0,27,1)
(39,21,1)
(43,23,1)
(12,25,1)
(38,3,1)
(30,12,1)
(11,12,1)
(2,29,1)
(18,11,1)
(11,10,1)
(47,39,1)
(21,15,1)
(25,8,1)
(27,35,1)
(29,20,1)
(22,30,1)
(6,37,1)
(3,47,1)
(7,22,1)
(45,9,1)
(7,41,1)
(30,38,1)
(15,5,1)
(11,41,1)
(11,43,1)
(20,12,1)
(22,2,1)
(10,19,1)
(41,26,1)
(33,30,1)
(20,41,1)
(5,6,1)
(20,43,1)
(37,45,1)
(23,46,1)
(30,43,1)
(46,16,1)
(34,7,1)
(9,17,1)
(35,41,1)
(42,43,1)
(20,44,1)
(19,30,2)
(8,42,2)
(11,12,2)
(33,30,2)
(30,12,2)
(12,42,2)
(20,43,2)
(44,30,2)
(30,43,2)
(7,41,2)
(11,30,2)
(2,30,2)
(29,30,2)
(45,9,2)
(20,41,2)
(21,15,2)
(11,43,2)
(10,30,2)
(25,42,2)
(18,30,2)
(20,30,2)
(20,12,2)
(11,41,2)
(43,23,2)
(12,25,2)
-----------------------------------
(0,100)
(1,if (data < 100)
(2,dest[data] = \\\'\\\\0\\\')
(3,data)
(4,dest)
(5,1)
(6,100)
(7,printLine(dest)
(8,data)
(9,100-1)
(10,data)
(11,memcpy(dest, source, data)
(12,data = RAND32()
(13,)
(14,)
(15,100-1)
(16,data)
(17,1)
(18,dest)
(19,source)
(20,dest[data])
(21,source[100-1])
(22,dest)
(23,-1)
(24,if(staticReturnsTrue()
(25,RAND32()
(26,"")
(27,\\\'A\\\')
(28,dest)
(29,\\\'\\\\0\\\')
(30,data < 100)
(31,)
(32,)
(33,dest)
(34,RET)
(35,source)
(36,source)
(37,source)
(38,100)
(39,\\\'\\\\0\\\')
(40,data)
(41,dest[100] = "")
(42,staticReturnsTrue()
(43,data = -1)
(44,data)
(45,memset(source, \\\'A\\\', 100-1)
(46,1)
(47,source[100-1] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^