-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_07_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
75,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,55,58,60,65,66,70,72,76,77,79,83,85
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
-----guardedBy-----
40,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_07_bad(){    short data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_07_bad()
CWE197_Numeric_Truncation_Error__short_fgets_07_bad
{    short data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(1,33,0)
(39,23,0)
(20,13,0)
(24,13,0)
(26,38,0)
(27,26,0)
(5,31,0)
(12,20,0)
(20,10,0)
(32,15,0)
(19,24,0)
(4,20,0)
(22,14,0)
(28,36,0)
(8,13,0)
(9,22,0)
(30,39,0)
(16,21,0)
(7,36,0)
(36,25,0)
(34,33,0)
(14,15,0)
(37,12,0)
(22,40,0)
(14,22,0)
(3,31,0)
(6,14,0)
(33,2,0)
(12,38,0)
(14,6,0)
(13,31,0)
(10,20,0)
(21,36,0)
(18,2,0)
(15,21,0)
(35,11,0)
(42,11,0)
(38,31,0)
(41,38,0)
(20,22,0)
(15,14,0)
(20,12,0)
(33,21,0)
(26,12,0)
(2,33,0)
(13,24,0)
(17,21,0)
(0,33,0)
(26,27,1)
(15,32,1)
(27,12,1)
(37,39,1)
(15,21,1)
(37,22,1)
(35,13,1)
(17,11,1)
(14,15,1)
(0,1,1)
(13,24,1)
(19,8,1)
(34,21,1)
(1,34,1)
(2,18,1)
(39,30,1)
(24,19,1)
(33,21,1)
(30,2,1)
(16,17,1)
(20,22,1)
(18,33,1)
(42,35,1)
(12,20,1)
(9,2,1)
(20,4,1)
(26,12,1)
(29,26,1)
(11,42,1)
(20,10,1)
(22,14,1)
(14,6,1)
(20,13,1)
(33,0,1)
(32,9,1)
(2,33,1)
(4,37,1)
(21,16,1)
(37,11,1)
(14,15,2)
(16,11,2)
(33,11,2)
(20,22,2)
(0,11,2)
(15,2,2)
(26,12,2)
(22,14,2)
(1,11,2)
(21,11,2)
(2,11,2)
(39,2,2)
(34,11,2)
(14,2,2)
(18,11,2)
(22,2,2)
(2,33,2)
(20,10,2)
(17,11,2)
(33,21,2)
(9,2,2)
(13,24,2)
(20,13,2)
(30,2,2)
(12,20,2)
(15,21,2)
(32,2,2)
(14,6,2)
-----------------------------------
(0,stdin)
(1,CHAR_ARRAY_SIZE)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,data)
(4,data)
(5,if(staticFive==5)
(6,short)
(7,inputBuffer)
(8,data)
(9,data)
(10,char)
(11,staticFive==5)
(12,charData = (char)
(13,data = -1)
(14,(short)
(15,atoi(inputBuffer)
(16,"")
(17,inputBuffer)
(18,NULL)
(19,1)
(20,(char)
(21,inputBuffer[CHAR_ARRAY_SIZE] = "")
(22,data = (short)
(23,)
(24,-1)
(25,)
(26,printHexCharLine(charData)
(27,charData)
(28,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,RET)
(30,"fgets()
(31,)
(32,inputBuffer)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,inputBuffer)
(35,staticFive)
(36,)
(37,charData)
(38,)
(39,printLine("fgets()
(40,)
(41,charData)
(42,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^