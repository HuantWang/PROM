-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,28,31,33,35,37,41,43,44,46,47,52,54,55,56,60,61,66,68,70,72,77,79,80,84,86
-----computeFrom-----
45,46
45,47
49,50
49,51
53,54
53,55
58,59
58,60
74,75
74,76
-----guardedBy-----
60,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_strncpy_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__negative_strncpy_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(31,8,0)
(43,8,0)
(10,14,0)
(6,9,0)
(19,9,0)
(28,1,0)
(34,15,0)
(12,17,0)
(31,17,0)
(20,10,0)
(24,34,0)
(41,17,0)
(35,6,0)
(13,16,0)
(13,34,0)
(42,3,0)
(2,6,0)
(17,31,0)
(37,14,0)
(14,10,0)
(25,6,0)
(38,24,0)
(4,1,0)
(1,15,0)
(33,1,0)
(26,42,0)
(0,33,0)
(42,34,0)
(40,9,0)
(23,10,0)
(11,31,0)
(34,13,0)
(9,1,0)
(18,24,0)
(27,34,0)
(33,9,0)
(21,13,0)
(42,9,0)
(3,7,0)
(10,1,0)
(36,1,0)
(8,1,0)
(30,13,0)
(5,14,0)
(29,42,0)
(6,7,0)
(39,3,0)
(6,34,0)
(32,15,0)
(33,0,1)
(42,9,1)
(0,24,1)
(39,42,1)
(26,6,1)
(12,41,1)
(40,19,1)
(0,3,1)
(23,9,1)
(33,9,1)
(43,31,1)
(6,34,1)
(20,23,1)
(35,24,1)
(10,14,1)
(18,8,1)
(8,43,1)
(25,35,1)
(5,37,1)
(14,5,1)
(2,25,1)
(38,18,1)
(34,13,1)
(30,27,1)
(31,17,1)
(22,33,1)
(13,21,1)
(24,38,1)
(17,12,1)
(11,10,1)
(13,16,1)
(3,39,1)
(42,34,1)
(41,11,1)
(6,9,1)
(29,26,1)
(24,34,1)
(19,34,1)
(42,29,1)
(37,20,1)
(21,30,1)
(6,2,1)
(9,40,1)
(31,17,2)
(10,14,2)
(6,24,2)
(35,24,2)
(39,24,2)
(42,9,2)
(13,16,2)
(6,9,2)
(26,24,2)
(42,24,2)
(33,9,2)
(42,34,2)
(24,34,2)
(29,24,2)
(6,34,2)
(3,24,2)
(34,13,2)
(2,24,2)
(25,24,2)
-----------------------------------
(0,dest)
(1,)
(2,data)
(3,dest[data] = \\\'\\\\0\\\')
(4,dest)
(5,1)
(6,strncpy(dest, source, data)
(7,)
(8,source[100-1] = \\\'\\\\0\\\')
(9,dest[100] = "")
(10,memset(source, \\\'A\\\', 100-1)
(11,source)
(12,1)
(13,dataArray[2])
(14,100-1)
(15,)
(16,short dataArray[])
(17,100-1)
(18,data)
(19,dest)
(20,\\\'A\\\')
(21,2)
(22,RET)
(23,source)
(24,data < 100)
(25,source)
(26,dest)
(27,data)
(28,if (data < 100)
(29,data)
(30,dataArray)
(31,source[100-1])
(32,data)
(33,printLine(dest)
(34,data = dataArray[2])
(35,dest)
(36,source)
(37,100)
(38,100)
(39,\\\'\\\\0\\\')
(40,"")
(41,100)
(42,dest[data])
(43,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^