-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
40,43
42,43
43,44
45,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
76,77
76,78
76,79
76,80
76,81
76,82
77,78
78,79
78,80
80,81
80,82
82,83
84,85
85,86
85,87
87,88
87,89
87,90
89,90
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
119,120
119,121
119,122
119,123
120,121
122,123
124,125
126,127
128,129
129,130
129,131
130,131
130,132
131,132
133,134
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,44,46,51,53,55,57,59,64,67,69,74,75,79,81,83,86,88,90,92,96,98,99,101,102,107,109,110,111,115,116,121,123,125,127,132,134,135,139,141
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
48,49
48,50
62,63
62,64
100,101
100,102
104,105
104,106
108,109
108,110
113,114
113,115
129,130
129,131
-----guardedBy-----
53,69
115,134
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,52,0)
(41,52,0)
(18,32,0)
(43,9,0)
(66,39,0)
(55,72,0)
(10,34,0)
(62,44,0)
(27,64,0)
(64,20,0)
(19,11,0)
(52,20,0)
(34,64,0)
(33,62,0)
(46,25,0)
(68,60,0)
(49,20,0)
(56,65,0)
(62,31,0)
(67,64,0)
(65,39,0)
(23,29,0)
(31,62,0)
(65,16,0)
(54,31,0)
(14,20,0)
(1,16,0)
(17,32,0)
(71,34,0)
(7,53,0)
(25,52,0)
(33,64,0)
(22,51,0)
(32,64,0)
(5,25,0)
(35,33,0)
(40,62,0)
(26,9,0)
(31,39,0)
(57,65,0)
(33,68,0)
(12,7,0)
(48,52,0)
(32,25,0)
(51,37,0)
(5,52,0)
(36,58,0)
(9,26,0)
(0,9,0)
(39,7,0)
(51,22,0)
(32,60,0)
(61,51,0)
(69,25,0)
(30,20,0)
(8,32,0)
(2,26,0)
(37,52,0)
(16,65,0)
(21,22,0)
(11,38,0)
(63,22,0)
(34,62,0)
(6,39,0)
(13,67,0)
(32,62,0)
(59,65,0)
(15,58,0)
(50,5,0)
(64,67,0)
(33,25,0)
(47,7,0)
(72,29,0)
(24,33,0)
(4,29,0)
(58,29,0)
(70,37,0)
(42,26,0)
(45,52,0)
(3,68,0)
(13,27,1)
(26,42,1)
(33,64,1)
(68,3,1)
(55,62,1)
(54,40,1)
(31,39,1)
(37,70,1)
(28,5,1)
(36,29,1)
(55,11,1)
(58,15,1)
(32,17,1)
(59,56,1)
(3,33,1)
(51,22,1)
(66,58,1)
(40,16,1)
(42,2,1)
(50,68,1)
(2,43,1)
(1,65,1)
(69,58,1)
(70,51,1)
(63,21,1)
(33,25,1)
(32,62,1)
(32,64,1)
(65,39,1)
(32,25,1)
(34,64,1)
(6,66,1)
(15,36,1)
(34,10,1)
(39,6,1)
(61,9,1)
(71,37,1)
(29,23,1)
(36,72,1)
(0,25,1)
(25,46,1)
(4,64,1)
(18,8,1)
(67,13,1)
(34,62,1)
(22,63,1)
(16,1,1)
(16,65,1)
(5,25,1)
(21,61,1)
(58,29,1)
(23,4,1)
(50,34,1)
(5,50,1)
(35,24,1)
(33,35,1)
(11,19,1)
(72,55,1)
(8,34,1)
(56,57,1)
(57,39,1)
(17,18,1)
(62,31,1)
(9,26,1)
(64,67,1)
(72,29,1)
(10,71,1)
(33,62,1)
(31,54,1)
(65,59,1)
(24,32,1)
(43,0,1)
(46,69,1)
(19,16,1)
(3,34,2)
(19,16,2)
(57,58,2)
(66,58,2)
(33,62,2)
(15,58,2)
(59,58,2)
(54,16,2)
(16,58,2)
(16,65,2)
(35,34,2)
(8,34,2)
(34,64,2)
(72,58,2)
(39,58,2)
(64,67,2)
(65,58,2)
(51,22,2)
(33,64,2)
(58,29,2)
(62,16,2)
(6,58,2)
(11,16,2)
(32,25,2)
(65,39,2)
(68,34,2)
(17,34,2)
(33,25,2)
(34,62,2)
(62,31,2)
(36,58,2)
(32,64,2)
(33,34,2)
(56,58,2)
(5,25,2)
(72,29,2)
(32,62,2)
(31,39,2)
(9,26,2)
(1,58,2)
(24,34,2)
(31,16,2)
(55,58,2)
(58,58,2)
(18,34,2)
(40,16,2)
(32,34,2)
-----------------------------------
(0,source)
(1,NULL)
(2,100)
(3,\\\'\\\\0\\\')
(4,i)
(5,printLine(dest)
(6,"")
(7,)
(8,dest)
(9,memset(source, \\\'A\\\', 100-1)
(10,100)
(11,printLine("fgets()
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,1)
(14,data)
(15,1)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,data)
(18,source)
(19,"fgets()
(20,)
(21,100)
(22,100-1)
(23,0)
(24,dest)
(25,dest[100] = "")
(26,100-1)
(27,data)
(28,RET)
(29,i = 0)
(30,i)
(31,atoi(inputBuffer)
(32,strncpy(dest, source, data)
(33,dest[data])
(34,data < 100)
(35,data)
(36,i)
(37,source[100-1] = \\\'\\\\0\\\')
(38,)
(39,inputBuffer[CHAR_ARRAY_SIZE] = "")
(40,data)
(41,source)
(42,1)
(43,\\\'A\\\')
(44,)
(45,if (data < 100)
(46,"")
(47,inputBuffer)
(48,dest)
(49,for(i = 0; i < 1; i++)
(50,dest)
(51,source[100-1])
(52,)
(53,)
(54,inputBuffer)
(55,i)
(56,CHAR_ARRAY_SIZE)
(57,inputBuffer)
(58,i < 1)
(59,stdin)
(60,)
(61,source)
(62,data = atoi(inputBuffer)
(63,1)
(64,data = -1)
(65,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(66,inputBuffer)
(67,-1)
(68,dest[data] = \\\'\\\\0\\\')
(69,dest)
(70,\\\'\\\\0\\\')
(71,data)
(72,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^