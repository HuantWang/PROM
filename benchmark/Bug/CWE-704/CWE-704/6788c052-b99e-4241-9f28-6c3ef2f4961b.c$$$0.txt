-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_63b_badSink(int * dataPtr)
{
    int data = *dataPtr;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,31,35,37,40,42,46,48,53,55,59,61,62,65,66,71,74,75,76,80,82,86,88
-----computeFrom-----
21,22
21,23
44,45
44,46
63,64
63,65
68,69
68,70
72,73
72,74
-----guardedBy-----
23,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_63b_badSink(int * dataPtr){    int data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_63b_badSink(int * dataPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_63b_badSink
int * dataPtr
int
* dataPtr
*
dataPtr
{    int data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = *dataPtr;
int data = *dataPtr;
int
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,27,0)
(39,48,0)
(17,48,0)
(39,47,0)
(14,48,0)
(2,37,0)
(22,47,0)
(44,12,0)
(23,4,0)
(47,7,0)
(14,47,0)
(26,4,0)
(46,16,0)
(3,36,0)
(5,20,0)
(22,48,0)
(5,23,0)
(6,5,0)
(20,32,0)
(21,12,0)
(20,35,0)
(4,48,0)
(25,23,0)
(24,47,0)
(32,40,0)
(29,35,0)
(7,47,0)
(0,28,0)
(13,35,0)
(14,27,0)
(18,20,0)
(47,48,0)
(45,22,0)
(27,14,0)
(27,20,0)
(3,37,0)
(12,20,0)
(42,7,0)
(15,39,0)
(23,47,0)
(31,14,0)
(33,48,0)
(16,7,0)
(7,42,0)
(8,14,0)
(37,3,0)
(10,32,0)
(23,5,0)
(16,20,0)
(9,5,0)
(7,16,0)
(32,20,0)
(30,28,0)
(28,47,0)
(1,27,0)
(34,12,1)
(16,46,1)
(3,37,1)
(25,14,1)
(39,47,1)
(27,20,1)
(32,10,1)
(9,25,1)
(2,28,1)
(7,16,1)
(45,4,1)
(31,28,1)
(12,20,1)
(20,32,1)
(0,47,1)
(37,2,1)
(47,7,1)
(5,20,1)
(46,24,1)
(8,31,1)
(22,47,1)
(44,21,1)
(11,1,1)
(10,18,1)
(14,27,1)
(24,12,1)
(5,6,1)
(6,9,1)
(15,22,1)
(27,11,1)
(7,42,1)
(12,44,1)
(22,45,1)
(28,47,1)
(21,20,1)
(30,0,1)
(39,15,1)
(4,26,1)
(1,8,1)
(34,39,1)
(31,3,1)
(32,40,1)
(26,23,1)
(16,20,1)
(28,30,1)
(14,47,1)
(23,47,1)
(23,5,1)
(22,12,2)
(16,12,2)
(23,5,2)
(45,12,2)
(4,12,2)
(24,12,2)
(28,12,2)
(6,12,2)
(7,16,2)
(23,47,2)
(9,12,2)
(1,12,2)
(28,47,2)
(27,12,2)
(23,12,2)
(32,40,2)
(47,7,2)
(14,12,2)
(12,20,2)
(2,28,2)
(16,20,2)
(26,12,2)
(3,28,2)
(25,12,2)
(47,12,2)
(7,12,2)
(3,37,2)
(7,42,2)
(31,12,2)
(14,27,2)
(37,28,2)
(22,47,2)
(15,12,2)
(5,12,2)
(0,12,2)
(39,47,2)
(27,20,2)
(8,12,2)
(30,12,2)
(14,47,2)
(11,12,2)
(39,12,2)
(5,20,2)
(46,12,2)
(20,32,2)
-----------------------------------
(0,dataBuffer)
(1,data)
(2,1)
(3,exit(-1)
(4,dataBuffer[data-1] = '\\\\0')
(5,data-1)
(6,1)
(7,(char *)
(8,\'A\')
(9,data)
(10,dataPtr)
(11,1)
(12,data < 100)
(13,if (data < 100)
(14,memset(dataBuffer, 'A', data-1)
(15,dataBuffer)
(16,malloc(data)
(17,dataBuffer)
(18,data)
(19,'A')
(20,data = *dataPtr)
(21,data)
(22,printLine(dataBuffer)
(23,dataBuffer[data-1])
(24,dataBuffer)
(25,dataBuffer)
(26,'\\\\0')
(27,data-1)
(28,dataBuffer == NULL)
(29,data)
(30,NULL)
(31,dataBuffer)
(32,*dataPtr)
(33,if (dataBuffer == NULL)
(34,RET)
(35,)
(36,)
(37,-1)
(38,dataBuffer[data-1] = \'\\\\0\')
(39,free(dataBuffer)
(40,int * dataPtr)
(41,memset(dataBuffer, \'A\', data-1)
(42,char *)
(43,\'\\\\0\')
(44,100)
(45,dataBuffer)
(46,data)
(47,* dataBuffer = (char *)
(48,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^