-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
37,40
37,41
38,39
40,41
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
52,53
53,54
53,55
54,55
54,56
57,58
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,42,45,49,51,55,56,58,62,64
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_17_bad()
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(30,2,0)
(21,14,0)
(23,28,0)
(8,23,0)
(25,26,0)
(21,19,0)
(20,5,0)
(4,14,0)
(2,28,0)
(29,31,0)
(14,9,0)
(19,5,0)
(16,6,0)
(27,23,0)
(19,0,0)
(3,14,0)
(11,0,0)
(17,22,0)
(7,6,0)
(5,19,0)
(13,0,0)
(1,19,0)
(23,19,0)
(12,0,0)
(23,27,0)
(24,31,0)
(2,26,0)
(14,21,0)
(28,26,0)
(10,28,0)
(28,23,0)
(18,21,0)
(26,0,0)
(6,31,0)
(22,31,0)
(10,6,1)
(7,22,1)
(21,19,1)
(14,21,1)
(31,24,1)
(6,31,1)
(17,14,1)
(7,31,1)
(23,19,1)
(5,20,1)
(6,16,1)
(4,6,1)
(18,3,1)
(8,10,1)
(22,31,1)
(15,2,1)
(3,4,1)
(28,23,1)
(30,28,1)
(29,19,1)
(16,7,1)
(19,5,1)
(24,29,1)
(2,30,1)
(23,27,1)
(21,18,1)
(2,28,1)
(20,1,1)
(22,17,1)
(23,8,1)
(23,27,2)
(23,19,2)
(14,6,2)
(21,19,2)
(4,6,2)
(2,28,2)
(18,6,2)
(3,6,2)
(22,6,2)
(6,6,2)
(14,21,2)
(6,31,2)
(16,6,2)
(17,6,2)
(22,31,2)
(7,6,2)
(19,5,2)
(21,6,2)
(28,23,2)
-----------------------------------
(0,)
(1,data)
(2,printShortLine(shortData)
(3,"%d")
(4,stdin)
(5,-1)
(6,i < 1)
(7,i)
(8,data)
(9,)
(10,shortData)
(11,data)
(12,for(i = 0; i < 1; i++)
(13,i)
(14,fscanf(stdin, "%d", &data)
(15,RET)
(16,1)
(17,i)
(18,data)
(19,data = -1)
(20,1)
(21,&data)
(22,i++)
(23,(short)
(24,0)
(25,shortData)
(26,)
(27,short)
(28,shortData = (short)
(29,i)
(30,shortData)
(31,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^