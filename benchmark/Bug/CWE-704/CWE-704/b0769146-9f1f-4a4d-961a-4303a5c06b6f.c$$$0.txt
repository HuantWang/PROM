-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_34_bad()
{
    short data;
    CWE197_Numeric_Truncation_Error__short_fgets_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a number input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
81,82
82,83
82,84
83,84
86,87
86,88
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
94,95
94,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,55,58,60,65,66,71,72,74,78,80,84,85,89,91,95,96,98,102,104
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
68,69
68,70
-----guardedBy-----
40,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_34_bad(){    short data;    CWE197_Numeric_Truncation_Error__short_fgets_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_34_bad()
CWE197_Numeric_Truncation_Error__short_fgets_34_bad
{    short data;    CWE197_Numeric_Truncation_Error__short_fgets_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
CWE197_Numeric_Truncation_Error__short_fgets_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_fgets_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_fgets_34_unionType
CWE197_Numeric_Truncation_Error__short_fgets_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(20,43,0)
(50,32,0)
(4,26,0)
(40,29,0)
(48,46,0)
(31,32,0)
(30,15,0)
(15,23,0)
(29,14,0)
(42,43,0)
(29,40,0)
(0,24,0)
(1,9,0)
(38,26,0)
(3,29,0)
(25,40,0)
(24,23,0)
(12,45,0)
(7,44,0)
(9,10,0)
(2,42,0)
(33,25,0)
(13,4,0)
(15,5,0)
(34,35,0)
(46,15,0)
(11,36,0)
(22,4,0)
(8,12,0)
(6,23,0)
(21,10,0)
(28,40,0)
(14,29,0)
(42,32,0)
(35,12,0)
(29,42,0)
(25,36,0)
(17,10,0)
(39,5,0)
(19,45,0)
(35,5,0)
(27,26,0)
(5,47,0)
(10,45,0)
(16,46,0)
(45,4,0)
(43,26,0)
(15,26,0)
(10,9,0)
(41,45,0)
(35,34,0)
(32,42,0)
(36,43,0)
(5,35,0)
(12,35,0)
(23,26,0)
(18,10,0)
(37,7,0)
(40,36,0)
(23,24,0)
(3,28,1)
(45,19,1)
(7,37,1)
(25,33,1)
(16,48,1)
(9,10,1)
(5,35,1)
(35,12,1)
(17,21,1)
(37,9,1)
(31,50,1)
(35,34,1)
(29,14,1)
(15,5,1)
(21,18,1)
(10,45,1)
(32,31,1)
(24,0,1)
(0,6,1)
(12,45,1)
(25,40,1)
(42,32,1)
(8,39,1)
(9,1,1)
(49,25,1)
(30,46,1)
(33,40,1)
(2,15,1)
(19,41,1)
(40,29,1)
(29,3,1)
(12,8,1)
(15,30,1)
(46,16,1)
(41,23,1)
(28,42,1)
(23,24,1)
(1,10,1)
(18,45,1)
(39,9,1)
(15,23,1)
(48,7,1)
(10,17,1)
(50,2,1)
(48,5,1)
(29,42,1)
(12,45,2)
(7,9,2)
(35,9,2)
(8,9,2)
(15,5,2)
(15,23,2)
(29,42,2)
(25,40,2)
(39,9,2)
(23,24,2)
(5,35,2)
(35,34,2)
(35,12,2)
(12,9,2)
(10,45,2)
(42,32,2)
(29,14,2)
(9,10,2)
(37,9,2)
(40,29,2)
(5,9,2)
-----------------------------------
(0,1)
(1,NULL)
(2,data)
(3,data)
(4,)
(5,data = (short)
(6,data)
(7,printLine("fgets()
(8,inputBuffer)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,charData)
(12,atoi(inputBuffer)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,char)
(15,myUnion.unionFirst = data)
(16,unionFirst)
(17,stdin)
(18,inputBuffer)
(19,"")
(20,data)
(21,CHAR_ARRAY_SIZE)
(22,inputBuffer)
(23,data = -1)
(24,-1)
(25,printHexCharLine(charData)
(26,)
(27,myUnion)
(28,charData)
(29,(char)
(30,data)
(31,unionSecond)
(32,myUnion.unionSecond)
(33,charData)
(34,short)
(35,(short)
(36,)
(37,"fgets()
(38,data)
(39,data)
(40,charData = (char)
(41,inputBuffer)
(42,data = myUnion.unionSecond)
(43,)
(44,)
(45,inputBuffer[CHAR_ARRAY_SIZE] = "")
(46,myUnion.unionFirst)
(47,)
(48,myUnion)
(49,RET)
(50,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^