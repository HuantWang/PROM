-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
79,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,66,69,70,74,76,80,81,83,87,89
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
64,65
64,66
67,68
67,69
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_12_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(10,14,0)
(39,1,0)
(3,10,0)
(6,34,0)
(44,11,0)
(9,13,0)
(43,40,0)
(34,27,0)
(27,22,0)
(27,8,0)
(29,28,0)
(8,27,0)
(33,27,0)
(1,0,0)
(5,9,0)
(15,22,0)
(17,8,0)
(11,31,0)
(10,13,0)
(7,4,0)
(16,10,0)
(13,1,0)
(32,19,0)
(34,4,0)
(36,23,0)
(26,10,0)
(41,1,0)
(9,4,0)
(31,22,0)
(20,13,0)
(4,25,0)
(30,22,0)
(21,14,0)
(19,36,0)
(34,36,0)
(34,6,0)
(4,9,0)
(28,31,0)
(18,36,0)
(24,43,0)
(14,10,0)
(37,34,0)
(36,19,0)
(2,31,0)
(28,11,0)
(35,13,0)
(11,34,0)
(34,11,0)
(42,19,0)
(26,13,1)
(34,27,1)
(10,13,1)
(12,27,1)
(5,7,1)
(29,11,1)
(3,26,1)
(17,33,1)
(34,6,1)
(13,35,1)
(43,24,1)
(18,12,1)
(34,37,1)
(34,36,1)
(21,10,1)
(34,4,1)
(14,10,1)
(8,17,1)
(19,32,1)
(32,42,1)
(14,21,1)
(35,20,1)
(9,5,1)
(10,16,1)
(37,44,1)
(28,29,1)
(27,8,1)
(42,18,1)
(16,3,1)
(20,12,1)
(11,34,1)
(44,36,1)
(7,14,1)
(24,14,1)
(44,4,1)
(44,43,1)
(36,19,1)
(38,28,1)
(28,11,1)
(9,13,1)
(4,9,1)
(9,13,2)
(7,14,2)
(32,12,2)
(4,14,2)
(19,12,2)
(24,14,2)
(10,12,2)
(21,12,2)
(36,19,2)
(42,12,2)
(43,14,2)
(34,6,2)
(34,4,2)
(34,27,2)
(3,12,2)
(11,34,2)
(35,12,2)
(36,12,2)
(5,14,2)
(14,10,2)
(14,12,2)
(28,11,2)
(4,9,2)
(16,12,2)
(9,14,2)
(20,12,2)
(10,13,2)
(13,12,2)
(34,36,2)
(27,8,2)
(26,12,2)
(18,12,2)
-----------------------------------
(0,)
(1,)
(2,charData)
(3,CHAR_ARRAY_SIZE)
(4,data = atoi(inputBuffer)
(5,inputBuffer)
(6,char)
(7,data)
(8,-1)
(9,atoi(inputBuffer)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,charData = (char)
(12,globalReturnsTrueOrFalse()
(13,inputBuffer[CHAR_ARRAY_SIZE] = "")
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,data)
(16,stdin)
(17,1)
(18,data)
(19,CHAR_MAX-5)
(20,inputBuffer)
(21,NULL)
(22,)
(23,)
(24,"fgets()
(25,)
(26,inputBuffer)
(27,data = -1)
(28,printHexCharLine(charData)
(29,charData)
(30,if(globalReturnsTrueOrFalse()
(31,)
(32,5)
(33,data)
(34,(char)
(35,"")
(36,data = CHAR_MAX-5)
(37,data)
(38,RET)
(39,inputBuffer)
(40,)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,CHAR_MAX)
(43,printLine("fgets()
(44,charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^