-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,12,0)
(31,38,0)
(14,5,0)
(15,44,0)
(44,15,0)
(38,14,0)
(23,28,0)
(9,11,0)
(46,29,0)
(33,29,0)
(6,11,0)
(2,1,0)
(36,13,0)
(12,29,0)
(17,29,0)
(10,5,0)
(30,15,0)
(8,17,0)
(9,17,0)
(1,11,0)
(44,40,0)
(15,11,0)
(14,38,0)
(42,0,0)
(5,11,0)
(9,15,0)
(18,36,0)
(41,11,0)
(16,9,0)
(12,44,0)
(40,44,0)
(7,38,0)
(25,17,0)
(41,15,0)
(35,12,0)
(34,14,0)
(38,29,0)
(19,18,0)
(39,15,0)
(0,29,0)
(27,39,0)
(36,18,0)
(14,15,0)
(22,0,0)
(4,41,0)
(29,28,0)
(1,15,0)
(20,11,0)
(45,28,0)
(43,9,0)
(37,39,0)
(17,9,0)
(9,15,1)
(37,27,1)
(10,14,1)
(14,15,1)
(42,29,1)
(15,44,1)
(2,5,1)
(31,7,1)
(4,1,1)
(44,40,1)
(41,4,1)
(0,29,1)
(5,10,1)
(8,16,1)
(43,39,1)
(33,46,1)
(17,25,1)
(12,29,1)
(7,34,1)
(19,39,1)
(1,2,1)
(18,19,1)
(39,37,1)
(14,38,1)
(30,0,1)
(1,15,1)
(27,15,1)
(29,33,1)
(38,31,1)
(25,8,1)
(44,12,1)
(12,35,1)
(43,36,1)
(35,30,1)
(3,0,1)
(34,9,1)
(3,41,1)
(38,29,1)
(0,22,1)
(17,29,1)
(39,15,1)
(16,43,1)
(22,42,1)
(9,17,1)
(36,18,1)
(41,15,1)
(39,0,2)
(44,12,2)
(9,17,2)
(7,0,2)
(14,15,2)
(1,15,2)
(14,0,2)
(15,44,2)
(43,0,2)
(44,0,2)
(38,0,2)
(8,0,2)
(44,40,2)
(4,0,2)
(27,0,2)
(41,15,2)
(37,0,2)
(5,0,2)
(12,0,2)
(2,0,2)
(14,38,2)
(16,0,2)
(17,29,2)
(0,29,2)
(17,0,2)
(41,0,2)
(10,0,2)
(9,0,2)
(34,0,2)
(35,0,2)
(36,39,2)
(31,0,2)
(18,39,2)
(9,15,2)
(39,15,2)
(12,29,2)
(36,18,2)
(19,39,2)
(30,0,2)
(1,0,2)
(25,0,2)
(38,29,2)
(15,0,2)
-----------------------------------
(0,data < 100)
(1,printLine(dataBuffer)
(2,dataBuffer)
(3,RET)
(4,dataBuffer)
(5,dataBuffer[data-1] = \'\\\\0\')
(6,if (dataBuffer == NULL)
(7,data)
(8,data)
(9,memset(dataBuffer, 'A', data-1)
(10,'\\\\0')
(11,)
(12,malloc(data)
(13,)
(14,dataBuffer[data-1])
(15,* dataBuffer = (char *)
(16,\'A\')
(17,data-1)
(18,-1)
(19,1)
(20,dataBuffer)
(21,memset(dataBuffer, \'A\', data-1)
(22,100)
(23,data)
(24,'A')
(25,1)
(26,dataBuffer[data-1] = '\\\\0')
(27,dataBuffer)
(28,)
(29,data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData)
(30,dataBuffer)
(31,1)
(32,\'\\\\0\')
(33,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_45_badData)
(34,dataBuffer)
(35,data)
(36,exit(-1)
(37,NULL)
(38,data-1)
(39,dataBuffer == NULL)
(40,char *)
(41,free(dataBuffer)
(42,data)
(43,dataBuffer)
(44,(char *)
(45,if (data < 100)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^