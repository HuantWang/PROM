-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_52c_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_52c_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_52c_badSink(short data)
CWE194_Unexpected_Sign_Extension__fscanf_malloc_52c_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(39,29,0)
(29,16,0)
(5,37,0)
(0,34,0)
(7,34,0)
(15,12,0)
(16,34,0)
(2,11,0)
(37,6,0)
(26,27,0)
(36,20,0)
(29,39,0)
(11,16,0)
(28,16,0)
(12,21,0)
(11,4,0)
(37,5,0)
(25,34,0)
(17,6,0)
(1,6,0)
(17,29,0)
(25,16,0)
(27,16,0)
(32,17,0)
(19,27,0)
(30,4,0)
(16,29,0)
(4,34,0)
(5,16,0)
(31,25,0)
(23,1,0)
(29,17,0)
(40,37,0)
(2,6,0)
(21,12,0)
(7,16,0)
(10,7,0)
(5,34,0)
(24,34,0)
(21,33,0)
(42,37,0)
(13,5,0)
(18,2,0)
(22,1,0)
(38,11,0)
(11,2,0)
(3,2,0)
(14,5,0)
(38,5,1)
(2,6,1)
(25,16,1)
(17,6,1)
(13,21,1)
(29,39,1)
(29,17,1)
(1,6,1)
(27,26,1)
(9,7,1)
(10,25,1)
(5,16,1)
(40,42,1)
(21,12,1)
(9,1,1)
(25,31,1)
(12,15,1)
(28,1,1)
(30,11,1)
(31,4,1)
(14,13,1)
(26,19,1)
(32,28,1)
(17,32,1)
(5,37,1)
(19,16,1)
(42,14,1)
(4,30,1)
(2,18,1)
(16,29,1)
(11,16,1)
(11,2,1)
(22,23,1)
(7,10,1)
(27,16,1)
(13,27,1)
(15,27,1)
(37,6,1)
(1,22,1)
(7,16,1)
(3,38,1)
(18,3,1)
(37,40,1)
(4,1,2)
(25,16,2)
(11,2,2)
(2,1,2)
(28,1,2)
(37,1,2)
(30,1,2)
(14,1,2)
(21,27,2)
(18,1,2)
(12,27,2)
(5,16,2)
(17,1,2)
(13,1,2)
(40,1,2)
(17,6,2)
(7,1,2)
(42,1,2)
(11,1,2)
(32,1,2)
(7,16,2)
(27,1,2)
(5,1,2)
(1,6,2)
(2,6,2)
(25,1,2)
(38,1,2)
(21,12,2)
(31,1,2)
(19,1,2)
(16,1,2)
(3,1,2)
(37,6,2)
(10,1,2)
(29,39,2)
(5,37,2)
(11,16,2)
(29,17,2)
(15,27,2)
(29,1,2)
(27,16,2)
(26,1,2)
(16,29,2)
-----------------------------------
(0,dataBuffer)
(1,data < 100)
(2,data-1)
(3,data)
(4,dataBuffer[data-1] = '\\\\0')
(5,memset(dataBuffer, \'A\', data-1)
(6,short data)
(7,free(dataBuffer)
(8,memset(dataBuffer, 'A', data-1)
(9,RET)
(10,dataBuffer)
(11,dataBuffer[data-1])
(12,-1)
(13,dataBuffer)
(14,'A')
(15,1)
(16,* dataBuffer = (char *)
(17,malloc(data)
(18,1)
(19,dataBuffer)
(20,)
(21,exit(-1)
(22,100)
(23,data)
(24,if (dataBuffer == NULL)
(25,printLine(dataBuffer)
(26,NULL)
(27,dataBuffer == NULL)
(28,dataBuffer)
(29,(char *)
(30,\'\\\\0\')
(31,dataBuffer)
(32,data)
(33,)
(34,)
(35,\'A\')
(36,if (data < 100)
(37,data-1)
(38,dataBuffer)
(39,char *)
(40,1)
(41,dataBuffer[data-1] = \'\\\\0\')
(42,data)
(43,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^