-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
211,212
211,213
212,213
213,214
213,215
215,216
215,217
217,218
218,219
218,220
219,220
222,223
222,224
222,225
222,226
222,227
222,228
223,224
224,225
224,226
226,227
226,228
228,229
230,231
231,232
231,233
233,234
233,235
233,236
235,236
237,238
239,240
240,241
240,242
240,243
240,244
241,242
243,244
246,247
246,248
249,250
250,251
250,252
251,252
251,253
252,253
254,255
254,256
258,259
258,260
259,260
259,261
260,261
263,264
263,265
264,265
265,266
265,267
265,268
265,269
266,267
268,269
270,271
272,273
274,275
275,276
275,277
276,277
276,278
277,278
279,280
282,283
283,284
283,285
284,285
286,287
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,189,193,195,200,202,207,208,210,214,216,220,221,225,227,229,232,234,236,238,242,244,245,247,248,253,255,256,257,261,262,267,269,271,273,278,280,281,285,287
-----computeFrom-----
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
191,192
191,193
204,205
204,206
246,247
246,248
250,251
250,252
254,255
254,256
259,260
259,261
275,276
275,277
-----guardedBy-----
193,202
261,280
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType myUnion;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType myUnion;    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(128,82,0)
(109,60,0)
(150,37,0)
(60,119,0)
(162,139,0)
(150,10,0)
(107,73,0)
(116,82,0)
(155,73,0)
(102,80,0)
(149,157,0)
(163,47,0)
(10,2,0)
(92,156,0)
(91,105,0)
(103,115,0)
(108,48,0)
(77,97,0)
(164,154,0)
(122,108,0)
(16,128,0)
(66,163,0)
(60,82,0)
(7,117,0)
(133,7,0)
(88,173,0)
(147,173,0)
(111,116,0)
(36,58,0)
(21,138,0)
(29,138,0)
(14,157,0)
(85,138,0)
(31,101,0)
(54,16,0)
(156,81,0)
(163,132,0)
(140,25,0)
(84,109,0)
(163,60,0)
(99,100,0)
(25,82,0)
(59,119,0)
(114,63,0)
(97,63,0)
(48,108,0)
(119,60,0)
(168,37,0)
(129,116,0)
(46,165,0)
(55,74,0)
(87,35,0)
(123,156,0)
(75,88,0)
(95,135,0)
(62,140,0)
(121,53,0)
(47,163,0)
(120,63,0)
(78,82,0)
(108,144,0)
(64,139,0)
(124,107,0)
(167,104,0)
(23,138,0)
(69,63,0)
(67,58,0)
(7,47,0)
(15,82,0)
(52,7,0)
(45,138,0)
(43,8,0)
(135,101,0)
(156,82,0)
(74,117,0)
(113,132,0)
(153,132,0)
(57,63,0)
(24,152,0)
(117,7,0)
(143,110,0)
(83,32,0)
(88,172,0)
(13,82,0)
(65,138,0)
(46,60,0)
(51,166,0)
(139,63,0)
(128,16,0)
(81,156,0)
(4,162,0)
(137,25,0)
(47,82,0)
(0,86,0)
(10,150,0)
(90,138,0)
(110,150,0)
(135,47,0)
(97,139,0)
(134,24,0)
(125,23,0)
(56,88,0)
(157,100,0)
(120,105,0)
(138,58,0)
(1,167,0)
(160,120,0)
(104,82,0)
(126,23,0)
(40,162,0)
(152,57,0)
(170,139,0)
(118,163,0)
(144,53,0)
(37,150,0)
(166,107,0)
(17,163,0)
(79,32,0)
(8,115,0)
(104,167,0)
(105,120,0)
(158,138,0)
(74,47,0)
(162,99,0)
(39,99,0)
(171,138,0)
(9,56,0)
(115,8,0)
(127,74,0)
(6,48,0)
(172,58,0)
(73,107,0)
(98,152,0)
(71,10,0)
(159,46,0)
(142,128,0)
(76,82,0)
(44,172,0)
(12,47,0)
(72,57,0)
(117,74,0)
(157,88,0)
(112,56,0)
(10,71,0)
(106,138,0)
(22,48,0)
(150,60,0)
(132,163,0)
(173,88,0)
(148,63,0)
(5,138,0)
(27,173,0)
(94,140,0)
(42,119,0)
(107,124,0)
(157,139,0)
(89,43,0)
(30,150,0)
(130,24,0)
(156,123,0)
(80,104,0)
(38,81,0)
(33,123,0)
(26,60,0)
(32,43,0)
(101,82,0)
(53,144,0)
(34,80,0)
(96,166,0)
(2,10,0)
(3,120,0)
(70,109,0)
(136,105,0)
(131,90,0)
(61,8,0)
(20,135,0)
(43,58,0)
(150,110,0)
(109,90,0)
(152,24,0)
(144,82,0)
(63,172,0)
(162,88,0)
(68,124,0)
(107,166,0)
(141,157,0)
(146,41,0)
(93,90,0)
(11,119,0)
(46,90,0)
(50,151,0)
(43,128,0)
(86,60,0)
(169,2,0)
(18,49,0)
(161,86,0)
(8,58,0)
(62,94,1)
(56,9,1)
(127,55,1)
(60,119,1)
(162,88,1)
(123,33,1)
(42,11,1)
(54,142,1)
(70,146,1)
(79,19,1)
(115,103,1)
(79,18,1)
(2,169,1)
(102,34,1)
(43,8,1)
(168,10,1)
(169,30,1)
(153,113,1)
(90,93,1)
(17,66,1)
(150,37,1)
(77,99,1)
(96,51,1)
(57,72,1)
(131,23,1)
(10,71,1)
(50,110,1)
(39,162,1)
(133,52,1)
(119,42,1)
(149,141,1)
(147,75,1)
(170,88,1)
(110,150,1)
(93,131,1)
(84,70,1)
(10,2,1)
(130,134,1)
(155,107,1)
(150,10,1)
(25,137,1)
(64,170,1)
(1,80,1)
(98,120,1)
(107,124,1)
(86,161,1)
(136,91,1)
(156,81,1)
(7,47,1)
(89,32,1)
(19,109,1)
(73,107,1)
(135,47,1)
(66,12,1)
(126,125,1)
(137,140,1)
(32,83,1)
(132,153,1)
(111,73,1)
(8,115,1)
(124,68,1)
(46,90,1)
(26,116,1)
(104,167,1)
(162,139,1)
(164,73,1)
(167,1,1)
(113,17,1)
(139,64,1)
(142,101,1)
(103,61,1)
(46,60,1)
(109,60,1)
(18,19,1)
(31,135,1)
(161,0,1)
(108,48,1)
(70,87,1)
(48,6,1)
(59,26,1)
(55,47,1)
(11,59,1)
(117,74,1)
(43,89,1)
(157,149,1)
(70,164,1)
(112,57,1)
(16,54,1)
(157,88,1)
(109,90,1)
(91,160,1)
(38,86,1)
(87,117,1)
(68,166,1)
(30,104,1)
(122,48,1)
(3,139,1)
(70,28,1)
(157,139,1)
(117,7,1)
(27,147,1)
(7,133,1)
(23,126,1)
(109,84,1)
(159,109,1)
(120,105,1)
(34,144,1)
(4,157,1)
(40,4,1)
(163,118,1)
(74,47,1)
(9,112,1)
(33,92,1)
(28,128,1)
(140,62,1)
(173,27,1)
(92,81,1)
(135,95,1)
(146,86,1)
(162,40,1)
(107,166,1)
(74,127,1)
(88,173,1)
(53,121,1)
(110,143,1)
(80,102,1)
(156,123,1)
(86,60,1)
(145,97,1)
(129,111,1)
(77,56,1)
(95,20,1)
(121,108,1)
(83,79,1)
(6,22,1)
(97,77,1)
(160,3,1)
(0,60,1)
(97,139,1)
(47,163,1)
(163,60,1)
(14,56,1)
(163,132,1)
(101,31,1)
(143,150,1)
(37,168,1)
(19,46,1)
(150,60,1)
(141,14,1)
(20,117,1)
(99,39,1)
(75,43,1)
(94,156,1)
(72,152,1)
(51,90,1)
(144,53,1)
(128,16,1)
(116,129,1)
(22,25,1)
(12,110,1)
(134,98,1)
(24,130,1)
(81,38,1)
(166,96,1)
(152,24,1)
(105,136,1)
(118,132,1)
(52,74,1)
(51,28,1)
(46,159,1)
(43,128,1)
(125,8,1)
(70,50,1)
(108,122,1)
(73,155,1)
(56,88,1)
(157,88,2)
(111,73,2)
(53,86,2)
(92,86,2)
(108,48,2)
(162,56,2)
(162,88,2)
(22,86,2)
(127,110,2)
(143,86,2)
(122,86,2)
(163,60,2)
(123,86,2)
(144,53,2)
(150,86,2)
(101,117,2)
(167,86,2)
(11,73,2)
(140,86,2)
(110,86,2)
(141,56,2)
(117,74,2)
(120,105,2)
(96,28,2)
(50,110,2)
(68,28,2)
(132,110,2)
(10,2,2)
(161,73,2)
(46,90,2)
(2,86,2)
(60,119,2)
(107,28,2)
(142,117,2)
(124,28,2)
(157,139,2)
(25,86,2)
(60,73,2)
(0,73,2)
(73,107,2)
(107,166,2)
(46,60,2)
(20,117,2)
(110,150,2)
(146,86,2)
(133,74,2)
(10,86,2)
(168,86,2)
(109,90,2)
(86,60,2)
(17,110,2)
(156,123,2)
(48,86,2)
(87,117,2)
(81,86,2)
(107,124,2)
(34,86,2)
(80,86,2)
(39,56,2)
(116,73,2)
(16,117,2)
(8,115,2)
(40,56,2)
(33,86,2)
(73,28,2)
(144,86,2)
(26,73,2)
(88,173,2)
(150,60,2)
(86,73,2)
(129,73,2)
(113,110,2)
(18,19,2)
(74,47,2)
(74,110,2)
(159,109,2)
(95,117,2)
(166,28,2)
(66,110,2)
(43,128,2)
(163,132,2)
(37,86,2)
(155,28,2)
(99,56,2)
(117,7,2)
(137,86,2)
(128,16,2)
(30,86,2)
(31,117,2)
(14,56,2)
(121,86,2)
(54,117,2)
(51,28,2)
(38,86,2)
(162,139,2)
(55,110,2)
(43,8,2)
(102,86,2)
(59,73,2)
(163,110,2)
(94,86,2)
(128,117,2)
(149,56,2)
(153,110,2)
(97,139,2)
(46,109,2)
(10,71,2)
(164,73,2)
(62,86,2)
(12,110,2)
(119,73,2)
(1,86,2)
(169,86,2)
(108,86,2)
(7,47,2)
(156,81,2)
(42,73,2)
(104,86,2)
(52,74,2)
(6,86,2)
(117,110,2)
(4,56,2)
(47,163,2)
(150,10,2)
(150,37,2)
(157,56,2)
(156,86,2)
(135,47,2)
(56,88,2)
(7,74,2)
(118,110,2)
(109,60,2)
(47,110,2)
(152,24,2)
(135,117,2)
(28,117,2)
(104,167,2)
-----------------------------------
(0,connectSocket)
(1,TCP_PORT)
(2,&service)
(3,source)
(4,dest)
(5,if (wsaDataInit)
(6,sin_addr)
(7,recvResult == 0)
(8,data = -1)
(9,100)
(10,(struct sockaddr*)
(11,SOCK_STREAM)
(12,recvResult)
(13,if (connectSocket == INVALID_SOCKET)
(14,dest)
(15,if (WSAStartup(MAKEWORD(2,2)
(16,atoi(inputBuffer)
(17,inputBuffer)
(18,WSACleanup()
(19,wsaDataInit)
(20,inputBuffer)
(21,inputBuffer)
(22,service)
(23,wsaDataInit = 0)
(24,100-1)
(25,service.sin_family = AF_INET)
(26,connectSocket)
(27,unionSecond)
(28,0)
(29,if (connectSocket != INVALID_SOCKET)
(30,connectSocket)
(31,\\\'\\\\0\\\')
(32,myUnion.unionFirst)
(33,service)
(34,service)
(35,)
(36,myUnion)
(37,sizeof(service)
(38,service)
(39,\\\'\\\\0\\\')
(40,data)
(41,)
(42,IPPROTO_TCP)
(43,myUnion.unionFirst = data)
(44,data)
(45,connectSocket)
(46,CLOSE_SOCKET(connectSocket)
(47,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(48,service.sin_addr)
(49,)
(50,break;)
(51,2)
(52,recvResult)
(53,inet_addr(IP_ADDRESS)
(54,inputBuffer)
(55,recvResult)
(56,data < 100)
(57,source[100-1] = \\\'\\\\0\\\')
(58,)
(59,AF_INET)
(60,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(61,data)
(62,sin_family)
(63,)
(64,"")
(65,wsaDataInit)
(66,connectSocket)
(67,data)
(68,wsaData)
(69,source)
(70,connectSocket)
(71,struct sockaddr*)
(72,\\\'\\\\0\\\')
(73,WSAStartup(MAKEWORD(2,2)
(74,recvResult == SOCKET_ERROR)
(75,data)
(76,if (connect(connectSocket, (struct sockaddr*)
(77,dest)
(78,if (recvResult == SOCKET_ERROR || recvResult == 0)
(79,myUnion)
(80,service.sin_port)
(81,&service)
(82,)
(83,unionFirst)
(84,INVALID_SOCKET)
(85,service)
(86,connectSocket == INVALID_SOCKET)
(87,break;)
(88,data = myUnion.unionSecond)
(89,data)
(90,connectSocket = INVALID_SOCKET)
(91,100)
(92,0)
(93,INVALID_SOCKET)
(94,service)
(95,recvResult)
(96,2)
(97,printLine(dest)
(98,source)
(99,dest[data] = \\\'\\\\0\\\')
(100,)
(101,inputBuffer[recvResult] = \\\'\\\\0\\\')
(102,sin_port)
(103,1)
(104,service.sin_port = htons(TCP_PORT)
(105,100-1)
(106,recvResult)
(107,WSAStartup(MAKEWORD(2,2)
(108,service.sin_addr.s_addr)
(109,connectSocket != INVALID_SOCKET)
(110,connect(connectSocket, (struct sockaddr*)
(111,wsaDataInit)
(112,data)
(113,CHAR_ARRAY_SIZE)
(114,if (data < 100)
(115,-1)
(116,wsaDataInit = 1)
(117,recvResult == SOCKET_ERROR || recvResult == 0)
(118,0)
(119,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(120,memset(source, \\\'A\\\', 100-1)
(121,IP_ADDRESS)
(122,s_addr)
(123,sizeof(service)
(124,&wsaData)
(125,wsaDataInit)
(126,0)
(127,SOCKET_ERROR)
(128,data = atoi(inputBuffer)
(129,1)
(130,1)
(131,connectSocket)
(132,CHAR_ARRAY_SIZE - 1)
(133,0)
(134,100)
(135,inputBuffer[recvResult])
(136,1)
(137,AF_INET)
(138,)
(139,dest[100] = "")
(140,service.sin_family)
(141,source)
(142,data)
(143,SOCKET_ERROR)
(144,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(145,RET)
(146,break;)
(147,myUnion)
(148,dest)
(149,data)
(150,connect(connectSocket, (struct sockaddr*)
(151,)
(152,source[100-1])
(153,1)
(154,)
(155,NO_ERROR)
(156,memset(&service, 0, sizeof(service)
(157,strncpy(dest, source, data)
(158,wsaData)
(159,connectSocket)
(160,\\\'A\\\')
(161,INVALID_SOCKET)
(162,dest[data])
(163,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(164,break;)
(165,)
(166,MAKEWORD(2,2)
(167,htons(TCP_PORT)
(168,service)
(169,service)
(170,dest)
(171,do)
(172,)
(173,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^