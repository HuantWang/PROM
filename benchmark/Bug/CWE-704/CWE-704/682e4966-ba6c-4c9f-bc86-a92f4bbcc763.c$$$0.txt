-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68b_badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68b_badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68b_badSink()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68b_badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,16,0)
(16,39,0)
(10,26,0)
(11,22,0)
(27,41,0)
(0,4,0)
(38,41,0)
(18,16,0)
(13,31,0)
(31,28,0)
(17,39,0)
(23,22,0)
(17,2,0)
(2,17,0)
(22,5,0)
(5,28,0)
(35,44,0)
(7,5,0)
(40,44,0)
(41,38,0)
(2,24,0)
(30,7,0)
(29,2,0)
(21,17,0)
(23,39,0)
(1,5,0)
(14,5,0)
(19,1,0)
(22,28,0)
(46,23,0)
(1,28,0)
(41,5,0)
(8,17,0)
(42,22,0)
(3,7,0)
(38,39,0)
(15,39,0)
(22,23,0)
(24,28,0)
(45,39,0)
(0,26,0)
(37,28,0)
(39,44,0)
(34,23,0)
(36,28,0)
(2,5,0)
(41,27,0)
(31,5,0)
(12,38,0)
(5,41,0)
(6,24,0)
(26,0,0)
(41,27,1)
(5,41,1)
(30,3,1)
(16,39,1)
(38,12,1)
(19,24,1)
(1,19,1)
(23,34,1)
(41,38,1)
(9,31,1)
(42,7,1)
(22,23,1)
(16,20,1)
(31,5,1)
(17,39,1)
(34,46,1)
(10,7,1)
(11,42,1)
(3,5,1)
(24,6,1)
(18,39,1)
(22,5,1)
(2,5,1)
(1,5,1)
(31,13,1)
(38,39,1)
(6,2,1)
(21,29,1)
(12,14,1)
(0,26,1)
(23,39,1)
(39,45,1)
(7,5,1)
(17,8,1)
(26,10,1)
(2,17,1)
(46,11,1)
(20,18,1)
(45,15,1)
(13,1,1)
(7,30,1)
(9,16,1)
(29,22,1)
(8,21,1)
(42,0,1)
(14,16,1)
(16,39,2)
(23,16,2)
(0,7,2)
(22,16,2)
(1,5,2)
(38,39,2)
(22,5,2)
(3,16,2)
(2,16,2)
(41,27,2)
(41,16,2)
(5,16,2)
(34,16,2)
(46,16,2)
(11,16,2)
(42,16,2)
(8,16,2)
(5,41,2)
(17,39,2)
(21,16,2)
(23,39,2)
(38,16,2)
(26,7,2)
(24,16,2)
(7,5,2)
(14,16,2)
(13,16,2)
(30,16,2)
(2,17,2)
(10,7,2)
(2,5,2)
(29,16,2)
(6,16,2)
(17,16,2)
(19,16,2)
(7,16,2)
(31,5,2)
(22,23,2)
(1,16,2)
(41,38,2)
(12,16,2)
(0,26,2)
(31,16,2)
-----------------------------------
(0,exit(-1)
(1,printLine(dataBuffer)
(2,dataBuffer[data-1])
(3,dataBuffer)
(4,)
(5,* dataBuffer = (char *)
(6,'\\\\0')
(7,dataBuffer == NULL)
(8,1)
(9,RET)
(10,1)
(11,\'A\')
(12,data)
(13,dataBuffer)
(14,dataBuffer)
(15,data)
(16,data < 100)
(17,data-1)
(18,data)
(19,dataBuffer)
(20,100)
(21,data)
(22,memset(dataBuffer, 'A', data-1)
(23,data-1)
(24,dataBuffer[data-1] = '\\\\0')
(25,dataBuffer[data-1] = \'\\\\0\')
(26,-1)
(27,char *)
(28,)
(29,dataBuffer)
(30,NULL)
(31,free(dataBuffer)
(32,memset(dataBuffer, \'A\', data-1)
(33,'A')
(34,1)
(35,if (data < 100)
(36,if (dataBuffer == NULL)
(37,dataBuffer)
(38,malloc(data)
(39,data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData)
(40,data)
(41,(char *)
(42,dataBuffer)
(43,\'\\\\0\')
(44,)
(45,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_68_badData)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^