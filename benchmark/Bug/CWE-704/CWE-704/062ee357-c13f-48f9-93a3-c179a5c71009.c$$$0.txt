-----label-----
1
-----code-----
static void badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(14,7,0)
(21,30,0)
(42,38,0)
(20,24,0)
(0,16,0)
(13,32,0)
(24,35,0)
(21,35,0)
(29,8,0)
(10,24,0)
(28,37,0)
(34,4,0)
(36,20,0)
(12,35,0)
(5,4,0)
(43,18,0)
(33,2,0)
(39,32,0)
(32,18,0)
(35,24,0)
(4,32,0)
(6,43,0)
(19,30,0)
(4,35,0)
(32,4,0)
(30,16,0)
(40,8,0)
(8,18,0)
(2,35,0)
(41,26,0)
(26,35,0)
(38,27,0)
(9,26,0)
(2,16,0)
(20,18,0)
(38,42,0)
(4,16,0)
(22,21,0)
(37,35,0)
(24,10,0)
(35,16,0)
(15,16,0)
(8,21,0)
(1,42,0)
(21,8,0)
(37,16,0)
(24,20,0)
(3,43,0)
(8,40,1)
(24,10,1)
(20,36,1)
(25,43,1)
(37,35,1)
(13,5,1)
(34,26,1)
(37,28,1)
(30,19,1)
(12,43,1)
(34,38,1)
(5,34,1)
(36,12,1)
(21,8,1)
(35,24,1)
(2,33,1)
(4,32,1)
(19,21,1)
(29,22,1)
(32,18,1)
(25,37,1)
(41,35,1)
(9,41,1)
(20,18,1)
(28,2,1)
(32,39,1)
(24,20,1)
(40,29,1)
(1,26,1)
(2,35,1)
(8,18,1)
(21,35,1)
(3,6,1)
(39,13,1)
(38,42,1)
(33,30,1)
(26,35,1)
(42,1,1)
(43,18,1)
(26,9,1)
(4,35,1)
(43,3,1)
(22,4,1)
(41,43,2)
(4,35,2)
(38,26,2)
(5,43,2)
(13,43,2)
(35,43,2)
(21,35,2)
(21,43,2)
(28,43,2)
(35,24,2)
(9,43,2)
(19,43,2)
(12,43,2)
(24,43,2)
(29,43,2)
(20,43,2)
(33,43,2)
(42,26,2)
(22,43,2)
(4,43,2)
(40,43,2)
(8,43,2)
(20,18,2)
(36,43,2)
(30,43,2)
(32,18,2)
(1,26,2)
(37,43,2)
(2,35,2)
(24,20,2)
(8,18,2)
(39,43,2)
(26,35,2)
(2,43,2)
(21,8,2)
(43,18,2)
(4,32,2)
(34,43,2)
(26,43,2)
(24,10,2)
(32,43,2)
(38,42,2)
(37,35,2)
-----------------------------------
(0,if (dataBuffer == NULL)
(1,1)
(2,printLine(dataBuffer)
(3,100)
(4,memset(dataBuffer, 'A', data-1)
(5,'A')
(6,data)
(7,)
(8,data-1)
(9,NULL)
(10,char *)
(11,\'A\')
(12,dataBuffer)
(13,data)
(14,if (data < 100)
(15,dataBuffer)
(16,)
(17,memset(dataBuffer, \'A\', data-1)
(18,int data)
(19,\'\\\\0\')
(20,malloc(data)
(21,dataBuffer[data-1])
(22,dataBuffer)
(23,'\\\\0')
(24,(char *)
(25,RET)
(26,dataBuffer == NULL)
(27,)
(28,dataBuffer)
(29,data)
(30,dataBuffer[data-1] = '\\\\0')
(31,dataBuffer[data-1] = \'\\\\0\')
(32,data-1)
(33,dataBuffer)
(34,dataBuffer)
(35,* dataBuffer = (char *)
(36,data)
(37,free(dataBuffer)
(38,exit(-1)
(39,1)
(40,1)
(41,dataBuffer)
(42,-1)
(43,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^