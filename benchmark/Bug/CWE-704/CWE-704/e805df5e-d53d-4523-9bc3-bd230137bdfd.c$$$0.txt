-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
37,53
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,3,0)
(56,46,0)
(65,12,0)
(7,28,0)
(49,42,0)
(14,25,0)
(1,12,0)
(18,13,0)
(53,32,0)
(13,10,0)
(65,8,0)
(2,29,0)
(43,42,0)
(9,47,0)
(20,7,0)
(36,45,0)
(13,8,0)
(46,21,0)
(11,50,0)
(37,27,0)
(64,25,0)
(50,29,0)
(2,43,0)
(29,43,0)
(63,29,0)
(59,21,0)
(4,55,0)
(16,45,0)
(6,65,0)
(39,57,0)
(25,45,0)
(58,53,0)
(5,21,0)
(34,43,0)
(44,53,0)
(41,43,0)
(12,55,0)
(28,41,0)
(48,8,0)
(0,2,0)
(19,50,0)
(23,5,0)
(60,42,0)
(62,7,0)
(30,13,0)
(21,46,0)
(13,29,0)
(33,5,0)
(31,12,0)
(53,12,0)
(8,65,0)
(40,32,0)
(45,43,0)
(28,7,0)
(51,29,0)
(21,42,0)
(50,21,0)
(47,10,0)
(5,8,0)
(24,53,0)
(32,53,0)
(35,43,0)
(61,43,0)
(8,17,0)
(13,21,0)
(50,8,0)
(26,13,0)
(15,28,0)
(55,57,0)
(45,25,0)
(52,55,0)
(38,41,0)
(50,47,0)
(26,5,1)
(38,28,1)
(18,30,1)
(62,15,1)
(25,14,1)
(33,23,1)
(5,21,1)
(13,21,1)
(56,59,1)
(65,6,1)
(54,21,1)
(53,12,1)
(23,41,1)
(50,29,1)
(50,8,1)
(32,53,1)
(27,37,1)
(30,26,1)
(50,21,1)
(31,1,1)
(40,53,1)
(29,63,1)
(5,8,1)
(22,2,1)
(36,16,1)
(50,11,1)
(63,51,1)
(7,20,1)
(16,29,1)
(8,65,1)
(39,27,1)
(44,12,1)
(13,29,1)
(12,31,1)
(13,8,1)
(0,47,1)
(65,12,1)
(20,62,1)
(51,54,1)
(46,56,1)
(53,58,1)
(9,50,1)
(37,32,1)
(39,8,1)
(5,33,1)
(11,19,1)
(24,44,1)
(45,25,1)
(51,39,1)
(48,32,1)
(15,45,1)
(41,38,1)
(58,24,1)
(47,9,1)
(14,64,1)
(32,40,1)
(13,18,1)
(6,48,1)
(28,7,1)
(2,0,1)
(64,36,1)
(21,46,1)
(2,29,1)
(19,13,1)
(1,54,1)
(0,5,1)
(53,12,2)
(37,32,2)
(32,53,2)
(11,5,2)
(53,54,2)
(19,5,2)
(32,54,2)
(13,29,2)
(13,8,2)
(12,54,2)
(8,65,2)
(30,5,2)
(5,21,2)
(45,25,2)
(58,54,2)
(5,8,2)
(28,7,2)
(6,32,2)
(31,54,2)
(65,12,2)
(13,21,2)
(50,29,2)
(65,32,2)
(48,32,2)
(27,32,2)
(21,46,2)
(9,5,2)
(39,54,2)
(50,8,2)
(50,21,2)
(26,5,2)
(2,29,2)
(13,5,2)
(40,54,2)
(47,5,2)
(50,5,2)
(24,54,2)
(44,54,2)
(8,32,2)
(1,54,2)
(18,5,2)
-----------------------------------
(0,dest)
(1,inputBuffer)
(2,printLine(dest)
(3,)
(4,inputBuffer)
(5,data < 100)
(6,inputBuffer)
(7,100-1)
(8,data = atoi(inputBuffer)
(9,\\\'\\\\0\\\')
(10,)
(11,data)
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,memcpy(dest, source, data)
(14,1)
(15,source)
(16,source)
(17,)
(18,data)
(19,dest)
(20,1)
(21,data = -1)
(22,RET)
(23,data)
(24,CHAR_ARRAY_SIZE)
(25,100-1)
(26,dest)
(27,printLine("fgets()
(28,source[100-1])
(29,dest[100] = "")
(30,source)
(31,"")
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,100)
(34,source)
(35,dest)
(36,\\\'A\\\')
(37,"fgets()
(38,\\\'\\\\0\\\')
(39,break;)
(40,NULL)
(41,source[100-1] = \\\'\\\\0\\\')
(42,)
(43,)
(44,inputBuffer)
(45,memset(source, \\\'A\\\', 100-1)
(46,-1)
(47,dest[data] = \\\'\\\\0\\\')
(48,data)
(49,while(1)
(50,dest[data])
(51,dest)
(52,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,1)
(55,)
(56,1)
(57,)
(58,stdin)
(59,data)
(60,data)
(61,if (data < 100)
(62,100)
(63,"")
(64,100)
(65,atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^