-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_08_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(6,26,0)
(18,60,0)
(5,48,0)
(46,26,0)
(47,7,0)
(24,38,0)
(21,4,0)
(35,37,0)
(32,43,0)
(35,42,0)
(6,46,0)
(63,38,0)
(13,58,0)
(55,1,0)
(52,46,0)
(33,42,0)
(30,58,0)
(42,44,0)
(0,35,0)
(11,6,0)
(40,33,0)
(57,10,0)
(2,13,0)
(49,24,0)
(28,7,0)
(51,42,0)
(58,26,0)
(64,57,0)
(26,44,0)
(21,43,0)
(7,48,0)
(45,10,0)
(27,21,0)
(20,35,0)
(35,48,0)
(4,26,0)
(48,18,0)
(29,1,0)
(17,13,0)
(14,58,0)
(18,57,0)
(38,24,0)
(7,39,0)
(23,26,0)
(56,46,0)
(33,48,0)
(1,34,0)
(22,65,0)
(15,26,0)
(7,42,0)
(36,43,0)
(62,26,0)
(54,10,0)
(3,35,0)
(48,53,0)
(8,24,0)
(60,18,0)
(43,21,0)
(19,39,0)
(18,48,0)
(57,18,0)
(61,4,0)
(65,25,0)
(39,37,0)
(58,13,0)
(41,42,0)
(16,24,0)
(24,10,0)
(10,1,0)
(59,33,0)
(35,46,0)
(50,44,0)
(7,46,0)
(31,44,0)
(36,27,1)
(48,18,1)
(54,9,1)
(35,0,1)
(38,24,1)
(12,6,1)
(11,39,1)
(6,11,1)
(7,46,1)
(45,54,1)
(21,43,1)
(43,32,1)
(7,48,1)
(58,13,1)
(59,40,1)
(17,2,1)
(30,46,1)
(7,28,1)
(24,49,1)
(39,19,1)
(32,36,1)
(49,16,1)
(41,51,1)
(9,42,1)
(28,47,1)
(13,17,1)
(11,33,1)
(64,5,1)
(20,33,1)
(2,14,1)
(57,10,1)
(38,63,1)
(27,58,1)
(33,59,1)
(52,48,1)
(18,57,1)
(16,8,1)
(24,10,1)
(19,7,1)
(46,56,1)
(35,42,1)
(56,52,1)
(0,3,1)
(33,48,1)
(35,46,1)
(4,61,1)
(22,38,1)
(47,35,1)
(52,9,1)
(10,45,1)
(5,38,1)
(63,24,1)
(52,65,1)
(6,46,1)
(57,64,1)
(42,41,1)
(7,42,1)
(3,20,1)
(40,4,1)
(35,48,1)
(18,60,1)
(14,30,1)
(8,10,1)
(61,21,1)
(33,42,1)
(65,22,1)
(24,10,2)
(35,42,2)
(22,38,2)
(38,24,2)
(48,18,2)
(20,33,2)
(64,38,2)
(57,38,2)
(24,9,2)
(58,13,2)
(18,38,2)
(48,38,2)
(18,60,2)
(7,42,2)
(19,33,2)
(21,43,2)
(33,42,2)
(35,48,2)
(0,33,2)
(57,10,2)
(18,57,2)
(54,9,2)
(16,9,2)
(7,33,2)
(39,33,2)
(65,38,2)
(28,33,2)
(38,9,2)
(6,46,2)
(10,9,2)
(5,38,2)
(35,33,2)
(3,33,2)
(7,48,2)
(33,48,2)
(49,9,2)
(35,46,2)
(47,33,2)
(8,9,2)
(63,9,2)
(7,46,2)
(45,9,2)
-----------------------------------
(0,data)
(1,)
(2,100)
(3,source)
(4,source[100-1] = \\\'\\\\0\\\')
(5,data)
(6,printLine(dest)
(7,dest[data])
(8,inputBuffer)
(9,staticReturnsTrue()
(10,inputBuffer[CHAR_ARRAY_SIZE] = "")
(11,dest)
(12,RET)
(13,100-1)
(14,\\\'A\\\')
(15,if (data < 100)
(16,CHAR_ARRAY_SIZE)
(17,1)
(18,(short)
(19,\\\'\\\\0\\\')
(20,dest)
(21,source[100-1])
(22,"fgets()
(23,dest)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,)
(26,)
(27,source)
(28,data)
(29,inputBuffer)
(30,source)
(31,data)
(32,1)
(33,data < 100)
(34,)
(35,memmove(dest, source, data)
(36,100)
(37,)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,dest[data] = \\\'\\\\0\\\')
(40,data)
(41,0)
(42,data = 0)
(43,100-1)
(44,)
(45,"")
(46,dest[100] = "")
(47,dest)
(48,data = (short)
(49,stdin)
(50,if(staticReturnsTrue()
(51,data)
(52,dest)
(53,)
(54,inputBuffer)
(55,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,"")
(57,atoi(inputBuffer)
(58,memset(source, \\\'A\\\', 100-1)
(59,100)
(60,short)
(61,\\\'\\\\0\\\')
(62,source)
(63,NULL)
(64,inputBuffer)
(65,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^