-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
73,75
74,75
74,76
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
112,114
113,114
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,63,64,68,70,71,75,77,80,82,86,88,93,95,99,101,102,105,106,111,114,115,116,120,122,126,128
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
61,62
61,63
84,85
84,86
103,104
103,105
108,109
108,110
112,113
112,114
-----guardedBy-----
37,53
63,114
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,30,0)
(48,24,0)
(56,55,0)
(9,55,0)
(20,11,0)
(22,30,0)
(47,63,0)
(56,30,0)
(29,11,0)
(44,63,0)
(49,36,0)
(39,5,0)
(24,48,0)
(11,6,0)
(52,15,0)
(62,41,0)
(34,45,0)
(55,45,0)
(13,5,0)
(55,56,0)
(14,51,0)
(55,11,0)
(56,44,0)
(19,66,0)
(51,44,0)
(51,17,0)
(57,48,0)
(38,56,0)
(61,17,0)
(3,45,0)
(6,54,0)
(32,44,0)
(40,58,0)
(53,15,0)
(43,5,0)
(10,54,0)
(3,11,0)
(11,45,0)
(6,11,0)
(66,5,0)
(31,4,0)
(42,63,0)
(26,66,0)
(15,11,0)
(54,6,0)
(18,3,0)
(1,50,0)
(28,41,0)
(17,11,0)
(33,63,0)
(5,41,0)
(2,56,0)
(41,65,0)
(64,58,0)
(58,30,0)
(36,44,0)
(44,36,0)
(4,8,0)
(17,51,0)
(6,16,0)
(25,66,0)
(20,45,0)
(54,30,0)
(30,12,0)
(27,66,0)
(24,60,0)
(17,50,0)
(16,6,0)
(46,45,0)
(37,20,0)
(58,44,0)
(50,45,0)
(54,44,0)
(66,19,0)
(39,30,0)
(23,19,0)
(21,39,0)
(35,55,0)
(59,51,0)
(30,39,0)
(54,10,1)
(39,21,1)
(23,66,1)
(55,11,1)
(37,3,1)
(52,53,1)
(3,18,1)
(6,54,1)
(55,56,1)
(26,5,1)
(6,16,1)
(49,32,1)
(40,64,1)
(50,1,1)
(13,7,1)
(43,13,1)
(39,5,1)
(29,58,1)
(56,2,1)
(9,35,1)
(51,30,1)
(57,15,1)
(58,30,1)
(66,5,1)
(38,9,1)
(17,51,1)
(19,66,1)
(54,44,1)
(0,58,1)
(58,40,1)
(3,11,1)
(53,11,1)
(64,4,1)
(22,19,1)
(11,6,1)
(36,49,1)
(0,20,1)
(27,26,1)
(30,39,1)
(25,27,1)
(10,29,1)
(15,52,1)
(17,11,1)
(15,11,1)
(35,15,1)
(21,22,1)
(61,55,1)
(1,17,1)
(56,44,1)
(48,57,1)
(7,44,1)
(35,24,1)
(66,25,1)
(64,7,1)
(64,30,1)
(31,19,1)
(44,36,1)
(59,14,1)
(20,11,1)
(14,61,1)
(2,38,1)
(54,30,1)
(56,30,1)
(20,37,1)
(5,43,1)
(51,59,1)
(58,44,1)
(4,31,1)
(51,44,1)
(18,50,1)
(24,48,1)
(19,23,1)
(38,58,2)
(54,30,2)
(19,66,2)
(26,7,2)
(17,51,2)
(61,58,2)
(56,58,2)
(10,58,2)
(2,58,2)
(39,5,2)
(58,44,2)
(17,11,2)
(55,56,2)
(30,39,2)
(6,54,2)
(48,15,2)
(4,19,2)
(20,58,2)
(51,44,2)
(15,58,2)
(24,15,2)
(27,7,2)
(59,58,2)
(17,58,2)
(56,30,2)
(54,58,2)
(20,11,2)
(6,16,2)
(52,58,2)
(23,7,2)
(19,7,2)
(55,58,2)
(25,7,2)
(11,58,2)
(13,7,2)
(21,19,2)
(22,19,2)
(56,44,2)
(66,7,2)
(3,11,2)
(6,58,2)
(31,19,2)
(55,11,2)
(9,58,2)
(29,58,2)
(58,30,2)
(24,48,2)
(51,58,2)
(57,15,2)
(15,11,2)
(37,58,2)
(39,19,2)
(3,58,2)
(5,7,2)
(66,5,2)
(35,58,2)
(44,36,2)
(1,58,2)
(54,44,2)
(18,58,2)
(43,7,2)
(30,19,2)
(14,58,2)
(51,30,2)
(11,6,2)
(50,58,2)
(53,58,2)
-----------------------------------
(0,RET)
(1,\\\'\\\\0\\\')
(2,1)
(3,printLine(dataBuffer)
(4,printLine("fgets()
(5,inputBuffer[CHAR_ARRAY_SIZE] = "")
(6,(char *)
(7,1)
(8,)
(9,\\\'A\\\')
(10,data)
(11,* dataBuffer = (char *)
(12,)
(13,inputBuffer)
(14,data)
(15,dataBuffer == NULL)
(16,char *)
(17,dataBuffer[data-1])
(18,dataBuffer)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,free(dataBuffer)
(21,inputBuffer)
(22,data)
(23,NULL)
(24,exit(-1)
(25,stdin)
(26,inputBuffer)
(27,CHAR_ARRAY_SIZE)
(28,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,dataBuffer)
(30,data = atoi(inputBuffer)
(31,"fgets()
(32,data)
(33,if(1)
(34,if (dataBuffer == NULL)
(35,dataBuffer)
(36,-1)
(37,dataBuffer)
(38,data)
(39,atoi(inputBuffer)
(40,100)
(41,)
(42,if (data < 100)
(43,"")
(44,data = -1)
(45,)
(46,dataBuffer)
(47,data)
(48,-1)
(49,1)
(50,dataBuffer[data-1] = \\\'\\\\0\\\')
(51,data-1)
(52,NULL)
(53,dataBuffer)
(54,malloc(data)
(55,memset(dataBuffer, \\\'A\\\', data-1)
(56,data-1)
(57,1)
(58,data < 100)
(59,1)
(60,)
(61,dataBuffer)
(62,inputBuffer)
(63,)
(64,data)
(65,)
(66,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^