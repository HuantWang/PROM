-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_char_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,39,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_char_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fscanf_to_char_12_bad()
CWE197_Numeric_Truncation_Error__int_fscanf_to_char_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(16,2,0)
(24,22,0)
(19,25,0)
(7,16,0)
(29,21,0)
(12,4,0)
(26,15,0)
(23,12,0)
(4,11,0)
(0,16,0)
(8,22,0)
(16,11,0)
(11,22,0)
(12,9,0)
(11,21,0)
(14,2,0)
(2,16,0)
(3,12,0)
(18,25,0)
(17,11,0)
(15,28,0)
(16,7,0)
(13,8,0)
(6,4,0)
(4,12,0)
(1,8,0)
(25,15,0)
(1,2,0)
(16,15,0)
(2,8,0)
(27,1,0)
(20,22,0)
(21,11,0)
(15,25,0)
(10,11,1)
(23,3,1)
(12,4,1)
(29,17,1)
(16,7,1)
(1,2,1)
(6,23,1)
(15,25,1)
(4,6,1)
(2,16,1)
(14,15,1)
(21,29,1)
(18,26,1)
(5,1,1)
(16,15,1)
(11,21,1)
(4,11,1)
(0,14,1)
(16,0,1)
(19,18,1)
(27,2,1)
(26,10,1)
(1,27,1)
(14,12,1)
(3,10,1)
(25,19,1)
(16,11,1)
(12,10,2)
(25,10,2)
(3,10,2)
(16,15,2)
(15,10,2)
(4,11,2)
(18,10,2)
(15,25,2)
(1,2,2)
(16,11,2)
(4,10,2)
(16,7,2)
(11,21,2)
(6,10,2)
(2,16,2)
(23,10,2)
(19,10,2)
(26,10,2)
(12,4,2)
-----------------------------------
(0,data)
(1,printHexCharLine(charData)
(2,charData = (char)
(3,stdin)
(4,&data)
(5,RET)
(6,data)
(7,char)
(8,)
(9,)
(10,globalReturnsTrueOrFalse()
(11,data = -1)
(12,fscanf(stdin, "%d", &data)
(13,charData)
(14,charData)
(15,data = CHAR_MAX-5)
(16,(char)
(17,data)
(18,CHAR_MAX)
(19,5)
(20,data)
(21,-1)
(22,)
(23,"%d")
(24,if(globalReturnsTrueOrFalse()
(25,CHAR_MAX-5)
(26,data)
(27,charData)
(28,)
(29,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^