-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
67,68
67,69
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,46,48,50,53,55,57,59,63,65,66,68,69,74,76,77,78,82,83,88,90,92,94,99,101,102,106,108
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
67,68
67,69
71,72
71,73
75,76
75,77
80,81
80,82
96,97
96,98
-----guardedBy-----
82,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(0,54,0)
(10,0,0)
(26,2,0)
(21,40,0)
(2,43,0)
(38,2,0)
(32,36,0)
(4,2,0)
(50,8,0)
(24,37,0)
(7,48,0)
(28,54,0)
(30,44,0)
(25,2,0)
(23,0,0)
(6,8,0)
(24,47,0)
(47,5,0)
(26,36,0)
(54,43,0)
(0,36,0)
(52,2,0)
(12,28,0)
(3,48,0)
(14,24,0)
(34,47,0)
(35,0,0)
(0,5,0)
(17,8,0)
(15,40,0)
(39,8,0)
(0,37,0)
(53,37,0)
(16,24,0)
(9,54,0)
(22,26,0)
(46,6,0)
(37,18,0)
(9,37,0)
(51,17,0)
(11,43,0)
(41,43,0)
(1,36,0)
(31,2,0)
(29,9,0)
(24,54,0)
(44,25,0)
(40,44,0)
(36,2,0)
(48,31,0)
(37,53,0)
(55,37,0)
(27,17,0)
(42,25,0)
(45,31,0)
(54,28,0)
(31,48,0)
(13,9,0)
(19,43,0)
(44,40,0)
(20,54,0)
(49,31,0)
(24,36,0)
(40,21,1)
(30,31,1)
(51,27,1)
(13,25,1)
(27,6,1)
(16,0,1)
(6,46,1)
(15,30,1)
(10,35,1)
(36,32,1)
(24,54,1)
(49,45,1)
(24,14,1)
(9,54,1)
(21,15,1)
(0,10,1)
(29,13,1)
(44,40,1)
(47,34,1)
(0,36,1)
(0,54,1)
(12,20,1)
(1,17,1)
(6,8,1)
(9,29,1)
(3,49,1)
(31,48,1)
(17,51,1)
(24,37,1)
(22,9,1)
(26,36,1)
(14,16,1)
(7,3,1)
(32,1,1)
(24,36,1)
(35,23,1)
(45,36,1)
(50,39,1)
(42,44,1)
(55,17,1)
(25,42,1)
(9,37,1)
(22,47,1)
(54,28,1)
(46,37,1)
(48,7,1)
(23,9,1)
(28,12,1)
(34,24,1)
(17,8,1)
(33,26,1)
(27,8,1)
(0,37,1)
(39,54,1)
(26,22,1)
(53,55,1)
(8,50,1)
(37,53,1)
(24,37,2)
(14,9,2)
(53,17,2)
(34,9,2)
(17,8,2)
(24,36,2)
(46,17,2)
(0,37,2)
(47,9,2)
(9,54,2)
(26,36,2)
(35,9,2)
(10,9,2)
(44,40,2)
(24,9,2)
(55,17,2)
(9,37,2)
(0,36,2)
(31,48,2)
(37,53,2)
(0,54,2)
(27,17,2)
(17,17,2)
(16,9,2)
(23,9,2)
(24,54,2)
(51,17,2)
(0,9,2)
(6,8,2)
(54,28,2)
(6,17,2)
(37,17,2)
-----------------------------------
(0,memcpy(dest, source, data)
(1,dest)
(2,)
(3,100)
(4,dest)
(5,)
(6,i++)
(7,1)
(8,i = 0)
(9,data < 100)
(10,data)
(11,for(i = 0; i < 1; i++)
(12,1)
(13,data)
(14,data)
(15,100)
(16,dest)
(17,i < 1)
(18,)
(19,data)
(20,data)
(21,1)
(22,dest)
(23,dest)
(24,dest[data])
(25,source[100-1] = \\\'\\\\0\\\')
(26,printLine(dest)
(27,i)
(28,-1)
(29,100)
(30,source)
(31,memset(source, \\\'A\\\', 100-1)
(32,"")
(33,RET)
(34,\\\'\\\\0\\\')
(35,source)
(36,dest[100] = "")
(37,data = RAND32()
(38,source)
(39,i)
(40,100-1)
(41,i)
(42,\\\'\\\\0\\\')
(43,)
(44,source[100-1])
(45,source)
(46,i)
(47,dest[data] = \\\'\\\\0\\\')
(48,100-1)
(49,\\\'A\\\')
(50,0)
(51,1)
(52,if (data < 100)
(53,RAND32()
(54,data = -1)
(55,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^