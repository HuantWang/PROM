-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_listen_socket_to_short_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
            short shortData = (short)data;
            printShortLine(shortData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
75,76
77,78
78,79
78,80
80,81
80,82
82,83
83,84
85,86
85,87
86,87
86,88
86,89
86,90
86,91
86,92
86,93
86,94
86,95
86,96
86,97
86,98
86,99
86,100
87,88
88,89
88,90
89,90
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
113,114
116,117
117,118
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
128,129
129,130
129,131
130,131
130,132
131,132
131,133
132,133
136,137
138,139
139,140
139,141
140,141
140,142
141,142
144,145
144,146
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
151,155
152,153
154,155
156,157
156,158
157,158
157,159
158,159
160,161
162,163
163,164
165,166
166,167
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
175,177
175,178
176,177
178,179
180,181
182,183
184,185
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
191,192
193,194
195,196
197,198
199,200
199,201
200,201
200,202
201,202
203,204
205,206
207,208
208,209
208,210
209,210
211,212
211,213
211,214
211,215
211,216
212,213
214,215
216,217
218,219
218,220
219,220
223,224
223,225
224,225
224,226
225,226
225,227
226,227
228,229
230,231
230,232
231,232
234,235
236,237
237,238
237,239
238,239
238,240
239,240
241,242
244,245
245,246
245,247
246,247
248,249
248,250
249,250
251,252
254,255
254,256
255,256
255,257
256,257
258,259
260,261
261,262
262,263
262,264
263,264
265,266
267,268
267,269
268,269
268,270
269,270
271,272
273,274
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
283,284
285,286
287,288
287,289
288,289
289,290
289,291
291,292
291,293
293,294
294,295
295,296
297,298
297,299
298,299
299,300
299,301
301,302
301,303
303,304
304,305
304,306
305,306
305,307
308,309
310,311
311,312
311,313
312,313
314,315
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,56,58,62,64,67,71,73,76,79,81,84,90,93,95,97,99,103,105,107,111,114,115,119,124,125,127,133,134,135,137,142,143,146,148,153,155,159,161,164,168,170,172,177,179,181,183,185,189,192,194,196,198,202,204,206,210,213,215,217,220,221,222,227,229,232,233,235,240,242,243,247,250,252,253,257,259,264,266,270,272,277,279,284,286,290,292,296,300,302,306,307,309,313,315
-----computeFrom-----
32,33
32,34
88,89
88,90
101,102
101,103
121,122
121,123
129,130
129,131
139,140
139,141
150,151
150,152
174,175
174,176
187,188
187,189
200,201
200,202
208,209
208,210
218,219
218,220
224,225
224,226
225,226
225,227
230,231
230,232
237,238
237,239
245,246
245,247
255,256
255,257
268,269
268,270
281,282
281,283
-----guardedBy-----
257,266
270,279
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_listen_socket_to_short_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }}
void
CWE197_Numeric_Truncation_Error__int_listen_socket_to_short_32_bad()
CWE197_Numeric_Truncation_Error__int_listen_socket_to_short_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(59,25,0)
(29,85,0)
(5,25,0)
(20,154,0)
(72,95,0)
(158,46,0)
(80,5,0)
(186,11,0)
(92,165,0)
(63,133,0)
(133,63,0)
(108,89,0)
(91,186,0)
(86,174,0)
(136,72,0)
(168,106,0)
(54,157,0)
(32,135,0)
(106,190,0)
(118,73,0)
(127,16,0)
(109,124,0)
(8,133,0)
(98,132,0)
(160,180,0)
(180,28,0)
(66,50,0)
(106,173,0)
(11,186,0)
(133,85,0)
(170,175,0)
(185,102,0)
(34,146,0)
(180,142,0)
(159,89,0)
(102,185,0)
(128,131,0)
(88,59,0)
(85,69,0)
(71,119,0)
(31,77,0)
(83,70,0)
(52,185,0)
(50,156,0)
(87,28,0)
(146,34,0)
(44,102,0)
(150,43,0)
(36,175,0)
(165,135,0)
(89,74,0)
(184,69,0)
(129,21,0)
(56,89,0)
(27,25,0)
(191,69,0)
(132,89,0)
(90,124,0)
(60,51,0)
(154,73,0)
(47,190,0)
(21,25,0)
(2,74,0)
(155,161,0)
(114,38,0)
(132,25,0)
(186,132,0)
(146,95,0)
(85,93,0)
(28,180,0)
(11,98,0)
(10,53,0)
(27,70,0)
(141,175,0)
(84,25,0)
(61,110,0)
(22,21,0)
(82,30,0)
(162,184,0)
(1,124,0)
(35,124,0)
(133,8,0)
(89,145,0)
(53,69,0)
(161,27,0)
(116,124,0)
(85,133,0)
(105,15,0)
(187,47,0)
(23,25,0)
(69,53,0)
(24,173,0)
(171,25,0)
(157,145,0)
(7,124,0)
(110,36,0)
(67,69,0)
(17,41,0)
(57,106,0)
(157,69,0)
(181,157,0)
(26,169,0)
(149,132,0)
(15,77,0)
(78,161,0)
(123,98,0)
(38,145,0)
(107,32,0)
(69,25,0)
(98,11,0)
(34,154,0)
(100,168,0)
(30,69,0)
(148,157,0)
(183,25,0)
(113,154,0)
(21,22,0)
(112,124,0)
(131,36,0)
(182,30,0)
(147,38,0)
(167,190,0)
(138,169,0)
(39,46,0)
(64,184,0)
(55,191,0)
(32,104,0)
(113,47,0)
(144,190,0)
(156,50,0)
(95,73,0)
(16,191,0)
(126,22,0)
(13,97,0)
(111,192,0)
(50,190,0)
(34,153,0)
(74,89,0)
(4,124,0)
(164,177,0)
(73,190,0)
(122,186,0)
(145,25,0)
(77,25,0)
(14,185,0)
(46,25,0)
(12,8,0)
(140,40,0)
(89,132,0)
(40,25,0)
(177,124,0)
(124,142,0)
(9,132,0)
(48,58,0)
(68,49,0)
(137,53,0)
(103,190,0)
(77,58,0)
(21,119,0)
(79,25,0)
(143,142,0)
(142,190,0)
(6,95,0)
(47,49,0)
(93,85,0)
(36,110,0)
(96,177,0)
(70,27,0)
(62,135,0)
(85,29,0)
(19,149,0)
(173,106,0)
(65,113,0)
(28,106,0)
(45,53,0)
(189,140,0)
(49,47,0)
(176,3,0)
(0,124,0)
(145,157,0)
(121,135,0)
(130,17,0)
(99,25,0)
(169,124,0)
(178,165,0)
(15,180,0)
(75,120,0)
(175,36,0)
(72,146,0)
(33,124,0)
(154,113,0)
(94,124,0)
(42,34,0)
(119,21,0)
(81,156,0)
(153,34,0)
(15,142,0)
(101,146,0)
(58,77,0)
(17,69,0)
(188,93,0)
(76,29,0)
(36,131,0)
(139,40,0)
(32,145,0)
(165,145,0)
(168,15,0)
(152,98,0)
(102,5,0)
(166,191,0)
(135,124,0)
(17,169,0)
(163,85,0)
(149,59,0)
(191,16,0)
(172,145,0)
(37,74,0)
(179,140,0)
(30,169,0)
(151,149,0)
(29,85,1)
(114,147,1)
(129,22,1)
(13,16,1)
(85,133,1)
(181,148,1)
(85,69,1)
(160,50,1)
(26,138,1)
(100,115,1)
(149,132,1)
(86,38,1)
(28,106,1)
(100,75,1)
(126,184,1)
(77,58,1)
(187,106,1)
(115,32,1)
(178,17,1)
(75,115,1)
(30,69,1)
(98,132,1)
(85,93,1)
(182,134,1)
(47,49,1)
(76,85,1)
(78,5,1)
(128,36,1)
(38,145,1)
(96,180,1)
(48,31,1)
(168,100,1)
(182,176,1)
(169,26,1)
(123,132,1)
(39,131,1)
(102,185,1)
(62,121,1)
(140,179,1)
(27,70,1)
(29,76,1)
(28,87,1)
(37,108,1)
(34,154,1)
(149,151,1)
(121,169,1)
(191,69,1)
(172,16,1)
(61,175,1)
(146,34,1)
(74,2,1)
(52,14,1)
(15,77,1)
(83,161,1)
(17,169,1)
(21,119,1)
(44,185,1)
(70,83,1)
(111,131,1)
(89,74,1)
(178,30,1)
(156,81,1)
(113,47,1)
(162,64,1)
(80,102,1)
(165,92,1)
(119,71,1)
(141,135,1)
(164,96,1)
(154,113,1)
(157,181,1)
(188,133,1)
(159,74,1)
(17,69,1)
(91,98,1)
(137,45,1)
(93,188,1)
(158,39,1)
(38,114,1)
(177,164,1)
(122,91,1)
(11,186,1)
(21,22,1)
(22,126,1)
(72,136,1)
(184,162,1)
(145,157,1)
(60,29,1)
(59,88,1)
(131,128,1)
(147,145,1)
(81,66,1)
(163,27,1)
(165,145,1)
(67,46,1)
(89,159,1)
(133,63,1)
(8,12,1)
(53,10,1)
(88,149,1)
(36,175,1)
(180,28,1)
(186,132,1)
(87,160,1)
(11,98,1)
(102,44,1)
(182,111,1)
(170,141,1)
(15,180,1)
(132,89,1)
(72,146,1)
(5,80,1)
(152,123,1)
(64,69,1)
(15,105,1)
(92,178,1)
(135,62,1)
(16,191,1)
(182,60,1)
(30,82,1)
(2,37,1)
(56,9,1)
(105,168,1)
(186,122,1)
(110,61,1)
(20,15,1)
(89,145,1)
(134,77,1)
(42,101,1)
(31,59,1)
(173,24,1)
(182,150,1)
(18,72,1)
(24,57,1)
(151,19,1)
(113,65,1)
(66,47,1)
(133,8,1)
(36,110,1)
(55,166,1)
(19,11,1)
(40,139,1)
(17,130,1)
(45,67,1)
(108,56,1)
(34,42,1)
(115,165,1)
(139,140,1)
(49,68,1)
(127,191,1)
(82,182,1)
(176,184,1)
(150,11,1)
(138,177,1)
(136,146,1)
(54,172,1)
(148,54,1)
(107,165,1)
(32,135,1)
(165,135,1)
(175,170,1)
(58,48,1)
(30,169,1)
(168,106,1)
(166,29,1)
(50,156,1)
(9,38,1)
(46,158,1)
(12,163,1)
(34,153,1)
(141,134,1)
(71,129,1)
(101,154,1)
(189,21,1)
(32,107,1)
(10,137,1)
(155,78,1)
(69,53,1)
(68,187,1)
(179,189,1)
(106,173,1)
(98,152,1)
(32,145,1)
(130,30,1)
(161,155,1)
(184,69,1)
(182,13,1)
(182,86,1)
(191,55,1)
(185,52,1)
(131,36,1)
(157,69,1)
(14,40,1)
(16,127,1)
(65,20,1)
(154,113,2)
(128,134,2)
(165,135,2)
(44,184,2)
(16,191,2)
(16,29,2)
(75,115,2)
(69,131,2)
(11,186,2)
(93,184,2)
(17,169,2)
(85,69,2)
(113,47,2)
(88,11,2)
(29,184,2)
(139,184,2)
(14,184,2)
(98,38,2)
(157,69,2)
(132,89,2)
(162,131,2)
(19,11,2)
(131,36,2)
(122,98,2)
(85,133,2)
(155,184,2)
(2,38,2)
(48,11,2)
(127,29,2)
(32,145,2)
(91,98,2)
(36,175,2)
(106,173,2)
(67,131,2)
(10,131,2)
(133,63,2)
(89,145,2)
(102,185,2)
(61,134,2)
(85,184,2)
(39,131,2)
(130,30,2)
(58,11,2)
(150,11,2)
(180,28,2)
(11,98,2)
(55,29,2)
(147,16,2)
(77,58,2)
(78,184,2)
(98,132,2)
(107,165,2)
(32,135,2)
(56,38,2)
(28,106,2)
(9,38,2)
(175,134,2)
(145,16,2)
(134,11,2)
(30,169,2)
(108,38,2)
(158,131,2)
(137,131,2)
(189,184,2)
(89,74,2)
(163,184,2)
(114,16,2)
(146,34,2)
(50,156,2)
(54,16,2)
(40,184,2)
(145,157,2)
(161,184,2)
(52,184,2)
(157,16,2)
(46,131,2)
(191,69,2)
(32,165,2)
(188,184,2)
(85,93,2)
(110,134,2)
(86,38,2)
(21,119,2)
(30,69,2)
(184,131,2)
(5,184,2)
(151,11,2)
(36,134,2)
(37,38,2)
(179,184,2)
(72,146,2)
(69,53,2)
(133,8,2)
(53,131,2)
(191,29,2)
(166,29,2)
(132,38,2)
(140,184,2)
(168,106,2)
(165,145,2)
(111,131,2)
(21,22,2)
(34,154,2)
(27,184,2)
(34,153,2)
(129,184,2)
(83,184,2)
(172,16,2)
(74,38,2)
(186,98,2)
(76,184,2)
(102,184,2)
(60,29,2)
(59,11,2)
(13,16,2)
(22,184,2)
(12,184,2)
(71,184,2)
(123,38,2)
(119,184,2)
(170,134,2)
(159,38,2)
(47,49,2)
(31,11,2)
(89,38,2)
(148,16,2)
(77,11,2)
(15,180,2)
(141,134,2)
(152,38,2)
(27,70,2)
(17,69,2)
(38,16,2)
(131,134,2)
(8,184,2)
(15,77,2)
(29,85,2)
(186,132,2)
(133,184,2)
(181,16,2)
(45,131,2)
(149,132,2)
(176,184,2)
(185,184,2)
(11,38,2)
(21,184,2)
(149,11,2)
(38,145,2)
(70,184,2)
(17,30,2)
(64,131,2)
(80,184,2)
(36,110,2)
(184,69,2)
(126,184,2)
-----------------------------------
(0,wsaData)
(1,do)
(2,1)
(3,)
(4,listenSocket)
(5,service.sin_addr.s_addr = INADDR_ANY)
(6,shortData)
(7,recvResult)
(8,&service)
(9,recvResult)
(10,IPPROTO_TCP)
(11,recvResult == SOCKET_ERROR || recvResult == 0)
(12,service)
(13,break;)
(14,service)
(15,*dataPtr1 = data)
(16,listen(listenSocket, LISTEN_BACKLOG)
(17,CLOSE_SOCKET(listenSocket)
(18,RET)
(19,inputBuffer)
(20,data)
(21,memset(&service, 0, sizeof(service)
(22,&service)
(23,if (bind(listenSocket, (struct sockaddr*)
(24,data)
(25,)
(26,INVALID_SOCKET)
(27,service.sin_port = htons(TCP_PORT)
(28,*dataPtr1)
(29,bind(listenSocket, (struct sockaddr*)
(30,listenSocket != INVALID_SOCKET)
(31,data)
(32,CLOSE_SOCKET(acceptSocket)
(33,wsaDataInit)
(34,(short)
(35,if (acceptSocket != INVALID_SOCKET)
(36,WSAStartup(MAKEWORD(2,2)
(37,CHAR_ARRAY_SIZE)
(38,acceptSocket == SOCKET_ERROR)
(39,wsaDataInit)
(40,service.sin_family = AF_INET)
(41,)
(42,data)
(43,)
(44,s_addr)
(45,AF_INET)
(46,wsaDataInit = 1)
(47,*dataPtr2 = &data)
(48,inputBuffer)
(49,&data)
(50,data = -1)
(51,)
(52,sin_addr)
(53,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(54,listenSocket)
(55,LISTEN_BACKLOG)
(56,acceptSocket)
(57,dataPtr1)
(58,atoi(inputBuffer)
(59,inputBuffer[recvResult] = \'\\\\0\')
(60,break;)
(61,wsaData)
(62,INVALID_SOCKET)
(63,struct sockaddr*)
(64,listenSocket)
(65,dataPtr2)
(66,data)
(67,listenSocket)
(68,data)
(69,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(70,htons(TCP_PORT)
(71,service)
(72,printShortLine(shortData)
(73,)
(74,CHAR_ARRAY_SIZE - 1)
(75,WSACleanup()
(76,SOCKET_ERROR)
(77,data = atoi(inputBuffer)
(78,service)
(79,if (acceptSocket == SOCKET_ERROR)
(80,INADDR_ANY)
(81,1)
(82,INVALID_SOCKET)
(83,TCP_PORT)
(84,if (WSAStartup(MAKEWORD(2,2)
(85,bind(listenSocket, (struct sockaddr*)
(86,break;)
(87,dataPtr1)
(88,'\\\\0')
(89,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(90,inputBuffer)
(91,recvResult)
(92,INVALID_SOCKET)
(93,sizeof(service)
(94,acceptSocket)
(95,)
(96,wsaDataInit)
(97,)
(98,recvResult == SOCKET_ERROR)
(99,if (recvResult == SOCKET_ERROR || recvResult == 0)
(100,dataPtr1)
(101,shortData)
(102,service.sin_addr.s_addr)
(103,data)
(104,)
(105,data)
(106,*dataPtr1 = &data)
(107,acceptSocket)
(108,inputBuffer)
(109,service)
(110,&wsaData)
(111,break;)
(112,if (wsaDataInit)
(113,*dataPtr2)
(114,SOCKET_ERROR)
(115,wsaDataInit)
(116,if (listenSocket != INVALID_SOCKET)
(117,inputBuffer[recvResult] = '\\\\0')
(118,data)
(119,sizeof(service)
(120,)
(121,acceptSocket)
(122,0)
(123,recvResult)
(124,)
(125,\'\\\\0\')
(126,service)
(127,SOCKET_ERROR)
(128,NO_ERROR)
(129,0)
(130,listenSocket)
(131,WSAStartup(MAKEWORD(2,2)
(132,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(133,(struct sockaddr*)
(134,0)
(135,acceptSocket = INVALID_SOCKET)
(136,shortData)
(137,SOCK_STREAM)
(138,listenSocket)
(139,AF_INET)
(140,service.sin_family)
(141,2)
(142,)
(143,data)
(144,dataPtr2)
(145,acceptSocket = accept(listenSocket, NULL, NULL)
(146,shortData = (short)
(147,acceptSocket)
(148,NULL)
(149,inputBuffer[recvResult])
(150,break;)
(151,recvResult)
(152,SOCKET_ERROR)
(153,short)
(154,data = *dataPtr2)
(155,sin_port)
(156,-1)
(157,accept(listenSocket, NULL, NULL)
(158,1)
(159,0)
(160,data)
(161,service.sin_port)
(162,INVALID_SOCKET)
(163,listenSocket)
(164,0)
(165,acceptSocket != INVALID_SOCKET)
(166,listenSocket)
(167,dataPtr1)
(168,*dataPtr1)
(169,listenSocket = INVALID_SOCKET)
(170,2)
(171,if (listenSocket == INVALID_SOCKET)
(172,acceptSocket)
(173,&data)
(174,)
(175,MAKEWORD(2,2)
(176,break;)
(177,wsaDataInit = 0)
(178,acceptSocket)
(179,sin_family)
(180,data = *dataPtr1)
(181,NULL)
(182,listenSocket)
(183,if (listen(listenSocket, LISTEN_BACKLOG)
(184,listenSocket == INVALID_SOCKET)
(185,service.sin_addr)
(186,recvResult == 0)
(187,dataPtr2)
(188,service)
(189,service)
(190,)
(191,listen(listenSocket, LISTEN_BACKLOG)
(192,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^