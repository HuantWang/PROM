-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
67,68
67,69
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,48,50,53,55,57,59,63,65,66,68,69,74,76,77,78,82,83,88,90,92,94,99,101,102,106,108
-----computeFrom-----
12,13
12,14
67,68
67,69
71,72
71,73
75,76
75,77
80,81
80,82
96,97
96,98
-----guardedBy-----
82,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_strncpy_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_31_bad()
CWE194_Unexpected_Sign_Extension__fscanf_strncpy_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(38,42,0)
(18,38,0)
(28,23,0)
(13,14,0)
(2,38,0)
(27,25,0)
(17,38,0)
(19,8,0)
(36,13,0)
(44,46,0)
(23,53,0)
(14,13,0)
(48,8,0)
(42,16,0)
(39,33,0)
(19,38,0)
(41,16,0)
(38,16,0)
(22,8,0)
(23,25,0)
(40,46,0)
(25,51,0)
(8,51,0)
(4,8,0)
(50,17,0)
(45,19,0)
(3,29,0)
(13,51,0)
(49,14,0)
(10,51,0)
(30,42,0)
(19,12,0)
(47,38,0)
(34,16,0)
(1,47,0)
(16,29,0)
(0,13,0)
(31,53,0)
(11,12,0)
(7,17,0)
(33,46,0)
(43,14,0)
(48,51,0)
(20,51,0)
(6,39,0)
(53,23,0)
(32,39,0)
(9,48,0)
(42,46,0)
(15,47,0)
(37,33,0)
(47,8,0)
(54,42,0)
(39,29,0)
(52,47,0)
(46,29,0)
(47,35,0)
(21,19,0)
(33,39,0)
(12,35,0)
(24,51,0)
(51,16,0)
(26,53,0)
(45,47,1)
(52,17,1)
(2,18,1)
(8,4,1)
(28,13,1)
(22,38,1)
(54,39,1)
(50,25,1)
(40,44,1)
(39,33,1)
(19,8,1)
(27,23,1)
(36,0,1)
(7,50,1)
(9,12,1)
(47,38,1)
(53,26,1)
(47,8,1)
(31,28,1)
(42,46,1)
(17,7,1)
(23,53,1)
(1,52,1)
(6,32,1)
(25,27,1)
(5,48,1)
(18,42,1)
(11,19,1)
(33,37,1)
(49,43,1)
(4,22,1)
(32,46,1)
(48,8,1)
(30,54,1)
(47,15,1)
(14,49,1)
(38,2,1)
(37,6,1)
(12,11,1)
(9,17,1)
(46,40,1)
(13,14,1)
(38,42,1)
(15,1,1)
(26,31,1)
(43,36,1)
(33,46,1)
(0,8,1)
(17,38,1)
(21,45,1)
(19,21,1)
(48,9,1)
(19,38,1)
(42,30,1)
(19,38,2)
(19,17,2)
(11,17,2)
(47,38,2)
(47,17,2)
(23,53,2)
(21,17,2)
(42,46,2)
(48,8,2)
(19,8,2)
(17,38,2)
(39,33,2)
(45,17,2)
(15,17,2)
(52,17,2)
(47,8,2)
(38,42,2)
(33,46,2)
(13,14,2)
(12,17,2)
(1,17,2)
-----------------------------------
(0,source)
(1,source)
(2,dataCopy)
(3,data)
(4,"")
(5,RET)
(6,"%hd")
(7,100)
(8,dest[100] = "")
(9,dest)
(10,source)
(11,\\\'\\\\0\\\')
(12,dest[data] = \\\'\\\\0\\\')
(13,memset(source, \\\'A\\\', 100-1)
(14,100-1)
(15,data)
(16,)
(17,data < 100)
(18,data)
(19,dest[data])
(20,if (data < 100)
(21,data)
(22,dest)
(23,source[100-1])
(24,dest)
(25,source[100-1] = \\\'\\\\0\\\')
(26,1)
(27,\\\'\\\\0\\\')
(28,source)
(29,)
(30,data)
(31,100)
(32,stdin)
(33,&data)
(34,dataCopy)
(35,)
(36,\\\'A\\\')
(37,data)
(38,data = dataCopy)
(39,fscanf (stdin, "%hd", &data)
(40,0)
(41,data)
(42,dataCopy = data)
(43,100)
(44,data)
(45,dest)
(46,data = 0)
(47,strncpy(dest, source, data)
(48,printLine(dest)
(49,1)
(50,data)
(51,)
(52,dest)
(53,100-1)
(54,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^