-----label-----
1
-----code-----
static short badSource(short data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a value input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
53,55
54,55
54,56
54,57
54,58
54,59
54,60
54,61
54,62
54,63
54,64
54,65
54,66
54,67
54,68
54,69
55,56
56,57
56,58
57,58
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
81,82
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
141,143
142,143
142,144
143,144
143,145
143,146
144,145
146,147
148,149
150,151
152,153
154,155
155,156
155,157
156,157
158,159
158,160
158,161
158,162
159,160
161,162
163,164
165,166
167,168
167,169
168,169
168,170
169,170
171,172
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
179,184
180,181
182,183
184,185
186,187
186,188
187,188
191,192
191,193
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
199,200
202,203
204,205
205,206
205,207
206,207
206,208
207,208
209,210
212,213
213,214
213,215
214,215
216,217
216,218
217,218
219,220
221,222
221,223
221,224
222,223
222,224
223,224
223,225
224,225
226,227
228,229
228,230
229,230
231,232
233,234
234,235
235,236
235,237
236,237
238,239
240,241
241,242
242,243
242,244
243,244
245,246
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
259,260
261,262
261,263
262,263
262,264
263,264
265,266
267,268
268,269
269,270
269,271
270,271
272,273
274,275
275,276
-----nextToken-----
2,4,6,8,13,15,18,20,24,26,30,32,35,39,41,44,47,49,52,58,61,63,65,67,71,73,75,79,82,83,87,92,93,95,101,102,103,105,110,111,114,116,121,123,127,129,132,136,138,140,145,147,149,151,153,157,160,162,164,166,170,172,174,178,181,183,185,188,189,190,195,197,200,201,203,208,210,211,215,218,220,225,227,230,232,237,239,244,246,247,251,253,258,260,264,266,271,273,276
-----computeFrom-----
56,57
56,58
69,70
69,71
89,90
89,91
97,98
97,99
107,108
107,109
118,119
118,120
142,143
142,144
155,156
155,157
168,169
168,170
176,177
176,178
186,187
186,188
192,193
192,194
193,194
193,195
198,199
198,200
205,206
205,207
213,214
213,215
222,223
222,224
223,224
223,225
228,229
228,230
235,236
235,237
242,243
242,244
249,250
249,251
262,263
262,264
-----guardedBy-----
251,260
264,273
-----guardedByNegation-----
230,246
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(98,28,0)
(5,145,0)
(143,79,0)
(53,74,0)
(46,127,0)
(53,30,0)
(53,98,0)
(9,91,0)
(120,5,0)
(16,37,0)
(144,29,0)
(61,139,0)
(97,150,0)
(167,7,0)
(6,78,0)
(79,168,0)
(21,120,0)
(108,13,0)
(141,88,0)
(74,53,0)
(55,27,0)
(166,64,0)
(87,106,0)
(4,89,0)
(16,29,0)
(11,53,0)
(98,56,0)
(5,120,0)
(152,56,0)
(30,56,0)
(64,79,0)
(80,39,0)
(170,52,0)
(75,66,0)
(31,142,0)
(6,150,0)
(164,137,0)
(19,38,0)
(23,79,0)
(115,137,0)
(123,102,0)
(44,134,0)
(70,168,0)
(149,30,0)
(54,75,0)
(39,80,0)
(151,79,0)
(28,98,0)
(116,30,0)
(139,12,0)
(72,64,0)
(117,79,0)
(133,121,0)
(126,33,0)
(62,91,0)
(80,56,0)
(70,10,0)
(173,56,0)
(36,80,0)
(105,53,0)
(12,0,0)
(142,75,0)
(101,70,0)
(85,79,0)
(17,122,0)
(73,19,0)
(71,12,0)
(100,79,0)
(75,34,0)
(32,113,0)
(109,37,0)
(86,123,0)
(50,149,0)
(91,160,0)
(51,149,0)
(140,56,0)
(134,88,0)
(158,70,0)
(171,33,0)
(147,10,0)
(160,15,0)
(6,98,0)
(75,142,0)
(27,56,0)
(1,150,0)
(40,97,0)
(2,53,0)
(16,95,0)
(159,56,0)
(20,98,0)
(165,5,0)
(59,0,0)
(45,79,0)
(121,80,0)
(146,38,0)
(132,56,0)
(172,107,0)
(33,51,0)
(102,123,0)
(63,149,0)
(162,160,0)
(83,56,0)
(10,81,0)
(120,80,0)
(88,134,0)
(13,56,0)
(121,125,0)
(8,111,0)
(26,38,0)
(70,75,0)
(84,156,0)
(77,120,0)
(41,52,0)
(137,98,0)
(163,86,0)
(127,62,0)
(121,64,0)
(130,102,0)
(49,74,0)
(149,51,0)
(42,37,0)
(3,127,0)
(67,165,0)
(69,25,0)
(129,15,0)
(111,120,0)
(37,16,0)
(29,16,0)
(48,86,0)
(15,160,0)
(119,79,0)
(5,165,0)
(57,10,0)
(104,156,0)
(52,132,0)
(120,111,0)
(28,80,0)
(157,79,0)
(12,56,0)
(112,95,0)
(0,12,0)
(156,30,0)
(38,19,0)
(25,80,0)
(12,139,0)
(22,153,0)
(131,28,0)
(93,28,0)
(94,13,0)
(51,33,0)
(96,39,0)
(25,64,0)
(97,98,0)
(120,21,0)
(65,25,0)
(95,16,0)
(169,56,0)
(10,34,0)
(123,56,0)
(153,80,0)
(160,56,0)
(70,34,0)
(134,173,0)
(110,135,0)
(136,132,0)
(91,62,0)
(33,30,0)
(35,97,0)
(18,74,0)
(92,173,0)
(38,80,0)
(62,127,0)
(128,90,0)
(148,39,0)
(30,53,0)
(82,79,0)
(156,27,0)
(68,6,0)
(161,21,0)
(127,160,0)
(154,28,0)
(10,160,0)
(60,88,0)
(47,56,0)
(118,39,0)
(145,5,0)
(150,79,0)
(76,91,0)
(103,113,0)
(113,79,0)
(99,79,0)
(14,153,0)
(138,150,0)
(124,56,0)
(43,79,0)
(129,162,1)
(95,112,1)
(91,76,1)
(38,80,1)
(29,144,1)
(69,128,1)
(127,3,1)
(148,96,1)
(149,63,1)
(35,121,1)
(59,153,1)
(42,109,1)
(112,37,1)
(120,5,1)
(75,34,1)
(26,111,1)
(120,80,1)
(51,149,1)
(4,51,1)
(39,148,1)
(69,167,1)
(53,74,1)
(92,134,1)
(171,126,1)
(14,22,1)
(22,80,1)
(103,32,1)
(10,34,1)
(113,103,1)
(75,142,1)
(62,127,1)
(167,137,1)
(2,11,1)
(24,10,1)
(70,34,1)
(50,30,1)
(110,58,1)
(70,75,1)
(55,156,1)
(153,14,1)
(147,62,1)
(149,30,1)
(123,102,1)
(73,38,1)
(98,28,1)
(44,88,1)
(137,98,1)
(20,19,1)
(158,110,1)
(18,2,1)
(115,164,1)
(84,104,1)
(142,31,1)
(64,72,1)
(27,55,1)
(72,166,1)
(162,27,1)
(96,118,1)
(6,150,1)
(170,41,1)
(12,139,1)
(97,98,1)
(87,111,1)
(137,115,1)
(116,137,1)
(165,67,1)
(111,120,1)
(126,149,1)
(58,97,1)
(97,150,1)
(48,173,1)
(86,163,1)
(15,129,1)
(41,12,1)
(69,4,1)
(65,69,1)
(25,64,1)
(60,132,1)
(35,25,1)
(61,71,1)
(11,116,1)
(31,54,1)
(136,52,1)
(80,39,1)
(51,33,1)
(88,141,1)
(37,42,1)
(153,80,1)
(70,158,1)
(118,36,1)
(71,0,1)
(25,80,1)
(19,38,1)
(36,13,1)
(109,24,1)
(109,150,1)
(172,19,1)
(111,8,1)
(166,113,1)
(105,74,1)
(121,80,1)
(69,17,1)
(102,130,1)
(3,46,1)
(76,9,1)
(138,64,1)
(154,93,1)
(52,170,1)
(29,16,1)
(1,138,1)
(101,70,1)
(163,48,1)
(12,0,1)
(63,50,1)
(161,5,1)
(128,153,1)
(134,44,1)
(5,145,1)
(25,65,1)
(150,1,1)
(10,160,1)
(144,16,1)
(58,6,1)
(134,88,1)
(0,59,1)
(68,97,1)
(30,53,1)
(141,60,1)
(9,127,1)
(173,92,1)
(16,95,1)
(57,147,1)
(91,160,1)
(19,73,1)
(40,35,1)
(74,49,1)
(6,68,1)
(13,94,1)
(70,10,1)
(164,98,1)
(24,75,1)
(77,123,1)
(5,165,1)
(127,160,1)
(54,62,1)
(132,136,1)
(21,161,1)
(104,51,1)
(94,108,1)
(93,131,1)
(97,40,1)
(108,29,1)
(130,86,1)
(131,20,1)
(139,61,1)
(133,25,1)
(158,58,1)
(156,30,1)
(33,171,1)
(121,133,1)
(8,120,1)
(156,84,1)
(17,29,1)
(6,98,1)
(33,30,1)
(160,15,1)
(28,80,1)
(49,18,1)
(28,154,1)
(62,91,1)
(53,105,1)
(121,64,1)
(69,172,1)
(67,77,1)
(16,37,1)
(120,21,1)
(69,24,1)
(10,57,1)
(146,26,1)
(46,160,1)
(69,87,1)
(53,98,1)
(38,146,1)
(111,153,2)
(5,145,2)
(76,127,2)
(2,137,2)
(170,153,2)
(154,19,2)
(84,51,2)
(3,51,2)
(68,97,2)
(25,64,2)
(44,153,2)
(31,62,2)
(6,150,2)
(123,153,2)
(59,153,2)
(48,153,2)
(163,153,2)
(70,34,2)
(148,29,2)
(86,153,2)
(137,98,2)
(101,70,2)
(14,29,2)
(146,111,2)
(131,19,2)
(95,24,2)
(112,24,2)
(142,62,2)
(147,62,2)
(115,19,2)
(134,153,2)
(120,153,2)
(53,137,2)
(39,29,2)
(5,165,2)
(110,58,2)
(141,153,2)
(12,139,2)
(171,149,2)
(149,30,2)
(49,137,2)
(133,25,2)
(91,160,2)
(70,10,2)
(162,51,2)
(80,29,2)
(62,127,2)
(37,24,2)
(54,62,2)
(50,137,2)
(102,153,2)
(38,80,2)
(30,137,2)
(41,153,2)
(164,19,2)
(129,51,2)
(172,19,2)
(116,137,2)
(126,149,2)
(156,30,2)
(104,51,2)
(22,29,2)
(118,29,2)
(97,98,2)
(53,74,2)
(77,153,2)
(33,149,2)
(127,160,2)
(105,137,2)
(17,29,2)
(149,137,2)
(6,97,2)
(139,153,2)
(108,29,2)
(74,137,2)
(92,153,2)
(75,34,2)
(51,33,2)
(165,153,2)
(137,19,2)
(128,153,2)
(60,153,2)
(134,88,2)
(132,153,2)
(109,24,2)
(51,149,2)
(28,19,2)
(10,160,2)
(10,62,2)
(28,80,2)
(15,51,2)
(144,24,2)
(8,153,2)
(12,0,2)
(130,153,2)
(167,137,2)
(161,153,2)
(13,29,2)
(121,64,2)
(67,153,2)
(121,25,2)
(75,62,2)
(46,51,2)
(70,75,2)
(36,29,2)
(71,153,2)
(111,120,2)
(42,24,2)
(156,51,2)
(55,51,2)
(62,51,2)
(29,24,2)
(160,51,2)
(18,137,2)
(120,5,2)
(21,153,2)
(12,153,2)
(29,16,2)
(98,28,2)
(5,153,2)
(25,80,2)
(87,111,2)
(33,30,2)
(6,98,2)
(96,29,2)
(97,150,2)
(27,51,2)
(19,38,2)
(11,137,2)
(127,51,2)
(98,19,2)
(94,29,2)
(52,153,2)
(19,111,2)
(30,53,2)
(16,24,2)
(123,102,2)
(88,153,2)
(20,19,2)
(153,29,2)
(75,142,2)
(136,153,2)
(16,95,2)
(173,153,2)
(120,80,2)
(160,15,2)
(9,127,2)
(51,137,2)
(16,37,2)
(62,91,2)
(80,39,2)
(26,111,2)
(0,153,2)
(61,153,2)
(63,137,2)
(53,98,2)
(57,62,2)
(24,51,2)
(73,111,2)
(10,34,2)
(91,127,2)
(93,19,2)
(121,80,2)
(4,51,2)
(153,80,2)
(120,21,2)
(38,111,2)
-----------------------------------
(0,&service)
(1,INVALID_SOCKET)
(2,inputBuffer)
(3,SHRT_MAX)
(4,break;)
(5,(struct sockaddr*)
(6,CLOSE_SOCKET(acceptSocket)
(7,)
(8,SOCKET_ERROR)
(9,tempInt)
(10,data = tempInt)
(11,acceptSocket)
(12,memset(&service, 0, sizeof(service)
(13,wsaDataInit = 1)
(14,INVALID_SOCKET)
(15,atoi(inputBuffer)
(16,WSAStartup(MAKEWORD(2,2)
(17,break;)
(18,CHAR_ARRAY_SIZE)
(19,listen(listenSocket, LISTEN_BACKLOG)
(20,acceptSocket)
(21,sizeof(service)
(22,listenSocket)
(23,if (wsaDataInit)
(24,0)
(25,listenSocket != INVALID_SOCKET)
(26,listenSocket)
(27,inputBuffer[recvResult] = \'\\\\0\')
(28,accept(listenSocket, NULL, NULL)
(29,WSAStartup(MAKEWORD(2,2)
(30,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(31,1)
(32,wsaDataInit)
(33,recvResult == 0)
(34,short data)
(35,acceptSocket)
(36,listenSocket)
(37,MAKEWORD(2,2)
(38,listen(listenSocket, LISTEN_BACKLOG)
(39,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(40,INVALID_SOCKET)
(41,service)
(42,2)
(43,tempInt)
(44,s_addr)
(45,recvResult)
(46,tempInt)
(47,if (bind(listenSocket, (struct sockaddr*)
(48,service)
(49,1)
(50,recvResult)
(51,recvResult == SOCKET_ERROR || recvResult == 0)
(52,service.sin_family)
(53,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(54,data)
(55,\'\\\\0\')
(56,)
(57,tempInt)
(58,wsaDataInit)
(59,service)
(60,service)
(61,service)
(62,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(63,SOCKET_ERROR)
(64,listenSocket = INVALID_SOCKET)
(65,INVALID_SOCKET)
(66,)
(67,service)
(68,acceptSocket)
(69,listenSocket)
(70,return data;)
(71,0)
(72,INVALID_SOCKET)
(73,SOCKET_ERROR)
(74,CHAR_ARRAY_SIZE - 1)
(75,data = -1)
(76,SHRT_MIN)
(77,listenSocket)
(78,)
(79,)
(80,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(81,)
(82,wsaData)
(83,if (listenSocket == INVALID_SOCKET)
(84,recvResult)
(85,if (listenSocket != INVALID_SOCKET)
(86,service.sin_port)
(87,break;)
(88,service.sin_addr)
(89,)
(90,)
(91,tempInt < SHRT_MIN)
(92,INADDR_ANY)
(93,NULL)
(94,1)
(95,&wsaData)
(96,SOCK_STREAM)
(97,acceptSocket != INVALID_SOCKET)
(98,acceptSocket = accept(listenSocket, NULL, NULL)
(99,service)
(100,wsaDataInit)
(101,RET)
(102,htons(TCP_PORT)
(103,0)
(104,inputBuffer)
(105,0)
(106,)
(107,)
(108,wsaDataInit)
(109,2)
(110,WSACleanup()
(111,bind(listenSocket, (struct sockaddr*)
(112,wsaData)
(113,wsaDataInit = 0)
(114,'\\\\0')
(115,SOCKET_ERROR)
(116,recvResult)
(117,listenSocket)
(118,AF_INET)
(119,do)
(120,bind(listenSocket, (struct sockaddr*)
(121,CLOSE_SOCKET(listenSocket)
(122,)
(123,service.sin_port = htons(TCP_PORT)
(124,if (recvResult == SOCKET_ERROR || recvResult == 0)
(125,)
(126,recvResult)
(127,tempInt > SHRT_MAX)
(128,break;)
(129,inputBuffer)
(130,TCP_PORT)
(131,listenSocket)
(132,service.sin_family = AF_INET)
(133,listenSocket)
(134,service.sin_addr.s_addr)
(135,)
(136,AF_INET)
(137,acceptSocket == SOCKET_ERROR)
(138,acceptSocket)
(139,sizeof(service)
(140,if (WSAStartup(MAKEWORD(2,2)
(141,sin_addr)
(142,-1)
(143,if (acceptSocket != INVALID_SOCKET)
(144,NO_ERROR)
(145,struct sockaddr*)
(146,LISTEN_BACKLOG)
(147,data)
(148,IPPROTO_TCP)
(149,recvResult == SOCKET_ERROR)
(150,acceptSocket = INVALID_SOCKET)
(151,inputBuffer)
(152,if (listen(listenSocket, LISTEN_BACKLOG)
(153,listenSocket == INVALID_SOCKET)
(154,NULL)
(155,inputBuffer[recvResult] = '\\\\0')
(156,inputBuffer[recvResult])
(157,acceptSocket)
(158,data)
(159,if (acceptSocket == SOCKET_ERROR)
(160,tempInt = atoi(inputBuffer)
(161,service)
(162,tempInt)
(163,sin_port)
(164,acceptSocket)
(165,&service)
(166,listenSocket)
(167,break;)
(168,)
(169,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(170,sin_family)
(171,0)
(172,break;)
(173,service.sin_addr.s_addr = INADDR_ANY)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^