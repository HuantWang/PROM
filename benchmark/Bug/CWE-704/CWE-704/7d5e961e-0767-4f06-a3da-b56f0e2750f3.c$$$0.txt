-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
67,68
67,69
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,48,50,53,55,57,59,63,65,66,68,69,74,76,77,78,82,83,88,90,92,94,99,101,102,106,108
-----computeFrom-----
12,13
12,14
67,68
67,69
71,72
71,73
75,76
75,77
80,81
80,82
96,97
96,98
-----guardedBy-----
82,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_31_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,43,0)
(18,3,0)
(31,12,0)
(41,12,0)
(12,0,0)
(21,49,0)
(0,19,0)
(2,34,0)
(41,49,0)
(42,44,0)
(1,0,0)
(20,28,0)
(10,30,0)
(32,0,0)
(53,17,0)
(53,34,0)
(17,53,0)
(38,51,0)
(45,12,0)
(36,21,0)
(16,20,0)
(25,30,0)
(33,40,0)
(27,28,0)
(4,21,0)
(1,34,0)
(20,49,0)
(14,40,0)
(5,49,0)
(6,20,0)
(7,12,0)
(26,34,0)
(17,19,0)
(35,3,0)
(37,44,0)
(29,19,0)
(23,21,0)
(15,41,0)
(39,51,0)
(30,38,0)
(52,1,0)
(49,12,0)
(40,1,0)
(38,30,0)
(40,0,0)
(8,17,0)
(21,13,0)
(43,44,0)
(24,17,0)
(46,0,0)
(22,49,0)
(20,40,0)
(44,12,0)
(11,43,0)
(47,1,0)
(28,13,0)
(21,40,0)
(51,12,0)
(44,43,0)
(54,38,0)
(48,53,0)
(3,40,0)
(34,19,0)
(9,42,1)
(40,14,1)
(17,53,1)
(20,16,1)
(35,18,1)
(36,4,1)
(6,21,1)
(21,40,1)
(1,52,1)
(41,49,1)
(3,40,1)
(5,40,1)
(33,1,1)
(48,8,1)
(34,2,1)
(50,41,1)
(3,35,1)
(39,38,1)
(38,30,1)
(8,24,1)
(21,36,1)
(27,20,1)
(1,34,1)
(30,25,1)
(49,22,1)
(54,44,1)
(20,40,1)
(28,27,1)
(2,26,1)
(43,11,1)
(24,34,1)
(18,51,1)
(23,3,1)
(16,6,1)
(40,1,1)
(47,17,1)
(15,28,1)
(14,33,1)
(44,43,1)
(22,5,1)
(25,10,1)
(37,49,1)
(10,54,1)
(21,49,1)
(51,39,1)
(52,47,1)
(20,49,1)
(53,34,1)
(11,9,1)
(4,23,1)
(53,48,1)
(41,15,1)
(42,37,1)
(15,3,1)
(20,3,2)
(21,40,2)
(1,34,2)
(20,40,2)
(17,53,2)
(38,30,2)
(44,43,2)
(28,3,2)
(21,49,2)
(41,49,2)
(36,3,2)
(6,3,2)
(3,40,2)
(20,49,2)
(53,34,2)
(27,3,2)
(40,1,2)
(16,3,2)
(4,3,2)
(23,3,2)
(21,3,2)
-----------------------------------
(0,)
(1,dataCopy = data)
(2,0)
(3,data < 100)
(4,source)
(5,dest)
(6,dest)
(7,if (data < 100)
(8,"%hd")
(9,100)
(10,100)
(11,1)
(12,)
(13,)
(14,dataCopy)
(15,dest)
(16,data)
(17,fscanf (stdin, "%hd", &data)
(18,data)
(19,)
(20,dest[data])
(21,memmove(dest, source, data)
(22,"")
(23,dest)
(24,stdin)
(25,1)
(26,data)
(27,\\\'\\\\0\\\')
(28,dest[data] = \\\'\\\\0\\\')
(29,data)
(30,100-1)
(31,dest)
(32,dataCopy)
(33,data)
(34,data = 0)
(35,100)
(36,data)
(37,source)
(38,source[100-1])
(39,\\\'\\\\0\\\')
(40,data = dataCopy)
(41,printLine(dest)
(42,\\\'A\\\')
(43,100-1)
(44,memset(source, \\\'A\\\', 100-1)
(45,source)
(46,data)
(47,dataCopy)
(48,data)
(49,dest[100] = "")
(50,RET)
(51,source[100-1] = \\\'\\\\0\\\')
(52,data)
(53,&data)
(54,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^