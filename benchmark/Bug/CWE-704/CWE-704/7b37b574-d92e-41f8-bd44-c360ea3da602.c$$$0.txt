-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_21_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    badStatic = 1; /* true */
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_21_bad(){    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_21_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_21_bad
{    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,1,0)
(21,0,0)
(16,38,0)
(49,29,0)
(51,14,0)
(1,20,0)
(33,13,0)
(11,14,0)
(21,40,0)
(52,44,0)
(2,6,0)
(54,9,0)
(36,0,0)
(50,9,0)
(20,0,0)
(40,21,0)
(7,50,0)
(22,37,0)
(9,40,0)
(44,0,0)
(16,32,0)
(12,54,0)
(13,9,0)
(40,27,0)
(1,37,0)
(8,0,0)
(41,17,0)
(50,37,0)
(5,38,0)
(38,16,0)
(15,37,0)
(17,29,0)
(46,20,0)
(6,9,0)
(24,44,0)
(23,43,0)
(4,11,0)
(44,54,0)
(19,13,0)
(3,20,0)
(9,37,0)
(29,17,0)
(54,44,0)
(40,9,0)
(45,37,0)
(26,14,0)
(39,43,0)
(28,36,0)
(0,36,0)
(48,21,0)
(0,14,0)
(42,9,0)
(36,29,0)
(29,14,0)
(6,37,0)
(43,0,0)
(54,15,0)
(10,1,0)
(27,40,0)
(18,15,0)
(31,1,0)
(53,11,0)
(1,9,0)
(43,0,1)
(47,6,1)
(41,49,1)
(40,21,1)
(15,18,1)
(17,41,1)
(2,50,1)
(31,13,1)
(18,54,1)
(39,23,1)
(42,43,1)
(11,53,1)
(31,16,1)
(16,38,1)
(29,17,1)
(20,0,1)
(47,43,1)
(23,0,1)
(9,40,1)
(10,31,1)
(52,24,1)
(6,2,1)
(4,29,1)
(50,7,1)
(21,48,1)
(36,29,1)
(54,9,1)
(46,10,1)
(1,20,1)
(5,13,1)
(43,39,1)
(21,0,1)
(38,5,1)
(1,9,1)
(44,0,1)
(28,8,1)
(40,27,1)
(50,9,1)
(54,44,1)
(12,1,1)
(20,3,1)
(7,15,1)
(36,28,1)
(44,52,1)
(48,42,1)
(13,33,1)
(13,9,1)
(33,19,1)
(8,11,1)
(24,12,1)
(19,9,1)
(0,36,1)
(53,4,1)
(3,46,1)
(6,9,1)
(29,17,2)
(19,43,2)
(40,43,2)
(21,0,2)
(5,13,2)
(18,43,2)
(36,29,2)
(13,43,2)
(15,43,2)
(40,27,2)
(21,43,2)
(50,9,2)
(16,13,2)
(48,43,2)
(54,9,2)
(31,43,2)
(0,36,2)
(38,13,2)
(3,43,2)
(10,43,2)
(1,20,2)
(44,43,2)
(54,43,2)
(24,43,2)
(52,43,2)
(16,38,2)
(42,43,2)
(33,43,2)
(50,43,2)
(1,9,2)
(46,43,2)
(20,0,2)
(54,44,2)
(6,9,2)
(20,43,2)
(6,43,2)
(44,0,2)
(1,43,2)
(9,43,2)
(13,9,2)
(40,21,2)
(12,43,2)
(9,40,2)
(7,43,2)
(43,0,2)
(2,43,2)
-----------------------------------
(0,data = badSource(data)
(1,memset(dataBuffer, \'A\', data-1)
(2,dataBuffer)
(3,1)
(4,badStatic)
(5,1)
(6,free(dataBuffer)
(7,dataBuffer)
(8,data)
(9,* dataBuffer = (char *)
(10,\'A\')
(11,badStatic = 1)
(12,dataBuffer)
(13,dataBuffer == NULL)
(14,)
(15,dataBuffer[data-1] = \'\\\\0\')
(16,exit(-1)
(17,-1)
(18,'\\\\0')
(19,dataBuffer)
(20,data-1)
(21,malloc(data)
(22,dataBuffer)
(23,data)
(24,data)
(25,dataBuffer[data-1] = '\\\\0')
(26,data)
(27,char *)
(28,data)
(29,data = -1)
(30,\'\\\\0\')
(31,dataBuffer)
(32,)
(33,NULL)
(34,memset(dataBuffer, 'A', data-1)
(35,'A')
(36,badSource(data)
(37,)
(38,-1)
(39,100)
(40,(char *)
(41,1)
(42,dataBuffer)
(43,data < 100)
(44,data-1)
(45,if (dataBuffer == NULL)
(46,data)
(47,RET)
(48,data)
(49,data)
(50,printLine(dataBuffer)
(51,if (data < 100)
(52,1)
(53,1)
(54,dataBuffer[data-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^