-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_04_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,39,0)
(44,39,0)
(11,2,0)
(26,15,0)
(12,3,0)
(26,23,0)
(16,3,0)
(20,35,0)
(35,17,0)
(36,17,0)
(23,26,0)
(41,16,0)
(3,1,0)
(8,0,0)
(42,44,0)
(33,16,0)
(41,3,0)
(15,3,0)
(40,35,0)
(17,1,0)
(9,38,0)
(35,31,0)
(10,35,0)
(19,23,0)
(32,2,0)
(35,39,0)
(30,23,0)
(25,4,0)
(4,0,0)
(28,26,0)
(46,4,0)
(0,3,0)
(39,44,0)
(34,1,0)
(14,21,0)
(38,39,0)
(7,3,0)
(44,27,0)
(39,29,0)
(13,17,0)
(37,16,0)
(38,17,0)
(21,31,0)
(27,44,0)
(47,3,0)
(22,15,0)
(44,42,0)
(38,16,0)
(35,16,0)
(6,0,0)
(48,1,0)
(2,39,0)
(0,4,0)
(18,38,0)
(38,21,0)
(2,17,0)
(43,41,0)
(2,11,1)
(6,16,1)
(38,17,1)
(43,21,1)
(44,27,1)
(33,24,1)
(24,17,1)
(21,14,1)
(16,37,1)
(10,40,1)
(45,41,1)
(28,0,1)
(27,5,1)
(5,24,1)
(43,2,1)
(11,32,1)
(38,9,1)
(41,43,1)
(32,15,1)
(38,16,1)
(17,13,1)
(22,26,1)
(19,28,1)
(2,17,1)
(20,10,1)
(9,18,1)
(35,17,1)
(38,39,1)
(15,22,1)
(18,35,1)
(26,23,1)
(46,8,1)
(4,25,1)
(23,30,1)
(35,39,1)
(41,16,1)
(14,38,1)
(44,42,1)
(13,36,1)
(2,39,1)
(0,4,1)
(33,39,1)
(8,6,1)
(37,33,1)
(30,19,1)
(39,44,1)
(35,16,1)
(35,20,1)
(40,2,1)
(25,46,1)
(21,2,2)
(2,17,2)
(39,44,2)
(27,24,2)
(14,2,2)
(38,16,2)
(9,2,2)
(40,2,2)
(44,27,2)
(41,16,2)
(38,2,2)
(39,24,2)
(35,16,2)
(35,17,2)
(2,39,2)
(10,2,2)
(38,17,2)
(38,39,2)
(44,24,2)
(35,39,2)
(20,2,2)
(18,2,2)
(0,4,2)
(44,42,2)
(26,23,2)
(35,2,2)
(5,24,2)
-----------------------------------
(0,memset(source, \\\'A\\\', 100-1)
(1,)
(2,data < 100)
(3,)
(4,100-1)
(5,data)
(6,source)
(7,dest)
(8,\\\'A\\\')
(9,data)
(10,source)
(11,100)
(12,if (data < 100)
(13,0)
(14,\\\'\\\\0\\\')
(15,source[100-1] = \\\'\\\\0\\\')
(16,dest[100] = "")
(17,data = 0)
(18,dest)
(19,100)
(20,data)
(21,dest[data] = \\\'\\\\0\\\')
(22,\\\'\\\\0\\\')
(23,100-1)
(24,STATIC_CONST_TRUE)
(25,1)
(26,source[100-1])
(27,RAND32()
(28,source)
(29,)
(30,1)
(31,)
(32,data)
(33,dest)
(34,if(STATIC_CONST_TRUE)
(35,memcpy(dest, source, data)
(36,data)
(37,"")
(38,dest[data])
(39,data = (short)
(40,dest)
(41,printLine(dest)
(42,short)
(43,dest)
(44,(short)
(45,RET)
(46,100)
(47,source)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^