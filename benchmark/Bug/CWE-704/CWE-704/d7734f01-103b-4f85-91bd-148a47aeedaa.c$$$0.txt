-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_03_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* FLAW: Use a negative number */        data = -1;    }
5==5
5
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,32,0)
(8,6,0)
(12,29,0)
(0,54,0)
(20,54,0)
(36,1,0)
(37,12,0)
(28,47,0)
(53,32,0)
(26,47,0)
(45,19,0)
(41,19,0)
(54,20,0)
(10,20,0)
(54,29,0)
(28,29,0)
(14,2,0)
(46,54,0)
(13,28,0)
(20,2,0)
(12,47,0)
(49,25,0)
(9,2,0)
(5,29,0)
(40,2,0)
(50,39,0)
(21,19,0)
(15,29,0)
(48,14,0)
(2,9,0)
(25,50,0)
(16,47,0)
(23,19,0)
(47,6,0)
(4,6,0)
(32,40,0)
(29,51,0)
(32,29,0)
(7,40,0)
(29,5,0)
(45,2,0)
(43,2,0)
(55,1,0)
(24,6,0)
(11,21,0)
(30,12,0)
(2,19,0)
(34,19,0)
(9,28,0)
(54,47,0)
(17,9,0)
(40,32,0)
(38,41,0)
(28,9,0)
(3,20,0)
(50,25,0)
(52,5,0)
(9,17,0)
(32,47,0)
(33,45,0)
(42,14,0)
(40,21,0)
(41,2,0)
(20,19,0)
(54,46,1)
(44,7,1)
(12,47,1)
(10,14,1)
(40,32,1)
(54,29,1)
(28,47,1)
(14,42,1)
(36,55,1)
(32,29,1)
(3,10,1)
(9,17,1)
(10,50,1)
(11,40,1)
(9,28,1)
(41,38,1)
(28,29,1)
(1,36,1)
(5,52,1)
(46,0,1)
(30,37,1)
(52,15,1)
(15,1,1)
(13,43,1)
(54,47,1)
(45,2,1)
(55,47,1)
(48,2,1)
(37,29,1)
(18,41,1)
(7,20,1)
(29,5,1)
(20,54,1)
(32,47,1)
(28,13,1)
(42,48,1)
(25,49,1)
(33,21,1)
(43,12,1)
(45,33,1)
(32,53,1)
(18,12,1)
(12,29,1)
(40,2,1)
(50,25,1)
(2,9,1)
(21,11,1)
(53,44,1)
(38,45,1)
(47,16,1)
(20,2,1)
(0,3,1)
(41,2,1)
(12,30,1)
(49,14,1)
(16,26,1)
(14,2,1)
(37,1,1)
(50,14,2)
(11,12,2)
(20,2,2)
(9,12,2)
(29,5,2)
(20,12,2)
(20,54,2)
(42,12,2)
(29,1,2)
(2,12,2)
(21,12,2)
(5,1,2)
(13,12,2)
(32,12,2)
(52,1,2)
(33,12,2)
(53,12,2)
(46,12,2)
(28,29,2)
(28,47,2)
(45,12,2)
(43,12,2)
(41,12,2)
(41,2,2)
(32,47,2)
(54,12,2)
(3,12,2)
(40,32,2)
(7,12,2)
(44,12,2)
(25,14,2)
(10,12,2)
(9,17,2)
(0,12,2)
(2,9,2)
(45,2,2)
(28,12,2)
(50,25,2)
(14,2,2)
(48,12,2)
(54,29,2)
(14,12,2)
(9,28,2)
(38,12,2)
(12,47,2)
(40,2,2)
(32,29,2)
(15,1,2)
(49,14,2)
(12,29,2)
(54,47,2)
(40,12,2)
-----------------------------------
(0,data)
(1,5==5)
(2,* dataBuffer = (char *)
(3,'A')
(4,data)
(5,-1)
(6,)
(7,dataBuffer)
(8,if(5==5)
(9,(char *)
(10,dataBuffer)
(11,\'\\\\0\')
(12,data < 100)
(13,data)
(14,dataBuffer == NULL)
(15,data)
(16,0)
(17,char *)
(18,RET)
(19,)
(20,memset(dataBuffer, \'A\', data-1)
(21,dataBuffer[data-1] = \'\\\\0\')
(22,\'A\')
(23,if (dataBuffer == NULL)
(24,if (data < 100)
(25,-1)
(26,data)
(27,'\\\\0')
(28,malloc(data)
(29,data = -1)
(30,100)
(31,memset(dataBuffer, 'A', data-1)
(32,data-1)
(33,dataBuffer)
(34,dataBuffer)
(35,dataBuffer[data-1] = '\\\\0')
(36,5)
(37,data)
(38,dataBuffer)
(39,)
(40,dataBuffer[data-1])
(41,free(dataBuffer)
(42,NULL)
(43,dataBuffer)
(44,data)
(45,printLine(dataBuffer)
(46,1)
(47,data = 0)
(48,dataBuffer)
(49,1)
(50,exit(-1)
(51,)
(52,1)
(53,1)
(54,data-1)
(55,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^