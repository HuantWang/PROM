-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
46,47
48,49
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
59,60
59,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,34,37,39,41,43,47,49,50,52,53,58,60,61,62,66,67,72,74,76,78,83,85,86,90,92
-----computeFrom-----
12,13
12,14
51,52
51,53
55,56
55,57
59,60
59,61
64,65
64,66
80,81
80,82
-----guardedBy-----
66,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_01_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_01_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,20,0)
(34,26,0)
(42,12,0)
(30,45,0)
(29,7,0)
(12,14,0)
(37,9,0)
(46,4,0)
(11,3,0)
(26,3,0)
(0,14,0)
(17,44,0)
(35,20,0)
(2,18,0)
(44,22,0)
(36,22,0)
(5,35,0)
(44,1,0)
(27,3,0)
(45,7,0)
(23,12,0)
(38,7,0)
(14,20,0)
(14,12,0)
(29,3,0)
(31,14,0)
(35,3,0)
(1,44,0)
(29,18,0)
(6,29,0)
(26,40,0)
(8,37,0)
(24,20,0)
(4,37,0)
(25,26,0)
(33,9,0)
(7,22,0)
(20,22,0)
(13,26,0)
(28,38,0)
(18,40,0)
(41,20,0)
(32,1,0)
(16,20,0)
(7,45,0)
(1,7,0)
(39,4,0)
(19,44,0)
(3,20,0)
(15,38,0)
(26,7,0)
(37,4,0)
(10,7,0)
(43,29,0)
(23,0,1)
(8,14,1)
(35,3,1)
(43,26,1)
(18,2,1)
(29,6,1)
(9,33,1)
(14,12,1)
(5,38,1)
(42,23,1)
(26,3,1)
(6,43,1)
(0,31,1)
(3,11,1)
(37,4,1)
(5,18,1)
(21,35,1)
(4,46,1)
(45,30,1)
(29,7,1)
(30,10,1)
(12,42,1)
(33,37,1)
(13,34,1)
(34,25,1)
(31,3,1)
(19,17,1)
(28,15,1)
(29,3,1)
(15,9,1)
(26,7,1)
(1,32,1)
(27,44,1)
(7,45,1)
(38,28,1)
(46,39,1)
(44,1,1)
(38,7,1)
(35,5,1)
(2,29,1)
(1,7,1)
(11,27,1)
(32,19,1)
(17,7,1)
(39,8,1)
(25,38,1)
(26,13,1)
(13,38,2)
(26,3,2)
(35,3,2)
(26,7,2)
(2,38,2)
(43,38,2)
(7,45,2)
(29,7,2)
(1,7,2)
(6,38,2)
(38,7,2)
(37,4,2)
(29,3,2)
(44,1,2)
(25,38,2)
(26,38,2)
(29,38,2)
(34,38,2)
(14,12,2)
(18,38,2)
-----------------------------------
(0,\\\'A\\\')
(1,&data)
(2,\\\'\\\\0\\\')
(3,dest[100] = "")
(4,100-1)
(5,dest)
(6,data)
(7,data = -1)
(8,source)
(9,source[100-1] = \\\'\\\\0\\\')
(10,data)
(11,"")
(12,100-1)
(13,data)
(14,memset(source, \\\'A\\\', 100-1)
(15,data)
(16,source)
(17,stdin)
(18,dest[data] = \\\'\\\\0\\\')
(19,"%d")
(20,)
(21,RET)
(22,)
(23,100)
(24,dest)
(25,dest)
(26,memmove(dest, source, data)
(27,dest)
(28,100)
(29,dest[data])
(30,1)
(31,source)
(32,data)
(33,\\\'\\\\0\\\')
(34,source)
(35,printLine(dest)
(36,data)
(37,source[100-1])
(38,data < 100)
(39,100)
(40,)
(41,if (data < 100)
(42,1)
(43,dest)
(44,fscanf(stdin, "%d", &data)
(45,-1)
(46,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^