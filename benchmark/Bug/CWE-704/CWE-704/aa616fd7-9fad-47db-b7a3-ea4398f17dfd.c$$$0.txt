-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
68,70
69,70
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
90,92
90,93
90,94
90,95
90,96
91,92
92,93
92,94
94,95
94,96
94,97
97,98
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
106,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
137,138
137,139
138,139
142,143
143,144
143,145
144,145
146,147
148,149
149,150
149,151
150,151
152,153
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,70,71,73,77,79,83,84,88,89,93,95,96,100,102,105,107,111,113,118,120,124,126,127,130,131,136,139,140,141,145,147,151,153
-----computeFrom-----
18,19
18,20
34,35
34,36
48,49
48,50
67,68
67,69
86,87
86,88
109,110
109,111
128,129
128,130
133,134
133,135
137,138
137,139
-----guardedBy-----
39,59
88,139
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType
CWE194_Unexpected_Sign_Extension__fgets_malloc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(40,46,0)
(11,3,0)
(32,7,0)
(33,53,0)
(7,32,0)
(22,46,0)
(29,44,0)
(55,38,0)
(1,46,0)
(53,19,0)
(35,68,0)
(9,53,0)
(42,33,0)
(49,15,0)
(66,67,0)
(16,41,0)
(54,55,0)
(52,40,0)
(31,24,0)
(47,66,0)
(10,55,0)
(56,17,0)
(76,47,0)
(5,66,0)
(18,4,0)
(18,40,0)
(62,51,0)
(39,53,0)
(32,43,0)
(58,38,0)
(33,19,0)
(59,43,0)
(29,18,0)
(10,38,0)
(26,28,0)
(69,17,0)
(74,19,0)
(4,18,0)
(60,37,0)
(47,16,0)
(13,38,0)
(66,6,0)
(25,66,0)
(27,24,0)
(14,32,0)
(18,29,0)
(43,38,0)
(16,55,0)
(3,66,0)
(20,56,0)
(24,33,0)
(51,19,0)
(6,19,0)
(64,7,0)
(63,56,0)
(65,70,0)
(32,55,0)
(56,46,0)
(8,38,0)
(73,5,0)
(41,16,0)
(21,19,0)
(15,55,0)
(75,6,0)
(57,3,0)
(72,67,0)
(33,29,0)
(0,10,0)
(48,29,0)
(67,66,0)
(2,5,0)
(45,15,0)
(70,55,0)
(77,51,0)
(46,51,0)
(71,7,0)
(68,26,0)
(17,56,0)
(7,66,0)
(40,18,0)
(70,38,0)
(16,47,0)
(36,67,0)
(61,56,0)
(50,58,0)
(55,16,0)
(58,55,0)
(26,68,0)
(3,70,0)
(70,3,0)
(23,70,0)
(12,6,0)
(30,60,0)
(23,15,1)
(70,3,1)
(15,45,1)
(9,39,1)
(73,66,1)
(52,48,1)
(26,68,1)
(22,1,1)
(53,9,1)
(27,31,1)
(56,63,1)
(64,71,1)
(24,27,1)
(76,54,1)
(32,55,1)
(34,5,1)
(29,18,1)
(3,57,1)
(18,40,1)
(31,29,1)
(43,59,1)
(17,69,1)
(30,17,1)
(71,14,1)
(70,55,1)
(72,25,1)
(7,64,1)
(48,17,1)
(33,42,1)
(67,36,1)
(47,76,1)
(10,0,1)
(35,15,1)
(14,70,1)
(69,56,1)
(11,65,1)
(5,2,1)
(33,53,1)
(18,4,1)
(60,30,1)
(58,50,1)
(66,67,1)
(42,24,1)
(15,55,1)
(61,46,1)
(17,56,1)
(56,46,1)
(46,22,1)
(55,16,1)
(3,66,1)
(68,35,1)
(1,53,1)
(25,33,1)
(7,66,1)
(40,52,1)
(5,66,1)
(40,46,1)
(36,72,1)
(0,43,1)
(31,60,1)
(65,23,1)
(63,20,1)
(16,47,1)
(49,55,1)
(10,55,1)
(2,73,1)
(47,66,1)
(58,55,1)
(16,41,1)
(54,5,1)
(59,32,1)
(20,61,1)
(32,7,1)
(57,11,1)
(50,10,1)
(45,49,1)
(34,58,1)
(33,29,1)
(23,26,1)
(52,17,2)
(0,5,2)
(29,17,2)
(68,15,2)
(5,66,2)
(18,17,2)
(32,55,2)
(70,55,2)
(47,66,2)
(30,17,2)
(60,17,2)
(64,5,2)
(15,5,2)
(10,5,2)
(26,15,2)
(18,4,2)
(33,29,2)
(49,5,2)
(50,5,2)
(7,66,2)
(66,67,2)
(16,47,2)
(17,56,2)
(71,5,2)
(7,5,2)
(43,5,2)
(76,5,2)
(3,5,2)
(33,53,2)
(26,68,2)
(70,3,2)
(59,5,2)
(70,5,2)
(32,5,2)
(65,5,2)
(11,5,2)
(40,17,2)
(54,5,2)
(10,55,2)
(57,5,2)
(16,41,2)
(45,5,2)
(15,55,2)
(35,15,2)
(32,7,2)
(16,5,2)
(55,16,2)
(23,5,2)
(14,5,2)
(48,17,2)
(58,55,2)
(3,66,2)
(56,46,2)
(58,5,2)
(40,46,2)
(55,5,2)
(18,40,2)
(47,5,2)
(29,18,2)
-----------------------------------
(0,dataBuffer)
(1,inputBuffer)
(2,100)
(3,data-1)
(4,short)
(5,data < 100)
(6,)
(7,data-1)
(8,if (dataBuffer == NULL)
(9,0)
(10,printLine(dataBuffer)
(11,data)
(12,data)
(13,dataBuffer)
(14,dataBuffer)
(15,dataBuffer == NULL)
(16,(char *)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,(short)
(19,)
(20,CHAR_ARRAY_SIZE)
(21,myUnion)
(22,"")
(23,dataBuffer)
(24,myUnion.unionFirst)
(25,data)
(26,exit(-1)
(27,unionFirst)
(28,)
(29,data = (short)
(30,"fgets()
(31,myUnion)
(32,dataBuffer[data-1])
(33,myUnion.unionFirst = data)
(34,RET)
(35,1)
(36,unionSecond)
(37,)
(38,)
(39,data)
(40,atoi(inputBuffer)
(41,char *)
(42,data)
(43,dataBuffer[data-1] = \\\'\\\\0\\\')
(44,)
(45,NULL)
(46,inputBuffer[CHAR_ARRAY_SIZE] = "")
(47,malloc(data)
(48,data)
(49,dataBuffer)
(50,dataBuffer)
(51,)
(52,inputBuffer)
(53,data = 0)
(54,dataBuffer)
(55,* dataBuffer = (char *)
(56,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(57,1)
(58,free(dataBuffer)
(59,\\\'\\\\0\\\')
(60,printLine("fgets()
(61,inputBuffer)
(62,inputBuffer)
(63,stdin)
(64,1)
(65,\\\'A\\\')
(66,data = myUnion.unionSecond)
(67,myUnion.unionSecond)
(68,-1)
(69,NULL)
(70,memset(dataBuffer, \\\'A\\\', data-1)
(71,data)
(72,myUnion)
(73,data)
(74,data)
(75,if (data < 100)
(76,data)
(77,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^