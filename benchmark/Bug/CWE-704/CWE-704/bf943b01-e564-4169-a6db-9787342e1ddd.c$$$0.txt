-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_10_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
globalTrue
globalTrue
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(50,19,0)
(30,48,0)
(1,16,0)
(20,19,0)
(8,31,0)
(40,31,0)
(31,8,0)
(31,17,0)
(32,46,0)
(49,36,0)
(40,19,0)
(15,13,0)
(24,36,0)
(46,17,0)
(48,29,0)
(37,28,0)
(43,17,0)
(10,18,0)
(9,50,0)
(4,16,0)
(14,26,0)
(28,17,0)
(34,15,0)
(2,7,0)
(17,29,0)
(42,7,0)
(6,15,0)
(27,0,0)
(49,48,0)
(23,49,0)
(12,44,0)
(3,18,0)
(11,16,0)
(0,17,0)
(38,29,0)
(26,19,0)
(7,19,0)
(18,3,0)
(5,44,0)
(50,44,0)
(44,29,0)
(26,15,0)
(46,29,0)
(36,19,0)
(15,26,0)
(44,17,0)
(3,33,0)
(21,29,0)
(17,31,0)
(49,17,0)
(41,19,0)
(28,29,0)
(35,0,0)
(36,49,0)
(22,50,0)
(39,36,0)
(19,16,0)
(31,40,0)
(47,40,0)
(44,50,0)
(30,49,1)
(46,32,1)
(40,47,1)
(37,46,1)
(32,48,1)
(27,17,1)
(19,20,1)
(0,35,1)
(9,5,1)
(45,28,1)
(12,0,1)
(23,44,1)
(43,7,1)
(0,17,1)
(42,25,1)
(49,17,1)
(35,27,1)
(5,12,1)
(7,19,1)
(14,6,1)
(36,24,1)
(49,36,1)
(47,43,1)
(17,31,1)
(31,40,1)
(50,22,1)
(45,7,1)
(3,18,1)
(40,19,1)
(44,50,1)
(28,17,1)
(22,9,1)
(36,19,1)
(26,19,1)
(20,41,1)
(10,0,1)
(46,17,1)
(18,10,1)
(2,42,1)
(50,19,1)
(42,15,1)
(48,30,1)
(7,2,1)
(28,37,1)
(15,26,1)
(24,39,1)
(25,19,1)
(12,3,1)
(34,25,1)
(31,8,1)
(44,17,1)
(39,23,1)
(26,14,1)
(6,34,1)
(0,7,2)
(49,17,2)
(44,50,2)
(44,7,2)
(40,7,2)
(6,25,2)
(12,7,2)
(18,0,2)
(40,19,2)
(34,25,2)
(5,7,2)
(7,19,2)
(43,7,2)
(28,17,2)
(15,25,2)
(26,19,2)
(32,7,2)
(49,7,2)
(15,26,2)
(35,7,2)
(31,40,2)
(28,7,2)
(14,25,2)
(37,7,2)
(3,0,2)
(17,7,2)
(9,7,2)
(23,7,2)
(46,7,2)
(26,25,2)
(50,19,2)
(36,19,2)
(49,36,2)
(17,31,2)
(0,17,2)
(39,7,2)
(44,17,2)
(36,7,2)
(46,17,2)
(27,7,2)
(31,8,2)
(10,0,2)
(30,7,2)
(22,7,2)
(47,7,2)
(24,7,2)
(50,7,2)
(31,7,2)
(48,7,2)
(3,18,2)
-----------------------------------
(0,dataBuffer == NULL)
(1,data)
(2,100)
(3,exit(-1)
(4,if (data < 100)
(5,\\\'A\\\')
(6,"%hd")
(7,data < 100)
(8,char *)
(9,data)
(10,1)
(11,if(globalTrue)
(12,dataBuffer)
(13,)
(14,data)
(15,fscanf (stdin, "%hd", &data)
(16,)
(17,* dataBuffer = (char *)
(18,-1)
(19,data = 0)
(20,0)
(21,dataBuffer)
(22,1)
(23,dataBuffer)
(24,1)
(25,globalTrue)
(26,&data)
(27,dataBuffer)
(28,free(dataBuffer)
(29,)
(30,\\\'\\\\0\\\')
(31,(char *)
(32,dataBuffer)
(33,)
(34,stdin)
(35,NULL)
(36,data-1)
(37,dataBuffer)
(38,if (dataBuffer == NULL)
(39,data)
(40,malloc(data)
(41,data)
(42,data)
(43,dataBuffer)
(44,memset(dataBuffer, \\\'A\\\', data-1)
(45,RET)
(46,printLine(dataBuffer)
(47,data)
(48,dataBuffer[data-1] = \\\'\\\\0\\\')
(49,dataBuffer[data-1])
(50,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^