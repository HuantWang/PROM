-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
36,56
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_16_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,41,0)
(18,12,0)
(36,59,0)
(23,31,0)
(11,60,0)
(1,48,0)
(57,13,0)
(21,31,0)
(62,37,0)
(3,63,0)
(26,49,0)
(7,4,0)
(27,9,0)
(22,68,0)
(35,1,0)
(44,41,0)
(68,50,0)
(10,26,0)
(47,53,0)
(40,41,0)
(34,68,0)
(64,1,0)
(42,4,0)
(1,68,0)
(51,37,0)
(53,41,0)
(37,31,0)
(63,53,0)
(59,60,0)
(54,49,0)
(53,2,0)
(5,58,0)
(6,2,0)
(49,26,0)
(15,60,0)
(39,59,0)
(20,34,0)
(37,68,0)
(67,48,0)
(25,55,0)
(68,49,0)
(65,39,0)
(29,41,0)
(38,57,0)
(1,31,0)
(55,53,0)
(49,54,0)
(23,68,0)
(16,42,0)
(26,60,0)
(28,59,0)
(52,43,0)
(8,55,0)
(2,6,0)
(9,18,0)
(48,53,0)
(2,53,0)
(45,34,0)
(60,42,0)
(66,32,0)
(14,44,0)
(63,37,0)
(58,53,0)
(61,43,0)
(32,53,0)
(63,44,0)
(34,31,0)
(31,43,0)
(19,59,0)
(37,63,0)
(48,1,0)
(33,23,0)
(56,31,0)
(18,9,0)
(2,23,0)
(59,39,0)
(48,41,0)
(58,41,0)
(49,68,0)
(0,43,0)
(23,2,0)
(24,42,0)
(30,48,0)
(27,55,1)
(23,68,1)
(18,9,1)
(39,59,1)
(65,59,1)
(63,53,1)
(55,53,1)
(31,56,1)
(1,35,1)
(64,67,1)
(48,1,1)
(51,62,1)
(63,37,1)
(39,65,1)
(2,6,1)
(10,22,1)
(26,10,1)
(7,68,1)
(46,31,1)
(14,63,1)
(53,2,1)
(37,68,1)
(49,54,1)
(68,49,1)
(8,53,1)
(25,8,1)
(30,18,1)
(48,53,1)
(34,31,1)
(1,68,1)
(58,5,1)
(36,28,1)
(32,53,1)
(32,66,1)
(23,31,1)
(38,39,1)
(47,34,1)
(34,68,1)
(44,14,1)
(45,20,1)
(1,31,1)
(56,21,1)
(23,33,1)
(62,3,1)
(55,25,1)
(3,48,1)
(67,30,1)
(17,58,1)
(15,11,1)
(59,60,1)
(20,46,1)
(2,23,1)
(5,32,1)
(57,38,1)
(34,45,1)
(66,44,1)
(20,7,1)
(26,60,1)
(58,53,1)
(30,55,1)
(7,57,1)
(28,60,1)
(59,19,1)
(49,26,1)
(60,15,1)
(37,51,1)
(9,27,1)
(37,31,1)
(22,39,1)
(19,36,1)
(35,64,1)
(33,47,1)
(17,34,1)
(11,46,1)
(26,60,2)
(2,6,2)
(2,34,2)
(48,1,2)
(47,34,2)
(37,34,2)
(23,31,2)
(62,34,2)
(51,34,2)
(3,34,2)
(32,34,2)
(36,46,2)
(26,39,2)
(14,34,2)
(32,53,2)
(1,34,2)
(1,31,2)
(11,46,2)
(1,68,2)
(59,46,2)
(59,60,2)
(28,46,2)
(64,34,2)
(60,46,2)
(27,55,2)
(10,39,2)
(68,39,2)
(23,34,2)
(48,53,2)
(44,34,2)
(37,68,2)
(55,53,2)
(5,34,2)
(39,46,2)
(63,53,2)
(66,34,2)
(33,34,2)
(58,34,2)
(53,34,2)
(19,46,2)
(35,34,2)
(63,37,2)
(30,34,2)
(67,34,2)
(49,54,2)
(39,59,2)
(15,46,2)
(53,2,2)
(57,39,2)
(37,31,2)
(8,34,2)
(34,68,2)
(22,39,2)
(49,26,2)
(23,68,2)
(63,34,2)
(9,55,2)
(18,55,2)
(68,49,2)
(18,9,2)
(34,31,2)
(55,34,2)
(65,46,2)
(25,34,2)
(48,34,2)
(7,46,2)
(2,23,2)
(58,53,2)
(49,39,2)
(38,39,2)
-----------------------------------
(0,data)
(1,data-1)
(2,(char *)
(3,dataBuffer)
(4,)
(5,dataBuffer)
(6,char *)
(7,break;)
(8,dataBuffer)
(9,-1)
(10,inputBuffer)
(11,inputBuffer)
(12,)
(13,)
(14,\\\'\\\\0\\\')
(15,"")
(16,inputBuffer)
(17,RET)
(18,exit(-1)
(19,stdin)
(20,data)
(21,data)
(22,data)
(23,malloc(data)
(24,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,NULL)
(26,atoi(inputBuffer)
(27,1)
(28,inputBuffer)
(29,dataBuffer)
(30,dataBuffer)
(31,data = 0)
(32,printLine(dataBuffer)
(33,data)
(34,data < 100)
(35,1)
(36,CHAR_ARRAY_SIZE)
(37,data-1)
(38,"fgets()
(39,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,if (dataBuffer == NULL)
(41,)
(42,)
(43,)
(44,dataBuffer[data-1] = \\\'\\\\0\\\')
(45,100)
(46,1)
(47,dataBuffer)
(48,memset(dataBuffer, \\\'A\\\', data-1)
(49,(short)
(50,)
(51,1)
(52,if (data < 100)
(53,* dataBuffer = (char *)
(54,short)
(55,dataBuffer == NULL)
(56,0)
(57,printLine("fgets()
(58,free(dataBuffer)
(59,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(60,inputBuffer[CHAR_ARRAY_SIZE] = "")
(61,while(1)
(62,data)
(63,dataBuffer[data-1])
(64,data)
(65,NULL)
(66,dataBuffer)
(67,\\\'A\\\')
(68,data = (short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^