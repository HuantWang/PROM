-----label-----
1
-----code-----
static int badSource(int data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
50,51
51,52
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,43,48,49,52
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
static int
badSource(int data)
badSource
int data
int
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(1,9,0)
(10,5,0)
(1,15,0)
(4,17,0)
(14,7,0)
(3,4,0)
(4,5,0)
(20,1,0)
(15,1,0)
(6,16,0)
(18,17,0)
(23,7,0)
(24,2,0)
(0,4,0)
(7,16,0)
(15,5,0)
(12,4,0)
(1,11,0)
(21,5,0)
(13,6,0)
(7,11,0)
(22,6,0)
(17,4,0)
(8,15,0)
(7,1,0)
(5,6,0)
(19,24,0)
(19,17,1)
(7,23,1)
(21,10,1)
(15,8,1)
(15,5,1)
(3,0,1)
(1,15,1)
(17,4,1)
(23,1,1)
(4,12,1)
(12,3,1)
(0,5,1)
(23,24,1)
(5,21,1)
(18,4,1)
(8,20,1)
(4,5,1)
(7,11,1)
(24,19,1)
(14,7,1)
(17,18,1)
(1,11,1)
(20,17,1)
(7,1,1)
(1,11,2)
(24,17,2)
(4,5,2)
(14,7,2)
(7,11,2)
(15,17,2)
(20,17,2)
(1,15,2)
(8,17,2)
(1,17,2)
(17,4,2)
(15,5,2)
(7,1,2)
(19,17,2)
-----------------------------------
(0,inputBuffer)
(1,data = atoi(inputBuffer)
(2,)
(3,CHAR_ARRAY_SIZE)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,inputBuffer[CHAR_ARRAY_SIZE] = "")
(6,)
(7,return data;)
(8,inputBuffer)
(9,)
(10,inputBuffer)
(11,int data)
(12,stdin)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,RET)
(15,atoi(inputBuffer)
(16,)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,NULL)
(19,"fgets()
(20,data)
(21,"")
(22,inputBuffer)
(23,data)
(24,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^