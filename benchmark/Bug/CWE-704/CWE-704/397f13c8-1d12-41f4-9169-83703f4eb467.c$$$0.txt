-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,28,31,33,35,37,41,43,44,46,47,52,54,55,56,60,61,66,68,70,72,77,79,80,84,86
-----computeFrom-----
45,46
45,47
49,50
49,51
53,54
53,55
58,59
58,60
74,75
74,76
-----guardedBy-----
60,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_66b_badSink(int dataArray[])
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(12,20,0)
(18,13,0)
(20,12,0)
(36,16,0)
(34,19,0)
(4,12,0)
(41,30,0)
(9,31,0)
(25,38,0)
(35,2,0)
(16,30,0)
(32,7,0)
(21,37,0)
(0,19,0)
(15,13,0)
(1,13,0)
(5,30,0)
(31,38,0)
(30,16,0)
(28,27,0)
(40,20,0)
(7,22,0)
(10,27,0)
(12,14,0)
(2,20,0)
(19,20,0)
(23,13,0)
(38,31,0)
(19,7,0)
(24,3,0)
(39,27,0)
(31,37,0)
(27,3,0)
(13,43,0)
(8,2,0)
(6,12,0)
(3,13,0)
(1,3,0)
(11,3,0)
(19,3,0)
(42,16,0)
(37,13,0)
(27,22,0)
(20,43,0)
(33,1,0)
(17,38,0)
(16,13,0)
(26,43,0)
(27,20,0)
(33,2,1)
(11,20,1)
(2,35,1)
(29,1,1)
(0,34,1)
(42,36,1)
(34,27,1)
(2,20,1)
(35,8,1)
(12,14,1)
(17,9,1)
(32,19,1)
(31,38,1)
(16,30,1)
(27,3,1)
(38,25,1)
(27,10,1)
(19,20,1)
(25,17,1)
(30,41,1)
(3,24,1)
(41,5,1)
(10,28,1)
(1,3,1)
(1,33,1)
(6,4,1)
(36,3,1)
(20,12,1)
(33,7,1)
(27,20,1)
(12,6,1)
(24,11,1)
(39,2,1)
(19,0,1)
(5,42,1)
(19,3,1)
(37,21,1)
(7,32,1)
(8,37,1)
(4,40,1)
(9,16,1)
(28,39,1)
(21,31,1)
(12,14,2)
(20,12,2)
(27,2,2)
(16,30,2)
(7,2,2)
(27,20,2)
(19,20,2)
(10,2,2)
(19,2,2)
(27,3,2)
(2,20,2)
(32,2,2)
(31,38,2)
(34,2,2)
(0,2,2)
(19,3,2)
(1,3,2)
(39,2,2)
(28,2,2)
-----------------------------------
(0,data)
(1,printLine(dest)
(2,data < 100)
(3,dest[100] = "")
(4,dataArray)
(5,100)
(6,2)
(7,dest[data] = \\\'\\\\0\\\')
(8,data)
(9,source)
(10,data)
(11,dest)
(12,dataArray[2])
(13,)
(14,int dataArray[])
(15,if (data < 100)
(16,memset(source, \\\'A\\\', 100-1)
(17,100)
(18,dest)
(19,dest[data])
(20,data = dataArray[2])
(21,\\\'\\\\0\\\')
(22,)
(23,source)
(24,"")
(25,1)
(26,data)
(27,strncpy(dest, source, data)
(28,source)
(29,RET)
(30,100-1)
(31,source[100-1])
(32,\\\'\\\\0\\\')
(33,dest)
(34,dest)
(35,100)
(36,source)
(37,source[100-1] = \\\'\\\\0\\\')
(38,100-1)
(39,dest)
(40,data)
(41,1)
(42,\\\'A\\\')
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^