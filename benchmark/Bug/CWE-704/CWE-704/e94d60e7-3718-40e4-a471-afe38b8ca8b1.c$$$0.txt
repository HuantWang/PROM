-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_18_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(8,56,0)
(40,49,0)
(49,3,0)
(52,59,0)
(11,51,0)
(60,51,0)
(1,41,0)
(50,27,0)
(35,6,0)
(13,36,0)
(45,34,0)
(64,38,0)
(31,54,0)
(25,6,0)
(26,27,0)
(61,54,0)
(62,36,0)
(30,3,0)
(34,54,0)
(44,36,0)
(14,19,0)
(27,3,0)
(5,59,0)
(63,54,0)
(34,48,0)
(12,38,0)
(19,41,0)
(9,63,0)
(51,1,0)
(27,26,0)
(54,3,0)
(29,22,0)
(49,54,0)
(47,26,0)
(4,59,0)
(41,19,0)
(63,1,0)
(15,41,0)
(21,63,0)
(59,52,0)
(53,27,0)
(28,62,0)
(2,3,0)
(41,1,0)
(33,36,0)
(37,59,0)
(34,62,0)
(39,52,0)
(34,1,0)
(0,64,0)
(55,38,0)
(56,3,0)
(58,29,0)
(25,56,0)
(6,25,0)
(59,64,0)
(7,1,0)
(46,26,0)
(38,36,0)
(32,6,0)
(51,62,0)
(63,62,0)
(1,23,0)
(24,42,0)
(3,36,0)
(19,64,0)
(43,62,0)
(42,48,0)
(41,15,0)
(18,64,0)
(10,34,0)
(57,34,0)
(20,25,0)
(63,42,0)
(17,3,0)
(11,56,1)
(58,52,1)
(21,9,1)
(60,11,1)
(52,59,1)
(47,46,1)
(37,4,1)
(6,32,1)
(16,49,1)
(61,1,1)
(34,62,1)
(40,51,1)
(28,43,1)
(5,64,1)
(40,42,1)
(57,51,1)
(51,62,1)
(29,58,1)
(39,59,1)
(52,39,1)
(45,10,1)
(51,60,1)
(7,52,1)
(27,26,1)
(63,21,1)
(49,54,1)
(4,5,1)
(14,7,1)
(63,1,1)
(18,0,1)
(10,57,1)
(35,20,1)
(41,15,1)
(34,1,1)
(61,29,1)
(1,41,1)
(59,37,1)
(56,8,1)
(26,47,1)
(41,19,1)
(53,54,1)
(0,33,1)
(59,64,1)
(8,25,1)
(46,50,1)
(25,6,1)
(24,63,1)
(63,62,1)
(51,1,1)
(20,27,1)
(31,61,1)
(19,64,1)
(62,28,1)
(54,31,1)
(19,14,1)
(63,54,1)
(34,45,1)
(49,40,1)
(9,34,1)
(50,53,1)
(64,18,1)
(34,54,1)
(42,24,1)
(33,62,1)
(32,35,1)
(7,52,2)
(41,15,2)
(19,52,2)
(51,62,2)
(14,52,2)
(51,1,2)
(34,62,2)
(9,51,2)
(52,59,2)
(29,52,2)
(58,52,2)
(10,51,2)
(34,1,2)
(25,6,2)
(42,51,2)
(63,51,2)
(63,54,2)
(19,64,2)
(27,26,2)
(1,41,2)
(63,1,2)
(41,52,2)
(24,51,2)
(34,54,2)
(1,52,2)
(59,64,2)
(49,54,2)
(41,19,2)
(21,51,2)
(57,51,2)
(34,51,2)
(45,51,2)
(63,62,2)
-----------------------------------
(0,inputBuffer)
(1,data = (short)
(2,dest)
(3,)
(4,CHAR_ARRAY_SIZE)
(5,inputBuffer)
(6,100-1)
(7,data)
(8,\\\'\\\\0\\\')
(9,dest)
(10,source)
(11,data)
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,source:)
(14,inputBuffer)
(15,short)
(16,RET)
(17,source)
(18,"")
(19,atoi(inputBuffer)
(20,source)
(21,data)
(22,)
(23,)
(24,\\\'\\\\0\\\')
(25,source[100-1])
(26,100-1)
(27,memset(source, \\\'A\\\', 100-1)
(28,0)
(29,printLine("fgets()
(30,if (data < 100)
(31,"")
(32,1)
(33,goto source;)
(34,memcpy(dest, source, data)
(35,100)
(36,)
(37,stdin)
(38,)
(39,NULL)
(40,dest)
(41,(short)
(42,dest[data] = \\\'\\\\0\\\')
(43,data)
(44,data)
(45,data)
(46,100)
(47,1)
(48,)
(49,printLine(dest)
(50,\\\'A\\\')
(51,data < 100)
(52,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,source)
(54,dest[100] = "")
(55,inputBuffer)
(56,source[100-1] = \\\'\\\\0\\\')
(57,dest)
(58,"fgets()
(59,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(60,100)
(61,dest)
(62,data = 0)
(63,dest[data])
(64,inputBuffer[CHAR_ARRAY_SIZE] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^