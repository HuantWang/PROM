-----label-----
1
-----code-----
static void badSink()
{
    short data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    short data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    short data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData;
short data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData;
short
data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData
data
= CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData
CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData
CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(19,29,0)
(39,30,0)
(29,16,0)
(45,7,0)
(3,1,0)
(1,42,0)
(12,22,0)
(3,16,0)
(4,22,0)
(9,42,0)
(34,30,0)
(38,10,0)
(29,9,0)
(40,33,0)
(26,10,0)
(20,22,0)
(32,42,0)
(1,12,0)
(20,11,0)
(45,18,0)
(42,22,0)
(20,42,0)
(11,16,0)
(28,4,0)
(21,22,0)
(41,1,0)
(18,45,0)
(42,9,0)
(17,11,0)
(4,42,0)
(2,20,0)
(37,16,0)
(5,11,0)
(27,18,0)
(10,16,0)
(9,6,0)
(31,16,0)
(43,3,0)
(6,9,0)
(13,22,0)
(1,3,0)
(15,32,0)
(32,22,0)
(33,42,0)
(23,12,0)
(36,3,0)
(9,29,0)
(0,42,0)
(16,30,0)
(8,33,0)
(11,20,0)
(25,20,0)
(12,23,1)
(37,31,1)
(4,28,1)
(1,3,1)
(10,16,1)
(28,32,1)
(14,4,1)
(2,33,1)
(32,42,1)
(29,19,1)
(19,0,1)
(42,9,1)
(33,42,1)
(33,40,1)
(20,11,1)
(26,16,1)
(40,8,1)
(16,37,1)
(32,15,1)
(25,2,1)
(1,42,1)
(36,43,1)
(4,42,1)
(18,27,1)
(3,16,1)
(3,36,1)
(20,42,1)
(8,42,1)
(9,6,1)
(23,1,1)
(10,38,1)
(17,5,1)
(43,41,1)
(0,10,1)
(41,20,1)
(2,45,1)
(15,12,1)
(38,26,1)
(11,16,1)
(5,25,1)
(11,17,1)
(14,10,1)
(9,29,1)
(27,33,1)
(29,16,1)
(45,18,1)
(1,10,2)
(41,10,2)
(8,10,2)
(9,10,2)
(15,10,2)
(18,33,2)
(20,11,2)
(27,33,2)
(4,42,2)
(40,10,2)
(28,10,2)
(25,10,2)
(17,10,2)
(45,33,2)
(3,10,2)
(33,10,2)
(5,10,2)
(11,10,2)
(20,42,2)
(36,10,2)
(2,10,2)
(0,10,2)
(29,10,2)
(20,10,2)
(45,18,2)
(1,3,2)
(32,42,2)
(9,6,2)
(19,10,2)
(32,10,2)
(42,10,2)
(11,16,2)
(4,10,2)
(42,9,2)
(12,10,2)
(1,42,2)
(9,29,2)
(3,16,2)
(43,10,2)
(33,42,2)
(23,10,2)
(29,16,2)
(10,16,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer[data-1])
(2,dataBuffer)
(3,data-1)
(4,free(dataBuffer)
(5,data)
(6,char *)
(7,)
(8,dataBuffer)
(9,(char *)
(10,data < 100)
(11,data-1)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,dataBuffer)
(14,RET)
(15,dataBuffer)
(16,data = CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData)
(17,1)
(18,-1)
(19,data)
(20,memset(dataBuffer, 'A', data-1)
(21,if (dataBuffer == NULL)
(22,)
(23,'\\\\0')
(24,\'\\\\0\')
(25,'A')
(26,data)
(27,1)
(28,dataBuffer)
(29,malloc(data)
(30,)
(31,data)
(32,printLine(dataBuffer)
(33,dataBuffer == NULL)
(34,if (data < 100)
(35,dataBuffer[data-1] = '\\\\0')
(36,1)
(37,CWE194_Unexpected_Sign_Extension__negative_malloc_45_badData)
(38,100)
(39,data)
(40,NULL)
(41,dataBuffer)
(42,* dataBuffer = (char *)
(43,data)
(44,memset(dataBuffer, \'A\', data-1)
(45,exit(-1)
(46,\'A\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^