-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        short dataCopy = data;
        short data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
77,79
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
90,92
91,92
91,93
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
114,117
114,118
115,116
117,118
120,121
120,122
121,122
124,125
125,126
125,127
126,127
126,128
127,128
129,130
129,131
130,131
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,65,68,71,73,76,80,81,85,87,88,92,94,97,99,103,105,110,112,116,118,119,122,123,128,131,132,133,137,139,143,145
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
78,79
78,80
101,102
101,103
120,121
120,122
125,126
125,127
129,130
129,131
-----guardedBy-----
33,53
80,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_31_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_31_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_31_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,58,0)
(63,57,0)
(51,1,0)
(50,35,0)
(28,57,0)
(6,37,0)
(25,32,0)
(41,37,0)
(71,51,0)
(1,49,0)
(6,29,0)
(14,49,0)
(14,59,0)
(4,32,0)
(69,9,0)
(18,1,0)
(26,4,0)
(66,52,0)
(35,59,0)
(16,66,0)
(67,59,0)
(62,23,0)
(70,73,0)
(12,23,0)
(0,49,0)
(15,4,0)
(3,26,0)
(32,23,0)
(42,51,0)
(28,53,0)
(54,55,0)
(53,28,0)
(44,26,0)
(38,43,0)
(43,49,0)
(1,59,0)
(21,28,0)
(72,43,0)
(4,66,0)
(36,0,0)
(61,62,0)
(56,49,0)
(47,3,0)
(55,57,0)
(49,43,0)
(11,53,0)
(40,49,0)
(55,58,0)
(43,38,0)
(10,49,0)
(13,32,0)
(5,26,0)
(31,40,0)
(24,70,0)
(1,51,0)
(60,40,0)
(9,23,0)
(49,59,0)
(56,59,0)
(34,28,0)
(8,38,0)
(57,62,0)
(48,57,0)
(30,9,0)
(27,33,0)
(64,62,0)
(33,0,0)
(39,14,0)
(58,55,0)
(20,3,0)
(51,26,0)
(37,6,0)
(46,1,0)
(26,9,0)
(0,35,0)
(33,26,0)
(7,33,0)
(65,9,0)
(4,9,0)
(19,4,0)
(58,66,0)
(0,33,0)
(22,59,0)
(58,45,0)
(66,58,0)
(43,72,0)
(38,26,0)
(68,56,0)
(17,28,0)
(26,5,1)
(40,49,1)
(57,48,1)
(20,26,1)
(42,71,1)
(10,3,1)
(2,3,1)
(19,15,1)
(54,16,1)
(71,18,1)
(27,7,1)
(1,51,1)
(33,27,1)
(15,70,1)
(36,1,1)
(0,33,1)
(4,66,1)
(3,26,1)
(55,54,1)
(46,40,1)
(4,32,1)
(58,55,1)
(11,28,1)
(15,66,1)
(39,56,1)
(43,38,1)
(8,10,1)
(17,34,1)
(50,0,1)
(44,4,1)
(26,4,1)
(2,14,1)
(14,39,1)
(0,49,1)
(51,26,1)
(38,8,1)
(51,42,1)
(21,17,1)
(34,57,1)
(53,11,1)
(56,68,1)
(43,72,1)
(4,19,1)
(58,45,1)
(31,49,1)
(46,6,1)
(16,53,1)
(35,50,1)
(37,41,1)
(48,63,1)
(49,43,1)
(1,49,1)
(63,32,1)
(53,28,1)
(38,26,1)
(40,60,1)
(14,49,1)
(66,58,1)
(41,40,1)
(28,57,1)
(6,37,1)
(25,13,1)
(56,49,1)
(7,36,1)
(3,47,1)
(60,31,1)
(28,21,1)
(32,25,1)
(70,24,1)
(5,44,1)
(33,26,1)
(18,46,1)
(68,35,1)
(24,53,1)
(55,57,1)
(47,20,1)
(16,53,2)
(6,37,2)
(55,53,2)
(31,3,2)
(39,3,2)
(24,53,2)
(51,26,2)
(58,55,2)
(56,3,2)
(4,66,2)
(60,3,2)
(42,3,2)
(14,3,2)
(43,38,2)
(35,3,2)
(46,3,2)
(7,3,2)
(36,3,2)
(58,45,2)
(1,51,2)
(0,33,2)
(37,40,2)
(28,57,2)
(26,4,2)
(14,49,2)
(49,43,2)
(71,3,2)
(51,3,2)
(55,57,2)
(0,3,2)
(1,3,2)
(66,58,2)
(38,26,2)
(49,3,2)
(54,53,2)
(27,3,2)
(40,49,2)
(18,3,2)
(66,53,2)
(58,53,2)
(8,3,2)
(68,3,2)
(6,40,2)
(40,3,2)
(53,28,2)
(3,26,2)
(41,40,2)
(0,49,2)
(33,26,2)
(1,49,2)
(56,49,2)
(33,3,2)
(4,32,2)
(50,3,2)
(10,3,2)
(43,3,2)
(43,72,2)
(70,53,2)
(38,3,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,memset(dataBuffer, \\\'A\\\', data-1)
(2,RET)
(3,data < 100)
(4,dataCopy = data)
(5,dataCopy)
(6,exit(-1)
(7,data)
(8,data)
(9,)
(10,dataBuffer)
(11,NULL)
(12,data)
(13,data)
(14,free(dataBuffer)
(15,dataCopy)
(16,data)
(17,CHAR_ARRAY_SIZE)
(18,\\\'A\\\')
(19,data)
(20,data)
(21,stdin)
(22,if (dataBuffer == NULL)
(23,)
(24,"fgets()
(25,0)
(26,data = dataCopy)
(27,1)
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,)
(30,if (data < 100)
(31,dataBuffer)
(32,data = 0)
(33,data-1)
(34,inputBuffer)
(35,dataBuffer[data-1] = \\\'\\\\0\\\')
(36,dataBuffer)
(37,-1)
(38,malloc(data)
(39,dataBuffer)
(40,dataBuffer == NULL)
(41,1)
(42,1)
(43,(char *)
(44,data)
(45,short)
(46,dataBuffer)
(47,100)
(48,"")
(49,* dataBuffer = (char *)
(50,\\\'\\\\0\\\')
(51,data-1)
(52,)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,inputBuffer)
(55,atoi(inputBuffer)
(56,printLine(dataBuffer)
(57,inputBuffer[CHAR_ARRAY_SIZE] = "")
(58,(short)
(59,)
(60,NULL)
(61,inputBuffer)
(62,)
(63,inputBuffer)
(64,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,dataCopy)
(66,data = (short)
(67,dataBuffer)
(68,dataBuffer)
(69,data)
(70,printLine("fgets()
(71,data)
(72,char *)
(73,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^