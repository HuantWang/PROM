-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_44_bad()
{
    short data;
    /* define a function pointer */
    void (*funcPtr) (short) = badSink;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
34,35
34,36
34,37
36,37
37,38
39,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
43,46
43,47
44,45
46,47
48,49
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,38,40,45,47,49,51,53,58,61,62,65,67,72,73,77,79
-----computeFrom-----
26,27
26,28
42,43
42,44
56,57
56,58
-----guardedBy-----
47,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_44_bad(){    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_44_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_44_bad
{    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(data);}
short data;
short data;
short
data
data
void (*funcPtr) (short) = badSink;
void (*funcPtr) (short) = badSink;
void
(*funcPtr) (short) = badSink
*funcPtr
*
funcPtr
short
short


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(11,13,0)
(22,17,0)
(6,22,0)
(30,17,0)
(20,10,0)
(10,26,0)
(19,15,0)
(7,13,0)
(30,10,0)
(3,5,0)
(24,7,0)
(12,30,0)
(5,4,0)
(29,22,0)
(0,21,0)
(1,18,0)
(14,17,0)
(32,18,0)
(28,21,0)
(18,17,0)
(20,27,0)
(8,9,0)
(21,17,0)
(25,15,0)
(27,20,0)
(33,13,0)
(2,10,0)
(15,9,0)
(9,15,0)
(10,20,0)
(20,7,0)
(23,17,0)
(7,20,0)
(31,15,0)
(13,18,0)
(15,13,0)
(30,22,0)
(30,12,1)
(9,8,1)
(29,21,1)
(11,33,1)
(24,2,1)
(25,19,1)
(15,13,1)
(2,9,1)
(15,31,1)
(9,15,1)
(10,20,1)
(21,28,1)
(33,22,1)
(30,22,1)
(19,13,1)
(20,7,1)
(30,10,1)
(12,10,1)
(8,15,1)
(28,0,1)
(7,24,1)
(22,6,1)
(6,29,1)
(5,3,1)
(16,30,1)
(7,13,1)
(12,5,1)
(13,11,1)
(20,27,1)
(3,9,1)
(31,25,1)
(5,9,2)
(2,9,2)
(3,9,2)
(24,9,2)
(20,7,2)
(20,9,2)
(7,9,2)
(20,27,2)
(30,22,2)
(10,9,2)
(10,20,2)
(9,15,2)
(7,13,2)
(30,10,2)
(15,13,2)
-----------------------------------
(0,funcPtr)
(1,inputBuffer)
(2,data)
(3,"fgets()
(4,)
(5,printLine("fgets()
(6,0)
(7,atoi(inputBuffer)
(8,NULL)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,data = (short)
(11,"")
(12,data)
(13,inputBuffer[CHAR_ARRAY_SIZE] = "")
(14,data)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,RET)
(17,)
(18,)
(19,inputBuffer)
(20,(short)
(21,(*funcPtr)
(22,data = 0)
(23,funcPtr)
(24,inputBuffer)
(25,CHAR_ARRAY_SIZE)
(26,)
(27,short)
(28,badSink)
(29,data)
(30,funcPtr(data)
(31,stdin)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^