-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_listen_socket_09_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a number input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
60,74
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
185,190
186,187
188,189
190,191
192,193
192,194
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
218,219
219,220
219,221
220,221
222,223
222,224
223,224
223,225
226,227
226,228
227,228
229,230
232,233
232,234
233,234
233,235
234,235
236,237
238,239
239,240
240,241
240,242
241,242
243,244
245,246
245,247
246,247
246,248
247,248
249,250
251,252
252,253
253,254
253,255
254,255
256,257
258,259
258,260
259,260
260,261
260,262
262,263
262,264
264,265
265,266
265,267
266,267
266,268
269,270
271,272
272,273
272,274
273,274
275,276
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,32,36,38,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,111,116,117,120,122,127,129,133,135,138,142,144,146,151,153,155,157,159,163,166,168,170,172,176,178,180,184,187,189,191,194,195,196,201,203,206,207,209,214,216,217,221,224,225,228,230,231,235,237,242,244,248,250,255,257,261,263,267,268,270,274,276
-----computeFrom-----
12,13
12,14
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
113,114
113,115
124,125
124,126
148,149
148,150
161,162
161,163
174,175
174,176
182,183
182,184
192,193
192,194
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
219,220
219,221
233,234
233,235
246,247
246,248
-----guardedBy-----
235,244
248,257
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_listen_socket_09_bad(){    short data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_listen_socket_09_bad()
CWE197_Numeric_Truncation_Error__short_listen_socket_09_bad
{    short data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a number input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short */                data = (short)atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(120,59,0)
(109,56,0)
(20,146,0)
(119,117,0)
(166,71,0)
(50,84,0)
(168,146,0)
(148,53,0)
(97,81,0)
(130,12,0)
(72,49,0)
(1,53,0)
(59,53,0)
(111,155,0)
(49,81,0)
(28,77,0)
(137,5,0)
(150,12,0)
(114,72,0)
(108,71,0)
(60,88,0)
(30,16,0)
(23,24,0)
(36,8,0)
(121,71,0)
(140,58,0)
(104,109,0)
(8,134,0)
(21,10,0)
(16,79,0)
(55,137,0)
(56,12,0)
(161,12,0)
(98,146,0)
(50,63,0)
(77,59,0)
(33,53,0)
(98,123,0)
(125,20,0)
(109,73,0)
(107,58,0)
(117,129,0)
(100,15,0)
(146,71,0)
(61,15,0)
(14,46,0)
(114,81,0)
(3,24,0)
(44,157,0)
(148,166,0)
(49,72,0)
(143,166,0)
(169,45,0)
(56,109,0)
(118,9,0)
(46,24,0)
(75,100,0)
(50,12,0)
(101,53,0)
(10,117,0)
(149,117,0)
(157,44,0)
(6,120,0)
(93,71,0)
(90,19,0)
(52,12,0)
(39,71,0)
(68,105,0)
(87,105,0)
(71,139,0)
(137,53,0)
(2,58,0)
(51,56,0)
(29,12,0)
(135,102,0)
(122,155,0)
(106,123,0)
(13,12,0)
(59,77,0)
(155,153,0)
(86,151,0)
(32,22,0)
(96,79,0)
(147,114,0)
(5,137,0)
(163,106,0)
(117,149,0)
(38,148,0)
(25,71,0)
(152,130,0)
(53,58,0)
(94,41,0)
(7,75,0)
(69,137,0)
(53,12,0)
(95,98,0)
(65,71,0)
(115,71,0)
(74,136,0)
(89,121,0)
(134,8,0)
(82,71,0)
(26,32,0)
(123,12,0)
(80,5,0)
(0,146,0)
(11,129,0)
(62,166,0)
(162,84,0)
(15,100,0)
(153,12,0)
(85,153,0)
(141,49,0)
(17,71,0)
(47,49,0)
(133,63,0)
(136,12,0)
(54,75,0)
(112,106,0)
(116,19,0)
(92,159,0)
(20,127,0)
(63,50,0)
(10,56,0)
(88,134,0)
(101,166,0)
(48,129,0)
(145,100,0)
(101,167,0)
(81,12,0)
(158,148,0)
(20,123,0)
(164,46,0)
(100,75,0)
(72,114,0)
(105,53,0)
(26,22,0)
(157,159,0)
(100,145,0)
(64,88,0)
(40,33,0)
(144,59,0)
(4,10,0)
(154,71,0)
(126,33,0)
(110,121,0)
(35,101,0)
(57,18,0)
(32,10,0)
(10,32,0)
(134,12,0)
(84,50,0)
(123,105,0)
(24,46,0)
(59,120,0)
(31,50,0)
(24,81,0)
(34,98,0)
(165,114,0)
(113,12,0)
(171,105,0)
(142,103,0)
(19,136,0)
(24,123,0)
(78,71,0)
(159,157,0)
(91,41,0)
(109,104,0)
(83,22,0)
(155,81,0)
(67,71,0)
(81,24,0)
(41,16,0)
(59,157,0)
(157,59,0)
(10,21,0)
(170,24,0)
(70,32,0)
(22,129,0)
(79,12,0)
(105,123,0)
(124,160,0)
(58,53,0)
(73,109,0)
(42,26,0)
(37,145,0)
(66,130,0)
(16,41,0)
(99,123,0)
(76,149,0)
(138,104,0)
(134,8,1)
(80,137,1)
(10,117,1)
(54,7,1)
(165,147,1)
(158,86,1)
(62,143,1)
(123,105,1)
(122,72,1)
(100,145,1)
(155,111,1)
(147,81,1)
(72,114,1)
(85,155,1)
(95,34,1)
(105,53,1)
(46,14,1)
(158,124,1)
(20,123,1)
(60,79,1)
(58,107,1)
(10,21,1)
(34,101,1)
(168,166,1)
(140,2,1)
(120,59,1)
(130,152,1)
(50,84,1)
(133,33,1)
(16,30,1)
(91,94,1)
(87,68,1)
(141,47,1)
(68,171,1)
(131,117,1)
(31,63,1)
(59,77,1)
(158,169,1)
(20,146,1)
(3,97,1)
(124,72,1)
(109,104,1)
(43,26,1)
(136,74,1)
(26,32,1)
(98,95,1)
(135,15,1)
(107,140,1)
(101,35,1)
(105,87,1)
(42,32,1)
(76,119,1)
(55,120,1)
(98,146,1)
(49,81,1)
(79,96,1)
(35,148,1)
(109,73,1)
(104,138,1)
(120,6,1)
(157,44,1)
(158,27,1)
(155,81,1)
(20,125,1)
(70,118,1)
(128,20,1)
(158,135,1)
(117,149,1)
(137,69,1)
(30,41,1)
(148,38,1)
(28,157,1)
(164,170,1)
(19,90,1)
(145,37,1)
(59,53,1)
(23,46,1)
(128,98,1)
(121,89,1)
(144,134,1)
(5,80,1)
(106,112,1)
(111,122,1)
(101,53,1)
(88,64,1)
(90,116,1)
(137,53,1)
(10,4,1)
(163,123,1)
(149,76,1)
(34,148,1)
(59,157,1)
(158,142,1)
(63,133,1)
(158,57,1)
(110,131,1)
(6,59,1)
(153,85,1)
(100,75,1)
(26,42,1)
(77,28,1)
(89,110,1)
(66,15,1)
(94,136,1)
(57,5,1)
(36,88,1)
(106,123,1)
(0,168,1)
(33,40,1)
(126,53,1)
(81,24,1)
(47,114,1)
(157,159,1)
(138,51,1)
(142,120,1)
(7,146,1)
(112,163,1)
(10,56,1)
(74,19,1)
(7,27,1)
(69,55,1)
(114,165,1)
(99,5,1)
(97,106,1)
(101,166,1)
(162,31,1)
(86,106,1)
(37,75,1)
(41,91,1)
(118,128,1)
(92,144,1)
(70,131,1)
(159,92,1)
(15,100,1)
(143,121,1)
(40,126,1)
(56,109,1)
(75,54,1)
(24,46,1)
(70,128,1)
(171,99,1)
(4,70,1)
(152,66,1)
(33,53,1)
(27,56,1)
(125,98,1)
(24,23,1)
(16,41,1)
(51,153,1)
(114,81,1)
(72,49,1)
(8,36,1)
(50,63,1)
(2,1,1)
(49,141,1)
(170,3,1)
(24,123,1)
(96,16,1)
(64,60,1)
(98,123,1)
(1,130,1)
(5,137,1)
(14,164,1)
(148,53,1)
(148,166,1)
(84,162,1)
(116,50,1)
(169,33,1)
(53,58,1)
(61,100,1)
(32,10,1)
(15,61,1)
(38,158,1)
(146,0,1)
(166,62,1)
(8,33,2)
(20,123,2)
(120,59,2)
(122,72,2)
(137,120,2)
(96,33,2)
(169,33,2)
(136,33,2)
(40,15,2)
(3,106,2)
(81,106,2)
(171,5,2)
(46,106,2)
(54,27,2)
(109,73,2)
(23,106,2)
(0,131,2)
(19,33,2)
(55,120,2)
(130,15,2)
(33,53,2)
(58,15,2)
(86,106,2)
(148,131,2)
(10,21,2)
(69,120,2)
(98,123,2)
(100,145,2)
(10,117,2)
(15,27,2)
(106,5,2)
(75,131,2)
(157,33,2)
(89,131,2)
(16,33,2)
(100,131,2)
(63,33,2)
(155,81,2)
(5,120,2)
(80,120,2)
(61,27,2)
(31,33,2)
(144,33,2)
(92,33,2)
(145,131,2)
(27,72,2)
(140,15,2)
(148,53,2)
(72,114,2)
(75,27,2)
(24,123,2)
(157,159,2)
(81,24,2)
(20,146,2)
(109,72,2)
(49,81,2)
(59,77,2)
(170,106,2)
(74,33,2)
(166,131,2)
(32,10,2)
(1,15,2)
(66,15,2)
(7,131,2)
(145,27,2)
(137,53,2)
(53,15,2)
(88,33,2)
(118,128,2)
(61,131,2)
(111,72,2)
(79,33,2)
(148,166,2)
(125,98,2)
(47,114,2)
(37,131,2)
(165,106,2)
(100,27,2)
(121,131,2)
(60,33,2)
(36,33,2)
(30,33,2)
(20,98,2)
(56,72,2)
(101,53,2)
(142,120,2)
(35,148,2)
(105,5,2)
(97,106,2)
(59,33,2)
(62,131,2)
(157,44,2)
(168,131,2)
(38,131,2)
(53,58,2)
(90,33,2)
(24,46,2)
(15,131,2)
(7,27,2)
(164,106,2)
(120,33,2)
(155,72,2)
(106,123,2)
(26,32,2)
(14,106,2)
(84,33,2)
(112,5,2)
(158,131,2)
(107,15,2)
(59,53,2)
(99,5,2)
(123,105,2)
(124,72,2)
(109,104,2)
(128,131,2)
(16,41,2)
(98,131,2)
(98,146,2)
(91,33,2)
(159,33,2)
(15,100,2)
(41,33,2)
(146,131,2)
(134,33,2)
(105,53,2)
(10,56,2)
(56,109,2)
(94,33,2)
(6,33,2)
(59,157,2)
(143,131,2)
(114,106,2)
(2,15,2)
(87,5,2)
(133,33,2)
(64,33,2)
(51,72,2)
(33,15,2)
(50,63,2)
(116,33,2)
(138,72,2)
(162,33,2)
(114,81,2)
(34,131,2)
(5,137,2)
(24,106,2)
(134,8,2)
(72,106,2)
(72,49,2)
(54,131,2)
(163,5,2)
(77,33,2)
(141,114,2)
(153,72,2)
(37,27,2)
(117,149,2)
(57,5,2)
(135,15,2)
(28,33,2)
(110,131,2)
(126,15,2)
(85,72,2)
(95,131,2)
(50,84,2)
(101,166,2)
(68,5,2)
(104,72,2)
(147,106,2)
(49,114,2)
(100,75,2)
(123,5,2)
(101,148,2)
(50,33,2)
(152,15,2)
-----------------------------------
(0,INVALID_SOCKET)
(1,listenSocket)
(2,AF_INET)
(3,acceptSocket)
(4,data)
(5,listen(listenSocket, LISTEN_BACKLOG)
(6,SOCKET_ERROR)
(7,2)
(8,htons(TCP_PORT)
(9,)
(10,(char)
(11,if(GLOBAL_CONST_TRUE)
(12,)
(13,if (listenSocket == INVALID_SOCKET)
(14,1)
(15,WSAStartup(MAKEWORD(2,2)
(16,service.sin_addr.s_addr)
(17,acceptSocket)
(18,)
(19,service.sin_family)
(20,CLOSE_SOCKET(acceptSocket)
(21,char)
(22,)
(23,0)
(24,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(25,wsaData)
(26,printHexCharLine(charData)
(27,0)
(28,service)
(29,if (WSAStartup(MAKEWORD(2,2)
(30,s_addr)
(31,0)
(32,charData = (char)
(33,listenSocket == INVALID_SOCKET)
(34,acceptSocket)
(35,listenSocket)
(36,TCP_PORT)
(37,wsaData)
(38,INVALID_SOCKET)
(39,recvResult)
(40,INVALID_SOCKET)
(41,service.sin_addr)
(42,charData)
(43,RET)
(44,struct sockaddr*)
(45,)
(46,CHAR_ARRAY_SIZE - 1)
(47,recvResult)
(48,data)
(49,recvResult == 0)
(50,memset(&service, 0, sizeof(service)
(51,data)
(52,if (acceptSocket == SOCKET_ERROR)
(53,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(54,2)
(55,listenSocket)
(56,data = (short)
(57,break;)
(58,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(59,bind(listenSocket, (struct sockaddr*)
(60,service)
(61,NO_ERROR)
(62,INVALID_SOCKET)
(63,&service)
(64,sin_port)
(65,do)
(66,wsaDataInit)
(67,listenSocket)
(68,NULL)
(69,LISTEN_BACKLOG)
(70,charData)
(71,)
(72,recvResult == SOCKET_ERROR || recvResult == 0)
(73,short)
(74,AF_INET)
(75,MAKEWORD(2,2)
(76,1)
(77,sizeof(service)
(78,inputBuffer)
(79,service.sin_addr.s_addr = INADDR_ANY)
(80,SOCKET_ERROR)
(81,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(82,if (listenSocket != INVALID_SOCKET)
(83,charData)
(84,sizeof(service)
(85,'\\\\0')
(86,break;)
(87,NULL)
(88,service.sin_port)
(89,0)
(90,sin_family)
(91,sin_addr)
(92,service)
(93,service)
(94,service)
(95,INVALID_SOCKET)
(96,INADDR_ANY)
(97,recvResult)
(98,acceptSocket != INVALID_SOCKET)
(99,acceptSocket)
(100,WSAStartup(MAKEWORD(2,2)
(101,CLOSE_SOCKET(listenSocket)
(102,)
(103,)
(104,atoi(inputBuffer)
(105,accept(listenSocket, NULL, NULL)
(106,acceptSocket == SOCKET_ERROR)
(107,IPPROTO_TCP)
(108,if (wsaDataInit)
(109,(short)
(110,wsaDataInit)
(111,recvResult)
(112,SOCKET_ERROR)
(113,if (bind(listenSocket, (struct sockaddr*)
(114,recvResult == SOCKET_ERROR)
(115,if (acceptSocket != INVALID_SOCKET)
(116,service)
(117,data = -1)
(118,WSACleanup()
(119,data)
(120,bind(listenSocket, (struct sockaddr*)
(121,wsaDataInit = 0)
(122,inputBuffer)
(123,acceptSocket = accept(listenSocket, NULL, NULL)
(124,break;)
(125,acceptSocket)
(126,listenSocket)
(127,)
(128,wsaDataInit)
(129,)
(130,wsaDataInit = 1)
(131,GLOBAL_CONST_TRUE)
(132,\'\\\\0\')
(133,service)
(134,service.sin_port = htons(TCP_PORT)
(135,break;)
(136,service.sin_family = AF_INET)
(137,listen(listenSocket, LISTEN_BACKLOG)
(138,inputBuffer)
(139,)
(140,SOCK_STREAM)
(141,0)
(142,break;)
(143,listenSocket)
(144,listenSocket)
(145,&wsaData)
(146,acceptSocket = INVALID_SOCKET)
(147,recvResult)
(148,listenSocket != INVALID_SOCKET)
(149,-1)
(150,if (listen(listenSocket, LISTEN_BACKLOG)
(151,)
(152,1)
(153,inputBuffer[recvResult] = '\\\\0')
(154,wsaDataInit)
(155,inputBuffer[recvResult])
(156,inputBuffer[recvResult] = \'\\\\0\')
(157,(struct sockaddr*)
(158,listenSocket)
(159,&service)
(160,)
(161,if (recvResult == SOCKET_ERROR || recvResult == 0)
(162,service)
(163,acceptSocket)
(164,CHAR_ARRAY_SIZE)
(165,SOCKET_ERROR)
(166,listenSocket = INVALID_SOCKET)
(167,)
(168,acceptSocket)
(169,break;)
(170,inputBuffer)
(171,listenSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^