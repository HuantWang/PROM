-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
20,21
20,22
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_16_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }
1
{        /* FLAW: Use a negative number */        data = -1;        break;    }
data = -1;
data = -1
data
data
-1
1
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(48,20,0)
(41,5,0)
(34,43,0)
(5,35,0)
(24,49,0)
(13,36,0)
(48,26,0)
(15,26,0)
(31,26,0)
(4,50,0)
(12,26,0)
(20,7,0)
(0,49,0)
(36,50,0)
(46,26,0)
(48,24,0)
(37,4,0)
(22,14,0)
(30,51,0)
(19,14,0)
(8,48,0)
(45,5,0)
(4,14,0)
(20,35,0)
(32,2,0)
(47,35,0)
(31,13,0)
(9,50,0)
(13,35,0)
(16,31,0)
(42,12,0)
(38,4,0)
(26,46,0)
(20,48,0)
(6,49,0)
(35,20,0)
(1,24,0)
(2,50,0)
(27,29,0)
(26,43,0)
(27,51,0)
(4,35,0)
(2,35,0)
(31,24,0)
(18,31,0)
(23,46,0)
(51,27,0)
(14,4,0)
(3,49,0)
(39,36,0)
(44,50,0)
(12,24,0)
(35,50,0)
(25,24,0)
(7,20,0)
(17,35,0)
(33,17,0)
(14,26,0)
(17,50,0)
(28,12,0)
(21,13,0)
(13,31,0)
(14,24,0)
(45,41,1)
(14,24,1)
(12,24,1)
(11,24,1)
(37,5,1)
(46,23,1)
(20,7,1)
(39,13,1)
(38,37,1)
(12,42,1)
(27,51,1)
(10,12,1)
(41,35,1)
(12,26,1)
(28,34,1)
(48,8,1)
(14,26,1)
(17,33,1)
(16,21,1)
(30,5,1)
(22,38,1)
(10,2,1)
(33,36,1)
(8,47,1)
(37,27,1)
(4,35,1)
(14,19,1)
(35,20,1)
(48,26,1)
(13,31,1)
(2,32,1)
(1,25,1)
(18,16,1)
(5,35,1)
(36,39,1)
(24,1,1)
(15,11,1)
(13,35,1)
(20,48,1)
(31,24,1)
(5,45,1)
(47,12,1)
(42,28,1)
(32,17,1)
(26,46,1)
(17,35,1)
(31,18,1)
(28,11,1)
(48,24,1)
(51,30,1)
(23,15,1)
(31,26,1)
(2,35,1)
(4,14,1)
(34,26,1)
(21,4,1)
(19,22,1)
(19,12,2)
(38,12,2)
(30,5,2)
(31,12,2)
(17,35,2)
(48,12,2)
(22,12,2)
(13,35,2)
(14,12,2)
(34,11,2)
(16,12,2)
(48,26,2)
(20,48,2)
(27,51,2)
(20,12,2)
(21,12,2)
(4,14,2)
(2,35,2)
(26,11,2)
(20,7,2)
(27,5,2)
(8,12,2)
(32,12,2)
(4,35,2)
(31,26,2)
(14,24,2)
(2,12,2)
(12,26,2)
(33,12,2)
(15,11,2)
(31,24,2)
(12,24,2)
(5,35,2)
(36,12,2)
(51,5,2)
(26,46,2)
(5,12,2)
(4,12,2)
(45,12,2)
(17,12,2)
(47,12,2)
(39,12,2)
(35,20,2)
(14,26,2)
(46,11,2)
(23,11,2)
(37,12,2)
(41,12,2)
(13,12,2)
(35,12,2)
(18,12,2)
(13,31,2)
(48,24,2)
-----------------------------------
(0,if (data < 100)
(1,0)
(2,free(dataBuffer)
(3,while(1)
(4,memset(dataBuffer, 'A', data-1)
(5,dataBuffer == NULL)
(6,data)
(7,char *)
(8,data)
(9,dataBuffer)
(10,RET)
(11,1)
(12,data < 100)
(13,dataBuffer[data-1])
(14,data-1)
(15,data)
(16,data)
(17,printLine(dataBuffer)
(18,1)
(19,1)
(20,(char *)
(21,dataBuffer)
(22,data)
(23,1)
(24,data = 0)
(25,data)
(26,data = -1)
(27,exit(-1)
(28,data)
(29,)
(30,1)
(31,data-1)
(32,dataBuffer)
(33,dataBuffer)
(34,break;)
(35,* dataBuffer = (char *)
(36,dataBuffer[data-1] = \'\\\\0\')
(37,dataBuffer)
(38,\'A\')
(39,\'\\\\0\')
(40,'A')
(41,dataBuffer)
(42,100)
(43,)
(44,if (dataBuffer == NULL)
(45,NULL)
(46,-1)
(47,dataBuffer)
(48,malloc(data)
(49,)
(50,)
(51,-1)
(52,dataBuffer[data-1] = '\\\\0')
(53,'\\\\0')
(54,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^