-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,64,65,69,71,72,76,78,81,83,87,89,94,96,100,102,103,106,107,112,115,116,117,121,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
62,63
62,64
85,86
85,87
104,105
104,106
109,110
109,111
113,114
113,115
-----guardedBy-----
37,53
64,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(40,65,0)
(62,31,0)
(37,11,0)
(60,32,0)
(42,43,0)
(15,13,0)
(66,11,0)
(66,24,0)
(32,60,0)
(36,10,0)
(43,42,0)
(62,50,0)
(24,66,0)
(63,8,0)
(9,56,0)
(10,36,0)
(7,56,0)
(54,44,0)
(21,8,0)
(67,26,0)
(22,36,0)
(2,25,0)
(26,56,0)
(57,66,0)
(39,13,0)
(47,39,0)
(18,32,0)
(52,56,0)
(30,59,0)
(44,60,0)
(49,52,0)
(52,59,0)
(65,43,0)
(36,28,0)
(8,36,0)
(42,23,0)
(45,23,0)
(38,29,0)
(17,28,0)
(43,56,0)
(31,62,0)
(46,56,0)
(51,39,0)
(6,43,0)
(19,44,0)
(8,60,0)
(29,56,0)
(1,46,0)
(48,31,0)
(16,65,0)
(34,42,0)
(23,60,0)
(25,43,0)
(25,29,0)
(59,60,0)
(25,8,0)
(23,42,0)
(3,66,0)
(60,55,0)
(11,39,0)
(23,36,0)
(44,36,0)
(0,66,0)
(5,24,0)
(53,35,0)
(52,43,0)
(32,11,0)
(12,10,0)
(8,25,0)
(35,64,0)
(58,59,0)
(4,60,0)
(42,34,0)
(59,52,0)
(20,11,0)
(14,52,0)
(27,28,0)
(46,43,0)
(59,36,0)
(26,43,0)
(33,28,0)
(49,62,1)
(0,57,1)
(8,36,1)
(1,29,1)
(60,32,1)
(58,30,1)
(44,19,1)
(46,43,1)
(24,66,1)
(23,36,1)
(30,14,1)
(31,48,1)
(21,63,1)
(59,60,1)
(52,43,1)
(54,15,1)
(54,41,1)
(3,0,1)
(25,43,1)
(48,65,1)
(2,52,1)
(65,16,1)
(61,44,1)
(36,10,1)
(11,20,1)
(63,2,1)
(15,35,1)
(66,11,1)
(65,43,1)
(8,21,1)
(45,6,1)
(32,18,1)
(23,60,1)
(44,60,1)
(46,1,1)
(52,59,1)
(53,24,1)
(38,25,1)
(15,60,1)
(37,41,1)
(19,54,1)
(59,36,1)
(32,11,1)
(43,42,1)
(57,11,1)
(26,67,1)
(8,60,1)
(23,45,1)
(12,22,1)
(24,5,1)
(66,3,1)
(16,40,1)
(61,26,1)
(62,31,1)
(42,34,1)
(59,58,1)
(20,37,1)
(4,24,1)
(67,46,1)
(25,8,1)
(40,43,1)
(44,36,1)
(42,23,1)
(14,49,1)
(29,38,1)
(26,43,1)
(6,44,1)
(5,66,1)
(10,12,1)
(35,53,1)
(41,36,1)
(18,4,1)
(49,65,1)
(14,44,2)
(58,44,2)
(1,44,2)
(15,41,2)
(23,44,2)
(3,41,2)
(46,44,2)
(25,8,2)
(18,24,2)
(65,44,2)
(52,44,2)
(25,44,2)
(8,36,2)
(44,36,2)
(24,41,2)
(21,44,2)
(16,44,2)
(26,44,2)
(60,24,2)
(0,41,2)
(6,44,2)
(57,41,2)
(11,41,2)
(59,44,2)
(43,42,2)
(66,41,2)
(43,44,2)
(52,43,2)
(67,44,2)
(32,11,2)
(60,32,2)
(23,36,2)
(49,44,2)
(36,10,2)
(42,44,2)
(24,66,2)
(59,60,2)
(37,41,2)
(38,44,2)
(52,59,2)
(65,43,2)
(62,31,2)
(48,65,2)
(59,36,2)
(23,60,2)
(20,41,2)
(45,44,2)
(5,41,2)
(44,60,2)
(29,44,2)
(66,11,2)
(2,44,2)
(62,65,2)
(31,65,2)
(8,44,2)
(35,24,2)
(46,43,2)
(40,44,2)
(4,24,2)
(63,44,2)
(53,24,2)
(42,34,2)
(42,23,2)
(30,44,2)
(32,24,2)
(8,60,2)
(26,43,2)
(25,43,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,dataBuffer)
(2,dataBuffer)
(3,stdin)
(4,data)
(5,NULL)
(6,dataBuffer)
(7,if (dataBuffer == NULL)
(8,data-1)
(9,dataBuffer)
(10,-1)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,1)
(13,)
(14,\\\'A\\\')
(15,break;)
(16,NULL)
(17,data)
(18,inputBuffer)
(19,100)
(20,"")
(21,1)
(22,data)
(23,malloc(data)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,dataBuffer[data-1])
(26,free(dataBuffer)
(27,while(1)
(28,)
(29,dataBuffer[data-1] = \\\'\\\\0\\\')
(30,data)
(31,-1)
(32,atoi(inputBuffer)
(33,if (data < 100)
(34,char *)
(35,printLine("fgets()
(36,data = -1)
(37,inputBuffer)
(38,\\\'\\\\0\\\')
(39,)
(40,dataBuffer)
(41,1)
(42,(char *)
(43,* dataBuffer = (char *)
(44,data < 100)
(45,data)
(46,printLine(dataBuffer)
(47,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,1)
(49,dataBuffer)
(50,)
(51,inputBuffer)
(52,memset(dataBuffer, \\\'A\\\', data-1)
(53,"fgets()
(54,data)
(55,)
(56,)
(57,inputBuffer)
(58,1)
(59,data-1)
(60,data = atoi(inputBuffer)
(61,RET)
(62,exit(-1)
(63,data)
(64,)
(65,dataBuffer == NULL)
(66,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(67,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^