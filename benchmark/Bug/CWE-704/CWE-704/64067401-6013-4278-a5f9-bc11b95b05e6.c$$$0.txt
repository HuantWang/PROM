-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_21_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    badStatic = 1; /* true */
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_21_bad(){    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_21_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_21_bad
{    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,5,0)
(40,36,0)
(24,6,0)
(5,17,0)
(37,51,0)
(18,5,0)
(1,0,0)
(22,51,0)
(50,4,0)
(11,13,0)
(32,0,0)
(33,14,0)
(36,1,0)
(4,15,0)
(48,11,0)
(41,9,0)
(53,17,0)
(46,15,0)
(45,1,0)
(17,4,0)
(25,0,0)
(3,13,0)
(36,17,0)
(26,6,0)
(43,32,0)
(49,36,0)
(51,22,0)
(22,34,0)
(13,17,0)
(18,9,0)
(17,6,0)
(20,53,0)
(18,0,0)
(21,33,0)
(38,25,0)
(19,53,0)
(32,14,0)
(33,0,0)
(16,14,0)
(39,5,0)
(15,6,0)
(28,24,0)
(52,15,0)
(2,25,0)
(11,48,0)
(12,1,0)
(13,11,0)
(4,17,0)
(8,17,0)
(0,14,0)
(27,24,0)
(29,18,0)
(10,14,0)
(31,0,0)
(1,14,0)
(0,11,0)
(9,14,0)
(5,18,0)
(11,0,0)
(42,6,0)
(1,36,0)
(8,24,1)
(1,36,1)
(38,2,1)
(21,32,1)
(23,53,1)
(39,44,1)
(43,9,1)
(28,27,1)
(40,49,1)
(41,18,1)
(0,11,1)
(5,39,1)
(22,51,1)
(15,52,1)
(25,38,1)
(18,0,1)
(36,40,1)
(32,0,1)
(5,17,1)
(33,21,1)
(4,50,1)
(44,29,1)
(13,3,1)
(17,4,1)
(23,33,1)
(2,0,1)
(36,17,1)
(31,53,1)
(51,37,1)
(11,13,1)
(20,19,1)
(4,15,1)
(12,45,1)
(18,5,1)
(27,15,1)
(24,28,1)
(52,46,1)
(1,0,1)
(50,8,1)
(45,22,1)
(25,0,1)
(11,48,1)
(53,17,1)
(19,17,1)
(3,31,1)
(32,43,1)
(13,17,1)
(49,12,1)
(29,1,1)
(37,25,1)
(9,41,1)
(33,0,1)
(45,25,1)
(53,20,1)
(22,25,2)
(13,53,2)
(32,53,2)
(40,53,2)
(11,53,2)
(9,53,2)
(36,17,2)
(38,53,2)
(45,53,2)
(44,53,2)
(21,53,2)
(3,53,2)
(51,25,2)
(1,0,2)
(31,53,2)
(25,0,2)
(1,36,2)
(53,17,2)
(11,13,2)
(18,0,2)
(12,53,2)
(29,53,2)
(43,53,2)
(32,0,2)
(5,53,2)
(39,53,2)
(2,53,2)
(0,53,2)
(0,11,2)
(11,48,2)
(33,0,2)
(33,53,2)
(1,53,2)
(36,53,2)
(13,17,2)
(49,53,2)
(25,53,2)
(18,53,2)
(41,53,2)
(37,25,2)
(18,5,2)
(22,51,2)
(5,17,2)
(4,15,2)
(17,4,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,memset(dataBuffer, 'A', data-1)
(2,dataBuffer)
(3,data)
(4,badSource(data)
(5,data-1)
(6,)
(7,memset(dataBuffer, \'A\', data-1)
(8,data)
(9,dataBuffer[data-1] = \'\\\\0\')
(10,if (dataBuffer == NULL)
(11,(char *)
(12,\'A\')
(13,malloc(data)
(14,)
(15,data = 0)
(16,dataBuffer)
(17,data = badSource(data)
(18,dataBuffer[data-1])
(19,data)
(20,100)
(21,dataBuffer)
(22,exit(-1)
(23,RET)
(24,badStatic = 1)
(25,dataBuffer == NULL)
(26,if (data < 100)
(27,badStatic)
(28,1)
(29,dataBuffer)
(30,dataBuffer[data-1] = '\\\\0')
(31,dataBuffer)
(32,printLine(dataBuffer)
(33,free(dataBuffer)
(34,)
(35,'A')
(36,data-1)
(37,1)
(38,NULL)
(39,1)
(40,1)
(41,\'\\\\0\')
(42,data)
(43,dataBuffer)
(44,data)
(45,dataBuffer)
(46,data)
(47,'\\\\0')
(48,char *)
(49,data)
(50,data)
(51,-1)
(52,0)
(53,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^