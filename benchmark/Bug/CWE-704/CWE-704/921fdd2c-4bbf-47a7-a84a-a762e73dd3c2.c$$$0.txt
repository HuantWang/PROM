-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
76,78
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
93,94
95,96
97,98
97,99
98,99
99,100
99,101
101,102
101,103
103,104
104,105
105,106
107,108
107,109
108,109
108,110
109,110
112,113
112,114
112,115
112,116
112,117
112,118
113,114
114,115
114,116
116,117
116,118
116,119
119,120
120,121
120,122
121,122
121,123
123,124
125,126
125,127
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
138,139
138,140
139,140
141,142
143,144
144,145
144,146
144,147
144,148
145,146
147,148
150,151
150,152
151,152
154,155
155,156
155,157
156,157
156,158
157,158
159,160
159,161
160,161
164,165
165,166
165,167
166,167
168,169
170,171
171,172
171,173
172,173
174,175
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,78,81,83,88,89,94,96,100,102,106,110,111,115,117,118,122,124,127,129,133,135,140,142,146,148,149,152,153,158,161,162,163,167,169,173,175
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
91,92
91,93
108,109
108,110
131,132
131,133
150,151
150,152
155,156
155,157
159,160
159,161
-----guardedBy-----
63,83
110,161
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_32_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,36,0)
(75,64,0)
(45,26,0)
(21,37,0)
(86,13,0)
(43,15,0)
(54,20,0)
(79,45,0)
(88,26,0)
(13,89,0)
(82,24,0)
(65,22,0)
(69,24,0)
(86,15,0)
(6,62,0)
(45,8,0)
(28,20,0)
(15,63,0)
(34,8,0)
(32,49,0)
(13,86,0)
(82,15,0)
(3,16,0)
(67,49,0)
(72,64,0)
(36,54,0)
(87,19,0)
(73,21,0)
(26,15,0)
(62,6,0)
(36,38,0)
(13,8,0)
(53,38,0)
(62,2,0)
(23,54,0)
(48,81,0)
(44,63,0)
(8,13,0)
(12,74,0)
(27,22,0)
(63,20,0)
(77,8,0)
(74,22,0)
(37,74,0)
(64,72,0)
(10,26,0)
(22,20,0)
(5,19,0)
(39,46,0)
(60,28,0)
(25,52,0)
(46,28,0)
(68,20,0)
(76,28,0)
(28,46,0)
(1,41,0)
(8,19,0)
(60,15,0)
(9,72,0)
(90,37,0)
(14,54,0)
(70,63,0)
(30,74,0)
(66,0,0)
(85,82,0)
(65,38,0)
(38,22,0)
(78,72,0)
(29,50,0)
(71,25,0)
(55,6,0)
(45,51,0)
(16,54,0)
(65,67,0)
(49,21,0)
(77,19,0)
(21,49,0)
(72,37,0)
(24,82,0)
(31,0,0)
(15,60,0)
(41,8,0)
(17,23,0)
(51,19,0)
(83,77,0)
(49,32,0)
(84,72,0)
(33,67,0)
(41,19,0)
(58,65,0)
(24,8,0)
(89,13,0)
(56,24,0)
(81,20,0)
(49,67,0)
(26,45,0)
(42,81,0)
(54,23,0)
(18,37,0)
(16,65,0)
(50,15,0)
(57,82,0)
(61,20,0)
(35,36,0)
(0,8,0)
(47,50,0)
(59,20,0)
(67,4,0)
(7,60,0)
(40,86,0)
(24,19,0)
(11,51,0)
(69,56,1)
(81,48,1)
(25,71,1)
(39,76,1)
(9,78,1)
(56,0,1)
(11,45,1)
(58,16,1)
(16,3,1)
(40,34,1)
(13,89,1)
(24,8,1)
(82,15,1)
(48,42,1)
(77,8,1)
(23,17,1)
(64,72,1)
(37,90,1)
(3,67,1)
(80,77,1)
(18,38,1)
(13,86,1)
(65,58,1)
(36,35,1)
(82,85,1)
(86,40,1)
(60,28,1)
(57,69,1)
(71,64,1)
(72,37,1)
(55,0,1)
(77,83,1)
(73,33,1)
(21,37,1)
(7,43,1)
(42,28,1)
(26,10,1)
(41,1,1)
(51,11,1)
(24,82,1)
(0,8,1)
(1,51,1)
(80,50,1)
(6,55,1)
(79,24,1)
(54,23,1)
(50,29,1)
(28,46,1)
(36,54,1)
(43,65,1)
(38,36,1)
(26,15,1)
(67,49,1)
(47,15,1)
(15,60,1)
(16,54,1)
(49,32,1)
(65,38,1)
(41,8,1)
(34,50,1)
(8,13,1)
(88,79,1)
(83,41,1)
(33,64,1)
(60,7,1)
(78,37,1)
(46,39,1)
(35,53,1)
(31,8,1)
(3,25,1)
(62,6,1)
(56,62,1)
(17,14,1)
(66,31,1)
(49,21,1)
(21,73,1)
(84,9,1)
(85,57,1)
(86,15,1)
(50,15,1)
(0,66,1)
(53,81,1)
(90,18,1)
(75,72,1)
(65,67,1)
(45,8,1)
(64,75,1)
(45,26,1)
(10,88,1)
(76,54,1)
(72,84,1)
(29,47,1)
(86,50,2)
(49,64,2)
(66,50,2)
(21,37,2)
(60,28,2)
(38,36,2)
(67,64,2)
(88,50,2)
(82,50,2)
(40,50,2)
(71,64,2)
(8,50,2)
(11,50,2)
(28,46,2)
(77,8,2)
(79,50,2)
(56,50,2)
(41,50,2)
(33,64,2)
(13,89,2)
(77,50,2)
(24,8,2)
(72,37,2)
(0,50,2)
(26,50,2)
(24,82,2)
(16,54,2)
(54,23,2)
(25,64,2)
(65,38,2)
(49,21,2)
(83,50,2)
(10,50,2)
(26,15,2)
(36,54,2)
(24,50,2)
(73,64,2)
(15,60,2)
(65,67,2)
(62,6,2)
(31,50,2)
(67,49,2)
(86,15,2)
(34,50,2)
(21,64,2)
(6,0,2)
(45,50,2)
(0,8,2)
(1,50,2)
(69,50,2)
(13,50,2)
(82,15,2)
(64,72,2)
(45,8,2)
(51,50,2)
(13,86,2)
(85,50,2)
(8,13,2)
(49,32,2)
(55,0,2)
(41,8,2)
(62,0,2)
(45,26,2)
(57,50,2)
(50,15,2)
-----------------------------------
(0,dataBuffer == NULL)
(1,dataBuffer)
(2,)
(3,dataPtr1)
(4,)
(5,dataBuffer)
(6,-1)
(7,dataPtr2)
(8,* dataBuffer = (char *)
(9,CHAR_ARRAY_SIZE)
(10,1)
(11,\\\'\\\\0\\\')
(12,inputBuffer)
(13,(char *)
(14,dataPtr1)
(15,data = *dataPtr2)
(16,*dataPtr1)
(17,data)
(18,inputBuffer)
(19,)
(20,)
(21,atoi(inputBuffer)
(22,)
(23,&data)
(24,memset(dataBuffer, \\\'A\\\', data-1)
(25,printLine("fgets()
(26,data-1)
(27,data)
(28,*dataPtr2 = &data)
(29,100)
(30,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,dataBuffer)
(32,short)
(33,data)
(34,dataBuffer)
(35,dataPtr1)
(36,*dataPtr1)
(37,inputBuffer[CHAR_ARRAY_SIZE] = "")
(38,data = *dataPtr1)
(39,data)
(40,data)
(41,printLine(dataBuffer)
(42,data)
(43,data)
(44,if (data < 100)
(45,dataBuffer[data-1])
(46,&data)
(47,data)
(48,0)
(49,(short)
(50,data < 100)
(51,dataBuffer[data-1] = \\\'\\\\0\\\')
(52,)
(53,data)
(54,*dataPtr1 = &data)
(55,1)
(56,dataBuffer)
(57,data)
(58,data)
(59,dataPtr2)
(60,*dataPtr2)
(61,data)
(62,exit(-1)
(63,)
(64,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,*dataPtr1 = data)
(66,NULL)
(67,data = (short)
(68,dataPtr1)
(69,\\\'A\\\')
(70,data)
(71,"fgets()
(72,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(73,inputBuffer)
(74,)
(75,NULL)
(76,dataPtr2)
(77,free(dataBuffer)
(78,inputBuffer)
(79,dataBuffer)
(80,RET)
(81,data = 0)
(82,data-1)
(83,dataBuffer)
(84,stdin)
(85,1)
(86,malloc(data)
(87,if (dataBuffer == NULL)
(88,data)
(89,char *)
(90,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^