-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
37,57
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_10_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(31,57,0)
(39,19,0)
(47,0,0)
(11,33,0)
(8,42,0)
(55,64,0)
(8,29,0)
(40,21,0)
(42,8,0)
(4,27,0)
(15,2,0)
(24,9,0)
(61,14,0)
(25,9,0)
(35,39,0)
(29,8,0)
(57,43,0)
(34,33,0)
(11,19,0)
(12,26,0)
(60,26,0)
(52,0,0)
(39,60,0)
(66,11,0)
(29,60,0)
(19,50,0)
(64,60,0)
(49,53,0)
(25,14,0)
(67,0,0)
(37,49,0)
(29,19,0)
(64,19,0)
(2,0,0)
(62,19,0)
(36,46,0)
(44,26,0)
(0,21,0)
(3,0,0)
(41,60,0)
(23,26,0)
(13,47,0)
(10,3,0)
(54,11,0)
(0,8,0)
(5,64,0)
(18,9,0)
(33,21,0)
(56,25,0)
(11,60,0)
(48,9,0)
(3,39,0)
(2,21,0)
(22,25,0)
(51,33,0)
(7,60,0)
(43,57,0)
(36,19,0)
(14,25,0)
(30,21,0)
(46,36,0)
(9,49,0)
(45,39,0)
(33,0,0)
(32,47,0)
(20,24,0)
(38,25,0)
(58,29,0)
(36,24,0)
(63,30,0)
(3,30,0)
(27,1,0)
(59,52,0)
(6,49,0)
(33,11,0)
(65,21,0)
(19,36,0)
(43,16,0)
(24,36,0)
(39,3,0)
(52,21,0)
(8,0,0)
(61,25,1)
(57,31,1)
(52,59,1)
(52,0,1)
(29,19,1)
(2,0,1)
(33,11,1)
(38,22,1)
(34,43,1)
(62,14,1)
(31,47,1)
(36,24,1)
(36,46,1)
(33,0,1)
(64,55,1)
(17,64,1)
(39,60,1)
(11,66,1)
(47,0,1)
(11,60,1)
(22,9,1)
(59,30,1)
(0,8,1)
(39,45,1)
(39,19,1)
(66,54,1)
(29,58,1)
(35,10,1)
(58,67,1)
(14,25,1)
(9,48,1)
(10,33,1)
(18,28,1)
(19,36,1)
(5,27,1)
(67,64,1)
(54,51,1)
(34,47,1)
(43,57,1)
(20,62,1)
(14,61,1)
(5,19,1)
(56,38,1)
(15,52,1)
(8,29,1)
(28,60,1)
(4,14,1)
(60,41,1)
(64,19,1)
(27,4,1)
(3,0,1)
(11,19,1)
(13,32,1)
(45,35,1)
(30,63,1)
(41,7,1)
(25,9,1)
(24,9,1)
(25,56,1)
(17,2,1)
(24,20,1)
(29,60,1)
(2,15,1)
(64,60,1)
(51,34,1)
(55,5,1)
(3,39,1)
(5,28,1)
(32,0,1)
(63,3,1)
(47,13,1)
(8,42,1)
(48,18,1)
(2,0,2)
(8,64,2)
(13,64,2)
(8,42,2)
(61,28,2)
(3,64,2)
(0,64,2)
(66,64,2)
(14,25,2)
(54,64,2)
(19,14,2)
(24,9,2)
(59,64,2)
(2,64,2)
(64,19,2)
(47,64,2)
(39,64,2)
(57,47,2)
(30,64,2)
(11,60,2)
(9,28,2)
(15,64,2)
(29,64,2)
(39,19,2)
(29,60,2)
(64,60,2)
(3,0,2)
(19,36,2)
(58,64,2)
(11,64,2)
(38,28,2)
(14,28,2)
(36,46,2)
(4,14,2)
(20,14,2)
(39,60,2)
(10,64,2)
(36,24,2)
(43,47,2)
(0,8,2)
(32,64,2)
(25,28,2)
(43,57,2)
(52,0,2)
(33,64,2)
(56,28,2)
(51,64,2)
(62,14,2)
(31,47,2)
(34,64,2)
(3,39,2)
(27,14,2)
(8,29,2)
(36,14,2)
(18,28,2)
(25,9,2)
(67,64,2)
(52,64,2)
(47,0,2)
(33,11,2)
(63,64,2)
(24,14,2)
(33,0,2)
(11,19,2)
(35,64,2)
(22,28,2)
(45,64,2)
(48,28,2)
(29,19,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,)
(2,free(dataBuffer)
(3,dataBuffer[data-1])
(4,"fgets()
(5,data)
(6,inputBuffer)
(7,data)
(8,(char *)
(9,inputBuffer[CHAR_ARRAY_SIZE] = "")
(10,dataBuffer)
(11,data-1)
(12,if (data < 100)
(13,NULL)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,dataBuffer)
(16,)
(17,RET)
(18,inputBuffer)
(19,data = (short)
(20,inputBuffer)
(21,)
(22,inputBuffer)
(23,data)
(24,atoi(inputBuffer)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,)
(27,printLine("fgets()
(28,globalTrue)
(29,malloc(data)
(30,dataBuffer[data-1] = \\\'\\\\0\\\')
(31,1)
(32,dataBuffer)
(33,memset(dataBuffer, \\\'A\\\', data-1)
(34,dataBuffer)
(35,data)
(36,(short)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,CHAR_ARRAY_SIZE)
(39,data-1)
(40,if (dataBuffer == NULL)
(41,0)
(42,char *)
(43,exit(-1)
(44,if(globalTrue)
(45,1)
(46,short)
(47,dataBuffer == NULL)
(48,"")
(49,)
(50,)
(51,\\\'A\\\')
(52,printLine(dataBuffer)
(53,)
(54,data)
(55,100)
(56,stdin)
(57,-1)
(58,data)
(59,dataBuffer)
(60,data = 0)
(61,NULL)
(62,data)
(63,\\\'\\\\0\\\')
(64,data < 100)
(65,dataBuffer)
(66,1)
(67,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^