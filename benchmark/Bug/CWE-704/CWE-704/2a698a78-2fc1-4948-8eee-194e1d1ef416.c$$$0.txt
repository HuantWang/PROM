-----label-----
1
-----code-----
static void badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,18,0)
(26,37,0)
(34,24,0)
(8,4,0)
(13,9,0)
(27,6,0)
(37,39,0)
(3,9,0)
(11,4,0)
(24,18,0)
(24,31,0)
(18,11,0)
(15,9,0)
(7,11,0)
(11,7,0)
(9,1,0)
(38,13,0)
(39,42,0)
(4,2,0)
(13,2,0)
(36,13,0)
(4,11,0)
(20,35,0)
(31,2,0)
(31,24,0)
(12,19,0)
(0,10,0)
(22,1,0)
(9,13,0)
(18,1,0)
(19,1,0)
(10,18,0)
(11,18,0)
(14,22,0)
(23,31,0)
(28,17,0)
(43,18,0)
(24,19,0)
(6,18,0)
(16,10,0)
(29,31,0)
(22,18,0)
(39,37,0)
(6,1,0)
(35,2,0)
(33,1,0)
(5,35,0)
(32,1,0)
(36,38,1)
(31,23,1)
(37,26,1)
(40,22,1)
(9,13,1)
(24,31,1)
(27,19,1)
(35,5,1)
(13,2,1)
(23,29,1)
(24,18,1)
(10,18,1)
(43,35,1)
(40,35,1)
(11,4,1)
(13,36,1)
(22,14,1)
(10,0,1)
(19,12,1)
(4,2,1)
(26,10,1)
(8,43,1)
(35,2,1)
(22,18,1)
(11,7,1)
(9,18,1)
(4,8,1)
(6,18,1)
(14,6,1)
(5,20,1)
(29,34,1)
(34,9,1)
(15,39,1)
(3,15,1)
(12,24,1)
(16,18,1)
(38,3,1)
(0,16,1)
(15,10,1)
(31,2,1)
(6,27,1)
(39,37,1)
(18,11,1)
(13,35,2)
(10,35,2)
(31,35,2)
(35,2,2)
(18,35,2)
(16,35,2)
(29,35,2)
(6,18,2)
(26,10,2)
(43,35,2)
(0,35,2)
(39,37,2)
(22,18,2)
(18,11,2)
(34,35,2)
(36,35,2)
(4,2,2)
(11,35,2)
(13,2,2)
(9,13,2)
(23,35,2)
(22,35,2)
(14,35,2)
(3,35,2)
(11,7,2)
(24,18,2)
(24,31,2)
(8,35,2)
(12,35,2)
(24,35,2)
(38,35,2)
(39,10,2)
(10,18,2)
(9,35,2)
(37,10,2)
(31,2,2)
(4,35,2)
(15,35,2)
(27,35,2)
(19,35,2)
(9,18,2)
(6,35,2)
(11,4,2)
-----------------------------------
(0,NULL)
(1,)
(2,int data)
(3,\'A\')
(4,malloc(data)
(5,100)
(6,printLine(dataBuffer)
(7,char *)
(8,data)
(9,memset(dataBuffer, 'A', data-1)
(10,dataBuffer == NULL)
(11,(char *)
(12,'\\\\0')
(13,data-1)
(14,dataBuffer)
(15,dataBuffer)
(16,dataBuffer)
(17,)
(18,* dataBuffer = (char *)
(19,dataBuffer[data-1] = '\\\\0')
(20,data)
(21,dataBuffer[data-1] = \'\\\\0\')
(22,free(dataBuffer)
(23,1)
(24,dataBuffer[data-1])
(25,\'\\\\0\')
(26,1)
(27,dataBuffer)
(28,if (data < 100)
(29,data)
(30,memset(dataBuffer, \'A\', data-1)
(31,data-1)
(32,if (dataBuffer == NULL)
(33,dataBuffer)
(34,dataBuffer)
(35,data < 100)
(36,1)
(37,-1)
(38,data)
(39,exit(-1)
(40,RET)
(41,'A')
(42,)
(43,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^