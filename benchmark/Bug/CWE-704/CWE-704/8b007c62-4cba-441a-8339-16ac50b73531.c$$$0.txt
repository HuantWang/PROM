-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        /* FLAW: Use a negative number */
        data = -1;
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
56,57
58,59
60,61
60,62
61,62
62,63
62,64
64,65
64,66
66,67
67,68
68,69
70,71
70,72
70,73
70,74
70,75
70,76
71,72
72,73
72,74
74,75
74,76
76,77
78,79
79,80
79,81
81,82
81,83
81,84
83,84
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
94,95
94,96
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
113,114
113,115
113,116
113,117
114,115
116,117
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
127,128
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,57,59,63,65,69,73,75,77,80,82,84,86,90,92,93,95,96,101,103,104,105,109,110,115,117,119,121,126,128,129,133,135
-----computeFrom-----
32,33
32,34
48,49
48,50
54,55
54,56
94,95
94,96
98,99
98,100
102,103
102,104
107,108
107,109
123,124
123,125
-----guardedBy-----
109,128
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = -1;
data = -1
data
data
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(7,22,0)
(67,65,0)
(31,48,0)
(47,59,0)
(35,60,0)
(16,39,0)
(3,65,0)
(18,59,0)
(24,40,0)
(49,42,0)
(9,51,0)
(2,65,0)
(0,30,0)
(39,48,0)
(36,51,0)
(10,23,0)
(27,40,0)
(12,67,0)
(64,31,0)
(43,33,0)
(54,46,0)
(60,34,0)
(50,65,0)
(21,30,0)
(70,35,0)
(0,34,0)
(69,46,0)
(15,28,0)
(13,12,0)
(60,1,0)
(59,48,0)
(34,65,0)
(56,65,0)
(6,28,0)
(11,37,0)
(6,48,0)
(29,54,0)
(14,48,0)
(53,46,0)
(30,40,0)
(35,34,0)
(17,23,0)
(30,0,0)
(71,34,0)
(46,54,0)
(33,22,0)
(59,62,0)
(22,23,0)
(42,35,0)
(50,37,0)
(46,23,0)
(5,23,0)
(67,12,0)
(28,23,0)
(51,33,0)
(5,28,0)
(52,59,0)
(48,3,0)
(57,1,0)
(40,27,0)
(26,28,0)
(61,6,0)
(32,54,0)
(66,67,0)
(42,40,0)
(8,4,0)
(40,65,0)
(20,60,0)
(41,5,0)
(23,3,0)
(1,60,0)
(6,4,0)
(19,65,0)
(38,27,0)
(44,31,0)
(59,28,0)
(33,51,0)
(4,62,0)
(68,6,0)
(55,50,0)
(45,3,0)
(37,50,0)
(58,23,0)
(48,39,0)
(25,0,0)
(39,50,0)
(4,8,1)
(59,18,1)
(7,33,1)
(64,22,1)
(55,40,1)
(49,60,1)
(51,9,1)
(60,1,1)
(21,25,1)
(40,27,1)
(5,28,1)
(22,7,1)
(27,38,1)
(6,61,1)
(0,30,1)
(30,40,1)
(57,20,1)
(5,41,1)
(8,6,1)
(46,54,1)
(18,47,1)
(54,29,1)
(53,69,1)
(31,44,1)
(9,36,1)
(41,4,1)
(47,52,1)
(33,51,1)
(41,31,1)
(30,21,1)
(66,50,1)
(59,28,1)
(12,13,1)
(61,68,1)
(44,64,1)
(16,14,1)
(32,53,1)
(29,32,1)
(14,35,1)
(11,55,1)
(38,24,1)
(26,15,1)
(20,0,1)
(69,28,1)
(48,39,1)
(50,37,1)
(59,48,1)
(52,31,1)
(36,43,1)
(6,28,1)
(6,48,1)
(37,11,1)
(15,48,1)
(35,70,1)
(39,50,1)
(68,59,1)
(42,40,1)
(67,12,1)
(39,16,1)
(13,66,1)
(31,48,1)
(63,5,1)
(28,26,1)
(35,60,1)
(25,67,1)
(1,57,1)
(70,42,1)
(42,49,1)
(43,46,1)
(5,28,2)
(48,39,2)
(67,12,2)
(18,31,2)
(52,31,2)
(4,31,2)
(59,31,2)
(6,31,2)
(8,31,2)
(50,37,2)
(59,48,2)
(59,28,2)
(46,54,2)
(42,40,2)
(6,48,2)
(47,31,2)
(40,27,2)
(0,30,2)
(35,60,2)
(60,1,2)
(6,28,2)
(68,31,2)
(31,48,2)
(39,50,2)
(33,51,2)
(61,31,2)
(30,40,2)
-----------------------------------
(0,data = *dataPtr1)
(1,-1)
(2,dataPtr2)
(3,)
(4,dest[data] = \\\'\\\\0\\\')
(5,printLine(dest)
(6,dest[data])
(7,\\\'\\\\0\\\')
(8,\\\'\\\\0\\\')
(9,1)
(10,source)
(11,data)
(12,-1)
(13,1)
(14,data)
(15,dest)
(16,dataPtr2)
(17,if (data < 100)
(18,data)
(19,data)
(20,data)
(21,dataPtr1)
(22,source[100-1] = \\\'\\\\0\\\')
(23,)
(24,dataPtr1)
(25,data)
(26,"")
(27,&data)
(28,dest[100] = "")
(29,1)
(30,*dataPtr1)
(31,data < 100)
(32,100)
(33,source[100-1])
(34,)
(35,*dataPtr1 = data)
(36,100)
(37,&data)
(38,data)
(39,*dataPtr2)
(40,*dataPtr1 = &data)
(41,dest)
(42,*dataPtr1)
(43,source)
(44,100)
(45,data)
(46,memset(source, \\\'A\\\', 100-1)
(47,source)
(48,data = *dataPtr2)
(49,dataPtr1)
(50,*dataPtr2 = &data)
(51,100-1)
(52,dest)
(53,\\\'A\\\')
(54,100-1)
(55,dataPtr2)
(56,dataPtr1)
(57,1)
(58,dest)
(59,memcpy(dest, source, data)
(60,data = -1)
(61,data)
(62,)
(63,RET)
(64,data)
(65,)
(66,data)
(67,data = -1)
(68,dest)
(69,source)
(70,data)
(71,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^