-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
36,56
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_16_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(51,3,0)
(9,55,0)
(2,11,0)
(15,36,0)
(60,65,0)
(17,62,0)
(53,10,0)
(19,58,0)
(27,28,0)
(52,11,0)
(11,48,0)
(33,8,0)
(40,58,0)
(30,9,0)
(3,55,0)
(38,53,0)
(44,18,0)
(44,27,0)
(0,18,0)
(1,55,0)
(56,34,0)
(21,28,0)
(59,21,0)
(44,55,0)
(3,18,0)
(41,44,0)
(44,32,0)
(61,18,0)
(14,27,0)
(62,42,0)
(8,33,0)
(24,18,0)
(6,2,0)
(7,8,0)
(55,58,0)
(29,33,0)
(64,8,0)
(5,28,0)
(66,9,0)
(39,11,0)
(28,5,0)
(18,48,0)
(3,27,0)
(36,53,0)
(65,36,0)
(28,21,0)
(12,10,0)
(49,53,0)
(34,65,0)
(4,65,0)
(0,48,0)
(25,3,0)
(11,2,0)
(50,0,0)
(63,48,0)
(45,57,0)
(13,48,0)
(54,55,0)
(37,2,0)
(43,44,0)
(57,48,0)
(46,36,0)
(3,31,0)
(22,44,0)
(21,36,0)
(33,57,0)
(28,27,0)
(9,27,0)
(27,35,0)
(48,58,0)
(23,31,0)
(31,32,0)
(16,48,0)
(65,34,0)
(20,65,0)
(9,27,1)
(44,55,1)
(8,64,1)
(9,66,1)
(12,62,1)
(65,60,1)
(11,2,1)
(66,30,1)
(4,36,1)
(65,36,1)
(3,18,1)
(12,27,1)
(60,20,1)
(50,9,1)
(0,50,1)
(3,25,1)
(54,1,1)
(28,21,1)
(31,23,1)
(9,55,1)
(26,55,1)
(0,18,1)
(45,33,1)
(47,0,1)
(21,59,1)
(28,5,1)
(25,51,1)
(18,24,1)
(7,29,1)
(51,44,1)
(6,39,1)
(46,15,1)
(44,27,1)
(52,18,1)
(57,45,1)
(33,8,1)
(61,26,1)
(55,54,1)
(24,61,1)
(34,56,1)
(17,34,1)
(44,41,1)
(39,52,1)
(64,7,1)
(59,14,1)
(22,9,1)
(15,26,1)
(37,6,1)
(56,65,1)
(50,31,1)
(62,17,1)
(41,43,1)
(34,65,1)
(2,37,1)
(14,34,1)
(3,27,1)
(36,46,1)
(27,28,1)
(30,57,1)
(3,55,1)
(21,36,1)
(43,22,1)
(44,18,1)
(61,12,1)
(23,3,1)
(20,4,1)
(29,11,1)
(3,27,2)
(51,9,2)
(44,18,2)
(27,28,2)
(11,2,2)
(41,9,2)
(59,34,2)
(28,5,2)
(17,34,2)
(15,26,2)
(22,9,2)
(3,55,2)
(27,34,2)
(20,26,2)
(21,36,2)
(33,8,2)
(44,9,2)
(3,18,2)
(46,26,2)
(14,34,2)
(28,21,2)
(65,36,2)
(25,9,2)
(43,9,2)
(23,9,2)
(9,55,2)
(31,9,2)
(65,26,2)
(12,26,2)
(0,18,2)
(60,26,2)
(44,55,2)
(3,9,2)
(21,34,2)
(36,26,2)
(28,34,2)
(34,26,2)
(34,65,2)
(56,26,2)
(9,27,2)
(44,27,2)
(4,26,2)
(62,34,2)
-----------------------------------
(0,printLine(dest)
(1,data)
(2,100-1)
(3,dest[data])
(4,inputBuffer)
(5,short)
(6,100)
(7,100)
(8,100-1)
(9,data < 100)
(10,)
(11,memset(source, \\\'A\\\', 100-1)
(12,break;)
(13,dest)
(14,data)
(15,inputBuffer)
(16,source)
(17,"fgets()
(18,dest[100] = "")
(19,while(1)
(20,CHAR_ARRAY_SIZE)
(21,atoi(inputBuffer)
(22,dest)
(23,\\\'\\\\0\\\')
(24,"")
(25,data)
(26,1)
(27,data = (short)
(28,(short)
(29,source)
(30,data)
(31,dest[data] = \\\'\\\\0\\\')
(32,)
(33,source[100-1])
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,)
(36,inputBuffer[CHAR_ARRAY_SIZE] = "")
(37,1)
(38,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,\\\'A\\\')
(40,data)
(41,data)
(42,)
(43,source)
(44,memmove(dest, source, data)
(45,\\\'\\\\0\\\')
(46,"")
(47,RET)
(48,)
(49,inputBuffer)
(50,dest)
(51,dest)
(52,source)
(53,)
(54,0)
(55,data = 0)
(56,NULL)
(57,source[100-1] = \\\'\\\\0\\\')
(58,)
(59,inputBuffer)
(60,stdin)
(61,dest)
(62,printLine("fgets()
(63,if (data < 100)
(64,1)
(65,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(66,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^