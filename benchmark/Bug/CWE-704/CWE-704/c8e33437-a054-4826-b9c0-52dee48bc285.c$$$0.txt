-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_53d_badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_53d_badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_53d_badSink(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_53d_badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(23,37,0)
(38,15,0)
(6,19,0)
(31,1,0)
(1,16,0)
(17,9,0)
(35,37,0)
(37,35,0)
(34,43,0)
(43,20,0)
(28,5,0)
(33,13,0)
(0,5,0)
(10,30,0)
(43,25,0)
(41,25,0)
(1,13,0)
(15,16,0)
(19,13,0)
(19,6,0)
(35,12,0)
(20,43,0)
(20,13,0)
(19,41,0)
(5,1,0)
(20,18,0)
(26,25,0)
(18,16,0)
(22,30,0)
(9,16,0)
(8,20,0)
(15,13,0)
(40,1,0)
(9,13,0)
(11,26,0)
(1,5,0)
(29,41,0)
(32,26,0)
(41,19,0)
(3,16,0)
(30,13,0)
(13,16,0)
(7,16,0)
(14,43,0)
(13,19,0)
(5,25,0)
(4,2,0)
(21,18,0)
(35,37,1)
(9,17,1)
(8,1,1)
(0,28,1)
(41,29,1)
(28,31,1)
(20,43,1)
(15,13,1)
(10,13,1)
(32,11,1)
(13,19,1)
(19,41,1)
(22,10,1)
(5,25,1)
(23,30,1)
(34,8,1)
(5,0,1)
(1,5,1)
(30,13,1)
(17,18,1)
(19,6,1)
(33,26,1)
(30,22,1)
(20,13,1)
(29,33,1)
(43,14,1)
(9,13,1)
(21,20,1)
(43,25,1)
(37,23,1)
(26,25,1)
(18,21,1)
(38,9,1)
(39,15,1)
(40,30,1)
(31,40,1)
(26,32,1)
(15,38,1)
(14,34,1)
(40,35,1)
(39,26,1)
(41,25,1)
(1,13,1)
(35,30,2)
(5,26,2)
(15,13,2)
(33,26,2)
(1,13,2)
(21,26,2)
(35,37,2)
(9,13,2)
(23,30,2)
(29,26,2)
(0,26,2)
(43,25,2)
(30,26,2)
(38,26,2)
(8,26,2)
(19,6,2)
(1,26,2)
(14,26,2)
(10,26,2)
(20,26,2)
(43,26,2)
(26,25,2)
(15,26,2)
(13,26,2)
(30,13,2)
(40,26,2)
(20,13,2)
(34,26,2)
(18,26,2)
(41,25,2)
(17,26,2)
(20,43,2)
(31,26,2)
(1,5,2)
(19,41,2)
(5,25,2)
(9,26,2)
(41,26,2)
(19,26,2)
(28,26,2)
(13,19,2)
(37,30,2)
(22,26,2)
-----------------------------------
(0,1)
(1,memset(dataBuffer, \'A\', data-1)
(2,)
(3,dataBuffer)
(4,if (data < 100)
(5,data-1)
(6,char *)
(7,if (dataBuffer == NULL)
(8,dataBuffer)
(9,printLine(dataBuffer)
(10,dataBuffer)
(11,data)
(12,)
(13,* dataBuffer = (char *)
(14,1)
(15,free(dataBuffer)
(16,)
(17,dataBuffer)
(18,dataBuffer[data-1] = \'\\\\0\')
(19,(char *)
(20,dataBuffer[data-1])
(21,\'\\\\0\')
(22,NULL)
(23,1)
(24,dataBuffer[data-1] = '\\\\0')
(25,int data)
(26,data < 100)
(27,memset(dataBuffer, 'A', data-1)
(28,data)
(29,data)
(30,dataBuffer == NULL)
(31,'A')
(32,100)
(33,dataBuffer)
(34,data)
(35,exit(-1)
(36,'\\\\0')
(37,-1)
(38,dataBuffer)
(39,RET)
(40,dataBuffer)
(41,malloc(data)
(42,\'A\')
(43,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^