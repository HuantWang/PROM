-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_53d_badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_53d_badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_53d_badSink(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_53d_badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(4,32,0)
(43,21,0)
(29,18,0)
(28,35,0)
(32,4,0)
(15,21,0)
(18,21,0)
(36,21,0)
(8,17,0)
(17,41,0)
(30,15,0)
(22,21,0)
(28,15,0)
(5,30,0)
(9,6,0)
(33,41,0)
(25,9,0)
(2,35,0)
(0,36,0)
(23,36,0)
(11,7,0)
(14,3,0)
(10,25,0)
(4,3,0)
(20,33,0)
(12,36,0)
(35,21,0)
(28,33,0)
(3,41,0)
(4,15,0)
(13,23,0)
(15,4,0)
(16,43,0)
(40,33,0)
(18,15,0)
(43,15,0)
(3,4,0)
(36,15,0)
(24,17,0)
(31,28,0)
(9,25,0)
(23,41,0)
(1,23,0)
(38,15,0)
(36,23,0)
(26,30,0)
(19,21,0)
(33,28,0)
(14,38,1)
(0,9,1)
(18,15,1)
(18,29,1)
(3,41,1)
(33,41,1)
(17,8,1)
(1,12,1)
(23,41,1)
(40,20,1)
(4,3,1)
(28,33,1)
(17,41,1)
(2,28,1)
(10,30,1)
(29,35,1)
(36,15,1)
(9,25,1)
(35,2,1)
(3,14,1)
(30,15,1)
(27,17,1)
(16,18,1)
(20,31,1)
(33,40,1)
(26,5,1)
(23,13,1)
(36,23,1)
(43,15,1)
(15,4,1)
(31,36,1)
(28,15,1)
(13,1,1)
(0,30,1)
(30,26,1)
(8,24,1)
(25,10,1)
(12,0,1)
(43,16,1)
(4,32,1)
(5,15,1)
(38,17,1)
(27,43,1)
(5,17,2)
(28,33,2)
(33,41,2)
(36,17,2)
(9,30,2)
(15,17,2)
(3,17,2)
(16,17,2)
(43,17,2)
(26,17,2)
(28,17,2)
(25,30,2)
(36,15,2)
(4,17,2)
(30,17,2)
(43,15,2)
(15,4,2)
(14,17,2)
(1,17,2)
(12,17,2)
(35,17,2)
(4,32,2)
(4,3,2)
(9,25,2)
(23,41,2)
(38,17,2)
(31,17,2)
(18,17,2)
(23,17,2)
(28,15,2)
(30,15,2)
(18,15,2)
(17,41,2)
(0,17,2)
(40,17,2)
(20,17,2)
(2,17,2)
(3,41,2)
(10,30,2)
(29,17,2)
(33,17,2)
(13,17,2)
(36,23,2)
-----------------------------------
(0,dataBuffer)
(1,data)
(2,'\\\\0')
(3,malloc(data)
(4,(char *)
(5,dataBuffer)
(6,)
(7,)
(8,100)
(9,exit(-1)
(10,1)
(11,if (data < 100)
(12,\'A\')
(13,1)
(14,data)
(15,* dataBuffer = (char *)
(16,dataBuffer)
(17,data < 100)
(18,printLine(dataBuffer)
(19,if (dataBuffer == NULL)
(20,data)
(21,)
(22,dataBuffer)
(23,data-1)
(24,data)
(25,-1)
(26,NULL)
(27,RET)
(28,dataBuffer[data-1])
(29,dataBuffer)
(30,dataBuffer == NULL)
(31,dataBuffer)
(32,char *)
(33,data-1)
(34,'A')
(35,dataBuffer[data-1] = \'\\\\0\')
(36,memset(dataBuffer, \'A\', data-1)
(37,dataBuffer[data-1] = '\\\\0')
(38,dataBuffer)
(39,memset(dataBuffer, 'A', data-1)
(40,1)
(41,int data)
(42,\'\\\\0\')
(43,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^