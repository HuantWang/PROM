-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
45,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,40,42,46,47,49,53,55
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_char_15_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_char_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(5,10,0)
(7,10,0)
(23,2,0)
(19,25,0)
(7,14,0)
(26,21,0)
(21,24,0)
(11,25,0)
(4,7,0)
(14,7,0)
(8,27,0)
(22,24,0)
(16,19,0)
(10,9,0)
(27,2,0)
(7,19,0)
(7,24,0)
(21,13,0)
(24,13,0)
(20,13,0)
(10,2,0)
(3,16,0)
(15,2,0)
(18,2,0)
(9,10,0)
(6,2,0)
(12,19,0)
(13,25,0)
(19,16,0)
(1,25,0)
(24,7,0)
(7,10,1)
(8,17,1)
(22,6,1)
(21,26,1)
(0,21,1)
(19,16,1)
(5,17,1)
(21,24,1)
(24,7,1)
(15,27,1)
(7,14,1)
(3,12,1)
(9,5,1)
(10,9,1)
(17,19,1)
(6,10,1)
(22,15,1)
(4,22,1)
(16,3,1)
(27,8,1)
(7,19,1)
(7,4,1)
(26,24,1)
(19,16,2)
(27,17,2)
(21,24,2)
(15,17,2)
(7,19,2)
(7,10,2)
(10,9,2)
(9,17,2)
(5,17,2)
(10,17,2)
(7,14,2)
(6,17,2)
(24,7,2)
(8,17,2)
-----------------------------------
(0,RET)
(1,data)
(2,)
(3,1)
(4,data)
(5,data)
(6,break;)
(7,(char)
(8,"Benign, fixed string")
(9,RAND32()
(10,data = RAND32()
(11,switch(6)
(12,data)
(13,)
(14,char)
(15,break;)
(16,-1)
(17,6)
(18,case 6:)
(19,data = -1)
(20,charData)
(21,printHexCharLine(charData)
(22,charData)
(23,default:)
(24,charData = (char)
(25,)
(26,charData)
(27,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^