-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,28,0)
(42,24,0)
(47,56,0)
(11,41,0)
(9,18,0)
(56,47,0)
(49,44,0)
(53,24,0)
(19,47,0)
(39,30,0)
(32,10,0)
(3,56,0)
(48,41,0)
(15,37,0)
(45,0,0)
(37,50,0)
(36,30,0)
(42,41,0)
(30,28,0)
(26,50,0)
(2,41,0)
(43,14,0)
(22,37,0)
(28,7,0)
(41,7,0)
(54,7,0)
(38,24,0)
(0,56,0)
(8,41,0)
(37,24,0)
(25,0,0)
(39,62,0)
(61,48,0)
(10,30,0)
(57,41,0)
(20,28,0)
(55,7,0)
(4,13,0)
(16,18,0)
(14,62,0)
(9,8,0)
(33,0,0)
(62,39,0)
(24,41,0)
(21,14,0)
(37,62,0)
(18,9,0)
(50,40,0)
(13,48,0)
(44,6,0)
(27,42,0)
(14,56,0)
(23,8,0)
(52,48,0)
(0,24,0)
(1,18,0)
(60,39,0)
(56,7,0)
(31,10,0)
(62,46,0)
(37,56,0)
(48,13,0)
(0,40,0)
(59,13,0)
(29,7,0)
(10,17,0)
(35,62,0)
(58,10,0)
(17,10,0)
(5,30,0)
(0,62,0)
(63,9,0)
(51,17,0)
(48,13,1)
(45,25,1)
(60,35,1)
(56,47,1)
(27,50,1)
(25,33,1)
(0,24,1)
(42,27,1)
(39,30,1)
(59,61,1)
(30,5,1)
(58,31,1)
(62,39,1)
(39,60,1)
(5,36,1)
(16,63,1)
(36,29,1)
(14,56,1)
(49,17,1)
(27,14,1)
(37,56,1)
(13,4,1)
(33,14,1)
(42,24,1)
(31,30,1)
(4,59,1)
(17,10,1)
(43,8,1)
(12,42,1)
(14,21,1)
(37,62,1)
(14,62,1)
(26,37,1)
(0,56,1)
(0,62,1)
(51,10,1)
(35,17,1)
(18,1,1)
(0,45,1)
(52,24,1)
(37,24,1)
(37,15,1)
(50,26,1)
(9,18,1)
(24,38,1)
(10,32,1)
(1,16,1)
(22,0,1)
(63,48,1)
(15,22,1)
(8,23,1)
(32,58,1)
(21,43,1)
(38,53,1)
(23,9,1)
(53,44,1)
(53,62,1)
(47,19,1)
(10,30,1)
(29,56,1)
(19,3,1)
(61,52,1)
(17,51,1)
(44,49,1)
(22,14,2)
(37,62,2)
(44,17,2)
(17,10,2)
(33,14,2)
(14,62,2)
(39,17,2)
(0,62,2)
(39,30,2)
(25,14,2)
(42,24,2)
(37,56,2)
(45,14,2)
(50,14,2)
(9,18,2)
(35,17,2)
(37,14,2)
(56,47,2)
(15,14,2)
(10,30,2)
(37,24,2)
(62,17,2)
(48,13,2)
(0,14,2)
(0,24,2)
(62,39,2)
(49,17,2)
(60,17,2)
(14,56,2)
(0,56,2)
(26,14,2)
-----------------------------------
(0,memmove(dest, source, data)
(1,1)
(2,dest)
(3,data)
(4,1)
(5,"")
(6,)
(7,)
(8,source[100-1] = \\\'\\\\0\\\')
(9,source[100-1])
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,source)
(12,RET)
(13,100-1)
(14,data < 100)
(15,data)
(16,100)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,100-1)
(19,1)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,100)
(22,dest)
(23,\\\'\\\\0\\\')
(24,dest[100] = "")
(25,source)
(26,\\\'\\\\0\\\')
(27,dest)
(28,)
(29,goto source;)
(30,inputBuffer[CHAR_ARRAY_SIZE] = "")
(31,inputBuffer)
(32,stdin)
(33,dest)
(34,inputBuffer)
(35,data)
(36,inputBuffer)
(37,dest[data])
(38,"")
(39,atoi(inputBuffer)
(40,)
(41,)
(42,printLine(dest)
(43,data)
(44,printLine("fgets()
(45,data)
(46,)
(47,-1)
(48,memset(source, \\\'A\\\', 100-1)
(49,"fgets()
(50,dest[data] = \\\'\\\\0\\\')
(51,NULL)
(52,source)
(53,dest)
(54,data)
(55,source:)
(56,data = -1)
(57,if (data < 100)
(58,CHAR_ARRAY_SIZE)
(59,100)
(60,inputBuffer)
(61,\\\'A\\\')
(62,data = atoi(inputBuffer)
(63,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^