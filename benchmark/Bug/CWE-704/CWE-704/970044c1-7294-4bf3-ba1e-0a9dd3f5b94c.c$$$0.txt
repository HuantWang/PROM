-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(18,31,0)
(7,17,0)
(19,0,0)
(41,29,0)
(29,19,0)
(2,50,0)
(3,6,0)
(50,0,0)
(37,28,0)
(52,7,0)
(1,16,0)
(42,19,0)
(11,25,0)
(48,0,0)
(16,11,0)
(29,8,0)
(6,3,0)
(15,25,0)
(7,25,0)
(33,0,0)
(20,31,0)
(27,11,0)
(44,22,0)
(4,15,0)
(38,32,0)
(22,32,0)
(17,32,0)
(28,50,0)
(34,32,0)
(35,19,0)
(25,11,0)
(9,25,0)
(26,2,0)
(11,27,0)
(46,22,0)
(22,25,0)
(40,28,0)
(11,16,0)
(43,32,0)
(25,32,0)
(12,42,0)
(24,43,0)
(54,32,0)
(14,6,0)
(53,0,0)
(19,29,0)
(54,25,0)
(47,54,0)
(13,17,0)
(5,15,0)
(45,2,0)
(28,7,0)
(29,23,0)
(31,22,0)
(7,28,0)
(42,50,0)
(23,29,0)
(16,50,0)
(22,31,0)
(31,50,0)
(3,36,0)
(43,25,0)
(10,50,0)
(50,42,0)
(46,44,1)
(13,7,1)
(6,14,1)
(7,25,1)
(14,15,1)
(3,6,1)
(29,8,1)
(54,25,1)
(43,25,1)
(16,1,1)
(12,10,1)
(15,4,1)
(29,23,1)
(40,52,1)
(5,25,1)
(45,26,1)
(26,50,1)
(54,47,1)
(47,43,1)
(37,40,1)
(42,19,1)
(2,50,1)
(24,17,1)
(17,13,1)
(52,22,1)
(11,27,1)
(7,28,1)
(20,18,1)
(16,50,1)
(31,50,1)
(11,16,1)
(31,20,1)
(25,11,1)
(22,25,1)
(43,24,1)
(21,54,1)
(4,5,1)
(21,2,1)
(19,29,1)
(42,12,1)
(29,41,1)
(44,15,1)
(44,3,1)
(18,46,1)
(2,45,1)
(15,25,1)
(41,35,1)
(22,31,1)
(1,9,1)
(28,37,1)
(50,42,1)
(28,50,1)
(10,19,1)
(9,2,1)
(29,8,2)
(40,2,2)
(22,25,2)
(50,42,2)
(7,28,2)
(11,16,2)
(46,2,2)
(24,2,2)
(11,2,2)
(54,2,2)
(7,25,2)
(28,2,2)
(29,23,2)
(54,25,2)
(16,50,2)
(52,2,2)
(43,2,2)
(2,50,2)
(47,2,2)
(31,50,2)
(43,25,2)
(4,2,2)
(22,2,2)
(9,2,2)
(3,15,2)
(17,2,2)
(15,2,2)
(31,2,2)
(25,2,2)
(11,27,2)
(28,50,2)
(14,15,2)
(22,31,2)
(1,2,2)
(3,6,2)
(25,11,2)
(18,2,2)
(44,2,2)
(7,2,2)
(13,2,2)
(15,25,2)
(37,2,2)
(5,2,2)
(42,19,2)
(19,29,2)
(6,15,2)
(16,2,2)
(20,2,2)
-----------------------------------
(0,)
(1,data)
(2,data < 100)
(3,exit(-1)
(4,NULL)
(5,dataBuffer)
(6,-1)
(7,dataBuffer[data-1])
(8,void * dataVoidPtr)
(9,dataBuffer)
(10,data)
(11,(char *)
(12,dataPtr)
(13,\'\\\\0\')
(14,1)
(15,dataBuffer == NULL)
(16,malloc(data)
(17,dataBuffer[data-1] = \'\\\\0\')
(18,data)
(19,* dataPtr = (int *)
(20,1)
(21,RET)
(22,memset(dataBuffer, 'A', data-1)
(23,int *)
(24,dataBuffer)
(25,* dataBuffer = (char *)
(26,data)
(27,char *)
(28,data-1)
(29,(int *)
(30,dataBuffer[data-1] = '\\\\0')
(31,data-1)
(32,)
(33,data)
(34,dataBuffer)
(35,dataPtr)
(36,)
(37,1)
(38,if (dataBuffer == NULL)
(39,memset(dataBuffer, \'A\', data-1)
(40,data)
(41,dataVoidPtr)
(42,*dataPtr)
(43,printLine(dataBuffer)
(44,dataBuffer)
(45,100)
(46,\'A\')
(47,dataBuffer)
(48,if (data < 100)
(49,'A')
(50,data = (*dataPtr)
(51,'\\\\0')
(52,dataBuffer)
(53,dataPtr)
(54,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^