-----label-----
1
-----code-----
static short badSource(short data)
{
    if(badStatic)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
15,16
16,17
16,18
18,19
18,20
18,21
20,21
21,22
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,6,8,12,17,19,22,24,29,31,33,35,37,42,45,46,49,51,56,57,60
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    return data;}
if(badStatic)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
badStatic
badStatic
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(4,7,0)
(2,28,0)
(14,2,0)
(0,26,0)
(11,10,0)
(16,28,0)
(20,4,0)
(3,6,0)
(13,28,0)
(4,11,0)
(25,11,0)
(11,25,0)
(23,11,0)
(11,17,0)
(28,2,0)
(18,28,0)
(5,0,0)
(27,6,0)
(9,7,0)
(24,6,0)
(4,17,0)
(15,25,0)
(22,24,0)
(25,15,0)
(19,4,0)
(8,24,0)
(25,22,0)
(6,1,0)
(21,24,0)
(29,22,0)
(22,25,0)
(28,24,0)
(20,4,1)
(24,21,1)
(19,11,1)
(25,22,1)
(11,25,1)
(4,17,1)
(18,16,1)
(0,5,1)
(22,24,1)
(2,14,1)
(11,17,1)
(29,23,1)
(8,12,1)
(5,2,1)
(28,18,1)
(4,19,1)
(21,8,1)
(22,29,1)
(2,28,1)
(19,0,1)
(14,28,1)
(4,11,1)
(16,13,1)
(19,12,1)
(23,2,1)
(13,24,1)
(28,24,1)
(25,15,1)
(20,4,2)
(25,2,2)
(14,12,2)
(11,2,2)
(16,12,2)
(23,2,2)
(28,12,2)
(24,12,2)
(22,2,2)
(5,2,2)
(18,12,2)
(11,25,2)
(21,12,2)
(11,17,2)
(25,22,2)
(4,17,2)
(4,11,2)
(25,15,2)
(29,2,2)
(22,24,2)
(2,12,2)
(13,12,2)
(0,2,2)
(2,28,2)
(28,24,2)
(8,12,2)
-----------------------------------
(0,printLine("fgets()
(1,)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,return data;)
(5,"fgets()
(6,)
(7,)
(8,inputBuffer)
(9,if(badStatic)
(10,)
(11,data = (short)
(12,badStatic)
(13,inputBuffer)
(14,NULL)
(15,short)
(16,CHAR_ARRAY_SIZE)
(17,short data)
(18,stdin)
(19,data)
(20,RET)
(21,"")
(22,atoi(inputBuffer)
(23,data)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,(short)
(26,)
(27,inputBuffer)
(28,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^