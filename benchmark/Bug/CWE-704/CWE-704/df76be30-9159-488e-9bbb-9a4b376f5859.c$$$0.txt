-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
70,72
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,67,71,72,74,78,80
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_11_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(32,7,0)
(20,35,0)
(29,37,0)
(12,37,0)
(10,28,0)
(2,8,0)
(28,10,0)
(34,14,0)
(34,29,0)
(9,26,0)
(37,3,0)
(38,0,0)
(17,18,0)
(4,37,0)
(19,9,0)
(13,8,0)
(18,0,0)
(32,27,0)
(31,7,0)
(30,34,0)
(32,8,0)
(22,14,0)
(27,32,0)
(23,2,0)
(32,10,0)
(8,2,0)
(6,29,0)
(35,18,0)
(10,0,0)
(8,15,0)
(24,32,0)
(11,10,0)
(14,34,0)
(33,34,0)
(7,32,0)
(36,0,0)
(35,7,0)
(2,29,0)
(5,34,0)
(1,28,0)
(7,18,0)
(16,29,0)
(13,14,1)
(21,35,1)
(32,8,1)
(34,5,1)
(22,34,1)
(31,25,1)
(34,29,1)
(14,22,1)
(25,10,1)
(32,27,1)
(6,25,1)
(8,2,1)
(35,7,1)
(5,33,1)
(14,34,1)
(19,14,1)
(28,1,1)
(16,6,1)
(1,11,1)
(9,19,1)
(10,28,1)
(20,7,1)
(2,29,1)
(29,16,1)
(31,8,1)
(24,31,1)
(32,24,1)
(2,23,1)
(30,29,1)
(35,20,1)
(32,10,1)
(7,32,1)
(31,9,1)
(33,30,1)
(23,13,1)
(14,25,2)
(34,29,2)
(13,14,2)
(33,25,2)
(16,25,2)
(5,25,2)
(8,14,2)
(34,25,2)
(32,10,2)
(7,32,2)
(14,34,2)
(30,25,2)
(8,2,2)
(9,14,2)
(19,14,2)
(2,14,2)
(22,25,2)
(32,27,2)
(35,7,2)
(10,28,2)
(6,25,2)
(23,14,2)
(29,25,2)
(2,29,2)
(32,8,2)
-----------------------------------
(0,)
(1,1)
(2,atoi(inputBuffer)
(3,)
(4,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,stdin)
(6,inputBuffer)
(7,charData = (char)
(8,data = atoi(inputBuffer)
(9,printLine("fgets()
(10,data = -1)
(11,data)
(12,inputBuffer)
(13,data)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,)
(16,"")
(17,charData)
(18,)
(19,"fgets()
(20,charData)
(21,RET)
(22,NULL)
(23,inputBuffer)
(24,data)
(25,globalReturnsTrue()
(26,)
(27,char)
(28,-1)
(29,inputBuffer[CHAR_ARRAY_SIZE] = "")
(30,inputBuffer)
(31,charData)
(32,(char)
(33,CHAR_ARRAY_SIZE)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,printHexCharLine(charData)
(36,data)
(37,)
(38,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^