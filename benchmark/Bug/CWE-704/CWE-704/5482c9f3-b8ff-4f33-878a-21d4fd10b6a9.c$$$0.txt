-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_42_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
18,19
18,20
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_42_bad(){    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_42_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_42_bad
{    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,3,0)
(24,32,0)
(49,4,0)
(10,32,0)
(2,24,0)
(22,6,0)
(45,11,0)
(22,17,0)
(40,19,0)
(8,14,0)
(27,9,0)
(28,40,0)
(27,21,0)
(38,6,0)
(22,32,0)
(6,22,0)
(42,24,0)
(44,3,0)
(17,32,0)
(7,42,0)
(18,40,0)
(46,40,0)
(30,49,0)
(46,4,0)
(11,34,0)
(3,4,0)
(40,28,0)
(37,46,0)
(51,34,0)
(14,17,0)
(0,17,0)
(34,17,0)
(36,19,0)
(25,6,0)
(9,27,0)
(4,19,0)
(5,17,0)
(23,17,0)
(3,42,0)
(17,34,0)
(0,32,0)
(42,17,0)
(15,0,0)
(39,32,0)
(20,19,0)
(16,22,0)
(5,32,0)
(1,22,0)
(34,51,0)
(34,11,0)
(48,28,0)
(31,14,0)
(43,3,0)
(41,9,0)
(4,46,0)
(6,4,0)
(12,4,0)
(47,49,0)
(33,5,0)
(11,4,0)
(15,5,1)
(27,9,1)
(14,17,1)
(4,46,1)
(28,48,1)
(16,14,1)
(30,47,1)
(11,4,1)
(41,14,1)
(6,4,1)
(31,8,1)
(49,30,1)
(43,44,1)
(12,40,1)
(16,27,1)
(2,42,1)
(44,7,1)
(22,17,1)
(29,49,1)
(14,31,1)
(23,49,1)
(3,4,1)
(1,16,1)
(37,12,1)
(34,51,1)
(8,17,1)
(47,4,1)
(5,17,1)
(38,1,1)
(0,17,1)
(3,43,1)
(25,38,1)
(9,41,1)
(0,15,1)
(46,37,1)
(6,25,1)
(11,45,1)
(42,17,1)
(42,3,1)
(24,2,1)
(48,18,1)
(40,28,1)
(34,11,1)
(17,34,1)
(22,6,1)
(29,0,1)
(45,23,1)
(33,24,1)
(46,40,1)
(5,33,1)
(49,4,1)
(7,22,1)
(42,17,2)
(4,46,2)
(14,17,2)
(3,4,2)
(6,4,2)
(22,17,2)
(40,28,2)
(38,49,2)
(44,49,2)
(22,49,2)
(6,49,2)
(15,49,2)
(27,14,2)
(46,40,2)
(0,49,2)
(45,49,2)
(7,49,2)
(17,34,2)
(14,49,2)
(8,49,2)
(5,49,2)
(11,49,2)
(41,14,2)
(3,49,2)
(27,9,2)
(11,4,2)
(24,49,2)
(42,49,2)
(2,49,2)
(43,49,2)
(5,17,2)
(34,51,2)
(49,4,2)
(34,49,2)
(23,49,2)
(9,14,2)
(1,49,2)
(34,11,2)
(42,3,2)
(33,49,2)
(16,49,2)
(31,49,2)
(0,17,2)
(25,49,2)
(22,6,2)
(17,49,2)
-----------------------------------
(0,free(dataBuffer)
(1,'A')
(2,'\\\\0')
(3,data-1)
(4,data = badSource(data)
(5,printLine(dataBuffer)
(6,data-1)
(7,dataBuffer)
(8,dataBuffer)
(9,-1)
(10,if (dataBuffer == NULL)
(11,malloc(data)
(12,data)
(13,\'A\')
(14,dataBuffer == NULL)
(15,dataBuffer)
(16,dataBuffer)
(17,* dataBuffer = (char *)
(18,data)
(19,)
(20,if (data < 100)
(21,)
(22,memset(dataBuffer, 'A', data-1)
(23,dataBuffer)
(24,dataBuffer[data-1] = '\\\\0')
(25,1)
(26,dataBuffer[data-1] = \'\\\\0\')
(27,exit(-1)
(28,-1)
(29,RET)
(30,100)
(31,NULL)
(32,)
(33,dataBuffer)
(34,(char *)
(35,\'\\\\0\')
(36,data)
(37,data)
(38,data)
(39,dataBuffer)
(40,data = -1)
(41,1)
(42,dataBuffer[data-1])
(43,1)
(44,data)
(45,data)
(46,badSource(data)
(47,data)
(48,1)
(49,data < 100)
(50,memset(dataBuffer, \'A\', data-1)
(51,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^