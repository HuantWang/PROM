-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_strncpy_10_bad()
CWE194_Unexpected_Sign_Extension__rand_strncpy_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalTrue
globalTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(21,0,0)
(46,28,0)
(9,0,0)
(25,42,0)
(4,17,0)
(28,34,0)
(25,20,0)
(8,25,0)
(6,10,0)
(12,34,0)
(35,19,0)
(2,35,0)
(15,2,0)
(26,19,0)
(27,34,0)
(45,20,0)
(0,42,0)
(5,41,0)
(46,32,0)
(34,12,0)
(44,19,0)
(40,4,0)
(39,22,0)
(36,25,0)
(18,19,0)
(19,10,0)
(33,46,0)
(7,10,0)
(41,19,0)
(38,35,0)
(29,42,0)
(48,22,0)
(3,46,0)
(14,46,0)
(43,37,0)
(17,37,0)
(28,47,0)
(24,35,0)
(42,10,0)
(25,35,0)
(30,17,0)
(46,35,0)
(1,41,0)
(22,41,0)
(46,42,0)
(20,32,0)
(31,42,0)
(2,19,0)
(41,22,0)
(25,28,0)
(34,28,0)
(17,4,0)
(34,27,0)
(23,28,0)
(0,28,0)
(37,19,0)
(13,4,0)
(0,28,1)
(2,35,1)
(17,4,1)
(24,38,1)
(0,42,1)
(16,2,1)
(35,24,1)
(25,35,1)
(45,25,1)
(40,30,1)
(48,39,1)
(5,35,1)
(33,3,1)
(3,0,1)
(38,11,1)
(4,13,1)
(28,34,1)
(41,22,1)
(15,0,1)
(37,43,1)
(23,11,1)
(46,14,1)
(1,5,1)
(21,37,1)
(25,36,1)
(29,31,1)
(46,42,1)
(14,33,1)
(43,17,1)
(9,21,1)
(34,12,1)
(22,48,1)
(38,28,1)
(46,28,1)
(0,9,1)
(34,27,1)
(12,23,1)
(42,29,1)
(15,20,1)
(25,28,1)
(11,42,1)
(20,45,1)
(8,46,1)
(39,1,1)
(25,42,1)
(46,35,1)
(30,41,1)
(13,40,1)
(36,8,1)
(2,15,1)
(34,11,2)
(36,0,2)
(23,11,2)
(46,0,2)
(45,0,2)
(0,42,2)
(25,28,2)
(41,22,2)
(8,0,2)
(20,0,2)
(12,11,2)
(46,35,2)
(28,34,2)
(0,28,2)
(46,42,2)
(28,11,2)
(25,35,2)
(34,12,2)
(3,0,2)
(14,0,2)
(33,0,2)
(46,28,2)
(34,27,2)
(2,35,2)
(25,0,2)
(25,42,2)
(17,4,2)
-----------------------------------
(0,data < 100)
(1,\\\'A\\\')
(2,printLine(dest)
(3,dest)
(4,100-1)
(5,source)
(6,data)
(7,if(globalTrue)
(8,dest)
(9,100)
(10,)
(11,globalTrue)
(12,RAND32()
(13,1)
(14,data)
(15,dest)
(16,RET)
(17,source[100-1])
(18,if (data < 100)
(19,)
(20,dest[data] = \\\'\\\\0\\\')
(21,data)
(22,100-1)
(23,data)
(24,"")
(25,dest[data])
(26,dest)
(27,short)
(28,data = (short)
(29,0)
(30,source)
(31,data)
(32,)
(33,source)
(34,(short)
(35,dest[100] = "")
(36,data)
(37,source[100-1] = \\\'\\\\0\\\')
(38,dest)
(39,100)
(40,100)
(41,memset(source, \\\'A\\\', 100-1)
(42,data = 0)
(43,\\\'\\\\0\\\')
(44,source)
(45,\\\'\\\\0\\\')
(46,strncpy(dest, source, data)
(47,)
(48,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^