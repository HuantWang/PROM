-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
46,47
48,49
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
59,60
59,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,34,37,39,41,43,47,49,50,52,53,58,60,61,62,66,67,72,74,76,78,83,85,86,90,92
-----computeFrom-----
12,13
12,14
51,52
51,53
55,56
55,57
59,60
59,61
64,65
64,66
80,81
80,82
-----guardedBy-----
66,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_01_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_01_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(13,22,0)
(6,13,0)
(9,41,0)
(19,36,0)
(11,22,0)
(38,22,0)
(15,46,0)
(37,11,0)
(23,2,0)
(14,45,0)
(2,22,0)
(9,33,0)
(1,36,0)
(2,46,0)
(22,0,0)
(11,45,0)
(17,36,0)
(36,0,0)
(20,36,0)
(12,41,0)
(10,22,0)
(41,36,0)
(42,33,0)
(7,46,0)
(39,0,0)
(8,38,0)
(38,45,0)
(18,38,0)
(46,2,0)
(27,21,0)
(22,10,0)
(44,9,0)
(28,31,0)
(34,21,0)
(43,22,0)
(38,31,0)
(29,10,0)
(4,11,0)
(40,20,0)
(46,0,0)
(1,45,0)
(5,33,0)
(25,28,0)
(3,45,0)
(30,36,0)
(45,36,0)
(11,28,0)
(20,21,0)
(16,20,0)
(21,20,0)
(35,38,0)
(32,1,0)
(33,9,0)
(26,13,0)
(33,5,1)
(1,45,1)
(14,3,1)
(38,45,1)
(11,22,1)
(35,13,1)
(28,25,1)
(41,12,1)
(2,23,1)
(2,22,1)
(10,29,1)
(32,28,1)
(42,44,1)
(24,1,1)
(23,7,1)
(32,13,1)
(45,14,1)
(4,37,1)
(3,46,1)
(38,8,1)
(13,6,1)
(27,34,1)
(20,21,1)
(13,22,1)
(18,35,1)
(12,9,1)
(21,27,1)
(16,40,1)
(44,20,1)
(22,10,1)
(40,45,1)
(15,22,1)
(9,33,1)
(11,45,1)
(37,38,1)
(1,32,1)
(8,18,1)
(5,42,1)
(38,22,1)
(29,43,1)
(34,16,1)
(46,2,1)
(26,41,1)
(6,26,1)
(25,11,1)
(11,4,1)
(7,15,1)
(4,13,2)
(9,33,2)
(25,13,2)
(20,21,2)
(8,13,2)
(18,13,2)
(38,13,2)
(11,45,2)
(37,13,2)
(38,45,2)
(13,22,2)
(2,22,2)
(1,45,2)
(22,10,2)
(28,13,2)
(46,2,2)
(38,22,2)
(35,13,2)
(11,13,2)
(11,22,2)
-----------------------------------
(0,)
(1,printLine(dest)
(2,&data)
(3,dest)
(4,data)
(5,1)
(6,100)
(7,"%d")
(8,data)
(9,source[100-1])
(10,-1)
(11,dest[data])
(12,\\\'\\\\0\\\')
(13,data < 100)
(14,"")
(15,stdin)
(16,\\\'A\\\')
(17,if (data < 100)
(18,source)
(19,dest)
(20,memset(source, \\\'A\\\', 100-1)
(21,100-1)
(22,data = -1)
(23,data)
(24,RET)
(25,\\\'\\\\0\\\')
(26,data)
(27,1)
(28,dest[data] = \\\'\\\\0\\\')
(29,1)
(30,source)
(31,)
(32,dest)
(33,100-1)
(34,100)
(35,dest)
(36,)
(37,dest)
(38,memcpy(dest, source, data)
(39,data)
(40,source)
(41,source[100-1] = \\\'\\\\0\\\')
(42,100)
(43,data)
(44,source)
(45,dest[100] = "")
(46,fscanf(stdin, "%d", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^