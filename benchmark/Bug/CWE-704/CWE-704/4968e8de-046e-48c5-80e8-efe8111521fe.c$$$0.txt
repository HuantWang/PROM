-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,31,35,37,40,42,46,48,53,55,59,61,62,65,66,71,74,75,76,80,82,86,88
-----computeFrom-----
21,22
21,23
44,45
44,46
63,64
63,65
68,69
68,70
72,73
72,74
-----guardedBy-----
23,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_63b_badSink(short * dataPtr){    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__rand_malloc_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,40,0)
(26,17,0)
(36,22,0)
(9,45,0)
(25,4,0)
(16,6,0)
(27,2,0)
(48,33,0)
(6,22,0)
(39,21,0)
(45,12,0)
(13,39,0)
(30,4,0)
(39,32,0)
(28,22,0)
(11,22,0)
(14,21,0)
(4,22,0)
(12,15,0)
(12,45,0)
(12,22,0)
(11,40,0)
(33,27,0)
(31,32,0)
(42,44,0)
(23,31,0)
(32,26,0)
(0,40,0)
(15,12,0)
(31,6,0)
(41,32,0)
(45,32,0)
(22,40,0)
(21,0,0)
(1,10,0)
(21,22,0)
(34,44,0)
(6,40,0)
(19,39,0)
(26,32,0)
(32,10,0)
(22,12,0)
(18,6,0)
(21,39,0)
(47,31,0)
(5,40,0)
(3,0,0)
(24,11,0)
(20,26,0)
(6,31,0)
(28,40,0)
(7,10,0)
(27,33,0)
(43,28,0)
(44,32,0)
(44,32,1)
(13,14,1)
(48,4,1)
(6,22,1)
(21,39,1)
(45,32,1)
(24,28,1)
(18,4,1)
(20,41,1)
(33,48,1)
(12,45,1)
(32,26,1)
(4,22,1)
(0,3,1)
(44,42,1)
(31,47,1)
(6,31,1)
(34,32,1)
(27,33,1)
(26,17,1)
(25,22,1)
(12,15,1)
(42,34,1)
(39,19,1)
(31,32,1)
(16,18,1)
(28,43,1)
(22,12,1)
(3,21,1)
(11,24,1)
(36,44,1)
(43,0,1)
(45,9,1)
(14,6,1)
(28,22,1)
(18,27,1)
(11,22,1)
(23,16,1)
(9,36,1)
(47,23,1)
(4,30,1)
(21,22,1)
(26,20,1)
(39,32,1)
(35,44,1)
(30,25,1)
(19,13,1)
(35,11,1)
(36,44,2)
(6,22,2)
(21,22,2)
(33,4,2)
(24,44,2)
(21,39,2)
(22,12,2)
(13,44,2)
(19,44,2)
(47,44,2)
(14,44,2)
(23,44,2)
(26,17,2)
(27,33,2)
(43,44,2)
(11,44,2)
(45,44,2)
(3,44,2)
(9,44,2)
(22,44,2)
(12,45,2)
(16,44,2)
(28,44,2)
(6,44,2)
(6,31,2)
(21,44,2)
(28,22,2)
(4,44,2)
(30,44,2)
(27,4,2)
(45,32,2)
(44,32,2)
(31,32,2)
(12,15,2)
(39,32,2)
(25,44,2)
(48,4,2)
(0,44,2)
(18,44,2)
(31,44,2)
(32,26,2)
(11,22,2)
(12,44,2)
(4,22,2)
(39,44,2)
-----------------------------------
(0,dataBuffer[data-1] = '\\\\0')
(1,data)
(2,)
(3,\'\\\\0\')
(4,dataBuffer == NULL)
(5,dataBuffer)
(6,memset(dataBuffer, 'A', data-1)
(7,if (data < 100)
(8,'\\\\0')
(9,data)
(10,)
(11,free(dataBuffer)
(12,(char *)
(13,data)
(14,dataBuffer)
(15,char *)
(16,'A')
(17,short * dataPtr)
(18,dataBuffer)
(19,1)
(20,dataPtr)
(21,dataBuffer[data-1])
(22,* dataBuffer = (char *)
(23,data)
(24,dataBuffer)
(25,dataBuffer)
(26,*dataPtr)
(27,exit(-1)
(28,printLine(dataBuffer)
(29,\'A\')
(30,NULL)
(31,data-1)
(32,data = *dataPtr)
(33,-1)
(34,data)
(35,RET)
(36,dataBuffer)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,if (dataBuffer == NULL)
(39,data-1)
(40,)
(41,data)
(42,100)
(43,dataBuffer)
(44,data < 100)
(45,malloc(data)
(46,memset(dataBuffer, \'A\', data-1)
(47,1)
(48,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^