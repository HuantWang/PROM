-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
42,44
43,44
43,45
44,45
47,48
47,49
47,50
47,51
47,52
47,53
48,49
49,50
49,51
51,52
51,53
51,54
54,55
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
86,87
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
95,96
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,45,46,50,52,53,57,59,62,64,68,70,75,77,81,83,84,87,88,93,96,97,98,102,104,108,110
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
43,44
43,45
66,67
66,68
85,86
85,87
90,91
90,92
94,95
94,96
-----guardedBy-----
45,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Use a negative number */        data = -1;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,43,0)
(47,19,0)
(3,41,0)
(1,5,0)
(51,43,0)
(6,57,0)
(58,12,0)
(32,17,0)
(9,49,0)
(49,12,0)
(34,22,0)
(43,34,0)
(16,19,0)
(27,45,0)
(17,32,0)
(35,39,0)
(10,4,0)
(46,19,0)
(30,28,0)
(25,5,0)
(23,34,0)
(53,41,0)
(20,45,0)
(44,19,0)
(14,12,0)
(47,39,0)
(39,17,0)
(40,33,0)
(54,5,0)
(4,49,0)
(26,58,0)
(31,13,0)
(49,9,0)
(13,34,0)
(16,12,0)
(36,24,0)
(52,33,0)
(2,8,0)
(45,17,0)
(33,12,0)
(56,29,0)
(4,17,0)
(15,47,0)
(61,32,0)
(17,5,0)
(38,16,0)
(47,12,0)
(45,57,0)
(4,34,0)
(57,8,0)
(39,34,0)
(37,3,0)
(55,5,0)
(49,4,0)
(0,13,0)
(18,3,0)
(28,41,0)
(57,12,0)
(7,47,0)
(39,47,0)
(12,49,0)
(45,34,0)
(13,17,0)
(58,19,0)
(8,19,0)
(11,17,0)
(36,29,0)
(29,36,0)
(12,19,0)
(50,39,0)
(21,41,0)
(57,45,0)
(28,41,1)
(21,17,1)
(41,53,1)
(14,13,1)
(56,33,1)
(8,2,1)
(28,30,1)
(33,52,1)
(4,10,1)
(0,3,1)
(12,49,1)
(35,15,1)
(40,12,1)
(36,29,1)
(30,34,1)
(23,3,1)
(57,45,1)
(16,38,1)
(42,13,1)
(37,18,1)
(4,34,1)
(39,17,1)
(4,17,1)
(17,32,1)
(34,43,1)
(2,57,1)
(58,12,1)
(29,56,1)
(6,47,1)
(61,11,1)
(27,6,1)
(20,27,1)
(47,12,1)
(33,12,1)
(10,14,1)
(43,51,1)
(13,31,1)
(18,41,1)
(7,36,1)
(16,12,1)
(57,12,1)
(51,23,1)
(31,0,1)
(3,41,1)
(13,17,1)
(58,26,1)
(45,34,1)
(3,37,1)
(45,20,1)
(39,34,1)
(49,4,1)
(47,39,1)
(15,7,1)
(26,16,1)
(13,34,1)
(32,61,1)
(38,8,1)
(7,33,1)
(52,40,1)
(53,21,1)
(50,35,1)
(39,50,1)
(42,58,1)
(45,17,1)
(18,28,1)
(49,9,1)
(16,12,2)
(4,34,2)
(16,13,2)
(51,3,2)
(14,13,2)
(47,13,2)
(12,49,2)
(3,3,2)
(36,29,2)
(20,13,2)
(37,3,2)
(50,13,2)
(39,34,2)
(49,9,2)
(6,13,2)
(47,12,2)
(39,13,2)
(27,13,2)
(58,13,2)
(45,13,2)
(57,13,2)
(7,13,2)
(4,13,2)
(34,3,2)
(36,33,2)
(34,43,2)
(18,3,2)
(52,13,2)
(28,41,2)
(49,4,2)
(23,3,2)
(56,33,2)
(8,13,2)
(3,41,2)
(33,12,2)
(13,17,2)
(35,13,2)
(17,32,2)
(33,13,2)
(43,3,2)
(30,3,2)
(13,34,2)
(57,45,2)
(47,39,2)
(45,17,2)
(12,13,2)
(57,12,2)
(45,34,2)
(10,13,2)
(2,13,2)
(39,17,2)
(40,13,2)
(15,13,2)
(49,13,2)
(28,3,2)
(29,33,2)
(38,13,2)
(4,17,2)
(58,12,2)
(26,13,2)
-----------------------------------
(0,data)
(1,for(i = 0; i < 1; i++)
(2,\'\\\\0\')
(3,i < 1)
(4,malloc(data)
(5,)
(6,dataBuffer)
(7,dataBuffer)
(8,dataBuffer[data-1] = '\\\\0')
(9,char *)
(10,data)
(11,data)
(12,* dataBuffer = (char *)
(13,data < 100)
(14,dataBuffer)
(15,'A')
(16,printLine(dataBuffer)
(17,data = -1)
(18,i)
(19,)
(20,1)
(21,i)
(22,)
(23,data)
(24,)
(25,if (data < 100)
(26,dataBuffer)
(27,data)
(28,i++)
(29,-1)
(30,i)
(31,100)
(32,-1)
(33,dataBuffer == NULL)
(34,data = -1)
(35,data)
(36,exit(-1)
(37,1)
(38,dataBuffer)
(39,data-1)
(40,dataBuffer)
(41,i = 0)
(42,RET)
(43,-1)
(44,if (dataBuffer == NULL)
(45,data-1)
(46,dataBuffer)
(47,memset(dataBuffer, 'A', data-1)
(48,memset(dataBuffer, \'A\', data-1)
(49,(char *)
(50,1)
(51,1)
(52,NULL)
(53,0)
(54,i)
(55,data)
(56,1)
(57,dataBuffer[data-1])
(58,free(dataBuffer)
(59,dataBuffer[data-1] = \'\\\\0\')
(60,\'A\')
(61,1)
(62,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^