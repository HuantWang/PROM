-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
46,47
48,49
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
59,60
59,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,34,37,39,41,43,47,49,50,52,53,58,60,61,62,66,67,72,74,76,78,83,85,86,90,92
-----computeFrom-----
12,13
12,14
17,18
17,19
51,52
51,53
55,56
55,57
59,60
59,61
64,65
64,66
80,81
80,82
-----guardedBy-----
66,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_01_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_01_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_01_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(21,18,0)
(29,1,0)
(32,16,0)
(30,9,0)
(6,40,0)
(3,6,0)
(26,27,0)
(4,40,0)
(34,18,0)
(40,6,0)
(39,34,0)
(1,33,0)
(23,25,0)
(34,8,0)
(11,16,0)
(31,1,0)
(44,34,0)
(41,18,0)
(9,18,0)
(18,12,0)
(26,38,0)
(16,24,0)
(22,27,0)
(20,34,0)
(14,21,0)
(35,27,0)
(42,26,0)
(43,11,0)
(19,40,0)
(34,27,0)
(17,33,0)
(37,38,0)
(25,8,0)
(40,38,0)
(12,2,0)
(45,24,0)
(2,12,0)
(13,38,0)
(18,33,0)
(36,12,0)
(24,38,0)
(38,33,0)
(12,18,0)
(15,9,0)
(9,25,0)
(12,36,0)
(10,11,0)
(9,27,0)
(27,38,0)
(16,11,0)
(28,21,0)
(7,38,0)
(0,6,0)
(27,22,1)
(34,18,1)
(26,42,1)
(42,25,1)
(26,27,1)
(5,26,1)
(6,3,1)
(18,12,1)
(23,9,1)
(21,28,1)
(16,11,1)
(10,43,1)
(30,15,1)
(15,34,1)
(9,30,1)
(11,10,1)
(25,23,1)
(21,18,1)
(31,29,1)
(35,18,1)
(43,32,1)
(19,27,1)
(20,44,1)
(34,27,1)
(9,27,1)
(42,21,1)
(1,31,1)
(28,14,1)
(0,4,1)
(3,0,1)
(41,1,1)
(12,36,1)
(39,20,1)
(14,24,1)
(34,39,1)
(32,40,1)
(24,45,1)
(4,19,1)
(22,35,1)
(40,6,1)
(36,41,1)
(9,18,1)
(45,16,1)
(44,21,1)
(12,2,1)
(9,27,2)
(23,21,2)
(20,21,2)
(9,21,2)
(30,21,2)
(9,18,2)
(40,6,2)
(34,18,2)
(16,11,2)
(21,18,2)
(34,21,2)
(25,21,2)
(44,21,2)
(34,27,2)
(15,21,2)
(12,2,2)
(18,12,2)
(12,36,2)
(26,27,2)
(39,21,2)
-----------------------------------
(0,100)
(1,data = 0)
(2,short)
(3,1)
(4,\\\'A\\\')
(5,RET)
(6,100-1)
(7,source)
(8,)
(9,dest[data])
(10,1)
(11,100-1)
(12,(short)
(13,if (data < 100)
(14,data)
(15,dest)
(16,source[100-1])
(17,data)
(18,data = (short)
(19,source)
(20,source)
(21,data < 100)
(22,"")
(23,\\\'\\\\0\\\')
(24,source[100-1] = \\\'\\\\0\\\')
(25,dest[data] = \\\'\\\\0\\\')
(26,printLine(dest)
(27,dest[100] = "")
(28,100)
(29,data)
(30,data)
(31,0)
(32,source)
(33,)
(34,memcpy(dest, source, data)
(35,dest)
(36,RAND32()
(37,dest)
(38,)
(39,data)
(40,memset(source, \\\'A\\\', 100-1)
(41,data)
(42,dest)
(43,100)
(44,dest)
(45,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^