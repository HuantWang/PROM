-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
63,69
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,66,68,70,73,75,77,79,83,85,86,88,89,94,96,97,98,102,103,108,110,112,114,119,121,122,126,128
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
87,88
87,89
91,92
91,93
95,96
95,97
100,101
100,102
116,117
116,118
-----guardedBy-----
36,56
102,121
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_02_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(29,2,0)
(8,6,0)
(39,26,0)
(29,48,0)
(43,28,0)
(43,48,0)
(43,14,0)
(6,50,0)
(46,32,0)
(11,35,0)
(23,14,0)
(7,32,0)
(27,63,0)
(61,48,0)
(13,26,0)
(35,28,0)
(56,64,0)
(22,8,0)
(29,28,0)
(41,64,0)
(15,17,0)
(43,58,0)
(52,64,0)
(45,58,0)
(46,13,0)
(50,13,0)
(0,38,0)
(6,8,0)
(28,26,0)
(48,20,0)
(9,27,0)
(33,58,0)
(53,0,0)
(36,3,0)
(48,27,0)
(62,43,0)
(17,51,0)
(9,0,0)
(14,2,0)
(55,29,0)
(64,0,0)
(42,32,0)
(58,13,0)
(44,46,0)
(12,13,0)
(57,46,0)
(16,13,0)
(38,24,0)
(25,29,0)
(10,13,0)
(59,9,0)
(49,6,0)
(64,3,0)
(31,28,0)
(54,38,0)
(18,50,0)
(29,58,0)
(27,48,0)
(37,13,0)
(16,58,0)
(21,38,0)
(60,35,0)
(32,46,0)
(34,0,0)
(27,9,0)
(40,28,0)
(3,64,0)
(5,16,0)
(30,26,0)
(35,48,0)
(63,27,0)
(47,29,0)
(19,43,0)
(4,8,0)
(8,4,1)
(40,31,1)
(35,48,1)
(64,0,1)
(43,28,1)
(52,41,1)
(29,47,1)
(27,63,1)
(4,22,1)
(50,18,1)
(0,53,1)
(56,0,1)
(61,3,1)
(62,29,1)
(60,11,1)
(42,7,1)
(29,48,1)
(47,25,1)
(23,43,1)
(43,58,1)
(28,40,1)
(43,48,1)
(45,17,1)
(11,50,1)
(41,56,1)
(3,36,1)
(48,27,1)
(17,15,1)
(55,35,1)
(9,0,1)
(5,35,1)
(9,59,1)
(15,3,1)
(29,58,1)
(35,60,1)
(18,6,1)
(25,55,1)
(64,52,1)
(32,42,1)
(6,8,1)
(34,1,1)
(53,34,1)
(14,23,1)
(36,64,1)
(65,16,1)
(22,49,1)
(59,61,1)
(5,14,1)
(16,5,1)
(16,58,1)
(35,28,1)
(7,57,1)
(45,48,1)
(33,45,1)
(43,19,1)
(1,28,1)
(19,62,1)
(58,33,1)
(29,28,1)
(46,32,1)
(45,1,1)
(49,46,1)
(44,58,1)
(57,44,1)
(27,9,1)
(3,64,1)
(27,3,2)
(3,64,2)
(9,3,2)
(62,35,2)
(6,8,2)
(46,32,2)
(52,1,2)
(29,28,2)
(56,1,2)
(3,1,2)
(25,35,2)
(23,35,2)
(27,9,2)
(29,58,2)
(14,35,2)
(48,27,2)
(47,35,2)
(41,1,2)
(43,58,2)
(29,48,2)
(43,35,2)
(59,3,2)
(43,48,2)
(9,0,2)
(55,35,2)
(35,28,2)
(36,1,2)
(64,0,2)
(53,1,2)
(27,63,2)
(35,48,2)
(48,3,2)
(29,35,2)
(16,58,2)
(43,28,2)
(17,3,2)
(61,3,2)
(15,3,2)
(0,1,2)
(34,1,2)
(19,35,2)
(64,1,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,1)
(2,)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,1)
(5,dest)
(6,source[100-1])
(7,100)
(8,100-1)
(9,atoi(inputBuffer)
(10,if (data < 100)
(11,data)
(12,source)
(13,)
(14,dest[data] = \\\'\\\\0\\\')
(15,"fgets()
(16,printLine(dest)
(17,printLine("fgets()
(18,\\\'\\\\0\\\')
(19,data)
(20,)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,100)
(23,\\\'\\\\0\\\')
(24,)
(25,source)
(26,)
(27,(short)
(28,data = 0)
(29,strncpy(dest, source, data)
(30,data)
(31,data)
(32,100-1)
(33,"")
(34,inputBuffer)
(35,data < 100)
(36,NULL)
(37,dest)
(38,)
(39,if(1)
(40,0)
(41,CHAR_ARRAY_SIZE)
(42,1)
(43,dest[data])
(44,source)
(45,dest)
(46,memset(source, \\\'A\\\', 100-1)
(47,data)
(48,data = (short)
(49,source)
(50,source[100-1] = \\\'\\\\0\\\')
(51,)
(52,stdin)
(53,"")
(54,inputBuffer)
(55,dest)
(56,inputBuffer)
(57,\\\'A\\\')
(58,dest[100] = "")
(59,inputBuffer)
(60,100)
(61,data)
(62,dest)
(63,short)
(64,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^