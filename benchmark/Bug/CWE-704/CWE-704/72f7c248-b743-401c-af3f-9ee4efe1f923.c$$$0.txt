-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,29,33,34,35,39,41,43,46,48,50,52,56,58,59,61,62,67,69,70,71,75,76,81,83,85,87,92,94,95,99,101
-----computeFrom-----
12,13
12,14
23,24
23,25
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
89,90
89,91
-----guardedBy-----
75,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(54,19,0)
(6,31,0)
(52,0,0)
(17,5,0)
(30,41,0)
(53,34,0)
(26,28,0)
(44,10,0)
(18,27,0)
(0,25,0)
(10,31,0)
(33,18,0)
(36,41,0)
(9,33,0)
(39,3,0)
(3,18,0)
(23,54,0)
(12,18,0)
(36,10,0)
(40,5,0)
(47,15,0)
(35,19,0)
(38,19,0)
(22,34,0)
(28,15,0)
(34,11,0)
(42,23,0)
(2,54,0)
(7,41,0)
(37,36,0)
(49,18,0)
(31,10,0)
(48,19,0)
(11,34,0)
(5,25,0)
(14,54,0)
(5,54,0)
(50,14,0)
(46,36,0)
(4,18,0)
(3,41,0)
(1,11,0)
(15,28,0)
(5,10,0)
(10,27,0)
(5,41,0)
(13,48,0)
(41,18,0)
(32,19,0)
(11,18,0)
(16,28,0)
(43,27,0)
(24,27,0)
(36,0,0)
(29,14,0)
(51,5,0)
(36,54,0)
(15,33,0)
(45,11,0)
(14,10,0)
(54,23,0)
(21,19,0)
(7,21,1)
(17,14,1)
(36,41,1)
(48,13,1)
(23,42,1)
(29,33,1)
(6,44,1)
(0,52,1)
(39,14,1)
(42,2,1)
(16,26,1)
(54,23,1)
(14,10,1)
(53,45,1)
(22,53,1)
(46,5,1)
(47,11,1)
(5,54,1)
(8,10,1)
(50,29,1)
(34,22,1)
(3,41,1)
(37,46,1)
(2,8,1)
(14,50,1)
(26,47,1)
(14,54,1)
(41,30,1)
(30,7,1)
(31,6,1)
(11,34,1)
(36,54,1)
(51,40,1)
(33,9,1)
(10,31,1)
(21,54,1)
(5,51,1)
(35,48,1)
(1,41,1)
(5,41,1)
(52,36,1)
(36,10,1)
(40,17,1)
(13,8,1)
(7,35,1)
(45,1,1)
(15,28,1)
(39,0,1)
(5,10,1)
(3,39,1)
(20,3,1)
(36,37,1)
(28,16,1)
(9,15,1)
(13,8,2)
(48,8,2)
(11,34,2)
(21,8,2)
(54,8,2)
(23,8,2)
(36,41,2)
(0,14,2)
(36,14,2)
(35,8,2)
(14,54,2)
(5,10,2)
(51,14,2)
(42,8,2)
(37,14,2)
(3,41,2)
(15,28,2)
(46,14,2)
(2,8,2)
(17,14,2)
(10,31,2)
(36,10,2)
(5,14,2)
(5,41,2)
(40,14,2)
(36,54,2)
(54,23,2)
(52,14,2)
(14,10,2)
(5,54,2)
-----------------------------------
(0,dest[data] = \\\'\\\\0\\\')
(1,source)
(2,data)
(3,printLine(dest)
(4,source)
(5,memcpy(dest, source, data)
(6,1)
(7,dest)
(8,6)
(9,\\\'\\\\0\\\')
(10,data = -1)
(11,memset(source, \\\'A\\\', 100-1)
(12,dest)
(13,"Benign, fixed string")
(14,data < 100)
(15,source[100-1])
(16,1)
(17,dest)
(18,)
(19,)
(20,RET)
(21,break;)
(22,1)
(23,-1)
(24,data)
(25,)
(26,100)
(27,)
(28,100-1)
(29,data)
(30,"")
(31,-1)
(32,case 6:)
(33,source[100-1] = \\\'\\\\0\\\')
(34,100-1)
(35,break;)
(36,dest[data])
(37,data)
(38,default:)
(39,dest)
(40,source)
(41,dest[100] = "")
(42,1)
(43,switch(6)
(44,data)
(45,\\\'A\\\')
(46,dest)
(47,source)
(48,printLine("Benign, fixed string")
(49,if (data < 100)
(50,100)
(51,data)
(52,\\\'\\\\0\\\')
(53,100)
(54,data = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^