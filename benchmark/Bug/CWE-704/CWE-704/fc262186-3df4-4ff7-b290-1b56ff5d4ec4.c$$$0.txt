-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_large_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        short data = *dataPtr1;
        /* FLAW: Use a number larger than CHAR_MAX */
        data = CHAR_MAX + 1;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
52,53
55,56
56,57
56,58
57,58
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
70,71
72,73
72,74
73,74
74,75
74,76
76,77
76,78
78,79
79,80
79,81
80,81
80,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,54,59,61,65,67,71,75,77,81,82,84,88,90
-----computeFrom-----
32,33
32,34
48,49
48,50
51,52
51,53
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_large_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        short data = *dataPtr1;        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_large_32_bad()
CWE197_Numeric_Truncation_Error__short_large_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        short data = *dataPtr1;        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        short data = *dataPtr1;        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX + 1;
data = CHAR_MAX + 1
data
data
CHAR_MAX + 1
CHAR_MAX
CHAR_MAX
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(17,28,0)
(34,0,0)
(17,0,0)
(8,6,0)
(37,39,0)
(15,13,0)
(22,11,0)
(29,7,0)
(3,7,0)
(10,34,0)
(45,29,0)
(28,17,0)
(13,23,0)
(6,43,0)
(38,0,0)
(37,2,0)
(19,0,0)
(31,23,0)
(20,9,0)
(21,39,0)
(2,37,0)
(32,10,0)
(24,25,0)
(42,44,0)
(11,17,0)
(23,0,0)
(34,10,0)
(29,3,0)
(4,37,0)
(35,0,0)
(43,6,0)
(33,3,0)
(39,0,0)
(5,41,0)
(3,25,0)
(18,25,0)
(43,17,0)
(25,3,0)
(25,24,0)
(26,2,0)
(14,19,0)
(36,0,0)
(13,44,0)
(41,19,0)
(44,23,0)
(27,28,0)
(19,41,0)
(40,34,0)
(11,13,0)
(25,37,0)
(7,39,0)
(44,9,0)
(12,7,0)
(9,44,0)
(6,23,0)
(46,17,0)
(2,34,0)
(16,9,0)
(30,43,0)
(29,3,1)
(30,8,1)
(43,30,1)
(44,9,1)
(2,26,1)
(15,11,1)
(20,16,1)
(40,17,1)
(45,3,1)
(29,45,1)
(26,4,1)
(22,44,1)
(33,37,1)
(4,13,1)
(25,18,1)
(41,5,1)
(42,6,1)
(37,2,1)
(10,32,1)
(17,28,1)
(13,15,1)
(18,33,1)
(8,19,1)
(34,10,1)
(6,43,1)
(32,40,1)
(11,22,1)
(25,24,1)
(5,14,1)
(1,29,1)
(3,25,1)
(43,17,1)
(9,20,1)
(13,44,1)
(25,37,1)
(27,46,1)
(2,34,1)
(28,27,1)
(16,42,1)
(14,34,1)
(19,41,1)
(11,17,1)
(6,43,2)
(37,2,2)
(34,10,2)
(25,37,2)
(43,17,2)
(17,28,2)
(2,34,2)
(25,24,2)
(3,25,2)
(29,3,2)
(13,44,2)
(19,41,2)
(11,17,2)
(44,9,2)
-----------------------------------
(0,)
(1,RET)
(2,*dataPtr2)
(3,charData = (char)
(4,data)
(5,1)
(6,data = *dataPtr1)
(7,)
(8,data)
(9,CHAR_MAX + 1)
(10,&data)
(11,*dataPtr1)
(12,charData)
(13,*dataPtr1 = data)
(14,data)
(15,data)
(16,CHAR_MAX)
(17,*dataPtr1 = &data)
(18,data)
(19,data = -1)
(20,1)
(21,data)
(22,dataPtr1)
(23,)
(24,char)
(25,(char)
(26,dataPtr2)
(27,data)
(28,&data)
(29,printHexCharLine(charData)
(30,dataPtr1)
(31,data)
(32,data)
(33,charData)
(34,*dataPtr2 = &data)
(35,dataPtr1)
(36,dataPtr2)
(37,data = *dataPtr2)
(38,data)
(39,)
(40,dataPtr2)
(41,-1)
(42,data)
(43,*dataPtr1)
(44,data = CHAR_MAX + 1)
(45,charData)
(46,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^