-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
40,43
42,43
43,44
45,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
84,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,44,46,51,53,55,57,59,64,67,69,74,75,79,81,85,86,88,92,94
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
48,49
48,50
62,63
62,64
-----guardedBy-----
53,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_short_17_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_short_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(18,17,0)
(21,15,0)
(22,23,0)
(29,37,0)
(17,29,0)
(10,6,0)
(19,1,0)
(33,24,0)
(42,17,0)
(4,11,0)
(34,8,0)
(3,25,0)
(44,3,0)
(45,22,0)
(1,10,0)
(32,23,0)
(38,21,0)
(35,1,0)
(6,10,0)
(0,10,0)
(5,2,0)
(2,28,0)
(1,2,0)
(30,8,0)
(18,2,0)
(27,29,0)
(13,38,0)
(46,11,0)
(10,8,0)
(15,8,0)
(20,25,0)
(16,17,0)
(43,15,0)
(38,15,0)
(21,1,0)
(39,18,0)
(41,22,0)
(36,22,0)
(14,33,0)
(2,18,0)
(9,29,0)
(23,22,0)
(11,25,0)
(12,6,0)
(26,8,0)
(40,21,0)
(31,25,0)
(1,35,0)
(1,21,0)
(22,17,0)
(41,36,1)
(39,5,1)
(17,42,1)
(45,41,1)
(13,21,1)
(1,35,1)
(1,19,1)
(42,16,1)
(11,25,1)
(19,40,1)
(7,38,1)
(2,18,1)
(11,4,1)
(6,12,1)
(5,23,1)
(18,39,1)
(44,2,1)
(22,17,1)
(38,13,1)
(33,14,1)
(23,22,1)
(20,10,1)
(44,33,1)
(46,3,1)
(14,23,1)
(31,20,1)
(21,1,1)
(3,25,1)
(40,11,1)
(46,25,1)
(10,6,1)
(25,31,1)
(22,45,1)
(38,21,1)
(23,32,1)
(18,17,1)
(36,17,1)
(4,46,1)
(3,44,1)
(1,10,1)
(12,0,1)
(16,11,1)
(1,2,1)
(32,22,1)
(18,23,2)
(5,23,2)
(16,11,2)
(14,23,2)
(18,17,2)
(11,25,2)
(38,21,2)
(42,11,2)
(2,23,2)
(17,11,2)
(22,11,2)
(23,11,2)
(36,11,2)
(1,10,2)
(1,2,2)
(3,11,2)
(45,11,2)
(11,11,2)
(21,1,2)
(46,11,2)
(23,22,2)
(1,35,2)
(10,6,2)
(44,11,2)
(3,25,2)
(33,23,2)
(2,18,2)
(41,11,2)
(32,11,2)
(39,23,2)
(22,17,2)
(4,11,2)
-----------------------------------
(0,data)
(1,(short)
(2,data = atoi(inputBuffer)
(3,i++)
(4,1)
(5,data)
(6,-1)
(7,RET)
(8,)
(9,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,data = -1)
(11,i < 1)
(12,1)
(13,shortData)
(14,"fgets()
(15,)
(16,inputBuffer)
(17,inputBuffer[CHAR_ARRAY_SIZE] = "")
(18,atoi(inputBuffer)
(19,data)
(20,i)
(21,shortData = (short)
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,)
(25,i = 0)
(26,for(i = 0; i < 1; i++)
(27,inputBuffer)
(28,)
(29,)
(30,data)
(31,0)
(32,NULL)
(33,printLine("fgets()
(34,i)
(35,short)
(36,inputBuffer)
(37,)
(38,printShortLine(shortData)
(39,inputBuffer)
(40,shortData)
(41,CHAR_ARRAY_SIZE)
(42,"")
(43,shortData)
(44,i)
(45,stdin)
(46,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^