-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    {
        short dataCopy = data;
        short data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
48,51
48,52
48,53
48,54
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,47,51,53,54,58,60,63,65,69,71,76,78,82,84,85,88,89,94,97,98,99,103,105,109,111
-----computeFrom-----
12,13
12,14
44,45
44,46
67,68
67,69
86,87
86,88
91,92
91,93
95,96
95,97
-----guardedBy-----
46,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_31_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(13,0,0)
(43,19,0)
(40,2,0)
(45,34,0)
(38,49,0)
(56,22,0)
(26,54,0)
(6,26,0)
(0,26,0)
(25,56,0)
(54,34,0)
(11,56,0)
(22,15,0)
(20,56,0)
(11,3,0)
(35,0,0)
(46,17,0)
(9,26,0)
(47,24,0)
(49,56,0)
(19,16,0)
(27,42,0)
(48,6,0)
(18,16,0)
(50,6,0)
(37,16,0)
(33,5,0)
(2,31,0)
(49,5,0)
(34,17,0)
(24,17,0)
(1,34,0)
(29,24,0)
(0,49,0)
(28,49,0)
(15,22,0)
(23,22,0)
(14,26,0)
(55,54,0)
(36,14,0)
(8,5,0)
(56,5,0)
(25,5,0)
(31,41,0)
(10,8,0)
(6,11,0)
(31,2,0)
(52,5,0)
(49,0,0)
(54,16,0)
(4,26,0)
(44,14,0)
(24,19,0)
(12,34,0)
(7,23,0)
(19,24,0)
(39,25,0)
(11,6,0)
(26,34,0)
(42,56,0)
(53,3,0)
(8,56,0)
(23,26,0)
(21,42,0)
(22,56,0)
(32,54,0)
(22,23,0)
(3,5,0)
(16,17,0)
(51,11,0)
(8,10,1)
(0,26,1)
(49,0,1)
(38,31,1)
(30,25,1)
(54,16,1)
(24,19,1)
(20,14,1)
(39,8,1)
(54,32,1)
(3,53,1)
(13,28,1)
(14,26,1)
(27,21,1)
(42,56,1)
(25,56,1)
(10,3,1)
(22,15,1)
(25,39,1)
(40,42,1)
(31,2,1)
(55,24,1)
(8,56,1)
(9,54,1)
(23,26,1)
(11,56,1)
(53,11,1)
(19,43,1)
(28,38,1)
(4,9,1)
(42,27,1)
(22,23,1)
(19,16,1)
(7,20,1)
(30,14,1)
(49,56,1)
(29,16,1)
(0,35,1)
(38,42,1)
(6,50,1)
(48,51,1)
(2,40,1)
(47,29,1)
(14,44,1)
(36,26,1)
(21,56,1)
(16,37,1)
(51,49,1)
(26,4,1)
(50,48,1)
(32,55,1)
(43,47,1)
(37,18,1)
(23,7,1)
(35,13,1)
(44,36,1)
(6,26,1)
(56,22,1)
(11,6,1)
(26,54,1)
(3,14,2)
(51,14,2)
(11,6,2)
(50,14,2)
(14,26,2)
(48,14,2)
(56,14,2)
(8,14,2)
(20,14,2)
(23,14,2)
(25,56,2)
(56,22,2)
(8,56,2)
(27,14,2)
(22,15,2)
(40,42,2)
(49,0,2)
(0,14,2)
(31,42,2)
(22,14,2)
(42,14,2)
(49,56,2)
(11,56,2)
(31,2,2)
(21,14,2)
(26,54,2)
(38,14,2)
(23,26,2)
(28,14,2)
(6,26,2)
(53,14,2)
(54,16,2)
(22,23,2)
(2,42,2)
(49,14,2)
(39,14,2)
(13,14,2)
(0,26,2)
(42,56,2)
(11,14,2)
(24,19,2)
(6,14,2)
(10,14,2)
(35,14,2)
(25,14,2)
(7,14,2)
(19,16,2)
-----------------------------------
(0,data-1)
(1,dataCopy)
(2,-1)
(3,dataBuffer[data-1] = \\\'\\\\0\\\')
(4,dataCopy)
(5,)
(6,data-1)
(7,data)
(8,printLine(dataBuffer)
(9,data)
(10,dataBuffer)
(11,dataBuffer[data-1])
(12,data)
(13,data)
(14,data < 100)
(15,char *)
(16,data = 0)
(17,)
(18,data)
(19,&data)
(20,dataBuffer)
(21,dataBuffer)
(22,(char *)
(23,malloc(data)
(24,fscanf (stdin, "%hd", &data)
(25,free(dataBuffer)
(26,data = dataCopy)
(27,NULL)
(28,\\\'A\\\')
(29,stdin)
(30,RET)
(31,exit(-1)
(32,data)
(33,dataBuffer)
(34,)
(35,1)
(36,data)
(37,0)
(38,dataBuffer)
(39,dataBuffer)
(40,1)
(41,)
(42,dataBuffer == NULL)
(43,data)
(44,100)
(45,if (data < 100)
(46,data)
(47,"%hd")
(48,data)
(49,memset(dataBuffer, \\\'A\\\', data-1)
(50,1)
(51,dataBuffer)
(52,if (dataBuffer == NULL)
(53,\\\'\\\\0\\\')
(54,dataCopy = data)
(55,dataCopy)
(56,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^