-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
38,39
38,40
39,40
42,43
42,44
42,45
42,46
42,47
42,48
43,44
44,45
44,46
46,47
46,48
46,49
49,50
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
80,81
80,82
81,82
84,85
85,86
85,87
86,87
86,88
87,88
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,40,41,45,47,48,52,54,57,59,63,65,70,72,76,78,79,82,83,88,91,92,93,97,99,103,105
-----computeFrom-----
12,13
12,14
23,24
23,25
38,39
38,40
61,62
61,63
80,81
80,82
85,86
85,87
89,90
89,91
-----guardedBy-----
40,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,0,0)
(8,46,0)
(36,40,0)
(46,8,0)
(14,32,0)
(9,8,0)
(41,14,0)
(30,8,0)
(34,3,0)
(28,8,0)
(27,40,0)
(10,8,0)
(17,32,0)
(5,21,0)
(35,17,0)
(50,16,0)
(13,37,0)
(38,28,0)
(19,0,0)
(39,37,0)
(25,5,0)
(7,5,0)
(42,10,0)
(29,3,0)
(47,46,0)
(40,27,0)
(8,37,0)
(16,5,0)
(27,4,0)
(25,32,0)
(23,25,0)
(48,0,0)
(33,9,0)
(51,13,0)
(25,46,0)
(16,9,0)
(32,17,0)
(21,5,0)
(9,16,0)
(5,49,0)
(12,49,0)
(9,37,0)
(53,5,0)
(10,37,0)
(14,44,0)
(22,49,0)
(54,9,0)
(15,49,0)
(20,14,0)
(44,8,0)
(43,49,0)
(55,49,0)
(3,8,0)
(52,16,0)
(44,14,0)
(1,32,0)
(26,37,0)
(44,13,0)
(11,44,0)
(18,0,0)
(46,25,0)
(28,37,0)
(24,7,0)
(16,32,0)
(45,7,0)
(7,32,0)
(14,5,0)
(2,55,0)
(46,47,0)
(21,53,1)
(54,3,1)
(8,46,1)
(29,8,1)
(25,32,1)
(10,42,1)
(12,55,1)
(10,8,1)
(54,27,1)
(9,16,1)
(14,41,1)
(7,5,1)
(55,2,1)
(17,35,1)
(41,20,1)
(24,15,1)
(36,3,1)
(35,1,1)
(31,7,1)
(6,32,1)
(28,8,1)
(40,36,1)
(32,17,1)
(52,50,1)
(7,45,1)
(14,5,1)
(15,5,1)
(28,38,1)
(5,21,1)
(33,54,1)
(38,13,1)
(44,8,1)
(27,40,1)
(9,8,1)
(31,10,1)
(3,8,1)
(25,23,1)
(23,30,1)
(46,47,1)
(51,44,1)
(16,52,1)
(16,32,1)
(50,33,1)
(30,7,1)
(25,5,1)
(53,6,1)
(2,6,1)
(24,12,1)
(44,14,1)
(16,5,1)
(46,25,1)
(34,29,1)
(20,11,1)
(45,24,1)
(7,32,1)
(11,9,1)
(13,51,1)
(3,34,1)
(42,28,1)
(14,32,1)
(8,46,2)
(23,7,2)
(21,6,2)
(16,7,2)
(14,7,2)
(27,3,2)
(25,7,2)
(25,5,2)
(46,7,2)
(3,8,2)
(7,5,2)
(40,3,2)
(28,8,2)
(38,7,2)
(27,40,2)
(16,5,2)
(41,7,2)
(20,7,2)
(28,7,2)
(36,3,2)
(55,6,2)
(25,32,2)
(13,7,2)
(9,7,2)
(14,5,2)
(30,7,2)
(7,32,2)
(46,25,2)
(9,16,2)
(5,21,2)
(14,32,2)
(53,6,2)
(29,7,2)
(10,7,2)
(50,7,2)
(44,7,2)
(32,17,2)
(2,6,2)
(16,32,2)
(8,7,2)
(33,7,2)
(46,47,2)
(10,8,2)
(11,7,2)
(52,7,2)
(9,8,2)
(42,7,2)
(54,7,2)
(3,7,2)
(44,8,2)
(44,14,2)
(34,7,2)
(51,7,2)
(12,6,2)
(5,6,2)
(15,6,2)
-----------------------------------
(0,)
(1,data)
(2,"Benign, fixed string")
(3,dataBuffer == NULL)
(4,)
(5,data = RAND32()
(6,6)
(7,data < 100)
(8,* dataBuffer = (char *)
(9,memset(dataBuffer, \\\'A\\\', data-1)
(10,free(dataBuffer)
(11,dataBuffer)
(12,break;)
(13,dataBuffer[data-1] = \\\'\\\\0\\\')
(14,data-1)
(15,break;)
(16,data-1)
(17,-1)
(18,switch(6)
(19,data)
(20,data)
(21,RAND32()
(22,default:)
(23,data)
(24,data)
(25,malloc(data)
(26,dataBuffer)
(27,exit(-1)
(28,printLine(dataBuffer)
(29,dataBuffer)
(30,dataBuffer)
(31,RET)
(32,data = -1)
(33,\\\'A\\\')
(34,NULL)
(35,1)
(36,1)
(37,)
(38,dataBuffer)
(39,if (dataBuffer == NULL)
(40,-1)
(41,1)
(42,dataBuffer)
(43,case 6:)
(44,dataBuffer[data-1])
(45,100)
(46,(char *)
(47,char *)
(48,if (data < 100)
(49,)
(50,data)
(51,\\\'\\\\0\\\')
(52,1)
(53,data)
(54,dataBuffer)
(55,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^