-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_42_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
18,19
18,20
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_42_bad(){    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_42_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_42_bad
{    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(1,18,0)
(25,44,0)
(42,2,0)
(15,38,0)
(8,35,0)
(18,1,0)
(29,14,0)
(19,14,0)
(3,49,0)
(48,50,0)
(5,14,0)
(14,17,0)
(4,50,0)
(27,4,0)
(24,50,0)
(51,14,0)
(28,18,0)
(44,50,0)
(39,49,0)
(35,14,0)
(17,26,0)
(5,39,0)
(50,38,0)
(3,12,0)
(6,4,0)
(43,24,0)
(12,3,0)
(5,4,0)
(3,14,0)
(10,24,0)
(31,49,0)
(12,50,0)
(22,12,0)
(33,35,0)
(17,14,0)
(34,19,0)
(32,49,0)
(14,49,0)
(7,28,0)
(18,38,0)
(9,12,0)
(30,42,0)
(21,3,0)
(50,28,0)
(42,30,0)
(11,39,0)
(19,49,0)
(28,50,0)
(17,44,0)
(45,3,0)
(44,17,0)
(36,1,0)
(0,38,0)
(26,17,0)
(20,29,0)
(29,49,0)
(4,5,0)
(13,5,0)
(47,30,0)
(16,18,0)
(50,28,1)
(24,43,1)
(35,33,1)
(19,34,1)
(17,44,1)
(35,14,1)
(25,51,1)
(1,36,1)
(36,16,1)
(10,50,1)
(47,35,1)
(5,14,1)
(39,11,1)
(23,24,1)
(42,30,1)
(28,7,1)
(20,39,1)
(12,9,1)
(8,14,1)
(18,1,1)
(27,13,1)
(19,14,1)
(4,6,1)
(45,35,1)
(7,48,1)
(51,24,1)
(6,27,1)
(5,4,1)
(29,14,1)
(29,20,1)
(43,10,1)
(3,14,1)
(13,3,1)
(12,50,1)
(14,17,1)
(33,8,1)
(11,5,1)
(30,47,1)
(23,19,1)
(24,50,1)
(21,45,1)
(28,18,1)
(44,50,1)
(34,29,1)
(48,18,1)
(17,26,1)
(22,21,1)
(3,12,1)
(45,42,1)
(44,25,1)
(4,50,1)
(9,22,1)
(21,24,2)
(6,24,2)
(4,50,2)
(9,24,2)
(22,24,2)
(5,14,2)
(45,24,2)
(51,24,2)
(44,50,2)
(44,24,2)
(5,4,2)
(17,26,2)
(50,28,2)
(28,18,2)
(3,12,2)
(47,35,2)
(13,24,2)
(30,35,2)
(17,24,2)
(25,24,2)
(3,24,2)
(12,50,2)
(5,24,2)
(12,24,2)
(42,35,2)
(11,24,2)
(33,24,2)
(35,24,2)
(19,14,2)
(39,24,2)
(35,14,2)
(24,50,2)
(17,44,2)
(18,1,2)
(42,30,2)
(8,24,2)
(14,24,2)
(4,24,2)
(3,14,2)
(29,24,2)
(20,24,2)
(27,24,2)
(14,17,2)
(29,14,2)
(34,24,2)
(19,24,2)
-----------------------------------
(0,data)
(1,-1)
(2,)
(3,memset(dataBuffer, \'A\', data-1)
(4,data-1)
(5,dataBuffer[data-1])
(6,1)
(7,data)
(8,dataBuffer)
(9,1)
(10,data)
(11,\'\\\\0\')
(12,data-1)
(13,dataBuffer)
(14,* dataBuffer = (char *)
(15,if (data < 100)
(16,data)
(17,(char *)
(18,data = -1)
(19,free(dataBuffer)
(20,dataBuffer)
(21,\'A\')
(22,data)
(23,RET)
(24,data < 100)
(25,data)
(26,char *)
(27,data)
(28,badSource(data)
(29,printLine(dataBuffer)
(30,-1)
(31,dataBuffer)
(32,if (dataBuffer == NULL)
(33,NULL)
(34,dataBuffer)
(35,dataBuffer == NULL)
(36,1)
(37,'A')
(38,)
(39,dataBuffer[data-1] = '\\\\0')
(40,dataBuffer[data-1] = \'\\\\0\')
(41,'\\\\0')
(42,exit(-1)
(43,100)
(44,malloc(data)
(45,dataBuffer)
(46,memset(dataBuffer, 'A', data-1)
(47,1)
(48,data)
(49,)
(50,data = badSource(data)
(51,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^