-----label-----
1
-----code-----
static void badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(short data)
badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(38,39,0)
(34,26,0)
(5,17,0)
(7,11,0)
(22,20,0)
(9,0,0)
(11,7,0)
(28,20,0)
(26,6,0)
(14,42,0)
(42,20,0)
(5,6,0)
(7,6,0)
(16,0,0)
(8,19,0)
(17,40,0)
(10,16,0)
(20,17,0)
(41,7,0)
(1,32,0)
(16,6,0)
(11,15,0)
(35,16,0)
(23,11,0)
(0,16,0)
(0,20,0)
(20,32,0)
(0,32,0)
(39,8,0)
(8,39,0)
(24,32,0)
(12,15,0)
(25,2,0)
(4,42,0)
(13,7,0)
(15,32,0)
(17,20,0)
(11,20,0)
(43,1,0)
(21,0,0)
(27,5,0)
(17,5,0)
(33,32,0)
(37,22,0)
(40,17,0)
(22,32,0)
(18,26,0)
(1,20,0)
(35,21,1)
(5,6,1)
(15,12,1)
(8,39,1)
(9,42,1)
(23,0,1)
(11,7,1)
(42,4,1)
(17,5,1)
(27,28,1)
(9,8,1)
(5,27,1)
(0,16,1)
(1,20,1)
(39,38,1)
(12,11,1)
(22,20,1)
(26,34,1)
(7,6,1)
(11,20,1)
(20,17,1)
(17,40,1)
(7,13,1)
(16,6,1)
(14,20,1)
(38,42,1)
(37,15,1)
(26,6,1)
(21,9,1)
(22,37,1)
(34,18,1)
(28,26,1)
(29,1,1)
(42,20,1)
(43,22,1)
(16,10,1)
(41,23,1)
(29,26,1)
(0,20,1)
(4,14,1)
(10,35,1)
(1,43,1)
(13,41,1)
(14,26,2)
(8,42,2)
(21,26,2)
(28,26,2)
(35,26,2)
(0,20,2)
(20,17,2)
(13,26,2)
(20,26,2)
(16,26,2)
(17,5,2)
(5,26,2)
(22,26,2)
(17,40,2)
(23,26,2)
(39,42,2)
(11,26,2)
(8,39,2)
(43,26,2)
(22,20,2)
(0,16,2)
(26,6,2)
(5,6,2)
(37,26,2)
(41,26,2)
(11,7,2)
(11,20,2)
(15,26,2)
(38,42,2)
(7,6,2)
(16,6,2)
(1,20,2)
(12,26,2)
(0,26,2)
(1,26,2)
(4,26,2)
(9,26,2)
(42,26,2)
(27,26,2)
(42,20,2)
(7,26,2)
(10,26,2)
(17,26,2)
-----------------------------------
(0,memset(dataBuffer, \'A\', data-1)
(1,free(dataBuffer)
(2,)
(3,memset(dataBuffer, 'A', data-1)
(4,NULL)
(5,malloc(data)
(6,short data)
(7,data-1)
(8,exit(-1)
(9,dataBuffer)
(10,1)
(11,dataBuffer[data-1])
(12,\'\\\\0\')
(13,1)
(14,dataBuffer)
(15,dataBuffer[data-1] = \'\\\\0\')
(16,data-1)
(17,(char *)
(18,data)
(19,)
(20,* dataBuffer = (char *)
(21,\'A\')
(22,printLine(dataBuffer)
(23,dataBuffer)
(24,if (dataBuffer == NULL)
(25,if (data < 100)
(26,data < 100)
(27,data)
(28,dataBuffer)
(29,RET)
(30,'A')
(31,'\\\\0')
(32,)
(33,dataBuffer)
(34,100)
(35,data)
(36,dataBuffer[data-1] = '\\\\0')
(37,dataBuffer)
(38,1)
(39,-1)
(40,char *)
(41,data)
(42,dataBuffer == NULL)
(43,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^