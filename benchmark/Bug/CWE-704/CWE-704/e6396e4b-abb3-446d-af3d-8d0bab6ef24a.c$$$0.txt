-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_42_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
34,37
37,38
38,39
38,40
39,40
39,41
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
77,78
77,79
78,79
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,29,33,35,36,40,42,45,47,51,53,58,60,64,66,67,70,71,76,79,80,81,85,87,91,93
-----computeFrom-----
12,13
12,14
17,18
17,19
26,27
26,28
49,50
49,51
68,69
68,70
73,74
73,75
77,78
77,79
-----guardedBy-----
28,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_42_bad(){    short data;    /* Initialize data */    data = 0;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_42_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_42_bad
{    short data;    /* Initialize data */    data = 0;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(37,7,0)
(32,15,0)
(23,14,0)
(30,37,0)
(15,49,0)
(6,9,0)
(0,11,0)
(33,14,0)
(43,47,0)
(48,30,0)
(7,37,0)
(11,44,0)
(20,15,0)
(23,2,0)
(49,11,0)
(16,9,0)
(39,48,0)
(6,15,0)
(10,6,0)
(30,9,0)
(50,18,0)
(15,6,0)
(22,36,0)
(40,18,0)
(14,49,0)
(41,16,0)
(24,36,0)
(3,44,0)
(29,23,0)
(16,30,0)
(23,30,0)
(13,45,0)
(38,49,0)
(7,49,0)
(37,30,0)
(36,49,0)
(1,44,0)
(37,28,0)
(6,30,0)
(27,7,0)
(2,9,0)
(31,30,0)
(19,48,0)
(12,9,0)
(50,42,0)
(34,2,0)
(28,37,0)
(14,23,0)
(18,50,0)
(21,6,0)
(5,14,0)
(47,30,0)
(44,45,0)
(17,45,0)
(25,9,0)
(49,45,0)
(47,9,0)
(11,49,0)
(23,30,1)
(10,50,1)
(43,16,1)
(47,43,1)
(50,18,1)
(19,30,1)
(15,49,1)
(10,48,1)
(14,49,1)
(6,30,1)
(22,24,1)
(7,49,1)
(39,19,1)
(20,32,1)
(15,20,1)
(36,22,1)
(31,36,1)
(40,48,1)
(2,34,1)
(24,49,1)
(49,11,1)
(21,10,1)
(27,31,1)
(7,27,1)
(37,7,1)
(16,30,1)
(6,15,1)
(36,49,1)
(38,44,1)
(23,14,1)
(5,29,1)
(30,37,1)
(33,5,1)
(18,40,1)
(34,23,1)
(1,3,1)
(47,30,1)
(11,0,1)
(4,47,1)
(11,44,1)
(48,39,1)
(32,21,1)
(4,36,1)
(16,41,1)
(41,2,1)
(37,28,1)
(29,6,1)
(48,30,1)
(0,38,1)
(44,1,1)
(14,33,1)
(47,36,2)
(33,36,2)
(30,37,2)
(29,36,2)
(19,36,2)
(10,36,2)
(32,36,2)
(18,48,2)
(5,36,2)
(2,36,2)
(48,30,2)
(11,44,2)
(21,36,2)
(43,36,2)
(39,36,2)
(31,36,2)
(23,30,2)
(50,18,2)
(16,30,2)
(7,49,2)
(15,49,2)
(15,36,2)
(40,48,2)
(6,36,2)
(14,49,2)
(34,36,2)
(27,36,2)
(6,15,2)
(6,30,2)
(23,36,2)
(30,36,2)
(47,30,2)
(23,14,2)
(50,48,2)
(37,7,2)
(37,36,2)
(36,49,2)
(49,11,2)
(14,36,2)
(7,36,2)
(16,36,2)
(48,36,2)
(37,28,2)
(20,36,2)
(41,36,2)
-----------------------------------
(0,data)
(1,0)
(2,dataBuffer[data-1] = \'\\\\0\')
(3,data)
(4,RET)
(5,data)
(6,memset(dataBuffer, 'A', data-1)
(7,malloc(data)
(8,dataBuffer[data-1] = '\\\\0')
(9,)
(10,dataBuffer)
(11,badSource(data)
(12,if (dataBuffer == NULL)
(13,data)
(14,data-1)
(15,data-1)
(16,printLine(dataBuffer)
(17,if (data < 100)
(18,-1)
(19,dataBuffer)
(20,1)
(21,\'A\')
(22,100)
(23,dataBuffer[data-1])
(24,data)
(25,dataBuffer)
(26,memset(dataBuffer, \'A\', data-1)
(27,data)
(28,char *)
(29,dataBuffer)
(30,* dataBuffer = (char *)
(31,dataBuffer)
(32,data)
(33,1)
(34,'\\\\0')
(35,\'\\\\0\')
(36,data < 100)
(37,(char *)
(38,data)
(39,NULL)
(40,1)
(41,dataBuffer)
(42,)
(43,dataBuffer)
(44,data = 0)
(45,)
(46,'A')
(47,free(dataBuffer)
(48,dataBuffer == NULL)
(49,data = badSource(data)
(50,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^