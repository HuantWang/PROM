-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,37,39,42,44,46,48,52,54,55,57,58,63,65,66,67,71,72,77,79,81,83,88,90,91,95,97
-----computeFrom-----
12,13
12,14
22,23
22,24
56,57
56,58
60,61
60,62
64,65
64,66
69,70
69,71
85,86
85,87
-----guardedBy-----
71,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_11_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(42,23,0)
(44,22,0)
(2,29,0)
(48,8,0)
(48,6,0)
(45,41,0)
(7,21,0)
(40,20,0)
(11,15,0)
(41,20,0)
(47,43,0)
(46,29,0)
(22,13,0)
(15,28,0)
(47,5,0)
(18,47,0)
(48,20,0)
(17,5,0)
(34,43,0)
(31,47,0)
(35,20,0)
(20,33,0)
(40,5,0)
(43,22,0)
(1,5,0)
(12,43,0)
(28,24,0)
(28,15,0)
(0,37,0)
(3,47,0)
(38,22,0)
(40,0,0)
(29,21,0)
(21,29,0)
(26,24,0)
(27,0,0)
(21,22,0)
(23,43,0)
(16,13,0)
(40,43,0)
(47,20,0)
(8,48,0)
(41,5,0)
(23,22,0)
(6,48,0)
(5,13,0)
(47,37,0)
(32,21,0)
(39,13,0)
(20,48,0)
(25,15,0)
(19,28,0)
(24,22,0)
(10,22,0)
(36,41,0)
(30,40,0)
(4,40,0)
(45,36,1)
(35,9,1)
(40,20,1)
(41,20,1)
(43,34,1)
(27,40,1)
(40,43,1)
(9,5,1)
(47,5,1)
(41,5,1)
(30,4,1)
(19,21,1)
(36,24,1)
(34,12,1)
(28,15,1)
(42,0,1)
(20,48,1)
(31,41,1)
(11,25,1)
(40,30,1)
(24,26,1)
(29,2,1)
(32,7,1)
(26,28,1)
(2,46,1)
(0,27,1)
(8,35,1)
(42,41,1)
(46,32,1)
(3,18,1)
(12,9,1)
(40,5,1)
(7,43,1)
(41,45,1)
(48,8,1)
(12,20,1)
(17,1,1)
(5,17,1)
(18,31,1)
(23,43,1)
(23,42,1)
(14,23,1)
(48,6,1)
(47,43,1)
(15,11,1)
(47,20,1)
(21,29,1)
(47,3,1)
(4,47,1)
(25,19,1)
(47,5,2)
(41,5,2)
(30,41,2)
(47,41,2)
(40,20,2)
(40,5,2)
(0,41,2)
(40,43,2)
(47,43,2)
(48,6,2)
(27,41,2)
(18,41,2)
(20,9,2)
(21,29,2)
(35,9,2)
(23,43,2)
(3,41,2)
(48,9,2)
(48,8,2)
(41,20,2)
(20,48,2)
(47,20,2)
(40,41,2)
(28,15,2)
(31,41,2)
(8,9,2)
(4,41,2)
-----------------------------------
(0,dest[data] = \\\'\\\\0\\\')
(1,data)
(2,1)
(3,data)
(4,dest)
(5,data = 0)
(6,short)
(7,source)
(8,RAND32()
(9,globalReturnsTrue()
(10,if (data < 100)
(11,1)
(12,dest)
(13,)
(14,RET)
(15,100-1)
(16,data)
(17,0)
(18,source)
(19,source)
(20,data = (short)
(21,memset(source, \\\'A\\\', 100-1)
(22,)
(23,printLine(dest)
(24,source[100-1] = \\\'\\\\0\\\')
(25,100)
(26,\\\'\\\\0\\\')
(27,\\\'\\\\0\\\')
(28,source[100-1])
(29,100-1)
(30,data)
(31,dest)
(32,\\\'A\\\')
(33,)
(34,"")
(35,data)
(36,data)
(37,)
(38,source)
(39,if(globalReturnsTrue()
(40,dest[data])
(41,data < 100)
(42,dest)
(43,dest[100] = "")
(44,dest)
(45,100)
(46,100)
(47,memcpy(dest, source, data)
(48,(short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^