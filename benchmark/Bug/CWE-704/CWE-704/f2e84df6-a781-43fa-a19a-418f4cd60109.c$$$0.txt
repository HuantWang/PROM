-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
21,22
21,23
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_05_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }
staticTrue
staticTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,13,0)
(24,3,0)
(31,16,0)
(14,36,0)
(20,26,0)
(2,17,0)
(7,16,0)
(42,3,0)
(39,12,0)
(25,37,0)
(11,9,0)
(3,42,0)
(45,40,0)
(44,28,0)
(42,0,0)
(29,31,0)
(0,42,0)
(7,40,0)
(26,36,0)
(17,36,0)
(50,12,0)
(26,42,0)
(23,7,0)
(12,26,0)
(20,7,0)
(22,26,0)
(52,20,0)
(16,10,0)
(12,36,0)
(27,37,0)
(7,20,0)
(40,48,0)
(32,40,0)
(13,28,0)
(16,31,0)
(3,40,0)
(21,22,0)
(34,16,0)
(6,50,0)
(12,50,0)
(8,48,0)
(49,36,0)
(43,48,0)
(18,22,0)
(49,26,0)
(17,26,0)
(3,16,0)
(20,9,0)
(53,12,0)
(50,16,0)
(42,26,0)
(4,36,0)
(50,40,0)
(37,40,0)
(41,48,0)
(37,16,0)
(13,19,0)
(38,7,0)
(5,49,0)
(9,36,0)
(46,50,0)
(1,26,0)
(20,26,1)
(37,27,1)
(50,46,1)
(34,30,1)
(46,6,1)
(26,42,1)
(38,23,1)
(33,37,1)
(30,40,1)
(53,22,1)
(11,20,1)
(18,26,1)
(3,16,1)
(33,17,1)
(23,52,1)
(3,24,1)
(6,39,1)
(22,26,1)
(42,0,1)
(20,7,1)
(16,31,1)
(12,50,1)
(44,22,1)
(42,3,1)
(49,5,1)
(37,40,1)
(50,40,1)
(3,40,1)
(7,40,1)
(37,16,1)
(24,1,1)
(17,26,1)
(28,44,1)
(5,9,1)
(22,21,1)
(25,30,1)
(52,12,1)
(27,25,1)
(29,34,1)
(40,32,1)
(17,2,1)
(25,16,1)
(49,26,1)
(7,16,1)
(21,18,1)
(31,29,1)
(9,11,1)
(53,13,1)
(32,45,1)
(1,37,1)
(7,38,1)
(12,26,1)
(13,28,1)
(39,53,1)
(50,16,1)
(2,49,1)
(7,37,2)
(46,37,2)
(49,37,2)
(53,37,2)
(17,26,2)
(20,37,2)
(24,37,2)
(34,30,2)
(42,37,2)
(3,16,2)
(20,7,2)
(22,37,2)
(16,31,2)
(50,37,2)
(42,3,2)
(42,0,2)
(28,22,2)
(12,37,2)
(12,50,2)
(7,16,2)
(9,37,2)
(11,37,2)
(38,37,2)
(37,40,2)
(17,37,2)
(50,40,2)
(7,40,2)
(12,26,2)
(44,22,2)
(13,22,2)
(26,42,2)
(6,37,2)
(23,37,2)
(5,37,2)
(13,28,2)
(3,37,2)
(21,37,2)
(37,16,2)
(50,16,2)
(2,37,2)
(49,26,2)
(3,40,2)
(29,30,2)
(20,26,2)
(26,37,2)
(18,37,2)
(39,37,2)
(16,30,2)
(22,26,2)
(52,37,2)
(1,37,2)
(31,30,2)
-----------------------------------
(0,char *)
(1,dataBuffer)
(2,dataBuffer)
(3,malloc(data)
(4,if (dataBuffer == NULL)
(5,dataBuffer)
(6,data)
(7,data-1)
(8,if(staticTrue)
(9,dataBuffer[data-1] = \'\\\\0\')
(10,)
(11,'\\\\0')
(12,memset(dataBuffer, 'A', data-1)
(13,exit(-1)
(14,dataBuffer)
(15,dataBuffer[data-1] = '\\\\0')
(16,data = -1)
(17,free(dataBuffer)
(18,dataBuffer)
(19,)
(20,dataBuffer[data-1])
(21,NULL)
(22,dataBuffer == NULL)
(23,data)
(24,data)
(25,data)
(26,* dataBuffer = (char *)
(27,100)
(28,-1)
(29,1)
(30,staticTrue)
(31,-1)
(32,0)
(33,RET)
(34,data)
(35,\'\\\\0\')
(36,)
(37,data < 100)
(38,1)
(39,\'A\')
(40,data = 0)
(41,data)
(42,(char *)
(43,if (data < 100)
(44,1)
(45,data)
(46,1)
(47,'A')
(48,)
(49,printLine(dataBuffer)
(50,data-1)
(51,memset(dataBuffer, \'A\', data-1)
(52,dataBuffer)
(53,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^