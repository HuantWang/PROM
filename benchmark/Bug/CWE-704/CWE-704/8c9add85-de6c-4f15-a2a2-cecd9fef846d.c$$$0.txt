-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_53d_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_53d_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_53d_badSink(short data)
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_53d_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(0,15,0)
(10,0,0)
(24,41,0)
(10,33,0)
(41,32,0)
(20,13,0)
(3,41,0)
(19,8,0)
(27,28,0)
(8,32,0)
(28,15,0)
(30,35,0)
(6,28,0)
(42,33,0)
(10,32,0)
(16,19,0)
(4,33,0)
(28,35,0)
(12,13,0)
(2,33,0)
(32,8,0)
(17,42,0)
(26,8,0)
(43,32,0)
(5,2,0)
(21,7,0)
(22,10,0)
(39,0,0)
(19,15,0)
(8,19,0)
(35,32,0)
(35,28,0)
(0,10,0)
(9,25,0)
(34,32,0)
(34,33,0)
(9,14,0)
(40,33,0)
(1,10,0)
(36,0,0)
(32,33,0)
(13,15,0)
(42,32,0)
(37,34,0)
(8,26,0)
(18,25,0)
(25,9,0)
(35,2,0)
(22,41,1)
(42,32,1)
(41,24,1)
(13,15,1)
(27,6,1)
(29,13,1)
(34,37,1)
(36,39,1)
(12,20,1)
(35,32,1)
(0,15,1)
(25,18,1)
(24,3,1)
(0,36,1)
(8,26,1)
(2,5,1)
(29,34,1)
(41,32,1)
(19,15,1)
(43,13,1)
(28,27,1)
(28,15,1)
(34,32,1)
(17,2,1)
(35,28,1)
(6,30,1)
(3,32,1)
(5,35,1)
(32,8,1)
(8,19,1)
(1,22,1)
(18,41,1)
(10,0,1)
(16,43,1)
(39,1,1)
(30,10,1)
(10,32,1)
(22,9,1)
(37,42,1)
(13,12,1)
(42,17,1)
(19,16,1)
(9,25,1)
(36,13,2)
(22,13,2)
(6,13,2)
(10,13,2)
(13,15,2)
(43,13,2)
(9,25,2)
(37,13,2)
(9,41,2)
(19,15,2)
(16,13,2)
(10,0,2)
(19,13,2)
(0,13,2)
(25,41,2)
(34,32,2)
(32,13,2)
(1,13,2)
(0,15,2)
(41,32,2)
(28,13,2)
(42,32,2)
(8,13,2)
(34,13,2)
(30,13,2)
(17,13,2)
(32,8,2)
(28,15,2)
(8,19,2)
(3,13,2)
(8,26,2)
(35,13,2)
(35,32,2)
(2,13,2)
(42,13,2)
(35,28,2)
(5,13,2)
(10,32,2)
(27,13,2)
(39,13,2)
(24,13,2)
(18,41,2)
(41,13,2)
-----------------------------------
(0,data-1)
(1,\'A\')
(2,dataBuffer[data-1] = \'\\\\0\')
(3,dataBuffer)
(4,dataBuffer)
(5,'\\\\0')
(6,data)
(7,)
(8,(char *)
(9,exit(-1)
(10,memset(dataBuffer, \'A\', data-1)
(11,dataBuffer[data-1] = '\\\\0')
(12,100)
(13,data < 100)
(14,)
(15,short data)
(16,data)
(17,dataBuffer)
(18,1)
(19,malloc(data)
(20,data)
(21,if (data < 100)
(22,dataBuffer)
(23,memset(dataBuffer, 'A', data-1)
(24,NULL)
(25,-1)
(26,char *)
(27,1)
(28,data-1)
(29,RET)
(30,dataBuffer)
(31,'A')
(32,* dataBuffer = (char *)
(33,)
(34,free(dataBuffer)
(35,dataBuffer[data-1])
(36,1)
(37,dataBuffer)
(38,\'\\\\0\')
(39,data)
(40,if (dataBuffer == NULL)
(41,dataBuffer == NULL)
(42,printLine(dataBuffer)
(43,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^