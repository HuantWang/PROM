-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
            short shortData = (short)data;
            printShortLine(shortData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,20,23,27,29,32,35,37,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
18,19
18,20
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_31_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_short_31_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_short_31_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */            short shortData = (short)data;            printShortLine(shortData);        }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(13,26,0)
(24,15,0)
(0,18,0)
(19,27,0)
(26,6,0)
(9,18,0)
(18,10,0)
(27,19,0)
(8,0,0)
(4,0,0)
(10,6,0)
(20,16,0)
(25,15,0)
(27,16,0)
(12,10,0)
(0,4,0)
(6,16,0)
(0,5,0)
(14,10,0)
(17,19,0)
(15,16,0)
(1,26,0)
(21,6,0)
(15,25,0)
(2,18,0)
(10,15,0)
(18,6,0)
(11,6,0)
(13,4,0)
(22,27,0)
(4,26,0)
(3,4,0)
(5,0,0)
(23,13,0)
(13,23,1)
(25,24,1)
(18,2,1)
(4,0,1)
(24,27,1)
(14,12,1)
(8,3,1)
(0,5,1)
(23,4,1)
(12,15,1)
(9,10,1)
(0,8,1)
(18,10,1)
(10,15,1)
(27,19,1)
(10,14,1)
(17,22,1)
(2,9,1)
(15,25,1)
(3,18,1)
(19,17,1)
(0,18,1)
(7,13,1)
(13,4,1)
(27,19,2)
(4,0,2)
(10,15,2)
(0,5,2)
(15,25,2)
(0,18,2)
(13,4,2)
(18,10,2)
-----------------------------------
(0,(short)
(1,shortData)
(2,dataCopy)
(3,shortData)
(4,shortData = (short)
(5,short)
(6,)
(7,RET)
(8,data)
(9,data)
(10,dataCopy = data)
(11,dataCopy)
(12,dataCopy)
(13,printShortLine(shortData)
(14,data)
(15,data = RAND32()
(16,)
(17,1)
(18,data = dataCopy)
(19,-1)
(20,data)
(21,data)
(22,data)
(23,shortData)
(24,data)
(25,RAND32()
(26,)
(27,data = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^