-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    {
        int dataCopy = data;
        int data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
42,43
42,44
43,44
46,47
46,48
46,49
46,50
46,51
46,52
47,48
48,49
48,50
50,51
50,52
50,53
53,54
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
94,95
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,14,16,20,23,27,29,32,35,37,40,44,45,49,51,52,56,58,61,63,67,69,74,76,80,82,83,86,87,92,95,96,97,101,103,107,109
-----computeFrom-----
12,13
12,14
18,19
18,20
42,43
42,44
65,66
65,67
84,85
84,86
89,90
89,91
93,94
93,95
-----guardedBy-----
44,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_31_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_31_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(53,10,0)
(31,52,0)
(0,13,0)
(37,43,0)
(55,46,0)
(1,20,0)
(32,46,0)
(20,43,0)
(43,18,0)
(4,46,0)
(27,49,0)
(58,59,0)
(51,47,0)
(45,41,0)
(20,15,0)
(15,3,0)
(47,4,0)
(29,6,0)
(16,33,0)
(29,52,0)
(59,46,0)
(18,31,0)
(7,4,0)
(32,24,0)
(46,24,0)
(49,43,0)
(41,11,0)
(19,59,0)
(47,43,0)
(40,18,0)
(33,56,0)
(15,20,0)
(10,53,0)
(11,52,0)
(38,52,0)
(56,33,0)
(18,29,0)
(11,41,0)
(50,18,0)
(15,46,0)
(33,43,0)
(44,4,0)
(6,29,0)
(9,24,0)
(17,53,0)
(54,11,0)
(5,31,0)
(56,13,0)
(48,24,0)
(12,49,0)
(55,24,0)
(28,46,0)
(14,55,0)
(10,26,0)
(56,46,0)
(22,33,0)
(43,31,0)
(57,47,0)
(35,31,0)
(4,24,0)
(25,32,0)
(13,24,0)
(8,43,0)
(3,15,0)
(39,29,0)
(46,15,0)
(2,56,0)
(21,31,0)
(4,47,0)
(1,28,1)
(12,43,1)
(51,57,1)
(56,33,1)
(20,43,1)
(17,59,1)
(41,45,1)
(13,0,1)
(57,7,1)
(15,3,1)
(47,43,1)
(58,19,1)
(2,4,1)
(25,13,1)
(45,54,1)
(39,11,1)
(28,49,1)
(4,47,1)
(18,29,1)
(33,43,1)
(49,27,1)
(46,15,1)
(18,50,1)
(43,18,1)
(19,46,1)
(15,20,1)
(55,14,1)
(53,17,1)
(32,25,1)
(59,58,1)
(8,18,1)
(49,43,1)
(59,46,1)
(11,41,1)
(27,12,1)
(10,53,1)
(47,51,1)
(20,1,1)
(32,46,1)
(34,49,1)
(55,46,1)
(6,39,1)
(56,46,1)
(29,6,1)
(44,59,1)
(44,10,1)
(14,32,1)
(40,29,1)
(16,2,1)
(33,22,1)
(50,40,1)
(4,46,1)
(7,44,1)
(0,56,1)
(37,8,1)
(43,37,1)
(34,55,1)
(22,16,1)
(51,49,2)
(19,49,2)
(44,49,2)
(55,46,2)
(49,43,2)
(18,29,2)
(56,49,2)
(17,59,2)
(33,43,2)
(15,3,2)
(20,49,2)
(22,49,2)
(15,20,2)
(28,49,2)
(53,59,2)
(46,15,2)
(57,49,2)
(56,33,2)
(47,43,2)
(11,41,2)
(14,49,2)
(20,43,2)
(10,53,2)
(56,46,2)
(32,49,2)
(7,49,2)
(59,49,2)
(16,49,2)
(4,47,2)
(29,6,2)
(10,59,2)
(25,49,2)
(13,49,2)
(33,49,2)
(4,49,2)
(47,49,2)
(43,18,2)
(59,46,2)
(32,46,2)
(55,49,2)
(2,49,2)
(15,49,2)
(0,49,2)
(46,49,2)
(58,49,2)
(4,46,2)
(1,49,2)
-----------------------------------
(0,'\\\\0')
(1,data)
(2,dataBuffer)
(3,char *)
(4,memset(dataBuffer, \'A\', data-1)
(5,dataCopy)
(6,RAND32()
(7,'A')
(8,data)
(9,dataBuffer)
(10,exit(-1)
(11,data = -1)
(12,data)
(13,dataBuffer[data-1] = \'\\\\0\')
(14,dataBuffer)
(15,(char *)
(16,data)
(17,1)
(18,dataCopy = data)
(19,dataBuffer)
(20,malloc(data)
(21,data)
(22,1)
(23,dataBuffer[data-1] = '\\\\0')
(24,)
(25,dataBuffer)
(26,)
(27,100)
(28,dataBuffer)
(29,data = RAND32()
(30,\'\\\\0\')
(31,)
(32,printLine(dataBuffer)
(33,data-1)
(34,RET)
(35,if (data < 100)
(36,\'A\')
(37,dataCopy)
(38,data)
(39,data)
(40,dataCopy)
(41,-1)
(42,memset(dataBuffer, 'A', data-1)
(43,data = dataCopy)
(44,dataBuffer)
(45,1)
(46,* dataBuffer = (char *)
(47,data-1)
(48,if (dataBuffer == NULL)
(49,data < 100)
(50,data)
(51,1)
(52,)
(53,-1)
(54,data)
(55,free(dataBuffer)
(56,dataBuffer[data-1])
(57,data)
(58,NULL)
(59,dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^