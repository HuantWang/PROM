-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_66b_badSink(int dataArray[])
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,18,0)
(5,35,0)
(10,34,0)
(24,36,0)
(27,34,0)
(19,23,0)
(23,24,0)
(25,34,0)
(38,29,0)
(49,36,0)
(0,42,0)
(3,13,0)
(13,24,0)
(20,24,0)
(35,42,0)
(42,18,0)
(24,46,0)
(46,15,0)
(46,24,0)
(8,46,0)
(18,11,0)
(25,42,0)
(35,34,0)
(13,18,0)
(32,4,0)
(38,42,0)
(7,46,0)
(26,42,0)
(6,25,0)
(2,20,0)
(37,26,0)
(0,23,0)
(32,28,0)
(42,34,0)
(48,42,0)
(30,16,0)
(17,20,0)
(41,29,0)
(14,0,0)
(0,34,0)
(4,32,0)
(45,4,0)
(18,42,0)
(20,38,0)
(44,24,0)
(1,38,0)
(39,36,0)
(38,20,0)
(23,0,0)
(16,24,0)
(22,0,0)
(40,16,0)
(21,23,0)
(12,26,0)
(29,34,0)
(18,13,0)
(46,15,1)
(0,42,1)
(13,3,1)
(25,42,1)
(14,22,1)
(8,7,1)
(31,16,1)
(24,46,1)
(26,42,1)
(19,14,1)
(41,38,1)
(13,24,1)
(48,16,1)
(32,4,1)
(23,21,1)
(17,1,1)
(29,41,1)
(22,32,1)
(30,24,1)
(1,0,1)
(45,26,1)
(23,24,1)
(38,20,1)
(46,8,1)
(26,37,1)
(21,19,1)
(31,25,1)
(16,40,1)
(35,5,1)
(20,2,1)
(40,30,1)
(25,6,1)
(42,18,1)
(37,12,1)
(7,44,1)
(4,45,1)
(0,23,1)
(3,48,1)
(20,24,1)
(38,42,1)
(12,42,1)
(5,29,1)
(22,26,1)
(2,17,1)
(18,13,1)
(18,11,1)
(16,24,1)
(6,35,1)
(35,42,1)
(46,15,2)
(0,42,2)
(32,4,2)
(19,16,2)
(37,16,2)
(26,42,2)
(42,16,2)
(32,26,2)
(18,11,2)
(23,24,2)
(4,26,2)
(22,16,2)
(6,16,2)
(13,16,2)
(35,42,2)
(24,46,2)
(38,16,2)
(20,24,2)
(20,16,2)
(13,24,2)
(0,16,2)
(17,16,2)
(14,16,2)
(12,16,2)
(42,18,2)
(3,16,2)
(48,16,2)
(26,16,2)
(23,16,2)
(45,26,2)
(0,23,2)
(2,16,2)
(29,16,2)
(38,20,2)
(5,16,2)
(18,16,2)
(1,16,2)
(41,16,2)
(16,24,2)
(35,16,2)
(25,42,2)
(38,42,2)
(18,13,2)
(21,16,2)
(25,16,2)
-----------------------------------
(0,memset(dataBuffer, 'A', data-1)
(1,dataBuffer)
(2,1)
(3,data)
(4,-1)
(5,dataBuffer)
(6,dataBuffer)
(7,dataArray)
(8,2)
(9,memset(dataBuffer, \'A\', data-1)
(10,if (dataBuffer == NULL)
(11,char *)
(12,dataBuffer)
(13,malloc(data)
(14,\'A\')
(15,int dataArray[])
(16,data < 100)
(17,data)
(18,(char *)
(19,data)
(20,data-1)
(21,1)
(22,dataBuffer)
(23,data-1)
(24,data = dataArray[2])
(25,free(dataBuffer)
(26,dataBuffer == NULL)
(27,dataBuffer)
(28,)
(29,dataBuffer[data-1] = \'\\\\0\')
(30,data)
(31,RET)
(32,exit(-1)
(33,'A')
(34,)
(35,printLine(dataBuffer)
(36,)
(37,NULL)
(38,dataBuffer[data-1])
(39,if (data < 100)
(40,100)
(41,'\\\\0')
(42,* dataBuffer = (char *)
(43,\'\\\\0\')
(44,data)
(45,1)
(46,dataArray[2])
(47,dataBuffer[data-1] = '\\\\0')
(48,dataBuffer)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^