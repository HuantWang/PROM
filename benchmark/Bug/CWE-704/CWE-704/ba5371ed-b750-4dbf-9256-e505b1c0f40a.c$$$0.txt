-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
53,54
54,55
56,57
58,59
58,60
58,61
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
92,93
94,95
94,96
95,96
96,97
96,98
98,99
98,100
100,101
101,102
102,103
104,105
104,106
104,107
104,108
104,109
104,110
105,106
106,107
106,108
108,109
108,110
110,111
112,113
113,114
113,115
115,116
115,117
115,118
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
128,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
140,141
140,142
141,142
141,143
142,143
145,146
145,147
146,147
147,148
147,149
147,150
147,151
148,149
150,151
152,153
154,155
156,157
157,158
157,159
158,159
158,160
159,160
161,162
164,165
165,166
165,167
166,167
168,169
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,55,57,62,64,66,68,70,75,78,80,85,86,91,93,97,99,103,107,109,111,114,116,118,120,124,126,127,129,130,135,137,138,139,143,144,149,151,153,155,160,162,163,167,169
-----computeFrom-----
32,33
32,34
59,60
59,61
73,74
73,75
88,89
88,90
128,129
128,130
132,133
132,134
136,137
136,138
141,142
141,143
157,158
157,159
-----guardedBy-----
64,80
143,162
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(10,17,0)
(27,59,0)
(69,36,0)
(20,70,0)
(54,8,0)
(64,61,0)
(74,76,0)
(82,74,0)
(54,68,0)
(45,60,0)
(15,22,0)
(79,52,0)
(75,84,0)
(31,84,0)
(76,74,0)
(67,17,0)
(44,51,0)
(51,59,0)
(22,9,0)
(54,84,0)
(19,15,0)
(6,59,0)
(47,59,0)
(49,53,0)
(28,36,0)
(82,2,0)
(70,63,0)
(72,23,0)
(37,70,0)
(63,70,0)
(85,15,0)
(43,12,0)
(12,86,0)
(60,68,0)
(24,54,0)
(53,84,0)
(57,78,0)
(29,46,0)
(46,8,0)
(50,2,0)
(70,59,0)
(26,8,0)
(74,59,0)
(53,60,0)
(81,48,0)
(5,43,0)
(71,82,0)
(12,43,0)
(35,48,0)
(42,54,0)
(14,22,0)
(38,37,0)
(23,61,0)
(18,74,0)
(61,36,0)
(65,35,0)
(2,12,0)
(58,66,0)
(17,10,0)
(62,28,0)
(33,76,0)
(8,27,0)
(39,53,0)
(66,28,0)
(78,84,0)
(55,48,0)
(73,30,0)
(3,22,0)
(78,36,0)
(41,46,0)
(61,23,0)
(83,12,0)
(56,27,0)
(17,74,0)
(30,21,0)
(66,13,0)
(34,36,0)
(48,15,0)
(32,10,0)
(1,9,0)
(36,27,0)
(0,13,0)
(8,37,0)
(10,9,0)
(43,15,0)
(80,48,0)
(4,36,0)
(87,59,0)
(37,8,0)
(84,36,0)
(16,61,0)
(9,59,0)
(52,51,0)
(2,10,0)
(7,23,0)
(53,8,0)
(51,52,0)
(48,35,0)
(13,66,0)
(25,54,0)
(40,13,0)
(11,63,0)
(2,9,0)
(62,66,1)
(44,70,1)
(28,62,1)
(30,73,1)
(42,25,1)
(67,32,1)
(51,52,1)
(64,84,1)
(72,16,1)
(66,13,1)
(17,74,1)
(38,26,1)
(55,81,1)
(43,15,1)
(81,15,1)
(50,82,1)
(71,30,1)
(75,31,1)
(46,8,1)
(19,10,1)
(40,0,1)
(77,78,1)
(60,45,1)
(31,8,1)
(29,28,1)
(70,63,1)
(8,37,1)
(7,72,1)
(78,84,1)
(57,60,1)
(37,38,1)
(13,40,1)
(11,20,1)
(17,67,1)
(73,35,1)
(61,23,1)
(85,19,1)
(48,15,1)
(58,61,1)
(63,11,1)
(15,85,1)
(26,2,1)
(2,10,1)
(53,39,1)
(54,8,1)
(54,24,1)
(57,46,1)
(2,50,1)
(78,57,1)
(25,46,1)
(35,65,1)
(49,54,1)
(23,7,1)
(0,58,1)
(16,64,1)
(83,35,1)
(82,71,1)
(5,83,1)
(76,33,1)
(80,55,1)
(41,29,1)
(84,75,1)
(65,48,1)
(10,17,1)
(24,42,1)
(54,84,1)
(39,49,1)
(35,48,1)
(48,80,1)
(33,18,1)
(45,53,1)
(52,79,1)
(20,74,1)
(32,51,1)
(12,43,1)
(2,12,1)
(53,84,1)
(74,76,1)
(71,12,1)
(79,44,1)
(43,5,1)
(53,8,1)
(46,41,1)
(82,74,1)
(37,70,1)
(42,46,2)
(82,74,2)
(24,46,2)
(46,8,2)
(61,23,2)
(37,70,2)
(48,15,2)
(54,8,2)
(39,46,2)
(12,35,2)
(83,35,2)
(51,52,2)
(10,17,2)
(2,12,2)
(66,13,2)
(25,46,2)
(5,35,2)
(54,84,2)
(78,84,2)
(53,8,2)
(43,35,2)
(53,84,2)
(60,46,2)
(73,35,2)
(12,43,2)
(17,74,2)
(54,46,2)
(43,15,2)
(2,10,2)
(70,63,2)
(8,37,2)
(74,76,2)
(53,46,2)
(30,35,2)
(45,46,2)
(49,46,2)
(35,48,2)
-----------------------------------
(0,100)
(1,data)
(2,*dataPtr1 = data)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,dest)
(5,inputBuffer)
(6,data)
(7,1)
(8,data = *dataPtr2)
(9,)
(10,data = *dataPtr1)
(11,data)
(12,data = atoi(inputBuffer)
(13,100-1)
(14,inputBuffer)
(15,inputBuffer[CHAR_ARRAY_SIZE] = "")
(16,\\\'A\\\')
(17,*dataPtr1)
(18,dataPtr1)
(19,inputBuffer)
(20,dataPtr2)
(21,)
(22,)
(23,100-1)
(24,data)
(25,dest)
(26,data)
(27,)
(28,source[100-1] = \\\'\\\\0\\\')
(29,data)
(30,printLine("fgets()
(31,dest)
(32,data)
(33,data)
(34,if (data < 100)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,)
(37,*dataPtr2)
(38,dataPtr2)
(39,data)
(40,1)
(41,100)
(42,source)
(43,atoi(inputBuffer)
(44,data)
(45,\\\'\\\\0\\\')
(46,data < 100)
(47,dataPtr2)
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,dest)
(50,data)
(51,data = -1)
(52,-1)
(53,dest[data])
(54,memmove(dest, source, data)
(55,CHAR_ARRAY_SIZE)
(56,data)
(57,dest)
(58,source)
(59,)
(60,dest[data] = \\\'\\\\0\\\')
(61,memset(source, \\\'A\\\', 100-1)
(62,\\\'\\\\0\\\')
(63,&data)
(64,source)
(65,NULL)
(66,source[100-1])
(67,dataPtr1)
(68,)
(69,source)
(70,*dataPtr2 = &data)
(71,dataPtr1)
(72,100)
(73,"fgets()
(74,*dataPtr1 = &data)
(75,"")
(76,&data)
(77,RET)
(78,printLine(dest)
(79,1)
(80,stdin)
(81,inputBuffer)
(82,*dataPtr1)
(83,data)
(84,dest[100] = "")
(85,"")
(86,)
(87,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^