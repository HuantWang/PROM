-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(32,28,0)
(18,14,0)
(40,14,0)
(15,4,0)
(0,18,0)
(61,44,0)
(35,49,0)
(18,28,0)
(3,6,0)
(60,38,0)
(38,49,0)
(41,56,0)
(20,22,0)
(45,27,0)
(46,27,0)
(17,2,0)
(64,2,0)
(12,4,0)
(31,44,0)
(2,64,0)
(26,6,0)
(61,28,0)
(58,62,0)
(49,41,0)
(19,14,0)
(33,2,0)
(38,44,0)
(55,39,0)
(16,49,0)
(30,61,0)
(45,57,0)
(44,25,0)
(42,2,0)
(54,29,0)
(43,58,0)
(59,61,0)
(24,28,0)
(1,57,0)
(5,41,0)
(57,4,0)
(36,45,0)
(2,49,0)
(22,57,0)
(14,4,0)
(23,52,0)
(39,52,0)
(28,14,0)
(13,14,0)
(44,38,0)
(47,45,0)
(50,1,0)
(48,1,0)
(61,46,0)
(52,14,0)
(11,64,0)
(6,29,0)
(57,22,0)
(52,39,0)
(51,57,0)
(1,44,0)
(29,6,0)
(37,39,0)
(45,44,0)
(7,41,0)
(29,40,0)
(10,45,0)
(63,14,0)
(21,52,0)
(45,28,0)
(61,57,0)
(9,46,0)
(53,40,0)
(61,59,1)
(20,51,1)
(32,24,1)
(61,44,1)
(48,50,1)
(0,1,1)
(45,36,1)
(42,33,1)
(40,53,1)
(59,30,1)
(2,17,1)
(24,44,1)
(18,28,1)
(35,16,1)
(11,2,1)
(44,38,1)
(54,52,1)
(57,22,1)
(24,8,1)
(10,1,1)
(26,3,1)
(58,43,1)
(36,47,1)
(1,57,1)
(64,2,1)
(46,9,1)
(61,57,1)
(21,23,1)
(6,26,1)
(39,55,1)
(2,49,1)
(33,49,1)
(3,54,1)
(24,58,1)
(37,21,1)
(22,20,1)
(1,48,1)
(34,18,1)
(0,46,1)
(45,28,1)
(47,10,1)
(53,29,1)
(18,0,1)
(28,32,1)
(50,40,1)
(45,44,1)
(17,42,1)
(8,57,1)
(43,64,1)
(38,60,1)
(31,64,1)
(52,39,1)
(45,57,1)
(1,44,1)
(64,11,1)
(49,35,1)
(30,45,1)
(29,6,1)
(61,28,1)
(9,61,1)
(16,8,1)
(60,31,1)
(38,49,1)
(23,28,1)
(55,37,1)
(49,8,2)
(45,28,2)
(35,8,2)
(38,64,2)
(1,57,2)
(44,38,2)
(60,64,2)
(52,39,2)
(17,8,2)
(2,8,2)
(59,1,2)
(61,44,2)
(16,8,2)
(9,1,2)
(10,1,2)
(61,28,2)
(61,57,2)
(29,6,2)
(46,1,2)
(57,22,2)
(58,64,2)
(44,64,2)
(30,1,2)
(64,2,2)
(18,28,2)
(43,64,2)
(33,8,2)
(2,49,2)
(45,57,2)
(36,1,2)
(64,8,2)
(31,64,2)
(47,1,2)
(61,1,2)
(1,44,2)
(45,44,2)
(42,8,2)
(11,8,2)
(45,1,2)
(38,49,2)
-----------------------------------
(0,dest)
(1,data < 100)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,100)
(4,)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,100-1)
(7,inputBuffer)
(8,STATIC_CONST_TRUE)
(9,\\\'\\\\0\\\')
(10,dest)
(11,NULL)
(12,if(STATIC_CONST_TRUE)
(13,dest)
(14,)
(15,data)
(16,inputBuffer)
(17,stdin)
(18,printLine(dest)
(19,if (data < 100)
(20,1)
(21,\\\'A\\\')
(22,-1)
(23,source)
(24,dest)
(25,)
(26,1)
(27,)
(28,dest[100] = "")
(29,source[100-1])
(30,dest)
(31,data)
(32,"")
(33,inputBuffer)
(34,RET)
(35,"")
(36,data)
(37,100)
(38,atoi(inputBuffer)
(39,100-1)
(40,source[100-1] = \\\'\\\\0\\\')
(41,)
(42,CHAR_ARRAY_SIZE)
(43,"fgets()
(44,data = atoi(inputBuffer)
(45,memmove(dest, source, data)
(46,dest[data] = \\\'\\\\0\\\')
(47,source)
(48,100)
(49,inputBuffer[CHAR_ARRAY_SIZE] = "")
(50,data)
(51,data)
(52,memset(source, \\\'A\\\', 100-1)
(53,\\\'\\\\0\\\')
(54,source)
(55,1)
(56,)
(57,data = -1)
(58,printLine("fgets()
(59,data)
(60,inputBuffer)
(61,dest[data])
(62,)
(63,source)
(64,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^