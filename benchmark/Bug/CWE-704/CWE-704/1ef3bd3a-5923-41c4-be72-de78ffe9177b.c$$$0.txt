-----label-----
1
-----code-----
short CWE194_Unexpected_Sign_Extension__fgets_malloc_61b_badSource(short data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,42,45,47,52,53,56
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
short CWE194_Unexpected_Sign_Extension__fgets_malloc_61b_badSource(short data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
short
CWE194_Unexpected_Sign_Extension__fgets_malloc_61b_badSource(short data)
CWE194_Unexpected_Sign_Extension__fgets_malloc_61b_badSource
short data
short
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(13,15,0)
(19,21,0)
(14,6,0)
(26,11,0)
(25,20,0)
(13,23,0)
(21,7,0)
(13,5,0)
(15,23,0)
(4,6,0)
(12,2,0)
(11,6,0)
(8,11,0)
(16,11,0)
(10,17,0)
(2,6,0)
(0,13,0)
(17,11,0)
(6,20,0)
(12,15,0)
(1,20,0)
(20,5,0)
(18,13,0)
(24,15,0)
(11,17,0)
(12,3,0)
(3,12,0)
(15,12,0)
(15,9,0)
(2,12,0)
(22,2,0)
(11,26,1)
(17,11,1)
(6,14,1)
(12,2,1)
(12,3,1)
(24,17,1)
(18,15,1)
(26,16,1)
(22,24,1)
(15,23,1)
(19,17,1)
(13,18,1)
(18,21,1)
(14,4,1)
(2,6,1)
(17,10,1)
(8,6,1)
(15,12,1)
(10,11,1)
(11,6,1)
(13,23,1)
(16,8,1)
(0,13,1)
(13,15,1)
(2,22,1)
(21,19,1)
(2,6,2)
(12,2,2)
(13,23,2)
(12,17,2)
(13,15,2)
(11,6,2)
(21,17,2)
(15,17,2)
(15,23,2)
(2,17,2)
(22,17,2)
(0,13,2)
(19,17,2)
(15,12,2)
(12,3,2)
(17,11,2)
(24,17,2)
-----------------------------------
(0,RET)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,atoi(inputBuffer)
(3,short)
(4,inputBuffer)
(5,)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,)
(8,inputBuffer)
(9,)
(10,NULL)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,(short)
(13,return data;)
(14,"")
(15,data = (short)
(16,CHAR_ARRAY_SIZE)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,data)
(19,"fgets()
(20,)
(21,printLine("fgets()
(22,inputBuffer)
(23,short data)
(24,data)
(25,inputBuffer)
(26,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^