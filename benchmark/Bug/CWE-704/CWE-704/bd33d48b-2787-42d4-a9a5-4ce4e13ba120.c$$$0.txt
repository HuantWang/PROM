-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_22_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1; /* true */
    data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,59,62,63,68,71,72,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
60,61
60,62
65,66
65,67
69,70
69,71
-----guardedBy-----
33,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_22_bad(){    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_bad
{    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1;
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal
1
data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data);
data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data)
data
data
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data)
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource
CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,3,0)
(26,8,0)
(23,1,0)
(14,36,0)
(9,14,0)
(42,2,0)
(37,7,0)
(32,2,0)
(40,26,0)
(4,45,0)
(44,24,0)
(31,13,0)
(13,24,0)
(5,36,0)
(11,13,0)
(21,10,0)
(38,8,0)
(13,36,0)
(16,1,0)
(0,4,0)
(41,29,0)
(14,4,0)
(20,2,0)
(7,36,0)
(24,1,0)
(15,10,0)
(30,8,0)
(12,5,0)
(24,13,0)
(42,5,0)
(27,23,0)
(1,29,0)
(45,4,0)
(7,4,0)
(2,1,0)
(28,1,0)
(1,26,0)
(45,23,0)
(33,36,0)
(18,29,0)
(23,45,0)
(26,1,0)
(2,42,0)
(10,29,0)
(6,16,0)
(34,42,0)
(13,4,0)
(4,36,0)
(42,4,0)
(22,16,0)
(39,24,0)
(3,45,0)
(8,29,0)
(9,7,1)
(24,39,1)
(17,16,1)
(0,16,1)
(27,0,1)
(13,4,1)
(42,2,1)
(44,11,1)
(26,40,1)
(14,9,1)
(42,4,1)
(7,37,1)
(5,12,1)
(26,8,1)
(16,1,1)
(20,34,1)
(31,4,1)
(8,30,1)
(14,4,1)
(2,32,1)
(13,24,1)
(37,5,1)
(17,14,1)
(39,44,1)
(22,6,1)
(12,42,1)
(45,23,1)
(40,28,1)
(2,1,1)
(45,3,1)
(11,31,1)
(30,38,1)
(16,22,1)
(23,1,1)
(15,21,1)
(34,13,1)
(28,10,1)
(32,20,1)
(21,8,1)
(24,1,1)
(23,27,1)
(1,26,1)
(6,1,1)
(4,45,1)
(10,15,1)
(7,4,1)
(39,16,2)
(45,16,2)
(2,16,2)
(14,16,2)
(12,16,2)
(45,3,2)
(7,4,2)
(34,16,2)
(16,1,2)
(9,16,2)
(13,16,2)
(32,16,2)
(26,8,2)
(13,24,2)
(0,16,2)
(20,16,2)
(1,26,2)
(5,16,2)
(27,16,2)
(24,16,2)
(45,23,2)
(23,16,2)
(31,16,2)
(4,16,2)
(42,2,2)
(2,1,2)
(4,45,2)
(42,4,2)
(23,1,2)
(13,4,2)
(44,16,2)
(24,1,2)
(7,16,2)
(37,16,2)
(42,16,2)
(14,4,2)
(11,16,2)
-----------------------------------
(0,dataBuffer)
(1,data = CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data)
(2,data-1)
(3,char *)
(4,* dataBuffer = (char *)
(5,dataBuffer[data-1] = \'\\\\0\')
(6,data)
(7,printLine(dataBuffer)
(8,data = 0)
(9,dataBuffer)
(10,CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal = 1)
(11,'A')
(12,'\\\\0')
(13,memset(dataBuffer, \'A\', data-1)
(14,free(dataBuffer)
(15,1)
(16,data < 100)
(17,RET)
(18,if (data < 100)
(19,dataBuffer[data-1] = '\\\\0')
(20,data)
(21,CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badGlobal)
(22,100)
(23,malloc(data)
(24,data-1)
(25,\'A\')
(26,CWE194_Unexpected_Sign_Extension__fgets_malloc_22_badSource(data)
(27,data)
(28,data)
(29,)
(30,0)
(31,dataBuffer)
(32,1)
(33,dataBuffer)
(34,dataBuffer)
(35,\'\\\\0\')
(36,)
(37,dataBuffer)
(38,data)
(39,1)
(40,data)
(41,data)
(42,dataBuffer[data-1])
(43,memset(dataBuffer, 'A', data-1)
(44,data)
(45,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^