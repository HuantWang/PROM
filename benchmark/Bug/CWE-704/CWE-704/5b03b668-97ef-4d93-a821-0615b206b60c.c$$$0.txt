-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
54,55
54,56
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
55,67
56,57
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
82,83
85,86
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
139,140
141,142
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
150,151
152,153
154,155
156,157
156,158
157,158
161,162
161,163
162,163
162,164
163,164
163,165
164,165
166,167
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
179,180
182,183
183,184
183,185
184,185
186,187
186,188
187,188
189,190
191,192
191,193
191,194
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
199,200
201,202
203,204
204,205
205,206
205,207
206,207
208,209
210,211
211,212
212,213
212,214
213,214
215,216
218,219
218,220
219,220
219,221
220,221
222,223
224,225
225,226
226,227
226,228
227,228
229,230
231,232
231,233
231,234
231,235
231,236
231,237
232,233
233,234
233,235
235,236
235,237
237,238
239,240
240,241
240,242
242,243
242,244
242,245
244,245
246,247
248,249
249,250
249,251
249,252
249,253
250,251
252,253
255,256
255,257
258,259
259,260
259,261
260,261
260,262
261,262
263,264
263,265
267,268
267,269
268,269
268,270
269,270
272,273
272,274
273,274
274,275
274,276
274,277
274,278
275,276
277,278
279,280
281,282
283,284
284,285
284,286
285,286
285,287
286,287
288,289
291,292
292,293
292,294
293,294
295,296
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,34,36,40,42,45,48,50,53,59,62,64,66,68,72,74,76,80,83,84,88,93,94,96,102,103,104,107,109,114,115,118,120,125,127,131,133,136,140,142,144,148,151,153,155,158,159,160,165,167,170,171,173,178,180,181,185,188,190,195,197,200,202,207,209,214,216,217,221,223,228,230,234,236,238,241,243,245,247,251,253,254,256,257,262,264,265,266,270,271,276,278,280,282,287,289,290,294,296
-----computeFrom-----
12,13
12,14
57,58
57,59
70,71
70,72
90,91
90,92
98,99
98,100
111,112
111,113
122,123
122,124
146,147
146,148
156,157
156,158
162,163
162,164
163,164
163,165
168,169
168,170
175,176
175,177
183,184
183,185
192,193
192,194
193,194
193,195
198,199
198,200
205,206
205,207
212,213
212,214
219,220
219,221
255,256
255,257
259,260
259,261
263,264
263,265
268,269
268,270
284,285
284,286
-----guardedBy-----
221,230
270,289
-----guardedByNegation-----
200,216
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_04_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,47,0)
(160,96,0)
(63,108,0)
(110,52,0)
(3,113,0)
(6,55,0)
(125,3,0)
(130,29,0)
(139,90,0)
(55,6,0)
(140,4,0)
(154,147,0)
(93,34,0)
(133,177,0)
(31,73,0)
(121,160,0)
(154,93,0)
(166,54,0)
(25,17,0)
(79,120,0)
(165,147,0)
(51,93,0)
(132,120,0)
(65,129,0)
(127,95,0)
(94,9,0)
(68,29,0)
(40,179,0)
(29,158,0)
(29,93,0)
(158,69,0)
(18,93,0)
(98,96,0)
(141,57,0)
(154,179,0)
(96,148,0)
(137,1,0)
(8,160,0)
(55,90,0)
(102,84,0)
(21,161,0)
(142,159,0)
(31,178,0)
(168,11,0)
(175,52,0)
(47,93,0)
(101,21,0)
(62,30,0)
(176,174,0)
(57,123,0)
(108,116,0)
(12,88,0)
(49,147,0)
(146,78,0)
(89,177,0)
(60,133,0)
(32,30,0)
(47,129,0)
(136,133,0)
(158,88,0)
(38,47,0)
(95,133,0)
(24,118,0)
(126,17,0)
(77,51,0)
(10,153,0)
(126,162,0)
(151,118,0)
(149,167,0)
(123,57,0)
(50,95,0)
(53,57,0)
(138,63,0)
(129,14,0)
(47,147,0)
(161,21,0)
(28,167,0)
(72,128,0)
(15,179,0)
(80,158,0)
(117,96,0)
(41,96,0)
(128,30,0)
(70,178,0)
(144,3,0)
(29,179,0)
(115,96,0)
(147,1,0)
(26,73,0)
(20,94,0)
(3,133,0)
(167,1,0)
(24,7,0)
(167,120,0)
(67,158,0)
(99,54,0)
(86,134,0)
(178,161,0)
(156,88,0)
(61,108,0)
(128,133,0)
(112,60,0)
(7,178,0)
(104,99,0)
(48,31,0)
(84,113,0)
(122,3,0)
(95,30,0)
(30,96,0)
(71,60,0)
(58,96,0)
(113,124,0)
(83,162,0)
(108,61,0)
(9,11,0)
(157,31,0)
(3,125,0)
(120,167,0)
(1,174,0)
(128,13,0)
(171,9,0)
(100,118,0)
(33,1,0)
(152,126,0)
(170,61,0)
(155,139,0)
(180,162,0)
(88,12,0)
(37,162,0)
(90,139,0)
(108,63,0)
(164,61,0)
(57,88,0)
(119,96,0)
(154,158,0)
(150,87,0)
(159,180,0)
(2,147,0)
(114,161,0)
(75,6,0)
(124,113,0)
(161,133,0)
(73,162,0)
(88,162,0)
(173,6,0)
(47,158,0)
(59,122,0)
(76,161,0)
(52,180,0)
(177,133,0)
(0,96,0)
(85,99,0)
(78,162,0)
(44,96,0)
(42,94,0)
(113,84,0)
(54,162,0)
(93,51,0)
(27,2,0)
(90,162,0)
(2,1,0)
(64,116,0)
(3,122,0)
(123,87,0)
(66,125,0)
(161,178,0)
(145,162,0)
(17,126,0)
(154,14,0)
(172,174,0)
(11,1,0)
(135,161,0)
(56,154,0)
(111,177,0)
(169,162,0)
(23,154,0)
(5,39,0)
(116,108,0)
(87,88,0)
(46,152,0)
(178,162,0)
(74,21,0)
(133,162,0)
(47,179,0)
(87,123,0)
(105,78,0)
(118,24,0)
(81,7,0)
(91,87,0)
(163,12,0)
(131,177,0)
(179,174,0)
(126,152,0)
(97,1,0)
(109,162,0)
(180,159,0)
(43,154,0)
(9,94,0)
(118,178,0)
(16,96,0)
(45,126,0)
(35,107,0)
(143,7,0)
(103,55,0)
(7,24,0)
(113,3,0)
(36,96,0)
(89,131,1)
(128,133,1)
(57,88,1)
(55,6,1)
(76,70,1)
(47,147,1)
(48,157,1)
(128,72,1)
(3,122,1)
(17,25,1)
(25,45,1)
(60,133,1)
(45,152,1)
(65,47,1)
(68,130,1)
(129,65,1)
(94,42,1)
(35,106,1)
(158,67,1)
(151,178,1)
(19,93,1)
(110,175,1)
(86,60,1)
(120,79,1)
(141,53,1)
(77,18,1)
(95,30,1)
(12,163,1)
(177,111,1)
(9,94,1)
(22,38,1)
(38,154,1)
(29,179,1)
(59,113,1)
(159,142,1)
(123,87,1)
(150,91,1)
(27,29,1)
(60,71,1)
(27,129,1)
(155,55,1)
(160,121,1)
(105,116,1)
(79,132,1)
(133,177,1)
(47,22,1)
(170,164,1)
(152,46,1)
(43,56,1)
(62,32,1)
(154,158,1)
(139,155,1)
(30,62,1)
(31,48,1)
(3,133,1)
(99,104,1)
(84,102,1)
(164,30,1)
(127,19,1)
(118,100,1)
(53,87,1)
(131,136,1)
(72,95,1)
(164,19,1)
(78,146,1)
(7,178,1)
(29,93,1)
(100,151,1)
(73,26,1)
(163,156,1)
(143,81,1)
(87,150,1)
(126,152,1)
(95,50,1)
(49,165,1)
(127,140,1)
(2,147,1)
(158,88,1)
(87,88,1)
(57,141,1)
(154,93,1)
(3,113,1)
(64,108,1)
(80,123,1)
(154,179,1)
(106,128,1)
(20,171,1)
(47,179,1)
(118,178,1)
(2,27,1)
(55,103,1)
(47,158,1)
(146,105,1)
(161,133,1)
(91,88,1)
(6,173,1)
(63,138,1)
(167,120,1)
(108,61,1)
(136,78,1)
(123,57,1)
(127,5,1)
(122,59,1)
(54,166,1)
(67,80,1)
(130,11,1)
(24,7,1)
(149,147,1)
(132,28,1)
(165,106,1)
(165,35,1)
(75,54,1)
(32,160,1)
(40,15,1)
(116,108,1)
(102,144,1)
(50,127,1)
(179,40,1)
(29,68,1)
(47,93,1)
(111,89,1)
(178,161,1)
(93,51,1)
(135,76,1)
(71,112,1)
(92,179,1)
(103,6,1)
(28,149,1)
(154,147,1)
(171,167,1)
(166,99,1)
(11,168,1)
(140,125,1)
(106,95,1)
(46,60,1)
(18,123,1)
(125,3,1)
(125,66,1)
(161,21,1)
(113,124,1)
(121,8,1)
(21,101,1)
(144,180,1)
(127,10,1)
(7,143,1)
(165,92,1)
(70,125,1)
(66,3,1)
(142,52,1)
(82,2,1)
(114,21,1)
(156,73,1)
(180,159,1)
(26,31,1)
(154,43,1)
(161,114,1)
(5,116,1)
(88,12,1)
(85,126,1)
(81,118,1)
(126,17,1)
(95,133,1)
(147,49,1)
(113,84,1)
(56,23,1)
(112,133,1)
(74,135,1)
(175,90,1)
(108,63,1)
(31,178,1)
(127,86,1)
(128,30,1)
(42,20,1)
(104,85,1)
(173,75,1)
(8,92,1)
(116,64,1)
(24,118,1)
(51,77,1)
(19,158,1)
(168,9,1)
(52,110,1)
(101,74,1)
(90,139,1)
(138,61,1)
(23,29,1)
(10,24,1)
(29,158,1)
(157,24,1)
(61,170,1)
(60,133,2)
(178,125,2)
(125,60,2)
(70,125,2)
(146,116,2)
(123,57,2)
(121,92,2)
(178,161,2)
(24,118,2)
(155,60,2)
(80,123,2)
(150,24,2)
(29,93,2)
(57,87,2)
(164,19,2)
(143,118,2)
(63,19,2)
(50,92,2)
(122,60,2)
(47,93,2)
(93,123,2)
(46,60,2)
(67,123,2)
(8,92,2)
(47,158,2)
(38,29,2)
(23,29,2)
(55,6,2)
(110,60,2)
(113,60,2)
(160,92,2)
(161,21,2)
(123,87,2)
(177,116,2)
(26,24,2)
(29,158,2)
(108,19,2)
(175,60,2)
(103,60,2)
(74,125,2)
(158,88,2)
(118,178,2)
(154,29,2)
(31,178,2)
(86,60,2)
(6,60,2)
(76,125,2)
(10,24,2)
(106,92,2)
(161,125,2)
(71,116,2)
(84,60,2)
(90,139,2)
(87,88,2)
(151,125,2)
(25,60,2)
(133,177,2)
(66,60,2)
(126,17,2)
(89,116,2)
(101,125,2)
(47,179,2)
(154,179,2)
(53,87,2)
(56,29,2)
(48,24,2)
(85,60,2)
(131,116,2)
(112,116,2)
(161,133,2)
(30,92,2)
(43,29,2)
(59,60,2)
(12,24,2)
(88,24,2)
(91,24,2)
(95,30,2)
(31,24,2)
(95,133,2)
(136,116,2)
(18,123,2)
(154,93,2)
(142,60,2)
(52,60,2)
(87,24,2)
(24,7,2)
(99,60,2)
(180,159,2)
(126,152,2)
(108,61,2)
(116,19,2)
(170,19,2)
(2,147,2)
(128,30,2)
(54,60,2)
(152,60,2)
(133,116,2)
(129,29,2)
(72,95,2)
(116,92,2)
(45,60,2)
(63,92,2)
(57,88,2)
(158,123,2)
(93,51,2)
(180,60,2)
(126,60,2)
(139,60,2)
(75,60,2)
(62,92,2)
(166,60,2)
(22,29,2)
(29,179,2)
(123,24,2)
(64,92,2)
(127,92,2)
(5,116,2)
(7,118,2)
(7,178,2)
(164,92,2)
(128,133,2)
(104,60,2)
(32,92,2)
(118,125,2)
(138,92,2)
(128,95,2)
(60,116,2)
(156,24,2)
(113,124,2)
(170,92,2)
(88,12,2)
(102,60,2)
(154,147,2)
(78,116,2)
(138,19,2)
(108,63,2)
(108,92,2)
(116,108,2)
(105,116,2)
(73,24,2)
(111,116,2)
(21,125,2)
(17,60,2)
(3,113,2)
(100,125,2)
(24,125,2)
(19,24,2)
(9,94,2)
(95,92,2)
(3,122,2)
(140,125,2)
(113,84,2)
(125,3,2)
(61,19,2)
(157,24,2)
(3,133,2)
(90,60,2)
(47,29,2)
(65,29,2)
(173,60,2)
(55,60,2)
(77,123,2)
(61,92,2)
(64,19,2)
(141,87,2)
(144,60,2)
(163,24,2)
(135,125,2)
(47,147,2)
(154,158,2)
(3,60,2)
(81,118,2)
(35,106,2)
(167,120,2)
(114,125,2)
(159,60,2)
(51,123,2)
-----------------------------------
(0,if (connectSocket != INVALID_SOCKET)
(1,)
(2,printLine(dest)
(3,connect(connectSocket, (struct sockaddr*)
(4,)
(5,break;)
(6,service.sin_addr)
(7,recvResult == 0)
(8,wsaDataInit)
(9,source[100-1])
(10,break;)
(11,source[100-1] = \\\'\\\\0\\\')
(12,atoi(inputBuffer)
(13,)
(14,)
(15,data)
(16,inputBuffer)
(17,sizeof(service)
(18,data)
(19,0)
(20,100)
(21,CHAR_ARRAY_SIZE - 1)
(22,data)
(23,dest)
(24,recvResult == SOCKET_ERROR || recvResult == 0)
(25,service)
(26,\\\'\\\\0\\\')
(27,dest)
(28,\\\'A\\\')
(29,data < 100)
(30,connectSocket = INVALID_SOCKET)
(31,inputBuffer[recvResult])
(32,connectSocket)
(33,if (data < 100)
(34,)
(35,WSACleanup()
(36,service)
(37,if (connectSocket == INVALID_SOCKET)
(38,dest)
(39,)
(40,0)
(41,connectSocket)
(42,1)
(43,data)
(44,do)
(45,0)
(46,service)
(47,dest[data])
(48,recvResult)
(49,"")
(50,INVALID_SOCKET)
(51,-1)
(52,service.sin_port)
(53,tempInt)
(54,service.sin_family = AF_INET)
(55,service.sin_addr.s_addr)
(56,source)
(57,tempInt < SHRT_MIN)
(58,wsaData)
(59,service)
(60,connectSocket == INVALID_SOCKET)
(61,MAKEWORD(2,2)
(62,INVALID_SOCKET)
(63,&wsaData)
(64,NO_ERROR)
(65,\\\'\\\\0\\\')
(66,SOCKET_ERROR)
(67,tempInt)
(68,100)
(69,)
(70,recvResult)
(71,INVALID_SOCKET)
(72,connectSocket)
(73,inputBuffer[recvResult] = \\\'\\\\0\\\')
(74,CHAR_ARRAY_SIZE)
(75,service)
(76,connectSocket)
(77,1)
(78,wsaDataInit = 1)
(79,1)
(80,data)
(81,recvResult)
(82,RET)
(83,if (recvResult == SOCKET_ERROR || recvResult == 0)
(84,&service)
(85,service)
(86,break;)
(87,tempInt > SHRT_MAX)
(88,tempInt = atoi(inputBuffer)
(89,SOCK_STREAM)
(90,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(91,tempInt)
(92,STATIC_CONST_TRUE)
(93,data = -1)
(94,100-1)
(95,connectSocket != INVALID_SOCKET)
(96,)
(97,source)
(98,tempInt)
(99,service.sin_family)
(100,SOCKET_ERROR)
(101,1)
(102,service)
(103,s_addr)
(104,sin_family)
(105,wsaDataInit)
(106,wsaDataInit)
(107,)
(108,WSAStartup(MAKEWORD(2,2)
(109,if (connect(connectSocket, (struct sockaddr*)
(110,sin_port)
(111,IPPROTO_TCP)
(112,connectSocket)
(113,(struct sockaddr*)
(114,0)
(115,wsaDataInit)
(116,WSAStartup(MAKEWORD(2,2)
(117,recvResult)
(118,recvResult == SOCKET_ERROR)
(119,if (wsaDataInit)
(120,100-1)
(121,0)
(122,sizeof(service)
(123,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(124,struct sockaddr*)
(125,connect(connectSocket, (struct sockaddr*)
(126,memset(&service, 0, sizeof(service)
(127,connectSocket)
(128,CLOSE_SOCKET(connectSocket)
(129,dest[data] = \\\'\\\\0\\\')
(130,data)
(131,AF_INET)
(132,100)
(133,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(134,)
(135,inputBuffer)
(136,connectSocket)
(137,dest)
(138,wsaData)
(139,inet_addr(IP_ADDRESS)
(140,break;)
(141,SHRT_MIN)
(142,TCP_PORT)
(143,0)
(144,connectSocket)
(145,if (WSAStartup(MAKEWORD(2,2)
(146,1)
(147,dest[100] = "")
(148,)
(149,source)
(150,SHRT_MAX)
(151,recvResult)
(152,&service)
(153,)
(154,strncpy(dest, source, data)
(155,IP_ADDRESS)
(156,tempInt)
(157,inputBuffer)
(158,data = tempInt)
(159,htons(TCP_PORT)
(160,wsaDataInit = 0)
(161,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(162,)
(163,inputBuffer)
(164,2)
(165,dest)
(166,AF_INET)
(167,memset(source, \\\'A\\\', 100-1)
(168,\\\'\\\\0\\\')
(169,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(170,2)
(171,source)
(172,data)
(173,sin_addr)
(174,)
(175,service)
(176,if(STATIC_CONST_TRUE)
(177,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(178,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(179,data = 0)
(180,service.sin_port = htons(TCP_PORT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^