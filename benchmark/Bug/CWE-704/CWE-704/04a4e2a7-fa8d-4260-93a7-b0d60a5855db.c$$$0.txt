-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_02_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
72,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,73,74,76,80,82
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
-----guardedBy-----
37,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_02_bad(){    short data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_02_bad()
CWE197_Numeric_Truncation_Error__short_fgets_02_bad
{    short data;    /* Initialize data */    data = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(29,17,0)
(35,3,0)
(4,6,0)
(13,10,0)
(5,12,0)
(36,30,0)
(32,17,0)
(28,4,0)
(5,30,0)
(21,10,0)
(27,5,0)
(9,13,0)
(30,2,0)
(12,5,0)
(22,5,0)
(4,17,0)
(0,4,0)
(3,35,0)
(10,13,0)
(3,15,0)
(20,25,0)
(22,30,0)
(13,2,0)
(35,34,0)
(8,22,0)
(18,2,0)
(35,29,0)
(40,26,0)
(33,4,0)
(12,3,0)
(11,26,0)
(34,35,0)
(38,17,0)
(14,29,0)
(23,2,0)
(7,12,0)
(31,12,0)
(26,19,0)
(39,6,0)
(17,26,0)
(29,35,0)
(6,4,0)
(12,31,0)
(1,3,0)
(16,20,0)
(12,13,0)
(17,32,1)
(16,6,1)
(33,17,1)
(29,14,1)
(38,37,1)
(28,0,1)
(12,3,1)
(22,8,1)
(22,5,1)
(6,39,1)
(3,35,1)
(13,10,1)
(14,1,1)
(7,27,1)
(5,12,1)
(27,20,1)
(27,37,1)
(32,38,1)
(20,16,1)
(10,21,1)
(24,22,1)
(12,13,1)
(27,3,1)
(21,9,1)
(37,13,1)
(29,17,1)
(4,28,1)
(35,29,1)
(8,5,1)
(12,31,1)
(35,34,1)
(0,33,1)
(4,17,1)
(1,6,1)
(12,7,1)
(6,4,1)
(39,4,1)
(12,3,2)
(35,29,2)
(29,17,2)
(0,37,2)
(1,6,2)
(28,37,2)
(20,6,2)
(4,17,2)
(14,6,2)
(33,37,2)
(16,6,2)
(13,10,2)
(4,37,2)
(22,5,2)
(3,6,2)
(35,6,2)
(38,37,2)
(6,4,2)
(32,37,2)
(17,37,2)
(12,31,2)
(3,35,2)
(6,37,2)
(39,37,2)
(35,34,2)
(12,13,2)
(5,12,2)
(29,6,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,data)
(2,)
(3,data = (short)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,charData = (char)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,data)
(8,charData)
(9,data)
(10,-1)
(11,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,(char)
(13,data = -1)
(14,inputBuffer)
(15,)
(16,"fgets()
(17,inputBuffer[CHAR_ARRAY_SIZE] = "")
(18,data)
(19,)
(20,printLine("fgets()
(21,1)
(22,printHexCharLine(charData)
(23,if(1)
(24,RET)
(25,)
(26,)
(27,charData)
(28,stdin)
(29,atoi(inputBuffer)
(30,)
(31,char)
(32,"")
(33,inputBuffer)
(34,short)
(35,(short)
(36,charData)
(37,1)
(38,inputBuffer)
(39,NULL)
(40,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^