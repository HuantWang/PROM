-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66_bad()
{
    int data;
    int dataArray[5];
    /* Initialize data */
    data = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
24,29
24,30
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
53,55
54,55
54,56
54,57
54,58
54,59
54,60
54,61
54,62
54,63
54,64
54,65
55,56
56,57
56,58
57,58
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
81,82
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
115,117
116,117
118,119
120,121
120,122
121,122
121,123
122,123
122,124
122,125
122,126
123,124
125,126
127,128
127,129
128,129
128,130
129,130
131,132
133,134
134,135
136,137
137,138
138,139
140,141
142,143
144,145
145,146
145,147
146,147
148,149
148,150
148,151
148,152
148,153
149,150
151,152
153,154
155,156
155,157
156,157
160,161
160,162
161,162
161,163
162,163
162,164
163,164
165,166
167,168
167,169
168,169
171,172
173,174
174,175
174,176
175,176
175,177
176,177
178,179
181,182
182,183
182,184
183,184
185,186
185,187
186,187
188,189
191,192
191,193
192,193
192,194
193,194
195,196
197,198
198,199
199,200
199,201
200,201
202,203
204,205
205,206
205,207
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
216,217
-----nextToken-----
2,4,8,10,13,15,17,21,23,27,29,33,35,39,41,44,47,49,52,58,61,63,65,67,71,73,75,79,82,83,87,92,93,95,101,102,103,106,108,113,114,117,119,124,126,130,132,135,139,141,143,147,150,152,154,157,158,159,164,166,169,170,172,177,179,180,184,187,189,190,194,196,201,203,208,209,211,215,217
-----computeFrom-----
19,20
19,21
56,57
56,58
69,70
69,71
89,90
89,91
97,98
97,99
110,111
110,112
121,122
121,123
145,146
145,147
155,156
155,157
161,162
161,163
162,163
162,164
167,168
167,169
174,175
174,176
182,183
182,184
192,193
192,194
205,206
205,207
-----guardedBy-----
194,203
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66_bad(){    int data;    int dataArray[5];    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray);}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66_bad
{    int data;    int dataArray[5];    /* Initialize data */    data = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray);}
int data;
int data;
int
data
data
int dataArray[5];
int dataArray[5];
int
dataArray[5]
dataArray
[5]
5
data = -1;
data = -1
data
data
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray);
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink
dataArray
dataArray
-----joern-----
(76,109,0)
(133,126,0)
(15,110,0)
(35,40,0)
(29,69,0)
(23,63,0)
(49,14,0)
(94,127,0)
(12,58,0)
(120,39,0)
(7,119,0)
(116,74,0)
(3,69,0)
(104,106,0)
(2,109,0)
(94,114,0)
(53,8,0)
(63,122,0)
(135,20,0)
(45,82,0)
(45,99,0)
(119,7,0)
(126,94,0)
(17,124,0)
(121,119,0)
(52,85,0)
(47,110,0)
(79,85,0)
(116,58,0)
(74,116,0)
(60,118,0)
(111,38,0)
(22,14,0)
(14,22,0)
(13,89,0)
(1,52,0)
(90,63,0)
(58,83,0)
(81,38,0)
(100,5,0)
(106,7,0)
(106,83,0)
(44,19,0)
(3,85,0)
(5,38,0)
(69,3,0)
(125,106,0)
(42,38,0)
(57,114,0)
(95,11,0)
(54,38,0)
(16,122,0)
(118,38,0)
(134,43,0)
(130,106,0)
(4,122,0)
(39,40,0)
(26,20,0)
(85,3,0)
(37,89,0)
(41,10,0)
(103,5,0)
(62,74,0)
(20,118,0)
(34,39,0)
(113,90,0)
(3,7,0)
(86,51,0)
(32,22,0)
(124,3,0)
(105,119,0)
(110,47,0)
(129,94,0)
(36,99,0)
(98,38,0)
(18,3,0)
(64,122,0)
(93,7,0)
(126,127,0)
(73,82,0)
(75,74,0)
(61,118,0)
(65,59,0)
(85,79,0)
(31,15,0)
(108,38,0)
(80,127,0)
(110,15,0)
(123,47,0)
(128,97,0)
(107,106,0)
(50,51,0)
(112,119,0)
(55,9,0)
(40,122,0)
(8,24,0)
(56,38,0)
(85,52,0)
(96,107,0)
(74,83,0)
(11,122,0)
(28,49,0)
(9,7,0)
(109,122,0)
(110,43,0)
(8,122,0)
(0,127,0)
(92,6,0)
(99,45,0)
(83,106,0)
(72,127,0)
(30,88,0)
(63,90,0)
(39,83,0)
(132,58,0)
(131,9,0)
(82,45,0)
(70,24,0)
(65,7,0)
(51,11,0)
(91,83,0)
(83,122,0)
(23,88,0)
(38,127,0)
(77,23,0)
(25,47,0)
(78,38,0)
(14,122,0)
(68,49,0)
(65,118,0)
(24,8,0)
(3,124,0)
(89,126,0)
(88,23,0)
(58,116,0)
(71,122,0)
(7,122,0)
(101,0,0)
(106,107,0)
(27,88,0)
(43,110,0)
(66,45,0)
(87,38,0)
(114,94,0)
(20,7,0)
(126,8,0)
(84,21,0)
(117,65,0)
(45,122,0)
(67,107,0)
(39,83,1)
(52,1,1)
(73,9,1)
(45,82,1)
(84,102,1)
(39,34,1)
(15,31,1)
(128,69,1)
(96,104,1)
(9,131,1)
(92,116,1)
(65,7,1)
(134,47,1)
(94,114,1)
(121,112,1)
(15,110,1)
(95,51,1)
(113,23,1)
(57,129,1)
(44,15,1)
(49,68,1)
(125,91,1)
(120,116,1)
(5,103,1)
(22,32,1)
(110,47,1)
(110,43,1)
(29,3,1)
(8,24,1)
(88,27,1)
(3,124,1)
(93,109,1)
(90,113,1)
(109,2,1)
(23,77,1)
(101,126,1)
(61,60,1)
(91,69,1)
(25,118,1)
(106,107,1)
(25,46,1)
(70,53,1)
(37,84,1)
(65,117,1)
(74,83,1)
(23,88,1)
(62,75,1)
(37,102,1)
(124,17,1)
(116,74,1)
(27,30,1)
(132,12,1)
(112,93,1)
(63,90,1)
(9,7,1)
(24,70,1)
(20,118,1)
(135,128,1)
(20,26,1)
(117,20,1)
(135,44,1)
(133,89,1)
(99,36,1)
(47,123,1)
(40,35,1)
(69,29,1)
(107,67,1)
(0,101,1)
(46,8,1)
(102,65,1)
(126,94,1)
(3,7,1)
(77,88,1)
(82,73,1)
(118,61,1)
(135,92,1)
(103,100,1)
(13,37,1)
(33,0,1)
(85,52,1)
(65,118,1)
(43,134,1)
(1,18,1)
(35,39,1)
(2,76,1)
(75,83,1)
(89,13,1)
(116,58,1)
(131,55,1)
(45,99,1)
(67,96,1)
(60,5,1)
(135,46,1)
(30,11,1)
(53,40,1)
(104,125,1)
(126,133,1)
(41,9,1)
(105,121,1)
(12,74,1)
(58,83,1)
(130,107,1)
(135,41,1)
(26,135,1)
(74,62,1)
(114,57,1)
(34,120,1)
(102,20,1)
(3,85,1)
(69,3,1)
(106,7,1)
(11,95,1)
(100,94,1)
(86,45,1)
(85,79,1)
(14,22,1)
(58,132,1)
(76,15,1)
(36,66,1)
(18,14,1)
(7,119,1)
(126,8,1)
(123,25,1)
(68,28,1)
(50,86,1)
(51,50,1)
(55,7,1)
(32,49,1)
(119,105,1)
(106,130,1)
(20,7,1)
(17,85,1)
(66,82,1)
(83,106,1)
(31,110,1)
(28,63,1)
(67,69,2)
(28,9,2)
(3,9,2)
(29,9,2)
(131,15,2)
(96,69,2)
(11,9,2)
(36,9,2)
(18,9,2)
(130,69,2)
(51,9,2)
(65,20,2)
(20,7,2)
(124,9,2)
(45,9,2)
(92,116,2)
(76,15,2)
(75,69,2)
(15,110,2)
(53,116,2)
(91,69,2)
(110,47,2)
(45,82,2)
(116,74,2)
(99,9,2)
(95,9,2)
(74,83,2)
(112,15,2)
(126,8,2)
(85,9,2)
(50,9,2)
(119,15,2)
(3,124,2)
(20,118,2)
(8,116,2)
(8,24,2)
(90,9,2)
(66,9,2)
(88,9,2)
(9,15,2)
(68,9,2)
(3,7,2)
(40,116,2)
(65,118,2)
(39,116,2)
(69,9,2)
(39,83,2)
(70,116,2)
(121,15,2)
(74,69,2)
(85,79,2)
(69,3,2)
(41,9,2)
(110,46,2)
(93,15,2)
(106,107,2)
(132,74,2)
(24,116,2)
(125,69,2)
(106,7,2)
(22,9,2)
(47,46,2)
(63,9,2)
(126,94,2)
(116,58,2)
(85,52,2)
(14,22,2)
(104,69,2)
(7,15,2)
(46,116,2)
(107,69,2)
(15,46,2)
(84,102,2)
(110,43,2)
(105,15,2)
(123,46,2)
(83,69,2)
(109,15,2)
(65,7,2)
(30,9,2)
(45,99,2)
(23,88,2)
(134,46,2)
(58,74,2)
(55,15,2)
(73,9,2)
(94,114,2)
(86,9,2)
(52,9,2)
(113,9,2)
(2,15,2)
(58,83,2)
(25,46,2)
(62,69,2)
(12,74,2)
(35,116,2)
(117,20,2)
(17,9,2)
(31,46,2)
(120,116,2)
(27,9,2)
(82,9,2)
(63,90,2)
(106,69,2)
(1,9,2)
(34,116,2)
(83,106,2)
(9,7,2)
(116,69,2)
(7,119,2)
(23,9,2)
(3,85,2)
(77,9,2)
(128,69,2)
(43,46,2)
(49,9,2)
(14,9,2)
(32,9,2)
(44,15,2)
-----------------------------------
(0,CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_66b_badSink(dataArray)
(1,service)
(2,1)
(3,connect(connectSocket, (struct sockaddr*)
(4,if (recvResult == SOCKET_ERROR || recvResult == 0)
(5,wsaDataInit = 0)
(6,)
(7,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(8,data = atoi(inputBuffer)
(9,connectSocket == INVALID_SOCKET)
(10,)
(11,service.sin_family = AF_INET)
(12,recvResult)
(13,2)
(14,service.sin_port = htons(TCP_PORT)
(15,WSAStartup(MAKEWORD(2,2)
(16,if (connect(connectSocket, (struct sockaddr*)
(17,service)
(18,connectSocket)
(19,)
(20,connectSocket != INVALID_SOCKET)
(21,)
(22,htons(TCP_PORT)
(23,service.sin_addr.s_addr)
(24,atoi(inputBuffer)
(25,2)
(26,INVALID_SOCKET)
(27,sin_addr)
(28,service)
(29,SOCKET_ERROR)
(30,service)
(31,NO_ERROR)
(32,TCP_PORT)
(33,RET)
(34,recvResult)
(35,\'\\\\0\')
(36,service)
(37,dataArray)
(38,)
(39,inputBuffer[recvResult])
(40,inputBuffer[recvResult] = \'\\\\0\')
(41,break;)
(42,wsaData)
(43,&wsaData)
(44,break;)
(45,memset(&service, 0, sizeof(service)
(46,0)
(47,MAKEWORD(2,2)
(48,inputBuffer[recvResult] = '\\\\0')
(49,service.sin_port)
(50,sin_family)
(51,service.sin_family)
(52,&service)
(53,data)
(54,do)
(55,connectSocket)
(56,wsaDataInit)
(57,1)
(58,recvResult == 0)
(59,)
(60,connectSocket)
(61,INVALID_SOCKET)
(62,SOCKET_ERROR)
(63,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(64,if (connectSocket == INVALID_SOCKET)
(65,CLOSE_SOCKET(connectSocket)
(66,0)
(67,1)
(68,sin_port)
(69,connect(connectSocket, (struct sockaddr*)
(70,inputBuffer)
(71,if (WSAStartup(MAKEWORD(2,2)
(72,data)
(73,service)
(74,recvResult == SOCKET_ERROR)
(75,recvResult)
(76,wsaDataInit)
(77,s_addr)
(78,connectSocket)
(79,struct sockaddr*)
(80,dataArray)
(81,if (wsaDataInit)
(82,&service)
(83,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(84,WSACleanup()
(85,(struct sockaddr*)
(86,service)
(87,service)
(88,service.sin_addr)
(89,dataArray[2])
(90,inet_addr(IP_ADDRESS)
(91,recvResult)
(92,break;)
(93,connectSocket)
(94,data = -1)
(95,AF_INET)
(96,CHAR_ARRAY_SIZE)
(97,)
(98,inputBuffer)
(99,sizeof(service)
(100,wsaDataInit)
(101,dataArray)
(102,wsaDataInit)
(103,0)
(104,inputBuffer)
(105,IPPROTO_TCP)
(106,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(107,CHAR_ARRAY_SIZE - 1)
(108,if (connectSocket != INVALID_SOCKET)
(109,wsaDataInit = 1)
(110,WSAStartup(MAKEWORD(2,2)
(111,recvResult)
(112,AF_INET)
(113,IP_ADDRESS)
(114,-1)
(115,'\\\\0')
(116,recvResult == SOCKET_ERROR || recvResult == 0)
(117,connectSocket)
(118,connectSocket = INVALID_SOCKET)
(119,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(120,inputBuffer)
(121,SOCK_STREAM)
(122,)
(123,2)
(124,sizeof(service)
(125,connectSocket)
(126,dataArray[2] = data)
(127,)
(128,break;)
(129,data)
(130,0)
(131,INVALID_SOCKET)
(132,0)
(133,data)
(134,wsaData)
(135,connectSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^