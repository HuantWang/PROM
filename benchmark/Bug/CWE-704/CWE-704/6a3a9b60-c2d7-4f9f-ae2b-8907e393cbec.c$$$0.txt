-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,66
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(6,27,0)
(20,10,0)
(7,6,0)
(30,27,0)
(11,19,0)
(5,6,0)
(28,10,0)
(13,10,0)
(2,12,0)
(21,0,0)
(8,4,0)
(1,25,0)
(13,1,0)
(9,6,0)
(12,2,0)
(22,19,0)
(25,1,0)
(1,13,0)
(1,2,0)
(0,10,0)
(18,12,0)
(27,6,0)
(24,10,0)
(10,29,0)
(2,31,0)
(1,0,0)
(26,1,0)
(14,23,0)
(16,2,0)
(3,14,0)
(15,0,0)
(1,2,1)
(1,26,1)
(19,11,1)
(13,1,1)
(27,30,1)
(11,22,1)
(2,12,1)
(12,18,1)
(1,0,1)
(16,27,1)
(9,7,1)
(17,13,1)
(1,25,1)
(21,15,1)
(5,0,1)
(3,27,1)
(26,2,1)
(7,5,1)
(14,3,1)
(0,21,1)
(27,6,1)
(30,6,1)
(26,14,1)
(18,16,1)
(15,19,1)
(17,19,1)
(6,9,1)
(21,19,2)
(5,19,2)
(1,0,2)
(1,25,2)
(16,27,2)
(26,19,2)
(3,27,2)
(0,19,2)
(15,19,2)
(13,19,2)
(9,19,2)
(12,27,2)
(2,12,2)
(18,27,2)
(2,27,2)
(6,19,2)
(27,6,2)
(13,1,2)
(7,19,2)
(1,2,2)
(1,19,2)
(14,27,2)
(27,19,2)
(30,19,2)
-----------------------------------
(0,doubleNumber = 0)
(1,(int)
(2,doubleNumber = atof(inputBuffer)
(3,"fgets()
(4,)
(5,inputBuffer)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,CHAR_ARRAY_SIZE)
(8,if(STATIC_CONST_FIVE==5)
(9,stdin)
(10,)
(11,5)
(12,atof(inputBuffer)
(13,printIntLine((int)
(14,printLine("fgets()
(15,doubleNumber)
(16,doubleNumber)
(17,RET)
(18,inputBuffer)
(19,STATIC_CONST_FIVE==5)
(20,inputBuffer)
(21,0)
(22,STATIC_CONST_FIVE)
(23,)
(24,doubleNumber)
(25,int)
(26,doubleNumber)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,)
(30,NULL)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^