-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
70,73
70,74
70,75
70,76
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
108,110
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
118,119
122,123
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,69,73,75,76,80,82,85,87,91,93,98,100,104,106,107,110,111,116,119,120,121,125,127,131,133
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
47,48
47,49
66,67
66,68
89,90
89,91
108,109
108,110
113,114
113,115
117,118
117,119
-----guardedBy-----
38,58
68,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_03_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(52,37,0)
(40,26,0)
(60,55,0)
(46,68,0)
(17,25,0)
(51,6,0)
(39,11,0)
(41,32,0)
(8,58,0)
(53,50,0)
(66,0,0)
(0,32,0)
(61,28,0)
(64,6,0)
(26,17,0)
(36,27,0)
(16,54,0)
(58,8,0)
(62,27,0)
(28,68,0)
(11,31,0)
(63,6,0)
(42,16,0)
(10,32,0)
(29,53,0)
(30,28,0)
(49,16,0)
(11,8,0)
(4,17,0)
(9,32,0)
(31,16,0)
(47,53,0)
(7,3,0)
(38,53,0)
(55,59,0)
(46,17,0)
(1,4,0)
(41,27,0)
(28,9,0)
(15,52,0)
(33,50,0)
(44,4,0)
(65,2,0)
(35,31,0)
(68,6,0)
(3,32,0)
(5,9,0)
(22,9,0)
(24,26,0)
(19,32,0)
(13,31,0)
(32,27,0)
(32,34,0)
(48,15,0)
(43,2,0)
(26,68,0)
(0,67,0)
(28,17,0)
(8,11,0)
(34,46,0)
(45,68,0)
(67,27,0)
(57,17,0)
(4,68,0)
(8,17,0)
(69,3,0)
(14,34,0)
(26,0,0)
(0,26,0)
(21,46,0)
(19,27,0)
(34,14,0)
(53,31,0)
(17,8,0)
(34,32,0)
(18,19,0)
(20,67,0)
(9,27,0)
(23,68,0)
(9,28,0)
(52,15,0)
(12,41,0)
(46,34,0)
(50,53,0)
(2,43,1)
(13,2,1)
(53,31,1)
(57,50,1)
(8,11,1)
(5,22,1)
(32,34,1)
(46,21,1)
(55,60,1)
(69,7,1)
(56,4,1)
(12,67,1)
(41,32,1)
(18,41,1)
(22,3,1)
(50,53,1)
(0,26,1)
(19,32,1)
(48,3,1)
(65,68,1)
(34,14,1)
(26,40,1)
(20,0,1)
(11,39,1)
(33,53,1)
(26,17,1)
(67,20,1)
(39,57,1)
(47,31,1)
(8,58,1)
(31,35,1)
(26,68,1)
(34,46,1)
(66,9,1)
(60,50,1)
(4,17,1)
(45,23,1)
(7,32,1)
(1,44,1)
(10,4,1)
(4,1,1)
(3,32,1)
(9,32,1)
(22,52,1)
(30,61,1)
(46,68,1)
(21,10,1)
(50,33,1)
(17,8,1)
(19,18,1)
(68,45,1)
(44,2,1)
(11,31,1)
(43,65,1)
(29,47,1)
(0,32,1)
(15,48,1)
(38,29,1)
(3,69,1)
(24,66,1)
(44,17,1)
(28,68,1)
(46,17,1)
(56,19,1)
(41,12,1)
(61,5,1)
(4,68,1)
(28,30,1)
(44,55,1)
(9,28,1)
(35,13,1)
(28,17,1)
(52,15,1)
(40,24,1)
(53,38,1)
(11,31,2)
(46,17,2)
(34,46,2)
(31,2,2)
(52,3,2)
(0,26,2)
(26,4,2)
(17,50,2)
(8,50,2)
(41,32,2)
(9,4,2)
(26,68,2)
(53,31,2)
(29,2,2)
(0,32,2)
(39,50,2)
(5,4,2)
(52,15,2)
(57,50,2)
(48,3,2)
(11,50,2)
(28,68,2)
(50,2,2)
(46,68,2)
(41,4,2)
(47,2,2)
(66,4,2)
(8,11,2)
(40,4,2)
(33,2,2)
(20,4,2)
(9,28,2)
(0,4,2)
(24,4,2)
(4,68,2)
(28,17,2)
(22,4,2)
(61,4,2)
(18,4,2)
(19,4,2)
(26,17,2)
(4,17,2)
(55,50,2)
(69,4,2)
(34,14,2)
(8,58,2)
(32,4,2)
(35,2,2)
(12,4,2)
(28,4,2)
(38,2,2)
(30,4,2)
(9,32,2)
(46,4,2)
(3,4,2)
(60,50,2)
(7,4,2)
(32,34,2)
(21,4,2)
(34,4,2)
(10,4,2)
(67,4,2)
(15,3,2)
(53,2,2)
(17,8,2)
(3,32,2)
(50,53,2)
(13,2,2)
(19,32,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,100)
(2,5==5)
(3,dataBuffer == NULL)
(4,data < 100)
(5,\\\'A\\\')
(6,)
(7,dataBuffer)
(8,(short)
(9,memset(dataBuffer, \\\'A\\\', data-1)
(10,dataBuffer)
(11,atoi(inputBuffer)
(12,dataBuffer)
(13,inputBuffer)
(14,char *)
(15,-1)
(16,)
(17,data = (short)
(18,dataBuffer)
(19,free(dataBuffer)
(20,\\\'\\\\0\\\')
(21,data)
(22,dataBuffer)
(23,data)
(24,data)
(25,)
(26,data-1)
(27,)
(28,data-1)
(29,CHAR_ARRAY_SIZE)
(30,1)
(31,inputBuffer[CHAR_ARRAY_SIZE] = "")
(32,* dataBuffer = (char *)
(33,NULL)
(34,(char *)
(35,"")
(36,dataBuffer)
(37,)
(38,stdin)
(39,inputBuffer)
(40,1)
(41,printLine(dataBuffer)
(42,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,5)
(44,data)
(45,0)
(46,malloc(data)
(47,inputBuffer)
(48,1)
(49,inputBuffer)
(50,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(51,if (data < 100)
(52,exit(-1)
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,)
(55,printLine("fgets()
(56,RET)
(57,data)
(58,short)
(59,)
(60,"fgets()
(61,data)
(62,if (dataBuffer == NULL)
(63,data)
(64,if(5==5)
(65,5)
(66,dataBuffer)
(67,dataBuffer[data-1] = \\\'\\\\0\\\')
(68,data = 0)
(69,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^