-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_15_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,12,0)
(39,30,0)
(20,37,0)
(11,12,0)
(26,4,0)
(33,12,0)
(43,30,0)
(17,2,0)
(8,37,0)
(37,47,0)
(28,10,0)
(9,14,0)
(4,51,0)
(37,2,0)
(49,22,0)
(53,5,0)
(13,30,0)
(23,48,0)
(35,0,0)
(48,14,0)
(21,14,0)
(36,22,0)
(32,4,0)
(38,37,0)
(31,14,0)
(39,4,0)
(47,3,0)
(5,47,0)
(0,10,0)
(5,17,0)
(52,33,0)
(46,47,0)
(42,51,0)
(30,4,0)
(12,51,0)
(34,4,0)
(6,12,0)
(40,10,0)
(37,12,0)
(27,39,0)
(16,4,0)
(24,17,0)
(41,4,0)
(50,41,0)
(22,41,0)
(5,30,0)
(0,16,0)
(33,47,0)
(45,51,0)
(18,33,0)
(10,0,0)
(15,41,0)
(29,16,0)
(1,5,0)
(44,3,0)
(37,30,0)
(3,47,0)
(41,22,0)
(47,14,0)
(7,14,0)
(12,6,1)
(33,47,1)
(3,44,1)
(49,50,1)
(44,46,1)
(13,7,1)
(24,5,1)
(18,16,1)
(47,3,1)
(20,8,1)
(41,22,1)
(19,12,1)
(17,24,1)
(37,47,1)
(33,52,1)
(29,0,1)
(25,39,1)
(38,33,1)
(43,13,1)
(15,30,1)
(5,30,1)
(36,49,1)
(31,48,1)
(52,18,1)
(37,20,1)
(50,15,1)
(5,12,1)
(7,47,1)
(37,30,1)
(33,12,1)
(39,30,1)
(1,53,1)
(30,43,1)
(6,11,1)
(46,19,1)
(27,33,1)
(28,35,1)
(5,47,1)
(5,1,1)
(23,19,1)
(16,29,1)
(13,31,1)
(10,40,1)
(37,12,1)
(8,38,1)
(35,41,1)
(53,37,1)
(22,36,1)
(48,23,1)
(27,17,1)
(39,27,1)
(40,28,1)
(0,10,1)
(48,19,2)
(38,33,2)
(41,22,2)
(31,19,2)
(37,30,2)
(0,10,2)
(8,33,2)
(39,30,2)
(44,19,2)
(23,19,2)
(1,33,2)
(5,33,2)
(37,47,2)
(37,33,2)
(3,19,2)
(7,19,2)
(33,12,2)
(37,12,2)
(5,12,2)
(17,33,2)
(47,3,2)
(33,47,2)
(5,47,2)
(46,19,2)
(24,33,2)
(47,19,2)
(53,33,2)
(5,30,2)
(20,33,2)
-----------------------------------
(0,source[100-1])
(1,data)
(2,)
(3,-1)
(4,)
(5,dest[data])
(6,0)
(7,break;)
(8,source)
(9,case 6:)
(10,100-1)
(11,data)
(12,data = 0)
(13,dest)
(14,)
(15,source)
(16,source[100-1] = \\\'\\\\0\\\')
(17,dest[data] = \\\'\\\\0\\\')
(18,data)
(19,6)
(20,data)
(21,default:)
(22,100-1)
(23,"Benign, fixed string")
(24,\\\'\\\\0\\\')
(25,RET)
(26,dest)
(27,dest)
(28,100)
(29,\\\'\\\\0\\\')
(30,dest[100] = "")
(31,break;)
(32,if (data < 100)
(33,data < 100)
(34,source)
(35,source)
(36,1)
(37,memmove(dest, source, data)
(38,dest)
(39,printLine(dest)
(40,1)
(41,memset(source, \\\'A\\\', 100-1)
(42,switch(6)
(43,"")
(44,1)
(45,data)
(46,data)
(47,data = -1)
(48,printLine("Benign, fixed string")
(49,100)
(50,\\\'A\\\')
(51,)
(52,100)
(53,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^