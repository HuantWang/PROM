-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
57,63
58,59
59,60
59,61
61,62
61,63
63,64
65,66
66,67
66,68
68,69
68,70
68,71
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
81,82
81,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
89,91
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
100,101
100,102
100,103
100,104
101,102
103,104
105,106
107,108
109,110
110,111
110,112
111,112
111,113
112,113
114,115
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,64,67,69,71,73,77,79,80,82,83,88,90,91,92,96,97,102,104,106,108,113,115,116,120,122
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
81,82
81,83
85,86
85,87
89,90
89,91
94,95
94,96
110,111
110,112
-----guardedBy-----
34,50
96,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_01_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_01_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(31,0,0)
(2,39,0)
(35,10,0)
(27,38,0)
(60,32,0)
(11,39,0)
(17,0,0)
(33,2,0)
(28,9,0)
(23,45,0)
(23,48,0)
(55,39,0)
(6,32,0)
(21,5,0)
(22,39,0)
(21,51,0)
(12,48,0)
(48,40,0)
(21,45,0)
(50,32,0)
(20,0,0)
(39,16,0)
(54,40,0)
(7,60,0)
(20,51,0)
(40,16,0)
(2,49,0)
(61,21,0)
(20,46,0)
(32,48,0)
(49,2,0)
(57,17,0)
(45,23,0)
(17,45,0)
(51,39,0)
(13,23,0)
(4,20,0)
(59,21,0)
(55,51,0)
(20,45,0)
(18,48,0)
(15,10,0)
(21,0,0)
(24,2,0)
(1,51,0)
(52,51,0)
(19,26,0)
(56,19,0)
(36,39,0)
(10,9,0)
(42,20,0)
(29,40,0)
(9,10,0)
(34,45,0)
(5,46,0)
(44,49,0)
(41,39,0)
(9,22,0)
(58,17,0)
(53,16,0)
(25,5,0)
(45,47,0)
(38,0,0)
(8,20,0)
(32,60,0)
(3,55,0)
(37,22,0)
(43,32,0)
(14,49,0)
(0,16,0)
(0,38,0)
(51,52,1)
(3,17,1)
(27,31,1)
(49,44,1)
(57,22,1)
(59,20,1)
(34,60,1)
(37,9,1)
(17,58,1)
(4,17,1)
(1,45,1)
(42,4,1)
(56,60,1)
(61,59,1)
(22,37,1)
(21,45,1)
(60,7,1)
(24,51,1)
(52,1,1)
(20,0,1)
(5,25,1)
(18,12,1)
(23,13,1)
(38,27,1)
(55,3,1)
(8,42,1)
(13,34,1)
(25,21,1)
(45,23,1)
(17,45,1)
(9,10,1)
(20,45,1)
(50,6,1)
(44,14,1)
(17,0,1)
(33,24,1)
(7,32,1)
(20,8,1)
(28,2,1)
(6,48,1)
(32,43,1)
(20,51,1)
(58,57,1)
(21,51,1)
(21,61,1)
(43,50,1)
(35,15,1)
(2,49,1)
(3,5,1)
(30,55,1)
(55,51,1)
(21,0,1)
(12,0,1)
(15,28,1)
(60,32,1)
(10,35,1)
(19,56,1)
(0,38,1)
(14,33,1)
(32,48,1)
(23,48,1)
(1,19,1)
(48,18,1)
(56,60,2)
(61,17,2)
(5,17,2)
(59,17,2)
(21,51,2)
(21,0,2)
(23,48,2)
(9,10,2)
(32,48,2)
(25,17,2)
(34,60,2)
(8,17,2)
(42,17,2)
(45,60,2)
(19,60,2)
(17,0,2)
(60,32,2)
(0,38,2)
(45,23,2)
(4,17,2)
(20,17,2)
(55,51,2)
(2,49,2)
(20,0,2)
(21,17,2)
(20,51,2)
(20,45,2)
(17,45,2)
(21,45,2)
(23,60,2)
(13,60,2)
-----------------------------------
(0,data = -1)
(1,dest)
(2,memset(source, \\\'A\\\', 100-1)
(3,dest)
(4,dest)
(5,dest[data] = \\\'\\\\0\\\')
(6,inputBuffer)
(7,NULL)
(8,data)
(9,source[100-1])
(10,100-1)
(11,dest)
(12,inputBuffer)
(13,inputBuffer)
(14,100)
(15,100)
(16,)
(17,data < 100)
(18,"")
(19,printLine("fgets()
(20,memcpy(dest, source, data)
(21,dest[data])
(22,source[100-1] = \\\'\\\\0\\\')
(23,atoi(inputBuffer)
(24,source)
(25,\\\'\\\\0\\\')
(26,)
(27,1)
(28,source)
(29,inputBuffer)
(30,RET)
(31,data)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,\\\'A\\\')
(34,data)
(35,1)
(36,if (data < 100)
(37,\\\'\\\\0\\\')
(38,-1)
(39,)
(40,)
(41,source)
(42,source)
(43,stdin)
(44,1)
(45,data = atoi(inputBuffer)
(46,)
(47,)
(48,inputBuffer[CHAR_ARRAY_SIZE] = "")
(49,100-1)
(50,CHAR_ARRAY_SIZE)
(51,dest[100] = "")
(52,"")
(53,data)
(54,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,printLine(dest)
(56,"fgets()
(57,data)
(58,100)
(59,dest)
(60,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^