-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
39,42
39,43
39,44
39,45
40,41
41,42
41,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,44,46,49,51,53,55,59,61,62,64,65,70,72,73,74,78,79,84,86,88,90,95,97,98,102,104
-----computeFrom-----
12,13
12,14
17,18
17,19
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
92,93
92,94
-----guardedBy-----
78,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_31_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(46,36,0)
(4,11,0)
(47,21,0)
(43,41,0)
(32,5,0)
(2,42,0)
(35,34,0)
(41,21,0)
(47,31,0)
(52,16,0)
(34,7,0)
(41,31,0)
(45,38,0)
(22,26,0)
(47,38,0)
(40,22,0)
(18,31,0)
(42,17,0)
(28,16,0)
(31,3,0)
(29,3,0)
(9,11,0)
(7,11,0)
(14,46,0)
(50,31,0)
(8,34,0)
(12,47,0)
(16,31,0)
(24,11,0)
(17,42,0)
(31,5,0)
(17,36,0)
(0,3,0)
(3,36,0)
(5,17,0)
(25,17,0)
(20,22,0)
(5,3,0)
(7,34,0)
(15,11,0)
(21,11,0)
(41,45,0)
(23,47,0)
(44,21,0)
(37,44,0)
(1,5,0)
(44,11,0)
(6,4,0)
(26,22,0)
(27,47,0)
(11,3,0)
(10,7,0)
(30,21,0)
(39,21,0)
(49,41,0)
(53,26,0)
(51,36,0)
(26,4,0)
(33,45,0)
(13,46,0)
(19,7,0)
(1,32,1)
(52,4,1)
(44,21,1)
(12,16,1)
(49,43,1)
(10,21,1)
(53,7,1)
(41,31,1)
(5,1,1)
(42,2,1)
(2,25,1)
(39,31,1)
(22,40,1)
(7,34,1)
(13,14,1)
(19,10,1)
(31,18,1)
(5,17,1)
(40,20,1)
(26,22,1)
(45,33,1)
(34,8,1)
(20,53,1)
(6,26,1)
(21,30,1)
(50,5,1)
(17,42,1)
(25,46,1)
(47,21,1)
(43,47,1)
(41,21,1)
(31,5,1)
(16,31,1)
(47,23,1)
(48,44,1)
(4,6,1)
(32,17,1)
(23,27,1)
(47,31,1)
(44,37,1)
(8,35,1)
(37,16,1)
(27,12,1)
(33,41,1)
(46,13,1)
(37,45,1)
(35,19,1)
(30,39,1)
(28,52,1)
(16,28,1)
(18,50,1)
(41,49,1)
(41,16,2)
(26,22,2)
(17,42,2)
(47,31,2)
(12,16,2)
(33,16,2)
(43,16,2)
(7,34,2)
(41,31,2)
(47,16,2)
(44,21,2)
(31,5,2)
(23,16,2)
(45,16,2)
(5,17,2)
(27,16,2)
(41,21,2)
(47,21,2)
(16,31,2)
(49,16,2)
-----------------------------------
(0,dataCopy)
(1,data)
(2,1)
(3,)
(4,source[100-1] = \\\'\\\\0\\\')
(5,dataCopy = data)
(6,\\\'\\\\0\\\')
(7,memset(source, \\\'A\\\', 100-1)
(8,1)
(9,dest)
(10,source)
(11,)
(12,dest)
(13,0)
(14,data)
(15,source)
(16,data < 100)
(17,data = -1)
(18,dataCopy)
(19,\\\'A\\\')
(20,100)
(21,dest[100] = "")
(22,100-1)
(23,data)
(24,if (data < 100)
(25,data)
(26,source[100-1])
(27,source)
(28,100)
(29,data)
(30,"")
(31,data = dataCopy)
(32,dataCopy)
(33,\\\'\\\\0\\\')
(34,100-1)
(35,100)
(36,)
(37,dest)
(38,)
(39,dest)
(40,1)
(41,dest[data])
(42,-1)
(43,dest)
(44,printLine(dest)
(45,dest[data] = \\\'\\\\0\\\')
(46,data = 0)
(47,memcpy(dest, source, data)
(48,RET)
(49,data)
(50,data)
(51,data)
(52,data)
(53,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^