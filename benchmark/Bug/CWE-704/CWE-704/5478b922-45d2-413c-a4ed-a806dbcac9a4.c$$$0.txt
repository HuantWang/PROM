-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_54e_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_54e_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_54e_badSink(short data)
CWE194_Unexpected_Sign_Extension__negative_malloc_54e_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,37,0)
(12,4,0)
(15,1,0)
(40,0,0)
(23,13,0)
(25,29,0)
(25,37,0)
(21,34,0)
(16,8,0)
(13,0,0)
(5,0,0)
(11,13,0)
(13,11,0)
(4,37,0)
(24,31,0)
(41,13,0)
(11,29,0)
(27,4,0)
(16,10,0)
(19,25,0)
(26,22,0)
(6,31,0)
(18,40,0)
(3,11,0)
(34,29,0)
(12,40,0)
(10,16,0)
(38,12,0)
(1,29,0)
(32,37,0)
(43,40,0)
(1,37,0)
(5,14,0)
(28,29,0)
(20,34,0)
(29,37,0)
(36,11,0)
(17,14,0)
(14,17,0)
(7,10,0)
(14,5,0)
(29,14,0)
(2,5,0)
(14,29,0)
(31,0,0)
(12,29,0)
(40,12,0)
(9,37,0)
(34,29,1)
(3,36,1)
(1,29,1)
(5,2,1)
(36,16,1)
(21,29,1)
(14,5,1)
(15,4,1)
(40,0,1)
(10,7,1)
(36,34,1)
(42,31,1)
(23,41,1)
(13,23,1)
(5,0,1)
(40,43,1)
(29,14,1)
(18,38,1)
(1,15,1)
(12,29,1)
(25,19,1)
(25,29,1)
(2,28,1)
(42,25,1)
(27,12,1)
(19,1,1)
(34,20,1)
(24,6,1)
(41,3,1)
(28,31,1)
(43,18,1)
(38,11,1)
(12,40,1)
(11,13,1)
(7,34,1)
(20,21,1)
(11,29,1)
(14,17,1)
(4,27,1)
(16,10,1)
(31,24,1)
(13,0,1)
(31,0,1)
(1,29,2)
(19,31,2)
(41,31,2)
(16,34,2)
(28,31,2)
(11,13,2)
(12,40,2)
(40,0,2)
(12,31,2)
(14,31,2)
(43,31,2)
(14,5,2)
(7,34,2)
(27,31,2)
(21,31,2)
(3,31,2)
(34,31,2)
(40,31,2)
(10,34,2)
(2,31,2)
(15,31,2)
(25,29,2)
(11,29,2)
(34,29,2)
(16,10,2)
(25,31,2)
(29,14,2)
(14,17,2)
(4,31,2)
(13,31,2)
(5,31,2)
(13,0,2)
(1,31,2)
(12,29,2)
(18,31,2)
(36,31,2)
(11,31,2)
(23,31,2)
(29,31,2)
(31,0,2)
(20,31,2)
(5,0,2)
(38,31,2)
-----------------------------------
(0,short data)
(1,printLine(dataBuffer)
(2,data)
(3,\'A\')
(4,dataBuffer[data-1] = '\\\\0')
(5,malloc(data)
(6,data)
(7,1)
(8,)
(9,dataBuffer)
(10,-1)
(11,memset(dataBuffer, \'A\', data-1)
(12,dataBuffer[data-1])
(13,data-1)
(14,(char *)
(15,dataBuffer)
(16,exit(-1)
(17,char *)
(18,data)
(19,dataBuffer)
(20,NULL)
(21,dataBuffer)
(22,)
(23,1)
(24,100)
(25,free(dataBuffer)
(26,if (data < 100)
(27,\'\\\\0\')
(28,dataBuffer)
(29,* dataBuffer = (char *)
(30,dataBuffer[data-1] = \'\\\\0\')
(31,data < 100)
(32,if (dataBuffer == NULL)
(33,'A')
(34,dataBuffer == NULL)
(35,'\\\\0')
(36,dataBuffer)
(37,)
(38,dataBuffer)
(39,memset(dataBuffer, 'A', data-1)
(40,data-1)
(41,data)
(42,RET)
(43,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^