-----label-----
1
-----code-----
static void badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(short data)
badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,35,0)
(36,0,0)
(42,28,0)
(15,30,0)
(16,7,0)
(36,43,0)
(24,4,0)
(39,0,0)
(20,14,0)
(13,0,0)
(35,43,0)
(4,15,0)
(16,3,0)
(18,13,0)
(42,43,0)
(31,1,0)
(41,18,0)
(32,18,0)
(2,6,0)
(33,3,0)
(21,7,0)
(8,1,0)
(17,25,0)
(3,0,0)
(13,18,0)
(6,42,0)
(22,43,0)
(15,4,0)
(43,42,0)
(42,6,0)
(25,43,0)
(23,25,0)
(7,12,0)
(13,43,0)
(35,0,0)
(37,36,0)
(27,7,0)
(10,13,0)
(9,0,0)
(43,0,0)
(34,13,0)
(40,16,0)
(28,42,0)
(18,12,0)
(1,12,0)
(16,43,0)
(7,16,0)
(6,12,0)
(33,16,1)
(1,12,1)
(34,15,1)
(42,28,1)
(13,43,1)
(43,42,1)
(3,33,1)
(35,11,1)
(41,10,1)
(35,43,1)
(6,12,1)
(4,24,1)
(7,12,1)
(18,12,1)
(29,1,1)
(24,25,1)
(29,35,1)
(40,13,1)
(36,37,1)
(32,41,1)
(13,18,1)
(15,4,1)
(2,22,1)
(16,43,1)
(25,17,1)
(18,32,1)
(42,6,1)
(27,40,1)
(36,43,1)
(23,43,1)
(11,36,1)
(17,23,1)
(6,2,1)
(25,43,1)
(37,3,1)
(10,34,1)
(16,7,1)
(31,8,1)
(7,21,1)
(22,1,1)
(21,27,1)
(1,31,1)
(34,25,1)
(16,1,2)
(35,43,2)
(18,12,2)
(40,1,2)
(27,1,2)
(4,25,2)
(17,1,2)
(3,1,2)
(35,1,2)
(10,1,2)
(36,43,2)
(42,1,2)
(34,1,2)
(11,1,2)
(7,12,2)
(6,1,2)
(42,6,2)
(15,25,2)
(21,1,2)
(43,1,2)
(25,43,2)
(15,4,2)
(18,1,2)
(6,12,2)
(24,25,2)
(16,43,2)
(2,1,2)
(1,12,2)
(43,42,2)
(42,28,2)
(7,1,2)
(13,1,2)
(32,1,2)
(13,18,2)
(33,1,2)
(36,1,2)
(13,43,2)
(22,1,2)
(37,1,2)
(16,7,2)
(25,1,2)
(41,1,2)
(23,1,2)
-----------------------------------
(0,)
(1,data < 100)
(2,data)
(3,dataBuffer[data-1] = '\\\\0')
(4,-1)
(5,dataBuffer[data-1] = \'\\\\0\')
(6,malloc(data)
(7,data-1)
(8,data)
(9,if (dataBuffer == NULL)
(10,'A')
(11,dataBuffer)
(12,short data)
(13,memset(dataBuffer, 'A', data-1)
(14,)
(15,exit(-1)
(16,dataBuffer[data-1])
(17,NULL)
(18,data-1)
(19,memset(dataBuffer, \'A\', data-1)
(20,if (data < 100)
(21,1)
(22,dataBuffer)
(23,dataBuffer)
(24,1)
(25,dataBuffer == NULL)
(26,\'A\')
(27,data)
(28,char *)
(29,RET)
(30,)
(31,100)
(32,1)
(33,'\\\\0')
(34,dataBuffer)
(35,free(dataBuffer)
(36,printLine(dataBuffer)
(37,dataBuffer)
(38,\'\\\\0\')
(39,dataBuffer)
(40,dataBuffer)
(41,data)
(42,(char *)
(43,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^