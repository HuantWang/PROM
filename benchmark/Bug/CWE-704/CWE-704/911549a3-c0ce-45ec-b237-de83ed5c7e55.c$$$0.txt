-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
37,38
37,39
38,39
41,42
41,43
41,44
41,45
41,46
41,47
42,43
43,44
43,45
45,46
45,47
45,48
48,49
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
88,89
88,90
89,90
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,16,20,25,27,32,34,35,39,40,44,46,47,51,53,56,58,62,64,69,71,75,77,78,81,82,87,90,91,92,96,98,102,104
-----computeFrom-----
12,13
12,14
23,24
23,25
30,31
30,32
33,34
33,35
37,38
37,39
60,61
60,62
79,80
79,81
84,85
84,86
88,89
88,90
-----guardedBy-----
39,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(59,18,0)
(42,38,0)
(39,22,0)
(52,22,0)
(42,53,0)
(3,16,0)
(27,31,0)
(25,41,0)
(15,58,0)
(6,1,0)
(57,3,0)
(13,15,0)
(16,3,0)
(3,47,0)
(27,25,0)
(19,49,0)
(41,55,0)
(49,41,0)
(0,18,0)
(37,49,0)
(45,38,0)
(41,49,0)
(38,42,0)
(56,41,0)
(27,18,0)
(32,43,0)
(40,52,0)
(46,16,0)
(18,27,0)
(2,0,0)
(60,35,0)
(21,18,0)
(11,43,0)
(8,7,0)
(25,27,0)
(24,21,0)
(44,0,0)
(1,22,0)
(13,41,0)
(56,15,0)
(21,7,0)
(52,18,0)
(13,21,0)
(20,1,0)
(12,47,0)
(7,22,0)
(26,15,0)
(4,47,0)
(56,1,0)
(58,15,0)
(31,27,0)
(21,13,0)
(15,9,0)
(35,18,0)
(36,41,0)
(43,41,0)
(5,25,0)
(1,18,0)
(48,56,0)
(35,22,0)
(28,47,0)
(14,58,0)
(1,56,0)
(25,15,0)
(33,22,0)
(51,56,0)
(18,22,0)
(30,13,0)
(43,15,0)
(54,13,0)
(3,16,1)
(32,15,1)
(51,48,1)
(1,18,1)
(0,2,1)
(1,56,1)
(59,43,1)
(16,46,1)
(45,0,1)
(21,13,1)
(25,15,1)
(56,51,1)
(42,38,1)
(13,30,1)
(52,18,1)
(35,60,1)
(25,41,1)
(40,7,1)
(14,26,1)
(32,41,1)
(30,54,1)
(49,19,1)
(18,27,1)
(0,18,1)
(5,59,1)
(21,18,1)
(44,18,1)
(52,40,1)
(15,58,1)
(37,36,1)
(43,41,1)
(11,32,1)
(27,25,1)
(26,29,1)
(29,3,1)
(13,41,1)
(56,41,1)
(24,1,1)
(58,14,1)
(25,5,1)
(41,49,1)
(13,15,1)
(36,29,1)
(27,31,1)
(19,37,1)
(38,45,1)
(35,18,1)
(7,8,1)
(43,11,1)
(56,15,1)
(43,15,1)
(6,20,1)
(48,6,1)
(20,42,1)
(54,24,1)
(20,0,1)
(2,44,1)
(8,21,1)
(23,43,1)
(46,57,1)
(23,35,1)
(60,52,1)
(19,29,2)
(15,58,2)
(43,41,2)
(21,18,2)
(60,43,2)
(44,43,2)
(56,15,2)
(5,43,2)
(27,31,2)
(54,43,2)
(45,0,2)
(41,29,2)
(18,27,2)
(35,18,2)
(56,43,2)
(8,43,2)
(6,43,2)
(42,38,2)
(13,41,2)
(49,29,2)
(25,41,2)
(56,41,2)
(15,29,2)
(1,43,2)
(41,49,2)
(1,56,2)
(14,29,2)
(24,43,2)
(20,43,2)
(13,15,2)
(3,16,2)
(30,43,2)
(40,43,2)
(27,25,2)
(58,29,2)
(42,0,2)
(38,0,2)
(27,43,2)
(18,43,2)
(13,43,2)
(1,18,2)
(43,15,2)
(37,29,2)
(59,43,2)
(48,43,2)
(0,18,2)
(52,18,2)
(2,43,2)
(52,43,2)
(7,43,2)
(51,43,2)
(25,43,2)
(21,43,2)
(26,29,2)
(21,13,2)
(36,29,2)
(0,43,2)
(25,15,2)
(35,43,2)
-----------------------------------
(0,dataBuffer == NULL)
(1,memset(dataBuffer, 'A', data-1)
(2,NULL)
(3,data = -1)
(4,if(globalReturnsTrueOrFalse()
(5,data)
(6,'A')
(7,dataBuffer[data-1] = '\\\\0')
(8,'\\\\0')
(9,)
(10,dataBuffer[data-1] = \'\\\\0\')
(11,100)
(12,if (data < 100)
(13,data-1)
(14,1)
(15,data = -1)
(16,-1)
(17,\'\\\\0\')
(18,* dataBuffer = (char *)
(19,1)
(20,dataBuffer)
(21,dataBuffer[data-1])
(22,)
(23,RET)
(24,dataBuffer)
(25,malloc(data)
(26,data)
(27,(char *)
(28,data)
(29,globalReturnsTrueOrFalse()
(30,1)
(31,char *)
(32,data)
(33,if (dataBuffer == NULL)
(34,memset(dataBuffer, \'A\', data-1)
(35,free(dataBuffer)
(36,data)
(37,100)
(38,-1)
(39,dataBuffer)
(40,dataBuffer)
(41,data = 100-1)
(42,exit(-1)
(43,data < 100)
(44,dataBuffer)
(45,1)
(46,1)
(47,)
(48,data)
(49,100-1)
(50,\'A\')
(51,1)
(52,printLine(dataBuffer)
(53,)
(54,data)
(55,)
(56,data-1)
(57,data)
(58,-1)
(59,dataBuffer)
(60,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^