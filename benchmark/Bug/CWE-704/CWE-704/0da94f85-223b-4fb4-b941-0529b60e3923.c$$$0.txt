-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fscanf_12_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a number input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,39,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fscanf_12_bad(){    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fscanf_12_bad()
CWE197_Numeric_Truncation_Error__short_fscanf_12_bad
{    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a number input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(9,4,0)
(26,23,0)
(15,27,0)
(10,2,0)
(27,15,0)
(7,29,0)
(24,1,0)
(23,4,0)
(6,4,0)
(21,8,0)
(29,1,0)
(26,7,0)
(8,26,0)
(25,26,0)
(15,22,0)
(12,10,0)
(0,7,0)
(3,29,0)
(11,15,0)
(16,27,0)
(7,0,0)
(1,29,0)
(8,23,0)
(7,15,0)
(10,20,0)
(7,26,0)
(2,10,0)
(2,29,0)
(14,23,0)
(17,7,0)
(28,2,0)
(18,10,0)
(29,4,0)
(19,27,0)
(17,25,1)
(11,5,1)
(2,28,1)
(7,15,1)
(19,11,1)
(27,16,1)
(24,3,1)
(7,0,1)
(26,7,1)
(21,26,1)
(15,27,1)
(8,21,1)
(1,24,1)
(10,2,1)
(29,1,1)
(5,29,1)
(12,18,1)
(28,12,1)
(8,26,1)
(16,19,1)
(13,8,1)
(18,5,1)
(25,15,1)
(7,29,1)
(7,17,1)
(2,29,1)
(25,10,1)
(19,5,2)
(11,5,2)
(15,5,2)
(10,5,2)
(7,0,2)
(8,26,2)
(10,2,2)
(28,5,2)
(7,29,2)
(26,7,2)
(2,5,2)
(15,27,2)
(2,29,2)
(27,5,2)
(16,5,2)
(7,15,2)
(18,5,2)
(12,5,2)
(29,1,2)
-----------------------------------
(0,char)
(1,-1)
(2,&data)
(3,data)
(4,)
(5,globalReturnsTrueOrFalse()
(6,data)
(7,(char)
(8,printHexCharLine(charData)
(9,if(globalReturnsTrueOrFalse()
(10,fscanf (stdin, "%hd", &data)
(11,data)
(12,"%hd")
(13,RET)
(14,charData)
(15,data = CHAR_MAX-5)
(16,5)
(17,data)
(18,stdin)
(19,CHAR_MAX)
(20,)
(21,charData)
(22,)
(23,)
(24,1)
(25,charData)
(26,charData = (char)
(27,CHAR_MAX-5)
(28,data)
(29,data = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^