-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
44,45
46,47
46,48
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
51,57
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,41,42,45,49,50,54,56,57,61,63,66,68,72,74,79,81,85,87,88,91,92,97,100,101,102,106,108,112,114
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
36,37
36,38
47,48
47,49
70,71
70,72
89,90
89,91
94,95
94,96
98,99
98,100
-----guardedBy-----
49,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_17_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(5,11,0)
(57,46,0)
(25,30,0)
(23,24,0)
(52,36,0)
(50,31,0)
(46,53,0)
(56,45,0)
(56,0,0)
(24,53,0)
(14,12,0)
(44,31,0)
(16,12,0)
(45,53,0)
(31,12,0)
(7,12,0)
(1,16,0)
(45,14,0)
(0,13,0)
(58,53,0)
(60,25,0)
(10,59,0)
(22,13,0)
(55,44,0)
(26,0,0)
(19,12,0)
(4,28,0)
(41,26,0)
(48,0,0)
(31,44,0)
(21,30,0)
(53,12,0)
(2,56,0)
(54,40,0)
(20,3,0)
(52,17,0)
(45,56,0)
(20,28,0)
(54,26,0)
(39,31,0)
(53,54,0)
(51,14,0)
(26,54,0)
(17,52,0)
(40,54,0)
(59,11,0)
(49,44,0)
(32,21,0)
(54,53,0)
(11,52,0)
(44,0,0)
(31,53,0)
(18,24,0)
(44,11,0)
(11,38,0)
(28,20,0)
(6,30,0)
(46,12,0)
(47,13,0)
(43,13,0)
(35,13,0)
(16,53,0)
(56,11,0)
(33,21,0)
(37,0,0)
(9,59,0)
(36,52,0)
(29,56,0)
(62,45,0)
(59,0,0)
(8,30,0)
(52,11,0)
(26,11,0)
(25,60,1)
(28,4,1)
(31,44,1)
(62,31,1)
(4,24,1)
(8,6,1)
(2,62,1)
(45,56,1)
(49,55,1)
(18,53,1)
(58,59,1)
(0,37,1)
(54,40,1)
(54,26,1)
(59,11,1)
(60,11,1)
(9,21,1)
(31,53,1)
(57,14,1)
(39,50,1)
(27,16,1)
(59,10,1)
(26,0,1)
(24,53,1)
(37,48,1)
(21,30,1)
(17,5,1)
(51,45,1)
(27,59,1)
(16,53,1)
(6,0,1)
(14,51,1)
(26,41,1)
(46,53,1)
(56,11,1)
(11,52,1)
(44,11,1)
(20,28,1)
(1,46,1)
(41,58,1)
(10,9,1)
(26,11,1)
(33,30,1)
(53,54,1)
(32,33,1)
(59,0,1)
(23,18,1)
(52,17,1)
(56,0,1)
(44,0,1)
(30,8,1)
(24,23,1)
(16,1,1)
(45,53,1)
(50,20,1)
(5,21,1)
(55,39,1)
(33,25,1)
(50,24,1)
(56,29,1)
(52,36,1)
(21,32,1)
(25,30,1)
(44,49,1)
(29,2,1)
(46,57,1)
(20,24,2)
(32,21,2)
(53,54,2)
(59,11,2)
(59,0,2)
(58,59,2)
(62,59,2)
(55,59,2)
(44,0,2)
(53,59,2)
(45,53,2)
(26,59,2)
(16,59,2)
(45,59,2)
(49,59,2)
(52,17,2)
(11,21,2)
(56,59,2)
(21,21,2)
(21,30,2)
(33,21,2)
(23,59,2)
(5,21,2)
(52,36,2)
(25,21,2)
(39,59,2)
(1,59,2)
(54,40,2)
(54,26,2)
(31,44,2)
(50,59,2)
(52,21,2)
(46,53,2)
(18,59,2)
(16,53,2)
(54,59,2)
(41,59,2)
(17,21,2)
(24,59,2)
(25,30,2)
(44,59,2)
(60,21,2)
(44,11,2)
(46,59,2)
(28,24,2)
(11,52,2)
(56,11,2)
(51,59,2)
(31,59,2)
(26,0,2)
(24,53,2)
(29,59,2)
(4,24,2)
(31,53,2)
(57,59,2)
(20,28,2)
(56,0,2)
(26,11,2)
(45,56,2)
(14,59,2)
(2,59,2)
-----------------------------------
(0,data = 0)
(1,dataBuffer)
(2,data)
(3,)
(4,1)
(5,data)
(6,i)
(7,dataBuffer)
(8,0)
(9,data)
(10,100)
(11,data = (short)
(12,)
(13,)
(14,dataBuffer[data-1] = '\\\\0')
(15,dataBuffer[data-1] = \'\\\\0\')
(16,free(dataBuffer)
(17,RAND32()
(18,dataBuffer)
(19,if (dataBuffer == NULL)
(20,exit(-1)
(21,i < 1)
(22,for(i = 0; i < 1; i++)
(23,NULL)
(24,dataBuffer == NULL)
(25,i++)
(26,malloc(data)
(27,RET)
(28,-1)
(29,1)
(30,i = 0)
(31,memset(dataBuffer, 'A', data-1)
(32,1)
(33,i)
(34,memset(dataBuffer, \'A\', data-1)
(35,if (data < 100)
(36,short)
(37,0)
(38,)
(39,'A')
(40,char *)
(41,data)
(42,\'A\')
(43,i)
(44,data-1)
(45,dataBuffer[data-1])
(46,printLine(dataBuffer)
(47,data)
(48,data)
(49,1)
(50,dataBuffer)
(51,'\\\\0')
(52,(short)
(53,* dataBuffer = (char *)
(54,(char *)
(55,data)
(56,data-1)
(57,dataBuffer)
(58,dataBuffer)
(59,data < 100)
(60,i)
(61,\'\\\\0\')
(62,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^