-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
20,21
20,22
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_16_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(52,27,0)
(11,21,0)
(3,15,0)
(33,0,0)
(2,0,0)
(26,9,0)
(44,27,0)
(40,42,0)
(37,15,0)
(24,47,0)
(1,40,0)
(27,53,0)
(11,44,0)
(55,46,0)
(10,27,0)
(4,0,0)
(18,25,0)
(52,15,0)
(2,47,0)
(19,45,0)
(27,40,0)
(21,47,0)
(0,47,0)
(14,21,0)
(34,33,0)
(45,19,0)
(45,41,0)
(44,11,0)
(44,15,0)
(12,46,0)
(40,27,0)
(4,47,0)
(9,26,0)
(29,25,0)
(19,27,0)
(13,4,0)
(22,10,0)
(36,10,0)
(41,45,0)
(15,25,0)
(4,52,0)
(32,26,0)
(35,0,0)
(45,0,0)
(5,11,0)
(17,25,0)
(46,0,0)
(23,2,0)
(49,52,0)
(28,53,0)
(30,44,0)
(16,47,0)
(33,47,0)
(0,45,0)
(31,4,0)
(52,4,0)
(11,0,0)
(50,44,0)
(10,15,0)
(40,1,0)
(9,39,0)
(6,27,0)
(42,40,0)
(51,19,0)
(19,15,0)
(43,52,0)
(40,1,1)
(27,40,1)
(43,49,1)
(21,14,1)
(45,19,1)
(22,36,1)
(7,10,1)
(4,52,1)
(30,5,1)
(28,27,1)
(46,0,1)
(36,8,1)
(44,50,1)
(4,0,1)
(34,21,1)
(14,11,1)
(1,6,1)
(44,15,1)
(52,15,1)
(35,10,1)
(52,27,1)
(5,4,1)
(13,31,1)
(31,46,1)
(33,0,1)
(11,44,1)
(10,22,1)
(55,12,1)
(2,0,1)
(45,41,1)
(52,43,1)
(3,37,1)
(10,15,1)
(32,46,1)
(19,51,1)
(36,28,1)
(2,23,1)
(19,15,1)
(31,9,1)
(26,32,1)
(0,45,1)
(9,26,1)
(33,34,1)
(40,42,1)
(23,33,1)
(44,27,1)
(7,2,1)
(8,15,1)
(51,35,1)
(6,8,1)
(46,55,1)
(19,27,1)
(12,0,1)
(50,30,1)
(15,3,1)
(11,0,1)
(49,13,1)
(10,27,1)
(52,15,2)
(46,10,2)
(4,0,2)
(49,10,2)
(9,46,2)
(45,41,2)
(33,10,2)
(51,10,2)
(2,10,2)
(10,15,2)
(21,10,2)
(9,26,2)
(10,27,2)
(32,46,2)
(44,10,2)
(35,10,2)
(12,10,2)
(27,8,2)
(33,0,2)
(46,0,2)
(40,42,2)
(6,8,2)
(11,10,2)
(27,40,2)
(19,15,2)
(14,10,2)
(19,10,2)
(23,10,2)
(52,27,2)
(4,10,2)
(28,8,2)
(43,10,2)
(44,15,2)
(52,10,2)
(31,10,2)
(55,10,2)
(26,46,2)
(0,10,2)
(30,10,2)
(1,8,2)
(19,27,2)
(34,10,2)
(2,0,2)
(11,44,2)
(13,10,2)
(45,19,2)
(11,0,2)
(40,8,2)
(5,10,2)
(50,10,2)
(45,10,2)
(40,1,2)
(44,27,2)
(0,45,2)
(4,52,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,RAND32()
(2,free(dataBuffer)
(3,0)
(4,memset(dataBuffer, 'A', data-1)
(5,dataBuffer)
(6,data)
(7,RET)
(8,1)
(9,exit(-1)
(10,data < 100)
(11,dataBuffer[data-1])
(12,dataBuffer)
(13,\'A\')
(14,'\\\\0')
(15,data = 0)
(16,if (dataBuffer == NULL)
(17,while(1)
(18,if (data < 100)
(19,malloc(data)
(20,'A')
(21,dataBuffer[data-1] = '\\\\0')
(22,100)
(23,dataBuffer)
(24,dataBuffer)
(25,)
(26,-1)
(27,data = (short)
(28,break;)
(29,data)
(30,data)
(31,dataBuffer)
(32,1)
(33,printLine(dataBuffer)
(34,dataBuffer)
(35,dataBuffer)
(36,data)
(37,data)
(38,dataBuffer[data-1] = \'\\\\0\')
(39,)
(40,(short)
(41,char *)
(42,short)
(43,1)
(44,data-1)
(45,(char *)
(46,dataBuffer == NULL)
(47,)
(48,\'\\\\0\')
(49,data)
(50,1)
(51,data)
(52,data-1)
(53,)
(54,memset(dataBuffer, \'A\', data-1)
(55,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^