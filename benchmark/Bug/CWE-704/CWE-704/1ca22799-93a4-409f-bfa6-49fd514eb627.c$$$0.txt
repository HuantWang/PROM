-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
21,22
21,23
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }
1
{        /* FLAW: Use a negative number */        data = -1;        break;    }
data = -1;
data = -1
data
data
-1
1
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(50,8,0)
(3,41,0)
(12,4,0)
(26,39,0)
(45,30,0)
(34,19,0)
(32,1,0)
(16,43,0)
(51,41,0)
(1,41,0)
(44,40,0)
(54,23,0)
(30,36,0)
(40,30,0)
(9,4,0)
(25,8,0)
(11,3,0)
(2,45,0)
(35,48,0)
(46,32,0)
(22,48,0)
(39,16,0)
(38,39,0)
(31,14,0)
(10,41,0)
(32,23,0)
(23,32,0)
(13,36,0)
(5,51,0)
(17,26,0)
(14,16,0)
(16,39,0)
(18,23,0)
(32,39,0)
(26,41,0)
(21,48,0)
(19,48,0)
(28,45,0)
(43,16,0)
(15,26,0)
(27,41,0)
(8,39,0)
(19,34,0)
(45,19,0)
(4,19,0)
(51,39,0)
(24,1,0)
(49,42,0)
(49,52,0)
(16,14,0)
(39,41,0)
(37,19,0)
(23,30,0)
(4,26,0)
(42,49,0)
(3,39,0)
(7,30,0)
(23,19,0)
(30,40,0)
(53,42,0)
(14,30,0)
(33,34,0)
(14,19,0)
(26,4,0)
(4,30,0)
(24,32,1)
(51,39,1)
(17,15,1)
(39,16,1)
(50,25,1)
(45,2,1)
(14,30,1)
(14,19,1)
(8,39,1)
(15,49,1)
(4,19,1)
(53,8,1)
(19,34,1)
(0,19,1)
(5,3,1)
(51,5,1)
(15,8,1)
(3,11,1)
(32,39,1)
(4,30,1)
(9,12,1)
(42,53,1)
(26,39,1)
(33,37,1)
(30,40,1)
(13,30,1)
(31,38,1)
(7,0,1)
(20,51,1)
(14,31,1)
(18,46,1)
(40,44,1)
(28,13,1)
(20,45,1)
(46,26,1)
(26,4,1)
(12,17,1)
(34,33,1)
(2,28,1)
(4,9,1)
(32,23,1)
(45,19,1)
(1,24,1)
(23,19,1)
(45,30,1)
(3,39,1)
(8,50,1)
(16,43,1)
(23,30,1)
(16,14,1)
(28,0,1)
(25,39,1)
(44,7,1)
(54,18,1)
(38,45,1)
(11,1,1)
(49,42,1)
(23,54,1)
(7,0,2)
(8,39,2)
(26,45,2)
(16,14,2)
(23,19,2)
(53,8,2)
(45,30,2)
(31,45,2)
(49,8,2)
(40,0,2)
(49,42,2)
(23,30,2)
(32,45,2)
(54,45,2)
(25,45,2)
(23,45,2)
(30,0,2)
(12,45,2)
(9,45,2)
(45,19,2)
(39,16,2)
(14,45,2)
(32,39,2)
(16,43,2)
(4,19,2)
(26,4,2)
(17,45,2)
(39,45,2)
(38,45,2)
(46,45,2)
(44,0,2)
(32,23,2)
(42,8,2)
(8,45,2)
(19,34,2)
(4,30,2)
(16,45,2)
(14,19,2)
(3,39,2)
(15,45,2)
(50,45,2)
(24,45,2)
(14,30,2)
(18,45,2)
(51,39,2)
(1,45,2)
(51,45,2)
(30,40,2)
(3,45,2)
(4,45,2)
(11,45,2)
(13,0,2)
(26,39,2)
(5,45,2)
-----------------------------------
(0,1)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,100)
(3,printLine(dataBuffer)
(4,data-1)
(5,dataBuffer)
(6,dataBuffer[data-1] = '\\\\0')
(7,data)
(8,dataBuffer == NULL)
(9,1)
(10,dataBuffer)
(11,dataBuffer)
(12,data)
(13,break;)
(14,malloc(data)
(15,dataBuffer)
(16,(char *)
(17,'A')
(18,data)
(19,data = -1)
(20,RET)
(21,data)
(22,if (data < 100)
(23,data-1)
(24,'\\\\0')
(25,dataBuffer)
(26,memset(dataBuffer, \'A\', data-1)
(27,if (dataBuffer == NULL)
(28,data)
(29,memset(dataBuffer, 'A', data-1)
(30,data = -1)
(31,data)
(32,dataBuffer[data-1])
(33,1)
(34,-1)
(35,while(1)
(36,)
(37,data)
(38,dataBuffer)
(39,* dataBuffer = (char *)
(40,-1)
(41,)
(42,-1)
(43,char *)
(44,1)
(45,data < 100)
(46,dataBuffer)
(47,\'A\')
(48,)
(49,exit(-1)
(50,NULL)
(51,free(dataBuffer)
(52,)
(53,1)
(54,1)
(55,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^