-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_21_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    badStatic = 1; /* true */
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_21_bad(){    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_21_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_21_bad
{    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(47,12,0)
(13,16,0)
(27,0,0)
(50,15,0)
(6,51,0)
(15,1,0)
(49,47,0)
(14,17,0)
(43,1,0)
(10,43,0)
(16,12,0)
(12,0,0)
(4,1,0)
(38,17,0)
(33,43,0)
(42,36,0)
(39,18,0)
(44,25,0)
(19,1,0)
(25,20,0)
(8,16,0)
(36,22,0)
(3,20,0)
(25,44,0)
(40,43,0)
(24,0,0)
(7,34,0)
(20,12,0)
(18,43,0)
(25,43,0)
(22,12,0)
(43,25,0)
(11,51,0)
(47,17,0)
(9,24,0)
(12,47,0)
(46,0,0)
(8,43,0)
(36,15,0)
(35,40,0)
(2,24,0)
(16,8,0)
(45,34,0)
(20,25,0)
(22,36,0)
(51,11,0)
(31,22,0)
(41,8,0)
(52,18,0)
(17,0,0)
(28,33,0)
(33,1,0)
(21,22,0)
(8,1,0)
(36,43,0)
(5,12,0)
(40,1,0)
(23,16,0)
(11,30,0)
(34,12,0)
(26,8,0)
(43,25,1)
(20,3,1)
(40,43,1)
(22,12,1)
(15,50,1)
(50,36,1)
(20,12,1)
(10,34,1)
(36,22,1)
(29,34,1)
(7,12,1)
(5,24,1)
(6,18,1)
(2,9,1)
(33,28,1)
(40,35,1)
(39,43,1)
(41,11,1)
(38,14,1)
(47,17,1)
(41,18,1)
(25,20,1)
(52,39,1)
(9,17,1)
(28,40,1)
(26,41,1)
(45,7,1)
(12,47,1)
(22,21,1)
(42,8,1)
(8,43,1)
(16,12,1)
(51,6,1)
(16,23,1)
(31,42,1)
(25,44,1)
(8,16,1)
(18,52,1)
(47,49,1)
(13,26,1)
(23,13,1)
(36,43,1)
(24,2,1)
(11,51,1)
(21,31,1)
(33,43,1)
(49,5,1)
(18,43,1)
(17,38,1)
(34,12,1)
(29,33,1)
(35,15,1)
(34,45,1)
(3,10,1)
(20,12,2)
(11,51,2)
(42,34,2)
(36,43,2)
(18,43,2)
(50,34,2)
(16,34,2)
(43,34,2)
(47,17,2)
(40,43,2)
(52,34,2)
(18,34,2)
(25,44,2)
(25,20,2)
(25,34,2)
(41,34,2)
(20,34,2)
(31,34,2)
(33,34,2)
(22,12,2)
(36,22,2)
(15,34,2)
(21,34,2)
(10,34,2)
(35,34,2)
(8,16,2)
(36,34,2)
(28,34,2)
(3,34,2)
(6,18,2)
(23,34,2)
(16,12,2)
(33,43,2)
(12,47,2)
(11,18,2)
(8,43,2)
(13,34,2)
(34,12,2)
(43,25,2)
(26,34,2)
(22,34,2)
(40,34,2)
(8,34,2)
(39,34,2)
(51,18,2)
-----------------------------------
(0,)
(1,)
(2,1)
(3,data)
(4,dataBuffer)
(5,data)
(6,1)
(7,data)
(8,memset(dataBuffer, \'A\', data-1)
(9,badStatic)
(10,dataBuffer)
(11,exit(-1)
(12,data = badSource(data)
(13,data)
(14,data)
(15,dataBuffer[data-1] = '\\\\0')
(16,data-1)
(17,data = 0)
(18,dataBuffer == NULL)
(19,if (dataBuffer == NULL)
(20,malloc(data)
(21,1)
(22,data-1)
(23,1)
(24,badStatic = 1)
(25,(char *)
(26,'A')
(27,if (data < 100)
(28,dataBuffer)
(29,RET)
(30,)
(31,data)
(32,memset(dataBuffer, 'A', data-1)
(33,free(dataBuffer)
(34,data < 100)
(35,dataBuffer)
(36,dataBuffer[data-1])
(37,dataBuffer[data-1] = \'\\\\0\')
(38,0)
(39,dataBuffer)
(40,printLine(dataBuffer)
(41,dataBuffer)
(42,dataBuffer)
(43,* dataBuffer = (char *)
(44,char *)
(45,100)
(46,data)
(47,badSource(data)
(48,\'A\')
(49,data)
(50,\'\\\\0\')
(51,-1)
(52,NULL)
(53,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^