-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a negative number */
    data = -1;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
48,51
48,52
48,53
48,54
49,50
50,51
50,52
52,53
52,54
54,55
56,57
57,58
57,59
59,60
59,61
59,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,33,34,36,40,42,46,47,51,53,55,58,60,62,64,68,70,71,73,74,79,81,82,83,87,88,93,95,97,99,104,106,107,111,113
-----computeFrom-----
18,19
18,20
24,25
24,26
30,31
30,32
72,73
72,74
76,77
76,78
80,81
80,82
85,86
85,87
101,102
101,103
-----guardedBy-----
87,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
data = -1;
data = -1
data
data
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(3,47,0)
(54,40,0)
(16,40,0)
(50,6,0)
(16,11,0)
(25,38,0)
(54,13,0)
(39,37,0)
(47,6,0)
(19,42,0)
(23,32,0)
(50,32,0)
(10,6,0)
(15,32,0)
(11,20,0)
(2,50,0)
(50,43,0)
(28,54,0)
(45,42,0)
(57,45,0)
(31,50,0)
(42,17,0)
(30,20,0)
(21,23,0)
(24,40,0)
(45,32,0)
(5,23,0)
(23,6,0)
(7,33,0)
(51,50,0)
(22,42,0)
(46,53,0)
(37,6,0)
(44,38,0)
(14,29,0)
(18,17,0)
(9,53,0)
(55,42,0)
(26,49,0)
(29,16,0)
(58,42,0)
(27,40,0)
(32,42,0)
(4,29,0)
(13,54,0)
(6,17,0)
(6,47,0)
(33,19,0)
(19,33,0)
(56,19,0)
(35,11,0)
(49,43,0)
(11,40,0)
(8,16,0)
(53,42,0)
(23,49,0)
(17,40,0)
(48,33,0)
(41,32,0)
(20,11,0)
(38,9,0)
(36,47,0)
(34,37,0)
(9,38,0)
(0,9,0)
(12,13,0)
(1,19,0)
(21,50,1)
(16,8,1)
(29,4,1)
(31,51,1)
(53,46,1)
(51,2,1)
(15,41,1)
(56,1,1)
(25,44,1)
(3,10,1)
(12,28,1)
(37,6,1)
(13,12,1)
(20,30,1)
(11,20,1)
(44,0,1)
(50,31,1)
(23,5,1)
(45,32,1)
(8,29,1)
(50,6,1)
(6,47,1)
(45,57,1)
(41,6,1)
(5,21,1)
(4,14,1)
(23,6,1)
(34,53,1)
(1,32,1)
(30,35,1)
(19,33,1)
(2,37,1)
(46,9,1)
(10,16,1)
(33,48,1)
(36,3,1)
(14,11,1)
(39,34,1)
(16,11,1)
(54,13,1)
(37,39,1)
(32,15,1)
(35,54,1)
(9,38,1)
(23,32,1)
(26,23,1)
(52,45,1)
(38,25,1)
(7,56,1)
(57,37,1)
(0,19,1)
(48,7,1)
(57,49,1)
(47,36,1)
(50,32,1)
(49,26,1)
(11,20,2)
(2,37,2)
(50,37,2)
(50,32,2)
(45,32,2)
(16,11,2)
(31,37,2)
(23,37,2)
(23,6,2)
(26,37,2)
(51,37,2)
(9,38,2)
(5,37,2)
(49,37,2)
(23,32,2)
(50,6,2)
(19,33,2)
(54,13,2)
(37,6,2)
(6,47,2)
(21,37,2)
-----------------------------------
(0,source)
(1,source)
(2,dest)
(3,myUnion)
(4,unionFirst)
(5,data)
(6,data = myUnion.unionSecond)
(7,100)
(8,data)
(9,source[100-1])
(10,data)
(11,data = -1)
(12,1)
(13,-1)
(14,myUnion)
(15,"")
(16,myUnion.unionFirst = data)
(17,)
(18,data)
(19,memset(source, \\\'A\\\', 100-1)
(20,-1)
(21,dest)
(22,source)
(23,dest[data])
(24,myUnion)
(25,1)
(26,\\\'\\\\0\\\')
(27,data)
(28,data)
(29,myUnion.unionFirst)
(30,1)
(31,data)
(32,dest[100] = "")
(33,100-1)
(34,data)
(35,data)
(36,unionSecond)
(37,data < 100)
(38,100-1)
(39,100)
(40,)
(41,dest)
(42,)
(43,)
(44,100)
(45,printLine(dest)
(46,\\\'\\\\0\\\')
(47,myUnion.unionSecond)
(48,1)
(49,dest[data] = \\\'\\\\0\\\')
(50,memcpy(dest, source, data)
(51,source)
(52,RET)
(53,source[100-1] = \\\'\\\\0\\\')
(54,data = -1)
(55,dest)
(56,\\\'A\\\')
(57,dest)
(58,if (data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^