-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
55,57
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
57,58
58,59
58,60
59,60
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
83,84
86,87
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
117,119
118,119
120,121
122,123
122,124
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
138,139
139,140
140,141
142,143
144,145
146,147
147,148
147,149
148,149
150,151
150,152
150,153
150,154
150,155
151,152
153,154
155,156
157,158
157,159
158,159
162,163
162,164
163,164
163,165
164,165
164,166
165,166
167,168
169,170
169,171
170,171
173,174
175,176
176,177
176,178
177,178
177,179
178,179
180,181
183,184
184,185
184,186
185,186
187,188
187,189
188,189
190,191
192,193
192,194
192,195
193,194
193,195
194,195
194,196
195,196
197,198
199,200
199,201
200,201
202,203
204,205
205,206
206,207
206,208
207,208
209,210
211,212
212,213
213,214
213,215
214,215
216,217
219,220
219,221
220,221
220,222
221,222
223,224
225,226
226,227
227,228
227,229
228,229
230,231
232,233
232,234
233,234
233,235
234,235
237,238
237,239
237,240
237,241
237,242
237,243
238,239
239,240
239,241
241,242
241,243
241,244
244,245
245,246
245,247
246,247
246,248
248,249
250,251
250,252
251,252
253,254
255,256
255,257
256,257
256,258
257,258
259,260
261,262
262,263
263,264
263,265
264,265
266,267
268,269
269,270
269,271
269,272
269,273
270,271
272,273
275,276
275,277
276,277
279,280
280,281
280,282
281,282
281,283
282,283
284,285
284,286
285,286
289,290
290,291
290,292
291,292
293,294
295,296
296,297
296,298
297,298
299,300
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,35,37,41,43,46,49,51,54,60,63,65,67,69,73,75,77,81,84,85,89,94,95,97,103,104,105,108,110,115,116,119,121,126,128,132,134,137,141,143,145,149,152,154,156,159,160,161,166,168,171,172,174,179,181,182,186,189,191,196,198,201,203,208,210,215,217,218,222,224,229,231,235,236,240,242,243,247,249,252,254,258,260,265,267,271,273,274,277,278,283,286,287,288,292,294,298,300
-----computeFrom-----
12,13
12,14
17,18
17,19
58,59
58,60
71,72
71,73
91,92
91,93
99,100
99,101
112,113
112,114
123,124
123,125
147,148
147,149
157,158
157,159
163,164
163,165
164,165
164,166
169,170
169,171
176,177
176,178
184,185
184,186
193,194
193,195
194,195
194,196
199,200
199,201
206,207
206,208
213,214
213,215
220,221
220,222
233,234
233,235
256,257
256,258
275,276
275,277
280,281
280,282
284,285
284,286
-----guardedBy-----
222,231
235,286
-----guardedByNegation-----
201,217
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_03_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
5==5
5
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(24,17,0)
(124,92,0)
(27,162,0)
(21,56,0)
(111,29,0)
(109,100,0)
(23,26,0)
(115,4,0)
(30,92,0)
(167,70,0)
(117,20,0)
(165,29,0)
(58,79,0)
(70,4,0)
(125,84,0)
(143,86,0)
(110,188,0)
(170,151,0)
(15,170,0)
(184,23,0)
(135,100,0)
(32,102,0)
(64,56,0)
(28,182,0)
(90,43,0)
(81,71,0)
(188,104,0)
(154,125,0)
(81,144,0)
(26,170,0)
(104,29,0)
(72,144,0)
(73,29,0)
(156,23,0)
(55,29,0)
(106,26,0)
(101,79,0)
(186,86,0)
(16,3,0)
(158,166,0)
(84,29,0)
(137,100,0)
(99,92,0)
(81,190,0)
(43,116,0)
(97,73,0)
(178,130,0)
(112,57,0)
(69,84,0)
(133,14,0)
(11,30,0)
(34,102,0)
(180,170,0)
(103,30,0)
(22,4,0)
(116,43,0)
(100,86,0)
(75,71,0)
(114,100,0)
(6,38,0)
(33,94,0)
(129,145,0)
(92,131,0)
(56,162,0)
(56,79,0)
(118,46,0)
(190,81,0)
(83,29,0)
(73,97,0)
(55,134,0)
(130,71,0)
(182,99,0)
(52,72,0)
(161,29,0)
(10,134,0)
(70,79,0)
(93,162,0)
(63,97,0)
(78,71,0)
(71,130,0)
(14,29,0)
(149,52,0)
(181,170,0)
(147,70,0)
(98,38,0)
(148,29,0)
(99,89,0)
(55,141,0)
(50,149,0)
(140,93,0)
(152,137,0)
(17,71,0)
(87,137,0)
(56,99,0)
(35,124,0)
(150,14,0)
(71,29,0)
(114,8,0)
(174,67,0)
(92,29,0)
(19,141,0)
(75,26,0)
(96,58,0)
(138,81,0)
(53,121,0)
(74,78,0)
(72,52,0)
(157,188,0)
(169,69,0)
(85,99,0)
(91,116,0)
(20,73,0)
(6,54,0)
(45,67,0)
(108,190,0)
(4,70,0)
(95,170,0)
(44,94,0)
(82,109,0)
(30,35,0)
(1,3,0)
(171,72,0)
(17,175,0)
(17,6,0)
(6,17,0)
(58,99,0)
(145,43,0)
(79,57,0)
(166,144,0)
(114,182,0)
(179,185,0)
(168,78,0)
(7,124,0)
(43,90,0)
(176,20,0)
(122,66,0)
(131,92,0)
(100,114,0)
(144,29,0)
(107,58,0)
(36,81,0)
(76,99,0)
(102,170,0)
(23,71,0)
(64,143,0)
(105,149,0)
(149,144,0)
(166,111,0)
(68,17,0)
(162,93,0)
(47,166,0)
(70,162,0)
(13,75,0)
(160,104,0)
(119,164,0)
(2,145,0)
(18,81,0)
(141,55,0)
(127,64,0)
(51,24,0)
(153,90,0)
(182,162,0)
(49,57,0)
(134,55,0)
(40,175,0)
(61,71,0)
(162,187,0)
(58,162,0)
(69,3,0)
(48,111,0)
(113,26,0)
(155,170,0)
(189,130,0)
(182,79,0)
(4,86,0)
(43,145,0)
(75,159,0)
(142,100,0)
(175,17,0)
(139,29,0)
(8,114,0)
(135,86,0)
(17,24,0)
(54,6,0)
(38,6,0)
(39,55,0)
(144,81,0)
(65,143,0)
(56,64,0)
(109,86,0)
(67,45,0)
(25,86,0)
(45,5,0)
(3,69,0)
(60,135,0)
(84,125,0)
(41,92,0)
(59,190,0)
(42,124,0)
(183,79,0)
(52,149,0)
(37,130,0)
(177,170,0)
(136,144,0)
(120,170,0)
(0,170,0)
(70,99,0)
(132,170,0)
(9,57,0)
(128,56,0)
(4,100,0)
(173,72,0)
(182,114,0)
(124,35,0)
(80,131,0)
(12,170,0)
(64,100,0)
(35,30,0)
(70,79,1)
(34,32,1)
(154,69,1)
(30,92,1)
(10,78,1)
(70,162,1)
(109,82,1)
(96,31,1)
(71,130,1)
(88,58,1)
(135,100,1)
(18,136,1)
(96,94,1)
(64,56,1)
(134,10,1)
(114,182,1)
(70,99,1)
(14,150,1)
(37,61,1)
(56,99,1)
(11,124,1)
(150,133,1)
(13,23,1)
(3,1,1)
(69,169,1)
(72,173,1)
(22,115,1)
(82,135,1)
(175,40,1)
(43,116,1)
(4,70,1)
(75,26,1)
(72,144,1)
(78,71,1)
(55,134,1)
(58,162,1)
(58,79,1)
(114,8,1)
(128,21,1)
(108,36,1)
(99,85,1)
(55,141,1)
(124,42,1)
(110,55,1)
(166,47,1)
(179,52,1)
(65,64,1)
(44,79,1)
(75,13,1)
(58,107,1)
(73,97,1)
(169,3,1)
(17,175,1)
(92,131,1)
(76,35,1)
(136,24,1)
(56,79,1)
(52,72,1)
(109,100,1)
(123,99,1)
(53,78,1)
(182,162,1)
(135,60,1)
(90,43,1)
(1,16,1)
(31,75,1)
(106,102,1)
(85,76,1)
(190,59,1)
(74,168,1)
(174,137,1)
(23,71,1)
(2,123,1)
(184,118,1)
(26,113,1)
(87,100,1)
(188,157,1)
(33,44,1)
(133,90,1)
(32,94,1)
(184,179,1)
(182,28,1)
(90,153,1)
(94,33,1)
(145,129,1)
(143,65,1)
(58,99,1)
(101,183,1)
(50,105,1)
(153,43,1)
(81,138,1)
(137,100,1)
(67,174,1)
(61,14,1)
(30,103,1)
(149,144,1)
(184,122,1)
(111,48,1)
(81,190,1)
(182,79,1)
(189,37,1)
(171,149,1)
(166,144,1)
(60,143,1)
(158,52,1)
(107,96,1)
(176,117,1)
(141,19,1)
(88,109,1)
(6,54,1)
(116,91,1)
(51,17,1)
(81,71,1)
(79,101,1)
(41,111,1)
(48,166,1)
(100,114,1)
(31,23,1)
(96,119,1)
(4,100,1)
(56,128,1)
(104,160,1)
(91,145,1)
(142,58,1)
(19,39,1)
(115,45,1)
(131,80,1)
(129,2,1)
(130,178,1)
(162,93,1)
(35,30,1)
(152,87,1)
(56,162,1)
(68,73,1)
(99,92,1)
(113,106,1)
(43,145,1)
(28,142,1)
(2,26,1)
(118,90,1)
(122,24,1)
(24,51,1)
(80,41,1)
(144,81,1)
(124,92,1)
(147,22,1)
(17,71,1)
(98,68,1)
(117,84,1)
(21,127,1)
(24,17,1)
(105,144,1)
(45,67,1)
(47,158,1)
(20,176,1)
(23,26,1)
(119,31,1)
(137,152,1)
(35,124,1)
(75,71,1)
(168,71,1)
(156,184,1)
(16,104,1)
(103,11,1)
(17,6,1)
(69,3,1)
(157,110,1)
(140,27,1)
(63,20,1)
(23,156,1)
(38,98,1)
(125,154,1)
(6,38,1)
(184,123,1)
(173,171,1)
(64,100,1)
(167,147,1)
(123,162,1)
(138,190,1)
(36,18,1)
(97,63,1)
(84,125,1)
(178,189,1)
(42,7,1)
(78,74,1)
(127,4,1)
(70,167,1)
(39,134,1)
(52,149,1)
(7,92,1)
(59,108,1)
(160,188,1)
(184,53,1)
(182,99,1)
(115,137,1)
(40,6,1)
(149,50,1)
(27,35,1)
(93,140,1)
(102,34,1)
(84,78,2)
(30,92,2)
(147,58,2)
(92,131,2)
(114,58,2)
(144,24,2)
(55,141,2)
(80,52,2)
(98,78,2)
(24,78,2)
(106,94,2)
(35,30,2)
(70,162,2)
(103,124,2)
(17,71,2)
(133,90,2)
(55,78,2)
(175,78,2)
(38,78,2)
(142,58,2)
(76,35,2)
(40,78,2)
(43,116,2)
(131,52,2)
(189,90,2)
(149,24,2)
(41,52,2)
(70,99,2)
(150,90,2)
(2,123,2)
(144,81,2)
(82,58,2)
(102,94,2)
(4,70,2)
(17,78,2)
(70,79,2)
(117,78,2)
(73,97,2)
(61,90,2)
(3,78,2)
(37,90,2)
(73,78,2)
(162,35,2)
(104,78,2)
(109,58,2)
(167,58,2)
(118,90,2)
(169,78,2)
(166,52,2)
(24,17,2)
(105,24,2)
(182,58,2)
(87,58,2)
(35,52,2)
(99,92,2)
(26,94,2)
(47,52,2)
(99,35,2)
(23,26,2)
(45,67,2)
(68,78,2)
(178,90,2)
(135,100,2)
(100,58,2)
(182,99,2)
(56,99,2)
(21,58,2)
(52,24,2)
(56,162,2)
(109,100,2)
(129,94,2)
(58,79,2)
(128,58,2)
(58,99,2)
(125,78,2)
(135,58,2)
(90,43,2)
(123,52,2)
(171,149,2)
(137,58,2)
(6,78,2)
(153,123,2)
(153,94,2)
(53,78,2)
(184,94,2)
(85,35,2)
(10,78,2)
(114,182,2)
(138,24,2)
(6,38,2)
(188,78,2)
(23,94,2)
(2,94,2)
(134,78,2)
(64,100,2)
(31,94,2)
(19,78,2)
(81,71,2)
(75,26,2)
(72,149,2)
(45,137,2)
(160,78,2)
(4,58,2)
(72,144,2)
(67,137,2)
(113,94,2)
(190,24,2)
(110,78,2)
(48,52,2)
(1,78,2)
(28,58,2)
(124,52,2)
(11,124,2)
(145,94,2)
(140,35,2)
(115,58,2)
(4,100,2)
(69,3,2)
(20,78,2)
(71,130,2)
(7,52,2)
(56,58,2)
(43,94,2)
(119,31,2)
(32,94,2)
(71,90,2)
(14,90,2)
(23,71,2)
(176,78,2)
(114,8,2)
(174,137,2)
(51,78,2)
(56,79,2)
(100,114,2)
(162,93,2)
(124,92,2)
(75,23,2)
(90,94,2)
(70,58,2)
(116,94,2)
(90,123,2)
(158,52,2)
(13,23,2)
(18,24,2)
(34,94,2)
(39,78,2)
(182,162,2)
(182,79,2)
(91,94,2)
(122,24,2)
(84,125,2)
(116,123,2)
(75,71,2)
(137,100,2)
(154,78,2)
(97,78,2)
(16,78,2)
(108,24,2)
(92,52,2)
(52,149,2)
(78,90,2)
(64,56,2)
(59,24,2)
(65,58,2)
(149,144,2)
(27,35,2)
(43,123,2)
(43,145,2)
(141,78,2)
(52,72,2)
(168,90,2)
(42,52,2)
(157,78,2)
(78,71,2)
(22,58,2)
(156,94,2)
(64,58,2)
(50,24,2)
(55,134,2)
(63,78,2)
(166,144,2)
(74,90,2)
(129,123,2)
(81,190,2)
(111,52,2)
(35,124,2)
(69,78,2)
(30,124,2)
(36,24,2)
(127,58,2)
(145,123,2)
(152,58,2)
(179,52,2)
(130,90,2)
(93,35,2)
(173,149,2)
(6,54,2)
(81,24,2)
(143,58,2)
(17,6,2)
(58,162,2)
(17,175,2)
(60,58,2)
(136,24,2)
(91,123,2)
-----------------------------------
(0,if (connectSocket != INVALID_SOCKET)
(1,sin_addr)
(2,2)
(3,service.sin_addr)
(4,memset(dataBuffer, 'A', data-1)
(5,)
(6,(struct sockaddr*)
(7,tempInt)
(8,char *)
(9,if(5==5)
(10,service)
(11,tempInt)
(12,service)
(13,connectSocket)
(14,wsaDataInit = 1)
(15,connectSocket)
(16,service)
(17,connect(connectSocket, (struct sockaddr*)
(18,connectSocket)
(19,service)
(20,service.sin_port)
(21,data)
(22,'A')
(23,connectSocket != INVALID_SOCKET)
(24,connect(connectSocket, (struct sockaddr*)
(25,dataBuffer)
(26,connectSocket = INVALID_SOCKET)
(27,data)
(28,data)
(29,)
(30,tempInt < SHRT_MIN)
(31,wsaDataInit)
(32,wsaDataInit)
(33,5)
(34,0)
(35,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(36,inputBuffer)
(37,AF_INET)
(38,&service)
(39,0)
(40,service)
(41,tempInt)
(42,SHRT_MAX)
(43,WSAStartup(MAKEWORD(2,2)
(44,5)
(45,exit(-1)
(46,)
(47,recvResult)
(48,'\\\\0')
(49,data)
(50,SOCKET_ERROR)
(51,SOCKET_ERROR)
(52,recvResult == SOCKET_ERROR || recvResult == 0)
(53,break;)
(54,struct sockaddr*)
(55,memset(&service, 0, sizeof(service)
(56,data-1)
(57,)
(58,data < 100)
(59,1)
(60,dataBuffer)
(61,connectSocket)
(62,\'\\\\0\')
(63,TCP_PORT)
(64,dataBuffer[data-1])
(65,\'\\\\0\')
(66,)
(67,-1)
(68,connectSocket)
(69,service.sin_addr.s_addr)
(70,data-1)
(71,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(72,recvResult == 0)
(73,service.sin_port = htons(TCP_PORT)
(74,INVALID_SOCKET)
(75,CLOSE_SOCKET(connectSocket)
(76,data)
(77,memset(dataBuffer, \'A\', data-1)
(78,connectSocket == INVALID_SOCKET)
(79,data = 0)
(80,inputBuffer)
(81,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(82,dataBuffer)
(83,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(84,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(85,tempInt)
(86,)
(87,dataBuffer)
(88,RET)
(89,)
(90,WSAStartup(MAKEWORD(2,2)
(91,wsaData)
(92,tempInt = atoi(inputBuffer)
(93,-1)
(94,5==5)
(95,if (wsaDataInit)
(96,data)
(97,htons(TCP_PORT)
(98,service)
(99,data = tempInt)
(100,* dataBuffer = (char *)
(101,0)
(102,wsaDataInit = 0)
(103,SHRT_MIN)
(104,service.sin_family = AF_INET)
(105,recvResult)
(106,connectSocket)
(107,100)
(108,CHAR_ARRAY_SIZE)
(109,free(dataBuffer)
(110,service)
(111,inputBuffer[recvResult] = '\\\\0')
(112,if (data < 100)
(113,INVALID_SOCKET)
(114,(char *)
(115,dataBuffer)
(116,&wsaData)
(117,service)
(118,break;)
(119,WSACleanup()
(120,wsaDataInit)
(121,)
(122,break;)
(123,0)
(124,tempInt > SHRT_MAX)
(125,inet_addr(IP_ADDRESS)
(126,'\\\\0')
(127,dataBuffer)
(128,1)
(129,2)
(130,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(131,atoi(inputBuffer)
(132,do)
(133,wsaDataInit)
(134,&service)
(135,printLine(dataBuffer)
(136,recvResult)
(137,dataBuffer == NULL)
(138,0)
(139,if (recvResult == SOCKET_ERROR || recvResult == 0)
(140,1)
(141,sizeof(service)
(142,dataBuffer)
(143,dataBuffer[data-1] = \'\\\\0\')
(144,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(145,MAKEWORD(2,2)
(146,\'A\')
(147,data)
(148,if (connect(connectSocket, (struct sockaddr*)
(149,recvResult == SOCKET_ERROR)
(150,1)
(151,)
(152,NULL)
(153,NO_ERROR)
(154,IP_ADDRESS)
(155,wsaData)
(156,INVALID_SOCKET)
(157,sin_family)
(158,inputBuffer)
(159,)
(160,AF_INET)
(161,if (WSAStartup(MAKEWORD(2,2)
(162,data = -1)
(163,inputBuffer[recvResult] = \'\\\\0\')
(164,)
(165,if (connectSocket == INVALID_SOCKET)
(166,inputBuffer[recvResult])
(167,1)
(168,connectSocket)
(169,s_addr)
(170,)
(171,recvResult)
(172,dataBuffer[data-1] = '\\\\0')
(173,0)
(174,1)
(175,sizeof(service)
(176,sin_port)
(177,tempInt)
(178,IPPROTO_TCP)
(179,break;)
(180,recvResult)
(181,inputBuffer)
(182,malloc(data)
(183,data)
(184,connectSocket)
(185,)
(186,if (dataBuffer == NULL)
(187,)
(188,service.sin_family)
(189,SOCK_STREAM)
(190,CHAR_ARRAY_SIZE - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^