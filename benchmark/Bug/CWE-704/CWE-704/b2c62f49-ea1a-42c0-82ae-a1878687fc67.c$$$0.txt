-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
47,51
47,52
47,53
48,49
49,50
49,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,54,57,59,61,63,67,69,70,72,73,78,80,81,82,86,87,92,94,96,98,103,105,106,110,112
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
71,72
71,73
75,76
75,77
79,80
79,81
84,85
84,86
100,101
100,102
-----guardedBy-----
86,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_34_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType
CWE194_Unexpected_Sign_Extension__negative_memmove_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(36,4,0)
(55,12,0)
(5,13,0)
(54,12,0)
(14,34,0)
(49,36,0)
(57,36,0)
(31,7,0)
(17,9,0)
(13,50,0)
(22,46,0)
(44,52,0)
(21,13,0)
(42,4,0)
(33,22,0)
(0,10,0)
(7,4,0)
(7,10,0)
(5,34,0)
(2,23,0)
(38,51,0)
(12,48,0)
(47,38,0)
(35,22,0)
(19,26,0)
(45,26,0)
(6,46,0)
(50,13,0)
(23,4,0)
(18,10,0)
(46,22,0)
(12,55,0)
(30,12,0)
(22,10,0)
(51,38,0)
(40,54,0)
(28,50,0)
(20,23,0)
(9,10,0)
(11,34,0)
(24,46,0)
(15,25,0)
(56,55,0)
(52,34,0)
(23,12,0)
(43,4,0)
(4,10,0)
(51,9,0)
(23,37,0)
(8,5,0)
(26,5,0)
(25,37,0)
(36,25,0)
(36,12,0)
(48,34,0)
(29,55,0)
(16,52,0)
(1,51,0)
(32,48,0)
(53,54,0)
(13,34,0)
(41,10,0)
(3,23,0)
(10,48,0)
(27,38,0)
(21,52,1)
(42,43,1)
(23,2,1)
(26,19,1)
(7,31,1)
(12,55,1)
(54,53,1)
(39,7,1)
(4,42,1)
(5,13,1)
(40,9,1)
(5,8,1)
(22,46,1)
(36,12,1)
(45,13,1)
(2,3,1)
(33,35,1)
(31,54,1)
(53,40,1)
(31,25,1)
(25,15,1)
(57,23,1)
(6,33,1)
(27,47,1)
(17,51,1)
(3,20,1)
(46,24,1)
(24,6,1)
(43,12,1)
(16,44,1)
(56,30,1)
(19,45,1)
(49,57,1)
(36,4,1)
(20,54,1)
(30,5,1)
(1,22,1)
(29,56,1)
(55,29,1)
(54,12,1)
(52,16,1)
(47,1,1)
(51,38,1)
(50,28,1)
(28,21,1)
(15,36,1)
(13,50,1)
(8,26,1)
(23,12,1)
(38,27,1)
(35,4,1)
(23,4,1)
(9,17,1)
(36,49,1)
(7,4,1)
(49,54,2)
(22,46,2)
(36,4,2)
(57,54,2)
(23,12,2)
(25,54,2)
(23,54,2)
(36,12,2)
(12,55,2)
(15,54,2)
(13,50,2)
(51,38,2)
(23,4,2)
(7,4,2)
(5,13,2)
(54,12,2)
(3,54,2)
(20,54,2)
(2,54,2)
(36,54,2)
-----------------------------------
(0,if (data < 100)
(1,source)
(2,data)
(3,source)
(4,dest[100] = "")
(5,myUnion.unionFirst = data)
(6,100)
(7,printLine(dest)
(8,data)
(9,source[100-1] = \\\'\\\\0\\\')
(10,)
(11,data)
(12,data = myUnion.unionSecond)
(13,data = -1)
(14,myUnion)
(15,\\\'\\\\0\\\')
(16,0)
(17,\\\'\\\\0\\\')
(18,source)
(19,unionFirst)
(20,dest)
(21,data)
(22,memset(source, \\\'A\\\', 100-1)
(23,memmove(dest, source, data)
(24,1)
(25,dest[data] = \\\'\\\\0\\\')
(26,myUnion.unionFirst)
(27,1)
(28,1)
(29,unionSecond)
(30,data)
(31,dest)
(32,data)
(33,\\\'A\\\')
(34,)
(35,source)
(36,dest[data])
(37,)
(38,100-1)
(39,RET)
(40,data)
(41,dest)
(42,"")
(43,dest)
(44,data)
(45,myUnion)
(46,100-1)
(47,100)
(48,)
(49,data)
(50,-1)
(51,source[100-1])
(52,data = 0)
(53,100)
(54,data < 100)
(55,myUnion.unionSecond)
(56,myUnion)
(57,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^