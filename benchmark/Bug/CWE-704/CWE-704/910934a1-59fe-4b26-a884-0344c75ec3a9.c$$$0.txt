-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__negative_malloc_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(37,38,0)
(19,37,0)
(19,38,0)
(0,30,0)
(16,19,0)
(7,39,0)
(48,38,0)
(32,11,0)
(21,44,0)
(44,37,0)
(33,21,0)
(17,38,0)
(4,22,0)
(22,46,0)
(30,42,0)
(42,11,0)
(49,10,0)
(8,42,0)
(26,15,0)
(45,17,0)
(2,17,0)
(46,1,0)
(44,27,0)
(47,42,0)
(17,47,0)
(49,37,0)
(24,49,0)
(35,44,0)
(47,17,0)
(27,38,0)
(6,7,0)
(24,42,0)
(23,48,0)
(41,47,0)
(29,15,0)
(9,27,0)
(3,11,0)
(12,38,0)
(48,37,0)
(21,42,0)
(49,24,0)
(10,49,0)
(7,42,0)
(13,7,0)
(44,21,0)
(40,21,0)
(25,24,0)
(37,49,0)
(42,7,0)
(14,47,0)
(31,38,0)
(36,37,0)
(46,22,0)
(5,30,0)
(15,37,0)
(17,37,0)
(15,37,1)
(47,42,1)
(2,45,1)
(48,37,1)
(0,42,1)
(9,44,1)
(26,37,1)
(7,39,1)
(48,23,1)
(15,29,1)
(7,13,1)
(20,19,1)
(21,42,1)
(4,15,1)
(19,37,1)
(30,42,1)
(21,33,1)
(37,49,1)
(19,16,1)
(40,35,1)
(23,27,1)
(24,42,1)
(14,2,1)
(46,22,1)
(17,37,1)
(33,40,1)
(16,48,1)
(30,5,1)
(24,25,1)
(49,24,1)
(27,9,1)
(6,8,1)
(13,6,1)
(45,46,1)
(25,36,1)
(41,14,1)
(5,0,1)
(29,26,1)
(20,30,1)
(36,30,1)
(45,15,1)
(35,17,1)
(44,37,1)
(42,7,1)
(44,21,1)
(49,10,1)
(47,41,1)
(22,4,1)
(17,47,1)
(35,30,2)
(30,42,2)
(37,49,2)
(47,30,2)
(21,30,2)
(22,15,2)
(29,30,2)
(17,37,2)
(7,39,2)
(24,42,2)
(25,30,2)
(46,15,2)
(16,30,2)
(19,37,2)
(27,30,2)
(44,30,2)
(24,30,2)
(4,15,2)
(19,30,2)
(17,30,2)
(17,47,2)
(26,30,2)
(2,30,2)
(9,30,2)
(47,42,2)
(46,22,2)
(36,30,2)
(40,30,2)
(21,42,2)
(49,24,2)
(49,10,2)
(45,30,2)
(37,30,2)
(42,7,2)
(15,30,2)
(48,30,2)
(23,30,2)
(33,30,2)
(41,30,2)
(44,37,2)
(44,21,2)
(14,30,2)
(49,30,2)
(48,37,2)
(15,37,2)
-----------------------------------
(0,data)
(1,)
(2,'A')
(3,data)
(4,1)
(5,100)
(6,dataArray)
(7,dataArray[2])
(8,data)
(9,'\\\\0')
(10,char *)
(11,)
(12,if (dataBuffer == NULL)
(13,2)
(14,data)
(15,dataBuffer == NULL)
(16,dataBuffer)
(17,memset(dataBuffer, \'A\', data-1)
(18,\'\\\\0\')
(19,free(dataBuffer)
(20,RET)
(21,data-1)
(22,-1)
(23,dataBuffer)
(24,malloc(data)
(25,data)
(26,dataBuffer)
(27,dataBuffer[data-1] = \'\\\\0\')
(28,memset(dataBuffer, 'A', data-1)
(29,NULL)
(30,data < 100)
(31,dataBuffer)
(32,if (data < 100)
(33,1)
(34,\'A\')
(35,dataBuffer)
(36,dataBuffer)
(37,* dataBuffer = (char *)
(38,)
(39,short dataArray[])
(40,data)
(41,1)
(42,data = dataArray[2])
(43,dataBuffer[data-1] = '\\\\0')
(44,dataBuffer[data-1])
(45,dataBuffer)
(46,exit(-1)
(47,data-1)
(48,printLine(dataBuffer)
(49,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^