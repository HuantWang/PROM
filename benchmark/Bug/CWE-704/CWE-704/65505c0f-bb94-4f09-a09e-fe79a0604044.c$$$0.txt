-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_13_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a value input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
65,67
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
66,76
66,77
66,78
66,79
66,80
66,81
67,68
68,69
68,70
69,70
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
93,94
96,97
97,98
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
124,126
125,126
127,128
129,130
129,131
130,131
130,132
131,132
131,133
131,134
131,135
132,133
134,135
136,137
136,138
137,138
137,139
138,139
140,141
142,143
143,144
145,146
146,147
147,148
149,150
151,152
153,154
153,155
154,155
154,156
155,156
155,157
155,158
156,157
158,159
160,161
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
171,172
173,174
175,176
177,178
179,180
179,181
180,181
180,182
181,182
183,184
185,186
187,188
188,189
188,190
189,190
191,192
191,193
191,194
191,195
191,196
192,193
194,195
196,197
198,199
198,200
199,200
203,204
203,205
204,205
204,206
205,206
205,207
206,207
208,209
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
221,222
224,225
225,226
225,227
226,227
228,229
228,230
229,230
231,232
233,234
233,235
233,236
234,235
234,236
235,236
235,237
236,237
238,239
240,241
240,242
241,242
243,244
245,246
246,247
247,248
247,249
248,249
250,251
252,253
253,254
254,255
254,256
255,256
257,258
260,261
260,262
261,262
261,263
262,263
264,265
266,267
267,268
268,269
268,270
269,270
271,272
273,274
273,275
274,275
274,276
275,276
277,278
279,280
280,281
281,282
281,283
282,283
284,285
286,287
286,288
286,289
286,290
286,291
286,292
287,288
288,289
288,290
290,291
290,292
292,293
294,295
295,296
295,297
297,298
297,299
297,300
299,300
301,302
303,304
304,305
304,306
304,307
304,308
305,306
307,308
310,311
310,312
313,314
314,315
314,316
315,316
315,317
316,317
318,319
318,320
322,323
322,324
323,324
323,325
324,325
327,328
327,329
328,329
329,330
329,331
329,332
329,333
330,331
332,333
334,335
336,337
338,339
339,340
339,341
340,341
340,342
341,342
343,344
346,347
347,348
347,349
348,349
350,351
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,36,38,42,44,47,51,53,56,59,61,64,70,73,75,77,79,83,85,87,91,94,95,99,104,105,107,113,114,115,117,122,123,126,128,133,135,139,141,144,148,150,152,157,159,161,163,165,169,172,174,176,178,182,184,186,190,193,195,197,200,201,202,207,209,212,213,215,220,222,223,227,230,232,237,239,242,244,249,251,256,258,259,263,265,270,272,276,278,283,285,289,291,293,296,298,300,302,306,308,309,311,312,317,319,320,321,325,326,331,333,335,337,342,344,345,349,351
-----computeFrom-----
12,13
12,14
17,18
17,19
68,69
68,70
81,82
81,83
101,102
101,103
109,110
109,111
119,120
119,121
130,131
130,132
154,155
154,156
167,168
167,169
180,181
180,182
188,189
188,190
198,199
198,200
204,205
204,206
205,206
205,207
210,211
210,212
217,218
217,219
225,226
225,227
234,235
234,236
235,236
235,237
240,241
240,242
247,248
247,249
254,255
254,256
261,262
261,263
274,275
274,276
310,311
310,312
314,315
314,316
318,319
318,320
323,324
323,325
339,340
339,341
-----guardedBy-----
263,272
276,285
325,344
-----guardedByNegation-----
242,258
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_13_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_13_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_13_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(173,109,0)
(174,84,0)
(95,205,0)
(47,95,0)
(179,18,0)
(16,130,0)
(23,134,0)
(91,142,0)
(28,142,0)
(46,115,0)
(199,125,0)
(5,91,0)
(189,59,0)
(63,206,0)
(157,98,0)
(59,127,0)
(197,111,0)
(20,137,0)
(80,95,0)
(81,5,0)
(147,37,0)
(43,45,0)
(127,142,0)
(22,161,0)
(19,16,0)
(202,173,0)
(67,16,0)
(151,152,0)
(206,127,0)
(21,160,0)
(61,2,0)
(53,167,0)
(32,193,0)
(125,74,0)
(58,188,0)
(25,173,0)
(106,134,0)
(18,163,0)
(86,162,0)
(64,74,0)
(137,127,0)
(169,95,0)
(183,170,0)
(164,142,0)
(27,95,0)
(124,165,0)
(100,70,0)
(170,28,0)
(104,142,0)
(149,60,0)
(209,180,0)
(83,177,0)
(177,60,0)
(107,40,0)
(212,87,0)
(90,142,0)
(131,184,0)
(112,84,0)
(159,5,0)
(134,176,0)
(10,152,0)
(168,144,0)
(198,18,0)
(165,95,0)
(118,142,0)
(72,115,0)
(115,46,0)
(1,127,0)
(159,180,0)
(41,210,0)
(82,130,0)
(187,59,0)
(211,53,0)
(16,127,0)
(68,198,0)
(184,95,0)
(143,177,0)
(24,60,0)
(25,53,0)
(66,28,0)
(134,193,0)
(25,161,0)
(4,95,0)
(45,178,0)
(198,134,0)
(111,197,0)
(98,118,0)
(208,197,0)
(26,134,0)
(155,118,0)
(37,110,0)
(195,95,0)
(194,5,0)
(180,159,0)
(65,59,0)
(153,11,0)
(146,2,0)
(114,4,0)
(161,178,0)
(196,156,0)
(34,163,0)
(17,95,0)
(12,142,0)
(119,32,0)
(50,163,0)
(158,37,0)
(207,146,0)
(178,163,0)
(25,18,0)
(54,23,0)
(28,59,0)
(74,125,0)
(172,23,0)
(128,142,0)
(35,91,0)
(131,92,0)
(97,192,0)
(40,39,0)
(16,67,0)
(144,193,0)
(84,111,0)
(67,129,0)
(38,178,0)
(6,32,0)
(114,127,0)
(32,119,0)
(40,142,0)
(71,1,0)
(76,18,0)
(49,145,0)
(45,161,0)
(120,23,0)
(113,85,0)
(44,180,0)
(180,91,0)
(117,95,0)
(131,28,0)
(121,16,0)
(0,178,0)
(116,46,0)
(162,139,0)
(102,182,0)
(193,144,0)
(166,137,0)
(89,95,0)
(140,142,0)
(77,11,0)
(23,173,0)
(190,178,0)
(94,193,0)
(135,95,0)
(2,178,0)
(210,142,0)
(129,67,0)
(146,85,0)
(133,139,0)
(78,173,0)
(111,84,0)
(152,119,0)
(12,93,0)
(182,28,0)
(177,178,0)
(16,121,0)
(25,134,0)
(57,78,0)
(91,37,0)
(75,165,0)
(14,40,0)
(119,152,0)
(114,13,0)
(141,103,0)
(60,177,0)
(139,142,0)
(138,1,0)
(99,206,0)
(204,123,0)
(103,12,0)
(23,18,0)
(48,137,0)
(33,184,0)
(96,132,0)
(108,198,0)
(31,25,0)
(198,173,0)
(39,40,0)
(36,39,0)
(23,161,0)
(5,159,0)
(171,98,0)
(23,167,0)
(175,142,0)
(201,25,0)
(51,162,0)
(185,95,0)
(115,210,0)
(88,14,0)
(136,184,0)
(56,161,0)
(130,16,0)
(110,37,0)
(9,103,0)
(3,121,0)
(203,142,0)
(40,14,0)
(59,28,0)
(73,4,0)
(122,32,0)
(206,4,0)
(69,150,0)
(7,182,0)
(15,85,0)
(148,114,0)
(93,12,0)
(67,145,0)
(193,142,0)
(8,188,0)
(152,193,0)
(52,131,0)
(173,78,0)
(62,95,0)
(79,74,0)
(126,4,0)
(74,127,0)
(127,137,0)
(200,93,0)
(191,37,0)
(181,170,0)
(37,91,0)
(156,111,0)
(111,156,0)
(11,142,0)
(182,184,0)
(42,110,0)
(29,110,0)
(162,91,0)
(186,46,0)
(55,127,0)
(37,28,0)
(85,146,0)
(145,67,0)
(105,95,0)
(130,82,1)
(119,32,1)
(114,127,1)
(102,7,1)
(144,168,1)
(51,159,1)
(101,131,1)
(72,46,1)
(196,111,1)
(100,125,1)
(211,25,1)
(99,21,1)
(48,166,1)
(45,161,1)
(20,55,1)
(134,26,1)
(69,170,1)
(54,120,1)
(118,155,1)
(23,134,1)
(156,111,1)
(194,180,1)
(148,206,1)
(206,4,1)
(111,84,1)
(66,125,1)
(46,186,1)
(159,180,1)
(76,179,1)
(8,58,1)
(43,53,1)
(73,165,1)
(63,99,1)
(30,173,1)
(86,51,1)
(177,60,1)
(131,52,1)
(198,173,1)
(115,46,1)
(180,44,1)
(198,134,1)
(22,204,1)
(151,32,1)
(56,22,1)
(83,161,1)
(68,108,1)
(21,159,1)
(184,33,1)
(173,78,1)
(133,162,1)
(19,12,1)
(40,14,1)
(130,16,1)
(16,127,1)
(23,172,1)
(84,174,1)
(159,5,1)
(99,30,1)
(121,3,1)
(65,189,1)
(122,193,1)
(25,134,1)
(39,36,1)
(81,194,1)
(182,102,1)
(152,193,1)
(61,146,1)
(18,76,1)
(125,199,1)
(210,41,1)
(99,69,1)
(22,188,1)
(99,100,1)
(49,19,1)
(149,143,1)
(43,198,1)
(108,2,1)
(107,39,1)
(67,145,1)
(35,170,1)
(170,181,1)
(158,110,1)
(37,110,1)
(98,157,1)
(127,137,1)
(23,161,1)
(138,127,1)
(172,54,1)
(183,28,1)
(171,40,1)
(16,67,1)
(182,28,1)
(134,193,1)
(2,61,1)
(147,35,1)
(11,77,1)
(79,64,1)
(77,153,1)
(44,209,1)
(4,126,1)
(75,188,1)
(156,196,1)
(23,173,1)
(174,112,1)
(165,124,1)
(119,152,1)
(157,171,1)
(125,74,1)
(55,11,1)
(136,4,1)
(42,29,1)
(201,31,1)
(124,75,1)
(16,121,1)
(74,79,1)
(202,119,1)
(25,18,1)
(6,122,1)
(112,30,1)
(1,71,1)
(99,96,1)
(114,4,1)
(143,83,1)
(207,177,1)
(113,15,1)
(162,91,1)
(25,161,1)
(131,184,1)
(182,184,1)
(71,138,1)
(111,197,1)
(208,84,1)
(5,91,1)
(5,81,1)
(199,74,1)
(97,1,1)
(161,56,1)
(7,114,1)
(166,20,1)
(206,127,1)
(22,101,1)
(82,16,1)
(12,93,1)
(33,136,1)
(204,101,1)
(78,57,1)
(189,66,1)
(74,127,1)
(99,212,1)
(168,94,1)
(93,200,1)
(52,182,1)
(209,91,1)
(162,86,1)
(30,134,1)
(36,1,1)
(14,88,1)
(170,28,1)
(112,184,1)
(186,116,1)
(152,10,1)
(198,18,1)
(187,65,1)
(64,130,1)
(59,127,1)
(116,118,1)
(115,72,1)
(197,208,1)
(181,183,1)
(10,151,1)
(57,202,1)
(153,156,1)
(15,207,1)
(24,149,1)
(59,187,1)
(40,39,1)
(99,97,1)
(103,9,1)
(191,147,1)
(26,106,1)
(94,139,1)
(180,91,1)
(120,198,1)
(198,68,1)
(85,113,1)
(139,133,1)
(31,23,1)
(126,73,1)
(137,48,1)
(114,148,1)
(101,182,1)
(131,28,1)
(58,18,1)
(1,127,1)
(3,67,1)
(45,43,1)
(200,103,1)
(154,45,1)
(29,191,1)
(60,24,1)
(212,156,1)
(146,85,1)
(67,129,1)
(155,98,1)
(91,37,1)
(9,141,1)
(25,201,1)
(188,8,1)
(206,63,1)
(28,59,1)
(25,173,1)
(141,210,1)
(7,206,1)
(110,42,1)
(145,49,1)
(53,211,1)
(88,107,1)
(37,158,1)
(32,6,1)
(32,193,1)
(96,130,1)
(23,18,1)
(106,119,1)
(37,28,1)
(41,115,1)
(193,144,1)
(124,188,2)
(16,121,2)
(155,1,2)
(72,1,2)
(59,125,2)
(119,32,2)
(75,188,2)
(94,159,2)
(74,127,2)
(25,161,2)
(146,85,2)
(118,1,2)
(53,198,2)
(187,125,2)
(162,91,2)
(16,1,2)
(9,1,2)
(152,32,2)
(25,18,2)
(79,130,2)
(67,145,2)
(130,1,2)
(121,1,2)
(77,156,2)
(112,30,2)
(10,32,2)
(116,1,2)
(23,173,2)
(197,188,2)
(23,134,2)
(196,188,2)
(32,193,2)
(46,1,2)
(100,125,2)
(198,134,2)
(182,188,2)
(141,1,2)
(156,30,2)
(97,1,2)
(36,1,2)
(173,119,2)
(93,1,2)
(20,156,2)
(28,59,2)
(114,4,2)
(44,170,2)
(6,159,2)
(206,127,2)
(84,30,2)
(206,4,2)
(212,156,2)
(37,28,2)
(201,198,2)
(174,188,2)
(111,197,2)
(101,188,2)
(69,170,2)
(71,156,2)
(39,1,2)
(1,156,2)
(106,119,2)
(183,125,2)
(198,173,2)
(23,198,2)
(162,159,2)
(42,170,2)
(30,159,2)
(136,188,2)
(172,198,2)
(7,188,2)
(67,129,2)
(151,32,2)
(181,125,2)
(131,28,2)
(127,137,2)
(127,156,2)
(67,1,2)
(111,30,2)
(37,110,2)
(57,119,2)
(182,28,2)
(148,206,2)
(115,1,2)
(88,1,2)
(197,30,2)
(131,184,2)
(111,188,2)
(186,1,2)
(52,182,2)
(32,159,2)
(193,144,2)
(40,39,2)
(210,1,2)
(110,170,2)
(63,188,2)
(12,93,2)
(125,130,2)
(159,180,2)
(119,159,2)
(16,127,2)
(171,1,2)
(134,119,2)
(126,188,2)
(5,91,2)
(206,188,2)
(208,188,2)
(152,193,2)
(144,159,2)
(23,18,2)
(33,188,2)
(31,198,2)
(25,134,2)
(158,170,2)
(65,125,2)
(170,125,2)
(59,127,2)
(112,188,2)
(49,1,2)
(115,46,2)
(37,170,2)
(156,188,2)
(177,60,2)
(191,170,2)
(19,1,2)
(103,1,2)
(66,125,2)
(134,193,2)
(114,127,2)
(111,84,2)
(170,28,2)
(64,130,2)
(180,170,2)
(84,188,2)
(51,159,2)
(14,1,2)
(199,130,2)
(98,1,2)
(189,125,2)
(194,180,2)
(138,156,2)
(182,184,2)
(157,1,2)
(114,206,2)
(91,37,2)
(147,170,2)
(180,91,2)
(45,161,2)
(55,156,2)
(23,161,2)
(35,170,2)
(107,1,2)
(153,156,2)
(130,16,2)
(78,119,2)
(21,159,2)
(204,101,2)
(73,188,2)
(166,156,2)
(82,1,2)
(209,170,2)
(173,78,2)
(41,1,2)
(208,30,2)
(174,30,2)
(40,14,2)
(122,159,2)
(145,1,2)
(159,170,2)
(1,127,2)
(156,111,2)
(4,188,2)
(16,67,2)
(200,1,2)
(12,1,2)
(74,130,2)
(25,198,2)
(3,1,2)
(119,152,2)
(54,198,2)
(40,1,2)
(159,5,2)
(102,188,2)
(133,159,2)
(11,156,2)
(91,170,2)
(168,159,2)
(26,119,2)
(99,188,2)
(198,18,2)
(193,159,2)
(86,159,2)
(165,188,2)
(81,180,2)
(96,130,2)
(48,156,2)
(137,156,2)
(202,119,2)
(131,182,2)
(5,180,2)
(139,159,2)
(25,173,2)
(184,188,2)
(28,125,2)
(196,30,2)
(120,198,2)
(211,198,2)
(125,74,2)
(29,170,2)
-----------------------------------
(0,source)
(1,listenSocket == INVALID_SOCKET)
(2,source[100-1] = \\\'\\\\0\\\')
(3,service)
(4,listenSocket = INVALID_SOCKET)
(5,recvResult == 0)
(6,SHRT_MAX)
(7,acceptSocket)
(8,5)
(9,sin_port)
(10,SHRT_MIN)
(11,wsaDataInit = 1)
(12,service.sin_port = htons(TCP_PORT)
(13,)
(14,sizeof(service)
(15,100)
(16,bind(listenSocket, (struct sockaddr*)
(17,acceptSocket)
(18,data = 0)
(19,listenSocket)
(20,AF_INET)
(21,break;)
(22,dest)
(23,strncpy(dest, source, data)
(24,1)
(25,dest[data])
(26,tempInt)
(27,wsaDataInit)
(28,acceptSocket = accept(listenSocket, NULL, NULL)
(29,CHAR_ARRAY_SIZE)
(30,0)
(31,dest)
(32,tempInt > SHRT_MAX)
(33,INVALID_SOCKET)
(34,if(GLOBAL_CONST_FIVE==5)
(35,recvResult)
(36,service)
(37,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(38,if (data < 100)
(39,&service)
(40,memset(&service, 0, sizeof(service)
(41,INADDR_ANY)
(42,1)
(43,dest)
(44,SOCKET_ERROR)
(45,printLine(dest)
(46,service.sin_addr)
(47,inputBuffer)
(48,IPPROTO_TCP)
(49,service)
(50,data)
(51,inputBuffer)
(52,acceptSocket)
(53,dest[data] = \\\'\\\\0\\\')
(54,source)
(55,listenSocket)
(56,"")
(57,1)
(58,GLOBAL_CONST_FIVE)
(59,accept(listenSocket, NULL, NULL)
(60,100-1)
(61,\\\'\\\\0\\\')
(62,if (listenSocket != INVALID_SOCKET)
(63,INVALID_SOCKET)
(64,listenSocket)
(65,NULL)
(66,acceptSocket)
(67,(struct sockaddr*)
(68,100)
(69,break;)
(70,)
(71,INVALID_SOCKET)
(72,s_addr)
(73,listenSocket)
(74,listen(listenSocket, LISTEN_BACKLOG)
(75,wsaDataInit)
(76,0)
(77,1)
(78,-1)
(79,LISTEN_BACKLOG)
(80,do)
(81,0)
(82,SOCKET_ERROR)
(83,source)
(84,MAKEWORD(2,2)
(85,100-1)
(86,recvResult)
(87,)
(88,service)
(89,recvResult)
(90,if (recvResult == SOCKET_ERROR || recvResult == 0)
(91,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(92,)
(93,htons(TCP_PORT)
(94,tempInt)
(95,)
(96,break;)
(97,break;)
(98,service.sin_family)
(99,listenSocket)
(100,break;)
(101,wsaDataInit)
(102,INVALID_SOCKET)
(103,service.sin_port)
(104,if (acceptSocket == SOCKET_ERROR)
(105,tempInt)
(106,data)
(107,0)
(108,data)
(109,)
(110,CHAR_ARRAY_SIZE - 1)
(111,WSAStartup(MAKEWORD(2,2)
(112,2)
(113,1)
(114,CLOSE_SOCKET(listenSocket)
(115,service.sin_addr.s_addr)
(116,service)
(117,listenSocket)
(118,service.sin_family = AF_INET)
(119,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(120,dest)
(121,sizeof(service)
(122,tempInt)
(123,)
(124,0)
(125,listen(listenSocket, LISTEN_BACKLOG)
(126,INVALID_SOCKET)
(127,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(128,if (bind(listenSocket, (struct sockaddr*)
(129,struct sockaddr*)
(130,bind(listenSocket, (struct sockaddr*)
(131,CLOSE_SOCKET(acceptSocket)
(132,)
(133,\\\'\\\\0\\\')
(134,data = tempInt)
(135,wsaData)
(136,acceptSocket)
(137,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(138,listenSocket)
(139,inputBuffer[recvResult] = \\\'\\\\0\\\')
(140,if (listenSocket == INVALID_SOCKET)
(141,service)
(142,)
(143,\\\'A\\\')
(144,atoi(inputBuffer)
(145,&service)
(146,source[100-1])
(147,acceptSocket)
(148,listenSocket)
(149,100)
(150,)
(151,tempInt)
(152,tempInt < SHRT_MIN)
(153,wsaDataInit)
(154,RET)
(155,AF_INET)
(156,WSAStartup(MAKEWORD(2,2)
(157,sin_family)
(158,0)
(159,recvResult == SOCKET_ERROR || recvResult == 0)
(160,)
(161,dest[100] = "")
(162,inputBuffer[recvResult])
(163,)
(164,if (listen(listenSocket, LISTEN_BACKLOG)
(165,wsaDataInit = 0)
(166,SOCK_STREAM)
(167,)
(168,inputBuffer)
(169,if (wsaDataInit)
(170,acceptSocket == SOCKET_ERROR)
(171,service)
(172,data)
(173,data = -1)
(174,2)
(175,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(176,)
(177,memset(source, \\\'A\\\', 100-1)
(178,)
(179,data)
(180,recvResult == SOCKET_ERROR)
(181,SOCKET_ERROR)
(182,acceptSocket != INVALID_SOCKET)
(183,acceptSocket)
(184,acceptSocket = INVALID_SOCKET)
(185,if (acceptSocket != INVALID_SOCKET)
(186,sin_addr)
(187,NULL)
(188,GLOBAL_CONST_FIVE==5)
(189,listenSocket)
(190,dest)
(191,inputBuffer)
(192,)
(193,tempInt = atoi(inputBuffer)
(194,recvResult)
(195,service)
(196,NO_ERROR)
(197,&wsaData)
(198,data < 100)
(199,SOCKET_ERROR)
(200,TCP_PORT)
(201,data)
(202,data)
(203,if (WSAStartup(MAKEWORD(2,2)
(204,WSACleanup()
(205,)
(206,listenSocket != INVALID_SOCKET)
(207,source)
(208,wsaData)
(209,recvResult)
(210,service.sin_addr.s_addr = INADDR_ANY)
(211,\\\'\\\\0\\\')
(212,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^