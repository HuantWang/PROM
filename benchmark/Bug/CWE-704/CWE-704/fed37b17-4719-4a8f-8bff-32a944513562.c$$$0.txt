-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
44,50
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,42,43,47,49,50,54,56,59,61,65,67,72,74,78,80,81,84,85,90,93,94,95,99,101,105,107
-----computeFrom-----
12,13
12,14
40,41
40,42
63,64
63,65
82,83
82,84
87,88
87,89
91,92
91,93
-----guardedBy-----
42,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_15_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(49,28,0)
(19,4,0)
(36,42,0)
(20,26,0)
(3,22,0)
(11,19,0)
(36,26,0)
(35,4,0)
(42,36,0)
(32,19,0)
(51,26,0)
(30,19,0)
(38,3,0)
(23,36,0)
(16,15,0)
(10,26,0)
(46,26,0)
(27,54,0)
(29,40,0)
(55,26,0)
(44,22,0)
(6,11,0)
(12,27,0)
(7,9,0)
(0,15,0)
(27,3,0)
(15,11,0)
(38,9,0)
(39,36,0)
(42,19,0)
(48,38,0)
(3,38,0)
(54,22,0)
(27,30,0)
(41,19,0)
(9,19,0)
(11,15,0)
(8,45,0)
(50,22,0)
(25,3,0)
(47,21,0)
(56,21,0)
(8,28,0)
(43,52,0)
(15,3,0)
(14,4,0)
(30,27,0)
(52,19,0)
(24,42,0)
(34,11,0)
(9,38,0)
(40,3,0)
(31,22,0)
(21,3,0)
(18,54,0)
(33,30,0)
(44,3,0)
(5,10,0)
(15,22,0)
(28,8,0)
(1,44,0)
(53,30,0)
(40,22,0)
(2,52,0)
(38,48,0)
(37,4,0)
(10,5,1)
(30,53,1)
(24,23,1)
(17,19,1)
(16,0,1)
(21,56,1)
(55,10,1)
(20,36,1)
(5,17,1)
(7,25,1)
(3,38,1)
(15,11,1)
(18,27,1)
(40,29,1)
(2,43,1)
(9,19,1)
(44,3,1)
(49,21,1)
(1,40,1)
(13,52,1)
(39,17,1)
(25,52,1)
(28,49,1)
(33,12,1)
(44,1,1)
(32,41,1)
(52,2,1)
(13,44,1)
(11,6,1)
(19,32,1)
(29,54,1)
(27,3,1)
(56,47,1)
(47,3,1)
(15,3,1)
(23,39,1)
(54,18,1)
(52,19,1)
(43,20,1)
(0,21,1)
(40,3,1)
(38,9,1)
(38,48,1)
(34,16,1)
(6,34,1)
(9,7,1)
(11,19,1)
(0,8,1)
(8,28,1)
(43,55,1)
(42,24,1)
(27,30,1)
(30,19,1)
(21,3,1)
(36,42,1)
(12,15,1)
(53,33,1)
(42,19,1)
(36,42,2)
(36,17,2)
(44,52,2)
(49,21,2)
(47,52,2)
(38,48,2)
(21,52,2)
(38,52,2)
(15,3,2)
(3,38,2)
(42,19,2)
(23,17,2)
(44,3,2)
(9,19,2)
(39,17,2)
(53,52,2)
(6,52,2)
(42,17,2)
(12,52,2)
(9,52,2)
(30,19,2)
(15,11,2)
(29,52,2)
(7,52,2)
(5,17,2)
(33,52,2)
(24,17,2)
(11,19,2)
(16,52,2)
(38,9,2)
(27,3,2)
(18,52,2)
(40,52,2)
(8,28,2)
(40,3,2)
(8,21,2)
(10,17,2)
(30,52,2)
(54,52,2)
(56,52,2)
(52,19,2)
(15,52,2)
(3,52,2)
(20,17,2)
(1,52,2)
(55,17,2)
(28,21,2)
(25,52,2)
(11,52,2)
(34,52,2)
(27,30,2)
(27,52,2)
(21,3,2)
(0,52,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer)
(2,100)
(3,* dataBuffer = (char *)
(4,)
(5,"Benign, fixed string")
(6,1)
(7,data)
(8,exit(-1)
(9,malloc(data)
(10,printLine("Benign, fixed string")
(11,data-1)
(12,dataBuffer)
(13,RET)
(14,if (data < 100)
(15,memset(dataBuffer, \\\'A\\\', data-1)
(16,\\\'A\\\')
(17,6)
(18,\\\'\\\\0\\\')
(19,data = 0)
(20,break;)
(21,dataBuffer == NULL)
(22,)
(23,"%hd")
(24,data)
(25,dataBuffer)
(26,)
(27,dataBuffer[data-1])
(28,-1)
(29,dataBuffer)
(30,data-1)
(31,dataBuffer)
(32,0)
(33,data)
(34,data)
(35,switch(6)
(36,fscanf (stdin, "%hd", &data)
(37,data)
(38,(char *)
(39,stdin)
(40,printLine(dataBuffer)
(41,data)
(42,&data)
(43,data)
(44,free(dataBuffer)
(45,)
(46,case 6:)
(47,dataBuffer)
(48,char *)
(49,1)
(50,if (dataBuffer == NULL)
(51,default:)
(52,data < 100)
(53,1)
(54,dataBuffer[data-1] = \\\'\\\\0\\\')
(55,break;)
(56,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^