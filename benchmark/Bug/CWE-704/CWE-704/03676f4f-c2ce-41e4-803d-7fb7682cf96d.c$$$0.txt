-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(5,21,0)
(1,13,0)
(11,17,0)
(2,4,0)
(24,5,0)
(22,42,0)
(39,9,0)
(23,40,0)
(8,38,0)
(40,13,0)
(25,36,0)
(43,30,0)
(28,38,0)
(30,9,0)
(44,0,0)
(26,36,0)
(15,4,0)
(21,5,0)
(9,30,0)
(29,6,0)
(17,30,0)
(17,13,0)
(27,35,0)
(16,15,0)
(30,17,0)
(32,4,0)
(30,43,0)
(19,13,0)
(21,34,0)
(35,17,0)
(0,17,0)
(42,17,0)
(33,19,0)
(7,0,0)
(41,6,0)
(35,1,0)
(14,1,0)
(12,15,0)
(31,13,0)
(36,19,0)
(9,15,0)
(38,35,0)
(19,17,0)
(36,15,0)
(45,13,0)
(35,38,0)
(3,19,0)
(40,17,0)
(6,15,0)
(42,13,0)
(38,15,0)
(19,36,0)
(29,15,1)
(8,27,1)
(38,15,1)
(33,0,1)
(3,33,1)
(17,30,1)
(23,1,1)
(35,38,1)
(41,29,1)
(38,28,1)
(26,3,1)
(14,35,1)
(7,44,1)
(36,15,1)
(33,21,1)
(6,41,1)
(44,17,1)
(6,15,1)
(0,7,1)
(15,16,1)
(24,0,1)
(30,43,1)
(9,39,1)
(16,12,1)
(39,11,1)
(40,17,1)
(19,17,1)
(40,23,1)
(10,6,1)
(22,40,1)
(11,6,1)
(25,26,1)
(42,22,1)
(10,42,1)
(27,19,1)
(1,14,1)
(9,15,1)
(5,24,1)
(21,5,1)
(30,9,1)
(36,25,1)
(19,36,1)
(42,17,1)
(0,17,1)
(28,8,1)
(35,17,1)
(44,6,2)
(0,6,2)
(36,15,2)
(38,15,2)
(11,6,2)
(6,15,2)
(1,6,2)
(33,6,2)
(42,17,2)
(19,17,2)
(9,6,2)
(35,38,2)
(30,6,2)
(3,6,2)
(22,6,2)
(5,0,2)
(28,6,2)
(21,5,2)
(30,43,2)
(0,17,2)
(25,6,2)
(8,6,2)
(27,6,2)
(42,6,2)
(19,36,2)
(26,6,2)
(35,6,2)
(17,30,2)
(24,0,2)
(39,6,2)
(17,6,2)
(23,6,2)
(21,0,2)
(35,17,2)
(7,6,2)
(40,17,2)
(14,6,2)
(19,6,2)
(38,6,2)
(40,6,2)
(9,15,2)
(30,9,2)
(36,6,2)
-----------------------------------
(0,dataBuffer == NULL)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,if (data < 100)
(3,'A')
(4,)
(5,-1)
(6,data < 100)
(7,NULL)
(8,data)
(9,malloc(data)
(10,RET)
(11,dataBuffer)
(12,data)
(13,)
(14,\'\\\\0\')
(15,data = CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData)
(16,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_45_badData)
(17,* dataBuffer = (char *)
(18,\'A\')
(19,memset(dataBuffer, \'A\', data-1)
(20,memset(dataBuffer, 'A', data-1)
(21,exit(-1)
(22,dataBuffer)
(23,dataBuffer)
(24,1)
(25,1)
(26,data)
(27,dataBuffer)
(28,1)
(29,data)
(30,(char *)
(31,dataBuffer)
(32,data)
(33,dataBuffer)
(34,)
(35,dataBuffer[data-1])
(36,data-1)
(37,'\\\\0')
(38,data-1)
(39,data)
(40,printLine(dataBuffer)
(41,100)
(42,free(dataBuffer)
(43,char *)
(44,dataBuffer)
(45,if (dataBuffer == NULL)
(46,dataBuffer[data-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^