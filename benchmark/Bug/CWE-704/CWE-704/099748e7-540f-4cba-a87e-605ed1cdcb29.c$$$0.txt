-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66_bad()
{
    short data;
    short dataArray[5];
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            /* FLAW: Use a value input from the network */
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
24,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
66,68
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
67,76
67,77
67,78
67,79
67,80
67,81
67,82
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
94,95
97,98
98,99
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
117,118
119,120
120,121
120,122
121,122
121,123
122,123
125,126
125,127
126,127
128,129
130,131
130,132
131,132
131,133
132,133
132,134
132,135
132,136
133,134
135,136
137,138
137,139
138,139
138,140
139,140
141,142
143,144
144,145
146,147
147,148
148,149
150,151
152,153
154,155
154,156
155,156
155,157
156,157
156,158
156,159
157,158
159,160
161,162
163,164
165,166
167,168
168,169
168,170
169,170
171,172
171,173
171,174
171,175
172,173
174,175
176,177
178,179
180,181
180,182
181,182
181,183
182,183
184,185
186,187
188,189
189,190
189,191
190,191
192,193
192,194
192,195
192,196
192,197
193,194
195,196
197,198
199,200
199,201
200,201
204,205
204,206
205,206
205,207
206,207
206,208
207,208
209,210
211,212
211,213
212,213
215,216
217,218
218,219
218,220
219,220
219,221
220,221
222,223
225,226
226,227
226,228
227,228
229,230
229,231
230,231
232,233
234,235
234,236
234,237
235,236
235,237
236,237
236,238
237,238
239,240
241,242
241,243
242,243
244,245
246,247
247,248
248,249
248,250
249,250
251,252
253,254
254,255
255,256
255,257
256,257
258,259
261,262
261,263
262,263
262,264
263,264
265,266
267,268
268,269
269,270
269,271
270,271
272,273
274,275
274,276
275,276
275,277
276,277
278,279
280,281
281,282
282,283
282,284
283,284
285,286
287,288
288,289
288,290
289,290
289,291
290,291
293,294
295,296
296,297
296,298
297,298
299,300
-----nextToken-----
2,4,8,10,13,15,17,21,22,26,28,31,33,37,39,43,45,48,52,54,57,60,62,65,71,74,76,78,80,84,86,88,92,95,96,100,105,106,108,114,115,116,118,123,124,127,129,134,136,140,142,145,149,151,153,158,160,162,164,166,170,173,175,177,179,183,185,187,191,194,196,198,201,202,203,208,210,213,214,216,221,223,224,228,231,233,238,240,243,245,250,252,257,259,260,264,266,271,273,277,279,284,286,291,292,294,298,300
-----computeFrom-----
19,20
19,21
69,70
69,71
82,83
82,84
102,103
102,104
110,111
110,112
120,121
120,122
131,132
131,133
155,156
155,157
168,169
168,170
181,182
181,183
189,190
189,191
199,200
199,201
205,206
205,207
206,207
206,208
211,212
211,213
218,219
218,220
226,227
226,228
235,236
235,237
236,237
236,238
241,242
241,243
248,249
248,250
255,256
255,257
262,263
262,264
275,276
275,277
288,289
288,290
-----guardedBy-----
264,273
277,286
-----guardedByNegation-----
243,259
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66_bad(){    short data;    short dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray);}
void
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66_bad
{    short data;    short dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray);}
short data;
short data;
short
data
data
short dataArray[5];
short dataArray[5];
short
dataArray[5]
dataArray
[5]
5
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            /* FLAW: Use a value input from the network */            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray);
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray)
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink
CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink
dataArray
dataArray
-----joern-----
(119,177,0)
(127,25,0)
(75,114,0)
(20,114,0)
(162,167,0)
(56,53,0)
(89,39,0)
(169,68,0)
(141,74,0)
(150,66,0)
(171,107,0)
(22,121,0)
(1,146,0)
(133,105,0)
(45,85,0)
(7,80,0)
(2,42,0)
(42,25,0)
(168,68,0)
(16,66,0)
(157,10,0)
(118,160,0)
(17,121,0)
(114,164,0)
(143,182,0)
(176,59,0)
(5,39,0)
(99,68,0)
(152,68,0)
(56,77,0)
(113,121,0)
(166,114,0)
(179,85,0)
(67,40,0)
(153,178,0)
(139,114,0)
(82,77,0)
(143,160,0)
(131,87,0)
(62,99,0)
(99,181,0)
(147,85,0)
(14,38,0)
(102,38,0)
(182,121,0)
(55,152,0)
(25,121,0)
(22,46,0)
(56,63,0)
(136,168,0)
(87,100,0)
(60,146,0)
(108,58,0)
(35,127,0)
(126,114,0)
(135,84,0)
(172,42,0)
(32,4,0)
(51,112,0)
(42,166,0)
(85,68,0)
(4,32,0)
(148,121,0)
(43,21,0)
(30,166,0)
(79,152,0)
(27,107,0)
(57,152,0)
(58,61,0)
(100,107,0)
(145,25,0)
(125,139,0)
(174,40,0)
(111,167,0)
(85,147,0)
(88,114,0)
(38,114,0)
(40,68,0)
(39,94,0)
(116,19,0)
(70,84,0)
(98,106,0)
(123,114,0)
(89,84,0)
(112,4,0)
(64,98,0)
(26,115,0)
(8,43,0)
(9,121,0)
(167,68,0)
(78,114,0)
(46,22,0)
(91,80,0)
(140,17,0)
(99,38,0)
(3,114,0)
(71,119,0)
(115,106,0)
(40,25,0)
(89,164,0)
(106,115,0)
(122,72,0)
(137,95,0)
(129,160,0)
(161,114,0)
(128,46,0)
(117,164,0)
(175,151,0)
(61,121,0)
(96,31,0)
(6,151,0)
(68,152,0)
(158,114,0)
(178,80,0)
(12,58,0)
(138,40,0)
(109,121,0)
(124,95,0)
(76,164,0)
(68,121,0)
(180,76,0)
(104,121,0)
(119,71,0)
(100,87,0)
(80,121,0)
(107,22,0)
(84,164,0)
(41,113,0)
(132,143,0)
(15,149,0)
(124,121,0)
(11,119,0)
(101,71,0)
(44,114,0)
(80,178,0)
(37,115,0)
(119,4,0)
(49,121,0)
(34,9,0)
(66,146,0)
(151,9,0)
(73,114,0)
(103,89,0)
(156,166,0)
(4,112,0)
(81,39,0)
(86,13,0)
(54,121,0)
(155,147,0)
(23,139,0)
(25,40,0)
(146,66,0)
(43,25,0)
(130,87,0)
(36,121,0)
(107,100,0)
(177,119,0)
(144,77,0)
(47,133,0)
(18,164,0)
(43,166,0)
(133,149,0)
(98,61,0)
(52,7,0)
(120,17,0)
(149,133,0)
(48,127,0)
(83,61,0)
(170,177,0)
(90,114,0)
(134,53,0)
(97,168,0)
(154,121,0)
(10,89,0)
(80,7,0)
(24,182,0)
(33,63,0)
(58,113,0)
(165,98,0)
(53,56,0)
(87,22,0)
(72,124,0)
(92,50,0)
(160,143,0)
(95,124,0)
(39,22,0)
(61,146,0)
(119,68,0)
(28,72,0)
(77,56,0)
(142,22,0)
(146,61,0)
(93,10,0)
(29,110,0)
(89,133,0)
(167,38,0)
(63,56,0)
(115,61,0)
(4,119,0)
(65,146,0)
(146,25,0)
(106,98,0)
(134,56,1)
(100,107,1)
(43,25,1)
(80,7,1)
(147,155,1)
(171,27,1)
(89,133,1)
(122,28,1)
(1,83,1)
(48,25,1)
(0,133,1)
(82,144,1)
(141,163,1)
(143,160,1)
(108,106,1)
(0,39,1)
(162,92,1)
(106,98,1)
(150,65,1)
(76,180,1)
(87,22,1)
(157,163,1)
(168,97,1)
(43,8,1)
(119,177,1)
(133,149,1)
(58,61,1)
(152,57,1)
(111,162,1)
(127,25,1)
(146,25,1)
(172,2,1)
(113,41,1)
(70,135,1)
(51,11,1)
(42,25,1)
(85,179,1)
(146,66,1)
(39,81,1)
(162,116,1)
(29,168,1)
(16,150,1)
(125,84,1)
(169,17,1)
(96,71,1)
(97,136,1)
(168,68,1)
(89,84,1)
(89,103,1)
(162,176,1)
(149,15,1)
(77,82,1)
(9,34,1)
(34,151,1)
(46,128,1)
(53,134,1)
(27,87,1)
(56,77,1)
(62,167,1)
(112,51,1)
(138,67,1)
(98,165,1)
(14,102,1)
(99,38,1)
(102,139,1)
(131,22,1)
(180,89,1)
(119,4,1)
(162,29,1)
(28,182,1)
(89,39,1)
(163,43,1)
(42,172,1)
(170,4,1)
(4,112,1)
(106,115,1)
(85,68,1)
(130,131,1)
(53,56,1)
(91,7,1)
(128,142,1)
(72,122,1)
(47,100,1)
(182,24,1)
(42,166,1)
(151,175,1)
(22,46,1)
(10,93,1)
(64,61,1)
(178,153,1)
(162,86,1)
(4,32,1)
(115,26,1)
(30,38,1)
(2,167,1)
(60,66,1)
(144,0,1)
(17,120,1)
(6,80,1)
(175,6,1)
(98,61,1)
(79,169,1)
(157,141,1)
(61,146,1)
(167,68,1)
(139,23,1)
(179,45,1)
(142,113,1)
(24,143,1)
(40,68,1)
(155,85,1)
(132,160,1)
(95,137,1)
(147,85,1)
(174,138,1)
(52,168,1)
(83,127,1)
(69,76,1)
(55,79,1)
(163,42,1)
(2,99,1)
(124,95,1)
(118,129,1)
(81,5,1)
(136,68,1)
(99,62,1)
(176,106,1)
(7,52,1)
(93,157,1)
(12,108,1)
(67,145,1)
(38,14,1)
(43,166,1)
(11,124,1)
(68,152,1)
(99,68,1)
(156,30,1)
(87,130,1)
(35,48,1)
(167,111,1)
(63,33,1)
(140,53,1)
(119,68,1)
(103,10,1)
(40,174,1)
(15,47,1)
(120,140,1)
(129,9,1)
(107,22,1)
(45,71,1)
(167,38,1)
(144,166,1)
(25,40,1)
(86,127,1)
(71,119,1)
(177,170,1)
(39,22,1)
(33,77,1)
(23,125,1)
(100,87,1)
(56,63,1)
(5,100,1)
(166,156,1)
(80,178,1)
(153,91,1)
(165,64,1)
(92,147,1)
(143,132,1)
(66,16,1)
(84,70,1)
(146,60,1)
(160,118,1)
(65,1,1)
(162,0,1)
(107,171,1)
(37,98,1)
(116,53,1)
(41,58,1)
(127,35,1)
(137,72,1)
(115,61,1)
(145,147,1)
(58,12,1)
(57,55,1)
(162,96,1)
(8,42,1)
(26,37,1)
(71,101,1)
(101,119,1)
(167,38,2)
(7,168,2)
(45,71,2)
(167,68,2)
(146,25,2)
(16,127,2)
(108,106,2)
(60,127,2)
(155,71,2)
(171,87,2)
(100,106,2)
(52,168,2)
(106,98,2)
(119,68,2)
(33,0,2)
(80,178,2)
(56,63,2)
(89,133,2)
(143,160,2)
(5,100,2)
(120,53,2)
(151,168,2)
(85,68,2)
(68,152,2)
(100,87,2)
(115,61,2)
(99,167,2)
(25,147,2)
(116,53,2)
(51,168,2)
(107,22,2)
(138,147,2)
(141,163,2)
(72,168,2)
(68,53,2)
(99,38,2)
(6,168,2)
(153,168,2)
(61,146,2)
(4,32,2)
(80,168,2)
(48,147,2)
(8,42,2)
(170,168,2)
(57,53,2)
(146,66,2)
(140,53,2)
(119,4,2)
(46,106,2)
(89,84,2)
(79,53,2)
(144,0,2)
(98,127,2)
(119,177,2)
(165,127,2)
(15,100,2)
(91,168,2)
(17,53,2)
(142,106,2)
(118,168,2)
(53,0,2)
(26,98,2)
(40,68,2)
(87,106,2)
(12,106,2)
(29,168,2)
(99,68,2)
(178,168,2)
(81,100,2)
(182,168,2)
(41,106,2)
(179,71,2)
(4,168,2)
(89,39,2)
(43,42,2)
(107,87,2)
(87,22,2)
(35,147,2)
(134,0,2)
(92,147,2)
(100,107,2)
(71,119,2)
(127,147,2)
(11,168,2)
(101,168,2)
(0,106,2)
(67,147,2)
(56,77,2)
(136,53,2)
(86,127,2)
(42,166,2)
(96,71,2)
(34,168,2)
(77,0,2)
(175,168,2)
(62,167,2)
(150,127,2)
(40,147,2)
(43,166,2)
(115,98,2)
(177,168,2)
(146,127,2)
(122,168,2)
(64,127,2)
(145,147,2)
(160,168,2)
(71,168,2)
(106,115,2)
(55,53,2)
(130,106,2)
(56,0,2)
(61,127,2)
(47,100,2)
(137,168,2)
(106,127,2)
(176,106,2)
(39,100,2)
(80,7,2)
(98,61,2)
(174,147,2)
(127,25,2)
(24,168,2)
(147,85,2)
(82,0,2)
(85,71,2)
(22,46,2)
(42,25,2)
(63,0,2)
(39,22,2)
(133,149,2)
(168,53,2)
(95,168,2)
(43,25,2)
(97,53,2)
(25,40,2)
(66,127,2)
(65,127,2)
(129,168,2)
(149,100,2)
(147,71,2)
(152,53,2)
(128,106,2)
(27,87,2)
(28,168,2)
(1,127,2)
(124,168,2)
(131,106,2)
(9,168,2)
(4,112,2)
(169,53,2)
(58,106,2)
(53,56,2)
(113,106,2)
(112,168,2)
(37,98,2)
(132,168,2)
(124,95,2)
(119,168,2)
(143,168,2)
(168,68,2)
(58,61,2)
(83,127,2)
(22,106,2)
(133,100,2)
-----------------------------------
(0,0)
(1,acceptSocket)
(2,acceptSocket)
(3,if (listenSocket != INVALID_SOCKET)
(4,(struct sockaddr*)
(5,data)
(6,service)
(7,&service)
(8,acceptSocket)
(9,service.sin_family = AF_INET)
(10,dataArray[2])
(11,listenSocket)
(12,recvResult)
(13,)
(14,INVALID_SOCKET)
(15,1)
(16,1)
(17,wsaDataInit = 1)
(18,data)
(19,)
(20,acceptSocket)
(21,)
(22,tempInt = atoi(inputBuffer)
(23,0)
(24,INADDR_ANY)
(25,acceptSocket = accept(listenSocket, NULL, NULL)
(26,0)
(27,tempInt)
(28,service)
(29,break;)
(30,acceptSocket)
(31,)
(32,struct sockaddr*)
(33,wsaData)
(34,AF_INET)
(35,SOCKET_ERROR)
(36,if (recvResult == SOCKET_ERROR || recvResult == 0)
(37,recvResult)
(38,listenSocket = INVALID_SOCKET)
(39,data = tempInt)
(40,accept(listenSocket, NULL, NULL)
(41,\'\\\\0\')
(42,acceptSocket != INVALID_SOCKET)
(43,CLOSE_SOCKET(acceptSocket)
(44,listenSocket)
(45,listenSocket)
(46,atoi(inputBuffer)
(47,data)
(48,acceptSocket)
(49,if (acceptSocket == SOCKET_ERROR)
(50,)
(51,service)
(52,service)
(53,WSAStartup(MAKEWORD(2,2)
(54,if (listenSocket == INVALID_SOCKET)
(55,SOCK_STREAM)
(56,WSAStartup(MAKEWORD(2,2)
(57,IPPROTO_TCP)
(58,inputBuffer[recvResult])
(59,)
(60,0)
(61,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(62,listenSocket)
(63,&wsaData)
(64,recvResult)
(65,inputBuffer)
(66,CHAR_ARRAY_SIZE - 1)
(67,listenSocket)
(68,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(69,RET)
(70,0)
(71,bind(listenSocket, (struct sockaddr*)
(72,service.sin_port)
(73,wsaData)
(74,)
(75,wsaDataInit)
(76,CWE194_Unexpected_Sign_Extension__listen_socket_memcpy_66b_badSink(dataArray)
(77,MAKEWORD(2,2)
(78,inputBuffer)
(79,AF_INET)
(80,memset(&service, 0, sizeof(service)
(81,tempInt)
(82,2)
(83,recvResult)
(84,data = 0)
(85,listen(listenSocket, LISTEN_BACKLOG)
(86,break;)
(87,tempInt > SHRT_MAX)
(88,if (acceptSocket != INVALID_SOCKET)
(89,dataArray[2] = data)
(90,if (wsaDataInit)
(91,0)
(92,break;)
(93,2)
(94,)
(95,htons(TCP_PORT)
(96,break;)
(97,INVALID_SOCKET)
(98,recvResult == SOCKET_ERROR)
(99,CLOSE_SOCKET(listenSocket)
(100,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(101,SOCKET_ERROR)
(102,listenSocket)
(103,data)
(104,if (WSAStartup(MAKEWORD(2,2)
(105,)
(106,recvResult == SOCKET_ERROR || recvResult == 0)
(107,tempInt < SHRT_MIN)
(108,inputBuffer)
(109,if (listen(listenSocket, LISTEN_BACKLOG)
(110,)
(111,INVALID_SOCKET)
(112,&service)
(113,inputBuffer[recvResult] = \'\\\\0\')
(114,)
(115,recvResult == 0)
(116,break;)
(117,dataArray)
(118,sin_addr)
(119,bind(listenSocket, (struct sockaddr*)
(120,1)
(121,)
(122,sin_port)
(123,service)
(124,service.sin_port = htons(TCP_PORT)
(125,wsaDataInit)
(126,do)
(127,acceptSocket == SOCKET_ERROR)
(128,inputBuffer)
(129,service)
(130,SHRT_MAX)
(131,tempInt)
(132,s_addr)
(133,data = -1)
(134,NO_ERROR)
(135,data)
(136,listenSocket)
(137,TCP_PORT)
(138,NULL)
(139,wsaDataInit = 0)
(140,wsaDataInit)
(141,WSACleanup()
(142,tempInt)
(143,service.sin_addr.s_addr)
(144,2)
(145,acceptSocket)
(146,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(147,listen(listenSocket, LISTEN_BACKLOG)
(148,if (bind(listenSocket, (struct sockaddr*)
(149,-1)
(150,CHAR_ARRAY_SIZE)
(151,service.sin_family)
(152,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(153,service)
(154,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(155,SOCKET_ERROR)
(156,INVALID_SOCKET)
(157,dataArray)
(158,tempInt)
(159,inputBuffer[recvResult] = '\\\\0')
(160,service.sin_addr)
(161,recvResult)
(162,listenSocket)
(163,wsaDataInit)
(164,)
(165,SOCKET_ERROR)
(166,acceptSocket = INVALID_SOCKET)
(167,listenSocket != INVALID_SOCKET)
(168,listenSocket == INVALID_SOCKET)
(169,listenSocket)
(170,service)
(171,SHRT_MIN)
(172,INVALID_SOCKET)
(173,'\\\\0')
(174,NULL)
(175,sin_family)
(176,break;)
(177,sizeof(service)
(178,sizeof(service)
(179,LISTEN_BACKLOG)
(180,dataArray)
(181,)
(182,service.sin_addr.s_addr = INADDR_ANY)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^