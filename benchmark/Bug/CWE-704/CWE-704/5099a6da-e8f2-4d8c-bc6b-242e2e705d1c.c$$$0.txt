-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68b_badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68b_badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68b_badSink()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68b_badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(3,45,0)
(25,12,0)
(22,39,0)
(2,15,0)
(36,17,0)
(13,20,0)
(11,39,0)
(24,26,0)
(30,31,0)
(7,15,0)
(6,17,0)
(1,9,0)
(12,39,0)
(29,39,0)
(45,20,0)
(30,26,0)
(44,15,0)
(2,9,0)
(19,12,0)
(34,5,0)
(14,1,0)
(32,2,0)
(15,9,0)
(46,36,0)
(10,29,0)
(28,5,0)
(45,3,0)
(1,15,0)
(37,9,0)
(17,9,0)
(15,45,0)
(40,4,0)
(12,36,0)
(39,5,0)
(35,4,0)
(42,41,0)
(41,15,0)
(45,15,0)
(20,39,0)
(27,44,0)
(20,45,0)
(26,30,0)
(21,1,0)
(1,29,0)
(4,39,0)
(41,9,0)
(38,44,0)
(36,12,0)
(29,1,0)
(0,29,0)
(8,9,0)
(36,15,0)
(12,39,1)
(45,3,1)
(2,32,1)
(36,12,1)
(36,15,1)
(29,39,1)
(25,19,1)
(6,36,1)
(43,4,1)
(27,38,1)
(12,25,1)
(4,35,1)
(2,15,1)
(20,13,1)
(45,20,1)
(19,46,1)
(46,1,1)
(20,39,1)
(1,15,1)
(14,44,1)
(11,22,1)
(44,27,1)
(4,39,1)
(26,24,1)
(1,29,1)
(35,40,1)
(13,7,1)
(32,41,1)
(15,45,1)
(42,17,1)
(43,2,1)
(41,42,1)
(14,30,1)
(17,6,1)
(39,11,1)
(24,44,1)
(10,21,1)
(30,26,1)
(0,10,1)
(41,15,1)
(40,39,1)
(38,15,1)
(44,15,1)
(21,14,1)
(29,0,1)
(7,4,1)
(1,15,2)
(42,4,2)
(7,4,2)
(0,4,2)
(19,4,2)
(2,4,2)
(17,4,2)
(41,15,2)
(20,39,2)
(29,39,2)
(30,26,2)
(15,4,2)
(36,15,2)
(10,4,2)
(32,4,2)
(14,4,2)
(20,4,2)
(45,3,2)
(15,45,2)
(13,4,2)
(12,4,2)
(1,29,2)
(36,4,2)
(6,4,2)
(45,4,2)
(26,44,2)
(29,4,2)
(36,12,2)
(24,44,2)
(1,4,2)
(27,4,2)
(2,15,2)
(44,4,2)
(41,4,2)
(38,4,2)
(44,15,2)
(4,39,2)
(46,4,2)
(30,44,2)
(12,39,2)
(45,20,2)
(25,4,2)
(21,4,2)
-----------------------------------
(0,1)
(1,memset(dataBuffer, \'A\', data-1)
(2,free(dataBuffer)
(3,char *)
(4,data < 100)
(5,)
(6,\'\\\\0\')
(7,dataBuffer)
(8,dataBuffer)
(9,)
(10,data)
(11,CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData)
(12,data-1)
(13,data)
(14,dataBuffer)
(15,* dataBuffer = (char *)
(16,'\\\\0')
(17,dataBuffer[data-1] = \'\\\\0\')
(18,memset(dataBuffer, 'A', data-1)
(19,data)
(20,malloc(data)
(21,\'A\')
(22,data)
(23,dataBuffer[data-1] = '\\\\0')
(24,1)
(25,1)
(26,-1)
(27,NULL)
(28,if (data < 100)
(29,data-1)
(30,exit(-1)
(31,)
(32,dataBuffer)
(33,'A')
(34,data)
(35,100)
(36,dataBuffer[data-1])
(37,if (dataBuffer == NULL)
(38,dataBuffer)
(39,data = CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_68_badData)
(40,data)
(41,printLine(dataBuffer)
(42,dataBuffer)
(43,RET)
(44,dataBuffer == NULL)
(45,(char *)
(46,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^