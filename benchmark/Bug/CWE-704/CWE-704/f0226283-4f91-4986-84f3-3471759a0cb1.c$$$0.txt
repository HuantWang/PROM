-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
48,50
51,52
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,43,45,49,50,52,56,58
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_15_bad()
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(17,14,0)
(7,25,0)
(5,14,0)
(10,4,0)
(25,6,0)
(14,17,0)
(28,6,0)
(26,2,0)
(25,5,0)
(29,25,0)
(19,14,0)
(21,2,0)
(16,26,0)
(12,22,0)
(14,20,0)
(2,20,0)
(23,6,0)
(27,20,0)
(15,5,0)
(5,25,0)
(22,13,0)
(0,13,0)
(4,6,0)
(24,17,0)
(11,6,0)
(22,2,0)
(13,14,0)
(9,6,0)
(13,0,0)
(1,20,0)
(13,22,0)
(26,22,0)
(8,13,0)
(22,13,1)
(16,22,1)
(17,24,1)
(25,5,1)
(12,23,1)
(15,7,1)
(28,4,1)
(23,25,1)
(5,15,1)
(10,3,1)
(5,14,1)
(4,10,1)
(18,26,1)
(13,8,1)
(14,17,1)
(13,0,1)
(7,29,1)
(12,28,1)
(24,19,1)
(26,16,1)
(3,14,1)
(26,22,1)
(13,14,1)
(29,3,1)
(8,12,1)
(15,3,2)
(14,17,2)
(23,3,2)
(5,3,2)
(5,14,2)
(4,3,2)
(25,5,2)
(13,0,2)
(28,3,2)
(26,22,2)
(22,13,2)
(29,3,2)
(25,3,2)
(7,3,2)
(13,14,2)
(10,3,2)
-----------------------------------
(0,short)
(1,data)
(2,)
(3,6)
(4,printLine("Benign, fixed string")
(5,&data)
(6,)
(7,"%d")
(8,data)
(9,default:)
(10,"Benign, fixed string")
(11,case 6:)
(12,shortData)
(13,(short)
(14,data = -1)
(15,data)
(16,shortData)
(17,-1)
(18,RET)
(19,data)
(20,)
(21,shortData)
(22,shortData = (short)
(23,break;)
(24,1)
(25,fscanf(stdin, "%d", &data)
(26,printShortLine(shortData)
(27,switch(6)
(28,break;)
(29,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^