-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,28,0)
(42,17,0)
(19,34,0)
(7,34,0)
(21,48,0)
(50,29,0)
(29,26,0)
(37,15,0)
(29,37,0)
(1,8,0)
(47,39,0)
(27,24,0)
(23,18,0)
(39,34,0)
(28,44,0)
(32,8,0)
(6,15,0)
(25,39,0)
(46,26,0)
(23,39,0)
(24,34,0)
(44,39,0)
(2,25,0)
(9,18,0)
(21,16,0)
(12,22,0)
(26,39,0)
(25,34,0)
(17,15,0)
(13,18,0)
(44,40,0)
(28,37,0)
(23,34,0)
(11,36,0)
(17,5,0)
(18,37,0)
(36,37,0)
(24,39,0)
(0,23,0)
(18,23,0)
(10,37,0)
(5,53,0)
(33,23,0)
(5,54,0)
(52,15,0)
(3,5,0)
(45,22,0)
(16,21,0)
(26,29,0)
(36,17,0)
(37,36,0)
(20,15,0)
(53,5,0)
(22,37,0)
(30,34,0)
(51,16,0)
(5,17,0)
(39,44,0)
(38,7,0)
(8,39,0)
(26,7,0)
(40,44,0)
(14,29,0)
(4,28,0)
(5,53,1)
(14,50,1)
(4,47,1)
(36,17,1)
(49,22,1)
(47,22,1)
(36,11,1)
(2,7,1)
(26,39,1)
(27,25,1)
(0,8,1)
(21,16,1)
(24,27,1)
(33,0,1)
(17,5,1)
(23,39,1)
(18,9,1)
(24,39,1)
(32,39,1)
(28,4,1)
(49,24,1)
(29,37,1)
(28,37,1)
(11,10,1)
(10,17,1)
(5,3,1)
(3,42,1)
(25,2,1)
(8,39,1)
(1,32,1)
(37,36,1)
(0,21,1)
(5,54,1)
(16,51,1)
(12,45,1)
(44,28,1)
(46,23,1)
(22,37,1)
(39,44,1)
(7,38,1)
(29,14,1)
(9,13,1)
(45,37,1)
(51,8,1)
(38,26,1)
(23,18,1)
(26,29,1)
(18,37,1)
(25,39,1)
(22,12,1)
(8,1,1)
(50,46,1)
(13,33,1)
(44,40,1)
(39,44,2)
(17,5,2)
(0,22,2)
(46,22,2)
(36,17,2)
(25,22,2)
(18,22,2)
(44,40,2)
(39,22,2)
(44,22,2)
(7,22,2)
(25,39,2)
(38,22,2)
(28,37,2)
(28,22,2)
(5,54,2)
(47,22,2)
(1,22,2)
(26,29,2)
(14,22,2)
(2,22,2)
(5,53,2)
(44,28,2)
(29,37,2)
(50,22,2)
(8,39,2)
(26,39,2)
(29,22,2)
(24,39,2)
(23,22,2)
(9,22,2)
(22,37,2)
(21,8,2)
(4,22,2)
(26,22,2)
(27,22,2)
(32,22,2)
(33,22,2)
(13,22,2)
(24,22,2)
(16,8,2)
(23,18,2)
(18,37,2)
(8,22,2)
(21,16,2)
(51,8,2)
(37,36,2)
(23,39,2)
-----------------------------------
(0,dataBuffer)
(1,NULL)
(2,dataBuffer)
(3,dataVoidPtr)
(4,data)
(5,(int *)
(6,dataPtr)
(7,dataBuffer[data-1] = '\\\\0')
(8,dataBuffer == NULL)
(9,1)
(10,data)
(11,dataPtr)
(12,100)
(13,data)
(14,1)
(15,)
(16,-1)
(17,* dataPtr = (int *)
(18,data-1)
(19,if (dataBuffer == NULL)
(20,if (data < 100)
(21,exit(-1)
(22,data < 100)
(23,memset(dataBuffer, \'A\', data-1)
(24,free(dataBuffer)
(25,printLine(dataBuffer)
(26,dataBuffer[data-1])
(27,dataBuffer)
(28,malloc(data)
(29,data-1)
(30,dataBuffer)
(31,memset(dataBuffer, 'A', data-1)
(32,dataBuffer)
(33,'A')
(34,)
(35,\'A\')
(36,*dataPtr)
(37,data = (*dataPtr)
(38,'\\\\0')
(39,* dataBuffer = (char *)
(40,char *)
(41,dataBuffer[data-1] = \'\\\\0\')
(42,dataPtr)
(43,\'\\\\0\')
(44,(char *)
(45,data)
(46,dataBuffer)
(47,dataBuffer)
(48,)
(49,RET)
(50,data)
(51,1)
(52,data)
(53,int *)
(54,void * dataVoidPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^