-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_10_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
globalTrue
globalTrue
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,32,0)
(41,45,0)
(48,47,0)
(13,47,0)
(0,32,0)
(9,6,0)
(38,45,0)
(6,20,0)
(5,32,0)
(11,20,0)
(29,4,0)
(34,4,0)
(14,30,0)
(26,38,0)
(30,32,0)
(45,38,0)
(0,22,0)
(30,46,0)
(16,42,0)
(25,20,0)
(8,30,0)
(12,42,0)
(20,21,0)
(3,48,0)
(37,38,0)
(48,32,0)
(0,24,0)
(35,21,0)
(43,6,0)
(32,0,0)
(30,6,0)
(39,25,0)
(2,45,0)
(17,47,0)
(23,48,0)
(10,20,0)
(30,47,0)
(12,10,0)
(4,46,0)
(25,6,0)
(47,21,0)
(28,20,0)
(38,20,0)
(22,0,0)
(32,19,0)
(34,47,0)
(36,10,0)
(15,20,0)
(42,12,0)
(18,34,0)
(27,12,0)
(34,6,0)
(31,42,0)
(7,34,0)
(33,21,0)
(24,0,0)
(44,30,0)
(0,22,1)
(31,27,1)
(8,44,1)
(30,47,1)
(2,41,1)
(10,36,1)
(27,38,1)
(30,32,1)
(30,6,1)
(34,32,1)
(16,31,1)
(5,40,1)
(30,8,1)
(0,24,1)
(6,43,1)
(25,39,1)
(37,6,1)
(9,32,1)
(48,23,1)
(18,30,1)
(41,26,1)
(26,37,1)
(48,32,1)
(47,17,1)
(32,0,1)
(14,48,1)
(48,47,1)
(39,4,1)
(29,34,1)
(4,29,1)
(12,42,1)
(44,14,1)
(25,6,1)
(40,47,1)
(34,6,1)
(3,10,1)
(9,40,1)
(34,47,1)
(42,16,1)
(17,13,1)
(36,12,1)
(43,9,1)
(24,5,1)
(1,25,1)
(38,45,1)
(34,7,1)
(39,48,1)
(45,2,1)
(23,3,1)
(7,18,1)
(29,48,2)
(7,48,2)
(32,40,2)
(0,24,2)
(18,48,2)
(0,40,2)
(8,48,2)
(30,47,2)
(30,6,2)
(25,6,2)
(4,48,2)
(34,32,2)
(34,47,2)
(48,32,2)
(34,6,2)
(24,40,2)
(30,32,2)
(32,0,2)
(0,22,2)
(34,48,2)
(48,47,2)
(5,40,2)
(14,48,2)
(30,48,2)
(38,45,2)
(44,48,2)
(12,42,2)
-----------------------------------
(0,(short)
(1,RET)
(2,1)
(3,data)
(4,dest[data] = \\\'\\\\0\\\')
(5,data)
(6,dest[100] = "")
(7,data)
(8,data)
(9,dest)
(10,source[100-1] = \\\'\\\\0\\\')
(11,if (data < 100)
(12,source[100-1])
(13,data)
(14,dest)
(15,dest)
(16,1)
(17,0)
(18,dest)
(19,)
(20,)
(21,)
(22,short)
(23,100)
(24,RAND32()
(25,printLine(dest)
(26,\\\'A\\\')
(27,source)
(28,source)
(29,\\\'\\\\0\\\')
(30,memmove(dest, source, data)
(31,100)
(32,data = (short)
(33,if(globalTrue)
(34,dest[data])
(35,data)
(36,\\\'\\\\0\\\')
(37,source)
(38,memset(source, \\\'A\\\', 100-1)
(39,dest)
(40,globalTrue)
(41,100)
(42,100-1)
(43,"")
(44,source)
(45,100-1)
(46,)
(47,data = 0)
(48,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^