-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_44_bad()
{
    short data;
    /* define a function pointer */
    void (*funcPtr) (short) = badSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* FLAW: Use a value input from the network */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
30,37
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
64,66
65,66
65,67
65,68
65,69
65,70
65,71
65,72
65,73
65,74
65,75
65,76
65,77
66,67
67,68
67,69
68,69
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
92,93
95,96
96,97
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
122,124
123,124
126,127
126,128
127,128
129,130
131,132
131,133
132,133
132,134
133,134
133,135
133,136
133,137
134,135
136,137
138,139
138,140
139,140
139,141
140,141
142,143
144,145
145,146
147,148
148,149
149,150
151,152
153,154
155,156
156,157
156,158
157,158
159,160
159,161
159,162
159,163
159,164
160,161
162,163
164,165
166,167
166,168
167,168
171,172
171,173
172,173
172,174
173,174
173,175
174,175
176,177
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
186,188
187,188
189,190
192,193
193,194
193,195
194,195
196,197
196,198
197,198
199,200
201,202
201,203
201,204
202,203
202,204
203,204
203,205
204,205
206,207
208,209
208,210
209,210
211,212
213,214
214,215
215,216
215,217
216,217
218,219
220,221
221,222
222,223
222,224
223,224
225,226
228,229
228,230
229,230
229,231
230,231
232,233
234,235
235,236
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
245,246
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,38,40,44,46,50,52,55,58,60,63,69,72,74,76,78,82,84,86,90,93,94,98,103,104,106,112,113,114,117,119,124,125,128,130,135,137,141,143,146,150,152,154,158,161,163,165,168,169,170,175,177,180,181,183,188,190,191,195,198,200,205,207,210,212,217,219,224,226,227,231,233,238,240,244,246
-----computeFrom-----
26,27
26,28
67,68
67,69
80,81
80,82
100,101
100,102
108,109
108,110
121,122
121,123
132,133
132,134
156,157
156,158
166,167
166,168
172,173
172,174
173,174
173,175
178,179
178,180
185,186
185,187
193,194
193,195
202,203
202,204
203,204
203,205
208,209
208,210
215,216
215,217
222,223
222,224
229,230
229,231
-----guardedBy-----
231,240
-----guardedByNegation-----
210,226
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_44_bad(){    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_44_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_44_bad
{    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
short data;
short data;
short
data
data
void (*funcPtr) (short) = badSink;
void (*funcPtr) (short) = badSink;
void
(*funcPtr) (short) = badSink
*funcPtr
*
funcPtr
short
short


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(118,54,0)
(26,88,0)
(139,129,0)
(11,129,0)
(118,146,0)
(149,144,0)
(58,82,0)
(13,146,0)
(119,31,0)
(1,60,0)
(81,12,0)
(22,12,0)
(34,82,0)
(148,14,0)
(44,76,0)
(92,12,0)
(35,54,0)
(34,140,0)
(64,45,0)
(136,12,0)
(59,143,0)
(108,12,0)
(79,120,0)
(66,12,0)
(118,121,0)
(145,104,0)
(93,114,0)
(135,144,0)
(150,135,0)
(19,107,0)
(62,102,0)
(33,104,0)
(104,54,0)
(83,49,0)
(72,116,0)
(76,2,0)
(47,116,0)
(122,96,0)
(18,99,0)
(49,36,0)
(42,66,0)
(112,118,0)
(21,96,0)
(21,88,0)
(56,43,0)
(68,31,0)
(17,8,0)
(84,2,0)
(3,8,0)
(146,54,0)
(45,108,0)
(67,100,0)
(85,56,0)
(0,65,0)
(86,142,0)
(140,34,0)
(143,59,0)
(65,29,0)
(69,129,0)
(9,104,0)
(129,104,0)
(120,116,0)
(118,144,0)
(69,108,0)
(45,129,0)
(108,102,0)
(22,103,0)
(82,116,0)
(39,46,0)
(38,136,0)
(51,126,0)
(55,51,0)
(60,108,0)
(16,143,0)
(36,29,0)
(144,135,0)
(96,21,0)
(74,102,0)
(71,102,0)
(8,126,0)
(29,12,0)
(57,104,0)
(40,34,0)
(103,22,0)
(61,121,0)
(68,12,0)
(76,82,0)
(29,65,0)
(59,12,0)
(48,91,0)
(97,12,0)
(5,60,0)
(50,51,0)
(121,22,0)
(116,108,0)
(32,85,0)
(24,137,0)
(126,51,0)
(68,91,0)
(4,90,0)
(41,66,0)
(147,59,0)
(73,54,0)
(88,108,0)
(98,104,0)
(43,56,0)
(100,88,0)
(91,68,0)
(23,10,0)
(117,68,0)
(31,68,0)
(88,25,0)
(36,49,0)
(116,82,0)
(75,104,0)
(69,101,0)
(88,100,0)
(2,12,0)
(28,22,0)
(53,103,0)
(116,120,0)
(107,136,0)
(102,108,0)
(126,8,0)
(124,45,0)
(63,12,0)
(51,22,0)
(137,56,0)
(142,82,0)
(127,14,0)
(82,12,0)
(110,76,0)
(109,107,0)
(88,21,0)
(132,120,0)
(14,104,0)
(8,22,0)
(25,88,0)
(37,43,0)
(130,25,0)
(77,99,0)
(115,147,0)
(123,36,0)
(15,104,0)
(7,12,0)
(89,21,0)
(94,104,0)
(20,108,0)
(121,106,0)
(141,121,0)
(134,116,0)
(131,142,0)
(133,34,0)
(56,85,0)
(78,104,0)
(113,146,0)
(21,89,0)
(111,69,0)
(144,70,0)
(56,137,0)
(125,85,0)
(128,138,0)
(142,140,0)
(52,147,0)
(6,104,0)
(140,142,0)
(99,54,0)
(27,49,0)
(38,107,1)
(48,117,1)
(16,147,1)
(26,59,1)
(149,126,1)
(150,149,1)
(59,143,1)
(17,3,1)
(99,77,1)
(64,4,1)
(142,131,1)
(80,118,1)
(45,108,1)
(20,66,1)
(131,86,1)
(128,30,1)
(53,28,1)
(127,148,1)
(143,16,1)
(39,140,1)
(21,89,1)
(68,91,1)
(56,85,1)
(144,135,1)
(111,45,1)
(68,31,1)
(122,26,1)
(121,22,1)
(115,29,1)
(146,13,1)
(125,129,1)
(30,69,1)
(19,109,1)
(95,144,1)
(123,49,1)
(1,108,1)
(45,129,1)
(41,42,1)
(118,121,1)
(64,95,1)
(66,41,1)
(22,103,1)
(0,36,1)
(11,14,1)
(137,24,1)
(3,51,1)
(55,50,1)
(14,127,1)
(69,129,1)
(125,95,1)
(121,141,1)
(72,120,1)
(64,39,1)
(130,88,1)
(126,8,1)
(49,83,1)
(29,65,1)
(56,137,1)
(113,99,1)
(50,22,1)
(40,142,1)
(86,82,1)
(60,108,1)
(93,60,1)
(136,38,1)
(112,30,1)
(132,47,1)
(25,130,1)
(71,20,1)
(85,32,1)
(117,31,1)
(62,74,1)
(148,146,1)
(24,85,1)
(140,34,1)
(64,93,1)
(25,88,1)
(118,144,1)
(58,25,1)
(107,19,1)
(74,71,1)
(47,134,1)
(8,22,1)
(140,142,1)
(65,0,1)
(110,140,1)
(32,125,1)
(88,108,1)
(77,18,1)
(5,1,1)
(69,111,1)
(79,132,1)
(34,82,1)
(112,128,1)
(116,120,1)
(60,5,1)
(108,102,1)
(129,139,1)
(8,17,1)
(28,2,1)
(103,53,1)
(37,56,1)
(91,48,1)
(23,25,1)
(135,150,1)
(126,51,1)
(76,82,1)
(34,133,1)
(31,119,1)
(134,58,1)
(141,61,1)
(147,52,1)
(69,108,1)
(102,62,1)
(51,22,1)
(51,55,1)
(61,126,1)
(84,76,1)
(36,49,1)
(133,40,1)
(88,100,1)
(116,108,1)
(88,21,1)
(43,56,1)
(96,122,1)
(21,96,1)
(36,123,1)
(139,11,1)
(42,43,1)
(45,124,1)
(119,60,1)
(118,112,1)
(142,82,1)
(76,44,1)
(67,21,1)
(120,79,1)
(124,64,1)
(2,84,1)
(43,37,1)
(118,146,1)
(82,116,1)
(95,121,1)
(100,67,1)
(109,68,1)
(116,72,1)
(64,23,1)
(44,110,1)
(83,27,1)
(27,136,1)
(13,113,1)
(52,115,1)
(30,45,1)
(4,43,1)
(143,60,2)
(43,56,2)
(0,60,2)
(40,142,2)
(142,25,2)
(69,129,2)
(20,43,2)
(108,102,2)
(88,21,2)
(26,60,2)
(85,95,2)
(135,126,2)
(39,140,2)
(2,140,2)
(137,95,2)
(68,60,2)
(142,82,2)
(88,100,2)
(122,60,2)
(84,140,2)
(53,140,2)
(147,60,2)
(3,51,2)
(55,140,2)
(52,60,2)
(95,140,2)
(109,60,2)
(21,89,2)
(32,95,2)
(118,144,2)
(44,140,2)
(76,82,2)
(131,25,2)
(5,43,2)
(16,60,2)
(34,82,2)
(88,108,2)
(50,140,2)
(56,95,2)
(133,142,2)
(134,25,2)
(38,60,2)
(45,108,2)
(37,95,2)
(123,60,2)
(121,126,2)
(82,116,2)
(36,60,2)
(115,60,2)
(82,25,2)
(19,60,2)
(144,135,2)
(118,146,2)
(58,25,2)
(60,108,2)
(125,95,2)
(60,43,2)
(34,142,2)
(28,140,2)
(130,60,2)
(88,60,2)
(100,60,2)
(86,25,2)
(149,126,2)
(117,60,2)
(8,51,2)
(76,140,2)
(22,140,2)
(96,60,2)
(91,60,2)
(140,142,2)
(56,137,2)
(65,60,2)
(31,60,2)
(111,45,2)
(103,140,2)
(1,43,2)
(59,60,2)
(126,51,2)
(150,126,2)
(23,25,2)
(68,31,2)
(29,65,2)
(140,34,2)
(116,25,2)
(93,60,2)
(79,25,2)
(116,120,2)
(68,91,2)
(69,108,2)
(61,126,2)
(51,22,2)
(48,60,2)
(24,95,2)
(51,140,2)
(67,60,2)
(59,143,2)
(72,25,2)
(41,43,2)
(66,43,2)
(49,60,2)
(128,30,2)
(21,60,2)
(17,51,2)
(71,43,2)
(108,43,2)
(74,43,2)
(140,25,2)
(45,129,2)
(136,60,2)
(121,22,2)
(27,60,2)
(43,95,2)
(126,8,2)
(83,60,2)
(116,108,2)
(126,140,2)
(107,60,2)
(69,45,2)
(47,25,2)
(110,140,2)
(22,103,2)
(8,22,2)
(56,85,2)
(141,126,2)
(21,96,2)
(144,126,2)
(42,43,2)
(119,60,2)
(132,25,2)
(36,49,2)
(118,121,2)
(25,60,2)
(4,43,2)
(102,43,2)
(29,60,2)
(62,43,2)
(25,88,2)
(120,25,2)
-----------------------------------
(0,IP_ADDRESS)
(1,connectSocket)
(2,inputBuffer[recvResult] = '\\\\0')
(3,tempInt)
(4,break;)
(5,INVALID_SOCKET)
(6,recvResult)
(7,if (connectSocket == INVALID_SOCKET)
(8,tempInt < SHRT_MIN)
(9,wsaData)
(10,)
(11,connectSocket)
(12,)
(13,0)
(14,wsaDataInit = 0)
(15,connectSocket)
(16,TCP_PORT)
(17,SHRT_MIN)
(18,funcPtr)
(19,sin_family)
(20,connectSocket)
(21,(struct sockaddr*)
(22,tempInt = atoi(inputBuffer)
(23,break;)
(24,wsaData)
(25,connect(connectSocket, (struct sockaddr*)
(26,connectSocket)
(27,service)
(28,tempInt)
(29,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(30,wsaDataInit)
(31,&service)
(32,2)
(33,service)
(34,recvResult == 0)
(35,funcPtr)
(36,service.sin_addr.s_addr)
(37,NO_ERROR)
(38,AF_INET)
(39,break;)
(40,recvResult)
(41,1)
(42,wsaDataInit)
(43,WSAStartup(MAKEWORD(2,2)
(44,recvResult)
(45,connectSocket != INVALID_SOCKET)
(46,)
(47,inputBuffer)
(48,service)
(49,service.sin_addr)
(50,tempInt)
(51,tempInt > SHRT_MAX)
(52,sin_port)
(53,inputBuffer)
(54,)
(55,SHRT_MAX)
(56,WSAStartup(MAKEWORD(2,2)
(57,if (connectSocket != INVALID_SOCKET)
(58,recvResult)
(59,service.sin_port = htons(TCP_PORT)
(60,connectSocket == INVALID_SOCKET)
(61,data)
(62,IPPROTO_TCP)
(63,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(64,connectSocket)
(65,inet_addr(IP_ADDRESS)
(66,wsaDataInit = 1)
(67,service)
(68,memset(&service, 0, sizeof(service)
(69,CLOSE_SOCKET(connectSocket)
(70,)
(71,AF_INET)
(72,0)
(73,data)
(74,SOCK_STREAM)
(75,wsaDataInit)
(76,inputBuffer[recvResult])
(77,badSink)
(78,inputBuffer)
(79,1)
(80,RET)
(81,if (connect(connectSocket, (struct sockaddr*)
(82,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(83,sin_addr)
(84,'\\\\0')
(85,MAKEWORD(2,2)
(86,recvResult)
(87,inputBuffer[recvResult] = \'\\\\0\')
(88,connect(connectSocket, (struct sockaddr*)
(89,struct sockaddr*)
(90,)
(91,sizeof(service)
(92,if (WSAStartup(MAKEWORD(2,2)
(93,break;)
(94,do)
(95,0)
(96,&service)
(97,if (recvResult == SOCKET_ERROR || recvResult == 0)
(98,tempInt)
(99,(*funcPtr)
(100,sizeof(service)
(101,)
(102,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(103,atoi(inputBuffer)
(104,)
(105,\'\\\\0\')
(106,)
(107,service.sin_family)
(108,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(109,service)
(110,inputBuffer)
(111,connectSocket)
(112,data)
(113,data)
(114,)
(115,service)
(116,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(117,0)
(118,funcPtr(data)
(119,service)
(120,CHAR_ARRAY_SIZE - 1)
(121,data = tempInt)
(122,service)
(123,s_addr)
(124,INVALID_SOCKET)
(125,2)
(126,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(127,0)
(128,WSACleanup()
(129,connectSocket = INVALID_SOCKET)
(130,SOCKET_ERROR)
(131,SOCKET_ERROR)
(132,CHAR_ARRAY_SIZE)
(133,0)
(134,connectSocket)
(135,-1)
(136,service.sin_family = AF_INET)
(137,&wsaData)
(138,)
(139,INVALID_SOCKET)
(140,recvResult == SOCKET_ERROR || recvResult == 0)
(141,tempInt)
(142,recvResult == SOCKET_ERROR)
(143,htons(TCP_PORT)
(144,data = -1)
(145,if (wsaDataInit)
(146,data = 0)
(147,service.sin_port)
(148,wsaDataInit)
(149,data)
(150,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^