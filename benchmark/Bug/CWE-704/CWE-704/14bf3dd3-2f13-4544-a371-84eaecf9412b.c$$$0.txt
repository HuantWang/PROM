-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memcpy_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_10_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memcpy_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
globalTrue
globalTrue
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(41,11,0)
(3,14,0)
(18,2,0)
(30,28,0)
(32,30,0)
(42,40,0)
(46,27,0)
(38,24,0)
(5,12,0)
(47,22,0)
(46,22,0)
(39,30,0)
(12,41,0)
(23,30,0)
(39,27,0)
(12,30,0)
(48,39,0)
(19,22,0)
(39,14,0)
(1,35,0)
(41,12,0)
(35,30,0)
(7,23,0)
(34,40,0)
(27,22,0)
(33,28,0)
(26,30,0)
(21,40,0)
(20,24,0)
(10,22,0)
(44,42,0)
(23,27,0)
(24,2,0)
(40,42,0)
(23,36,0)
(24,38,0)
(9,41,0)
(0,27,0)
(22,28,0)
(15,23,0)
(16,46,0)
(17,38,0)
(13,28,0)
(45,23,0)
(6,39,0)
(4,42,0)
(43,41,0)
(8,35,0)
(29,38,0)
(2,22,0)
(25,27,0)
(40,22,0)
(14,36,0)
(39,48,1)
(16,14,1)
(9,31,1)
(17,29,1)
(0,31,1)
(23,15,1)
(18,24,1)
(21,27,1)
(8,2,1)
(40,42,1)
(15,7,1)
(44,4,1)
(5,43,1)
(3,39,1)
(48,6,1)
(6,23,1)
(12,30,1)
(23,30,1)
(27,25,1)
(37,46,1)
(42,44,1)
(14,3,1)
(35,30,1)
(4,34,1)
(24,38,1)
(12,5,1)
(16,35,1)
(7,45,1)
(2,18,1)
(41,12,1)
(45,35,1)
(46,27,1)
(38,17,1)
(46,16,1)
(35,1,1)
(23,27,1)
(39,27,1)
(39,30,1)
(30,32,1)
(20,40,1)
(0,41,1)
(34,21,1)
(29,20,1)
(25,0,1)
(43,9,1)
(31,30,1)
(1,8,1)
(32,26,1)
(12,30,2)
(48,35,2)
(40,42,2)
(3,35,2)
(9,31,2)
(39,27,2)
(12,31,2)
(41,12,2)
(35,30,2)
(7,35,2)
(5,31,2)
(15,35,2)
(23,27,2)
(24,38,2)
(41,31,2)
(45,35,2)
(43,31,2)
(6,35,2)
(39,30,2)
(46,27,2)
(23,30,2)
(39,35,2)
(23,35,2)
(14,35,2)
-----------------------------------
(0,dest)
(1,100)
(2,source[100-1] = \\\'\\\\0\\\')
(3,\\\'\\\\0\\\')
(4,100)
(5,data)
(6,dest)
(7,source)
(8,data)
(9,stdin)
(10,source)
(11,)
(12,&data)
(13,data)
(14,dest[data] = \\\'\\\\0\\\')
(15,data)
(16,dest)
(17,1)
(18,\\\'\\\\0\\\')
(19,if (data < 100)
(20,source)
(21,source)
(22,)
(23,memcpy(dest, source, data)
(24,source[100-1])
(25,"")
(26,data)
(27,dest[100] = "")
(28,)
(29,100)
(30,data = 0)
(31,globalTrue)
(32,0)
(33,if(globalTrue)
(34,\\\'A\\\')
(35,data < 100)
(36,)
(37,RET)
(38,100-1)
(39,dest[data])
(40,memset(source, \\\'A\\\', 100-1)
(41,fscanf (stdin, "%hd", &data)
(42,100-1)
(43,"%hd")
(44,1)
(45,dest)
(46,printLine(dest)
(47,dest)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^