-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);
source
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(17,28,0)
(33,17,0)
(7,14,0)
(37,14,0)
(27,24,0)
(21,48,0)
(34,19,0)
(44,4,0)
(20,47,0)
(9,19,0)
(32,11,0)
(7,23,0)
(8,49,0)
(42,18,0)
(31,23,0)
(42,17,0)
(48,49,0)
(33,6,0)
(23,17,0)
(47,49,0)
(32,13,0)
(46,20,0)
(12,4,0)
(24,49,0)
(40,13,0)
(20,17,0)
(45,44,0)
(10,18,0)
(18,19,0)
(47,30,0)
(22,7,0)
(41,19,0)
(49,4,0)
(44,49,0)
(49,47,0)
(26,33,0)
(14,4,0)
(6,33,0)
(38,6,0)
(17,19,0)
(25,48,0)
(1,42,0)
(6,49,0)
(15,6,0)
(36,4,0)
(0,18,0)
(39,17,0)
(18,42,0)
(29,43,0)
(50,28,0)
(28,17,0)
(7,49,0)
(16,23,0)
(2,43,0)
(24,4,0)
(43,17,0)
(6,4,0)
(47,20,0)
(35,33,0)
(30,47,0)
(3,19,0)
(13,32,0)
(23,7,0)
(42,17,1)
(13,40,1)
(33,17,1)
(40,48,1)
(47,30,1)
(46,8,1)
(7,23,1)
(5,43,1)
(44,45,1)
(23,17,1)
(14,37,1)
(35,26,1)
(17,28,1)
(33,35,1)
(2,29,1)
(37,7,1)
(21,49,1)
(0,10,1)
(31,16,1)
(22,6,1)
(6,49,1)
(20,17,1)
(43,17,1)
(10,41,1)
(38,15,1)
(8,43,1)
(47,20,1)
(48,49,1)
(44,49,1)
(29,18,1)
(45,24,1)
(6,33,1)
(1,0,1)
(16,22,1)
(41,17,1)
(5,44,1)
(27,14,1)
(7,49,1)
(28,50,1)
(32,13,1)
(49,47,1)
(18,42,1)
(43,2,1)
(23,31,1)
(15,48,1)
(50,39,1)
(24,49,1)
(15,32,1)
(48,25,1)
(42,1,1)
(20,46,1)
(25,21,1)
(26,38,1)
(24,27,1)
(6,49,2)
(44,49,2)
(23,17,2)
(13,48,2)
(22,43,2)
(31,43,2)
(44,43,2)
(20,43,2)
(32,13,2)
(23,43,2)
(40,48,2)
(17,28,2)
(24,43,2)
(21,43,2)
(42,17,2)
(48,49,2)
(49,47,2)
(26,43,2)
(43,17,2)
(18,42,2)
(6,33,2)
(47,20,2)
(7,23,2)
(45,43,2)
(47,30,2)
(32,48,2)
(25,43,2)
(37,43,2)
(46,43,2)
(20,17,2)
(35,43,2)
(7,49,2)
(14,43,2)
(49,43,2)
(38,43,2)
(33,17,2)
(7,43,2)
(47,43,2)
(24,49,2)
(48,43,2)
(6,43,2)
(16,43,2)
(33,43,2)
(15,43,2)
(27,43,2)
(8,43,2)
-----------------------------------
(0,"%d")
(1,data)
(2,100)
(3,source:)
(4,)
(5,RET)
(6,memset(dataBuffer, \\\'A\\\', data-1)
(7,dataBuffer[data-1])
(8,dataBuffer)
(9,data)
(10,stdin)
(11,)
(12,dataBuffer)
(13,-1)
(14,dataBuffer[data-1] = \\\'\\\\0\\\')
(15,dataBuffer)
(16,data)
(17,data = -1)
(18,fscanf(stdin, "%d", &data)
(19,)
(20,malloc(data)
(21,dataBuffer)
(22,dataBuffer)
(23,data-1)
(24,printLine(dataBuffer)
(25,NULL)
(26,data)
(27,dataBuffer)
(28,-1)
(29,data)
(30,char *)
(31,1)
(32,exit(-1)
(33,data-1)
(34,if (data < 100)
(35,1)
(36,if (dataBuffer == NULL)
(37,\\\'\\\\0\\\')
(38,\\\'A\\\')
(39,data)
(40,1)
(41,goto source;)
(42,&data)
(43,data < 100)
(44,free(dataBuffer)
(45,dataBuffer)
(46,data)
(47,(char *)
(48,dataBuffer == NULL)
(49,* dataBuffer = (char *)
(50,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^