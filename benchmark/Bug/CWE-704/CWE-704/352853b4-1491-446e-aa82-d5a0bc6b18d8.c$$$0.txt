-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_11_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(25,36,0)
(13,49,0)
(29,13,0)
(34,11,0)
(27,6,0)
(6,28,0)
(39,4,0)
(27,28,0)
(14,49,0)
(4,39,0)
(4,41,0)
(0,32,0)
(24,49,0)
(33,15,0)
(46,15,0)
(0,28,0)
(14,2,0)
(32,0,0)
(6,29,0)
(29,6,0)
(11,49,0)
(19,28,0)
(15,6,0)
(22,11,0)
(26,36,0)
(0,6,0)
(37,0,0)
(19,6,0)
(48,32,0)
(43,36,0)
(50,12,0)
(9,49,0)
(26,6,0)
(49,12,0)
(2,7,0)
(23,39,0)
(47,28,0)
(35,2,0)
(38,12,0)
(32,49,0)
(17,27,0)
(26,3,0)
(30,2,0)
(45,26,0)
(8,19,0)
(31,6,0)
(42,13,0)
(29,10,0)
(18,3,0)
(20,12,0)
(13,29,0)
(40,0,0)
(2,14,0)
(36,26,0)
(3,28,0)
(10,29,0)
(44,28,0)
(36,49,0)
(16,14,0)
(1,32,0)
(5,19,1)
(23,15,1)
(21,49,1)
(17,3,1)
(14,16,1)
(48,1,1)
(40,4,1)
(40,15,1)
(22,21,1)
(9,24,1)
(18,26,1)
(26,6,1)
(0,32,1)
(11,49,1)
(3,18,1)
(49,9,1)
(11,34,1)
(4,39,1)
(32,49,1)
(19,6,1)
(2,14,1)
(8,27,1)
(13,49,1)
(36,49,1)
(27,6,1)
(22,2,1)
(5,11,1)
(32,48,1)
(30,21,1)
(25,45,1)
(29,10,1)
(29,13,1)
(37,40,1)
(0,6,1)
(45,0,1)
(16,35,1)
(46,33,1)
(14,49,1)
(15,6,1)
(35,30,1)
(34,22,1)
(1,37,1)
(39,23,1)
(13,42,1)
(15,46,1)
(31,11,1)
(27,17,1)
(42,31,1)
(36,43,1)
(6,29,1)
(43,25,1)
(19,8,1)
(26,36,1)
(33,6,1)
(33,11,2)
(36,11,2)
(4,39,2)
(15,6,2)
(45,11,2)
(43,11,2)
(0,32,2)
(13,49,2)
(19,11,2)
(14,49,2)
(2,21,2)
(6,29,2)
(36,49,2)
(8,11,2)
(27,6,2)
(11,49,2)
(14,21,2)
(6,11,2)
(32,49,2)
(19,6,2)
(40,11,2)
(4,15,2)
(23,15,2)
(35,21,2)
(37,11,2)
(29,10,2)
(27,11,2)
(0,11,2)
(46,11,2)
(26,6,2)
(18,11,2)
(32,11,2)
(13,11,2)
(30,21,2)
(26,11,2)
(17,11,2)
(29,13,2)
(31,11,2)
(1,11,2)
(25,11,2)
(39,15,2)
(0,6,2)
(29,11,2)
(48,11,2)
(2,14,2)
(16,21,2)
(15,11,2)
(42,11,2)
(26,36,2)
(3,11,2)
-----------------------------------
(0,memset(dataBuffer, \\\'A\\\', data-1)
(1,data)
(2,fscanf (stdin, "%hd", &data)
(3,dataBuffer[data-1] = \\\'\\\\0\\\')
(4,exit(-1)
(5,RET)
(6,* dataBuffer = (char *)
(7,)
(8,dataBuffer)
(9,0)
(10,char *)
(11,data < 100)
(12,)
(13,malloc(data)
(14,&data)
(15,dataBuffer == NULL)
(16,data)
(17,dataBuffer)
(18,\\\'\\\\0\\\')
(19,free(dataBuffer)
(20,if (data < 100)
(21,globalReturnsTrue()
(22,data)
(23,1)
(24,data)
(25,data)
(26,dataBuffer[data-1])
(27,printLine(dataBuffer)
(28,)
(29,(char *)
(30,stdin)
(31,dataBuffer)
(32,data-1)
(33,dataBuffer)
(34,100)
(35,"%hd")
(36,data-1)
(37,\\\'A\\\')
(38,data)
(39,-1)
(40,dataBuffer)
(41,)
(42,data)
(43,1)
(44,dataBuffer)
(45,dataBuffer)
(46,NULL)
(47,if (dataBuffer == NULL)
(48,1)
(49,data = 0)
(50,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^