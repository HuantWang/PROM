-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
57,60
58,59
59,60
59,61
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
82,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,65,68,70,73,77,79,83,84,86,90,92
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_31_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_31_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_31_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(40,43,0)
(28,27,0)
(13,43,0)
(11,31,0)
(29,33,0)
(5,31,0)
(7,10,0)
(42,11,0)
(12,27,0)
(23,10,0)
(21,19,0)
(34,38,0)
(0,10,0)
(3,30,0)
(21,40,0)
(23,21,0)
(22,33,0)
(33,14,0)
(8,39,0)
(19,21,0)
(33,27,0)
(32,14,0)
(20,7,0)
(35,23,0)
(37,27,0)
(41,3,0)
(40,6,0)
(7,23,0)
(24,6,0)
(26,40,0)
(6,31,0)
(18,2,0)
(43,2,0)
(25,6,0)
(39,2,0)
(31,11,0)
(37,3,0)
(14,33,0)
(21,23,0)
(15,37,0)
(9,33,0)
(31,2,0)
(16,40,0)
(6,3,0)
(38,1,0)
(4,21,0)
(17,43,0)
(10,43,0)
(27,39,0)
(6,43,0)
(3,37,0)
(36,39,0)
(37,27,1)
(34,14,1)
(16,6,1)
(32,33,1)
(27,28,1)
(29,9,1)
(7,20,1)
(21,4,1)
(20,23,1)
(28,12,1)
(33,22,1)
(4,35,1)
(25,3,1)
(6,31,1)
(6,3,1)
(41,14,1)
(12,31,1)
(35,40,1)
(40,26,1)
(3,37,1)
(31,11,1)
(23,21,1)
(42,5,1)
(11,42,1)
(26,16,1)
(9,27,1)
(38,34,1)
(21,19,1)
(14,33,1)
(15,41,1)
(37,15,1)
(40,6,1)
(24,25,1)
(33,27,1)
(25,38,1)
(7,23,1)
(22,29,1)
(14,32,1)
(21,40,1)
(6,24,1)
(44,7,1)
(6,31,2)
(3,37,2)
(34,14,2)
(37,14,2)
(31,11,2)
(38,14,2)
(15,14,2)
(21,40,2)
(23,21,2)
(37,27,2)
(33,27,2)
(6,3,2)
(40,6,2)
(14,33,2)
(41,14,2)
(3,14,2)
(7,23,2)
(21,19,2)
-----------------------------------
(0,charData)
(1,)
(2,)
(3,data = atoi(inputBuffer)
(4,data)
(5,data)
(6,dataCopy = data)
(7,printHexCharLine(charData)
(8,inputBuffer)
(9,inputBuffer)
(10,)
(11,-1)
(12,inputBuffer)
(13,data)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,inputBuffer)
(16,data)
(17,dataCopy)
(18,data)
(19,char)
(20,charData)
(21,(char)
(22,stdin)
(23,charData = (char)
(24,data)
(25,dataCopy)
(26,dataCopy)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,"")
(29,CHAR_ARRAY_SIZE)
(30,)
(31,data = -1)
(32,NULL)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,"fgets()
(35,charData)
(36,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,atoi(inputBuffer)
(38,printLine("fgets()
(39,)
(40,data = dataCopy)
(41,data)
(42,1)
(43,)
(44,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^