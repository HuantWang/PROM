-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_13_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,71,73,74,78,80,83,85,89,91,96,98,102,104,105,108,109,114,117,118,119,123,125,129,131
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
87,88
87,89
106,107
106,108
111,112
111,113
115,116
115,117
-----guardedBy-----
40,56
66,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_13_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_13_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_13_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(35,34,0)
(51,53,0)
(15,48,0)
(61,32,0)
(32,47,0)
(59,56,0)
(19,2,0)
(55,7,0)
(50,53,0)
(25,47,0)
(33,34,0)
(42,2,0)
(30,38,0)
(68,36,0)
(51,36,0)
(7,36,0)
(57,16,0)
(66,32,0)
(58,17,0)
(17,2,0)
(40,7,0)
(43,52,0)
(66,68,0)
(39,38,0)
(23,36,0)
(41,38,0)
(44,36,0)
(31,42,0)
(32,38,0)
(23,56,0)
(18,66,0)
(16,53,0)
(2,11,0)
(17,4,0)
(54,36,0)
(4,21,0)
(68,66,0)
(48,57,0)
(48,4,0)
(24,4,0)
(28,16,0)
(64,51,0)
(36,23,0)
(8,5,0)
(54,53,0)
(14,23,0)
(4,17,0)
(9,66,0)
(26,68,0)
(36,53,0)
(56,4,0)
(13,42,0)
(11,1,0)
(57,48,0)
(48,32,0)
(45,13,0)
(27,53,0)
(63,42,0)
(60,43,0)
(46,42,0)
(10,54,0)
(52,37,0)
(20,48,0)
(66,4,0)
(49,22,0)
(67,11,0)
(42,13,0)
(34,32,0)
(56,23,0)
(0,11,0)
(65,68,0)
(23,14,0)
(29,57,0)
(6,2,0)
(3,22,0)
(57,36,0)
(34,4,0)
(56,32,0)
(47,32,0)
(52,43,0)
(68,53,0)
(5,12,0)
(6,22,1)
(3,32,1)
(56,4,1)
(57,48,1)
(24,13,1)
(56,59,1)
(15,20,1)
(17,58,1)
(45,42,1)
(68,36,1)
(66,4,1)
(19,6,1)
(28,57,1)
(65,52,1)
(55,40,1)
(44,34,1)
(33,22,1)
(64,54,1)
(26,65,1)
(54,36,1)
(31,2,1)
(40,36,1)
(57,36,1)
(8,13,1)
(49,3,1)
(54,10,1)
(36,23,1)
(48,15,1)
(51,36,1)
(34,35,1)
(17,2,1)
(7,36,1)
(5,8,1)
(59,44,1)
(63,46,1)
(16,28,1)
(13,42,1)
(58,24,1)
(62,51,1)
(2,19,1)
(65,7,1)
(43,60,1)
(29,68,1)
(7,55,1)
(66,32,1)
(66,18,1)
(33,4,1)
(22,49,1)
(68,66,1)
(34,32,1)
(9,26,1)
(42,2,1)
(42,63,1)
(18,9,1)
(23,56,1)
(25,61,1)
(62,34,1)
(48,32,1)
(52,43,1)
(10,16,1)
(60,7,1)
(20,29,1)
(34,4,1)
(23,14,1)
(4,17,1)
(56,32,1)
(13,45,1)
(51,64,1)
(47,25,1)
(33,5,1)
(32,47,1)
(46,31,1)
(35,33,1)
(48,4,1)
(29,34,2)
(55,34,2)
(48,32,2)
(7,36,2)
(20,34,2)
(5,13,2)
(46,22,2)
(24,13,2)
(34,32,2)
(40,34,2)
(17,13,2)
(42,22,2)
(56,32,2)
(57,48,2)
(26,34,2)
(13,42,2)
(23,56,2)
(65,34,2)
(54,36,2)
(32,47,2)
(7,34,2)
(66,34,2)
(9,34,2)
(4,17,2)
(56,34,2)
(51,36,2)
(31,22,2)
(66,4,2)
(66,32,2)
(58,13,2)
(36,34,2)
(68,36,2)
(45,22,2)
(48,34,2)
(43,7,2)
(2,22,2)
(34,4,2)
(15,34,2)
(52,7,2)
(59,34,2)
(56,4,2)
(42,2,2)
(17,2,2)
(4,13,2)
(48,4,2)
(57,34,2)
(57,36,2)
(6,22,2)
(63,22,2)
(28,34,2)
(36,23,2)
(13,22,2)
(19,22,2)
(54,34,2)
(68,34,2)
(10,34,2)
(18,34,2)
(68,66,2)
(23,34,2)
(44,34,2)
(16,34,2)
(64,34,2)
(60,7,2)
(23,14,2)
(8,13,2)
(51,34,2)
(52,43,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,)
(2,inputBuffer[CHAR_ARRAY_SIZE] = "")
(3,GLOBAL_CONST_FIVE)
(4,data = atoi(inputBuffer)
(5,printLine("fgets()
(6,inputBuffer)
(7,dataBuffer == NULL)
(8,"fgets()
(9,data)
(10,dataBuffer)
(11,)
(12,)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,char *)
(15,1)
(16,dataBuffer[data-1] = \\\'\\\\0\\\')
(17,atoi(inputBuffer)
(18,1)
(19,"")
(20,data)
(21,)
(22,GLOBAL_CONST_FIVE==5)
(23,(char *)
(24,data)
(25,1)
(26,\\\'A\\\')
(27,dataBuffer)
(28,\\\'\\\\0\\\')
(29,dataBuffer)
(30,if(GLOBAL_CONST_FIVE==5)
(31,inputBuffer)
(32,data = -1)
(33,data)
(34,data < 100)
(35,100)
(36,* dataBuffer = (char *)
(37,)
(38,)
(39,data)
(40,dataBuffer)
(41,if (data < 100)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,-1)
(44,dataBuffer)
(45,NULL)
(46,CHAR_ARRAY_SIZE)
(47,-1)
(48,data-1)
(49,5)
(50,if (dataBuffer == NULL)
(51,free(dataBuffer)
(52,exit(-1)
(53,)
(54,printLine(dataBuffer)
(55,NULL)
(56,malloc(data)
(57,dataBuffer[data-1])
(58,inputBuffer)
(59,data)
(60,1)
(61,data)
(62,RET)
(63,stdin)
(64,dataBuffer)
(65,dataBuffer)
(66,data-1)
(67,inputBuffer)
(68,memset(dataBuffer, \\\'A\\\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^