-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a number larger than SHRT_MAX */
        data = SHRT_MAX + 5;
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
32,33
32,34
33,34
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
47,49
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,16,20,25,28,29,34,37,38,42,44,48,49,51,55,57
-----computeFrom-----
12,13
12,14
23,24
23,25
26,27
26,28
32,33
32,34
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_large_to_char_12_bad()
CWE197_Numeric_Truncation_Error__int_large_to_char_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
data = SHRT_MAX + 5;
data = SHRT_MAX + 5
data
data
SHRT_MAX + 5
SHRT_MAX
SHRT_MAX
5
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(16,29,0)
(13,29,0)
(9,15,0)
(6,23,0)
(2,20,0)
(1,10,0)
(28,2,0)
(27,11,0)
(29,17,0)
(21,20,0)
(17,8,0)
(6,5,0)
(26,4,0)
(1,6,0)
(6,17,0)
(17,29,0)
(11,10,0)
(22,23,0)
(18,4,0)
(11,1,0)
(14,10,0)
(24,6,0)
(10,15,0)
(25,1,0)
(3,15,0)
(6,1,0)
(2,15,0)
(12,17,0)
(20,2,0)
(23,0,0)
(23,4,0)
(4,23,0)
(5,6,0)
(6,23,1)
(20,21,1)
(2,20,1)
(18,26,1)
(6,24,1)
(25,17,1)
(6,5,1)
(11,27,1)
(21,28,1)
(22,19,1)
(23,4,1)
(26,22,1)
(11,1,1)
(27,1,1)
(19,2,1)
(25,23,1)
(12,19,1)
(7,11,1)
(6,17,1)
(29,13,1)
(16,12,1)
(4,18,1)
(1,6,1)
(24,25,1)
(13,16,1)
(17,29,1)
(16,19,2)
(2,20,2)
(23,4,2)
(4,19,2)
(12,19,2)
(29,19,2)
(1,6,2)
(26,19,2)
(13,19,2)
(17,29,2)
(6,23,2)
(6,17,2)
(18,19,2)
(23,19,2)
(6,5,2)
(22,19,2)
(17,19,2)
(11,1,2)
-----------------------------------
(0,)
(1,charData = (char)
(2,data = -1)
(3,data)
(4,CHAR_MAX-5)
(5,char)
(6,(char)
(7,RET)
(8,)
(9,if(globalReturnsTrueOrFalse()
(10,)
(11,printHexCharLine(charData)
(12,data)
(13,5)
(14,charData)
(15,)
(16,SHRT_MAX)
(17,data = SHRT_MAX + 5)
(18,5)
(19,globalReturnsTrueOrFalse()
(20,-1)
(21,1)
(22,data)
(23,data = CHAR_MAX-5)
(24,data)
(25,charData)
(26,CHAR_MAX)
(27,charData)
(28,data)
(29,SHRT_MAX + 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^