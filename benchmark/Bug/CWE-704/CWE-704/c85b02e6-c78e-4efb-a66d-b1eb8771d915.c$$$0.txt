-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
69,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,70,71,73,77,79
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_05_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(6,3,0)
(26,22,0)
(26,34,0)
(25,3,0)
(33,0,0)
(11,9,0)
(24,16,0)
(7,16,0)
(0,11,0)
(22,32,0)
(34,26,0)
(38,24,0)
(5,6,0)
(37,11,0)
(2,30,0)
(20,26,0)
(26,20,0)
(6,17,0)
(28,30,0)
(10,32,0)
(27,0,0)
(23,26,0)
(22,4,0)
(36,30,0)
(3,6,0)
(30,36,0)
(16,4,0)
(15,11,0)
(1,4,0)
(29,4,0)
(35,36,0)
(13,20,0)
(20,16,0)
(21,30,0)
(18,19,0)
(24,20,0)
(3,0,0)
(30,0,0)
(14,18,0)
(26,6,0)
(32,22,0)
(31,22,0)
(10,31,1)
(28,0,1)
(6,3,1)
(26,6,1)
(30,21,1)
(26,23,1)
(22,32,1)
(2,28,1)
(26,34,1)
(5,36,1)
(26,22,1)
(33,27,1)
(3,0,1)
(30,0,1)
(21,2,1)
(8,22,1)
(35,30,1)
(3,25,1)
(20,26,1)
(25,5,1)
(36,35,1)
(13,6,1)
(14,36,1)
(13,8,1)
(13,18,1)
(27,8,1)
(24,20,1)
(23,13,1)
(32,10,1)
(36,30,1)
(24,38,1)
(0,33,1)
(18,14,1)
(12,24,1)
(38,20,1)
(26,22,2)
(27,8,2)
(3,36,2)
(20,26,2)
(26,34,2)
(0,8,2)
(24,20,2)
(21,8,2)
(30,8,2)
(6,3,2)
(33,8,2)
(26,6,2)
(25,36,2)
(35,8,2)
(30,0,2)
(36,30,2)
(36,8,2)
(5,36,2)
(18,36,2)
(14,36,2)
(3,0,2)
(22,32,2)
(6,36,2)
(28,8,2)
(2,8,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,data)
(2,CHAR_ARRAY_SIZE)
(3,atoi(inputBuffer)
(4,)
(5,data)
(6,data = atoi(inputBuffer)
(7,charData)
(8,staticTrue)
(9,)
(10,1)
(11,)
(12,RET)
(13,charData)
(14,"fgets()
(15,inputBuffer)
(16,)
(17,)
(18,printLine("fgets()
(19,)
(20,charData = (char)
(21,stdin)
(22,data = -1)
(23,data)
(24,printHexCharLine(charData)
(25,inputBuffer)
(26,(char)
(27,inputBuffer)
(28,inputBuffer)
(29,if(staticTrue)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,data)
(32,-1)
(33,"")
(34,char)
(35,NULL)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^