-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,31,35,37,40,42,46,48,53,55,59,61,62,65,66,71,74,75,76,80,82,86,88
-----computeFrom-----
21,22
21,23
44,45
44,46
63,64
63,65
68,69
68,70
72,73
72,74
-----guardedBy-----
23,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_63b_badSink(short * dataPtr){    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__fgets_malloc_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,22,0)
(6,12,0)
(18,4,0)
(46,39,0)
(4,34,0)
(16,10,0)
(12,48,0)
(9,3,0)
(19,38,0)
(34,4,0)
(29,6,0)
(5,3,0)
(15,23,0)
(39,46,0)
(10,38,0)
(44,16,0)
(39,12,0)
(25,27,0)
(45,12,0)
(43,28,0)
(30,23,0)
(24,1,0)
(7,10,0)
(1,22,0)
(1,38,0)
(1,41,0)
(28,41,0)
(8,1,0)
(14,38,0)
(48,12,0)
(11,26,0)
(16,41,0)
(21,48,0)
(48,0,0)
(36,6,0)
(26,38,0)
(22,1,0)
(16,6,0)
(6,16,0)
(40,39,0)
(46,47,0)
(34,20,0)
(28,38,0)
(47,46,0)
(26,41,0)
(22,12,0)
(33,27,0)
(2,22,0)
(3,12,0)
(46,41,0)
(41,38,0)
(13,41,0)
(12,27,0)
(41,46,0)
(23,41,0)
(22,2,1)
(28,41,1)
(43,10,1)
(34,4,1)
(3,5,1)
(13,3,1)
(1,22,1)
(42,3,1)
(24,23,1)
(26,11,1)
(15,30,1)
(40,13,1)
(22,12,1)
(4,18,1)
(6,36,1)
(12,48,1)
(46,47,1)
(16,41,1)
(7,16,1)
(32,8,1)
(36,29,1)
(18,23,1)
(44,1,1)
(41,46,1)
(30,41,1)
(48,21,1)
(9,12,1)
(26,41,1)
(29,44,1)
(16,6,1)
(10,7,1)
(8,24,1)
(46,39,1)
(23,15,1)
(21,45,1)
(2,32,1)
(39,12,1)
(39,40,1)
(42,26,1)
(11,28,1)
(6,12,1)
(24,34,1)
(5,9,1)
(3,12,1)
(1,41,1)
(23,41,1)
(28,43,1)
(48,0,1)
(6,12,2)
(18,23,2)
(11,3,2)
(10,3,2)
(26,3,2)
(28,3,2)
(8,3,2)
(32,3,2)
(24,3,2)
(23,3,2)
(2,3,2)
(22,12,2)
(30,3,2)
(43,3,2)
(40,3,2)
(3,12,2)
(12,48,2)
(34,4,2)
(16,3,2)
(4,23,2)
(16,6,2)
(41,3,2)
(39,3,2)
(44,3,2)
(39,12,2)
(23,41,2)
(6,3,2)
(15,3,2)
(13,3,2)
(7,3,2)
(1,41,2)
(48,0,2)
(28,41,2)
(22,3,2)
(46,39,2)
(1,3,2)
(46,47,2)
(34,23,2)
(26,41,2)
(36,3,2)
(41,46,2)
(16,41,2)
(29,3,2)
(1,22,2)
(46,3,2)
-----------------------------------
(0,short * dataPtr)
(1,memset(dataBuffer, \'A\', data-1)
(2,1)
(3,data < 100)
(4,-1)
(5,100)
(6,data-1)
(7,'\\\\0')
(8,'A')
(9,data)
(10,dataBuffer[data-1] = '\\\\0')
(11,dataBuffer)
(12,data = *dataPtr)
(13,dataBuffer)
(14,dataBuffer)
(15,NULL)
(16,dataBuffer[data-1])
(17,\'A\')
(18,1)
(19,if (dataBuffer == NULL)
(20,)
(21,dataPtr)
(22,data-1)
(23,dataBuffer == NULL)
(24,dataBuffer)
(25,data)
(26,free(dataBuffer)
(27,)
(28,printLine(dataBuffer)
(29,data)
(30,dataBuffer)
(31,memset(dataBuffer, 'A', data-1)
(32,data)
(33,if (data < 100)
(34,exit(-1)
(35,dataBuffer[data-1] = \'\\\\0\')
(36,1)
(37,\'\\\\0\')
(38,)
(39,malloc(data)
(40,data)
(41,* dataBuffer = (char *)
(42,RET)
(43,dataBuffer)
(44,dataBuffer)
(45,data)
(46,(char *)
(47,char *)
(48,*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^