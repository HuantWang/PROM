-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memmove_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memmove_11_bad()
CWE194_Unexpected_Sign_Extension__fgets_memmove_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(24,9,0)
(12,5,0)
(29,51,0)
(15,60,0)
(37,2,0)
(44,33,0)
(13,58,0)
(53,60,0)
(60,33,0)
(14,5,0)
(47,20,0)
(34,48,0)
(51,8,0)
(8,22,0)
(46,11,0)
(52,28,0)
(32,16,0)
(46,8,0)
(31,62,0)
(38,12,0)
(30,62,0)
(56,12,0)
(27,2,0)
(28,48,0)
(18,12,0)
(28,40,0)
(17,11,0)
(50,5,0)
(41,12,0)
(43,38,0)
(48,35,0)
(16,54,0)
(51,35,0)
(11,60,0)
(21,20,0)
(8,46,0)
(16,60,0)
(0,40,0)
(46,3,0)
(9,8,0)
(40,5,0)
(3,46,0)
(2,21,0)
(4,12,0)
(6,21,0)
(26,40,0)
(11,46,0)
(51,40,0)
(62,31,0)
(33,64,0)
(49,33,0)
(23,51,0)
(45,4,0)
(63,62,0)
(36,9,0)
(65,8,0)
(51,38,0)
(7,28,0)
(28,8,0)
(1,16,0)
(20,12,0)
(25,54,0)
(61,16,0)
(21,2,0)
(59,38,0)
(19,51,0)
(58,42,0)
(4,38,0)
(62,12,0)
(10,31,0)
(9,40,0)
(54,16,0)
(39,31,0)
(28,38,0)
(57,40,1)
(54,25,1)
(37,27,1)
(59,58,1)
(13,54,1)
(55,4,1)
(9,40,1)
(16,60,1)
(45,48,1)
(15,53,1)
(53,57,1)
(36,24,1)
(28,7,1)
(54,16,1)
(46,11,1)
(39,30,1)
(16,32,1)
(38,43,1)
(30,63,1)
(8,46,1)
(9,36,1)
(48,34,1)
(19,9,1)
(45,9,1)
(51,23,1)
(28,38,1)
(51,8,1)
(58,13,1)
(20,47,1)
(4,45,1)
(25,16,1)
(23,29,1)
(51,40,1)
(60,15,1)
(29,19,1)
(28,8,1)
(63,38,1)
(62,31,1)
(59,57,1)
(32,61,1)
(52,51,1)
(1,60,1)
(46,3,1)
(21,2,1)
(27,6,1)
(24,20,1)
(9,8,1)
(11,17,1)
(28,40,1)
(2,37,1)
(40,26,1)
(61,1,1)
(51,38,1)
(17,65,1)
(59,8,1)
(11,60,1)
(47,21,1)
(26,0,1)
(43,59,1)
(6,62,1)
(10,39,1)
(7,52,1)
(65,54,1)
(34,28,1)
(4,38,1)
(31,10,1)
(21,2,2)
(19,9,2)
(16,60,2)
(52,9,2)
(8,54,2)
(51,9,2)
(54,57,2)
(46,54,2)
(29,9,2)
(23,9,2)
(51,40,2)
(8,46,2)
(28,38,2)
(7,9,2)
(54,16,2)
(28,8,2)
(16,57,2)
(9,40,2)
(28,9,2)
(60,57,2)
(13,54,2)
(9,8,2)
(65,54,2)
(61,57,2)
(4,38,2)
(15,57,2)
(25,57,2)
(34,9,2)
(11,60,2)
(1,57,2)
(28,40,2)
(46,3,2)
(53,57,2)
(46,11,2)
(51,8,2)
(48,9,2)
(11,54,2)
(62,31,2)
(17,54,2)
(51,38,2)
(32,57,2)
(58,54,2)
-----------------------------------
(0,data)
(1,inputBuffer)
(2,100-1)
(3,short)
(4,printLine(dest)
(5,)
(6,source)
(7,data)
(8,data = (short)
(9,data < 100)
(10,1)
(11,atoi(inputBuffer)
(12,)
(13,"fgets()
(14,data)
(15,"")
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,inputBuffer)
(18,dest)
(19,dest)
(20,source[100-1] = \\\'\\\\0\\\')
(21,source[100-1])
(22,)
(23,data)
(24,data)
(25,NULL)
(26,0)
(27,100)
(28,dest[data])
(29,source)
(30,\\\'A\\\')
(31,100-1)
(32,stdin)
(33,)
(34,\\\'\\\\0\\\')
(35,)
(36,100)
(37,1)
(38,dest[100] = "")
(39,100)
(40,data = 0)
(41,source)
(42,)
(43,"")
(44,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,dest)
(46,(short)
(47,\\\'\\\\0\\\')
(48,dest[data] = \\\'\\\\0\\\')
(49,inputBuffer)
(50,if(globalReturnsTrue()
(51,memmove(dest, source, data)
(52,dest)
(53,inputBuffer)
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,RET)
(56,if (data < 100)
(57,globalReturnsTrue()
(58,printLine("fgets()
(59,dest)
(60,inputBuffer[CHAR_ARRAY_SIZE] = "")
(61,CHAR_ARRAY_SIZE)
(62,memset(source, \\\'A\\\', 100-1)
(63,source)
(64,)
(65,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^