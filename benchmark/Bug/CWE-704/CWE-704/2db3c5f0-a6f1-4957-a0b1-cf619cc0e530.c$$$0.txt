-----label-----
1
-----code-----
static short badSource(short data)
{
    if(badStatic)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
14,21
15,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
48,50
49,50
49,51
49,52
49,53
49,54
49,55
49,56
49,57
49,58
49,59
49,60
49,61
50,51
51,52
51,53
52,53
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
76,77
79,80
80,81
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
117,120
117,121
118,119
120,121
122,123
122,124
123,124
123,125
124,125
126,127
128,129
129,130
131,132
132,133
133,134
135,136
137,138
139,140
140,141
140,142
141,142
143,144
143,145
143,146
143,147
143,148
144,145
146,147
148,149
150,151
150,152
151,152
155,156
155,157
156,157
156,158
157,158
157,159
158,159
160,161
162,163
162,164
163,164
166,167
168,169
169,170
169,171
170,171
170,172
171,172
173,174
176,177
177,178
177,179
178,179
180,181
180,182
181,182
183,184
185,186
185,187
185,188
186,187
186,188
187,188
187,189
188,189
190,191
192,193
192,194
193,194
195,196
197,198
198,199
199,200
199,201
200,201
202,203
204,205
205,206
206,207
206,208
207,208
209,210
212,213
212,214
213,214
213,215
214,215
216,217
218,219
219,220
220,221
220,222
221,222
223,224
225,226
226,227
-----nextToken-----
2,4,6,8,12,17,19,22,24,28,30,34,36,39,42,44,47,53,56,58,60,62,66,68,70,74,77,78,82,87,88,90,96,97,98,101,103,108,109,112,114,119,121,125,127,130,134,136,138,142,145,147,149,152,153,154,159,161,164,165,167,172,174,175,179,182,184,189,191,194,196,201,203,208,210,211,215,217,222,224,227
-----computeFrom-----
51,52
51,53
64,65
64,66
84,85
84,86
92,93
92,94
105,106
105,107
116,117
116,118
140,141
140,142
150,151
150,152
156,157
156,158
157,158
157,159
162,163
162,164
169,170
169,171
177,178
177,179
186,187
186,188
187,188
187,189
192,193
192,194
199,200
199,201
206,207
206,208
213,214
213,215
-----guardedBy-----
215,224
-----guardedByNegation-----
194,210
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
badStatic
badStatic
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(65,3,0)
(110,30,0)
(114,121,0)
(25,126,0)
(103,57,0)
(128,32,0)
(49,45,0)
(4,66,0)
(93,17,0)
(118,30,0)
(106,19,0)
(76,103,0)
(13,77,0)
(75,66,0)
(146,65,0)
(9,92,0)
(14,95,0)
(108,53,0)
(3,84,0)
(21,122,0)
(103,77,0)
(119,33,0)
(28,50,0)
(27,103,0)
(21,86,0)
(116,58,0)
(63,129,0)
(58,55,0)
(57,103,0)
(31,144,0)
(40,84,0)
(110,58,0)
(130,81,0)
(79,86,0)
(72,60,0)
(117,95,0)
(70,29,0)
(105,92,0)
(144,77,0)
(54,114,0)
(33,126,0)
(88,89,0)
(120,26,0)
(24,84,0)
(107,64,0)
(131,3,0)
(50,19,0)
(55,58,0)
(125,84,0)
(92,9,0)
(65,37,0)
(84,123,0)
(29,89,0)
(114,103,0)
(69,27,0)
(130,32,0)
(122,21,0)
(64,19,0)
(27,41,0)
(135,82,0)
(130,27,0)
(62,60,0)
(132,106,0)
(23,51,0)
(101,3,0)
(42,9,0)
(9,109,0)
(6,130,0)
(34,102,0)
(38,130,0)
(97,122,0)
(19,106,0)
(43,98,0)
(83,44,0)
(58,110,0)
(16,9,0)
(2,127,0)
(60,75,0)
(30,110,0)
(104,77,0)
(33,3,0)
(0,77,0)
(11,129,0)
(100,98,0)
(19,50,0)
(95,77,0)
(126,77,0)
(26,45,0)
(110,126,0)
(138,89,0)
(141,33,0)
(20,27,0)
(142,84,0)
(145,136,0)
(67,122,0)
(68,57,0)
(124,25,0)
(17,121,0)
(85,84,0)
(113,84,0)
(45,26,0)
(129,109,0)
(134,114,0)
(48,144,0)
(91,84,0)
(102,84,0)
(109,77,0)
(1,9,0)
(96,102,0)
(2,136,0)
(121,114,0)
(139,55,0)
(51,110,0)
(15,2,0)
(130,2,0)
(112,126,0)
(19,64,0)
(71,77,0)
(29,8,0)
(36,117,0)
(94,39,0)
(22,17,0)
(87,109,0)
(73,84,0)
(129,0,0)
(8,77,0)
(143,10,0)
(65,126,0)
(98,126,0)
(5,84,0)
(56,50,0)
(82,8,0)
(12,84,0)
(17,103,0)
(45,49,0)
(109,9,0)
(75,77,0)
(52,77,0)
(115,78,0)
(133,49,0)
(137,92,0)
(121,17,0)
(110,51,0)
(59,86,0)
(35,25,0)
(86,109,0)
(2,81,0)
(136,2,0)
(122,109,0)
(61,45,0)
(90,77,0)
(58,116,0)
(27,81,0)
(80,0,0)
(18,117,0)
(111,98,0)
(66,75,0)
(9,126,0)
(126,98,0)
(8,82,0)
(45,77,0)
(89,29,0)
(74,110,0)
(86,21,0)
(135,29,1)
(54,134,1)
(98,43,1)
(141,119,1)
(139,74,1)
(134,17,1)
(26,120,1)
(92,105,1)
(55,139,1)
(19,106,1)
(97,67,1)
(95,14,1)
(35,124,1)
(28,3,1)
(17,103,1)
(75,66,1)
(74,75,1)
(126,98,1)
(36,18,1)
(138,95,1)
(25,126,1)
(119,143,1)
(119,83,1)
(133,61,1)
(11,63,1)
(29,70,1)
(111,112,1)
(107,19,1)
(9,16,1)
(83,21,1)
(120,25,1)
(119,47,1)
(69,121,1)
(114,103,1)
(48,64,1)
(110,30,1)
(96,46,1)
(115,25,1)
(21,86,1)
(65,126,1)
(106,132,1)
(25,35,1)
(118,58,1)
(117,36,1)
(114,54,1)
(63,21,1)
(6,46,1)
(59,79,1)
(67,109,1)
(47,27,1)
(20,69,1)
(137,42,1)
(29,89,1)
(82,135,1)
(23,110,1)
(62,8,1)
(22,103,1)
(2,136,1)
(110,58,1)
(143,64,1)
(121,114,1)
(119,94,1)
(51,110,1)
(94,51,1)
(45,26,1)
(64,107,1)
(6,7,1)
(30,118,1)
(4,60,1)
(87,51,1)
(38,130,1)
(56,28,1)
(15,121,1)
(58,55,1)
(3,101,1)
(112,144,1)
(76,0,1)
(66,4,1)
(19,50,1)
(27,103,1)
(79,122,1)
(6,108,1)
(110,126,1)
(136,145,1)
(31,48,1)
(86,59,1)
(129,109,1)
(43,100,1)
(105,137,1)
(27,81,1)
(88,138,1)
(57,68,1)
(2,81,1)
(9,126,1)
(132,50,1)
(146,33,1)
(130,6,1)
(130,81,1)
(9,92,1)
(45,49,1)
(122,109,1)
(109,9,1)
(1,87,1)
(102,34,1)
(144,31,1)
(101,131,1)
(60,72,1)
(122,97,1)
(34,96,1)
(103,57,1)
(33,126,1)
(93,22,1)
(89,88,1)
(14,117,1)
(28,47,1)
(65,146,1)
(145,15,1)
(130,2,1)
(8,82,1)
(108,7,1)
(17,93,1)
(124,126,1)
(72,62,1)
(50,56,1)
(16,92,1)
(33,141,1)
(0,80,1)
(51,23,1)
(21,122,1)
(7,65,1)
(58,116,1)
(121,17,1)
(49,133,1)
(131,102,1)
(100,111,1)
(33,3,1)
(129,11,1)
(47,2,1)
(27,20,1)
(61,26,1)
(86,109,1)
(64,19,1)
(70,89,1)
(18,45,1)
(65,3,1)
(68,76,1)
(130,27,1)
(42,1,1)
(80,129,1)
(7,33,1)
(119,115,1)
(27,103,2)
(119,46,2)
(27,81,2)
(98,64,2)
(110,25,2)
(7,46,2)
(15,121,2)
(65,3,2)
(9,126,2)
(138,25,2)
(122,51,2)
(2,136,2)
(9,92,2)
(51,25,2)
(107,46,2)
(56,46,2)
(29,89,2)
(130,2,2)
(79,122,2)
(48,64,2)
(17,103,2)
(109,51,2)
(130,81,2)
(135,25,2)
(75,66,2)
(144,64,2)
(145,121,2)
(25,126,2)
(55,25,2)
(63,21,2)
(58,55,2)
(110,30,2)
(118,25,2)
(45,49,2)
(67,51,2)
(89,25,2)
(19,106,2)
(110,58,2)
(121,114,2)
(88,25,2)
(69,121,2)
(50,47,2)
(136,121,2)
(31,64,2)
(64,47,2)
(2,121,2)
(129,21,2)
(19,47,2)
(64,46,2)
(30,25,2)
(131,46,2)
(103,57,2)
(117,25,2)
(102,46,2)
(28,46,2)
(114,17,2)
(18,25,2)
(111,64,2)
(106,47,2)
(95,25,2)
(49,25,2)
(61,25,2)
(4,25,2)
(28,47,2)
(56,47,2)
(20,121,2)
(23,25,2)
(120,25,2)
(100,64,2)
(22,21,2)
(143,64,2)
(34,46,2)
(132,46,2)
(122,109,2)
(134,17,2)
(112,64,2)
(141,46,2)
(3,46,2)
(57,21,2)
(106,46,2)
(110,126,2)
(45,25,2)
(2,81,2)
(35,64,2)
(68,21,2)
(8,82,2)
(17,21,2)
(97,51,2)
(126,98,2)
(146,33,2)
(124,64,2)
(54,17,2)
(121,17,2)
(103,21,2)
(47,21,2)
(45,26,2)
(59,122,2)
(21,122,2)
(19,46,2)
(33,126,2)
(133,25,2)
(66,25,2)
(21,51,2)
(93,21,2)
(130,27,2)
(137,51,2)
(36,25,2)
(94,51,2)
(86,109,2)
(19,50,2)
(33,3,2)
(29,25,2)
(132,47,2)
(25,64,2)
(139,25,2)
(87,51,2)
(42,51,2)
(0,21,2)
(58,116,2)
(8,25,2)
(72,25,2)
(65,126,2)
(14,25,2)
(33,46,2)
(43,64,2)
(11,21,2)
(27,121,2)
(70,25,2)
(129,109,2)
(21,86,2)
(9,51,2)
(75,25,2)
(58,25,2)
(64,19,2)
(62,25,2)
(50,46,2)
(65,33,2)
(83,21,2)
(16,51,2)
(76,21,2)
(86,122,2)
(80,21,2)
(108,7,2)
(107,47,2)
(26,25,2)
(51,110,2)
(96,46,2)
(60,25,2)
(126,64,2)
(114,103,2)
(121,21,2)
(74,25,2)
(1,51,2)
(38,130,2)
(105,51,2)
(109,9,2)
(92,51,2)
(82,25,2)
(101,46,2)
(115,25,2)
-----------------------------------
(0,inputBuffer[recvResult] = \'\\\\0\')
(1,connectSocket)
(2,data = -1)
(3,connectSocket = INVALID_SOCKET)
(4,TCP_PORT)
(5,wsaData)
(6,data)
(7,wsaDataInit)
(8,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(9,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(10,)
(11,recvResult)
(12,recvResult)
(13,if (recvResult == SOCKET_ERROR || recvResult == 0)
(14,AF_INET)
(15,data)
(16,0)
(17,tempInt > SHRT_MAX)
(18,service)
(19,WSAStartup(MAKEWORD(2,2)
(20,tempInt)
(21,recvResult == SOCKET_ERROR || recvResult == 0)
(22,tempInt)
(23,SOCKET_ERROR)
(24,connectSocket)
(25,connectSocket == INVALID_SOCKET)
(26,&service)
(27,data = tempInt)
(28,2)
(29,service.sin_addr.s_addr)
(30,sizeof(service)
(31,1)
(32,)
(33,connectSocket != INVALID_SOCKET)
(34,0)
(35,INVALID_SOCKET)
(36,sin_family)
(37,)
(38,RET)
(39,)
(40,wsaDataInit)
(41,)
(42,inputBuffer)
(43,IPPROTO_TCP)
(44,)
(45,memset(&service, 0, sizeof(service)
(46,badStatic)
(47,0)
(48,wsaDataInit)
(49,sizeof(service)
(50,MAKEWORD(2,2)
(51,connect(connectSocket, (struct sockaddr*)
(52,if (connect(connectSocket, (struct sockaddr*)
(53,)
(54,SHRT_MIN)
(55,&service)
(56,2)
(57,atoi(inputBuffer)
(58,(struct sockaddr*)
(59,0)
(60,service.sin_port)
(61,0)
(62,service)
(63,inputBuffer)
(64,WSAStartup(MAKEWORD(2,2)
(65,CLOSE_SOCKET(connectSocket)
(66,htons(TCP_PORT)
(67,recvResult)
(68,inputBuffer)
(69,data)
(70,s_addr)
(71,if (connectSocket == INVALID_SOCKET)
(72,sin_port)
(73,service)
(74,connectSocket)
(75,service.sin_port = htons(TCP_PORT)
(76,tempInt)
(77,)
(78,)
(79,recvResult)
(80,'\\\\0')
(81,short data)
(82,inet_addr(IP_ADDRESS)
(83,break;)
(84,)
(85,if (connectSocket != INVALID_SOCKET)
(86,recvResult == 0)
(87,recvResult)
(88,sin_addr)
(89,service.sin_addr)
(90,if (WSAStartup(MAKEWORD(2,2)
(91,tempInt)
(92,CHAR_ARRAY_SIZE - 1)
(93,SHRT_MAX)
(94,break;)
(95,service.sin_family = AF_INET)
(96,wsaDataInit)
(97,SOCKET_ERROR)
(98,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(99,\'\\\\0\')
(100,SOCK_STREAM)
(101,INVALID_SOCKET)
(102,wsaDataInit = 0)
(103,tempInt = atoi(inputBuffer)
(104,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(105,1)
(106,&wsaData)
(107,NO_ERROR)
(108,WSACleanup()
(109,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(110,connect(connectSocket, (struct sockaddr*)
(111,AF_INET)
(112,connectSocket)
(113,inputBuffer)
(114,tempInt < SHRT_MIN)
(115,break;)
(116,struct sockaddr*)
(117,service.sin_family)
(118,service)
(119,connectSocket)
(120,service)
(121,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(122,recvResult == SOCKET_ERROR)
(123,)
(124,connectSocket)
(125,if (wsaDataInit)
(126,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(127,)
(128,if(badStatic)
(129,inputBuffer[recvResult])
(130,return data;)
(131,connectSocket)
(132,wsaData)
(133,service)
(134,tempInt)
(135,IP_ADDRESS)
(136,-1)
(137,CHAR_ARRAY_SIZE)
(138,service)
(139,service)
(140,inputBuffer[recvResult] = '\\\\0')
(141,INVALID_SOCKET)
(142,do)
(143,break;)
(144,wsaDataInit = 1)
(145,1)
(146,connectSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^