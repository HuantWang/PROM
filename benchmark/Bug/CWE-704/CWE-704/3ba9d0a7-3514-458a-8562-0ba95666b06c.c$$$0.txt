-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_large_15_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a number larger than CHAR_MAX */
        data = CHAR_MAX + 1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
32,33
33,34
33,35
34,35
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
46,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,31,35,36,37,41,43,47,48,50,54,56
-----computeFrom-----
12,13
12,14
23,24
23,25
26,27
26,28
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_large_15_bad(){    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_large_15_bad()
CWE197_Numeric_Truncation_Error__short_large_15_bad
{    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX + 1;
data = CHAR_MAX + 1
data
data
CHAR_MAX + 1
CHAR_MAX
CHAR_MAX
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(24,19,0)
(21,12,0)
(3,19,0)
(8,2,0)
(10,24,0)
(4,27,0)
(13,8,0)
(20,22,0)
(20,10,0)
(27,8,0)
(29,19,0)
(26,27,0)
(7,10,0)
(20,8,0)
(8,27,0)
(6,2,0)
(15,24,0)
(5,3,0)
(14,3,0)
(23,20,0)
(22,20,0)
(9,2,0)
(3,5,0)
(1,10,0)
(12,2,0)
(10,20,0)
(28,2,0)
(17,5,0)
(1,24,0)
(16,1,0)
(11,19,0)
(20,3,0)
(0,2,0)
(17,14,1)
(26,4,1)
(20,8,1)
(25,1,1)
(13,18,1)
(18,3,1)
(1,10,1)
(7,0,1)
(20,22,1)
(7,6,1)
(1,16,1)
(12,21,1)
(10,20,1)
(16,10,1)
(20,3,1)
(20,23,1)
(5,17,1)
(8,27,1)
(0,8,1)
(23,7,1)
(27,26,1)
(21,18,1)
(3,5,1)
(6,12,1)
(4,13,1)
(20,8,2)
(10,20,2)
(8,18,2)
(12,18,2)
(20,22,2)
(26,18,2)
(1,10,2)
(20,3,2)
(27,18,2)
(6,18,2)
(3,5,2)
(21,18,2)
(8,27,2)
(4,18,2)
(0,18,2)
(13,18,2)
-----------------------------------
(0,break;)
(1,printHexCharLine(charData)
(2,)
(3,data = -1)
(4,CHAR_MAX)
(5,-1)
(6,break;)
(7,charData)
(8,data = CHAR_MAX + 1)
(9,default:)
(10,charData = (char)
(11,switch(6)
(12,printLine("Benign, fixed string")
(13,data)
(14,data)
(15,charData)
(16,charData)
(17,1)
(18,6)
(19,)
(20,(char)
(21,"Benign, fixed string")
(22,char)
(23,data)
(24,)
(25,RET)
(26,1)
(27,CHAR_MAX + 1)
(28,case 6:)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^