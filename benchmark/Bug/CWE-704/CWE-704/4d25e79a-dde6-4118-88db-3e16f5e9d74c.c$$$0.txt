-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,18,20,24,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();
source
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,10,0)
(39,15,0)
(42,6,0)
(23,5,0)
(27,10,0)
(21,3,0)
(34,26,0)
(4,15,0)
(26,34,0)
(34,2,0)
(2,34,0)
(0,7,0)
(20,50,0)
(7,0,0)
(16,50,0)
(23,19,0)
(25,43,0)
(52,2,0)
(15,30,0)
(40,6,0)
(11,30,0)
(24,18,0)
(25,3,0)
(39,30,0)
(33,50,0)
(8,30,0)
(49,15,0)
(48,25,0)
(18,43,0)
(34,15,0)
(43,36,0)
(47,3,0)
(0,50,0)
(6,43,0)
(9,0,0)
(49,30,0)
(1,11,0)
(18,4,0)
(3,30,0)
(2,43,0)
(17,43,0)
(37,4,0)
(10,15,0)
(51,49,0)
(36,43,0)
(5,23,0)
(46,39,0)
(43,50,0)
(3,15,0)
(44,30,0)
(4,18,0)
(15,34,0)
(4,11,0)
(35,25,0)
(32,18,0)
(22,5,0)
(14,7,0)
(13,50,0)
(12,15,0)
(3,25,0)
(10,28,1)
(17,13,1)
(4,18,1)
(15,34,1)
(14,9,1)
(2,43,1)
(12,6,1)
(7,14,1)
(21,47,1)
(49,15,1)
(37,3,1)
(0,7,1)
(42,40,1)
(2,52,1)
(41,6,1)
(27,15,1)
(23,5,1)
(18,43,1)
(35,21,1)
(3,25,1)
(25,48,1)
(39,46,1)
(32,37,1)
(5,22,1)
(25,43,1)
(3,15,1)
(11,1,1)
(1,4,1)
(24,32,1)
(18,24,1)
(28,27,1)
(6,43,1)
(52,12,1)
(4,15,1)
(49,51,1)
(41,39,1)
(34,2,1)
(34,26,1)
(40,43,1)
(43,36,1)
(13,0,1)
(47,23,1)
(39,15,1)
(47,10,1)
(51,11,1)
(6,42,1)
(48,35,1)
(22,10,1)
(10,15,1)
(46,49,1)
(36,17,1)
(4,6,2)
(1,6,2)
(6,43,2)
(52,6,2)
(2,6,2)
(10,15,2)
(18,43,2)
(34,2,2)
(21,6,2)
(46,6,2)
(39,6,2)
(39,15,2)
(22,10,2)
(49,15,2)
(23,10,2)
(25,6,2)
(34,26,2)
(11,6,2)
(5,10,2)
(15,6,2)
(3,15,2)
(28,6,2)
(43,36,2)
(23,5,2)
(0,7,2)
(34,6,2)
(4,15,2)
(48,6,2)
(35,6,2)
(3,25,2)
(49,6,2)
(12,6,2)
(51,6,2)
(10,6,2)
(2,43,2)
(27,6,2)
(4,18,2)
(37,6,2)
(18,6,2)
(25,43,2)
(3,6,2)
(47,6,2)
(32,6,2)
(15,34,2)
(24,6,2)
-----------------------------------
(0,data = -1)
(1,'\\\\0')
(2,malloc(data)
(3,memset(dataBuffer, \'A\', data-1)
(4,dataBuffer[data-1])
(5,-1)
(6,data < 100)
(7,-1)
(8,if (dataBuffer == NULL)
(9,data)
(10,dataBuffer == NULL)
(11,dataBuffer[data-1] = '\\\\0')
(12,dataBuffer)
(13,goto source;)
(14,1)
(15,* dataBuffer = (char *)
(16,if (data < 100)
(17,data)
(18,data-1)
(19,)
(20,data)
(21,\'A\')
(22,1)
(23,exit(-1)
(24,1)
(25,data-1)
(26,char *)
(27,dataBuffer)
(28,NULL)
(29,\'\\\\0\')
(30,)
(31,dataBuffer[data-1] = \'\\\\0\')
(32,data)
(33,source:)
(34,(char *)
(35,data)
(36,RAND32()
(37,dataBuffer)
(38,memset(dataBuffer, 'A', data-1)
(39,free(dataBuffer)
(40,data)
(41,RET)
(42,100)
(43,data = RAND32()
(44,dataBuffer)
(45,'A')
(46,dataBuffer)
(47,dataBuffer)
(48,1)
(49,printLine(dataBuffer)
(50,)
(51,dataBuffer)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^