-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
21,22
21,23
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_10_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }
globalTrue
globalTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,20,0)
(16,6,0)
(40,21,0)
(25,5,0)
(50,7,0)
(43,15,0)
(15,7,0)
(13,20,0)
(20,6,0)
(39,15,0)
(2,49,0)
(36,0,0)
(12,5,0)
(32,7,0)
(52,33,0)
(33,21,0)
(44,0,0)
(28,18,0)
(49,23,0)
(15,0,0)
(49,20,0)
(4,31,0)
(1,32,0)
(0,21,0)
(11,8,0)
(14,32,0)
(8,21,0)
(14,7,0)
(21,5,0)
(10,14,0)
(22,38,0)
(0,6,0)
(53,16,0)
(29,50,0)
(0,15,0)
(35,21,0)
(22,3,0)
(49,32,0)
(31,32,0)
(18,32,0)
(31,33,0)
(32,31,0)
(30,8,0)
(17,6,0)
(24,5,0)
(15,32,0)
(6,45,0)
(23,7,0)
(3,22,0)
(26,18,0)
(31,4,0)
(50,32,0)
(33,31,0)
(46,7,0)
(6,16,0)
(19,7,0)
(42,3,0)
(33,6,0)
(8,6,0)
(27,23,0)
(20,21,0)
(20,49,0)
(43,39,1)
(31,33,1)
(0,21,1)
(26,32,1)
(20,6,1)
(18,32,1)
(0,36,1)
(33,21,1)
(10,50,1)
(33,52,1)
(52,1,1)
(39,22,1)
(2,15,1)
(8,30,1)
(15,32,1)
(11,41,1)
(50,29,1)
(41,21,1)
(49,32,1)
(39,18,1)
(13,51,1)
(32,31,1)
(29,23,1)
(36,44,1)
(21,40,1)
(44,43,1)
(0,6,1)
(14,32,1)
(9,8,1)
(51,2,1)
(53,17,1)
(27,49,1)
(33,6,1)
(17,41,1)
(42,18,1)
(6,16,1)
(30,11,1)
(22,3,1)
(40,35,1)
(23,27,1)
(49,20,1)
(11,6,1)
(16,53,1)
(8,21,1)
(50,32,1)
(15,0,1)
(8,6,1)
(20,21,1)
(1,8,1)
(3,42,1)
(18,28,1)
(28,26,1)
(9,14,1)
(31,4,1)
(14,10,1)
(20,13,1)
(0,21,2)
(20,21,2)
(14,32,2)
(8,21,2)
(27,8,2)
(15,8,2)
(0,6,2)
(50,8,2)
(1,8,2)
(3,18,2)
(43,8,2)
(49,8,2)
(14,8,2)
(6,16,2)
(32,31,2)
(49,20,2)
(44,8,2)
(42,18,2)
(18,32,2)
(2,8,2)
(13,8,2)
(28,8,2)
(26,8,2)
(33,6,2)
(31,8,2)
(52,8,2)
(8,6,2)
(15,32,2)
(16,41,2)
(33,8,2)
(31,33,2)
(49,32,2)
(36,8,2)
(10,8,2)
(20,6,2)
(29,8,2)
(53,41,2)
(22,18,2)
(0,8,2)
(31,4,2)
(15,0,2)
(39,8,2)
(18,8,2)
(32,8,2)
(50,32,2)
(33,21,2)
(22,3,2)
(17,41,2)
(20,8,2)
(51,8,2)
(23,8,2)
(6,41,2)
-----------------------------------
(0,data-1)
(1,dataBuffer)
(2,dataBuffer)
(3,-1)
(4,char *)
(5,)
(6,data = -1)
(7,)
(8,data < 100)
(9,RET)
(10,dataBuffer)
(11,data)
(12,if (data < 100)
(13,1)
(14,free(dataBuffer)
(15,memset(dataBuffer, \'A\', data-1)
(16,-1)
(17,data)
(18,dataBuffer == NULL)
(19,dataBuffer)
(20,data-1)
(21,data = 0)
(22,exit(-1)
(23,dataBuffer[data-1] = '\\\\0')
(24,data)
(25,if(globalTrue)
(26,dataBuffer)
(27,\'\\\\0\')
(28,NULL)
(29,dataBuffer)
(30,100)
(31,(char *)
(32,* dataBuffer = (char *)
(33,malloc(data)
(34,'\\\\0')
(35,data)
(36,1)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,)
(39,dataBuffer)
(40,0)
(41,globalTrue)
(42,1)
(43,\'A\')
(44,data)
(45,)
(46,if (dataBuffer == NULL)
(47,memset(dataBuffer, 'A', data-1)
(48,'A')
(49,dataBuffer[data-1])
(50,printLine(dataBuffer)
(51,data)
(52,data)
(53,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^