-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_13_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_13_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_13_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_13_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,8,0)
(3,47,0)
(53,6,0)
(13,29,0)
(55,38,0)
(44,18,0)
(47,3,0)
(51,45,0)
(30,18,0)
(29,45,0)
(42,55,0)
(0,8,0)
(14,37,0)
(37,22,0)
(27,49,0)
(40,46,0)
(8,3,0)
(9,12,0)
(4,33,0)
(18,30,0)
(26,6,0)
(25,45,0)
(55,42,0)
(28,45,0)
(48,8,0)
(22,33,0)
(24,51,0)
(34,52,0)
(43,45,0)
(49,30,0)
(21,49,0)
(46,30,0)
(39,22,0)
(5,28,0)
(49,22,0)
(3,12,0)
(11,46,0)
(46,22,0)
(12,30,0)
(46,0,0)
(37,30,0)
(49,28,0)
(41,17,0)
(22,36,0)
(0,46,0)
(2,42,0)
(1,30,0)
(12,3,0)
(51,8,0)
(12,22,0)
(32,37,0)
(20,6,0)
(48,45,0)
(30,6,0)
(7,17,0)
(8,45,0)
(0,29,0)
(50,52,0)
(28,49,0)
(17,8,0)
(23,28,0)
(15,0,0)
(3,8,0)
(33,22,0)
(28,8,0)
(31,48,0)
(16,37,1)
(28,8,1)
(10,37,1)
(44,1,1)
(23,17,1)
(48,31,1)
(28,49,1)
(41,7,1)
(46,40,1)
(30,18,1)
(7,8,1)
(0,46,1)
(49,30,1)
(18,44,1)
(16,48,1)
(52,34,1)
(24,29,1)
(34,50,1)
(33,4,1)
(9,10,1)
(3,47,1)
(22,33,1)
(49,22,1)
(40,11,1)
(50,30,1)
(3,12,1)
(23,55,1)
(8,3,1)
(12,9,1)
(21,27,1)
(13,0,1)
(2,17,1)
(4,39,1)
(37,22,1)
(14,22,1)
(31,51,1)
(29,13,1)
(12,30,1)
(55,42,1)
(15,28,1)
(51,8,1)
(42,2,1)
(14,52,1)
(37,30,1)
(11,15,1)
(51,24,1)
(0,8,1)
(17,41,1)
(12,22,1)
(48,8,1)
(37,32,1)
(49,21,1)
(39,52,1)
(46,22,1)
(46,30,1)
(17,8,1)
(5,23,1)
(32,14,1)
(27,5,1)
(55,42,2)
(15,37,2)
(49,30,2)
(22,33,2)
(10,37,2)
(3,37,2)
(0,8,2)
(22,52,2)
(29,37,2)
(2,17,2)
(9,37,2)
(49,22,2)
(23,37,2)
(42,17,2)
(13,37,2)
(12,22,2)
(41,37,2)
(11,37,2)
(51,37,2)
(48,8,2)
(28,8,2)
(7,37,2)
(31,37,2)
(0,37,2)
(30,18,2)
(49,37,2)
(39,52,2)
(24,37,2)
(37,22,2)
(5,37,2)
(17,8,2)
(55,17,2)
(28,49,2)
(51,8,2)
(21,37,2)
(4,52,2)
(28,37,2)
(12,37,2)
(3,47,2)
(17,37,2)
(8,3,2)
(33,52,2)
(27,37,2)
(37,30,2)
(0,46,2)
(46,22,2)
(3,12,2)
(12,30,2)
(46,30,2)
(46,37,2)
(8,37,2)
(48,37,2)
(40,37,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,data)
(2,1)
(3,(char *)
(4,1)
(5,\'A\')
(6,)
(7,dataBuffer)
(8,* dataBuffer = (char *)
(9,data)
(10,dataBuffer)
(11,data)
(12,malloc(data)
(13,\'\\\\0\')
(14,data)
(15,dataBuffer)
(16,RET)
(17,dataBuffer == NULL)
(18,-1)
(19,'A')
(20,if(GLOBAL_CONST_FIVE==5)
(21,1)
(22,data = -1)
(23,dataBuffer)
(24,dataBuffer)
(25,dataBuffer)
(26,if (data < 100)
(27,data)
(28,memset(dataBuffer, \'A\', data-1)
(29,dataBuffer[data-1] = '\\\\0')
(30,data = -1)
(31,dataBuffer)
(32,100)
(33,-1)
(34,5)
(35,memset(dataBuffer, 'A', data-1)
(36,)
(37,data < 100)
(38,)
(39,data)
(40,1)
(41,NULL)
(42,-1)
(43,if (dataBuffer == NULL)
(44,1)
(45,)
(46,data-1)
(47,char *)
(48,free(dataBuffer)
(49,data-1)
(50,GLOBAL_CONST_FIVE)
(51,printLine(dataBuffer)
(52,GLOBAL_CONST_FIVE==5)
(53,data)
(54,dataBuffer[data-1] = \'\\\\0\')
(55,exit(-1)
(56,'\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^