-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
71,72
72,73
72,74
74,75
74,76
76,77
77,78
77,79
78,79
78,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,73,75,79,80,82,86,88
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_15_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(3,14,0)
(12,4,0)
(22,20,0)
(38,30,0)
(37,42,0)
(10,33,0)
(43,27,0)
(14,42,0)
(34,20,0)
(4,17,0)
(27,9,0)
(32,33,0)
(7,17,0)
(5,20,0)
(8,9,0)
(30,38,0)
(2,19,0)
(29,23,0)
(11,36,0)
(36,30,0)
(9,27,0)
(1,5,0)
(40,20,0)
(18,31,0)
(19,36,0)
(30,33,0)
(44,42,0)
(23,19,0)
(26,18,0)
(35,27,0)
(15,20,0)
(17,21,0)
(17,4,0)
(6,28,0)
(28,33,0)
(0,30,0)
(13,27,0)
(36,19,0)
(25,38,0)
(24,14,0)
(4,14,0)
(36,17,0)
(16,36,0)
(36,16,0)
(27,14,0)
(23,28,0)
(19,28,0)
(42,20,0)
(25,0,1)
(22,5,1)
(2,22,1)
(35,13,1)
(24,39,1)
(38,25,1)
(18,26,1)
(2,40,1)
(23,29,1)
(1,39,1)
(36,30,1)
(11,2,1)
(8,27,1)
(5,1,1)
(4,14,1)
(41,23,1)
(36,17,1)
(27,35,1)
(43,14,1)
(13,43,1)
(27,14,1)
(39,30,1)
(4,12,1)
(7,9,1)
(36,16,1)
(40,17,1)
(14,3,1)
(3,24,1)
(30,38,1)
(9,8,1)
(9,27,1)
(40,18,1)
(19,36,1)
(23,19,1)
(26,9,1)
(17,4,1)
(36,11,1)
(12,7,1)
(29,19,1)
(8,39,2)
(22,39,2)
(27,39,2)
(1,39,2)
(12,9,2)
(5,39,2)
(14,39,2)
(4,14,2)
(36,17,2)
(24,39,2)
(17,9,2)
(26,9,2)
(36,30,2)
(17,4,2)
(23,19,2)
(43,39,2)
(19,36,2)
(4,9,2)
(36,16,2)
(9,39,2)
(7,9,2)
(30,38,2)
(13,39,2)
(18,9,2)
(9,27,2)
(3,39,2)
(27,14,2)
(35,39,2)
(40,39,2)
-----------------------------------
(0,data)
(1,"Benign, fixed string")
(2,charData)
(3,"")
(4,atoi(inputBuffer)
(5,printLine("Benign, fixed string")
(6,charData)
(7,data)
(8,NULL)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,switch(6)
(11,data)
(12,inputBuffer)
(13,CHAR_ARRAY_SIZE)
(14,inputBuffer[CHAR_ARRAY_SIZE] = "")
(15,case 6:)
(16,char)
(17,data = atoi(inputBuffer)
(18,printLine("fgets()
(19,charData = (char)
(20,)
(21,)
(22,break;)
(23,printHexCharLine(charData)
(24,inputBuffer)
(25,1)
(26,"fgets()
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,)
(29,charData)
(30,data = -1)
(31,)
(32,data)
(33,)
(34,default:)
(35,stdin)
(36,(char)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,-1)
(39,6)
(40,break;)
(41,RET)
(42,)
(43,inputBuffer)
(44,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^