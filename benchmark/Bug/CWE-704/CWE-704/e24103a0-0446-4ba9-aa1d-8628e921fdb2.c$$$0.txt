-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        /* FLAW: Use a negative number */
        data = -1;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
74,77
74,78
74,79
74,80
75,76
76,77
76,78
78,79
78,80
78,81
81,82
82,83
82,84
83,84
83,85
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
112,113
112,114
113,114
116,117
117,118
117,119
118,119
118,120
119,120
121,122
121,123
122,123
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,73,77,79,80,84,86,89,91,95,97,102,104,108,110,111,114,115,120,123,124,125,129,131,135,137
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
70,71
70,72
93,94
93,95
112,113
112,114
117,118
117,119
121,122
121,123
-----guardedBy-----
72,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_32_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* FLAW: Use a negative number */        data = -1;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = -1;
data = -1
data
data
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(31,9,0)
(56,27,0)
(3,56,0)
(25,74,0)
(57,0,0)
(29,52,0)
(42,66,0)
(32,36,0)
(12,44,0)
(2,73,0)
(37,10,0)
(69,27,0)
(27,53,0)
(11,34,0)
(63,73,0)
(60,58,0)
(61,16,0)
(54,66,0)
(43,23,0)
(52,26,0)
(28,26,0)
(45,74,0)
(68,16,0)
(39,44,0)
(41,0,0)
(8,59,0)
(35,59,0)
(27,16,0)
(23,9,0)
(34,37,0)
(21,47,0)
(7,35,0)
(59,66,0)
(50,53,0)
(45,27,0)
(13,68,0)
(58,68,0)
(9,59,0)
(18,68,0)
(20,16,0)
(75,59,0)
(56,13,0)
(36,26,0)
(23,26,0)
(1,44,0)
(5,28,0)
(74,68,0)
(51,46,0)
(47,59,0)
(37,16,0)
(0,41,0)
(28,35,0)
(52,47,0)
(46,58,0)
(40,12,0)
(26,23,0)
(26,44,0)
(9,23,0)
(28,44,0)
(52,64,0)
(47,52,0)
(1,26,0)
(58,46,0)
(72,47,0)
(13,56,0)
(55,26,0)
(66,16,0)
(49,35,0)
(38,64,0)
(6,16,0)
(53,27,0)
(4,8,0)
(30,37,0)
(12,26,0)
(64,44,0)
(35,28,0)
(41,24,0)
(23,43,0)
(62,44,0)
(34,59,0)
(22,10,0)
(19,1,0)
(73,16,0)
(67,28,0)
(71,13,0)
(70,8,0)
(74,58,0)
(59,34,0)
(15,45,0)
(10,37,0)
(14,36,0)
(3,71,1)
(47,59,1)
(74,25,1)
(40,64,1)
(9,59,1)
(55,8,1)
(11,75,1)
(8,70,1)
(52,26,1)
(70,4,1)
(36,14,1)
(12,40,1)
(35,7,1)
(28,35,1)
(7,49,1)
(0,57,1)
(9,31,1)
(46,51,1)
(27,53,1)
(48,1,1)
(25,45,1)
(60,13,1)
(1,26,1)
(32,26,1)
(35,59,1)
(56,27,1)
(45,15,1)
(67,36,1)
(23,43,1)
(57,36,1)
(58,46,1)
(50,69,1)
(56,3,1)
(49,5,1)
(63,37,1)
(14,32,1)
(41,0,1)
(19,12,1)
(47,72,1)
(38,52,1)
(5,67,1)
(22,30,1)
(34,11,1)
(12,26,1)
(52,47,1)
(30,27,1)
(15,58,1)
(21,29,1)
(71,73,1)
(2,63,1)
(48,8,1)
(29,28,1)
(74,58,1)
(4,59,1)
(1,19,1)
(37,10,1)
(13,56,1)
(72,21,1)
(75,74,1)
(73,2,1)
(59,34,1)
(31,55,1)
(34,37,1)
(28,26,1)
(45,27,1)
(26,23,1)
(53,50,1)
(10,22,1)
(64,38,1)
(36,26,1)
(67,41,1)
(51,60,1)
(8,59,1)
(23,9,1)
(5,8,2)
(56,27,2)
(1,8,2)
(9,59,2)
(55,8,2)
(21,8,2)
(47,59,2)
(32,8,2)
(8,59,2)
(64,8,2)
(26,23,2)
(28,8,2)
(12,8,2)
(52,8,2)
(35,59,2)
(37,10,2)
(58,46,2)
(52,26,2)
(23,43,2)
(41,0,2)
(12,26,2)
(36,8,2)
(59,34,2)
(38,8,2)
(72,8,2)
(49,8,2)
(57,36,2)
(28,26,2)
(74,58,2)
(14,8,2)
(27,53,2)
(34,37,2)
(35,8,2)
(45,27,2)
(52,47,2)
(13,56,2)
(29,8,2)
(67,8,2)
(41,36,2)
(23,8,2)
(26,8,2)
(9,8,2)
(40,8,2)
(28,35,2)
(31,8,2)
(7,8,2)
(36,26,2)
(19,8,2)
(1,26,2)
(23,9,2)
(47,8,2)
(0,36,2)
-----------------------------------
(0,-1)
(1,free(dataBuffer)
(2,0)
(3,dataPtr1)
(4,data)
(5,\'A\')
(6,data)
(7,1)
(8,data < 100)
(9,malloc(data)
(10,&data)
(11,dataPtr2)
(12,printLine(dataBuffer)
(13,data = *dataPtr1)
(14,NULL)
(15,dataPtr1)
(16,)
(17,'A')
(18,data)
(19,dataBuffer)
(20,dataPtr2)
(21,data)
(22,data)
(23,(char *)
(24,)
(25,data)
(26,* dataBuffer = (char *)
(27,*dataPtr1 = &data)
(28,memset(dataBuffer, \'A\', data-1)
(29,dataBuffer)
(30,dataPtr2)
(31,data)
(32,dataBuffer)
(33,memset(dataBuffer, 'A', data-1)
(34,*dataPtr2)
(35,data-1)
(36,dataBuffer == NULL)
(37,*dataPtr2 = &data)
(38,'\\\\0')
(39,if (dataBuffer == NULL)
(40,dataBuffer)
(41,exit(-1)
(42,if (data < 100)
(43,char *)
(44,)
(45,*dataPtr1)
(46,-1)
(47,data-1)
(48,RET)
(49,data)
(50,data)
(51,1)
(52,dataBuffer[data-1])
(53,&data)
(54,data)
(55,dataBuffer)
(56,*dataPtr1)
(57,1)
(58,data = -1)
(59,data = *dataPtr2)
(60,data)
(61,dataPtr1)
(62,dataBuffer)
(63,data)
(64,dataBuffer[data-1] = \'\\\\0\')
(65,dataBuffer[data-1] = '\\\\0')
(66,)
(67,dataBuffer)
(68,)
(69,dataPtr1)
(70,100)
(71,data)
(72,1)
(73,data = 0)
(74,*dataPtr1 = data)
(75,data)
(76,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^