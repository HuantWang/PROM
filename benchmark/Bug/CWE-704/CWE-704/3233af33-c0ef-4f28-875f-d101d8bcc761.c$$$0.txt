-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
44,48
44,49
44,50
45,46
46,47
46,48
48,49
48,50
50,51
52,53
53,54
53,55
55,56
55,57
55,58
57,58
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
68,69
68,70
71,72
72,73
72,74
73,74
73,75
74,75
76,77
76,78
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
87,88
87,89
87,90
87,91
88,89
90,91
92,93
94,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,49,51,54,56,58,60,64,66,67,69,70,75,77,78,79,83,84,89,91,93,95,100,102,103,107,109
-----computeFrom-----
12,13
12,14
17,18
17,19
68,69
68,70
72,73
72,74
76,77
76,78
81,82
81,83
97,98
97,99
-----guardedBy-----
83,102
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_31_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(20,5,0)
(5,51,0)
(23,27,0)
(17,9,0)
(1,8,0)
(51,27,0)
(32,37,0)
(37,33,0)
(53,8,0)
(26,20,0)
(30,43,0)
(9,14,0)
(40,0,0)
(44,35,0)
(6,38,0)
(10,25,0)
(37,5,0)
(12,38,0)
(34,36,0)
(24,12,0)
(10,0,0)
(35,45,0)
(46,21,0)
(37,21,0)
(42,38,0)
(38,51,0)
(48,5,0)
(9,5,0)
(13,51,0)
(45,35,0)
(36,21,0)
(25,38,0)
(16,20,0)
(8,35,0)
(41,43,0)
(35,8,0)
(43,27,0)
(53,51,0)
(3,53,0)
(14,33,0)
(31,10,0)
(2,37,0)
(21,38,0)
(28,14,0)
(49,21,0)
(18,25,0)
(54,53,0)
(29,37,0)
(36,38,0)
(8,27,0)
(15,9,0)
(5,53,0)
(22,51,0)
(50,38,0)
(19,24,0)
(11,24,0)
(7,5,0)
(9,21,0)
(4,0,0)
(12,24,0)
(47,12,0)
(35,44,0)
(52,12,0)
(0,10,0)
(2,29,1)
(35,45,1)
(25,18,1)
(20,16,1)
(40,4,1)
(52,21,1)
(7,53,1)
(9,15,1)
(24,11,1)
(0,40,1)
(53,8,1)
(39,36,1)
(36,34,1)
(31,12,1)
(37,5,1)
(54,8,1)
(9,5,1)
(47,52,1)
(5,53,1)
(34,14,1)
(41,30,1)
(28,9,1)
(17,37,1)
(3,54,1)
(43,41,1)
(11,19,1)
(44,1,1)
(16,26,1)
(46,5,1)
(36,21,1)
(20,5,1)
(14,28,1)
(10,0,1)
(37,32,1)
(5,48,1)
(35,44,1)
(34,20,1)
(26,25,1)
(18,10,1)
(32,2,1)
(12,24,1)
(53,3,1)
(48,7,1)
(19,47,1)
(9,21,1)
(21,49,1)
(1,43,1)
(8,35,1)
(49,46,1)
(15,17,1)
(29,20,1)
(37,21,1)
(4,31,1)
(35,45,2)
(37,5,2)
(37,20,2)
(8,35,2)
(15,20,2)
(12,24,2)
(9,20,2)
(35,44,2)
(17,20,2)
(2,20,2)
(14,20,2)
(28,20,2)
(5,53,2)
(32,20,2)
(29,20,2)
(9,21,2)
(37,21,2)
(53,8,2)
(20,5,2)
(9,5,2)
(36,21,2)
(10,0,2)
-----------------------------------
(0,100-1)
(1,data)
(2,source)
(3,data)
(4,100)
(5,data = dataCopy)
(6,dest)
(7,data)
(8,data = (short)
(9,dest[data])
(10,source[100-1])
(11,1)
(12,memset(source, \\\'A\\\', 100-1)
(13,data)
(14,dest[data] = \\\'\\\\0\\\')
(15,data)
(16,100)
(17,dest)
(18,\\\'\\\\0\\\')
(19,100)
(20,data < 100)
(21,dest[100] = "")
(22,dataCopy)
(23,data)
(24,100-1)
(25,source[100-1] = \\\'\\\\0\\\')
(26,data)
(27,)
(28,\\\'\\\\0\\\')
(29,dest)
(30,data)
(31,source)
(32,data)
(33,)
(34,dest)
(35,(short)
(36,printLine(dest)
(37,memcpy(dest, source, data)
(38,)
(39,RET)
(40,1)
(41,0)
(42,if (data < 100)
(43,data = 0)
(44,RAND32()
(45,short)
(46,dest)
(47,\\\'A\\\')
(48,dataCopy)
(49,"")
(50,source)
(51,)
(52,source)
(53,dataCopy = data)
(54,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^