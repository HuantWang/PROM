-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
69,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,64,66,70,71,73,77,79
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_16_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(37,18,0)
(2,32,0)
(39,15,0)
(33,35,0)
(13,14,0)
(0,39,0)
(25,16,0)
(19,16,0)
(35,23,0)
(31,37,0)
(3,14,0)
(23,35,0)
(37,32,0)
(34,39,0)
(29,26,0)
(14,11,0)
(36,23,0)
(10,25,0)
(4,11,0)
(7,6,0)
(26,14,0)
(12,32,0)
(32,25,0)
(31,18,0)
(27,31,0)
(32,2,0)
(30,11,0)
(5,37,0)
(35,24,0)
(28,38,0)
(32,37,0)
(25,6,0)
(17,18,0)
(20,16,0)
(11,39,0)
(32,35,0)
(18,16,0)
(23,11,0)
(6,25,0)
(1,28,0)
(9,14,0)
(8,15,0)
(14,26,0)
(32,25,1)
(28,1,1)
(12,5,1)
(37,32,1)
(7,10,1)
(22,25,1)
(32,35,1)
(8,28,1)
(32,2,1)
(4,30,1)
(9,3,1)
(29,14,1)
(5,8,1)
(21,31,1)
(31,37,1)
(8,35,1)
(14,11,1)
(23,11,1)
(32,12,1)
(23,36,1)
(25,6,1)
(30,22,1)
(11,4,1)
(26,29,1)
(26,14,1)
(27,37,1)
(1,26,1)
(3,11,1)
(13,9,1)
(36,33,1)
(14,13,1)
(33,26,1)
(6,7,1)
(5,22,1)
(35,23,1)
(31,27,1)
(31,37,2)
(32,2,2)
(33,26,2)
(9,22,2)
(23,26,2)
(14,22,2)
(1,26,2)
(26,14,2)
(36,26,2)
(35,23,2)
(13,22,2)
(37,32,2)
(11,22,2)
(8,22,2)
(30,22,2)
(14,11,2)
(35,26,2)
(3,22,2)
(26,22,2)
(25,6,2)
(28,26,2)
(32,35,2)
(23,11,2)
(32,25,2)
(29,22,2)
(4,22,2)
-----------------------------------
(0,inputBuffer)
(1,"fgets()
(2,char)
(3,inputBuffer)
(4,"")
(5,charData)
(6,-1)
(7,1)
(8,break;)
(9,CHAR_ARRAY_SIZE)
(10,data)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,data)
(13,stdin)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,)
(16,)
(17,charData)
(18,)
(19,while(1)
(20,data)
(21,RET)
(22,1)
(23,atoi(inputBuffer)
(24,)
(25,data = -1)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,charData)
(28,printLine("fgets()
(29,NULL)
(30,inputBuffer)
(31,printHexCharLine(charData)
(32,(char)
(33,data)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,data = atoi(inputBuffer)
(36,inputBuffer)
(37,charData = (char)
(38,)
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^