-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad()
{
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
62,63
-----nextToken-----
2,4,7,12,14,17,20,22,24,29,31,33,35,37,42,45,47,52,53,57,60,61,63,64
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad(){    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }        break;    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_16_bad
{    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }        break;    }}
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
break;
-----joern-----
(9,1,0)
(18,13,0)
(10,21,0)
(9,21,0)
(16,13,0)
(1,7,0)
(21,4,0)
(5,8,0)
(14,7,0)
(6,18,0)
(22,7,0)
(0,13,0)
(9,22,0)
(13,18,0)
(28,7,0)
(3,21,0)
(12,13,0)
(7,23,0)
(25,1,0)
(17,1,0)
(21,10,0)
(19,7,0)
(22,9,0)
(20,9,0)
(2,23,0)
(15,10,0)
(8,30,0)
(11,9,0)
(29,26,0)
(9,11,0)
(5,18,1)
(1,25,1)
(0,16,1)
(18,13,1)
(21,10,1)
(25,17,1)
(9,20,1)
(24,27,1)
(22,9,1)
(9,1,1)
(6,13,1)
(17,27,1)
(8,5,1)
(20,8,1)
(13,12,1)
(15,3,1)
(24,2,1)
(16,1,1)
(20,21,1)
(18,6,1)
(12,0,1)
(2,22,1)
(9,21,1)
(9,11,1)
(3,18,1)
(10,15,1)
(9,27,2)
(20,27,2)
(18,27,2)
(12,27,2)
(16,27,2)
(0,27,2)
(8,18,2)
(1,27,2)
(3,18,2)
(10,18,2)
(2,27,2)
(21,18,2)
(9,11,2)
(18,13,2)
(9,21,2)
(13,27,2)
(6,27,2)
(15,18,2)
(9,1,2)
(22,9,2)
(17,27,2)
(21,10,2)
(25,27,2)
(22,27,2)
(5,18,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,doubleNumber = 0)
(2,break;)
(3,doubleNumber)
(4,)
(5,"fgets()
(6,NULL)
(7,)
(8,printLine("fgets()
(9,(int)
(10,atof(inputBuffer)
(11,int)
(12,stdin)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,inputBuffer)
(16,inputBuffer)
(17,doubleNumber)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,inputBuffer)
(20,doubleNumber)
(21,doubleNumber = atof(inputBuffer)
(22,printIntLine((int)
(23,)
(24,RET)
(25,0)
(26,)
(27,1)
(28,doubleNumber)
(29,while(1)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^