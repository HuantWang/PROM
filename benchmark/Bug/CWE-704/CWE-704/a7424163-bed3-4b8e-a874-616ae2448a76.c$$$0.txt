-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_13_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_13_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_13_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_13_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a negative number */        data = -1;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(36,5,0)
(2,36,0)
(47,1,0)
(15,9,0)
(10,2,0)
(23,16,0)
(13,16,0)
(28,5,0)
(32,10,0)
(30,27,0)
(9,15,0)
(44,5,0)
(51,19,0)
(15,4,0)
(1,36,0)
(9,23,0)
(22,23,0)
(53,41,0)
(18,9,0)
(31,23,0)
(28,36,0)
(48,44,0)
(26,5,0)
(45,27,0)
(25,36,0)
(12,5,0)
(15,36,0)
(41,51,0)
(21,12,0)
(27,43,0)
(21,22,0)
(54,16,0)
(4,15,0)
(38,12,0)
(46,21,0)
(24,5,0)
(9,43,0)
(52,22,0)
(10,23,0)
(6,28,0)
(3,1,0)
(17,43,0)
(43,39,0)
(44,36,0)
(27,23,0)
(51,41,0)
(2,5,0)
(7,39,0)
(35,22,0)
(39,43,0)
(36,15,0)
(43,34,0)
(33,16,0)
(11,10,0)
(8,42,0)
(21,36,0)
(37,23,0)
(14,2,0)
(22,21,0)
(29,42,0)
(2,10,0)
(10,43,0)
(22,43,0)
(0,2,0)
(15,9,1)
(1,3,1)
(2,10,1)
(41,53,1)
(15,4,1)
(12,38,1)
(37,31,1)
(22,35,1)
(36,15,1)
(11,0,1)
(23,37,1)
(21,36,1)
(22,23,1)
(1,36,1)
(47,36,1)
(51,41,1)
(6,12,1)
(27,43,1)
(3,47,1)
(52,46,1)
(14,1,1)
(30,45,1)
(43,39,1)
(10,23,1)
(32,11,1)
(28,6,1)
(45,43,1)
(10,43,1)
(10,32,1)
(2,36,1)
(53,1,1)
(9,23,1)
(22,43,1)
(28,36,1)
(7,17,1)
(45,42,1)
(14,51,1)
(27,23,1)
(55,27,1)
(46,2,1)
(18,25,1)
(48,28,1)
(0,14,1)
(38,21,1)
(21,22,1)
(44,48,1)
(44,36,1)
(17,42,1)
(39,7,1)
(9,43,1)
(27,30,1)
(35,52,1)
(9,18,1)
(55,44,1)
(25,27,1)
(29,23,1)
(42,8,1)
(8,29,1)
(46,27,2)
(22,27,2)
(32,27,2)
(9,27,2)
(10,27,2)
(15,4,2)
(51,41,2)
(38,27,2)
(36,15,2)
(2,27,2)
(22,23,2)
(2,10,2)
(43,42,2)
(48,27,2)
(36,27,2)
(28,27,2)
(17,42,2)
(9,43,2)
(52,27,2)
(41,1,2)
(7,42,2)
(27,23,2)
(51,1,2)
(2,36,2)
(25,27,2)
(18,27,2)
(0,27,2)
(47,27,2)
(53,1,2)
(28,36,2)
(22,43,2)
(15,9,2)
(9,23,2)
(14,27,2)
(43,39,2)
(3,27,2)
(21,22,2)
(11,27,2)
(21,36,2)
(10,43,2)
(12,27,2)
(44,36,2)
(35,27,2)
(10,23,2)
(21,27,2)
(15,27,2)
(1,27,2)
(6,27,2)
(39,42,2)
(44,27,2)
(1,36,2)
(27,43,2)
-----------------------------------
(0,'A')
(1,dataBuffer == NULL)
(2,memset(dataBuffer, 'A', data-1)
(3,NULL)
(4,char *)
(5,)
(6,dataBuffer)
(7,1)
(8,5)
(9,malloc(data)
(10,data-1)
(11,data)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,if (data < 100)
(14,dataBuffer)
(15,(char *)
(16,)
(17,data)
(18,data)
(19,)
(20,memset(dataBuffer, \'A\', data-1)
(21,dataBuffer[data-1])
(22,data-1)
(23,data = 0)
(24,if (dataBuffer == NULL)
(25,dataBuffer)
(26,dataBuffer)
(27,data < 100)
(28,printLine(dataBuffer)
(29,GLOBAL_CONST_FIVE)
(30,100)
(31,data)
(32,1)
(33,if(GLOBAL_CONST_FIVE==5)
(34,)
(35,1)
(36,* dataBuffer = (char *)
(37,0)
(38,\'\\\\0\')
(39,-1)
(40,'\\\\0')
(41,-1)
(42,GLOBAL_CONST_FIVE==5)
(43,data = -1)
(44,free(dataBuffer)
(45,data)
(46,dataBuffer)
(47,dataBuffer)
(48,dataBuffer)
(49,dataBuffer[data-1] = '\\\\0')
(50,\'A\')
(51,exit(-1)
(52,data)
(53,1)
(54,data)
(55,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^