-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,18,23,26,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(33,21,0)
(20,52,0)
(13,20,0)
(43,53,0)
(23,50,0)
(38,16,0)
(25,29,0)
(26,38,0)
(52,21,0)
(48,50,0)
(26,21,0)
(52,38,0)
(45,43,0)
(54,26,0)
(11,10,0)
(42,33,0)
(27,38,0)
(29,21,0)
(20,44,0)
(20,6,0)
(46,52,0)
(40,6,0)
(38,27,0)
(53,44,0)
(1,39,0)
(52,20,0)
(22,5,0)
(47,53,0)
(49,52,0)
(15,44,0)
(53,47,0)
(37,20,0)
(17,16,0)
(43,21,0)
(2,39,0)
(18,29,0)
(18,44,0)
(43,38,0)
(28,44,0)
(18,9,0)
(53,43,0)
(21,33,0)
(12,39,0)
(7,28,0)
(28,6,0)
(44,53,0)
(36,38,0)
(29,18,0)
(14,6,0)
(32,21,0)
(24,29,0)
(3,10,0)
(34,18,0)
(29,38,0)
(5,44,0)
(8,9,0)
(9,6,0)
(50,44,0)
(10,11,0)
(5,6,0)
(21,39,0)
(44,6,0)
(11,35,0)
(4,26,0)
(24,34,1)
(49,13,1)
(18,29,1)
(53,43,1)
(5,22,1)
(3,50,1)
(54,4,1)
(52,38,1)
(43,45,1)
(18,44,1)
(28,44,1)
(20,52,1)
(48,23,1)
(8,18,1)
(23,44,1)
(7,9,1)
(15,26,1)
(52,21,1)
(52,46,1)
(13,37,1)
(28,7,1)
(42,32,1)
(26,38,1)
(5,44,1)
(44,53,1)
(29,21,1)
(34,20,1)
(45,15,1)
(4,0,1)
(36,0,1)
(21,33,1)
(46,49,1)
(10,3,1)
(25,24,1)
(0,21,1)
(50,48,1)
(43,21,1)
(29,38,1)
(26,21,1)
(37,11,1)
(53,47,1)
(38,27,1)
(29,25,1)
(19,26,1)
(33,42,1)
(37,50,1)
(50,44,1)
(11,10,1)
(22,28,1)
(19,5,1)
(20,44,1)
(43,38,1)
(4,17,1)
(17,38,1)
(26,54,1)
(9,8,1)
(27,36,1)
(24,26,2)
(9,26,2)
(26,21,2)
(29,21,2)
(53,26,2)
(52,38,2)
(17,0,2)
(53,43,2)
(28,26,2)
(52,26,2)
(20,26,2)
(38,27,2)
(43,26,2)
(18,29,2)
(45,26,2)
(18,44,2)
(43,38,2)
(22,26,2)
(18,26,2)
(34,26,2)
(36,0,2)
(29,26,2)
(37,26,2)
(48,26,2)
(53,47,2)
(5,44,2)
(20,44,2)
(44,53,2)
(20,52,2)
(43,21,2)
(25,26,2)
(23,26,2)
(29,38,2)
(13,26,2)
(27,0,2)
(15,26,2)
(8,26,2)
(11,10,2)
(44,26,2)
(46,26,2)
(3,50,2)
(49,26,2)
(7,26,2)
(10,50,2)
(28,44,2)
(50,26,2)
(52,21,2)
(26,38,2)
(5,26,2)
(38,0,2)
(50,44,2)
(21,33,2)
(11,50,2)
-----------------------------------
(0,1)
(1,data)
(2,while(1)
(3,1)
(4,data)
(5,free(dataBuffer)
(6,)
(7,dataBuffer)
(8,\'\\\\0\')
(9,dataBuffer[data-1] = \'\\\\0\')
(10,-1)
(11,exit(-1)
(12,if (data < 100)
(13,'A')
(14,if (dataBuffer == NULL)
(15,dataBuffer)
(16,)
(17,break;)
(18,dataBuffer[data-1])
(19,RET)
(20,memset(dataBuffer, \'A\', data-1)
(21,data = -1)
(22,dataBuffer)
(23,dataBuffer)
(24,data)
(25,1)
(26,data < 100)
(27,RAND32()
(28,printLine(dataBuffer)
(29,data-1)
(30,\'A\')
(31,memset(dataBuffer, 'A', data-1)
(32,data)
(33,-1)
(34,dataBuffer)
(35,)
(36,data)
(37,dataBuffer)
(38,data = RAND32()
(39,)
(40,dataBuffer)
(41,'\\\\0')
(42,1)
(43,malloc(data)
(44,* dataBuffer = (char *)
(45,data)
(46,1)
(47,char *)
(48,NULL)
(49,data)
(50,dataBuffer == NULL)
(51,dataBuffer[data-1] = '\\\\0')
(52,data-1)
(53,(char *)
(54,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^