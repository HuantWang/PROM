-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
73,75
73,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,67,69,72,74,76,78,82,84,85,87,88,93,95,96,97,101,102,107,109,111,113,118,120,121,125,127
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
86,87
86,88
90,91
90,92
94,95
94,96
99,100
99,101
115,116
115,117
-----guardedBy-----
39,55
101,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(59,30,0)
(26,64,0)
(37,10,0)
(9,39,0)
(19,30,0)
(52,13,0)
(5,30,0)
(25,13,0)
(18,47,0)
(12,53,0)
(42,53,0)
(29,6,0)
(20,33,0)
(4,20,0)
(15,30,0)
(49,64,0)
(29,10,0)
(13,52,0)
(35,47,0)
(52,15,0)
(28,13,0)
(41,20,0)
(56,35,0)
(56,60,0)
(58,12,0)
(44,59,0)
(46,56,0)
(14,64,0)
(39,3,0)
(34,32,0)
(11,63,0)
(29,56,0)
(36,30,0)
(27,35,0)
(7,48,0)
(30,48,0)
(40,59,0)
(62,15,0)
(53,47,0)
(64,26,0)
(61,37,0)
(17,5,0)
(10,48,0)
(22,30,0)
(32,10,0)
(54,39,0)
(1,32,0)
(21,52,0)
(39,56,0)
(8,26,0)
(55,29,0)
(39,59,0)
(23,6,0)
(6,3,0)
(51,53,0)
(32,56,0)
(26,30,0)
(10,37,0)
(5,59,0)
(47,20,0)
(53,12,0)
(38,53,0)
(0,26,0)
(43,48,0)
(2,10,0)
(35,56,0)
(63,31,0)
(16,47,0)
(24,39,0)
(29,59,0)
(39,10,0)
(45,29,0)
(27,46,1)
(25,28,1)
(53,38,1)
(39,56,1)
(58,53,1)
(14,49,1)
(29,10,1)
(9,54,1)
(40,57,1)
(16,57,1)
(49,8,1)
(8,0,1)
(61,2,1)
(35,27,1)
(29,45,1)
(38,51,1)
(1,15,1)
(24,9,1)
(53,47,1)
(45,55,1)
(29,59,1)
(56,35,1)
(5,17,1)
(0,59,1)
(40,56,1)
(39,10,1)
(28,21,1)
(39,59,1)
(51,42,1)
(47,18,1)
(55,39,1)
(57,10,1)
(32,10,1)
(13,25,1)
(26,64,1)
(52,13,1)
(42,47,1)
(35,47,1)
(5,59,1)
(44,40,1)
(59,44,1)
(10,37,1)
(63,11,1)
(12,58,1)
(32,34,1)
(39,24,1)
(37,61,1)
(18,16,1)
(11,12,1)
(32,56,1)
(62,52,1)
(46,12,1)
(29,56,1)
(17,6,1)
(23,29,1)
(54,32,1)
(64,14,1)
(50,5,1)
(12,53,1)
(40,63,1)
(21,26,1)
(15,62,1)
(17,32,1)
(34,1,1)
(6,23,1)
(53,57,2)
(63,12,2)
(9,32,2)
(46,12,2)
(26,64,2)
(32,56,2)
(16,57,2)
(47,57,2)
(6,32,2)
(51,57,2)
(52,13,2)
(38,57,2)
(39,56,2)
(54,32,2)
(27,12,2)
(10,37,2)
(56,35,2)
(29,32,2)
(58,57,2)
(39,10,2)
(39,59,2)
(32,10,2)
(11,12,2)
(23,32,2)
(24,32,2)
(42,57,2)
(29,59,2)
(18,57,2)
(29,56,2)
(12,57,2)
(56,12,2)
(35,47,2)
(55,32,2)
(12,53,2)
(5,59,2)
(45,32,2)
(35,12,2)
(53,47,2)
(39,32,2)
(29,10,2)
-----------------------------------
(0,source)
(1,data)
(2,data)
(3,)
(4,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,printLine(dest)
(6,dest[data] = \\\'\\\\0\\\')
(7,if(globalReturnsTrue()
(8,\\\'A\\\')
(9,source)
(10,data = -1)
(11,"fgets()
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,100-1)
(14,1)
(15,source[100-1] = \\\'\\\\0\\\')
(16,inputBuffer)
(17,dest)
(18,"")
(19,source)
(20,)
(21,source)
(22,dest)
(23,\\\'\\\\0\\\')
(24,data)
(25,1)
(26,memset(source, \\\'A\\\', 100-1)
(27,inputBuffer)
(28,100)
(29,dest[data])
(30,)
(31,)
(32,data < 100)
(33,)
(34,100)
(35,atoi(inputBuffer)
(36,if (data < 100)
(37,-1)
(38,stdin)
(39,memcpy(dest, source, data)
(40,dest)
(41,inputBuffer)
(42,inputBuffer)
(43,data)
(44,"")
(45,data)
(46,data)
(47,inputBuffer[CHAR_ARRAY_SIZE] = "")
(48,)
(49,100)
(50,RET)
(51,CHAR_ARRAY_SIZE)
(52,source[100-1])
(53,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(54,dest)
(55,dest)
(56,data = atoi(inputBuffer)
(57,globalReturnsTrue()
(58,NULL)
(59,dest[100] = "")
(60,)
(61,1)
(62,\\\'\\\\0\\\')
(63,printLine("fgets()
(64,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^