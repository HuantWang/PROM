-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
20,21
20,22
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_02_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(4,31,0)
(17,48,0)
(43,12,0)
(30,20,0)
(1,42,0)
(27,31,0)
(46,8,0)
(7,25,0)
(33,48,0)
(47,35,0)
(22,8,0)
(5,31,0)
(42,12,0)
(28,7,0)
(10,23,0)
(47,19,0)
(28,48,0)
(45,31,0)
(29,28,0)
(13,4,0)
(19,47,0)
(9,7,0)
(6,31,0)
(3,7,0)
(31,25,0)
(26,5,0)
(20,4,0)
(40,5,0)
(32,43,0)
(47,18,0)
(35,39,0)
(43,48,0)
(48,31,0)
(28,42,0)
(23,7,0)
(38,35,0)
(28,35,0)
(44,43,0)
(43,35,0)
(37,43,0)
(41,33,0)
(2,23,0)
(0,28,0)
(15,40,0)
(23,35,0)
(16,25,0)
(11,40,0)
(5,40,0)
(34,25,0)
(20,8,0)
(8,20,0)
(36,48,0)
(43,7,0)
(18,47,0)
(14,5,0)
(33,31,0)
(35,47,0)
(33,48,1)
(42,1,1)
(46,22,1)
(19,38,1)
(38,24,1)
(0,43,1)
(48,17,1)
(8,46,1)
(23,10,1)
(40,15,1)
(32,44,1)
(43,37,1)
(22,30,1)
(23,35,1)
(21,33,1)
(47,19,1)
(15,11,1)
(47,18,1)
(28,7,1)
(33,41,1)
(35,47,1)
(1,28,1)
(7,3,1)
(10,2,1)
(13,20,1)
(23,7,1)
(43,35,1)
(36,24,1)
(5,40,1)
(2,4,1)
(43,7,1)
(44,23,1)
(4,13,1)
(3,9,1)
(28,35,1)
(41,23,1)
(14,26,1)
(37,32,1)
(28,29,1)
(17,36,1)
(26,48,1)
(30,5,1)
(41,42,1)
(20,8,1)
(36,35,1)
(11,14,1)
(43,48,1)
(24,7,1)
(29,0,1)
(28,48,1)
(38,24,2)
(44,23,2)
(47,19,2)
(43,35,2)
(20,8,2)
(32,23,2)
(43,7,2)
(5,40,2)
(33,48,2)
(0,23,2)
(37,23,2)
(28,35,2)
(28,48,2)
(29,23,2)
(28,23,2)
(35,24,2)
(47,18,2)
(35,47,2)
(23,7,2)
(19,24,2)
(42,23,2)
(28,7,2)
(1,23,2)
(43,23,2)
(43,48,2)
(47,24,2)
(23,35,2)
-----------------------------------
(0,dest)
(1,\\\'\\\\0\\\')
(2,data)
(3,0)
(4,source[100-1] = \\\'\\\\0\\\')
(5,memset(source, \\\'A\\\', 100-1)
(6,if (data < 100)
(7,data = 0)
(8,100-1)
(9,data)
(10,100)
(11,100)
(12,)
(13,\\\'\\\\0\\\')
(14,\\\'A\\\')
(15,1)
(16,if(1)
(17,"")
(18,short)
(19,RAND32()
(20,source[100-1])
(21,RET)
(22,100)
(23,data < 100)
(24,1)
(25,)
(26,source)
(27,dest)
(28,dest[data])
(29,data)
(30,source)
(31,)
(32,source)
(33,printLine(dest)
(34,data)
(35,data = (short)
(36,dest)
(37,data)
(38,data)
(39,)
(40,100-1)
(41,dest)
(42,dest[data] = \\\'\\\\0\\\')
(43,memmove(dest, source, data)
(44,dest)
(45,source)
(46,1)
(47,(short)
(48,dest[100] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^