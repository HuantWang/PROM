-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a negative number */
    data = -1;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
49,50
49,51
50,51
53,54
53,55
53,56
53,57
53,58
53,59
54,55
55,56
55,57
57,58
57,59
57,60
60,61
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
91,92
91,93
92,93
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
101,102
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,33,34,36,40,42,46,47,51,52,56,58,59,63,65,68,70,74,76,81,83,87,89,90,93,94,99,102,103,104,108,110,114,116
-----computeFrom-----
18,19
18,20
24,25
24,26
30,31
30,32
49,50
49,51
72,73
72,74
91,92
91,93
96,97
96,98
100,101
100,102
-----guardedBy-----
51,102
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
data = -1;
data = -1
data
data
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,23,0)
(60,33,0)
(25,64,0)
(13,1,0)
(41,42,0)
(59,36,0)
(26,14,0)
(36,42,0)
(29,44,0)
(18,1,0)
(4,33,0)
(44,14,0)
(42,0,0)
(10,62,0)
(35,44,0)
(32,0,0)
(56,43,0)
(7,0,0)
(23,42,0)
(1,14,0)
(5,21,0)
(31,14,0)
(20,33,0)
(30,41,0)
(27,9,0)
(46,60,0)
(8,62,0)
(26,44,0)
(2,23,0)
(17,33,0)
(36,9,0)
(61,53,0)
(34,33,0)
(34,60,0)
(9,44,0)
(1,44,0)
(39,41,0)
(20,11,0)
(48,29,0)
(1,41,0)
(41,1,0)
(22,42,0)
(37,20,0)
(3,34,0)
(0,42,0)
(11,20,0)
(16,44,0)
(6,53,0)
(12,60,0)
(40,16,0)
(16,14,0)
(51,12,0)
(21,14,0)
(53,34,0)
(9,27,0)
(38,14,0)
(43,42,0)
(63,26,0)
(44,9,0)
(60,12,0)
(2,21,0)
(24,28,0)
(52,43,0)
(58,29,0)
(25,28,0)
(62,33,0)
(28,25,0)
(42,62,0)
(9,36,0)
(2,44,0)
(19,23,0)
(15,2,0)
(49,11,0)
(23,2,0)
(2,44,1)
(1,44,1)
(5,2,1)
(25,28,1)
(45,15,1)
(3,53,1)
(9,36,1)
(11,49,1)
(41,30,1)
(43,42,1)
(40,26,1)
(30,39,1)
(57,43,1)
(34,60,1)
(58,44,1)
(57,16,1)
(60,12,1)
(44,9,1)
(18,25,1)
(52,42,1)
(32,22,1)
(29,44,1)
(7,32,1)
(39,13,1)
(18,29,1)
(36,42,1)
(53,6,1)
(24,29,1)
(35,43,1)
(42,0,1)
(12,51,1)
(1,41,1)
(43,56,1)
(48,58,1)
(9,27,1)
(29,48,1)
(21,5,1)
(2,23,1)
(20,11,1)
(16,40,1)
(46,20,1)
(16,44,1)
(59,35,1)
(49,37,1)
(19,45,1)
(23,42,1)
(0,7,1)
(34,3,1)
(23,19,1)
(13,18,1)
(22,34,1)
(61,60,1)
(51,46,1)
(63,21,1)
(26,44,1)
(6,61,1)
(26,63,1)
(28,24,1)
(36,59,1)
(41,42,1)
(15,1,1)
(56,52,1)
(44,9,2)
(58,43,2)
(59,43,2)
(39,43,2)
(28,29,2)
(48,43,2)
(1,41,2)
(9,27,2)
(40,43,2)
(34,60,2)
(30,43,2)
(1,44,2)
(35,43,2)
(60,12,2)
(16,44,2)
(15,43,2)
(42,0,2)
(26,44,2)
(25,28,2)
(5,43,2)
(23,42,2)
(2,44,2)
(19,43,2)
(41,43,2)
(24,29,2)
(43,42,2)
(41,42,2)
(26,43,2)
(25,29,2)
(21,43,2)
(2,23,2)
(9,43,2)
(23,43,2)
(36,43,2)
(20,11,2)
(29,44,2)
(2,43,2)
(44,43,2)
(18,43,2)
(45,43,2)
(9,36,2)
(36,42,2)
(1,43,2)
(63,43,2)
(13,43,2)
(16,43,2)
(29,43,2)
-----------------------------------
(0,myUnion.unionSecond)
(1,memset(dataBuffer, 'A', data-1)
(2,dataBuffer[data-1])
(3,data)
(4,data)
(5,'\\\\0')
(6,unionFirst)
(7,unionSecond)
(8,if (data < 100)
(9,(char *)
(10,data)
(11,-1)
(12,-1)
(13,\'A\')
(14,)
(15,dataBuffer)
(16,free(dataBuffer)
(17,myUnion)
(18,dataBuffer)
(19,1)
(20,data = -1)
(21,dataBuffer[data-1] = '\\\\0')
(22,data)
(23,data-1)
(24,1)
(25,exit(-1)
(26,printLine(dataBuffer)
(27,char *)
(28,-1)
(29,dataBuffer == NULL)
(30,1)
(31,if (dataBuffer == NULL)
(32,myUnion)
(33,)
(34,myUnion.unionFirst = data)
(35,dataBuffer)
(36,malloc(data)
(37,data)
(38,dataBuffer)
(39,data)
(40,dataBuffer)
(41,data-1)
(42,data = myUnion.unionSecond)
(43,data < 100)
(44,* dataBuffer = (char *)
(45,data)
(46,data)
(47,\'\\\\0\')
(48,NULL)
(49,1)
(50,'A')
(51,1)
(52,data)
(53,myUnion.unionFirst)
(54,dataBuffer[data-1] = \'\\\\0\')
(55,memset(dataBuffer, \'A\', data-1)
(56,100)
(57,RET)
(58,dataBuffer)
(59,data)
(60,data = -1)
(61,myUnion)
(62,)
(63,dataBuffer)
(64,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^