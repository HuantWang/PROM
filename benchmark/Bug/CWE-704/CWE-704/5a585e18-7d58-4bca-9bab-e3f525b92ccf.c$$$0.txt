-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_14_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(29,13,0)
(4,6,0)
(7,17,0)
(10,27,0)
(35,11,0)
(15,7,0)
(8,20,0)
(44,28,0)
(13,11,0)
(21,11,0)
(16,7,0)
(36,39,0)
(12,11,0)
(25,35,0)
(37,46,0)
(13,6,0)
(1,15,0)
(35,25,0)
(18,7,0)
(41,28,0)
(30,6,0)
(11,28,0)
(31,35,0)
(26,11,0)
(25,7,0)
(6,13,0)
(24,40,0)
(14,11,0)
(39,7,0)
(47,26,0)
(5,17,0)
(34,27,0)
(9,16,0)
(42,27,0)
(19,33,0)
(17,5,0)
(50,46,0)
(2,28,0)
(6,27,0)
(24,12,0)
(49,13,0)
(17,7,0)
(38,24,0)
(32,35,0)
(25,10,0)
(15,27,0)
(6,7,0)
(39,27,0)
(3,24,0)
(33,43,0)
(7,27,0)
(45,10,0)
(46,11,0)
(51,12,0)
(17,26,0)
(48,20,0)
(43,52,0)
(12,24,0)
(0,16,0)
(23,25,0)
(26,17,0)
(43,33,0)
(25,35,1)
(26,47,1)
(24,12,1)
(17,5,1)
(16,7,1)
(30,4,1)
(20,8,1)
(4,43,1)
(13,49,1)
(15,1,1)
(50,20,1)
(38,20,1)
(8,48,1)
(3,38,1)
(45,25,1)
(50,24,1)
(49,29,1)
(4,16,1)
(11,21,1)
(25,7,1)
(19,16,1)
(9,7,1)
(18,46,1)
(43,33,1)
(37,50,1)
(31,32,1)
(47,18,1)
(33,19,1)
(36,10,1)
(10,45,1)
(15,7,1)
(32,23,1)
(6,7,1)
(21,14,1)
(51,3,1)
(1,39,1)
(39,36,1)
(17,26,1)
(0,9,1)
(22,15,1)
(12,11,1)
(13,11,1)
(22,46,1)
(23,6,1)
(26,11,1)
(16,0,1)
(39,7,1)
(7,17,1)
(46,37,1)
(35,31,1)
(48,11,1)
(35,11,1)
(29,30,1)
(12,51,1)
(46,11,1)
(6,13,1)
(17,5,2)
(17,46,2)
(6,7,2)
(39,7,2)
(19,16,2)
(12,20,2)
(35,46,2)
(33,16,2)
(15,7,2)
(7,17,2)
(13,46,2)
(12,11,2)
(16,46,2)
(17,26,2)
(36,46,2)
(15,46,2)
(51,20,2)
(24,20,2)
(39,46,2)
(18,46,2)
(43,16,2)
(43,33,2)
(46,11,2)
(47,46,2)
(29,46,2)
(26,46,2)
(0,46,2)
(7,46,2)
(49,46,2)
(30,46,2)
(26,11,2)
(23,46,2)
(4,46,2)
(24,12,2)
(10,46,2)
(45,46,2)
(38,20,2)
(25,7,2)
(6,46,2)
(25,35,2)
(16,7,2)
(6,13,2)
(9,46,2)
(13,11,2)
(25,46,2)
(1,46,2)
(31,46,2)
(35,11,2)
(3,20,2)
(32,46,2)
-----------------------------------
(0,NULL)
(1,dataBuffer)
(2,if (data < 100)
(3,"%hd")
(4,dataBuffer)
(5,char *)
(6,memset(dataBuffer, \\\'A\\\', data-1)
(7,* dataBuffer = (char *)
(8,5)
(9,dataBuffer)
(10,dataBuffer[data-1] = \\\'\\\\0\\\')
(11,data = 0)
(12,&data)
(13,data-1)
(14,data)
(15,free(dataBuffer)
(16,dataBuffer == NULL)
(17,(char *)
(18,dataBuffer)
(19,1)
(20,globalFive==5)
(21,0)
(22,RET)
(23,dataBuffer)
(24,fscanf (stdin, "%hd", &data)
(25,dataBuffer[data-1])
(26,malloc(data)
(27,)
(28,)
(29,data)
(30,\\\'A\\\')
(31,1)
(32,data)
(33,-1)
(34,dataBuffer)
(35,data-1)
(36,dataBuffer)
(37,100)
(38,stdin)
(39,printLine(dataBuffer)
(40,)
(41,data)
(42,if (dataBuffer == NULL)
(43,exit(-1)
(44,if(globalFive==5)
(45,\\\'\\\\0\\\')
(46,data < 100)
(47,data)
(48,globalFive)
(49,1)
(50,data)
(51,data)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^