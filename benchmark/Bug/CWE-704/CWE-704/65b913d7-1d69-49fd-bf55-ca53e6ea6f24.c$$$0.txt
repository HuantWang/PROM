-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_34_bad()
{
    short data;
    CWE197_Numeric_Truncation_Error__short_rand_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a random number */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
31,32
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
57,58
57,59
59,60
60,61
60,62
61,62
61,63
64,65
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,14,16,20,22,26,29,30,33,38,39,41,45,47,51,52,56,58,62,63,65,69,71
-----computeFrom-----
18,19
18,20
24,25
24,26
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_34_bad(){    short data;    CWE197_Numeric_Truncation_Error__short_rand_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a random number */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_rand_34_bad()
CWE197_Numeric_Truncation_Error__short_rand_34_bad
{    short data;    CWE197_Numeric_Truncation_Error__short_rand_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a random number */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
CWE197_Numeric_Truncation_Error__short_rand_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_rand_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_rand_34_unionType
CWE197_Numeric_Truncation_Error__short_rand_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(2,7,0)
(12,20,0)
(27,20,0)
(31,27,0)
(20,7,0)
(6,4,0)
(1,11,0)
(17,14,0)
(2,16,0)
(8,2,0)
(33,10,0)
(23,16,0)
(13,19,0)
(4,32,0)
(32,7,0)
(16,2,0)
(15,24,0)
(18,32,0)
(14,27,0)
(9,7,0)
(26,4,0)
(27,14,0)
(11,7,0)
(22,10,0)
(19,21,0)
(21,19,0)
(28,10,0)
(22,28,0)
(28,19,0)
(29,28,0)
(24,15,0)
(24,11,0)
(24,3,0)
(19,27,0)
(10,20,0)
(5,14,0)
(19,28,0)
(30,22,0)
(11,24,0)
(0,7,0)
(32,11,0)
(3,24,0)
(28,19,1)
(5,31,1)
(16,23,1)
(32,11,1)
(19,13,1)
(13,29,1)
(27,14,1)
(2,16,1)
(26,6,1)
(31,32,1)
(19,27,1)
(22,30,1)
(22,28,1)
(29,27,1)
(4,26,1)
(25,22,1)
(19,21,1)
(14,17,1)
(3,1,1)
(30,28,1)
(6,11,1)
(11,24,1)
(23,8,1)
(32,18,1)
(17,5,1)
(1,2,1)
(24,3,1)
(24,15,1)
(18,4,1)
(22,28,2)
(24,3,2)
(2,16,2)
(19,27,2)
(27,14,2)
(32,11,2)
(28,19,2)
(19,21,2)
(11,24,2)
(24,15,2)
-----------------------------------
(0,data)
(1,data)
(2,data = -1)
(3,RAND32()
(4,myUnion.unionFirst)
(5,myUnion)
(6,myUnion)
(7,)
(8,data)
(9,myUnion)
(10,)
(11,data = (short)
(12,data)
(13,data)
(14,myUnion.unionSecond)
(15,short)
(16,-1)
(17,unionSecond)
(18,data)
(19,(char)
(20,)
(21,char)
(22,printHexCharLine(charData)
(23,1)
(24,(short)
(25,RET)
(26,unionFirst)
(27,data = myUnion.unionSecond)
(28,charData = (char)
(29,charData)
(30,charData)
(31,data)
(32,myUnion.unionFirst = data)
(33,charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^