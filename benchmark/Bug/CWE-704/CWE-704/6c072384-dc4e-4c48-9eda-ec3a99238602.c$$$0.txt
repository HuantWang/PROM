-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
57,58
59,60
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
69,70
71,72
71,73
71,74
71,75
71,76
71,77
72,73
73,74
73,75
75,76
75,77
77,78
79,80
80,81
80,82
82,83
82,84
82,85
84,85
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
95,96
95,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
114,115
114,116
114,117
114,118
115,116
117,118
119,120
121,122
123,124
124,125
124,126
125,126
125,127
126,127
128,129
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,58,60,64,66,70,74,76,78,81,83,85,87,91,93,94,96,97,102,104,105,106,110,111,116,118,120,122,127,129,130,134,136
-----computeFrom-----
32,33
32,34
48,49
48,50
55,56
55,57
95,96
95,97
99,100
99,101
103,104
103,105
108,109
108,110
124,125
124,126
-----guardedBy-----
110,129
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(54,36,0)
(2,34,0)
(50,13,0)
(42,39,0)
(48,54,0)
(34,8,0)
(14,24,0)
(1,28,0)
(18,17,0)
(12,18,0)
(11,14,0)
(56,14,0)
(62,6,0)
(45,65,0)
(68,24,0)
(33,6,0)
(65,24,0)
(4,35,0)
(36,46,0)
(10,8,0)
(40,64,0)
(11,34,0)
(32,68,0)
(16,14,0)
(61,35,0)
(69,6,0)
(6,39,0)
(63,54,0)
(27,14,0)
(3,39,0)
(43,24,0)
(30,59,0)
(67,35,0)
(13,47,0)
(46,36,0)
(29,67,0)
(26,64,0)
(47,9,0)
(52,24,0)
(23,8,0)
(15,39,0)
(64,40,0)
(70,24,0)
(58,36,0)
(49,46,0)
(57,69,0)
(38,11,0)
(47,13,0)
(8,68,0)
(19,16,0)
(25,6,0)
(7,24,0)
(9,39,0)
(39,65,0)
(55,43,0)
(14,16,0)
(53,9,0)
(28,43,0)
(36,65,0)
(21,13,0)
(27,59,0)
(31,69,0)
(35,39,0)
(20,67,0)
(64,24,0)
(22,27,0)
(43,28,0)
(46,64,0)
(37,18,0)
(59,27,0)
(69,0,0)
(8,10,0)
(5,69,0)
(69,36,0)
(59,68,0)
(44,40,0)
(17,0,0)
(35,67,0)
(18,36,0)
(62,39,0)
(51,17,0)
(60,47,0)
(18,6,0)
(34,68,0)
(41,62,0)
(19,56,1)
(21,50,1)
(18,12,1)
(64,40,1)
(44,26,1)
(11,14,1)
(13,21,1)
(1,55,1)
(31,5,1)
(51,18,1)
(22,30,1)
(33,25,1)
(29,4,1)
(58,34,1)
(28,1,1)
(41,17,1)
(59,27,1)
(12,37,1)
(11,38,1)
(9,53,1)
(55,64,1)
(36,46,1)
(63,9,1)
(57,54,1)
(4,61,1)
(43,28,1)
(67,20,1)
(50,60,1)
(16,19,1)
(40,44,1)
(27,14,1)
(2,11,1)
(62,41,1)
(18,36,1)
(14,16,1)
(53,47,1)
(47,13,1)
(69,36,1)
(30,43,1)
(49,58,1)
(46,64,1)
(48,63,1)
(23,59,1)
(69,6,1)
(37,69,1)
(34,2,1)
(26,14,1)
(8,10,1)
(18,6,1)
(41,54,1)
(61,6,1)
(54,48,1)
(10,23,1)
(34,8,1)
(6,33,1)
(69,31,1)
(17,51,1)
(66,62,1)
(35,67,1)
(5,57,1)
(38,8,1)
(25,36,1)
(46,49,1)
(62,6,1)
(20,29,1)
(27,22,1)
(60,35,1)
(54,36,1)
(54,36,2)
(18,6,2)
(35,67,2)
(34,8,2)
(27,14,2)
(18,54,2)
(31,54,2)
(47,13,2)
(64,40,2)
(62,6,2)
(17,54,2)
(46,64,2)
(18,36,2)
(11,14,2)
(36,46,2)
(37,54,2)
(8,10,2)
(12,54,2)
(57,54,2)
(51,54,2)
(5,54,2)
(69,54,2)
(59,27,2)
(14,16,2)
(69,6,2)
(69,36,2)
(43,28,2)
-----------------------------------
(0,)
(1,1)
(2,data)
(3,if (data < 100)
(4,\\\'A\\\')
(5,source)
(6,dest[100] = "")
(7,dataPtr2)
(8,data = RAND32()
(9,source[100-1] = \\\'\\\\0\\\')
(10,RAND32()
(11,*dataPtr1)
(12,data)
(13,100-1)
(14,*dataPtr1 = &data)
(15,dest)
(16,&data)
(17,dest[data] = \\\'\\\\0\\\')
(18,dest[data])
(19,data)
(20,1)
(21,1)
(22,dataPtr1)
(23,data)
(24,)
(25,dest)
(26,dataPtr2)
(27,*dataPtr1)
(28,-1)
(29,100)
(30,data)
(31,data)
(32,data)
(33,"")
(34,*dataPtr1 = data)
(35,memset(source, \\\'A\\\', 100-1)
(36,data = *dataPtr2)
(37,dest)
(38,dataPtr1)
(39,)
(40,&data)
(41,dest)
(42,source)
(43,data = -1)
(44,data)
(45,data)
(46,*dataPtr2)
(47,source[100-1])
(48,100)
(49,dataPtr2)
(50,100)
(51,\\\'\\\\0\\\')
(52,data)
(53,\\\'\\\\0\\\')
(54,data < 100)
(55,data)
(56,dataPtr1)
(57,dest)
(58,data)
(59,data = *dataPtr1)
(60,source)
(61,source)
(62,printLine(dest)
(63,data)
(64,*dataPtr2 = &data)
(65,)
(66,RET)
(67,100-1)
(68,)
(69,strncpy(dest, source, data)
(70,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^