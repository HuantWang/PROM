-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,66
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(10,15,0)
(21,10,0)
(2,12,0)
(19,20,0)
(7,25,0)
(6,3,0)
(5,27,0)
(27,28,0)
(27,5,0)
(4,26,0)
(15,10,0)
(0,12,0)
(18,15,0)
(12,27,0)
(14,27,0)
(13,12,0)
(11,15,0)
(30,4,0)
(12,13,0)
(12,20,0)
(12,2,0)
(20,4,0)
(24,29,0)
(29,8,0)
(17,20,0)
(1,25,0)
(23,4,0)
(16,5,0)
(13,4,0)
(31,4,0)
(9,15,0)
(12,27,1)
(20,17,1)
(15,11,1)
(0,29,1)
(21,15,1)
(10,21,1)
(22,13,1)
(12,0,1)
(13,12,1)
(24,10,1)
(18,20,1)
(19,25,1)
(12,2,1)
(25,1,1)
(14,10,1)
(0,27,1)
(16,14,1)
(29,24,1)
(22,25,1)
(17,19,1)
(9,18,1)
(10,15,1)
(5,16,1)
(11,9,1)
(12,20,1)
(1,7,1)
(27,5,1)
(19,25,2)
(9,25,2)
(21,25,2)
(27,5,2)
(17,25,2)
(24,10,2)
(12,25,2)
(5,10,2)
(13,12,2)
(12,20,2)
(10,25,2)
(0,25,2)
(16,10,2)
(11,25,2)
(12,2,2)
(12,27,2)
(15,25,2)
(14,10,2)
(10,15,2)
(13,25,2)
(20,25,2)
(18,25,2)
(29,10,2)
(27,10,2)
-----------------------------------
(0,doubleNumber)
(1,5)
(2,float)
(3,)
(4,)
(5,atof(inputBuffer)
(6,if(GLOBAL_CONST_FIVE==5)
(7,GLOBAL_CONST_FIVE)
(8,)
(9,CHAR_ARRAY_SIZE)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,stdin)
(12,(float)
(13,printFloatLine((float)
(14,doubleNumber)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,inputBuffer)
(17,0)
(18,inputBuffer)
(19,doubleNumber)
(20,doubleNumber = 0)
(21,NULL)
(22,RET)
(23,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,"fgets()
(25,GLOBAL_CONST_FIVE==5)
(26,)
(27,doubleNumber = atof(inputBuffer)
(28,)
(29,printLine("fgets()
(30,doubleNumber)
(31,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^