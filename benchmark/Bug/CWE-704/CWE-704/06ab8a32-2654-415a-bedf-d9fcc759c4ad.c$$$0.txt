-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
70,73
70,74
70,75
70,76
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
108,110
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
117,119
118,119
122,123
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,69,73,75,76,80,82,85,87,91,93,98,100,104,106,107,110,111,116,119,120,121,125,127,131,133
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
66,67
66,68
89,90
89,91
108,109
108,110
113,114
113,115
117,118
117,119
-----guardedBy-----
38,58
68,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_08_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(23,44,0)
(48,66,0)
(14,9,0)
(30,26,0)
(51,4,0)
(10,3,0)
(34,21,0)
(8,10,0)
(36,9,0)
(45,17,0)
(44,37,0)
(45,9,0)
(18,17,0)
(65,51,0)
(67,36,0)
(31,38,0)
(61,37,0)
(1,3,0)
(9,29,0)
(51,16,0)
(3,50,0)
(21,9,0)
(57,30,0)
(10,8,0)
(15,66,0)
(4,3,0)
(43,4,0)
(66,30,0)
(63,44,0)
(17,37,0)
(51,9,0)
(9,45,0)
(44,14,0)
(47,25,0)
(8,66,0)
(25,54,0)
(20,25,0)
(59,2,0)
(4,51,0)
(44,3,0)
(32,14,0)
(54,25,0)
(53,61,0)
(46,0,0)
(24,29,0)
(58,14,0)
(14,29,0)
(55,59,0)
(0,9,0)
(25,66,0)
(16,29,0)
(17,3,0)
(11,37,0)
(13,38,0)
(56,61,0)
(0,29,0)
(5,9,0)
(28,29,0)
(35,10,0)
(10,35,0)
(3,10,0)
(6,4,0)
(27,25,0)
(36,29,0)
(17,45,0)
(62,30,0)
(4,37,0)
(12,45,0)
(64,54,0)
(49,37,0)
(41,21,0)
(33,39,0)
(61,3,0)
(37,38,0)
(22,33,0)
(45,12,0)
(7,55,0)
(19,16,0)
(40,38,0)
(59,55,0)
(42,8,0)
(14,44,0)
(25,66,1)
(56,60,1)
(49,11,1)
(37,49,1)
(56,33,1)
(56,3,1)
(14,9,1)
(61,37,1)
(21,34,1)
(19,51,1)
(52,36,1)
(61,3,1)
(45,12,1)
(32,21,1)
(61,53,1)
(3,10,1)
(6,65,1)
(10,35,1)
(42,1,1)
(22,54,1)
(9,45,1)
(17,18,1)
(44,23,1)
(51,9,1)
(64,25,1)
(4,3,1)
(52,61,1)
(45,17,1)
(32,59,1)
(4,43,1)
(46,16,1)
(14,44,1)
(67,0,1)
(23,63,1)
(59,55,1)
(36,9,1)
(65,14,1)
(15,48,1)
(7,21,1)
(44,37,1)
(10,8,1)
(25,27,1)
(21,9,1)
(63,58,1)
(17,37,1)
(66,15,1)
(34,41,1)
(53,56,1)
(55,7,1)
(54,64,1)
(0,9,1)
(60,37,1)
(44,3,1)
(16,19,1)
(51,4,1)
(17,3,1)
(8,66,1)
(41,9,1)
(1,54,1)
(36,67,1)
(27,20,1)
(18,5,1)
(4,37,1)
(48,60,1)
(47,66,1)
(5,61,1)
(33,22,1)
(54,25,1)
(8,42,1)
(0,46,1)
(58,32,1)
(20,47,1)
(43,6,1)
(0,9,2)
(17,37,2)
(34,61,2)
(32,61,2)
(14,61,2)
(21,61,2)
(51,61,2)
(23,61,2)
(9,61,2)
(19,61,2)
(25,66,2)
(44,37,2)
(6,61,2)
(44,61,2)
(59,55,2)
(8,66,2)
(54,25,2)
(1,54,2)
(10,35,2)
(27,60,2)
(9,45,2)
(22,54,2)
(41,61,2)
(46,61,2)
(54,60,2)
(36,61,2)
(51,4,2)
(48,60,2)
(65,61,2)
(33,54,2)
(20,60,2)
(14,9,2)
(10,54,2)
(64,60,2)
(15,60,2)
(21,9,2)
(45,17,2)
(42,54,2)
(4,61,2)
(55,21,2)
(18,61,2)
(4,37,2)
(63,61,2)
(51,9,2)
(8,54,2)
(10,8,2)
(4,3,2)
(59,21,2)
(43,61,2)
(5,61,2)
(45,12,2)
(16,61,2)
(44,3,2)
(3,54,2)
(7,21,2)
(36,9,2)
(61,3,2)
(67,61,2)
(3,10,2)
(61,37,2)
(0,61,2)
(45,61,2)
(47,60,2)
(25,60,2)
(17,3,2)
(17,61,2)
(66,60,2)
(58,61,2)
(14,44,2)
-----------------------------------
(0,printLine(dataBuffer)
(1,data)
(2,)
(3,data = (short)
(4,data-1)
(5,dataBuffer)
(6,data)
(7,1)
(8,atoi(inputBuffer)
(9,* dataBuffer = (char *)
(10,(short)
(11,data)
(12,char *)
(13,if (data < 100)
(14,memset(dataBuffer, \\\'A\\\', data-1)
(15,"")
(16,dataBuffer[data-1] = \\\'\\\\0\\\')
(17,malloc(data)
(18,data)
(19,\\\'\\\\0\\\')
(20,CHAR_ARRAY_SIZE)
(21,dataBuffer == NULL)
(22,"fgets()
(23,1)
(24,dataBuffer)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,)
(27,stdin)
(28,if (dataBuffer == NULL)
(29,)
(30,)
(31,data)
(32,dataBuffer)
(33,printLine("fgets()
(34,NULL)
(35,short)
(36,free(dataBuffer)
(37,data = 0)
(38,)
(39,)
(40,if(staticReturnsTrue()
(41,dataBuffer)
(42,inputBuffer)
(43,1)
(44,data-1)
(45,(char *)
(46,dataBuffer)
(47,inputBuffer)
(48,inputBuffer)
(49,0)
(50,)
(51,dataBuffer[data-1])
(52,RET)
(53,100)
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,-1)
(56,data)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,\\\'A\\\')
(59,exit(-1)
(60,staticReturnsTrue()
(61,data < 100)
(62,inputBuffer)
(63,data)
(64,NULL)
(65,dataBuffer)
(66,inputBuffer[CHAR_ARRAY_SIZE] = "")
(67,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^