-----label-----
1
-----code-----
static void badSink()
{
    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData;
short data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData;
short
data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData
data
= CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData
CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData
CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(5,21,0)
(28,15,0)
(21,36,0)
(38,35,0)
(6,35,0)
(23,35,0)
(2,20,0)
(20,9,0)
(11,16,0)
(13,17,0)
(8,20,0)
(38,36,0)
(40,9,0)
(27,8,0)
(21,15,0)
(43,38,0)
(22,13,0)
(17,36,0)
(13,22,0)
(35,20,0)
(38,15,0)
(10,41,0)
(0,22,0)
(30,22,0)
(25,8,0)
(15,36,0)
(37,12,0)
(12,15,0)
(10,24,0)
(25,15,0)
(22,20,0)
(29,20,0)
(19,29,0)
(15,25,0)
(3,13,0)
(32,25,0)
(24,10,0)
(8,25,0)
(14,24,0)
(4,36,0)
(7,9,0)
(16,36,0)
(1,17,0)
(31,20,0)
(13,15,0)
(34,29,0)
(35,38,0)
(46,36,0)
(45,12,0)
(25,32,0)
(16,15,0)
(33,38,0)
(12,15,1)
(12,45,1)
(16,15,1)
(22,30,1)
(20,31,1)
(37,15,1)
(22,20,1)
(3,38,1)
(26,29,1)
(21,15,1)
(5,17,1)
(13,15,1)
(0,3,1)
(30,0,1)
(23,6,1)
(34,20,1)
(16,11,1)
(14,12,1)
(35,23,1)
(17,1,1)
(33,43,1)
(29,20,1)
(19,34,1)
(10,24,1)
(25,32,1)
(8,20,1)
(25,8,1)
(24,14,1)
(28,29,1)
(6,33,1)
(26,16,1)
(11,21,1)
(35,20,1)
(43,12,1)
(38,15,1)
(27,28,1)
(8,27,1)
(15,25,1)
(31,2,1)
(38,35,1)
(21,5,1)
(43,10,1)
(29,19,1)
(13,22,1)
(45,37,1)
(1,13,1)
(15,29,2)
(8,20,2)
(0,29,2)
(5,29,2)
(13,22,2)
(17,29,2)
(22,29,2)
(38,35,2)
(21,15,2)
(8,29,2)
(27,29,2)
(16,15,2)
(28,29,2)
(15,25,2)
(24,12,2)
(14,12,2)
(35,20,2)
(16,29,2)
(30,29,2)
(25,8,2)
(43,29,2)
(37,29,2)
(10,12,2)
(12,29,2)
(1,29,2)
(33,29,2)
(12,15,2)
(45,29,2)
(13,15,2)
(3,29,2)
(13,29,2)
(25,32,2)
(10,24,2)
(23,29,2)
(21,29,2)
(25,29,2)
(22,20,2)
(35,29,2)
(6,29,2)
(38,29,2)
(11,29,2)
(38,15,2)
(29,20,2)
-----------------------------------
(0,data)
(1,'\\\\0')
(2,data)
(3,dataBuffer)
(4,dataBuffer)
(5,dataBuffer)
(6,data)
(7,data)
(8,malloc(data)
(9,)
(10,exit(-1)
(11,dataBuffer)
(12,dataBuffer == NULL)
(13,dataBuffer[data-1])
(14,1)
(15,* dataBuffer = (char *)
(16,free(dataBuffer)
(17,dataBuffer[data-1] = \'\\\\0\')
(18,\'\\\\0\')
(19,100)
(20,data = CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData)
(21,printLine(dataBuffer)
(22,data-1)
(23,1)
(24,-1)
(25,(char *)
(26,RET)
(27,data)
(28,dataBuffer)
(29,data < 100)
(30,1)
(31,CWE194_Unexpected_Sign_Extension__fscanf_malloc_45_badData)
(32,char *)
(33,'A')
(34,data)
(35,data-1)
(36,)
(37,dataBuffer)
(38,memset(dataBuffer, \'A\', data-1)
(39,dataBuffer[data-1] = '\\\\0')
(40,if (data < 100)
(41,)
(42,\'A\')
(43,dataBuffer)
(44,memset(dataBuffer, 'A', data-1)
(45,NULL)
(46,if (dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^