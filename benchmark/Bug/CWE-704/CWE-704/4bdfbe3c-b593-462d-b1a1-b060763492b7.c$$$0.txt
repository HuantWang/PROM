-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(15,31,0)
(49,6,0)
(23,55,0)
(21,23,0)
(38,36,0)
(53,5,0)
(25,27,0)
(35,19,0)
(40,27,0)
(15,23,0)
(0,16,0)
(32,62,0)
(19,38,0)
(24,12,0)
(46,7,0)
(47,37,0)
(10,35,0)
(7,27,0)
(3,19,0)
(5,18,0)
(20,36,0)
(18,13,0)
(43,47,0)
(6,38,0)
(0,27,0)
(0,47,0)
(1,43,0)
(58,39,0)
(43,62,0)
(44,31,0)
(62,38,0)
(56,19,0)
(42,7,0)
(57,38,0)
(27,36,0)
(51,13,0)
(0,62,0)
(18,5,0)
(59,62,0)
(64,25,0)
(47,39,0)
(39,23,0)
(61,15,0)
(9,55,0)
(6,62,0)
(43,41,0)
(45,43,0)
(22,18,0)
(52,43,0)
(50,15,0)
(17,0,0)
(27,25,0)
(11,38,0)
(31,15,0)
(29,38,0)
(55,63,0)
(19,35,0)
(7,47,0)
(16,41,0)
(4,47,0)
(43,27,0)
(33,16,0)
(13,38,0)
(30,24,0)
(2,0,0)
(48,35,0)
(14,55,0)
(39,47,0)
(54,5,0)
(34,15,0)
(28,36,0)
(60,23,0)
(32,24,1)
(53,54,1)
(56,62,1)
(23,21,1)
(31,44,1)
(17,2,1)
(16,33,1)
(49,16,1)
(22,19,1)
(32,47,1)
(48,10,1)
(27,25,1)
(34,50,1)
(3,56,1)
(15,61,1)
(58,4,1)
(51,18,1)
(21,60,1)
(15,23,1)
(7,47,1)
(64,40,1)
(0,47,1)
(7,42,1)
(25,64,1)
(50,23,1)
(59,32,1)
(0,27,1)
(62,59,1)
(30,31,1)
(35,48,1)
(39,58,1)
(47,39,1)
(5,53,1)
(18,5,1)
(2,43,1)
(8,27,1)
(52,1,1)
(31,15,1)
(43,62,1)
(1,7,1)
(43,47,1)
(49,7,1)
(42,46,1)
(0,62,1)
(39,23,1)
(61,34,1)
(43,27,1)
(46,13,1)
(54,22,1)
(33,0,1)
(26,6,1)
(7,27,1)
(45,52,1)
(10,3,1)
(44,15,1)
(32,8,1)
(19,35,1)
(60,8,1)
(6,62,1)
(13,51,1)
(6,49,1)
(0,17,1)
(24,30,1)
(43,45,1)
(4,31,1)
(16,7,2)
(23,8,2)
(6,62,2)
(2,7,2)
(7,47,2)
(21,8,2)
(45,7,2)
(27,25,2)
(0,7,2)
(39,23,2)
(33,7,2)
(15,8,2)
(39,31,2)
(43,7,2)
(34,8,2)
(0,27,2)
(43,27,2)
(52,7,2)
(58,31,2)
(30,31,2)
(0,47,2)
(19,35,2)
(0,62,2)
(61,8,2)
(47,31,2)
(43,47,2)
(4,31,2)
(31,15,2)
(60,8,2)
(43,62,2)
(17,7,2)
(15,23,2)
(24,31,2)
(47,39,2)
(31,8,2)
(44,8,2)
(7,27,2)
(1,7,2)
(50,8,2)
(18,5,2)
-----------------------------------
(0,dest[data])
(1,dest)
(2,dest)
(3,\\\'A\\\')
(4,data)
(5,100-1)
(6,printLine(dest)
(7,data < 100)
(8,staticTrue)
(9,inputBuffer)
(10,100)
(11,dest)
(12,)
(13,source[100-1] = \\\'\\\\0\\\')
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,dest[data] = \\\'\\\\0\\\')
(17,data)
(18,source[100-1])
(19,memset(source, \\\'A\\\', 100-1)
(20,if(staticTrue)
(21,"")
(22,source)
(23,inputBuffer[CHAR_ARRAY_SIZE] = "")
(24,printLine("fgets()
(25,-1)
(26,RET)
(27,data = -1)
(28,data)
(29,source)
(30,"fgets()
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,dest)
(33,\\\'\\\\0\\\')
(34,CHAR_ARRAY_SIZE)
(35,100-1)
(36,)
(37,)
(38,)
(39,atoi(inputBuffer)
(40,data)
(41,)
(42,100)
(43,memmove(dest, source, data)
(44,NULL)
(45,data)
(46,data)
(47,data = atoi(inputBuffer)
(48,1)
(49,dest)
(50,inputBuffer)
(51,\\\'\\\\0\\\')
(52,source)
(53,1)
(54,100)
(55,)
(56,source)
(57,if (data < 100)
(58,inputBuffer)
(59,"")
(60,inputBuffer)
(61,stdin)
(62,dest[100] = "")
(63,)
(64,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^