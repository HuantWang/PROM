-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_large_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a number larger than CHAR_MAX */
        data = CHAR_MAX + 1;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
52,54
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,43,47,49,53,54,56,60,62
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_large_17_bad(){    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_large_17_bad()
CWE197_Numeric_Truncation_Error__short_large_17_bad
{    int i;    short data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }
data = CHAR_MAX + 1;
data = CHAR_MAX + 1
data
data
CHAR_MAX + 1
CHAR_MAX
CHAR_MAX
1
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(25,13,0)
(31,8,0)
(19,5,0)
(28,15,0)
(8,15,0)
(3,25,0)
(9,5,0)
(14,18,0)
(21,5,0)
(24,25,0)
(6,14,0)
(26,9,0)
(29,9,0)
(9,29,0)
(27,29,0)
(11,18,0)
(13,21,0)
(23,5,0)
(12,13,0)
(0,12,0)
(22,15,0)
(25,14,0)
(12,21,0)
(2,21,0)
(16,22,0)
(14,17,0)
(4,5,0)
(1,22,0)
(25,3,0)
(25,9,0)
(20,15,0)
(7,13,0)
(18,14,0)
(30,18,0)
(13,25,0)
(8,31,1)
(22,15,1)
(8,15,1)
(1,15,1)
(25,24,1)
(30,11,1)
(16,1,1)
(1,8,1)
(25,9,1)
(22,16,1)
(25,3,1)
(13,25,1)
(27,26,1)
(28,20,1)
(20,9,1)
(12,0,1)
(0,13,1)
(31,14,1)
(29,27,1)
(7,22,1)
(12,13,1)
(9,29,1)
(15,28,1)
(6,22,1)
(10,12,1)
(24,7,1)
(25,14,1)
(11,6,1)
(14,18,1)
(18,30,1)
(13,25,2)
(31,22,2)
(14,22,2)
(25,9,2)
(8,22,2)
(12,13,2)
(11,22,2)
(25,14,2)
(22,22,2)
(8,15,2)
(6,22,2)
(18,22,2)
(25,3,2)
(9,29,2)
(16,22,2)
(1,22,2)
(30,22,2)
(22,15,2)
(14,18,2)
-----------------------------------
(0,charData)
(1,i)
(2,charData)
(3,char)
(4,for(i = 0; i < 1; i++)
(5,)
(6,data)
(7,charData)
(8,i++)
(9,data = -1)
(10,RET)
(11,CHAR_MAX)
(12,printHexCharLine(charData)
(13,charData = (char)
(14,data = CHAR_MAX + 1)
(15,i = 0)
(16,1)
(17,)
(18,CHAR_MAX + 1)
(19,i)
(20,i)
(21,)
(22,i < 1)
(23,data)
(24,data)
(25,(char)
(26,data)
(27,1)
(28,0)
(29,-1)
(30,1)
(31,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^