-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
32,34
32,35
34,35
36,37
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
45,47
48,49
49,50
49,51
50,51
50,52
51,52
53,54
53,55
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,28,31,33,35,37,41,43,44,46,47,52,54,55,56,60,61,66,68,70,72,77,79,80,84,86
-----computeFrom-----
45,46
45,47
49,50
49,51
53,54
53,55
58,59
58,60
74,75
74,76
-----guardedBy-----
60,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_66b_badSink(int dataArray[])
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(39,18,0)
(33,18,0)
(13,25,0)
(19,13,0)
(5,20,0)
(4,25,0)
(27,20,0)
(21,41,0)
(14,18,0)
(22,2,0)
(20,34,0)
(41,26,0)
(0,34,0)
(28,25,0)
(29,26,0)
(25,17,0)
(8,41,0)
(20,17,0)
(10,25,0)
(30,15,0)
(24,35,0)
(18,25,0)
(23,5,0)
(32,26,0)
(11,38,0)
(1,22,0)
(42,15,0)
(41,2,0)
(35,20,0)
(26,25,0)
(41,20,0)
(35,26,0)
(38,25,0)
(38,26,0)
(15,42,0)
(43,34,0)
(34,9,0)
(31,35,0)
(40,41,0)
(36,33,0)
(34,20,0)
(6,17,0)
(12,42,0)
(37,5,0)
(18,33,0)
(16,33,0)
(35,22,0)
(15,13,0)
(3,42,0)
(15,42,1)
(35,31,1)
(14,26,1)
(8,40,1)
(41,21,1)
(42,3,1)
(34,9,1)
(34,0,1)
(41,20,1)
(5,20,1)
(22,1,1)
(30,18,1)
(35,26,1)
(1,35,1)
(36,16,1)
(32,20,1)
(29,32,1)
(5,23,1)
(16,39,1)
(37,13,1)
(40,5,1)
(3,12,1)
(20,34,1)
(19,15,1)
(23,37,1)
(0,43,1)
(11,5,1)
(7,38,1)
(41,26,1)
(33,36,1)
(11,22,1)
(12,30,1)
(13,19,1)
(38,26,1)
(24,41,1)
(43,27,1)
(18,33,1)
(35,20,1)
(26,29,1)
(38,11,1)
(31,24,1)
(39,14,1)
(21,8,1)
(22,5,2)
(31,5,2)
(38,26,2)
(34,9,2)
(24,5,2)
(35,26,2)
(18,33,2)
(41,5,2)
(21,5,2)
(41,26,2)
(40,5,2)
(35,20,2)
(8,5,2)
(20,34,2)
(15,42,2)
(5,20,2)
(35,5,2)
(41,20,2)
(1,5,2)
-----------------------------------
(0,2)
(1,\\\'\\\\0\\\')
(2,)
(3,1)
(4,source)
(5,data < 100)
(6,data)
(7,RET)
(8,source)
(9,int dataArray[])
(10,dest)
(11,dest)
(12,100)
(13,source[100-1] = \\\'\\\\0\\\')
(14,source)
(15,source[100-1])
(16,100)
(17,)
(18,memset(source, \\\'A\\\', 100-1)
(19,\\\'\\\\0\\\')
(20,data = dataArray[2])
(21,data)
(22,dest[data] = \\\'\\\\0\\\')
(23,100)
(24,dest)
(25,)
(26,dest[100] = "")
(27,data)
(28,if (data < 100)
(29,"")
(30,source)
(31,data)
(32,dest)
(33,100-1)
(34,dataArray[2])
(35,dest[data])
(36,1)
(37,data)
(38,printLine(dest)
(39,\\\'A\\\')
(40,dest)
(41,memcpy(dest, source, data)
(42,100-1)
(43,dataArray)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^