-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
159,161
160,161
162,163
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
188,189
188,190
189,190
189,191
190,191
192,193
194,195
195,196
196,197
196,198
197,198
199,200
201,202
201,203
202,203
202,204
203,204
206,207
206,208
206,209
206,210
206,211
206,212
207,208
208,209
208,210
210,211
210,212
210,213
213,214
214,215
214,216
215,216
215,217
217,218
219,220
219,221
220,221
222,223
224,225
224,226
225,226
225,227
226,227
228,229
230,231
231,232
232,233
232,234
233,234
235,236
237,238
238,239
238,240
238,241
238,242
239,240
241,242
244,245
244,246
245,246
248,249
249,250
249,251
250,251
250,252
251,252
253,254
253,255
254,255
258,259
259,260
259,261
260,261
262,263
264,265
265,266
265,267
266,267
268,269
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,103,105,110,111,114,116,121,123,127,129,132,136,138,140,144,147,149,151,154,155,156,161,163,166,167,169,174,176,177,181,184,186,187,191,193,198,200,204,205,209,211,212,216,218,221,223,227,229,234,236,240,242,243,246,247,252,255,256,257,261,263,267,269
-----computeFrom-----
12,13
12,14
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
107,108
107,109
118,119
118,120
142,143
142,144
152,153
152,154
158,159
158,160
159,160
159,161
164,165
164,166
171,172
171,173
179,180
179,181
189,190
189,191
202,203
202,204
225,226
225,227
244,245
244,246
249,250
249,251
253,254
253,255
-----guardedBy-----
191,200
204,255
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(168,159,0)
(68,115,0)
(41,129,0)
(23,57,0)
(158,78,0)
(127,29,0)
(92,133,0)
(109,55,0)
(122,159,0)
(39,15,0)
(39,171,0)
(59,149,0)
(106,0,0)
(164,102,0)
(84,23,0)
(83,139,0)
(6,130,0)
(66,22,0)
(26,168,0)
(12,128,0)
(123,108,0)
(45,105,0)
(26,171,0)
(21,0,0)
(102,108,0)
(106,57,0)
(61,51,0)
(146,112,0)
(135,47,0)
(51,61,0)
(154,61,0)
(30,120,0)
(106,37,0)
(91,51,0)
(62,133,0)
(102,49,0)
(168,115,0)
(88,82,0)
(67,115,0)
(5,52,0)
(120,116,0)
(44,149,0)
(132,88,0)
(58,141,0)
(138,159,0)
(40,26,0)
(59,128,0)
(0,100,0)
(95,3,0)
(75,159,0)
(118,39,0)
(22,84,0)
(59,88,0)
(133,52,0)
(166,139,0)
(41,105,0)
(124,112,0)
(98,139,0)
(56,150,0)
(134,56,0)
(130,99,0)
(157,100,0)
(121,25,0)
(9,110,0)
(36,158,0)
(47,159,0)
(156,49,0)
(69,168,0)
(22,49,0)
(96,100,0)
(24,63,0)
(4,74,0)
(72,139,0)
(88,132,0)
(158,141,0)
(105,41,0)
(82,88,0)
(27,37,0)
(133,168,0)
(103,157,0)
(100,0,0)
(37,106,0)
(112,32,0)
(133,141,0)
(119,159,0)
(140,170,0)
(3,99,0)
(20,158,0)
(54,139,0)
(53,79,0)
(29,0,0)
(10,159,0)
(141,159,0)
(161,139,0)
(13,154,0)
(76,106,0)
(8,153,0)
(35,111,0)
(99,159,0)
(74,47,0)
(48,23,0)
(73,139,0)
(61,159,0)
(80,26,0)
(87,166,0)
(19,171,0)
(7,162,0)
(93,84,0)
(163,117,0)
(167,55,0)
(16,55,0)
(142,153,0)
(39,168,0)
(137,0,0)
(85,134,0)
(70,132,0)
(126,105,0)
(100,96,0)
(160,79,0)
(162,116,0)
(131,139,0)
(101,59,0)
(11,133,0)
(17,138,0)
(153,168,0)
(136,18,0)
(46,52,0)
(162,141,0)
(0,57,0)
(84,0,0)
(99,130,0)
(128,59,0)
(170,41,0)
(14,154,0)
(3,79,0)
(64,29,0)
(90,28,0)
(33,139,0)
(125,171,0)
(1,138,0)
(108,159,0)
(94,57,0)
(116,120,0)
(143,47,0)
(171,139,0)
(120,141,0)
(49,55,0)
(47,135,0)
(60,139,0)
(65,22,0)
(115,168,0)
(116,162,0)
(157,108,0)
(22,108,0)
(108,117,0)
(100,157,0)
(56,134,0)
(34,152,0)
(31,57,0)
(165,115,0)
(111,0,0)
(77,37,0)
(111,57,0)
(50,135,0)
(21,57,0)
(139,38,0)
(117,108,0)
(41,170,0)
(144,21,0)
(152,49,0)
(71,78,0)
(84,22,0)
(79,3,0)
(169,120,0)
(78,159,0)
(104,106,0)
(52,133,0)
(129,41,0)
(149,59,0)
(151,166,0)
(147,129,0)
(42,102,0)
(49,152,0)
(37,108,0)
(59,168,0)
(37,49,0)
(113,162,0)
(157,49,0)
(47,74,0)
(32,159,0)
(43,32,0)
(88,59,0)
(141,133,0)
(142,168,1)
(29,0,1)
(116,120,1)
(22,66,1)
(116,162,1)
(151,2,1)
(102,42,1)
(141,133,1)
(80,136,1)
(89,108,1)
(153,168,1)
(166,87,1)
(140,105,1)
(24,153,1)
(91,154,1)
(100,96,1)
(113,7,1)
(56,134,1)
(154,14,1)
(37,49,1)
(53,160,1)
(69,138,1)
(95,79,1)
(2,49,1)
(162,113,1)
(111,0,1)
(165,67,1)
(23,48,1)
(76,29,1)
(103,137,1)
(20,36,1)
(47,135,1)
(114,39,1)
(133,52,1)
(92,58,1)
(126,89,1)
(3,79,1)
(152,34,1)
(66,65,1)
(22,49,1)
(1,129,1)
(58,128,1)
(68,69,1)
(19,166,1)
(164,114,1)
(59,168,1)
(157,108,1)
(157,103,1)
(59,149,1)
(39,171,1)
(146,124,1)
(26,171,1)
(100,157,1)
(21,144,1)
(81,102,1)
(106,0,1)
(106,37,1)
(117,163,1)
(50,143,1)
(79,53,1)
(124,47,1)
(64,127,1)
(36,116,1)
(88,132,1)
(125,19,1)
(80,24,1)
(39,168,1)
(123,78,1)
(70,101,1)
(7,141,1)
(160,32,1)
(13,99,1)
(170,140,1)
(45,126,1)
(163,123,1)
(133,168,1)
(14,13,1)
(80,9,1)
(78,71,1)
(84,0,1)
(30,162,1)
(88,82,1)
(11,52,1)
(81,111,1)
(26,40,1)
(127,0,1)
(171,125,1)
(48,84,1)
(111,35,1)
(49,152,1)
(21,0,1)
(6,3,1)
(37,108,1)
(162,141,1)
(17,1,1)
(158,20,1)
(102,49,1)
(133,11,1)
(164,2,1)
(3,95,1)
(27,77,1)
(71,158,1)
(115,165,1)
(93,106,1)
(126,171,1)
(37,27,1)
(105,45,1)
(34,156,1)
(44,88,1)
(149,44,1)
(40,80,1)
(132,70,1)
(80,121,1)
(46,62,1)
(76,56,1)
(112,146,1)
(99,130,1)
(168,115,1)
(128,59,1)
(35,21,1)
(102,108,1)
(104,76,1)
(65,93,1)
(121,129,1)
(12,59,1)
(47,74,1)
(143,74,1)
(87,151,1)
(128,12,1)
(129,147,1)
(130,6,1)
(136,116,1)
(22,108,1)
(90,114,1)
(138,17,1)
(43,112,1)
(4,153,1)
(5,46,1)
(26,168,1)
(41,170,1)
(157,49,1)
(62,92,1)
(77,104,1)
(118,26,1)
(52,5,1)
(114,26,1)
(67,68,1)
(84,22,1)
(59,88,1)
(8,142,1)
(108,117,1)
(61,51,1)
(120,141,1)
(137,102,1)
(85,29,1)
(120,169,1)
(32,43,1)
(29,64,1)
(169,30,1)
(164,90,1)
(51,91,1)
(147,41,1)
(134,85,1)
(80,89,1)
(0,100,1)
(39,118,1)
(101,61,1)
(74,4,1)
(153,8,1)
(144,23,1)
(41,105,1)
(135,50,1)
(129,41,1)
(42,164,1)
(158,141,1)
(9,128,1)
(171,2,2)
(87,2,2)
(153,129,2)
(157,108,2)
(106,0,2)
(29,102,2)
(62,128,2)
(35,102,2)
(70,153,2)
(133,52,2)
(154,153,2)
(69,129,2)
(147,89,2)
(128,59,2)
(116,162,2)
(13,153,2)
(52,128,2)
(19,2,2)
(0,102,2)
(23,102,2)
(105,89,2)
(20,116,2)
(158,141,2)
(105,2,2)
(37,102,2)
(92,128,2)
(133,128,2)
(108,117,2)
(162,141,2)
(149,153,2)
(163,116,2)
(165,129,2)
(90,114,2)
(0,100,2)
(39,26,2)
(59,149,2)
(45,89,2)
(64,102,2)
(50,153,2)
(89,116,2)
(1,129,2)
(68,129,2)
(91,153,2)
(59,88,2)
(102,49,2)
(95,153,2)
(41,89,2)
(3,153,2)
(120,141,2)
(22,49,2)
(78,116,2)
(49,152,2)
(125,2,2)
(141,133,2)
(17,129,2)
(47,74,2)
(26,2,2)
(39,168,2)
(9,128,2)
(128,153,2)
(12,153,2)
(51,153,2)
(153,168,2)
(43,153,2)
(88,82,2)
(129,41,2)
(47,153,2)
(142,129,2)
(106,37,2)
(53,153,2)
(168,115,2)
(93,102,2)
(137,102,2)
(129,89,2)
(111,0,2)
(67,129,2)
(41,170,2)
(132,153,2)
(129,2,2)
(134,29,2)
(160,153,2)
(123,116,2)
(48,102,2)
(26,171,2)
(40,2,2)
(58,128,2)
(102,108,2)
(127,102,2)
(138,129,2)
(47,135,2)
(112,153,2)
(32,153,2)
(66,102,2)
(44,153,2)
(79,153,2)
(39,171,2)
(162,128,2)
(136,116,2)
(99,153,2)
(100,102,2)
(14,153,2)
(21,0,2)
(121,129,2)
(26,168,2)
(101,153,2)
(170,2,2)
(126,2,2)
(77,102,2)
(114,2,2)
(84,0,2)
(147,2,2)
(166,2,2)
(85,29,2)
(118,26,2)
(144,102,2)
(30,162,2)
(151,2,2)
(140,2,2)
(46,128,2)
(88,153,2)
(135,153,2)
(158,116,2)
(4,153,2)
(116,120,2)
(41,105,2)
(108,116,2)
(22,108,2)
(140,89,2)
(113,128,2)
(41,2,2)
(124,153,2)
(6,153,2)
(3,79,2)
(100,157,2)
(80,2,2)
(29,0,2)
(11,128,2)
(133,168,2)
(157,102,2)
(104,102,2)
(37,108,2)
(143,153,2)
(71,116,2)
(170,89,2)
(24,153,2)
(76,102,2)
(84,102,2)
(74,153,2)
(56,29,2)
(126,89,2)
(61,51,2)
(59,168,2)
(120,162,2)
(99,130,2)
(22,102,2)
(37,49,2)
(169,162,2)
(21,102,2)
(157,49,2)
(146,153,2)
(65,102,2)
(100,96,2)
(61,153,2)
(141,128,2)
(116,128,2)
(115,129,2)
(5,128,2)
(7,128,2)
(111,102,2)
(56,134,2)
(59,153,2)
(103,102,2)
(168,129,2)
(27,102,2)
(36,116,2)
(45,2,2)
(88,132,2)
(106,102,2)
(117,116,2)
(8,129,2)
(84,22,2)
(130,153,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,wsaDataInit)
(2,STATIC_CONST_TRUE)
(3,service.sin_addr.s_addr)
(4,service)
(5,1)
(6,IP_ADDRESS)
(7,recvResult)
(8,INVALID_SOCKET)
(9,break;)
(10,if (WSAStartup(MAKEWORD(2,2)
(11,0)
(12,SOCKET_ERROR)
(13,service)
(14,sin_port)
(15,)
(16,if(STATIC_CONST_TRUE)
(17,1)
(18,)
(19,connectSocket)
(20,recvResult)
(21,printLine(dataBuffer)
(22,data-1)
(23,dataBuffer[data-1] = \'\\\\0\')
(24,break;)
(25,)
(26,connectSocket != INVALID_SOCKET)
(27,1)
(28,)
(29,dataBuffer == NULL)
(30,recvResult)
(31,dataBuffer)
(32,service.sin_family = AF_INET)
(33,recvResult)
(34,1)
(35,dataBuffer)
(36,inputBuffer)
(37,data-1)
(38,)
(39,CLOSE_SOCKET(connectSocket)
(40,INVALID_SOCKET)
(41,WSAStartup(MAKEWORD(2,2)
(42,100)
(43,AF_INET)
(44,service)
(45,2)
(46,CHAR_ARRAY_SIZE)
(47,memset(&service, 0, sizeof(service)
(48,\'\\\\0\')
(49,data = -1)
(50,service)
(51,htons(TCP_PORT)
(52,CHAR_ARRAY_SIZE - 1)
(53,sin_addr)
(54,service)
(55,)
(56,exit(-1)
(57,)
(58,recvResult)
(59,connect(connectSocket, (struct sockaddr*)
(60,if (wsaDataInit)
(61,service.sin_port = htons(TCP_PORT)
(62,inputBuffer)
(63,)
(64,NULL)
(65,data)
(66,1)
(67,SOCK_STREAM)
(68,AF_INET)
(69,connectSocket)
(70,service)
(71,\'\\\\0\')
(72,wsaDataInit)
(73,wsaData)
(74,&service)
(75,if (connect(connectSocket, (struct sockaddr*)
(76,dataBuffer)
(77,data)
(78,inputBuffer[recvResult] = \'\\\\0\')
(79,service.sin_addr)
(80,connectSocket)
(81,RET)
(82,struct sockaddr*)
(83,do)
(84,dataBuffer[data-1])
(85,1)
(86,inputBuffer[recvResult] = '\\\\0')
(87,0)
(88,(struct sockaddr*)
(89,0)
(90,WSACleanup()
(91,TCP_PORT)
(92,connectSocket)
(93,dataBuffer)
(94,if (dataBuffer == NULL)
(95,s_addr)
(96,char *)
(97,'\\\\0')
(98,if (connectSocket != INVALID_SOCKET)
(99,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(100,(char *)
(101,connectSocket)
(102,data < 100)
(103,data)
(104,\'A\')
(105,MAKEWORD(2,2)
(106,memset(dataBuffer, \'A\', data-1)
(107,'A')
(108,data = atoi(inputBuffer)
(109,if (data < 100)
(110,)
(111,free(dataBuffer)
(112,service.sin_family)
(113,SOCKET_ERROR)
(114,wsaDataInit)
(115,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(116,recvResult == SOCKET_ERROR || recvResult == 0)
(117,atoi(inputBuffer)
(118,connectSocket)
(119,if (connectSocket == INVALID_SOCKET)
(120,recvResult == 0)
(121,break;)
(122,if (recvResult == SOCKET_ERROR || recvResult == 0)
(123,data)
(124,service)
(125,INVALID_SOCKET)
(126,2)
(127,dataBuffer)
(128,connect(connectSocket, (struct sockaddr*)
(129,WSAStartup(MAKEWORD(2,2)
(130,inet_addr(IP_ADDRESS)
(131,inputBuffer)
(132,&service)
(133,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(134,-1)
(135,sizeof(service)
(136,break;)
(137,dataBuffer)
(138,wsaDataInit = 1)
(139,)
(140,wsaData)
(141,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(142,connectSocket)
(143,0)
(144,dataBuffer)
(145,memset(dataBuffer, 'A', data-1)
(146,sin_family)
(147,NO_ERROR)
(148,dataBuffer[data-1] = '\\\\0')
(149,sizeof(service)
(150,)
(151,wsaDataInit)
(152,-1)
(153,connectSocket == INVALID_SOCKET)
(154,service.sin_port)
(155,'\\\\0')
(156,data)
(157,malloc(data)
(158,inputBuffer[recvResult])
(159,)
(160,service)
(161,connectSocket)
(162,recvResult == SOCKET_ERROR)
(163,inputBuffer)
(164,data)
(165,IPPROTO_TCP)
(166,wsaDataInit = 0)
(167,data)
(168,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(169,0)
(170,&wsaData)
(171,connectSocket = INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^