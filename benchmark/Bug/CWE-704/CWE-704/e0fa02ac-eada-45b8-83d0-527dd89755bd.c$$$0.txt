-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
40,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,34,36,39,41,43,45,49,51,52,54,55,60,62,63,64,68,69,74,76,78,80,85,87,88,92,94
-----computeFrom-----
12,13
12,14
23,24
23,25
53,54
53,55
57,58
57,59
61,62
61,63
66,67
66,68
82,83
82,84
-----guardedBy-----
68,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(11,12,0)
(0,6,0)
(31,1,0)
(1,30,0)
(15,5,0)
(35,21,0)
(4,45,0)
(28,45,0)
(22,21,0)
(34,1,0)
(9,30,0)
(5,21,0)
(36,2,0)
(2,21,0)
(43,29,0)
(8,18,0)
(40,26,0)
(26,40,0)
(26,2,0)
(45,1,0)
(47,0,0)
(5,12,0)
(19,23,0)
(7,5,0)
(23,18,0)
(45,29,0)
(39,29,0)
(13,10,0)
(23,29,0)
(30,1,0)
(38,12,0)
(6,21,0)
(32,34,0)
(42,40,0)
(1,10,0)
(23,1,0)
(25,10,0)
(17,23,0)
(27,26,0)
(24,34,0)
(21,10,0)
(34,29,0)
(34,6,0)
(44,6,0)
(14,34,0)
(41,40,0)
(29,43,0)
(0,21,0)
(33,21,0)
(29,46,0)
(3,6,0)
(18,37,0)
(12,5,0)
(23,6,0)
(34,37,0)
(5,12,1)
(12,38,1)
(19,34,1)
(23,1,1)
(38,11,1)
(20,0,1)
(47,18,1)
(6,44,1)
(34,14,1)
(23,17,1)
(47,45,1)
(0,6,1)
(18,8,1)
(3,16,1)
(0,47,1)
(39,16,1)
(43,39,1)
(34,1,1)
(23,29,1)
(4,2,1)
(30,9,1)
(16,1,1)
(11,7,1)
(41,42,1)
(8,23,1)
(2,36,1)
(45,1,1)
(34,6,1)
(15,6,1)
(17,19,1)
(44,3,1)
(24,32,1)
(27,5,1)
(34,29,1)
(32,45,1)
(45,28,1)
(7,15,1)
(14,24,1)
(42,27,1)
(40,41,1)
(45,29,1)
(29,43,1)
(1,30,1)
(36,26,1)
(9,31,1)
(3,29,1)
(23,6,1)
(28,4,1)
(26,40,1)
(14,45,2)
(23,1,2)
(5,12,2)
(26,40,2)
(0,6,2)
(34,45,2)
(1,30,2)
(17,45,2)
(23,6,2)
(45,1,2)
(45,29,2)
(8,45,2)
(34,6,2)
(34,1,2)
(43,16,2)
(29,16,2)
(23,45,2)
(29,43,2)
(19,45,2)
(18,45,2)
(23,29,2)
(39,16,2)
(32,45,2)
(24,45,2)
(34,29,2)
-----------------------------------
(0,printLine(dest)
(1,data = -1)
(2,source[100-1] = \\\'\\\\0\\\')
(3,dest)
(4,data)
(5,memset(source, \\\'A\\\', 100-1)
(6,dest[100] = "")
(7,\\\'A\\\')
(8,\\\'\\\\0\\\')
(9,1)
(10,)
(11,100)
(12,100-1)
(13,if(staticReturnsTrue()
(14,data)
(15,source)
(16,staticReturnsTrue()
(17,data)
(18,dest[data] = \\\'\\\\0\\\')
(19,dest)
(20,RET)
(21,)
(22,dest)
(23,dest[data])
(24,source)
(25,data)
(26,source[100-1])
(27,source)
(28,100)
(29,data = RAND32()
(30,-1)
(31,data)
(32,dest)
(33,source)
(34,memmove(dest, source, data)
(35,if (data < 100)
(36,\\\'\\\\0\\\')
(37,)
(38,1)
(39,data)
(40,100-1)
(41,1)
(42,100)
(43,RAND32()
(44,"")
(45,data < 100)
(46,)
(47,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^