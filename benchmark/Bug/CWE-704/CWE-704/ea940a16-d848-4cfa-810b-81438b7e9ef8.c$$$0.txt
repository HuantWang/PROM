-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_10_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
21,22
21,23
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_10_bad(){    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_10_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_10_bad
{    short data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FLAW: Use a negative number */        data = -1;    }
globalTrue
globalTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(45,13,0)
(40,37,0)
(5,38,0)
(0,42,0)
(26,34,0)
(14,40,0)
(24,8,0)
(39,2,0)
(40,14,0)
(17,38,0)
(21,28,0)
(36,26,0)
(19,34,0)
(25,2,0)
(35,4,0)
(20,12,0)
(30,26,0)
(4,1,0)
(1,4,0)
(42,40,0)
(7,8,0)
(9,4,0)
(43,26,0)
(10,2,0)
(27,24,0)
(29,19,0)
(12,28,0)
(2,8,0)
(26,13,0)
(44,8,0)
(32,14,0)
(38,40,0)
(33,12,0)
(3,24,0)
(26,40,0)
(1,47,0)
(26,24,0)
(38,24,0)
(34,2,0)
(42,34,0)
(16,42,0)
(18,45,0)
(46,1,0)
(47,2,0)
(11,34,0)
(42,45,0)
(31,34,0)
(28,12,0)
(12,2,0)
(41,47,0)
(6,40,0)
(23,28,0)
(19,2,0)
(42,24,0)
(3,27,1)
(40,14,1)
(14,32,1)
(9,35,1)
(47,41,1)
(11,31,1)
(26,36,1)
(29,45,1)
(33,34,1)
(26,40,1)
(31,15,1)
(21,23,1)
(32,6,1)
(23,20,1)
(24,3,1)
(38,5,1)
(18,42,1)
(20,33,1)
(28,21,1)
(38,24,1)
(36,30,1)
(22,19,1)
(15,24,1)
(6,15,1)
(29,38,1)
(0,16,1)
(41,1,1)
(19,34,1)
(12,28,1)
(42,34,1)
(38,40,1)
(46,12,1)
(35,46,1)
(16,26,1)
(45,18,1)
(1,4,1)
(42,0,1)
(19,29,1)
(26,24,1)
(34,11,1)
(26,34,1)
(5,17,1)
(30,43,1)
(31,40,1)
(42,40,1)
(43,38,1)
(17,47,1)
(42,24,1)
(4,9,1)
(14,15,2)
(42,38,2)
(26,24,2)
(26,38,2)
(30,38,2)
(42,34,2)
(18,38,2)
(1,4,2)
(38,24,2)
(43,38,2)
(16,38,2)
(26,40,2)
(42,40,2)
(36,38,2)
(19,34,2)
(26,34,2)
(0,38,2)
(40,15,2)
(45,38,2)
(32,15,2)
(42,24,2)
(12,28,2)
(6,15,2)
(38,40,2)
(40,14,2)
-----------------------------------
(0,data)
(1,source[100-1])
(2,)
(3,0)
(4,100-1)
(5,100)
(6,data)
(7,data)
(8,)
(9,1)
(10,source)
(11,"")
(12,memset(source, \\\'A\\\', 100-1)
(13,)
(14,-1)
(15,globalTrue)
(16,dest)
(17,data)
(18,\\\'\\\\0\\\')
(19,printLine(dest)
(20,\\\'A\\\')
(21,1)
(22,RET)
(23,100)
(24,data = 0)
(25,if (data < 100)
(26,memcpy(dest, source, data)
(27,data)
(28,100-1)
(29,dest)
(30,source)
(31,dest)
(32,1)
(33,source)
(34,dest[100] = "")
(35,100)
(36,data)
(37,)
(38,data < 100)
(39,dest)
(40,data = -1)
(41,\\\'\\\\0\\\')
(42,dest[data])
(43,dest)
(44,if(globalTrue)
(45,dest[data] = \\\'\\\\0\\\')
(46,source)
(47,source[100-1] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^