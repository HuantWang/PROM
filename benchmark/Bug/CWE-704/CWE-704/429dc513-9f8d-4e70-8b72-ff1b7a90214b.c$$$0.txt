-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad()
{
    goto sink;
sink:
    {
        char inputBuffer[CHAR_ARRAY_SIZE];
        double doubleNumber = 0;
        /*  * Enter: -2.0, result should be 0 (for bad case)
         *
         * Square root of a negative number is NaN. NaN when casted to int is 0.
         */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Read a double */
            doubleNumber = atof(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
        /* FLAW: should not cast without checking if conversion is safe */
        printIntLine((int)(sqrt(doubleNumber)));
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
11,12
12,13
12,14
14,15
14,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
26,29
27,28
27,29
28,29
28,30
28,31
28,32
29,30
31,32
33,34
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,7,9,13,15,18,21,23,25,30,32,34,36,38,43,46,48,53,54,58,61,62,66,68
-----computeFrom-----
27,28
27,29
41,42
41,43
-----guardedBy-----
32,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad(){    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_18_bad
{    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }}
goto sink;
sink
sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }
sink
{        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /*  * Enter: -2.0, result should be 0 (for bad case)         *         * Square root of a negative number is NaN. NaN when casted to int is 0.         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)(sqrt(doubleNumber)));    }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Read a double */            doubleNumber = atof(inputBuffer);        }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(1,9,0)
(2,15,0)
(6,15,0)
(15,6,0)
(20,12,0)
(0,17,0)
(10,12,0)
(7,18,0)
(28,18,0)
(3,12,0)
(9,27,0)
(4,17,0)
(15,2,0)
(23,18,0)
(25,17,0)
(29,17,0)
(18,19,0)
(8,7,0)
(17,4,0)
(6,18,0)
(12,20,0)
(5,20,0)
(24,4,0)
(3,7,0)
(3,15,0)
(12,16,0)
(26,7,0)
(21,18,0)
(15,3,0)
(11,19,0)
(22,3,0)
(14,19,0)
(0,7,1)
(26,8,1)
(1,4,1)
(4,17,1)
(15,2,1)
(6,15,1)
(10,4,1)
(3,7,1)
(3,12,1)
(25,29,1)
(9,1,1)
(7,26,1)
(3,22,1)
(22,12,1)
(4,24,1)
(17,25,1)
(12,20,1)
(13,6,1)
(8,14,1)
(29,0,1)
(24,17,1)
(15,3,1)
(20,5,1)
(5,10,1)
(22,9,1)
(9,4,2)
(1,4,2)
(4,17,2)
(5,4,2)
(3,7,2)
(20,4,2)
(15,3,2)
(6,15,2)
(3,12,2)
(10,4,2)
(15,2,2)
(12,20,2)
(12,4,2)
-----------------------------------
(0,inputBuffer)
(1,"fgets()
(2,int)
(3,sqrt(doubleNumber)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,inputBuffer)
(6,printIntLine((int)
(7,doubleNumber = 0)
(8,doubleNumber)
(9,printLine("fgets()
(10,doubleNumber)
(11,sink:)
(12,doubleNumber = atof(inputBuffer)
(13,RET)
(14,goto sink;)
(15,(int)
(16,)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,)
(19,)
(20,atof(inputBuffer)
(21,doubleNumber)
(22,doubleNumber)
(23,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,NULL)
(25,stdin)
(26,0)
(27,)
(28,inputBuffer)
(29,CHAR_ARRAY_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^