-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_51b_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_51b_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_51b_badSink(short data)
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_51b_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,22,0)
(15,37,0)
(11,5,0)
(9,12,0)
(15,1,0)
(30,14,0)
(3,11,0)
(26,22,0)
(5,12,0)
(42,5,0)
(29,22,0)
(0,30,0)
(38,7,0)
(1,22,0)
(13,29,0)
(12,5,0)
(1,15,0)
(28,37,0)
(1,5,0)
(18,28,0)
(14,34,0)
(43,37,0)
(35,17,0)
(32,7,0)
(12,23,0)
(24,1,0)
(23,12,0)
(20,43,0)
(19,22,0)
(40,39,0)
(7,5,0)
(42,28,0)
(36,23,0)
(21,15,0)
(2,1,0)
(25,42,0)
(12,9,0)
(23,37,0)
(8,43,0)
(4,28,0)
(5,22,0)
(42,29,0)
(28,42,0)
(16,5,0)
(17,5,0)
(17,22,0)
(14,30,0)
(6,15,0)
(25,1,1)
(12,9,1)
(28,37,1)
(12,23,1)
(18,25,1)
(43,37,1)
(11,5,1)
(16,43,1)
(15,37,1)
(10,43,1)
(10,17,1)
(7,5,1)
(0,7,1)
(1,15,1)
(43,8,1)
(1,5,1)
(42,5,1)
(23,37,1)
(35,11,1)
(29,13,1)
(2,7,1)
(24,2,1)
(21,6,1)
(14,30,1)
(32,38,1)
(17,35,1)
(38,5,1)
(8,20,1)
(28,4,1)
(4,18,1)
(30,0,1)
(36,16,1)
(5,12,1)
(17,5,1)
(13,42,1)
(15,21,1)
(6,24,1)
(23,36,1)
(42,28,1)
(2,14,1)
(7,32,1)
(3,29,1)
(11,3,1)
(15,37,2)
(12,43,2)
(30,7,2)
(17,5,2)
(42,28,2)
(14,30,2)
(38,43,2)
(43,37,2)
(1,43,2)
(14,7,2)
(6,43,2)
(28,43,2)
(13,43,2)
(23,43,2)
(17,43,2)
(35,43,2)
(5,43,2)
(1,15,2)
(0,7,2)
(28,37,2)
(5,12,2)
(21,43,2)
(7,43,2)
(32,43,2)
(23,37,2)
(15,43,2)
(42,5,2)
(25,43,2)
(11,5,2)
(29,43,2)
(12,9,2)
(24,43,2)
(7,5,2)
(1,5,2)
(42,43,2)
(3,43,2)
(4,43,2)
(16,43,2)
(36,43,2)
(11,43,2)
(2,43,2)
(18,43,2)
(12,23,2)
-----------------------------------
(0,1)
(1,memset(dataBuffer, 'A', data-1)
(2,dataBuffer)
(3,dataBuffer)
(4,1)
(5,* dataBuffer = (char *)
(6,data)
(7,dataBuffer == NULL)
(8,100)
(9,char *)
(10,RET)
(11,printLine(dataBuffer)
(12,(char *)
(13,'\\\\0')
(14,exit(-1)
(15,data-1)
(16,dataBuffer)
(17,free(dataBuffer)
(18,data)
(19,dataBuffer)
(20,data)
(21,1)
(22,)
(23,malloc(data)
(24,\'A\')
(25,dataBuffer)
(26,if (dataBuffer == NULL)
(27,'A')
(28,data-1)
(29,dataBuffer[data-1] = \'\\\\0\')
(30,-1)
(31,memset(dataBuffer, \'A\', data-1)
(32,NULL)
(33,\'\\\\0\')
(34,)
(35,dataBuffer)
(36,data)
(37,short data)
(38,dataBuffer)
(39,)
(40,if (data < 100)
(41,dataBuffer[data-1] = '\\\\0')
(42,dataBuffer[data-1])
(43,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^