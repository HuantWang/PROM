-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_42_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
18,19
18,20
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_42_bad(){    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_42_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_42_bad
{    int data;    /* Initialize data */    data = -1;    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(40,4,0)
(29,21,0)
(33,46,0)
(1,44,0)
(13,18,0)
(1,11,0)
(34,14,0)
(12,7,0)
(31,1,0)
(2,12,0)
(35,32,0)
(14,11,0)
(1,18,0)
(41,18,0)
(30,32,0)
(45,24,0)
(18,1,0)
(4,44,0)
(44,11,0)
(6,43,0)
(44,24,0)
(36,15,0)
(20,24,0)
(22,0,0)
(12,4,0)
(48,30,0)
(23,11,0)
(8,11,0)
(37,26,0)
(4,50,0)
(0,7,0)
(50,11,0)
(15,32,0)
(18,7,0)
(10,1,0)
(5,11,0)
(42,0,0)
(32,21,0)
(37,43,0)
(30,7,0)
(3,7,0)
(49,44,0)
(24,20,0)
(25,50,0)
(23,44,0)
(27,12,0)
(4,12,0)
(45,7,0)
(19,46,0)
(16,23,0)
(14,44,0)
(32,15,0)
(7,30,0)
(7,21,0)
(9,21,0)
(46,44,0)
(24,44,0)
(39,45,0)
(43,37,0)
(24,45,0)
(23,44,1)
(4,44,1)
(28,0,1)
(7,30,1)
(45,39,1)
(39,49,1)
(30,32,1)
(15,36,1)
(44,24,1)
(23,16,1)
(14,34,1)
(6,46,1)
(24,45,1)
(18,13,1)
(46,19,1)
(18,7,1)
(41,10,1)
(16,50,1)
(37,43,1)
(33,44,1)
(19,33,1)
(12,7,1)
(4,12,1)
(49,0,1)
(34,23,1)
(24,20,1)
(31,46,1)
(1,44,1)
(36,35,1)
(46,44,1)
(50,25,1)
(27,2,1)
(43,6,1)
(28,14,1)
(25,4,1)
(3,32,1)
(40,1,1)
(14,44,1)
(32,15,1)
(10,31,1)
(12,27,1)
(0,22,1)
(45,7,1)
(42,7,1)
(13,41,1)
(31,37,1)
(2,40,1)
(48,3,1)
(30,48,1)
(0,7,1)
(1,18,1)
(22,42,1)
(16,0,2)
(46,0,2)
(37,46,2)
(1,0,2)
(24,45,2)
(10,0,2)
(44,0,2)
(23,0,2)
(4,0,2)
(39,0,2)
(1,44,2)
(4,12,2)
(25,0,2)
(45,7,2)
(14,44,2)
(6,46,2)
(12,0,2)
(32,15,2)
(34,0,2)
(37,43,2)
(18,7,2)
(33,0,2)
(7,30,2)
(50,0,2)
(0,7,2)
(4,44,2)
(18,0,2)
(27,0,2)
(31,0,2)
(12,7,2)
(13,0,2)
(14,0,2)
(23,44,2)
(49,0,2)
(19,0,2)
(40,0,2)
(44,24,2)
(45,0,2)
(46,44,2)
(1,18,2)
(41,0,2)
(2,0,2)
(24,20,2)
(43,46,2)
(24,0,2)
(30,32,2)
-----------------------------------
(0,data < 100)
(1,memset(dataBuffer, \'A\', data-1)
(2,data)
(3,data)
(4,dataBuffer[data-1])
(5,dataBuffer)
(6,1)
(7,data = badSource(data)
(8,if (dataBuffer == NULL)
(9,if (data < 100)
(10,\'A\')
(11,)
(12,data-1)
(13,1)
(14,free(dataBuffer)
(15,-1)
(16,dataBuffer)
(17,memset(dataBuffer, 'A', data-1)
(18,data-1)
(19,NULL)
(20,char *)
(21,)
(22,100)
(23,printLine(dataBuffer)
(24,(char *)
(25,'\\\\0')
(26,)
(27,1)
(28,RET)
(29,data)
(30,badSource(data)
(31,dataBuffer)
(32,data = -1)
(33,dataBuffer)
(34,dataBuffer)
(35,data)
(36,1)
(37,exit(-1)
(38,'A')
(39,data)
(40,dataBuffer)
(41,data)
(42,data)
(43,-1)
(44,* dataBuffer = (char *)
(45,malloc(data)
(46,dataBuffer == NULL)
(47,\'\\\\0\')
(48,data)
(49,dataBuffer)
(50,dataBuffer[data-1] = '\\\\0')
(51,dataBuffer[data-1] = \'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^