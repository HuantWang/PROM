-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    {
        short dataCopy = data;
        short data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
44,50
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,43,47,49,50,54,56,59,61,65,67,72,74,78,80,81,84,85,90,93,94,95,99,101,105,107
-----computeFrom-----
12,13
12,14
17,18
17,19
40,41
40,42
63,64
63,65
82,83
82,84
87,88
87,89
91,92
91,93
-----guardedBy-----
42,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_31_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    {        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
{        short dataCopy = data;        short data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(48,5,0)
(24,31,0)
(44,22,0)
(35,48,0)
(37,10,0)
(19,6,0)
(3,20,0)
(7,44,0)
(55,13,0)
(13,28,0)
(54,15,0)
(17,4,0)
(9,36,0)
(48,35,0)
(44,59,0)
(0,31,0)
(15,10,0)
(41,28,0)
(50,20,0)
(53,6,0)
(45,5,0)
(20,7,0)
(24,15,0)
(7,28,0)
(46,35,0)
(26,25,0)
(4,24,0)
(14,4,0)
(36,9,0)
(15,25,0)
(8,37,0)
(2,31,0)
(39,31,0)
(6,14,0)
(5,28,0)
(14,6,0)
(44,7,0)
(13,7,0)
(42,28,0)
(4,31,0)
(6,7,0)
(34,23,0)
(59,44,0)
(38,4,0)
(27,10,0)
(42,7,0)
(49,36,0)
(9,1,0)
(29,24,0)
(21,37,0)
(59,4,0)
(52,14,0)
(18,48,0)
(32,35,0)
(6,28,0)
(33,7,0)
(43,24,0)
(47,14,0)
(48,7,0)
(11,23,0)
(25,15,0)
(56,28,0)
(35,4,0)
(22,44,0)
(40,59,0)
(51,42,0)
(31,10,0)
(23,4,0)
(3,7,1)
(26,54,1)
(32,18,1)
(44,22,1)
(35,4,1)
(23,34,1)
(15,25,1)
(44,59,1)
(17,38,1)
(24,29,1)
(42,51,1)
(47,19,1)
(16,23,1)
(53,9,1)
(55,5,1)
(33,23,1)
(59,40,1)
(45,48,1)
(13,7,1)
(19,53,1)
(5,45,1)
(16,42,1)
(8,21,1)
(14,4,1)
(29,43,1)
(36,49,1)
(53,20,1)
(9,36,1)
(43,15,1)
(24,15,1)
(42,7,1)
(11,4,1)
(34,11,1)
(35,46,1)
(13,55,1)
(40,33,1)
(6,7,1)
(25,26,1)
(46,32,1)
(38,24,1)
(49,20,1)
(23,4,1)
(4,17,1)
(54,37,1)
(50,3,1)
(20,7,1)
(4,24,1)
(59,4,1)
(48,35,1)
(18,6,1)
(20,50,1)
(14,52,1)
(48,7,1)
(6,14,1)
(37,8,1)
(7,44,1)
(52,47,1)
(51,13,1)
(32,23,2)
(5,23,2)
(33,23,2)
(42,7,2)
(59,4,2)
(13,7,2)
(42,23,2)
(48,35,2)
(18,23,2)
(6,14,2)
(13,23,2)
(9,20,2)
(55,23,2)
(44,59,2)
(36,20,2)
(20,23,2)
(14,4,2)
(14,23,2)
(35,23,2)
(49,20,2)
(15,25,2)
(48,23,2)
(7,23,2)
(20,7,2)
(48,7,2)
(9,36,2)
(44,23,2)
(52,23,2)
(19,23,2)
(6,7,2)
(23,4,2)
(59,23,2)
(35,4,2)
(51,23,2)
(53,23,2)
(3,23,2)
(40,23,2)
(7,44,2)
(45,23,2)
(24,15,2)
(50,23,2)
(44,22,2)
(46,23,2)
(47,23,2)
(6,23,2)
(4,24,2)
-----------------------------------
(0,if (data < 100)
(1,)
(2,data)
(3,dataBuffer)
(4,data = dataCopy)
(5,dataBuffer[data-1] = '\\\\0')
(6,memset(dataBuffer, \'A\', data-1)
(7,* dataBuffer = (char *)
(8,0)
(9,exit(-1)
(10,)
(11,data)
(12,memset(dataBuffer, 'A', data-1)
(13,printLine(dataBuffer)
(14,data-1)
(15,data = -1)
(16,RET)
(17,dataCopy)
(18,dataBuffer)
(19,'A')
(20,dataBuffer == NULL)
(21,data)
(22,char *)
(23,data < 100)
(24,dataCopy = data)
(25,-1)
(26,1)
(27,data)
(28,)
(29,data)
(30,\'A\')
(31,)
(32,data)
(33,dataBuffer)
(34,100)
(35,data-1)
(36,-1)
(37,data = 0)
(38,data)
(39,dataCopy)
(40,data)
(41,if (dataBuffer == NULL)
(42,free(dataBuffer)
(43,dataCopy)
(44,(char *)
(45,'\\\\0')
(46,1)
(47,data)
(48,dataBuffer[data-1])
(49,1)
(50,NULL)
(51,dataBuffer)
(52,1)
(53,dataBuffer)
(54,data)
(55,dataBuffer)
(56,dataBuffer)
(57,\'\\\\0\')
(58,dataBuffer[data-1] = \'\\\\0\')
(59,malloc(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^