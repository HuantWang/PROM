-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_01_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_01_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_01_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(22,36,0)
(36,6,0)
(8,25,0)
(15,25,0)
(32,22,0)
(7,4,0)
(14,41,0)
(10,34,0)
(38,21,0)
(19,36,0)
(33,1,0)
(39,38,0)
(43,22,0)
(47,6,0)
(34,18,0)
(34,36,0)
(21,20,0)
(35,0,0)
(24,43,0)
(45,33,0)
(17,26,0)
(41,36,0)
(25,21,0)
(23,36,0)
(37,21,0)
(18,34,0)
(9,29,0)
(2,29,0)
(26,41,0)
(29,36,0)
(0,36,0)
(18,21,0)
(40,20,0)
(41,26,0)
(18,40,0)
(25,29,0)
(30,20,0)
(27,34,0)
(37,20,0)
(12,6,0)
(4,21,0)
(22,43,0)
(3,21,0)
(38,20,0)
(26,17,0)
(31,40,0)
(28,45,0)
(43,6,0)
(26,21,0)
(46,37,0)
(42,4,0)
(21,26,0)
(44,43,0)
(13,20,0)
(33,45,0)
(5,18,0)
(29,25,0)
(25,20,0)
(16,0,0)
(0,35,1)
(21,26,1)
(9,8,1)
(25,29,1)
(11,37,1)
(35,16,1)
(29,36,1)
(45,28,1)
(36,19,1)
(34,10,1)
(0,36,1)
(22,32,1)
(38,21,1)
(15,33,1)
(32,24,1)
(37,21,1)
(41,14,1)
(34,36,1)
(27,5,1)
(2,9,1)
(22,36,1)
(11,0,1)
(4,42,1)
(41,36,1)
(42,7,1)
(44,36,1)
(25,21,1)
(14,3,1)
(18,34,1)
(19,23,1)
(5,25,1)
(15,4,1)
(38,39,1)
(39,40,1)
(10,27,1)
(7,21,1)
(16,43,1)
(37,46,1)
(8,15,1)
(26,41,1)
(43,22,1)
(28,4,1)
(46,38,1)
(3,0,1)
(40,31,1)
(26,17,1)
(18,21,1)
(29,2,1)
(24,44,1)
(33,45,1)
(4,21,1)
(31,18,1)
(43,22,2)
(5,0,2)
(45,4,2)
(33,4,2)
(21,26,2)
(7,0,2)
(10,0,2)
(37,21,2)
(42,0,2)
(26,41,2)
(25,0,2)
(29,0,2)
(26,0,2)
(41,0,2)
(26,17,2)
(18,21,2)
(9,0,2)
(18,34,2)
(38,21,2)
(22,36,2)
(31,0,2)
(21,0,2)
(4,21,2)
(37,0,2)
(8,0,2)
(0,36,2)
(27,0,2)
(14,0,2)
(4,0,2)
(18,0,2)
(28,4,2)
(33,45,2)
(29,36,2)
(40,0,2)
(34,0,2)
(25,29,2)
(38,0,2)
(39,0,2)
(2,0,2)
(25,21,2)
(41,36,2)
(3,0,2)
(15,0,2)
(46,0,2)
(34,36,2)
-----------------------------------
(0,data < 100)
(1,)
(2,1)
(3,dataBuffer)
(4,dataBuffer == NULL)
(5,dataBuffer)
(6,)
(7,dataBuffer)
(8,\\\'A\\\')
(9,data)
(10,1)
(11,RET)
(12,if (data < 100)
(13,if (dataBuffer == NULL)
(14,data)
(15,dataBuffer)
(16,data)
(17,char *)
(18,dataBuffer[data-1])
(19,0)
(20,)
(21,* dataBuffer = (char *)
(22,&data)
(23,data)
(24,"%hd")
(25,memset(dataBuffer, \\\'A\\\', data-1)
(26,(char *)
(27,data)
(28,1)
(29,data-1)
(30,dataBuffer)
(31,\\\'\\\\0\\\')
(32,data)
(33,exit(-1)
(34,data-1)
(35,100)
(36,data = 0)
(37,free(dataBuffer)
(38,printLine(dataBuffer)
(39,dataBuffer)
(40,dataBuffer[data-1] = \\\'\\\\0\\\')
(41,malloc(data)
(42,NULL)
(43,fscanf (stdin, "%hd", &data)
(44,stdin)
(45,-1)
(46,dataBuffer)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^