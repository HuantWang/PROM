-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(1,37,0)
(13,11,0)
(48,7,0)
(32,47,0)
(16,8,0)
(4,44,0)
(17,15,0)
(25,50,0)
(2,18,0)
(13,47,0)
(45,41,0)
(47,19,0)
(7,25,0)
(41,37,0)
(31,13,0)
(12,18,0)
(37,41,0)
(47,15,0)
(53,8,0)
(51,2,0)
(39,32,0)
(33,23,0)
(40,11,0)
(50,15,0)
(13,25,0)
(3,25,0)
(52,50,0)
(32,18,0)
(49,23,0)
(30,6,0)
(20,15,0)
(55,13,0)
(23,18,0)
(2,25,0)
(2,47,0)
(54,50,0)
(8,16,0)
(38,16,0)
(8,50,0)
(41,47,0)
(27,19,0)
(7,50,0)
(6,4,0)
(34,13,0)
(21,44,0)
(46,2,0)
(10,6,0)
(26,4,0)
(13,18,0)
(36,32,0)
(2,40,0)
(28,8,0)
(35,47,0)
(19,47,0)
(24,50,0)
(43,16,0)
(9,40,0)
(37,29,0)
(18,0,0)
(4,6,0)
(14,37,0)
(22,25,0)
(44,50,0)
(18,23,0)
(36,39,1)
(1,14,1)
(30,10,1)
(33,12,1)
(45,1,1)
(13,25,1)
(47,19,1)
(13,47,1)
(39,44,1)
(37,41,1)
(27,35,1)
(2,47,1)
(10,26,1)
(2,18,1)
(32,36,1)
(13,34,1)
(14,42,1)
(48,40,1)
(42,47,1)
(2,46,1)
(4,6,1)
(7,48,1)
(55,32,1)
(28,25,1)
(44,21,1)
(32,18,1)
(3,37,1)
(34,31,1)
(12,42,1)
(46,51,1)
(25,22,1)
(40,9,1)
(22,3,1)
(8,16,1)
(18,23,1)
(3,18,1)
(6,30,1)
(2,25,1)
(48,32,1)
(31,55,1)
(38,43,1)
(26,8,1)
(7,25,1)
(23,49,1)
(41,45,1)
(32,47,1)
(21,4,1)
(16,38,1)
(51,13,1)
(9,2,1)
(5,7,1)
(53,28,1)
(19,27,1)
(49,33,1)
(13,18,1)
(43,53,1)
(41,47,1)
(13,25,2)
(32,47,2)
(37,41,2)
(51,32,2)
(2,32,2)
(45,42,2)
(47,19,2)
(2,47,2)
(31,32,2)
(7,25,2)
(13,47,2)
(1,42,2)
(13,18,2)
(13,32,2)
(23,42,2)
(33,42,2)
(37,42,2)
(32,18,2)
(2,18,2)
(2,25,2)
(12,42,2)
(40,32,2)
(14,42,2)
(41,47,2)
(9,32,2)
(46,32,2)
(18,42,2)
(4,6,2)
(49,42,2)
(34,32,2)
(18,23,2)
(55,32,2)
(41,42,2)
(8,16,2)
-----------------------------------
(0,)
(1,"%d")
(2,dest[data])
(3,dest)
(4,source[100-1])
(5,RET)
(6,100-1)
(7,printLine(dest)
(8,memset(source, \\\'A\\\', 100-1)
(9,\\\'\\\\0\\\')
(10,100)
(11,)
(12,data)
(13,memcpy(dest, source, data)
(14,stdin)
(15,)
(16,100-1)
(17,data)
(18,data = 100-1)
(19,-1)
(20,if(globalReturnsTrueOrFalse()
(21,\\\'\\\\0\\\')
(22,"")
(23,100-1)
(24,source)
(25,dest[100] = "")
(26,source)
(27,1)
(28,source)
(29,)
(30,1)
(31,source)
(32,data < 100)
(33,100)
(34,data)
(35,data)
(36,100)
(37,fscanf(stdin, "%d", &data)
(38,1)
(39,data)
(40,dest[data] = \\\'\\\\0\\\')
(41,&data)
(42,globalReturnsTrueOrFalse()
(43,100)
(44,source[100-1] = \\\'\\\\0\\\')
(45,data)
(46,data)
(47,data = -1)
(48,dest)
(49,1)
(50,)
(51,dest)
(52,dest)
(53,\\\'A\\\')
(54,if (data < 100)
(55,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^