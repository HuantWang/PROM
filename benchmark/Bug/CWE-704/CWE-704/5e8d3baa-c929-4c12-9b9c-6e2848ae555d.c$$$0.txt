-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
46,47
48,49
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
59,60
59,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,32,34,37,39,41,43,47,49,50,52,53,58,60,61,62,66,67,72,74,76,78,83,85,86,90,92
-----computeFrom-----
12,13
12,14
22,23
22,24
51,52
51,53
55,56
55,57
59,60
59,61
64,65
64,66
80,81
80,82
-----guardedBy-----
66,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_08_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(17,22,0)
(20,0,0)
(46,11,0)
(5,17,0)
(37,45,0)
(11,46,0)
(0,17,0)
(43,2,0)
(32,1,0)
(2,18,0)
(3,2,0)
(14,7,0)
(18,30,0)
(16,30,0)
(6,5,0)
(0,18,0)
(24,41,0)
(5,18,0)
(8,46,0)
(46,41,0)
(27,45,0)
(36,30,0)
(4,41,0)
(29,2,0)
(1,41,0)
(9,27,0)
(44,7,0)
(2,7,0)
(38,33,0)
(23,14,0)
(0,38,0)
(34,0,0)
(10,18,0)
(28,41,0)
(45,27,0)
(7,41,0)
(26,45,0)
(12,17,0)
(31,5,0)
(42,11,0)
(2,33,0)
(15,18,0)
(27,1,0)
(2,17,0)
(40,11,0)
(14,41,0)
(21,46,0)
(39,12,0)
(47,38,0)
(41,30,0)
(25,17,0)
(0,7,0)
(19,7,0)
(17,12,0)
(23,38,1)
(2,7,1)
(18,15,1)
(15,10,1)
(37,26,1)
(35,14,1)
(21,8,1)
(46,11,1)
(25,13,1)
(9,46,1)
(5,17,1)
(0,17,1)
(29,43,1)
(7,19,1)
(34,20,1)
(2,18,1)
(3,29,1)
(14,23,1)
(40,42,1)
(45,37,1)
(0,7,1)
(0,18,1)
(44,17,1)
(5,31,1)
(13,18,1)
(14,7,1)
(11,40,1)
(19,44,1)
(42,21,1)
(23,5,1)
(39,25,1)
(31,6,1)
(2,3,1)
(5,18,1)
(44,13,1)
(8,7,1)
(0,34,1)
(20,2,1)
(32,27,1)
(17,12,1)
(43,5,1)
(38,47,1)
(6,1,1)
(27,45,1)
(26,9,1)
(47,0,1)
(12,39,1)
(1,32,1)
(2,17,1)
(3,5,2)
(2,5,2)
(17,13,2)
(2,18,2)
(34,5,2)
(47,5,2)
(43,5,2)
(25,13,2)
(0,18,2)
(0,5,2)
(2,17,2)
(27,45,2)
(2,7,2)
(12,13,2)
(29,5,2)
(14,7,2)
(0,17,2)
(17,12,2)
(46,11,2)
(39,13,2)
(0,7,2)
(5,18,2)
(5,17,2)
(20,5,2)
(38,5,2)
-----------------------------------
(0,dest[data])
(1,source[100-1] = \\\'\\\\0\\\')
(2,memmove(dest, source, data)
(3,data)
(4,source)
(5,data < 100)
(6,data)
(7,dest[100] = "")
(8,source)
(9,source)
(10,data)
(11,100-1)
(12,-1)
(13,staticReturnsTrue()
(14,printLine(dest)
(15,0)
(16,if(staticReturnsTrue()
(17,data = -1)
(18,data = 0)
(19,"")
(20,dest)
(21,\\\'A\\\')
(22,)
(23,dest)
(24,dest)
(25,data)
(26,100)
(27,source[100-1])
(28,if (data < 100)
(29,source)
(30,)
(31,100)
(32,\\\'\\\\0\\\')
(33,)
(34,data)
(35,RET)
(36,data)
(37,1)
(38,dest[data] = \\\'\\\\0\\\')
(39,1)
(40,1)
(41,)
(42,100)
(43,dest)
(44,dest)
(45,100-1)
(46,memset(source, \\\'A\\\', 100-1)
(47,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^