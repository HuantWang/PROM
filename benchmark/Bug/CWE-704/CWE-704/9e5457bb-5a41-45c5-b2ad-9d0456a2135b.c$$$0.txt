-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fscanf_34_bad()
{
    short data;
    CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a number input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
60,62
63,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,29,32,37,38,40,44,46,50,51,55,57,61,62,64,68,70
-----computeFrom-----
18,19
18,20
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fscanf_34_bad(){    short data;    CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a number input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__short_fscanf_34_bad()
CWE197_Numeric_Truncation_Error__short_fscanf_34_bad
{    short data;    CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType myUnion;    /* Initialize data */    data = -1;    /* FLAW: Use a number input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
short data;
short data;
short
data
data
CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType myUnion;
CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType
CWE197_Numeric_Truncation_Error__short_fscanf_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(6,30,0)
(20,28,0)
(26,5,0)
(16,0,0)
(24,20,0)
(30,10,0)
(10,30,0)
(32,22,0)
(17,7,0)
(23,10,0)
(11,20,0)
(22,5,0)
(28,12,0)
(33,6,0)
(5,0,0)
(30,8,0)
(9,3,0)
(6,8,0)
(5,22,0)
(19,3,0)
(1,7,0)
(16,17,0)
(17,0,0)
(15,28,0)
(10,28,0)
(7,17,0)
(2,16,0)
(21,8,0)
(4,30,0)
(3,16,0)
(27,10,0)
(13,0,0)
(12,0,0)
(14,17,0)
(28,20,0)
(18,12,0)
(8,12,0)
(22,17,0)
(29,5,0)
(10,23,0)
(25,0,0)
(5,22,1)
(10,27,1)
(1,14,1)
(19,5,1)
(16,2,1)
(4,28,1)
(24,11,1)
(28,20,1)
(10,28,1)
(29,17,1)
(33,30,1)
(3,9,1)
(30,10,1)
(16,17,1)
(6,33,1)
(7,1,1)
(20,24,1)
(32,26,1)
(22,32,1)
(11,15,1)
(9,19,1)
(26,29,1)
(17,7,1)
(15,16,1)
(10,23,1)
(27,4,1)
(31,6,1)
(6,30,1)
(22,17,1)
(2,3,1)
(5,22,2)
(16,17,2)
(17,7,2)
(28,20,2)
(6,30,2)
(30,10,2)
(10,28,2)
(22,17,2)
(10,23,2)
-----------------------------------
(0,)
(1,1)
(2,data)
(3,myUnion.unionFirst)
(4,charData)
(5,fscanf (stdin, "%hd", &data)
(6,printHexCharLine(charData)
(7,-1)
(8,)
(9,unionFirst)
(10,(char)
(11,myUnion)
(12,)
(13,myUnion)
(14,data)
(15,data)
(16,myUnion.unionFirst = data)
(17,data = -1)
(18,data)
(19,myUnion)
(20,myUnion.unionSecond)
(21,charData)
(22,&data)
(23,char)
(24,unionSecond)
(25,data)
(26,"%hd")
(27,data)
(28,data = myUnion.unionSecond)
(29,stdin)
(30,charData = (char)
(31,RET)
(32,data)
(33,charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^