-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
60,61
60,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,18,23,26,27,31,33,35,38,40,42,44,48,50,51,53,54,59,61,62,63,67,68,73,75,77,79,84,86,87,91,93
-----computeFrom-----
12,13
12,14
21,22
21,23
52,53
52,54
56,57
56,58
60,61
60,62
65,66
65,67
81,82
81,83
-----guardedBy-----
67,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,39,0)
(15,24,0)
(5,38,0)
(39,24,0)
(6,15,0)
(29,28,0)
(37,47,0)
(41,45,0)
(26,14,0)
(6,38,0)
(4,30,0)
(44,6,0)
(32,45,0)
(18,30,0)
(4,39,0)
(2,47,0)
(9,40,0)
(38,14,0)
(10,48,0)
(17,41,0)
(42,40,0)
(46,40,0)
(16,6,0)
(1,39,0)
(26,41,0)
(22,26,0)
(34,41,0)
(28,15,0)
(48,35,0)
(26,15,0)
(21,39,0)
(27,42,0)
(35,48,0)
(23,24,0)
(43,15,0)
(26,30,0)
(20,0,0)
(19,42,0)
(42,39,0)
(36,39,0)
(3,4,0)
(25,26,0)
(6,41,0)
(8,35,0)
(41,34,0)
(13,35,0)
(47,41,0)
(0,39,0)
(7,30,0)
(6,30,0)
(40,42,0)
(15,28,0)
(48,0,0)
(47,15,0)
(12,26,0)
(33,24,0)
(40,9,1)
(6,15,1)
(31,15,1)
(26,22,1)
(6,41,1)
(10,42,1)
(22,12,1)
(41,34,1)
(3,47,1)
(46,19,1)
(28,29,1)
(3,38,1)
(6,30,1)
(48,35,1)
(47,15,1)
(6,44,1)
(0,20,1)
(12,25,1)
(11,4,1)
(19,27,1)
(29,43,1)
(18,31,1)
(44,16,1)
(4,3,1)
(34,17,1)
(17,31,1)
(26,41,1)
(38,5,1)
(7,18,1)
(47,37,1)
(9,46,1)
(47,41,1)
(37,2,1)
(27,30,1)
(13,10,1)
(18,32,1)
(2,0,1)
(32,41,1)
(42,40,1)
(35,8,1)
(5,6,1)
(20,48,1)
(4,30,1)
(25,47,1)
(26,15,1)
(26,30,1)
(15,28,1)
(30,7,1)
(16,26,1)
(8,13,1)
(47,15,2)
(17,31,2)
(26,41,2)
(15,28,2)
(16,47,2)
(48,35,2)
(41,31,2)
(6,30,2)
(38,47,2)
(42,40,2)
(26,30,2)
(4,30,2)
(6,47,2)
(26,47,2)
(6,15,2)
(6,41,2)
(32,31,2)
(25,47,2)
(44,47,2)
(5,47,2)
(12,47,2)
(47,41,2)
(34,31,2)
(41,34,2)
(26,15,2)
(22,47,2)
-----------------------------------
(0,source[100-1] = \\\'\\\\0\\\')
(1,source)
(2,data)
(3,dest)
(4,printLine(dest)
(5,\\\'\\\\0\\\')
(6,dest[data])
(7,"")
(8,1)
(9,1)
(10,source)
(11,RET)
(12,source)
(13,100)
(14,)
(15,data = -1)
(16,dest)
(17,data)
(18,dest)
(19,\\\'A\\\')
(20,\\\'\\\\0\\\')
(21,if (data < 100)
(22,data)
(23,while(1)
(24,)
(25,dest)
(26,memmove(dest, source, data)
(27,source)
(28,-1)
(29,1)
(30,dest[100] = "")
(31,1)
(32,break;)
(33,data)
(34,RAND32()
(35,100-1)
(36,dest)
(37,100)
(38,dest[data] = \\\'\\\\0\\\')
(39,)
(40,100-1)
(41,data = RAND32()
(42,memset(source, \\\'A\\\', 100-1)
(43,data)
(44,data)
(45,)
(46,100)
(47,data < 100)
(48,source[100-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^