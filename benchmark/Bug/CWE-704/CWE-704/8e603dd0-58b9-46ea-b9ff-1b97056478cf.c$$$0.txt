-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
32,33
32,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,33,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
32,33
32,34
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_12_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,7,0)
(31,39,0)
(3,30,0)
(28,35,0)
(13,7,0)
(39,11,0)
(12,31,0)
(30,17,0)
(4,6,0)
(37,0,0)
(25,35,0)
(29,13,0)
(18,21,0)
(13,52,0)
(7,45,0)
(44,45,0)
(7,26,0)
(52,58,0)
(34,1,0)
(22,13,0)
(26,3,0)
(30,52,0)
(17,14,0)
(46,26,0)
(35,17,0)
(3,59,0)
(7,13,0)
(3,26,0)
(32,5,0)
(6,45,0)
(35,52,0)
(46,5,0)
(39,31,0)
(54,1,0)
(51,17,0)
(26,45,0)
(5,46,0)
(13,17,0)
(24,30,0)
(2,0,0)
(8,5,0)
(59,3,0)
(40,46,0)
(6,26,0)
(30,3,0)
(57,45,0)
(5,52,0)
(55,47,0)
(20,7,0)
(21,45,0)
(52,16,0)
(53,52,0)
(16,52,0)
(1,17,0)
(41,26,0)
(47,26,0)
(49,44,0)
(48,37,0)
(46,21,0)
(15,37,0)
(27,45,0)
(50,0,0)
(42,0,0)
(17,1,0)
(33,16,0)
(19,47,0)
(44,26,0)
(5,17,0)
(41,35,1)
(13,52,1)
(5,17,1)
(10,37,1)
(52,16,1)
(31,12,1)
(35,52,1)
(6,26,1)
(25,52,1)
(19,55,1)
(54,34,1)
(17,1,1)
(13,17,1)
(9,20,1)
(30,17,1)
(35,17,1)
(35,28,1)
(33,53,1)
(5,32,1)
(3,59,1)
(43,35,1)
(16,33,1)
(22,29,1)
(13,22,1)
(43,6,1)
(6,4,1)
(3,30,1)
(25,17,1)
(5,52,1)
(30,24,1)
(44,26,1)
(37,48,1)
(28,25,1)
(39,31,1)
(46,5,1)
(51,10,1)
(7,26,1)
(8,40,1)
(46,26,1)
(34,51,1)
(49,21,1)
(48,15,1)
(12,47,1)
(21,18,1)
(44,49,1)
(47,26,1)
(55,26,1)
(47,19,1)
(7,13,1)
(53,10,1)
(20,47,1)
(32,8,1)
(20,39,1)
(40,7,1)
(4,44,1)
(24,41,1)
(30,52,1)
(29,9,1)
(1,54,1)
(26,3,1)
(18,46,1)
(35,52,2)
(17,10,2)
(52,10,2)
(6,26,2)
(13,17,2)
(13,35,2)
(26,35,2)
(5,35,2)
(32,35,2)
(40,35,2)
(35,17,2)
(34,10,2)
(29,35,2)
(9,35,2)
(3,30,2)
(53,10,2)
(20,35,2)
(55,35,2)
(7,35,2)
(30,52,2)
(21,35,2)
(52,16,2)
(4,35,2)
(5,52,2)
(49,35,2)
(7,13,2)
(18,35,2)
(47,35,2)
(30,17,2)
(46,35,2)
(39,47,2)
(1,10,2)
(13,52,2)
(16,10,2)
(33,10,2)
(17,1,2)
(6,35,2)
(5,17,2)
(22,35,2)
(46,26,2)
(41,35,2)
(8,35,2)
(31,47,2)
(47,26,2)
(3,59,2)
(24,35,2)
(44,35,2)
(7,26,2)
(12,47,2)
(44,26,2)
(39,31,2)
(19,35,2)
(3,35,2)
(54,10,2)
(46,5,2)
(30,35,2)
(51,10,2)
(26,3,2)
-----------------------------------
(0,)
(1,100-1)
(2,data)
(3,(char *)
(4,dataBuffer)
(5,data-1)
(6,free(dataBuffer)
(7,memset(dataBuffer, 'A', data-1)
(8,data)
(9,'A')
(10,globalReturnsTrueOrFalse()
(11,)
(12,1)
(13,data-1)
(14,)
(15,data)
(16,-1)
(17,data = 100-1)
(18,'\\\\0')
(19,NULL)
(20,dataBuffer)
(21,dataBuffer[data-1] = \'\\\\0\')
(22,1)
(23,dataBuffer[data-1] = '\\\\0')
(24,data)
(25,data)
(26,* dataBuffer = (char *)
(27,dataBuffer)
(28,100)
(29,data)
(30,malloc(data)
(31,-1)
(32,1)
(33,1)
(34,100)
(35,data < 100)
(36,\'\\\\0\')
(37,data = 0)
(38,\'A\')
(39,exit(-1)
(40,dataBuffer)
(41,dataBuffer)
(42,if(globalReturnsTrueOrFalse()
(43,RET)
(44,printLine(dataBuffer)
(45,)
(46,dataBuffer[data-1])
(47,dataBuffer == NULL)
(48,0)
(49,dataBuffer)
(50,if (data < 100)
(51,data)
(52,data = -1)
(53,data)
(54,1)
(55,dataBuffer)
(56,memset(dataBuffer, \'A\', data-1)
(57,if (dataBuffer == NULL)
(58,)
(59,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^