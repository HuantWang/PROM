-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_13_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_13_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_13_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_13_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,49,0)
(42,26,0)
(18,27,0)
(0,36,0)
(9,23,0)
(19,52,0)
(41,26,0)
(43,24,0)
(3,42,0)
(12,51,0)
(52,26,0)
(23,24,0)
(21,26,0)
(5,24,0)
(0,24,0)
(38,12,0)
(28,26,0)
(37,43,0)
(46,26,0)
(48,35,0)
(28,29,0)
(30,5,0)
(42,12,0)
(35,13,0)
(43,37,0)
(31,46,0)
(14,49,0)
(17,49,0)
(25,47,0)
(10,47,0)
(29,39,0)
(22,33,0)
(2,51,0)
(6,0,0)
(23,51,0)
(33,24,0)
(27,51,0)
(29,28,0)
(43,46,0)
(24,51,0)
(12,42,0)
(16,24,0)
(24,43,0)
(36,0,0)
(8,28,0)
(0,27,0)
(11,51,0)
(20,29,0)
(34,36,0)
(46,43,0)
(15,5,0)
(33,51,0)
(45,42,0)
(36,26,0)
(4,36,0)
(50,52,0)
(35,48,0)
(26,49,0)
(1,12,0)
(7,48,0)
(12,24,0)
(44,29,0)
(43,37,1)
(9,27,1)
(52,19,1)
(0,24,1)
(36,4,1)
(19,50,1)
(46,26,1)
(1,38,1)
(12,42,1)
(40,33,1)
(42,45,1)
(50,29,1)
(33,24,1)
(30,24,1)
(48,7,1)
(45,3,1)
(40,52,1)
(23,24,1)
(20,47,1)
(33,22,1)
(3,1,1)
(28,8,1)
(8,44,1)
(42,26,1)
(24,43,1)
(29,28,1)
(21,41,1)
(28,26,1)
(38,5,1)
(4,34,1)
(25,26,1)
(6,12,1)
(16,52,1)
(5,24,1)
(47,10,1)
(23,9,1)
(7,5,1)
(44,20,1)
(26,21,1)
(46,31,1)
(18,0,1)
(31,16,1)
(15,30,1)
(36,26,1)
(12,24,1)
(10,25,1)
(22,23,1)
(43,46,1)
(5,15,1)
(50,47,1)
(34,6,1)
(35,48,1)
(38,35,1)
(27,18,1)
(52,26,1)
(0,36,1)
(12,52,2)
(9,52,2)
(35,48,2)
(24,52,2)
(4,52,2)
(52,26,2)
(36,52,2)
(43,46,2)
(34,52,2)
(27,52,2)
(20,47,2)
(3,52,2)
(5,24,2)
(43,52,2)
(28,47,2)
(18,52,2)
(23,52,2)
(0,24,2)
(33,24,2)
(42,26,2)
(38,52,2)
(30,52,2)
(33,52,2)
(43,37,2)
(44,47,2)
(46,26,2)
(36,26,2)
(29,28,2)
(48,5,2)
(42,52,2)
(16,52,2)
(29,47,2)
(0,36,2)
(23,24,2)
(45,52,2)
(7,5,2)
(15,52,2)
(22,52,2)
(24,43,2)
(31,52,2)
(46,52,2)
(1,52,2)
(12,24,2)
(5,52,2)
(8,47,2)
(0,52,2)
(28,26,2)
(6,52,2)
(12,42,2)
(35,5,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,\\\'A\\\')
(2,if (dataBuffer == NULL)
(3,data)
(4,1)
(5,dataBuffer == NULL)
(6,dataBuffer)
(7,1)
(8,data)
(9,dataBuffer)
(10,5)
(11,dataBuffer)
(12,memset(dataBuffer, \\\'A\\\', data-1)
(13,)
(14,data)
(15,NULL)
(16,dataBuffer)
(17,if (data < 100)
(18,\\\'\\\\0\\\')
(19,100)
(20,stdin)
(21,0)
(22,dataBuffer)
(23,printLine(dataBuffer)
(24,* dataBuffer = (char *)
(25,GLOBAL_CONST_FIVE)
(26,data = 0)
(27,dataBuffer[data-1] = \\\'\\\\0\\\')
(28,&data)
(29,fscanf (stdin, "%hd", &data)
(30,dataBuffer)
(31,data)
(32,if(GLOBAL_CONST_FIVE==5)
(33,free(dataBuffer)
(34,data)
(35,exit(-1)
(36,data-1)
(37,char *)
(38,dataBuffer)
(39,)
(40,RET)
(41,data)
(42,data-1)
(43,(char *)
(44,"%hd")
(45,1)
(46,malloc(data)
(47,GLOBAL_CONST_FIVE==5)
(48,-1)
(49,)
(50,data)
(51,)
(52,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^