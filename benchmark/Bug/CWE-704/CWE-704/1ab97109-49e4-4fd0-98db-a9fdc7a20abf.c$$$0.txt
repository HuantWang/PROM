-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,35,36,40,42,44,47,49,51,53,57,59,60,62,63,68,70,71,72,76,77,82,84,86,88,93,95,96,100,102
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
34,35
34,36
61,62
61,63
65,66
65,67
69,70
69,71
74,75
74,76
90,91
90,92
-----guardedBy-----
76,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(36,50,0)
(21,6,0)
(14,27,0)
(49,9,0)
(44,24,0)
(13,50,0)
(46,21,0)
(47,36,0)
(25,4,0)
(20,10,0)
(27,1,0)
(9,51,0)
(24,31,0)
(15,26,0)
(39,50,0)
(5,6,0)
(21,50,0)
(3,27,0)
(15,25,0)
(27,31,0)
(16,33,0)
(37,32,0)
(33,43,0)
(25,10,0)
(0,21,0)
(31,2,0)
(6,21,0)
(2,31,0)
(31,45,0)
(53,15,0)
(29,25,0)
(15,31,0)
(17,43,0)
(1,26,0)
(51,9,0)
(35,32,0)
(33,32,0)
(34,6,0)
(30,1,0)
(19,24,0)
(23,10,0)
(12,15,0)
(38,9,0)
(10,25,0)
(41,51,0)
(7,52,0)
(15,36,0)
(18,15,0)
(50,32,0)
(27,36,0)
(48,50,0)
(8,50,0)
(42,13,0)
(24,25,0)
(51,13,0)
(27,25,0)
(22,36,0)
(11,31,0)
(52,36,0)
(43,33,0)
(52,50,0)
(7,24,1)
(27,36,1)
(21,6,1)
(36,22,1)
(14,3,1)
(3,15,1)
(12,24,1)
(41,21,1)
(47,31,1)
(11,28,1)
(10,23,1)
(44,13,1)
(31,2,1)
(49,41,1)
(27,31,1)
(24,19,1)
(15,36,1)
(15,25,1)
(51,9,1)
(30,27,1)
(17,16,1)
(43,17,1)
(0,46,1)
(1,30,1)
(29,28,1)
(53,12,1)
(47,25,1)
(15,18,1)
(6,5,1)
(27,25,1)
(20,29,1)
(24,25,1)
(19,44,1)
(38,49,1)
(2,11,1)
(34,0,1)
(27,14,1)
(25,10,1)
(24,31,1)
(9,38,1)
(23,20,1)
(33,43,1)
(28,33,1)
(18,53,1)
(5,34,1)
(42,51,1)
(15,31,1)
(52,7,1)
(22,47,1)
(46,36,1)
(7,1,1)
(13,42,1)
(40,52,1)
(52,36,1)
(31,28,2)
(27,24,2)
(30,24,2)
(24,25,2)
(15,25,2)
(14,24,2)
(31,2,2)
(33,43,2)
(15,24,2)
(27,25,2)
(15,36,2)
(15,31,2)
(23,28,2)
(1,24,2)
(3,24,2)
(27,31,2)
(51,9,2)
(18,24,2)
(52,36,2)
(25,28,2)
(53,24,2)
(20,28,2)
(21,6,2)
(10,28,2)
(29,28,2)
(11,28,2)
(27,36,2)
(25,10,2)
(12,24,2)
(24,31,2)
(2,28,2)
-----------------------------------
(0,\\\'A\\\')
(1,dest[data] = \\\'\\\\0\\\')
(2,RAND32()
(3,dest)
(4,)
(5,1)
(6,100-1)
(7,dest)
(8,if (data < 100)
(9,100-1)
(10,100-1)
(11,data)
(12,dest)
(13,source[100-1] = \\\'\\\\0\\\')
(14,data)
(15,strncpy(dest, source, data)
(16,data)
(17,1)
(18,data)
(19,100)
(20,100)
(21,memset(source, \\\'A\\\', 100-1)
(22,"")
(23,1)
(24,data < 100)
(25,data = 100-1)
(26,)
(27,dest[data])
(28,globalReturnsTrueOrFalse()
(29,data)
(30,\\\'\\\\0\\\')
(31,data = RAND32()
(32,)
(33,data = -1)
(34,100)
(35,data)
(36,dest[100] = "")
(37,if(globalReturnsTrueOrFalse()
(38,1)
(39,source)
(40,RET)
(41,source)
(42,\\\'\\\\0\\\')
(43,-1)
(44,data)
(45,)
(46,source)
(47,dest)
(48,dest)
(49,100)
(50,)
(51,source[100-1])
(52,printLine(dest)
(53,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^