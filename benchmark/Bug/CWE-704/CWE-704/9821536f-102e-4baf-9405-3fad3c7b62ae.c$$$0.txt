-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
73,76
73,77
73,78
73,79
74,75
75,76
75,77
77,78
77,79
79,80
81,82
82,83
82,84
84,85
84,86
84,87
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
116,117
116,118
116,119
116,120
117,118
119,120
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,78,80,83,85,87,89,93,95,96,98,99,104,106,107,108,112,113,118,120,122,124,129,131,132,136,138
-----computeFrom-----
32,33
32,34
57,58
57,59
97,98
97,99
101,102
101,103
105,106
105,107
110,111
110,112
126,127
126,128
-----guardedBy-----
112,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_32_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,31,0)
(57,10,0)
(17,1,0)
(50,7,0)
(1,65,0)
(8,27,0)
(64,3,0)
(15,53,0)
(58,70,0)
(38,10,0)
(27,68,0)
(19,49,0)
(55,35,0)
(70,19,0)
(12,65,0)
(2,17,0)
(7,68,0)
(62,27,0)
(5,57,0)
(34,27,0)
(52,1,0)
(26,65,0)
(70,52,0)
(27,67,0)
(41,21,0)
(42,53,0)
(37,4,0)
(66,33,0)
(53,28,0)
(48,10,0)
(69,4,0)
(47,61,0)
(35,17,0)
(40,65,0)
(18,65,0)
(36,53,0)
(29,11,0)
(56,18,0)
(24,33,0)
(4,68,0)
(60,36,0)
(7,13,0)
(31,33,0)
(9,1,0)
(0,51,0)
(49,19,0)
(45,59,0)
(23,49,0)
(25,13,0)
(11,53,0)
(43,28,0)
(31,11,0)
(20,18,0)
(59,36,0)
(32,36,0)
(39,57,0)
(68,28,0)
(27,36,0)
(30,19,0)
(51,9,0)
(13,67,0)
(46,9,0)
(6,68,0)
(21,3,0)
(28,65,0)
(9,51,0)
(3,21,0)
(61,21,0)
(68,61,0)
(35,19,0)
(22,1,0)
(33,31,0)
(51,52,0)
(54,53,0)
(10,57,0)
(44,9,0)
(7,36,0)
(63,7,0)
(71,52,0)
(59,53,0)
(21,65,0)
(19,65,0)
(52,70,0)
(10,53,0)
(17,52,0)
(61,68,0)
(0,44,1)
(33,66,1)
(47,6,1)
(10,57,1)
(8,34,1)
(59,45,1)
(46,52,1)
(7,68,1)
(52,70,1)
(61,47,1)
(27,36,1)
(32,60,1)
(2,35,1)
(71,18,1)
(29,31,1)
(25,7,1)
(11,29,1)
(3,64,1)
(16,59,1)
(62,8,1)
(68,61,1)
(23,30,1)
(5,38,1)
(70,58,1)
(19,49,1)
(64,41,1)
(38,48,1)
(31,33,1)
(56,20,1)
(27,62,1)
(59,36,1)
(20,21,1)
(55,9,1)
(63,27,1)
(7,50,1)
(51,52,1)
(35,19,1)
(21,3,1)
(49,23,1)
(14,10,1)
(41,19,1)
(24,14,1)
(34,4,1)
(36,32,1)
(69,11,1)
(13,25,1)
(44,46,1)
(57,39,1)
(4,37,1)
(58,71,1)
(50,63,1)
(70,19,1)
(66,24,1)
(61,21,1)
(45,13,1)
(18,56,1)
(27,68,1)
(4,68,1)
(48,36,1)
(51,0,1)
(37,69,1)
(9,51,1)
(60,68,1)
(17,2,1)
(6,17,1)
(35,55,1)
(45,4,1)
(39,5,1)
(17,52,1)
(7,36,1)
(4,68,2)
(31,33,2)
(51,52,2)
(50,4,2)
(52,70,2)
(68,61,2)
(13,4,2)
(7,36,2)
(35,19,2)
(59,36,2)
(7,68,2)
(17,52,2)
(61,21,2)
(10,57,2)
(70,19,2)
(63,4,2)
(8,4,2)
(19,49,2)
(7,4,2)
(21,3,2)
(27,68,2)
(34,4,2)
(27,4,2)
(27,36,2)
(25,4,2)
(62,4,2)
(9,51,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,&data)
(4,data < 100)
(5,100)
(6,data)
(7,dest[data])
(8,source)
(9,fscanf (stdin, "%hd", &data)
(10,memset(source, \\\'A\\\', 100-1)
(11,source[100-1] = \\\'\\\\0\\\')
(12,data)
(13,dest[data] = \\\'\\\\0\\\')
(14,source)
(15,source)
(16,RET)
(17,*dataPtr1 = data)
(18,data = 0)
(19,*dataPtr1 = &data)
(20,data)
(21,*dataPtr2 = &data)
(22,data)
(23,data)
(24,100)
(25,\\\'\\\\0\\\')
(26,dataPtr2)
(27,memmove(dest, source, data)
(28,)
(29,\\\'\\\\0\\\')
(30,dataPtr1)
(31,source[100-1])
(32,"")
(33,100-1)
(34,dest)
(35,*dataPtr1)
(36,dest[100] = "")
(37,100)
(38,\\\'A\\\')
(39,1)
(40,dataPtr1)
(41,dataPtr2)
(42,dest)
(43,data)
(44,"%hd")
(45,dest)
(46,stdin)
(47,dataPtr2)
(48,source)
(49,&data)
(50,data)
(51,&data)
(52,data = *dataPtr1)
(53,)
(54,if (data < 100)
(55,dataPtr1)
(56,0)
(57,100-1)
(58,dataPtr1)
(59,printLine(dest)
(60,dest)
(61,*dataPtr2)
(62,data)
(63,dest)
(64,data)
(65,)
(66,1)
(67,)
(68,data = *dataPtr2)
(69,data)
(70,*dataPtr1)
(71,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^