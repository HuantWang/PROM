-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memmove_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* FLAW: Use a value input from the network */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
51,63
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
159,161
160,161
162,163
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
187,188
187,189
187,190
188,189
188,190
189,190
189,191
190,191
192,193
194,195
194,196
195,196
197,198
199,200
200,201
201,202
201,203
202,203
204,205
206,207
207,208
208,209
208,210
209,210
211,212
214,215
214,216
215,216
215,217
216,217
218,219
220,221
221,222
222,223
222,224
223,224
225,226
227,228
227,229
227,230
228,229
229,230
229,231
231,232
231,233
233,234
234,235
236,237
237,238
237,239
239,240
239,241
241,242
242,243
244,245
244,246
244,247
244,248
244,249
244,250
245,246
246,247
246,248
248,249
248,250
250,251
252,253
253,254
253,255
255,256
255,257
255,258
257,258
259,260
261,262
262,263
262,264
262,265
262,266
263,264
265,266
268,269
268,270
271,272
272,273
272,274
273,274
273,275
274,275
276,277
276,278
280,281
280,282
281,282
281,283
282,283
285,286
285,287
286,287
287,288
287,289
287,290
287,291
288,289
290,291
292,293
294,295
296,297
297,298
297,299
298,299
298,300
299,300
301,302
304,305
305,306
305,307
306,307
308,309
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,30,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,103,105,110,111,114,116,121,123,127,129,132,136,138,140,144,147,149,151,154,155,156,161,163,166,167,169,174,176,177,181,184,186,191,193,196,198,203,205,210,212,213,217,219,224,226,230,232,235,238,240,243,247,249,251,254,256,258,260,264,266,267,269,270,275,277,278,279,283,284,289,291,293,295,300,302,303,307,309
-----computeFrom-----
12,13
12,14
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
107,108
107,109
118,119
118,120
142,143
142,144
152,153
152,154
158,159
158,160
159,160
159,161
164,165
164,166
171,172
171,173
179,180
179,181
188,189
188,190
189,190
189,191
194,195
194,196
201,202
201,203
208,209
208,210
215,216
215,217
268,269
268,270
272,273
272,274
276,277
276,278
281,282
281,283
297,298
297,299
-----guardedBy-----
217,226
283,302
-----guardedByNegation-----
196,212
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memmove_31_bad(){    short data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_memmove_31_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_memmove_31_bad
{    short data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(114,27,0)
(131,37,0)
(58,127,0)
(163,80,0)
(184,94,0)
(97,66,0)
(31,67,0)
(90,131,0)
(69,106,0)
(14,20,0)
(84,37,0)
(179,97,0)
(40,37,0)
(160,6,0)
(143,18,0)
(18,101,0)
(56,153,0)
(38,20,0)
(35,11,0)
(166,20,0)
(73,63,0)
(26,37,0)
(60,129,0)
(138,117,0)
(154,37,0)
(135,104,0)
(129,37,0)
(118,55,0)
(186,106,0)
(55,27,0)
(104,25,0)
(121,186,0)
(52,99,0)
(88,93,0)
(53,31,0)
(142,148,0)
(117,76,0)
(128,119,0)
(169,45,0)
(29,124,0)
(161,132,0)
(11,35,0)
(80,127,0)
(167,165,0)
(131,90,0)
(83,122,0)
(41,0,0)
(137,36,0)
(97,91,0)
(1,58,0)
(7,129,0)
(105,90,0)
(93,68,0)
(63,9,0)
(177,37,0)
(99,55,0)
(158,20,0)
(32,37,0)
(50,43,0)
(106,186,0)
(109,9,0)
(63,6,0)
(123,63,0)
(25,37,0)
(22,25,0)
(146,69,0)
(152,104,0)
(156,57,0)
(7,11,0)
(125,25,0)
(106,77,0)
(33,43,0)
(24,172,0)
(34,145,0)
(74,20,0)
(55,99,0)
(152,36,0)
(101,0,0)
(157,17,0)
(63,94,0)
(68,93,0)
(6,119,0)
(27,37,0)
(125,154,0)
(159,27,0)
(70,125,0)
(178,6,0)
(50,27,0)
(44,20,0)
(21,31,0)
(174,99,0)
(100,69,0)
(46,164,0)
(67,31,0)
(165,119,0)
(35,129,0)
(178,140,0)
(175,20,0)
(165,122,0)
(172,119,0)
(50,4,0)
(57,97,0)
(48,145,0)
(13,43,0)
(104,152,0)
(94,69,0)
(102,35,0)
(28,104,0)
(119,58,0)
(31,53,0)
(115,170,0)
(130,7,0)
(59,125,0)
(64,7,0)
(47,37,0)
(150,127,0)
(181,55,0)
(98,6,0)
(136,119,0)
(93,88,0)
(65,67,0)
(12,44,0)
(132,26,0)
(126,124,0)
(120,117,0)
(145,27,0)
(171,178,0)
(133,20,0)
(69,58,0)
(94,58,0)
(134,88,0)
(3,35,0)
(144,177,0)
(72,66,0)
(66,72,0)
(149,131,0)
(178,94,0)
(71,132,0)
(113,148,0)
(151,61,0)
(111,85,0)
(183,154,0)
(107,58,0)
(86,37,0)
(11,7,0)
(97,27,0)
(79,159,0)
(182,68,0)
(124,94,0)
(55,25,0)
(20,127,0)
(69,117,0)
(5,142,0)
(141,80,0)
(96,112,0)
(176,119,0)
(159,43,0)
(36,25,0)
(129,19,0)
(92,91,0)
(148,142,0)
(0,101,0)
(10,45,0)
(122,165,0)
(162,149,0)
(108,55,0)
(49,53,0)
(16,178,0)
(142,172,0)
(147,23,0)
(36,152,0)
(39,178,0)
(185,20,0)
(168,148,0)
(2,94,0)
(136,6,0)
(66,97,0)
(103,44,0)
(117,129,0)
(54,159,0)
(95,88,0)
(15,20,0)
(78,177,0)
(19,129,0)
(42,26,0)
(112,93,0)
(61,66,0)
(69,80,0)
(66,61,0)
(97,57,0)
(51,122,0)
(101,37,0)
(18,85,0)
(85,18,0)
(30,19,0)
(31,37,0)
(25,55,0)
(93,112,0)
(27,145,0)
(91,97,0)
(180,106,0)
(9,140,0)
(43,20,0)
(139,85,0)
(81,119,0)
(87,36,0)
(116,165,0)
(89,145,0)
(45,27,0)
(8,149,0)
(62,136,0)
(110,20,0)
(82,50,0)
(91,97,1)
(12,103,1)
(11,7,1)
(2,69,1)
(35,3,1)
(92,97,1)
(113,168,1)
(62,9,1)
(94,184,1)
(66,72,1)
(52,118,1)
(136,6,1)
(125,25,1)
(118,181,1)
(54,79,1)
(89,48,1)
(50,43,1)
(115,75,1)
(180,11,1)
(138,11,1)
(79,46,1)
(159,27,1)
(139,26,1)
(178,6,1)
(50,82,1)
(154,183,1)
(6,160,1)
(159,43,1)
(122,83,1)
(142,148,1)
(152,104,1)
(103,80,1)
(78,144,1)
(55,27,1)
(97,57,1)
(97,66,1)
(26,42,1)
(167,116,1)
(129,19,1)
(93,112,1)
(36,137,1)
(105,149,1)
(109,63,1)
(116,6,1)
(13,44,1)
(75,159,1)
(148,113,1)
(171,124,1)
(173,106,1)
(66,61,1)
(68,93,1)
(71,161,1)
(55,99,1)
(16,171,1)
(174,52,1)
(18,85,1)
(7,130,1)
(19,30,1)
(108,99,1)
(95,173,1)
(178,94,1)
(183,125,1)
(33,13,1)
(178,39,1)
(147,152,1)
(173,117,1)
(61,151,1)
(57,156,1)
(43,33,1)
(155,136,1)
(46,68,1)
(60,154,1)
(145,34,1)
(117,129,1)
(36,25,1)
(136,62,1)
(125,59,1)
(34,89,1)
(18,143,1)
(93,88,1)
(85,111,1)
(65,21,1)
(53,49,1)
(39,16,1)
(79,56,1)
(21,53,1)
(80,163,1)
(104,28,1)
(73,178,1)
(149,8,1)
(70,152,1)
(3,102,1)
(91,92,1)
(157,91,1)
(131,90,1)
(144,68,1)
(62,124,1)
(100,146,1)
(124,126,1)
(98,94,1)
(27,145,1)
(117,120,1)
(79,173,1)
(111,139,1)
(132,71,1)
(83,51,1)
(184,2,1)
(96,88,1)
(63,94,1)
(50,27,1)
(35,129,1)
(160,98,1)
(55,108,1)
(114,177,1)
(163,141,1)
(67,65,1)
(134,95,1)
(101,0,1)
(45,169,1)
(181,22,1)
(8,162,1)
(124,94,1)
(159,54,1)
(120,138,1)
(69,106,1)
(182,93,1)
(51,167,1)
(146,115,1)
(179,131,1)
(186,121,1)
(146,75,1)
(63,123,1)
(10,27,1)
(123,73,1)
(24,142,1)
(7,129,1)
(99,174,1)
(177,78,1)
(161,31,1)
(11,35,1)
(156,66,1)
(165,122,1)
(29,172,1)
(143,85,1)
(30,60,1)
(9,109,1)
(137,87,1)
(42,132,1)
(45,27,1)
(0,41,1)
(69,80,1)
(68,182,1)
(88,134,1)
(102,129,1)
(121,180,1)
(28,135,1)
(64,35,1)
(31,53,1)
(82,159,1)
(126,29,1)
(87,104,1)
(79,157,1)
(25,55,1)
(63,6,1)
(5,165,1)
(41,18,1)
(31,67,1)
(90,105,1)
(95,43,1)
(152,36,1)
(162,101,1)
(44,12,1)
(56,45,1)
(69,117,1)
(169,10,1)
(49,45,1)
(94,69,1)
(48,114,1)
(168,5,1)
(135,25,1)
(97,27,1)
(106,186,1)
(130,64,1)
(79,147,1)
(22,91,1)
(59,70,1)
(172,24,1)
(69,100,1)
(112,96,1)
(104,25,1)
(75,50,1)
(151,179,1)
(117,11,2)
(179,45,2)
(161,45,2)
(104,91,2)
(178,94,2)
(68,93,2)
(112,173,2)
(25,91,2)
(57,45,2)
(111,45,2)
(159,43,2)
(69,80,2)
(66,72,2)
(10,68,2)
(42,45,2)
(45,68,2)
(46,68,2)
(136,6,2)
(109,124,2)
(169,68,2)
(89,68,2)
(66,45,2)
(165,122,2)
(66,61,2)
(36,25,2)
(67,45,2)
(125,152,2)
(97,45,2)
(26,45,2)
(50,159,2)
(125,25,2)
(106,11,2)
(9,124,2)
(96,173,2)
(18,85,2)
(91,97,2)
(69,117,2)
(162,45,2)
(8,45,2)
(7,35,2)
(91,45,2)
(45,27,2)
(157,91,2)
(55,27,2)
(135,91,2)
(137,104,2)
(93,88,2)
(129,152,2)
(115,75,2)
(35,129,2)
(21,45,2)
(173,152,2)
(121,11,2)
(87,104,2)
(145,68,2)
(93,173,2)
(61,45,2)
(7,129,2)
(88,173,2)
(147,152,2)
(25,55,2)
(178,6,2)
(39,124,2)
(71,45,2)
(129,19,2)
(94,69,2)
(30,152,2)
(180,11,2)
(151,45,2)
(139,45,2)
(48,68,2)
(186,11,2)
(90,45,2)
(55,91,2)
(69,106,2)
(18,45,2)
(106,186,2)
(97,27,2)
(144,68,2)
(59,152,2)
(138,11,2)
(183,152,2)
(102,152,2)
(68,173,2)
(82,159,2)
(118,91,2)
(154,152,2)
(63,124,2)
(70,152,2)
(50,43,2)
(124,94,2)
(95,173,2)
(31,53,2)
(174,91,2)
(131,90,2)
(34,68,2)
(142,148,2)
(101,0,2)
(117,129,2)
(132,45,2)
(3,152,2)
(156,45,2)
(159,27,2)
(11,152,2)
(104,25,2)
(177,68,2)
(92,45,2)
(27,68,2)
(65,45,2)
(60,152,2)
(93,112,2)
(53,45,2)
(134,173,2)
(178,124,2)
(35,152,2)
(49,45,2)
(143,45,2)
(63,94,2)
(123,124,2)
(182,173,2)
(22,91,2)
(28,91,2)
(73,124,2)
(149,45,2)
(78,68,2)
(16,124,2)
(181,91,2)
(31,67,2)
(99,91,2)
(131,45,2)
(11,35,2)
(56,45,2)
(152,91,2)
(101,45,2)
(11,7,2)
(152,36,2)
(114,68,2)
(171,124,2)
(105,45,2)
(31,45,2)
(0,45,2)
(108,91,2)
(52,91,2)
(152,104,2)
(97,57,2)
(55,99,2)
(50,27,2)
(63,6,2)
(120,11,2)
(36,104,2)
(130,35,2)
(27,145,2)
(19,152,2)
(85,45,2)
(64,35,2)
(97,66,2)
(41,45,2)
-----------------------------------
(0,inet_addr(IP_ADDRESS)
(1,data)
(2,data)
(3,SHRT_MAX)
(4,)
(5,source)
(6,dest[100] = "")
(7,tempInt < SHRT_MIN)
(8,sin_port)
(9,dest[data] = \\\'\\\\0\\\')
(10,connectSocket)
(11,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(12,0)
(13,connectSocket)
(14,inputBuffer)
(15,connectSocket)
(16,source)
(17,)
(18,service.sin_addr.s_addr)
(19,atoi(inputBuffer)
(20,)
(21,0)
(22,recvResult)
(23,)
(24,\\\'\\\\0\\\')
(25,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(26,service.sin_family = AF_INET)
(27,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(28,SOCKET_ERROR)
(29,data)
(30,inputBuffer)
(31,memset(&service, 0, sizeof(service)
(32,if (connectSocket == INVALID_SOCKET)
(33,INVALID_SOCKET)
(34,IPPROTO_TCP)
(35,tempInt > SHRT_MAX)
(36,recvResult == 0)
(37,)
(38,wsaData)
(39,data)
(40,if (connect(connectSocket, (struct sockaddr*)
(41,IP_ADDRESS)
(42,AF_INET)
(43,connectSocket = INVALID_SOCKET)
(44,wsaDataInit = 0)
(45,connectSocket == INVALID_SOCKET)
(46,break;)
(47,if (WSAStartup(MAKEWORD(2,2)
(48,AF_INET)
(49,service)
(50,CLOSE_SOCKET(connectSocket)
(51,100)
(52,CHAR_ARRAY_SIZE)
(53,&service)
(54,INVALID_SOCKET)
(55,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(56,break;)
(57,sizeof(service)
(58,)
(59,recvResult)
(60,tempInt)
(61,&service)
(62,dest)
(63,dest[data])
(64,tempInt)
(65,service)
(66,(struct sockaddr*)
(67,sizeof(service)
(68,WSAStartup(MAKEWORD(2,2)
(69,dataCopy = data)
(70,inputBuffer)
(71,sin_family)
(72,struct sockaddr*)
(73,dest)
(74,if (connectSocket != INVALID_SOCKET)
(75,wsaDataInit)
(76,)
(77,)
(78,1)
(79,connectSocket)
(80,data = 0)
(81,dest)
(82,connectSocket)
(83,1)
(84,if (recvResult == SOCKET_ERROR || recvResult == 0)
(85,service.sin_addr)
(86,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(87,recvResult)
(88,MAKEWORD(2,2)
(89,SOCK_STREAM)
(90,htons(TCP_PORT)
(91,connect(connectSocket, (struct sockaddr*)
(92,SOCKET_ERROR)
(93,WSAStartup(MAKEWORD(2,2)
(94,data = dataCopy)
(95,2)
(96,wsaData)
(97,connect(connectSocket, (struct sockaddr*)
(98,dest)
(99,CHAR_ARRAY_SIZE - 1)
(100,data)
(101,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(102,tempInt)
(103,wsaDataInit)
(104,recvResult == SOCKET_ERROR)
(105,TCP_PORT)
(106,data = -1)
(107,dataCopy)
(108,0)
(109,\\\'\\\\0\\\')
(110,tempInt)
(111,sin_addr)
(112,&wsaData)
(113,1)
(114,connectSocket)
(115,WSACleanup()
(116,source)
(117,data = tempInt)
(118,inputBuffer)
(119,)
(120,tempInt)
(121,1)
(122,100-1)
(123,data)
(124,data < 100)
(125,inputBuffer[recvResult])
(126,100)
(127,)
(128,source)
(129,tempInt = atoi(inputBuffer)
(130,SHRT_MIN)
(131,service.sin_port = htons(TCP_PORT)
(132,service.sin_family)
(133,do)
(134,2)
(135,recvResult)
(136,printLine(dest)
(137,0)
(138,data)
(139,service)
(140,)
(141,data)
(142,source[100-1])
(143,s_addr)
(144,wsaDataInit)
(145,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(146,dataCopy)
(147,break;)
(148,100-1)
(149,service.sin_port)
(150,data)
(151,service)
(152,recvResult == SOCKET_ERROR || recvResult == 0)
(153,)
(154,inputBuffer[recvResult] = \\\'\\\\0\\\')
(155,RET)
(156,service)
(157,break;)
(158,wsaDataInit)
(159,connectSocket != INVALID_SOCKET)
(160,"")
(161,service)
(162,service)
(163,0)
(164,)
(165,memset(source, \\\'A\\\', 100-1)
(166,service)
(167,\\\'A\\\')
(168,100)
(169,INVALID_SOCKET)
(170,)
(171,dest)
(172,source[100-1] = \\\'\\\\0\\\')
(173,0)
(174,1)
(175,recvResult)
(176,if (data < 100)
(177,wsaDataInit = 1)
(178,memmove(dest, source, data)
(179,connectSocket)
(180,data)
(181,connectSocket)
(182,NO_ERROR)
(183,\\\'\\\\0\\\')
(184,dataCopy)
(185,if (wsaDataInit)
(186,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^