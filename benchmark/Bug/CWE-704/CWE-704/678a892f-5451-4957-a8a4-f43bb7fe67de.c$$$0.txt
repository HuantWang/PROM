-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
45,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,40,42,46,47,49,53,55
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_short_15_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_short_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(26,27,0)
(5,6,0)
(0,27,0)
(1,25,0)
(3,6,0)
(24,0,0)
(25,4,0)
(1,0,0)
(15,0,0)
(19,12,0)
(8,27,0)
(7,4,0)
(2,6,0)
(0,24,0)
(11,27,0)
(12,2,0)
(23,26,0)
(14,1,0)
(16,27,0)
(1,22,0)
(4,25,0)
(17,25,0)
(20,21,0)
(21,1,0)
(25,6,0)
(21,2,0)
(1,21,0)
(13,27,0)
(18,2,0)
(22,1,0)
(12,21,0)
(20,16,1)
(25,4,1)
(26,23,1)
(12,19,1)
(12,21,1)
(14,20,1)
(16,26,1)
(20,11,1)
(15,9,1)
(9,25,1)
(1,0,1)
(24,15,1)
(4,7,1)
(7,17,1)
(19,21,1)
(10,12,1)
(11,0,1)
(23,9,1)
(1,22,1)
(0,24,1)
(1,14,1)
(1,25,1)
(21,1,1)
(11,9,2)
(23,9,2)
(1,25,2)
(16,9,2)
(0,9,2)
(12,21,2)
(25,4,2)
(24,9,2)
(21,1,2)
(1,0,2)
(0,24,2)
(1,22,2)
(15,9,2)
(26,9,2)
-----------------------------------
(0,data = RAND32()
(1,(short)
(2,)
(3,data)
(4,-1)
(5,switch(6)
(6,)
(7,1)
(8,default:)
(9,6)
(10,RET)
(11,break;)
(12,printShortLine(shortData)
(13,case 6:)
(14,data)
(15,data)
(16,break;)
(17,data)
(18,shortData)
(19,shortData)
(20,shortData)
(21,shortData = (short)
(22,short)
(23,"Benign, fixed string")
(24,RAND32()
(25,data = -1)
(26,printLine("Benign, fixed string")
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^