-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_10_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
69,70
69,71
71,72
72,73
72,74
73,74
73,75
76,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,74,75,77,81,83
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_10_bad(){    short data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_10_bad()
CWE197_Numeric_Truncation_Error__short_fgets_10_bad
{    short data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(27,36,0)
(16,5,0)
(7,23,0)
(19,27,0)
(31,26,0)
(1,4,0)
(5,25,0)
(4,20,0)
(35,27,0)
(26,24,0)
(25,3,0)
(34,36,0)
(4,0,0)
(22,23,0)
(27,37,0)
(37,17,0)
(30,18,0)
(6,7,0)
(11,17,0)
(23,7,0)
(20,4,0)
(13,14,0)
(26,25,0)
(36,27,0)
(25,5,0)
(7,14,0)
(25,26,0)
(28,17,0)
(3,25,0)
(38,30,0)
(4,7,0)
(4,26,0)
(32,20,0)
(10,32,0)
(2,20,0)
(32,13,0)
(0,4,0)
(8,14,0)
(15,37,0)
(33,37,0)
(21,14,0)
(5,37,0)
(29,27,0)
(20,13,0)
(9,13,0)
(17,12,0)
(25,5,1)
(37,15,1)
(7,23,1)
(4,0,1)
(40,7,1)
(35,37,1)
(4,1,1)
(2,30,1)
(10,20,1)
(1,2,1)
(30,38,1)
(25,3,1)
(39,32,1)
(36,27,1)
(16,31,1)
(27,29,1)
(15,33,1)
(4,7,1)
(34,27,1)
(20,4,1)
(38,36,1)
(2,26,1)
(36,34,1)
(27,37,1)
(19,35,1)
(32,10,1)
(2,40,1)
(29,19,1)
(26,25,1)
(33,40,1)
(32,20,1)
(5,37,1)
(4,26,1)
(5,16,1)
(31,36,1)
(22,6,1)
(23,22,1)
(36,27,2)
(7,23,2)
(26,36,2)
(5,37,2)
(29,40,2)
(36,40,2)
(25,3,2)
(38,36,2)
(25,36,2)
(15,40,2)
(4,26,2)
(19,40,2)
(30,36,2)
(27,40,2)
(31,36,2)
(25,5,2)
(34,40,2)
(20,4,2)
(33,40,2)
(4,7,2)
(16,36,2)
(27,37,2)
(32,20,2)
(5,36,2)
(26,25,2)
(37,40,2)
(35,40,2)
(4,0,2)
-----------------------------------
(0,char)
(1,data)
(2,charData)
(3,short)
(4,(char)
(5,atoi(inputBuffer)
(6,data)
(7,data = -1)
(8,if(globalTrue)
(9,charData)
(10,charData)
(11,inputBuffer)
(12,)
(13,)
(14,)
(15,"")
(16,inputBuffer)
(17,)
(18,)
(19,CHAR_ARRAY_SIZE)
(20,charData = (char)
(21,data)
(22,1)
(23,-1)
(24,)
(25,(short)
(26,data = (short)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(29,stdin)
(30,printLine("fgets()
(31,data)
(32,printHexCharLine(charData)
(33,inputBuffer)
(34,NULL)
(35,inputBuffer)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,inputBuffer[CHAR_ARRAY_SIZE] = "")
(38,"fgets()
(39,RET)
(40,globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^