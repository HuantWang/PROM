-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,67,69
-----computeFrom-----
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad(){    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad
{    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(18,28,0)
(1,28,0)
(23,7,0)
(29,9,0)
(25,10,0)
(15,14,0)
(28,17,0)
(1,15,0)
(30,13,0)
(14,15,0)
(22,9,0)
(8,12,0)
(26,13,0)
(11,28,0)
(14,7,0)
(15,1,0)
(24,13,0)
(12,21,0)
(13,20,0)
(29,5,0)
(9,29,0)
(14,29,0)
(16,20,0)
(7,28,0)
(15,19,0)
(6,28,0)
(19,15,0)
(3,14,0)
(20,13,0)
(27,29,0)
(0,7,0)
(27,20,1)
(15,19,1)
(16,13,1)
(30,7,1)
(13,24,1)
(20,13,1)
(24,26,1)
(9,22,1)
(0,23,1)
(26,30,1)
(3,12,1)
(15,14,1)
(23,2,1)
(29,9,1)
(20,16,1)
(8,20,1)
(12,8,1)
(14,3,1)
(14,29,1)
(14,7,1)
(4,2,1)
(1,15,1)
(3,29,1)
(4,1,1)
(7,0,1)
(22,27,1)
(1,15,2)
(15,2,2)
(22,20,2)
(7,2,2)
(9,20,2)
(3,2,2)
(12,20,2)
(30,2,2)
(0,2,2)
(29,20,2)
(23,2,2)
(14,2,2)
(15,14,2)
(8,20,2)
(16,2,2)
(1,2,2)
(20,13,2)
(20,2,2)
(29,9,2)
(15,19,2)
(27,20,2)
(14,29,2)
(26,2,2)
(14,7,2)
(13,2,2)
(24,2,2)
-----------------------------------
(0,0)
(1,printIntLine((int)
(2,staticReturnsTrue()
(3,doubleNumber)
(4,RET)
(5,)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,doubleNumber = 0)
(8,"fgets()
(9,atof(inputBuffer)
(10,)
(11,doubleNumber)
(12,printLine("fgets()
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,sqrt(doubleNumber)
(15,(int)
(16,NULL)
(17,)
(18,inputBuffer)
(19,int)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,)
(22,inputBuffer)
(23,doubleNumber)
(24,stdin)
(25,if(staticReturnsTrue()
(26,CHAR_ARRAY_SIZE)
(27,doubleNumber)
(28,)
(29,doubleNumber = atof(inputBuffer)
(30,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^