-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_large_12_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a number larger than CHAR_MAX */
        data = CHAR_MAX + 1;
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
32,33
32,34
33,34
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
47,49
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,16,20,25,28,29,34,37,38,42,44,48,49,51,55,57
-----computeFrom-----
12,13
12,14
23,24
23,25
26,27
26,28
32,33
32,34
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_large_12_bad(){    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_large_12_bad()
CWE197_Numeric_Truncation_Error__short_large_12_bad
{    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a number larger than CHAR_MAX */        data = CHAR_MAX + 1;    }
data = CHAR_MAX + 1;
data = CHAR_MAX + 1
data
data
CHAR_MAX + 1
CHAR_MAX
CHAR_MAX
1
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(7,2,0)
(26,16,0)
(29,20,0)
(4,6,0)
(5,26,0)
(5,4,0)
(3,17,0)
(20,16,0)
(0,24,0)
(6,4,0)
(24,15,0)
(25,16,0)
(18,10,0)
(14,2,0)
(1,2,0)
(22,5,0)
(11,26,0)
(17,5,0)
(20,10,0)
(4,5,0)
(21,14,0)
(4,14,0)
(14,23,0)
(10,20,0)
(19,16,0)
(24,8,0)
(2,14,0)
(4,24,0)
(17,26,0)
(9,8,0)
(28,8,0)
(8,24,0)
(12,4,0)
(17,5,1)
(13,17,1)
(9,0,1)
(22,14,1)
(2,7,1)
(4,14,1)
(20,10,1)
(17,3,1)
(5,4,1)
(21,27,1)
(1,21,1)
(18,29,1)
(28,9,1)
(7,1,1)
(8,28,1)
(27,20,1)
(24,8,1)
(10,18,1)
(0,27,1)
(4,12,1)
(4,6,1)
(12,22,1)
(3,5,1)
(22,24,1)
(4,24,1)
(14,2,1)
(4,24,2)
(28,27,2)
(1,27,2)
(2,27,2)
(7,27,2)
(5,4,2)
(14,27,2)
(9,27,2)
(21,27,2)
(17,5,2)
(24,27,2)
(4,14,2)
(14,2,2)
(0,27,2)
(24,8,2)
(20,10,2)
(8,27,2)
(4,6,2)
-----------------------------------
(0,data)
(1,CHAR_MAX)
(2,CHAR_MAX-5)
(3,charData)
(4,(char)
(5,charData = (char)
(6,char)
(7,5)
(8,CHAR_MAX + 1)
(9,CHAR_MAX)
(10,-1)
(11,charData)
(12,data)
(13,RET)
(14,data = CHAR_MAX-5)
(15,)
(16,)
(17,printHexCharLine(charData)
(18,1)
(19,data)
(20,data = -1)
(21,data)
(22,charData)
(23,)
(24,data = CHAR_MAX + 1)
(25,if(globalReturnsTrueOrFalse()
(26,)
(27,globalReturnsTrueOrFalse()
(28,1)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^