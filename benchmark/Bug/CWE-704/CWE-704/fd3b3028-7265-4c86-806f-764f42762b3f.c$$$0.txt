-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,42,0)
(22,40,0)
(38,27,0)
(32,21,0)
(0,21,0)
(6,21,0)
(21,48,0)
(6,4,0)
(46,47,0)
(0,48,0)
(46,32,0)
(16,27,0)
(25,3,0)
(2,50,0)
(21,6,0)
(14,21,0)
(49,47,0)
(36,1,0)
(37,0,0)
(39,46,0)
(23,32,0)
(40,42,0)
(15,24,0)
(1,5,0)
(5,1,0)
(41,22,0)
(31,46,0)
(8,35,0)
(40,22,0)
(4,6,0)
(28,12,0)
(47,3,0)
(50,28,0)
(6,35,0)
(33,21,0)
(34,48,0)
(1,47,0)
(45,19,0)
(3,47,0)
(9,33,0)
(47,27,0)
(35,47,0)
(19,21,0)
(32,48,0)
(11,32,0)
(18,40,0)
(30,24,0)
(24,47,0)
(40,21,0)
(10,22,0)
(43,5,0)
(7,48,0)
(51,5,0)
(42,48,0)
(35,6,0)
(33,48,0)
(5,17,0)
(29,19,0)
(13,27,0)
(22,47,0)
(28,50,0)
(32,46,0)
(6,4,1)
(21,6,1)
(33,21,1)
(15,30,1)
(23,28,1)
(41,18,1)
(35,8,1)
(50,2,1)
(51,43,1)
(19,21,1)
(24,15,1)
(45,29,1)
(18,32,1)
(25,49,1)
(37,33,1)
(5,1,1)
(30,26,1)
(42,20,1)
(0,37,1)
(23,19,1)
(32,46,1)
(3,25,1)
(8,14,1)
(40,21,1)
(26,47,1)
(14,24,1)
(28,50,1)
(31,11,1)
(2,19,1)
(46,39,1)
(30,5,1)
(32,21,1)
(11,23,1)
(36,51,1)
(46,47,1)
(33,9,1)
(1,47,1)
(44,0,1)
(22,47,1)
(20,40,1)
(29,21,1)
(10,41,1)
(44,24,1)
(0,21,1)
(6,35,1)
(9,42,1)
(24,47,1)
(35,47,1)
(19,45,1)
(1,36,1)
(40,22,1)
(22,10,1)
(43,26,1)
(39,31,1)
(47,3,1)
(41,24,2)
(18,24,2)
(22,24,2)
(43,26,2)
(0,21,2)
(19,24,2)
(10,24,2)
(22,47,2)
(24,47,2)
(19,21,2)
(1,26,2)
(50,19,2)
(33,24,2)
(9,24,2)
(51,26,2)
(47,3,2)
(39,24,2)
(42,24,2)
(35,47,2)
(28,19,2)
(37,24,2)
(36,26,2)
(29,24,2)
(21,6,2)
(0,24,2)
(46,24,2)
(6,24,2)
(6,4,2)
(11,24,2)
(45,24,2)
(46,47,2)
(31,24,2)
(32,46,2)
(33,21,2)
(40,22,2)
(6,35,2)
(28,50,2)
(1,47,2)
(23,24,2)
(5,1,2)
(2,19,2)
(40,24,2)
(32,21,2)
(35,24,2)
(5,26,2)
(21,24,2)
(8,24,2)
(20,24,2)
(40,21,2)
(32,24,2)
(14,24,2)
-----------------------------------
(0,free(dataBuffer)
(1,&data)
(2,1)
(3,-1)
(4,char *)
(5,fscanf(stdin, "%d", &data)
(6,(char *)
(7,if (dataBuffer == NULL)
(8,data)
(9,dataBuffer)
(10,1)
(11,\\\'A\\\')
(12,)
(13,if (data < 100)
(14,dataBuffer)
(15,100)
(16,data)
(17,)
(18,dataBuffer)
(19,dataBuffer == NULL)
(20,\\\'\\\\0\\\')
(21,* dataBuffer = (char *)
(22,data-1)
(23,dataBuffer)
(24,data < 100)
(25,1)
(26,staticTrue)
(27,)
(28,exit(-1)
(29,dataBuffer)
(30,data)
(31,data)
(32,memset(dataBuffer, \\\'A\\\', data-1)
(33,printLine(dataBuffer)
(34,dataBuffer)
(35,malloc(data)
(36,data)
(37,dataBuffer)
(38,if(staticTrue)
(39,1)
(40,dataBuffer[data-1])
(41,data)
(42,dataBuffer[data-1] = \\\'\\\\0\\\')
(43,stdin)
(44,RET)
(45,NULL)
(46,data-1)
(47,data = -1)
(48,)
(49,data)
(50,-1)
(51,"%d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^