-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
26,27
27,28
27,29
29,30
29,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
43,46
43,47
44,45
46,47
48,49
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
78,79
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,33,36,38,40,45,47,49,51,53,58,61,63,68,69,73,76,77,79
-----computeFrom-----
13,14
13,15
17,18
17,19
42,43
42,44
56,57
56,58
-----guardedBy-----
47,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(27,12,0)
(14,0,0)
(17,4,0)
(34,4,0)
(12,16,0)
(12,27,0)
(29,31,0)
(16,6,0)
(32,22,0)
(31,29,0)
(25,22,0)
(16,21,0)
(7,1,0)
(23,1,0)
(26,29,0)
(36,11,0)
(0,18,0)
(12,28,0)
(35,16,0)
(28,11,0)
(13,12,0)
(8,11,0)
(10,31,0)
(33,31,0)
(9,11,0)
(21,16,0)
(3,31,0)
(1,22,0)
(5,21,0)
(19,28,0)
(24,28,0)
(2,22,0)
(12,20,0)
(37,2,0)
(20,12,0)
(11,15,0)
(27,11,0)
(24,1,1)
(19,24,1)
(23,22,1)
(1,7,1)
(12,13,1)
(33,28,1)
(37,27,1)
(13,16,1)
(28,19,1)
(10,33,1)
(31,3,1)
(12,20,1)
(0,14,1)
(13,0,1)
(1,22,1)
(21,5,1)
(14,29,1)
(29,26,1)
(2,37,1)
(7,23,1)
(25,32,1)
(3,10,1)
(12,16,1)
(26,31,1)
(29,31,1)
(16,21,1)
(30,1,1)
(12,28,1)
(2,22,1)
(5,35,1)
(27,12,1)
(23,2,1)
(35,29,1)
(22,25,1)
(27,1,2)
(1,22,2)
(19,1,2)
(1,1,2)
(12,20,2)
(2,22,2)
(35,29,2)
(5,29,2)
(29,31,2)
(2,1,2)
(16,21,2)
(13,1,2)
(16,29,2)
(37,1,2)
(12,16,2)
(26,1,2)
(21,29,2)
(27,12,2)
(10,1,2)
(31,1,2)
(3,1,2)
(28,1,2)
(33,1,2)
(12,1,2)
(7,1,2)
(23,1,2)
(0,29,2)
(29,1,2)
(12,28,2)
(14,29,2)
(24,1,2)
-----------------------------------
(0,printLine("fgets()
(1,j < 1)
(2,j++)
(3,stdin)
(4,)
(5,inputBuffer)
(6,)
(7,1)
(8,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,doubleNumber)
(10,CHAR_ARRAY_SIZE)
(11,)
(12,(float)
(13,doubleNumber)
(14,"fgets()
(15,)
(16,doubleNumber = atof(inputBuffer)
(17,j)
(18,)
(19,0)
(20,float)
(21,atof(inputBuffer)
(22,j = 0)
(23,j)
(24,doubleNumber)
(25,0)
(26,NULL)
(27,printFloatLine((float)
(28,doubleNumber = 0)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,RET)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,j)
(33,inputBuffer)
(34,for(j = 0; j < 1; j++)
(35,doubleNumber)
(36,inputBuffer)
(37,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^