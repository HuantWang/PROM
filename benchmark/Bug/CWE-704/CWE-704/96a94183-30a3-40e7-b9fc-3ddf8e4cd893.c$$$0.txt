-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_15_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a number input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
68,69
69,70
69,71
70,71
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
82,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,66,67,71,72,73,77,79,83,84,86,90,92
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_15_bad(){    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_15_bad()
CWE197_Numeric_Truncation_Error__short_fgets_15_bad
{    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(21,27,0)
(14,38,0)
(11,24,0)
(5,39,0)
(25,9,0)
(17,13,0)
(32,39,0)
(13,19,0)
(40,45,0)
(24,22,0)
(8,19,0)
(20,43,0)
(27,39,0)
(7,46,0)
(29,38,0)
(16,19,0)
(31,18,0)
(22,18,0)
(43,41,0)
(26,19,0)
(33,35,0)
(37,36,0)
(24,40,0)
(24,7,0)
(4,22,0)
(6,24,0)
(45,15,0)
(18,35,0)
(30,27,0)
(24,11,0)
(46,7,0)
(40,0,0)
(44,38,0)
(10,22,0)
(28,19,0)
(22,24,0)
(45,40,0)
(3,10,0)
(12,40,0)
(9,27,0)
(38,36,0)
(39,19,0)
(1,35,0)
(7,35,0)
(42,7,0)
(15,45,0)
(2,46,0)
(45,9,0)
(38,27,0)
(9,45,0)
(36,38,0)
(10,18,0)
(38,44,1)
(29,14,1)
(12,36,1)
(43,20,1)
(46,2,1)
(22,24,1)
(44,29,1)
(7,46,1)
(23,7,1)
(2,42,1)
(24,6,1)
(4,16,1)
(34,10,1)
(6,4,1)
(17,23,1)
(9,25,1)
(24,11,1)
(24,7,1)
(4,8,1)
(30,23,1)
(9,27,1)
(38,27,1)
(16,40,1)
(45,9,1)
(24,40,1)
(40,45,1)
(16,43,1)
(36,38,1)
(13,17,1)
(37,38,1)
(27,21,1)
(45,15,1)
(10,3,1)
(25,12,1)
(8,13,1)
(36,37,1)
(21,30,1)
(3,22,1)
(14,27,1)
(10,22,1)
(20,36,1)
(21,23,2)
(45,36,2)
(29,23,2)
(12,36,2)
(36,38,2)
(37,23,2)
(8,23,2)
(44,23,2)
(40,36,2)
(24,7,2)
(9,27,2)
(38,27,2)
(10,22,2)
(17,23,2)
(36,23,2)
(38,23,2)
(40,45,2)
(22,24,2)
(16,23,2)
(27,23,2)
(20,36,2)
(30,23,2)
(14,23,2)
(13,23,2)
(45,9,2)
(25,36,2)
(45,15,2)
(24,11,2)
(43,36,2)
(9,36,2)
(7,46,2)
(24,40,2)
-----------------------------------
(0,)
(1,switch(6)
(2,1)
(3,charData)
(4,charData)
(5,inputBuffer)
(6,data)
(7,data = -1)
(8,break;)
(9,atoi(inputBuffer)
(10,printHexCharLine(charData)
(11,char)
(12,data)
(13,printLine("Benign, fixed string")
(14,inputBuffer)
(15,short)
(16,break;)
(17,"Benign, fixed string")
(18,)
(19,)
(20,"fgets()
(21,"")
(22,charData = (char)
(23,6)
(24,(char)
(25,inputBuffer)
(26,case 6:)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,default:)
(29,CHAR_ARRAY_SIZE)
(30,inputBuffer)
(31,charData)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,data)
(34,RET)
(35,)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,NULL)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,)
(40,data = (short)
(41,)
(42,data)
(43,printLine("fgets()
(44,stdin)
(45,(short)
(46,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^