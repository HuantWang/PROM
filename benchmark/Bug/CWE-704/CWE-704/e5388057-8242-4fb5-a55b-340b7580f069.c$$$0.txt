-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68b_badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68b_badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68b_badSink()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68b_badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(24,30,0)
(4,1,0)
(21,15,0)
(16,44,0)
(0,43,0)
(7,25,0)
(38,44,0)
(43,34,0)
(19,23,0)
(1,30,0)
(30,13,0)
(17,1,0)
(31,34,0)
(30,1,0)
(23,1,0)
(27,7,0)
(2,42,0)
(46,21,0)
(9,11,0)
(20,15,0)
(35,39,0)
(23,15,0)
(42,34,0)
(39,43,0)
(40,4,0)
(3,14,0)
(32,11,0)
(21,42,0)
(1,15,0)
(6,42,0)
(7,27,0)
(4,15,0)
(10,15,0)
(34,44,0)
(11,34,0)
(33,27,0)
(28,34,0)
(12,17,0)
(13,30,0)
(18,1,0)
(13,34,0)
(39,14,0)
(22,43,0)
(43,39,0)
(42,21,0)
(30,24,0)
(26,21,0)
(8,13,0)
(41,17,0)
(39,1,0)
(21,1,0)
(14,15,0)
(9,34,1)
(21,1,1)
(30,24,1)
(36,4,1)
(19,14,1)
(22,35,1)
(27,33,1)
(40,23,1)
(42,34,1)
(3,39,1)
(36,11,1)
(11,32,1)
(28,31,1)
(34,28,1)
(14,3,1)
(6,2,1)
(0,22,1)
(43,34,1)
(42,6,1)
(13,34,1)
(46,17,1)
(26,46,1)
(8,18,1)
(35,21,1)
(32,9,1)
(18,11,1)
(12,1,1)
(13,8,1)
(4,1,1)
(11,34,1)
(2,26,1)
(17,1,1)
(1,30,1)
(17,41,1)
(39,1,1)
(41,12,1)
(43,0,1)
(4,40,1)
(7,27,1)
(39,43,1)
(33,17,1)
(30,13,1)
(46,7,1)
(23,19,1)
(21,42,1)
(23,1,1)
(6,11,2)
(30,11,2)
(22,11,2)
(21,1,2)
(42,11,2)
(4,11,2)
(17,11,2)
(8,11,2)
(42,34,2)
(11,34,2)
(21,11,2)
(13,11,2)
(4,1,2)
(23,1,2)
(19,11,2)
(41,11,2)
(1,30,2)
(27,17,2)
(39,11,2)
(43,34,2)
(35,11,2)
(46,11,2)
(2,11,2)
(23,11,2)
(3,11,2)
(0,11,2)
(39,1,2)
(30,13,2)
(43,11,2)
(30,24,2)
(39,43,2)
(18,11,2)
(17,1,2)
(26,11,2)
(21,42,2)
(13,34,2)
(1,11,2)
(7,27,2)
(33,17,2)
(7,17,2)
(40,11,2)
(12,11,2)
(14,11,2)
-----------------------------------
(0,1)
(1,* dataBuffer = (char *)
(2,data)
(3,\'\\\\0\')
(4,free(dataBuffer)
(5,'\\\\0')
(6,1)
(7,exit(-1)
(8,data)
(9,data)
(10,if (dataBuffer == NULL)
(11,data < 100)
(12,dataBuffer)
(13,malloc(data)
(14,dataBuffer[data-1] = '\\\\0')
(15,)
(16,data)
(17,dataBuffer == NULL)
(18,dataBuffer)
(19,dataBuffer)
(20,dataBuffer)
(21,memset(dataBuffer, \'A\', data-1)
(22,data)
(23,printLine(dataBuffer)
(24,char *)
(25,)
(26,'A')
(27,-1)
(28,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData)
(29,dataBuffer[data-1] = \'\\\\0\')
(30,(char *)
(31,data)
(32,100)
(33,1)
(34,data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_68_badData)
(35,dataBuffer)
(36,RET)
(37,\'A\')
(38,if (data < 100)
(39,dataBuffer[data-1])
(40,dataBuffer)
(41,NULL)
(42,data-1)
(43,data-1)
(44,)
(45,memset(dataBuffer, 'A', data-1)
(46,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^