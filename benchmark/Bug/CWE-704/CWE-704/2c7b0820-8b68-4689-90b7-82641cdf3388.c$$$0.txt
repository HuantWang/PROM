-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(17,37,0)
(19,17,0)
(50,28,0)
(20,27,0)
(9,36,0)
(51,23,0)
(41,49,0)
(42,37,0)
(16,38,0)
(32,38,0)
(23,39,0)
(3,37,0)
(52,16,0)
(17,6,0)
(24,34,0)
(28,29,0)
(12,28,0)
(35,23,0)
(27,46,0)
(8,44,0)
(0,20,0)
(1,6,0)
(32,37,0)
(53,46,0)
(44,49,0)
(30,42,0)
(22,32,0)
(48,29,0)
(14,46,0)
(49,41,0)
(2,49,0)
(37,6,0)
(25,44,0)
(39,23,0)
(11,21,0)
(42,49,0)
(55,34,0)
(33,27,0)
(42,16,0)
(31,41,0)
(21,46,0)
(39,36,0)
(32,49,0)
(10,6,0)
(20,49,0)
(13,39,0)
(36,6,0)
(15,46,0)
(26,29,0)
(27,20,0)
(4,37,0)
(7,46,0)
(29,6,0)
(5,27,0)
(29,28,0)
(40,6,0)
(47,32,0)
(18,32,0)
(6,34,0)
(49,34,0)
(45,42,0)
(17,19,1)
(20,0,1)
(21,11,1)
(18,47,1)
(42,49,1)
(5,33,1)
(25,36,1)
(52,42,1)
(30,45,1)
(26,48,1)
(51,13,1)
(13,29,1)
(33,43,1)
(37,4,1)
(39,23,1)
(35,51,1)
(32,18,1)
(45,32,1)
(53,27,1)
(42,37,1)
(19,44,1)
(42,30,1)
(32,37,1)
(44,49,1)
(47,22,1)
(8,25,1)
(28,50,1)
(22,44,1)
(31,2,1)
(9,39,1)
(43,49,1)
(29,28,1)
(12,26,1)
(7,21,1)
(19,16,1)
(0,5,1)
(4,3,1)
(49,41,1)
(48,37,1)
(44,8,1)
(36,9,1)
(17,37,1)
(20,49,1)
(27,20,1)
(3,53,1)
(32,49,1)
(11,43,1)
(41,31,1)
(54,17,1)
(23,35,1)
(16,52,1)
(50,12,1)
(3,7,1)
(44,49,2)
(27,43,2)
(32,44,2)
(20,49,2)
(53,43,2)
(20,43,2)
(32,49,2)
(45,44,2)
(18,44,2)
(39,23,2)
(21,43,2)
(16,44,2)
(29,28,2)
(27,20,2)
(32,37,2)
(42,44,2)
(30,44,2)
(22,44,2)
(52,44,2)
(17,37,2)
(0,43,2)
(42,49,2)
(47,44,2)
(7,43,2)
(49,41,2)
(11,43,2)
(33,43,2)
(42,37,2)
(5,43,2)
-----------------------------------
(0,data)
(1,if (data < 100)
(2,data)
(3,dest)
(4,"")
(5,"%d")
(6,)
(7,break;)
(8,100)
(9,\\\'\\\\0\\\')
(10,dest)
(11,"Benign, fixed string")
(12,100)
(13,source)
(14,default:)
(15,case 6:)
(16,dest[data] = \\\'\\\\0\\\')
(17,printLine(dest)
(18,data)
(19,dest)
(20,&data)
(21,printLine("Benign, fixed string")
(22,dest)
(23,100-1)
(24,switch(6)
(25,data)
(26,\\\'A\\\')
(27,fscanf(stdin, "%d", &data)
(28,100-1)
(29,memset(source, \\\'A\\\', 100-1)
(30,data)
(31,1)
(32,memcpy(dest, source, data)
(33,stdin)
(34,)
(35,1)
(36,source[100-1] = \\\'\\\\0\\\')
(37,dest[100] = "")
(38,)
(39,source[100-1])
(40,source)
(41,-1)
(42,dest[data])
(43,6)
(44,data < 100)
(45,dest)
(46,)
(47,source)
(48,source)
(49,data = -1)
(50,1)
(51,100)
(52,\\\'\\\\0\\\')
(53,break;)
(54,RET)
(55,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^