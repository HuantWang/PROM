-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        short data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                strncpy(dest, source, data);
                dest[data] = '\0'; /* strncpy() does not always NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
76,78
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
93,94
95,96
97,98
97,99
98,99
99,100
99,101
101,102
101,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
107,113
108,109
109,110
109,111
111,112
111,113
113,114
115,116
116,117
116,118
118,119
118,120
118,121
120,121
122,123
124,125
125,126
125,127
125,128
125,129
126,127
128,129
131,132
131,133
134,135
135,136
135,137
136,137
136,138
137,138
139,140
139,141
143,144
143,145
144,145
144,146
145,146
148,149
148,150
149,150
150,151
150,152
150,153
150,154
151,152
153,154
155,156
157,158
159,160
160,161
160,162
161,162
161,163
162,163
164,165
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,78,81,83,88,89,94,96,100,102,106,110,112,114,117,119,121,123,127,129,130,132,133,138,140,141,142,146,147,152,154,156,158,163,165,166,170,172
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
91,92
91,93
131,132
131,133
135,136
135,137
139,140
139,141
144,145
144,146
160,161
160,162
-----guardedBy-----
63,83
146,165
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_32_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                strncpy(dest, source, data);                dest[data] = '\0'; /* strncpy() does not always NULL terminate */            }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,0,0)
(0,2,0)
(77,6,0)
(21,76,0)
(28,53,0)
(76,16,0)
(86,55,0)
(83,17,0)
(36,71,0)
(1,85,0)
(84,24,0)
(80,77,0)
(53,14,0)
(73,60,0)
(12,19,0)
(44,7,0)
(45,47,0)
(58,65,0)
(11,33,0)
(56,0,0)
(75,6,0)
(36,46,0)
(46,85,0)
(47,36,0)
(57,48,0)
(9,83,0)
(60,25,0)
(37,7,0)
(24,0,0)
(41,46,0)
(13,53,0)
(32,33,0)
(42,77,0)
(17,80,0)
(77,85,0)
(29,82,0)
(56,82,0)
(22,60,0)
(31,78,0)
(76,65,0)
(2,85,0)
(68,60,0)
(51,48,0)
(7,37,0)
(62,0,0)
(16,76,0)
(59,78,0)
(54,51,0)
(4,55,0)
(65,67,0)
(74,14,0)
(88,69,0)
(38,48,0)
(8,51,0)
(53,64,0)
(24,14,0)
(35,17,0)
(18,12,0)
(16,51,0)
(50,1,0)
(66,14,0)
(63,85,0)
(71,46,0)
(27,85,0)
(39,85,0)
(4,33,0)
(78,3,0)
(23,36,0)
(60,17,0)
(47,7,0)
(70,37,0)
(26,16,0)
(69,7,0)
(17,2,0)
(10,4,0)
(82,56,0)
(20,83,0)
(7,85,0)
(3,78,0)
(5,78,0)
(76,21,0)
(30,82,0)
(81,80,0)
(33,4,0)
(52,1,0)
(61,0,0)
(87,64,0)
(55,0,0)
(53,17,0)
(36,65,0)
(72,56,0)
(71,69,0)
(65,76,0)
(60,14,0)
(64,25,0)
(34,71,0)
(40,3,0)
(80,17,0)
(49,0,0)
(43,2,0)
(69,71,0)
(6,77,0)
(79,56,0)
(48,46,0)
(78,51,0)
(78,51,1)
(83,20,1)
(32,11,1)
(28,13,1)
(56,82,1)
(47,7,1)
(24,84,1)
(84,64,1)
(74,66,1)
(22,68,1)
(53,14,1)
(53,28,1)
(13,60,1)
(69,88,1)
(3,40,1)
(4,33,1)
(87,53,1)
(75,42,1)
(50,52,1)
(33,32,1)
(72,14,1)
(7,37,1)
(3,78,1)
(60,17,1)
(73,22,1)
(9,55,1)
(58,3,1)
(60,73,1)
(40,78,1)
(47,45,1)
(36,23,1)
(71,69,1)
(16,51,1)
(8,71,1)
(81,35,1)
(86,4,1)
(6,75,1)
(80,77,1)
(18,3,1)
(66,17,1)
(68,83,1)
(42,7,1)
(26,58,1)
(5,51,1)
(79,72,1)
(15,24,1)
(17,80,1)
(24,14,1)
(11,10,1)
(77,6,1)
(82,29,1)
(55,86,1)
(69,7,1)
(29,30,1)
(64,87,1)
(35,36,1)
(88,34,1)
(60,14,1)
(14,74,1)
(10,56,1)
(70,44,1)
(23,47,1)
(76,16,1)
(78,59,1)
(54,8,1)
(65,76,1)
(31,5,1)
(83,17,1)
(84,83,1)
(45,65,1)
(20,9,1)
(30,79,1)
(37,70,1)
(34,1,1)
(51,54,1)
(1,50,1)
(45,12,1)
(36,65,1)
(80,81,1)
(59,31,1)
(52,77,1)
(16,26,1)
(12,18,1)
(36,71,1)
(76,21,1)
(53,17,1)
(58,3,2)
(53,17,2)
(83,17,2)
(76,3,2)
(7,37,2)
(26,3,2)
(87,83,2)
(36,65,2)
(60,17,2)
(65,76,2)
(69,7,2)
(76,16,2)
(53,83,2)
(65,3,2)
(13,83,2)
(64,83,2)
(78,51,2)
(71,69,2)
(28,83,2)
(17,80,2)
(16,3,2)
(80,77,2)
(60,83,2)
(12,3,2)
(22,83,2)
(73,83,2)
(24,14,2)
(36,71,2)
(18,3,2)
(3,78,2)
(68,83,2)
(56,82,2)
(53,14,2)
(47,7,2)
(16,51,2)
(76,21,2)
(77,6,2)
(4,33,2)
(60,14,2)
-----------------------------------
(0,)
(1,data = 0)
(2,)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,source[100-1])
(5,inputBuffer)
(6,&data)
(7,*dataPtr1 = &data)
(8,inputBuffer)
(9,data)
(10,source)
(11,100)
(12,printLine("fgets()
(13,dest)
(14,dest[100] = "")
(15,RET)
(16,atoi(inputBuffer)
(17,data = *dataPtr2)
(18,"fgets()
(19,)
(20,100)
(21,short)
(22,source)
(23,data)
(24,printLine(dest)
(25,)
(26,inputBuffer)
(27,dataPtr2)
(28,data)
(29,1)
(30,100)
(31,CHAR_ARRAY_SIZE)
(32,1)
(33,100-1)
(34,data)
(35,data)
(36,*dataPtr1 = data)
(37,&data)
(38,inputBuffer)
(39,data)
(40,NULL)
(41,data)
(42,dataPtr2)
(43,data)
(44,dataPtr1)
(45,dataPtr1)
(46,)
(47,*dataPtr1)
(48,)
(49,if (data < 100)
(50,0)
(51,inputBuffer[CHAR_ARRAY_SIZE] = "")
(52,data)
(53,dest[data])
(54,"")
(55,source[100-1] = \\\'\\\\0\\\')
(56,memset(source, \\\'A\\\', 100-1)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,data)
(59,stdin)
(60,strncpy(dest, source, data)
(61,dest)
(62,source)
(63,dataPtr1)
(64,dest[data] = \\\'\\\\0\\\')
(65,data = (short)
(66,dest)
(67,)
(68,dest)
(69,*dataPtr1)
(70,data)
(71,data = *dataPtr1)
(72,source)
(73,data)
(74,"")
(75,data)
(76,(short)
(77,*dataPtr2 = &data)
(78,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(79,\\\'A\\\')
(80,*dataPtr2)
(81,dataPtr2)
(82,100-1)
(83,data < 100)
(84,dest)
(85,)
(86,\\\'\\\\0\\\')
(87,\\\'\\\\0\\\')
(88,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^