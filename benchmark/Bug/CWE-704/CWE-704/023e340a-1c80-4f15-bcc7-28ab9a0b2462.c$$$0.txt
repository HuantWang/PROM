-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_03_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
5==5
5
5
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(15,22,0)
(50,49,0)
(31,13,0)
(25,8,0)
(34,47,0)
(26,47,0)
(20,16,0)
(10,19,0)
(40,16,0)
(14,25,0)
(42,2,0)
(18,13,0)
(45,17,0)
(23,46,0)
(28,46,0)
(44,47,0)
(17,8,0)
(51,34,0)
(1,46,0)
(11,8,0)
(43,47,0)
(35,2,0)
(33,42,0)
(52,13,0)
(2,8,0)
(19,8,0)
(22,47,0)
(16,44,0)
(46,8,0)
(38,8,0)
(21,27,0)
(42,37,0)
(29,30,0)
(24,25,0)
(39,44,0)
(27,21,0)
(3,30,0)
(36,44,0)
(0,1,0)
(5,47,0)
(2,42,0)
(1,5,0)
(9,5,0)
(19,22,0)
(22,44,0)
(17,49,0)
(7,27,0)
(48,36,0)
(36,47,0)
(41,19,0)
(49,44,0)
(6,42,0)
(44,49,0)
(22,19,0)
(21,12,0)
(49,50,0)
(49,17,0)
(8,13,0)
(4,22,0)
(46,1,0)
(34,44,0)
(1,44,0)
(25,8,1)
(15,16,1)
(2,35,1)
(22,44,1)
(32,25,1)
(15,21,1)
(39,25,1)
(17,45,1)
(21,27,1)
(48,5,1)
(20,40,1)
(41,4,1)
(0,22,1)
(36,48,1)
(22,19,1)
(45,39,1)
(35,6,1)
(19,10,1)
(3,8,1)
(11,38,1)
(8,11,1)
(4,15,1)
(42,2,1)
(16,44,1)
(19,8,1)
(40,44,1)
(29,3,1)
(44,49,1)
(34,44,1)
(33,30,1)
(5,9,1)
(9,1,1)
(30,29,1)
(23,0,1)
(7,16,1)
(6,33,1)
(17,8,1)
(46,28,1)
(49,50,1)
(14,24,1)
(46,8,1)
(1,44,1)
(25,14,1)
(1,46,1)
(2,8,1)
(34,51,1)
(10,41,1)
(27,7,1)
(24,42,1)
(32,34,1)
(36,44,1)
(28,23,1)
(16,20,1)
(24,30,1)
(51,36,1)
(49,17,1)
(34,44,2)
(2,30,2)
(44,49,2)
(44,25,2)
(1,25,2)
(49,50,2)
(25,8,2)
(34,25,2)
(42,2,2)
(46,25,2)
(21,16,2)
(16,44,2)
(27,16,2)
(39,25,2)
(4,25,2)
(0,25,2)
(51,25,2)
(49,25,2)
(2,8,2)
(16,25,2)
(20,25,2)
(9,25,2)
(10,25,2)
(41,25,2)
(23,25,2)
(45,25,2)
(15,25,2)
(49,17,2)
(1,46,2)
(19,25,2)
(22,44,2)
(22,19,2)
(21,27,2)
(42,30,2)
(19,8,2)
(17,8,2)
(5,25,2)
(48,25,2)
(1,44,2)
(17,25,2)
(40,25,2)
(46,8,2)
(22,25,2)
(7,16,2)
(35,30,2)
(36,44,2)
(33,30,2)
(36,25,2)
(6,30,2)
(28,25,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer[data-1])
(2,&data)
(3,5)
(4,\\\'A\\\')
(5,dataBuffer[data-1] = \\\'\\\\0\\\')
(6,"%hd")
(7,1)
(8,data = 0)
(9,\\\'\\\\0\\\')
(10,1)
(11,0)
(12,)
(13,)
(14,100)
(15,dataBuffer)
(16,dataBuffer == NULL)
(17,malloc(data)
(18,if (data < 100)
(19,data-1)
(20,NULL)
(21,exit(-1)
(22,memset(dataBuffer, \\\'A\\\', data-1)
(23,data)
(24,data)
(25,data < 100)
(26,dataBuffer)
(27,-1)
(28,1)
(29,5)
(30,5==5)
(31,data)
(32,RET)
(33,stdin)
(34,free(dataBuffer)
(35,data)
(36,printLine(dataBuffer)
(37,)
(38,data)
(39,dataBuffer)
(40,dataBuffer)
(41,data)
(42,fscanf (stdin, "%hd", &data)
(43,if (dataBuffer == NULL)
(44,* dataBuffer = (char *)
(45,data)
(46,data-1)
(47,)
(48,dataBuffer)
(49,(char *)
(50,char *)
(51,dataBuffer)
(52,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^