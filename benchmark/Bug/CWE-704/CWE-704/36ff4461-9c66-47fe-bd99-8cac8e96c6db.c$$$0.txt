-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_03_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,35,37,39,42,44,46,48,52,54,55,57,58,63,65,66,67,71,72,77,79,81,83,88,90,91,95,97
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
56,57
56,58
60,61
60,62
64,65
64,66
69,70
69,71
85,86
85,87
-----guardedBy-----
71,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_03_bad(){    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_03_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_03_bad
{    short data;    /* Initialize data */    data = 0;    if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
5==5
5
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(35,10,0)
(2,17,0)
(33,29,0)
(37,17,0)
(12,35,0)
(31,10,0)
(1,3,0)
(44,17,0)
(19,3,0)
(30,9,0)
(39,46,0)
(38,1,0)
(47,15,0)
(11,3,0)
(47,10,0)
(15,13,0)
(28,10,0)
(34,9,0)
(7,31,0)
(18,29,0)
(0,17,0)
(5,39,0)
(17,9,0)
(36,17,0)
(27,2,0)
(43,10,0)
(23,8,0)
(29,18,0)
(3,1,0)
(32,4,0)
(26,31,0)
(21,47,0)
(16,46,0)
(31,44,0)
(46,17,0)
(31,6,0)
(48,15,0)
(31,15,0)
(40,39,0)
(15,29,0)
(35,15,0)
(24,17,0)
(50,4,0)
(25,44,0)
(29,33,0)
(47,8,0)
(42,31,0)
(1,0,0)
(47,44,0)
(10,9,0)
(45,47,0)
(22,44,0)
(49,35,0)
(29,15,0)
(46,39,0)
(14,46,0)
(2,44,0)
(8,6,0)
(41,0,0)
(47,45,1)
(29,18,1)
(3,11,1)
(15,29,1)
(39,40,1)
(32,10,1)
(35,10,1)
(35,15,1)
(23,47,1)
(50,32,1)
(44,25,1)
(19,38,1)
(49,12,1)
(4,50,1)
(27,35,1)
(35,49,1)
(22,4,1)
(27,8,1)
(18,48,1)
(38,46,1)
(48,4,1)
(5,14,1)
(31,44,1)
(2,44,1)
(21,31,1)
(31,15,1)
(28,43,1)
(8,23,1)
(12,0,1)
(26,42,1)
(31,7,1)
(7,26,1)
(47,10,1)
(11,19,1)
(22,15,1)
(25,22,1)
(47,44,1)
(41,1,1)
(29,33,1)
(14,16,1)
(47,15,1)
(16,44,1)
(40,5,1)
(0,41,1)
(31,10,1)
(10,28,1)
(45,21,1)
(46,39,1)
(20,2,1)
(2,27,1)
(42,35,1)
(1,3,1)
(21,35,2)
(31,10,2)
(46,39,2)
(15,4,2)
(8,35,2)
(2,44,2)
(47,15,2)
(15,29,2)
(18,4,2)
(45,35,2)
(31,44,2)
(47,10,2)
(47,44,2)
(29,18,2)
(47,35,2)
(31,15,2)
(35,10,2)
(31,35,2)
(48,4,2)
(23,35,2)
(1,3,2)
(29,4,2)
(29,33,2)
(35,15,2)
(26,35,2)
(7,35,2)
(42,35,2)
-----------------------------------
(0,source[100-1] = \\\'\\\\0\\\')
(1,source[100-1])
(2,printLine(dest)
(3,100-1)
(4,5==5)
(5,100)
(6,)
(7,data)
(8,dest[data] = \\\'\\\\0\\\')
(9,)
(10,data = 0)
(11,1)
(12,data)
(13,)
(14,\\\'A\\\')
(15,data = (short)
(16,source)
(17,)
(18,RAND32()
(19,100)
(20,RET)
(21,dest)
(22,dest)
(23,\\\'\\\\0\\\')
(24,dest)
(25,"")
(26,source)
(27,dest)
(28,0)
(29,(short)
(30,if(5==5)
(31,memcpy(dest, source, data)
(32,5)
(33,short)
(34,data)
(35,data < 100)
(36,if (data < 100)
(37,source)
(38,source)
(39,100-1)
(40,1)
(41,\\\'\\\\0\\\')
(42,dest)
(43,data)
(44,dest[100] = "")
(45,data)
(46,memset(source, \\\'A\\\', 100-1)
(47,dest[data])
(48,data)
(49,100)
(50,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^