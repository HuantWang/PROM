-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_09_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,65,69,71,72,76,78,81,83,87,89,94,96,100,102,103,106,107,112,115,116,117,121,123,127,129
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
62,63
62,64
85,86
85,87
104,105
104,106
109,110
109,111
113,114
113,115
-----guardedBy-----
38,54
64,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_09_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_09_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_09_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,26,0)
(8,12,0)
(48,9,0)
(11,45,0)
(26,1,0)
(15,5,0)
(19,17,0)
(45,1,0)
(33,31,0)
(66,29,0)
(18,48,0)
(50,22,0)
(62,0,0)
(29,0,0)
(47,5,0)
(60,31,0)
(5,48,0)
(51,12,0)
(5,44,0)
(29,9,0)
(23,62,0)
(1,22,0)
(55,52,0)
(30,29,0)
(48,0,0)
(13,40,0)
(7,44,0)
(54,12,0)
(0,62,0)
(35,17,0)
(22,61,0)
(5,1,0)
(21,45,0)
(9,10,0)
(64,65,0)
(41,44,0)
(61,22,0)
(4,1,0)
(56,1,0)
(49,0,0)
(46,17,0)
(24,54,0)
(22,50,0)
(22,1,0)
(61,0,0)
(26,44,0)
(57,44,0)
(55,53,0)
(58,57,0)
(43,53,0)
(31,9,0)
(17,46,0)
(3,17,0)
(36,65,0)
(59,48,0)
(65,25,0)
(4,44,0)
(39,40,0)
(34,16,0)
(53,55,0)
(31,16,0)
(16,1,0)
(6,61,0)
(0,40,0)
(37,28,0)
(1,44,0)
(12,65,0)
(38,40,0)
(54,9,0)
(16,31,0)
(61,9,0)
(16,57,0)
(17,12,0)
(27,9,0)
(14,4,0)
(48,5,0)
(2,37,0)
(9,54,0)
(31,0,0)
(42,46,0)
(61,0,1)
(15,47,1)
(35,19,1)
(34,5,1)
(58,16,1)
(46,17,1)
(47,45,1)
(5,48,1)
(32,57,1)
(53,43,1)
(2,46,1)
(54,12,1)
(61,9,1)
(43,45,1)
(48,0,1)
(33,34,1)
(31,60,1)
(14,26,1)
(8,51,1)
(45,1,1)
(37,2,1)
(29,30,1)
(48,59,1)
(27,46,1)
(9,54,1)
(61,6,1)
(4,1,1)
(54,24,1)
(31,9,1)
(24,27,1)
(21,11,1)
(42,17,1)
(45,21,1)
(66,37,1)
(20,29,1)
(11,1,1)
(56,29,1)
(4,14,1)
(22,50,1)
(12,8,1)
(29,9,1)
(26,32,1)
(20,4,1)
(17,12,1)
(16,1,1)
(30,66,1)
(60,33,1)
(26,1,1)
(19,3,1)
(66,9,1)
(1,22,1)
(23,49,1)
(5,1,1)
(51,63,1)
(16,31,1)
(18,15,1)
(55,53,1)
(6,56,1)
(3,12,1)
(62,23,1)
(59,18,1)
(29,0,1)
(22,61,1)
(17,35,1)
(46,42,1)
(57,58,1)
(0,62,1)
(31,0,1)
(66,63,1)
(48,9,1)
(47,55,1)
(63,0,1)
(18,29,2)
(11,29,2)
(12,63,2)
(16,31,2)
(22,29,2)
(16,1,2)
(1,22,2)
(42,63,2)
(31,9,2)
(33,29,2)
(22,61,2)
(14,29,2)
(16,29,2)
(24,46,2)
(53,45,2)
(1,29,2)
(48,29,2)
(54,46,2)
(61,9,2)
(60,29,2)
(21,29,2)
(0,62,2)
(37,46,2)
(31,29,2)
(15,29,2)
(26,29,2)
(59,29,2)
(6,29,2)
(17,12,2)
(3,63,2)
(48,9,2)
(5,1,2)
(35,63,2)
(27,46,2)
(19,63,2)
(17,63,2)
(55,53,2)
(32,29,2)
(56,29,2)
(31,0,2)
(47,29,2)
(54,12,2)
(4,1,2)
(43,45,2)
(26,1,2)
(58,29,2)
(22,50,2)
(34,29,2)
(9,54,2)
(29,0,2)
(57,29,2)
(51,63,2)
(45,29,2)
(55,45,2)
(2,46,2)
(46,17,2)
(45,1,2)
(46,63,2)
(5,29,2)
(9,46,2)
(61,0,2)
(61,29,2)
(29,9,2)
(48,0,2)
(8,63,2)
(5,48,2)
(4,29,2)
-----------------------------------
(0,data = -1)
(1,* dataBuffer = (char *)
(2,"fgets()
(3,inputBuffer)
(4,free(dataBuffer)
(5,memset(dataBuffer, \\\'A\\\', data-1)
(6,data)
(7,if (dataBuffer == NULL)
(8,"")
(9,data = atoi(inputBuffer)
(10,)
(11,dataBuffer)
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,data)
(14,dataBuffer)
(15,\\\'A\\\')
(16,dataBuffer[data-1])
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,data)
(19,CHAR_ARRAY_SIZE)
(20,RET)
(21,NULL)
(22,(char *)
(23,1)
(24,inputBuffer)
(25,)
(26,printLine(dataBuffer)
(27,data)
(28,)
(29,data < 100)
(30,100)
(31,data-1)
(32,dataBuffer)
(33,data)
(34,dataBuffer)
(35,stdin)
(36,inputBuffer)
(37,printLine("fgets()
(38,if (data < 100)
(39,if(GLOBAL_CONST_TRUE)
(40,)
(41,dataBuffer)
(42,NULL)
(43,1)
(44,)
(45,dataBuffer == NULL)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,dataBuffer)
(48,data-1)
(49,data)
(50,char *)
(51,inputBuffer)
(52,)
(53,-1)
(54,atoi(inputBuffer)
(55,exit(-1)
(56,dataBuffer)
(57,dataBuffer[data-1] = \\\'\\\\0\\\')
(58,\\\'\\\\0\\\')
(59,1)
(60,1)
(61,malloc(data)
(62,-1)
(63,GLOBAL_CONST_TRUE)
(64,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^