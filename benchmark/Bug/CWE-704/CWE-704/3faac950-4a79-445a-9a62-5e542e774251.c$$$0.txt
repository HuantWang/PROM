-----label-----
1
-----code-----
static void badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink(short data)
badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,20,0)
(35,37,0)
(17,20,0)
(30,18,0)
(41,17,0)
(14,8,0)
(43,35,0)
(5,38,0)
(40,31,0)
(0,37,0)
(17,41,0)
(11,33,0)
(28,23,0)
(3,9,0)
(12,23,0)
(36,8,0)
(26,33,0)
(24,28,0)
(27,23,0)
(18,30,0)
(34,17,0)
(15,17,0)
(9,18,0)
(37,18,0)
(19,28,0)
(23,37,0)
(18,9,0)
(37,8,0)
(18,37,0)
(33,20,0)
(1,5,0)
(9,20,0)
(23,28,0)
(38,5,0)
(6,21,0)
(41,14,0)
(22,0,0)
(4,8,0)
(21,8,0)
(41,37,0)
(0,8,0)
(10,41,0)
(38,7,0)
(13,14,0)
(42,35,0)
(23,8,0)
(21,37,0)
(2,37,0)
(42,43,1)
(28,20,1)
(22,21,1)
(27,35,1)
(28,24,1)
(19,12,1)
(10,23,1)
(37,18,1)
(33,20,1)
(23,28,1)
(35,37,1)
(12,27,1)
(17,34,1)
(25,33,1)
(6,14,1)
(15,10,1)
(0,22,1)
(18,9,1)
(9,3,1)
(2,33,1)
(23,37,1)
(11,26,1)
(21,6,1)
(1,35,1)
(41,17,1)
(3,2,1)
(14,13,1)
(0,37,1)
(41,37,1)
(13,41,1)
(38,5,1)
(34,15,1)
(18,30,1)
(27,38,1)
(21,37,1)
(5,1,1)
(24,19,1)
(35,42,1)
(43,37,1)
(9,20,1)
(25,0,1)
(17,20,1)
(33,11,1)
(27,33,2)
(21,37,2)
(6,33,2)
(9,33,2)
(15,33,2)
(22,33,2)
(17,33,2)
(42,33,2)
(10,33,2)
(23,28,2)
(13,33,2)
(41,37,2)
(34,33,2)
(5,35,2)
(1,35,2)
(35,33,2)
(37,33,2)
(9,20,2)
(43,33,2)
(0,37,2)
(41,17,2)
(0,33,2)
(28,20,2)
(14,33,2)
(23,37,2)
(41,33,2)
(38,5,2)
(35,37,2)
(23,33,2)
(37,18,2)
(3,33,2)
(21,33,2)
(18,9,2)
(18,30,2)
(2,33,2)
(38,35,2)
(12,33,2)
(18,33,2)
(19,33,2)
(24,33,2)
(17,20,2)
(28,33,2)
(33,20,2)
-----------------------------------
(0,free(dataBuffer)
(1,1)
(2,dataBuffer)
(3,data)
(4,if (dataBuffer == NULL)
(5,-1)
(6,dataBuffer)
(7,)
(8,)
(9,malloc(data)
(10,dataBuffer)
(11,100)
(12,\'A\')
(13,\'\\\\0\')
(14,dataBuffer[data-1] = \'\\\\0\')
(15,data)
(16,'A')
(17,data-1)
(18,(char *)
(19,data)
(20,short data)
(21,printLine(dataBuffer)
(22,dataBuffer)
(23,memset(dataBuffer, \'A\', data-1)
(24,1)
(25,RET)
(26,data)
(27,dataBuffer)
(28,data-1)
(29,'\\\\0')
(30,char *)
(31,)
(32,dataBuffer[data-1] = '\\\\0')
(33,data < 100)
(34,1)
(35,dataBuffer == NULL)
(36,dataBuffer)
(37,* dataBuffer = (char *)
(38,exit(-1)
(39,memset(dataBuffer, 'A', data-1)
(40,if (data < 100)
(41,dataBuffer[data-1])
(42,NULL)
(43,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^