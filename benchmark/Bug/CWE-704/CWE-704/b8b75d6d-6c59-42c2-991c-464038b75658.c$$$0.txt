-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,34,0)
(4,42,0)
(19,1,0)
(18,34,0)
(42,43,0)
(1,8,0)
(3,22,0)
(33,11,0)
(13,20,0)
(28,5,0)
(22,36,0)
(33,22,0)
(44,45,0)
(28,22,0)
(11,7,0)
(0,9,0)
(35,45,0)
(9,43,0)
(20,43,0)
(43,42,0)
(11,33,0)
(37,7,0)
(17,5,0)
(30,43,0)
(39,36,0)
(38,8,0)
(12,33,0)
(15,11,0)
(46,33,0)
(16,42,0)
(5,8,0)
(21,28,0)
(5,28,0)
(35,41,0)
(31,28,0)
(6,22,0)
(42,16,0)
(43,8,0)
(23,9,0)
(45,35,0)
(42,4,0)
(34,22,0)
(4,22,0)
(20,8,0)
(7,8,0)
(1,43,0)
(27,4,0)
(11,43,0)
(10,5,0)
(26,36,0)
(5,43,0)
(2,8,0)
(1,43,1)
(25,20,1)
(28,31,1)
(34,18,1)
(21,17,1)
(10,9,1)
(13,1,1)
(20,43,1)
(4,22,1)
(19,7,1)
(44,9,1)
(0,43,1)
(46,15,1)
(15,5,1)
(23,0,1)
(34,22,1)
(33,12,1)
(35,45,1)
(42,16,1)
(27,30,1)
(43,42,1)
(37,11,1)
(45,44,1)
(5,28,1)
(10,35,1)
(9,43,1)
(18,32,1)
(22,6,1)
(7,37,1)
(12,46,1)
(1,19,1)
(33,22,1)
(28,22,1)
(4,27,1)
(42,4,1)
(32,22,1)
(11,33,1)
(5,43,1)
(17,10,1)
(11,43,1)
(31,21,1)
(9,23,1)
(30,34,1)
(20,13,1)
(6,3,1)
(25,34,1)
(5,43,2)
(43,34,2)
(31,34,2)
(9,43,2)
(37,34,2)
(5,28,2)
(7,34,2)
(20,34,2)
(4,22,2)
(42,4,2)
(19,34,2)
(27,34,2)
(43,42,2)
(12,34,2)
(0,34,2)
(9,34,2)
(28,34,2)
(11,43,2)
(15,34,2)
(33,34,2)
(11,34,2)
(33,22,2)
(35,9,2)
(42,34,2)
(30,34,2)
(10,34,2)
(42,16,2)
(28,22,2)
(35,45,2)
(23,34,2)
(46,34,2)
(20,43,2)
(5,34,2)
(13,34,2)
(11,33,2)
(21,34,2)
(17,34,2)
(45,9,2)
(34,22,2)
(44,9,2)
(1,43,2)
(4,34,2)
(1,34,2)
-----------------------------------
(0,dataBuffer)
(1,printLine(dataBuffer)
(2,dataBuffer)
(3,data)
(4,malloc(data)
(5,memset(dataBuffer, \'A\', data-1)
(6,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData)
(7,dataBuffer[data-1] = \'\\\\0\')
(8,)
(9,dataBuffer == NULL)
(10,dataBuffer)
(11,dataBuffer[data-1])
(12,1)
(13,dataBuffer)
(14,dataBuffer[data-1] = '\\\\0')
(15,dataBuffer)
(16,char *)
(17,\'A\')
(18,100)
(19,dataBuffer)
(20,free(dataBuffer)
(21,data)
(22,data = CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_45_badData)
(23,NULL)
(24,'A')
(25,RET)
(26,if (data < 100)
(27,data)
(28,data-1)
(29,memset(dataBuffer, 'A', data-1)
(30,dataBuffer)
(31,1)
(32,data)
(33,data-1)
(34,data < 100)
(35,exit(-1)
(36,)
(37,'\\\\0')
(38,if (dataBuffer == NULL)
(39,data)
(40,\'\\\\0\')
(41,)
(42,(char *)
(43,* dataBuffer = (char *)
(44,1)
(45,-1)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^