-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_large_to_short_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a number larger than SHRT_MAX */
        data = SHRT_MAX + 5;
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
32,33
32,34
33,34
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
47,49
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,16,20,25,28,29,34,37,38,42,44,48,49,51,55,57
-----computeFrom-----
12,13
12,14
23,24
23,25
26,27
26,28
32,33
32,34
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_large_to_short_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_large_to_short_12_bad()
CWE197_Numeric_Truncation_Error__int_large_to_short_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
data = SHRT_MAX + 5;
data = SHRT_MAX + 5
data
data
SHRT_MAX + 5
SHRT_MAX
SHRT_MAX
5
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(12,1,0)
(13,9,0)
(16,3,0)
(19,2,0)
(5,11,0)
(6,2,0)
(1,3,0)
(6,27,0)
(9,22,0)
(23,3,0)
(1,4,0)
(28,4,0)
(15,27,0)
(11,8,0)
(14,11,0)
(3,8,0)
(4,27,0)
(29,9,0)
(3,1,0)
(3,22,0)
(22,21,0)
(20,0,0)
(24,6,0)
(8,11,0)
(26,22,0)
(3,23,0)
(17,8,0)
(22,9,0)
(0,4,0)
(0,1,0)
(2,6,0)
(18,27,0)
(8,7,0)
(9,13,1)
(26,25,1)
(11,14,1)
(12,22,1)
(1,3,1)
(3,8,1)
(14,5,1)
(29,26,1)
(13,29,1)
(19,24,1)
(3,16,1)
(2,19,1)
(6,2,1)
(0,1,1)
(8,11,1)
(0,20,1)
(16,12,1)
(17,25,1)
(3,23,1)
(25,6,1)
(5,17,1)
(3,22,1)
(12,8,1)
(22,9,1)
(20,1,1)
(10,0,1)
(3,23,2)
(22,25,2)
(14,25,2)
(5,25,2)
(11,25,2)
(22,9,2)
(1,3,2)
(8,25,2)
(26,25,2)
(3,8,2)
(17,25,2)
(13,25,2)
(0,1,2)
(6,2,2)
(3,22,2)
(9,25,2)
(8,11,2)
(29,25,2)
-----------------------------------
(0,printShortLine(shortData)
(1,shortData = (short)
(2,-1)
(3,(short)
(4,)
(5,SHRT_MAX)
(6,data = -1)
(7,)
(8,data = SHRT_MAX + 5)
(9,CHAR_MAX-5)
(10,RET)
(11,SHRT_MAX + 5)
(12,shortData)
(13,5)
(14,5)
(15,if(globalReturnsTrueOrFalse()
(16,data)
(17,data)
(18,data)
(19,1)
(20,shortData)
(21,)
(22,data = CHAR_MAX-5)
(23,short)
(24,data)
(25,globalReturnsTrueOrFalse()
(26,data)
(27,)
(28,shortData)
(29,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^