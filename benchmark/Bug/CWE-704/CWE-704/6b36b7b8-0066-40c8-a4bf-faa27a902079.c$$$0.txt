-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_63b_badSink(int * dataPtr)
{
    int data = *dataPtr;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,31,35,37,40,42,46,48,53,55,59,61,62,65,66,71,74,75,76,80,82,86,88
-----computeFrom-----
21,22
21,23
44,45
44,46
63,64
63,65
68,69
68,70
72,73
72,74
-----guardedBy-----
23,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_63b_badSink(int * dataPtr){    int data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_63b_badSink(int * dataPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_63b_badSink
int * dataPtr
int
* dataPtr
*
dataPtr
{    int data = *dataPtr;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = *dataPtr;
int data = *dataPtr;
int
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,44,0)
(18,34,0)
(6,22,0)
(14,48,0)
(27,5,0)
(1,17,0)
(30,27,0)
(19,5,0)
(4,21,0)
(46,47,0)
(25,34,0)
(2,0,0)
(13,27,0)
(0,34,0)
(35,2,0)
(25,5,0)
(5,34,0)
(33,19,0)
(14,43,0)
(37,10,0)
(23,47,0)
(10,17,0)
(48,14,0)
(35,46,0)
(45,24,0)
(32,10,0)
(15,35,0)
(16,17,0)
(29,20,0)
(5,19,0)
(26,2,0)
(40,48,0)
(3,5,0)
(17,46,0)
(2,35,0)
(21,34,0)
(22,19,0)
(19,33,0)
(9,25,0)
(12,46,0)
(20,46,0)
(2,5,0)
(19,22,0)
(46,20,0)
(10,34,0)
(24,46,0)
(10,5,0)
(39,34,0)
(21,5,0)
(11,47,0)
(28,0,0)
(8,35,0)
(22,46,0)
(38,24,0)
(17,10,0)
(30,13,1)
(48,40,1)
(29,12,1)
(14,48,1)
(6,3,1)
(27,5,1)
(16,1,1)
(32,14,1)
(8,26,1)
(17,46,1)
(25,5,1)
(17,16,1)
(20,44,1)
(4,0,1)
(9,21,1)
(15,8,1)
(10,17,1)
(24,45,1)
(35,15,1)
(37,32,1)
(20,29,1)
(10,5,1)
(22,46,1)
(45,38,1)
(21,5,1)
(2,35,1)
(19,33,1)
(38,46,1)
(27,30,1)
(0,28,1)
(25,9,1)
(28,2,1)
(22,6,1)
(21,4,1)
(35,46,1)
(41,25,1)
(2,5,1)
(5,19,1)
(13,5,1)
(32,27,1)
(46,20,1)
(1,37,1)
(40,27,1)
(26,10,1)
(19,22,1)
(24,46,1)
(41,24,1)
(3,24,1)
(19,22,2)
(0,24,2)
(40,27,2)
(48,27,2)
(10,5,2)
(14,48,2)
(27,5,2)
(22,46,2)
(25,5,2)
(22,24,2)
(35,46,2)
(19,33,2)
(24,46,2)
(32,24,2)
(26,24,2)
(21,5,2)
(9,24,2)
(10,24,2)
(13,24,2)
(10,17,2)
(6,24,2)
(5,19,2)
(2,5,2)
(1,24,2)
(8,24,2)
(5,24,2)
(17,24,2)
(21,24,2)
(27,24,2)
(37,24,2)
(16,24,2)
(2,24,2)
(19,24,2)
(15,24,2)
(2,35,2)
(25,24,2)
(4,24,2)
(28,24,2)
(14,27,2)
(20,44,2)
(30,24,2)
(17,46,2)
(46,20,2)
(35,24,2)
(3,24,2)
-----------------------------------
(0,dataBuffer[data-1] = '\\\\0')
(1,data)
(2,dataBuffer[data-1])
(3,dataBuffer)
(4,dataBuffer)
(5,* dataBuffer = (char *)
(6,data)
(7,dataBuffer[data-1] = \'\\\\0\')
(8,data)
(9,dataBuffer)
(10,memset(dataBuffer, 'A', data-1)
(11,data)
(12,data)
(13,dataBuffer)
(14,exit(-1)
(15,1)
(16,1)
(17,data-1)
(18,dataBuffer)
(19,(char *)
(20,*dataPtr)
(21,printLine(dataBuffer)
(22,malloc(data)
(23,if (data < 100)
(24,data < 100)
(25,free(dataBuffer)
(26,dataBuffer)
(27,dataBuffer == NULL)
(28,'\\\\0')
(29,dataPtr)
(30,NULL)
(31,memset(dataBuffer, \'A\', data-1)
(32,dataBuffer)
(33,char *)
(34,)
(35,data-1)
(36,\'\\\\0\')
(37,\'A\')
(38,data)
(39,if (dataBuffer == NULL)
(40,1)
(41,RET)
(42,'A')
(43,)
(44,int * dataPtr)
(45,100)
(46,data = *dataPtr)
(47,)
(48,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^