-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_21_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_21_bad(){    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_21_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_21_bad
{    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(25,17,0)
(42,23,0)
(6,28,0)
(19,5,0)
(47,21,0)
(39,9,0)
(5,21,0)
(46,24,0)
(34,22,0)
(31,15,0)
(30,22,0)
(22,28,0)
(11,30,0)
(18,24,0)
(38,14,0)
(16,17,0)
(2,9,0)
(20,46,0)
(26,7,0)
(27,24,0)
(46,20,0)
(15,27,0)
(12,32,0)
(17,7,0)
(17,45,0)
(9,27,0)
(40,27,0)
(28,46,0)
(33,27,0)
(3,46,0)
(30,7,0)
(7,27,0)
(17,22,0)
(36,7,0)
(48,4,0)
(9,4,0)
(0,20,0)
(41,27,0)
(8,45,0)
(37,17,0)
(10,32,0)
(30,8,0)
(5,14,0)
(21,5,0)
(44,30,0)
(4,9,0)
(35,21,0)
(23,22,0)
(43,8,0)
(14,27,0)
(15,7,0)
(32,24,0)
(13,23,0)
(22,24,0)
(28,22,0)
(29,4,0)
(32,10,1)
(28,46,1)
(10,12,1)
(34,32,1)
(17,22,1)
(14,38,1)
(17,7,1)
(5,21,1)
(16,25,1)
(20,0,1)
(31,23,1)
(28,6,1)
(15,31,1)
(2,7,1)
(23,13,1)
(22,28,1)
(36,22,1)
(7,26,1)
(4,29,1)
(1,15,1)
(8,43,1)
(30,22,1)
(9,4,1)
(13,42,1)
(48,39,1)
(47,35,1)
(11,17,1)
(46,20,1)
(39,2,1)
(44,11,1)
(23,22,1)
(6,34,1)
(12,46,1)
(15,7,1)
(37,16,1)
(25,23,1)
(17,37,1)
(42,14,1)
(43,30,1)
(29,48,1)
(35,19,1)
(30,44,1)
(21,47,1)
(19,9,1)
(0,3,1)
(31,8,1)
(38,5,1)
(30,7,1)
(26,36,1)
(37,23,2)
(15,7,2)
(46,20,2)
(22,28,2)
(30,23,2)
(11,23,2)
(23,22,2)
(17,22,2)
(43,23,2)
(16,23,2)
(30,22,2)
(28,46,2)
(5,21,2)
(8,23,2)
(17,7,2)
(25,23,2)
(30,7,2)
(44,23,2)
(17,23,2)
(9,4,2)
-----------------------------------
(0,1)
(1,RET)
(2,source)
(3,data)
(4,100-1)
(5,source[100-1])
(6,data)
(7,dest[100] = "")
(8,dest[data] = \\\'\\\\0\\\')
(9,memset(source, \\\'A\\\', 100-1)
(10,1)
(11,dest)
(12,badStatic)
(13,100)
(14,source[100-1] = \\\'\\\\0\\\')
(15,printLine(dest)
(16,source)
(17,memcpy(dest, source, data)
(18,data)
(19,source)
(20,-1)
(21,100-1)
(22,data = badSource(data)
(23,data < 100)
(24,)
(25,dest)
(26,"")
(27,)
(28,badSource(data)
(29,1)
(30,dest[data])
(31,dest)
(32,badStatic = 1)
(33,dest)
(34,data)
(35,100)
(36,dest)
(37,data)
(38,\\\'\\\\0\\\')
(39,\\\'A\\\')
(40,if (data < 100)
(41,source)
(42,data)
(43,\\\'\\\\0\\\')
(44,data)
(45,)
(46,data = -1)
(47,1)
(48,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^