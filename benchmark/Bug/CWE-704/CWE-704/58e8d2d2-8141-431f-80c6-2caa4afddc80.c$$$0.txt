-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
67,70
67,71
67,72
67,73
68,69
69,70
69,71
71,72
71,73
71,74
74,75
75,76
75,77
76,77
76,78
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
105,107
106,107
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
115,116
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,70,72,73,77,79,82,84,88,90,95,97,101,103,104,107,108,113,116,117,118,122,124,128,130
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
86,87
86,88
105,106
105,107
110,111
110,112
114,115
114,116
-----guardedBy-----
39,55
65,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,20,0)
(51,25,0)
(29,17,0)
(43,4,0)
(25,6,0)
(55,59,0)
(42,8,0)
(36,59,0)
(8,16,0)
(62,6,0)
(30,49,0)
(28,39,0)
(4,16,0)
(8,6,0)
(64,58,0)
(67,1,0)
(37,20,0)
(58,53,0)
(6,62,0)
(64,25,0)
(31,9,0)
(11,51,0)
(68,30,0)
(13,50,0)
(66,7,0)
(18,17,0)
(30,29,0)
(48,67,0)
(19,53,0)
(18,2,0)
(52,50,0)
(20,37,0)
(6,25,0)
(37,30,0)
(26,19,0)
(33,44,0)
(12,53,0)
(31,39,0)
(16,7,0)
(59,30,0)
(21,37,0)
(27,7,0)
(38,17,0)
(4,30,0)
(2,18,0)
(40,44,0)
(56,20,0)
(32,65,0)
(50,35,0)
(59,16,0)
(0,25,0)
(54,2,0)
(17,50,0)
(16,46,0)
(8,30,0)
(15,18,0)
(6,8,0)
(39,31,0)
(20,25,0)
(41,7,0)
(47,64,0)
(24,17,0)
(29,30,0)
(37,16,0)
(20,53,0)
(19,25,0)
(5,18,0)
(44,25,0)
(23,4,0)
(63,16,0)
(57,65,0)
(64,59,0)
(46,16,0)
(60,46,0)
(22,58,0)
(59,64,0)
(25,53,0)
(14,18,0)
(51,53,0)
(3,37,0)
(10,29,0)
(61,53,0)
(23,67,1)
(37,16,1)
(2,54,1)
(34,4,1)
(31,39,1)
(51,11,1)
(44,25,1)
(59,16,1)
(29,17,1)
(23,65,1)
(4,16,1)
(51,25,1)
(42,0,1)
(4,43,1)
(20,25,1)
(3,45,1)
(65,32,1)
(16,46,1)
(67,48,1)
(58,22,1)
(45,56,1)
(64,59,1)
(18,17,1)
(55,36,1)
(32,57,1)
(5,14,1)
(11,19,1)
(34,51,1)
(20,37,1)
(47,20,1)
(28,44,1)
(29,10,1)
(36,47,1)
(26,58,1)
(60,63,1)
(43,23,1)
(59,30,1)
(18,15,1)
(19,26,1)
(56,31,1)
(4,30,1)
(10,68,1)
(15,5,1)
(40,33,1)
(14,17,1)
(19,25,1)
(23,30,1)
(25,6,1)
(68,2,1)
(38,24,1)
(22,64,1)
(8,30,1)
(56,44,1)
(8,16,1)
(48,2,1)
(59,55,1)
(57,16,1)
(44,40,1)
(24,65,1)
(46,60,1)
(2,18,1)
(21,3,1)
(37,21,1)
(17,38,1)
(6,62,1)
(6,8,1)
(33,25,1)
(30,29,1)
(39,28,1)
(64,25,1)
(0,4,1)
(8,42,1)
(54,18,1)
(37,30,1)
(24,65,2)
(45,4,2)
(59,4,2)
(59,16,2)
(10,2,2)
(64,25,2)
(20,25,2)
(38,65,2)
(8,4,2)
(22,4,2)
(6,8,2)
(51,4,2)
(3,4,2)
(18,65,2)
(25,4,2)
(15,65,2)
(44,4,2)
(37,30,2)
(68,2,2)
(64,59,2)
(55,4,2)
(21,4,2)
(26,4,2)
(39,44,2)
(64,4,2)
(18,17,2)
(8,16,2)
(30,29,2)
(6,62,2)
(29,2,2)
(56,4,2)
(58,4,2)
(5,65,2)
(31,44,2)
(48,2,2)
(2,18,2)
(19,25,2)
(20,37,2)
(59,30,2)
(33,4,2)
(36,4,2)
(0,4,2)
(37,4,2)
(6,4,2)
(25,6,2)
(19,4,2)
(28,44,2)
(20,4,2)
(54,65,2)
(8,30,2)
(2,65,2)
(42,4,2)
(31,39,2)
(14,65,2)
(67,2,2)
(4,30,2)
(47,4,2)
(37,16,2)
(44,25,2)
(16,46,2)
(17,65,2)
(30,2,2)
(4,16,2)
(51,25,2)
(29,17,2)
(40,4,2)
(11,4,2)
-----------------------------------
(0,dataBuffer)
(1,)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,data)
(4,data < 100)
(5,CHAR_ARRAY_SIZE)
(6,(char *)
(7,)
(8,malloc(data)
(9,)
(10,inputBuffer)
(11,dataBuffer)
(12,if (dataBuffer == NULL)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,inputBuffer)
(15,stdin)
(16,data = -1)
(17,inputBuffer[CHAR_ARRAY_SIZE] = "")
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,printLine(dataBuffer)
(20,memset(dataBuffer, \\\'A\\\', data-1)
(21,1)
(22,\\\'\\\\0\\\')
(23,data)
(24,inputBuffer)
(25,* dataBuffer = (char *)
(26,dataBuffer)
(27,if (data < 100)
(28,1)
(29,atoi(inputBuffer)
(30,data = atoi(inputBuffer)
(31,exit(-1)
(32,5)
(33,dataBuffer)
(34,RET)
(35,)
(36,data)
(37,data-1)
(38,"")
(39,-1)
(40,NULL)
(41,if(5==5)
(42,data)
(43,100)
(44,dataBuffer == NULL)
(45,\\\'A\\\')
(46,-1)
(47,dataBuffer)
(48,"fgets()
(49,)
(50,)
(51,free(dataBuffer)
(52,inputBuffer)
(53,)
(54,NULL)
(55,1)
(56,dataBuffer)
(57,5)
(58,dataBuffer[data-1] = \\\'\\\\0\\\')
(59,data-1)
(60,1)
(61,dataBuffer)
(62,char *)
(63,data)
(64,dataBuffer[data-1])
(65,5==5)
(66,data)
(67,printLine("fgets()
(68,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^