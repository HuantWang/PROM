-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_21_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_21_bad(){    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_21_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_21_bad
{    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(26,37,0)
(15,23,0)
(21,18,0)
(37,7,0)
(32,18,0)
(24,19,0)
(22,37,0)
(46,40,0)
(4,30,0)
(0,30,0)
(17,41,0)
(36,30,0)
(17,34,0)
(48,5,0)
(19,32,0)
(38,12,0)
(5,34,0)
(1,41,0)
(18,30,0)
(3,16,0)
(32,19,0)
(30,40,0)
(47,22,0)
(34,40,0)
(10,34,0)
(2,36,0)
(34,28,0)
(28,34,0)
(8,17,0)
(44,46,0)
(11,22,0)
(42,23,0)
(17,7,0)
(31,32,0)
(45,30,0)
(46,6,0)
(22,34,0)
(14,5,0)
(12,23,0)
(9,6,0)
(23,30,0)
(36,41,0)
(20,12,0)
(25,40,0)
(43,16,0)
(27,28,0)
(13,19,0)
(22,41,0)
(29,17,0)
(35,41,0)
(28,46,0)
(23,12,0)
(41,30,0)
(16,40,0)
(6,46,0)
(39,17,0)
(5,34,1)
(17,8,1)
(19,24,1)
(9,44,1)
(8,39,1)
(42,15,1)
(38,42,1)
(23,12,1)
(43,46,1)
(27,10,1)
(11,47,1)
(37,26,1)
(10,16,1)
(1,34,1)
(17,34,1)
(32,19,1)
(34,28,1)
(12,20,1)
(28,46,1)
(22,11,1)
(5,48,1)
(16,3,1)
(29,5,1)
(28,27,1)
(14,18,1)
(17,41,1)
(3,43,1)
(36,2,1)
(24,13,1)
(26,22,1)
(22,41,1)
(46,6,1)
(33,36,1)
(47,17,1)
(31,23,1)
(2,37,1)
(39,29,1)
(22,34,1)
(36,41,1)
(2,5,1)
(35,1,1)
(20,38,1)
(18,21,1)
(41,35,1)
(13,31,1)
(6,9,1)
(15,41,1)
(48,14,1)
(21,32,1)
(37,5,2)
(8,5,2)
(17,41,2)
(36,41,2)
(34,28,2)
(17,5,2)
(22,34,2)
(22,5,2)
(11,5,2)
(29,5,2)
(23,12,2)
(32,19,2)
(46,6,2)
(39,5,2)
(5,34,2)
(17,34,2)
(28,46,2)
(22,41,2)
(47,5,2)
(26,5,2)
-----------------------------------
(0,source)
(1,dest)
(2,dest)
(3,1)
(4,dest)
(5,data < 100)
(6,-1)
(7,)
(8,data)
(9,1)
(10,data)
(11,data)
(12,100-1)
(13,100)
(14,data)
(15,source)
(16,badStatic = 1)
(17,memmove(dest, source, data)
(18,source[100-1] = \\\'\\\\0\\\')
(19,100-1)
(20,1)
(21,\\\'\\\\0\\\')
(22,dest[data])
(23,memset(source, \\\'A\\\', 100-1)
(24,1)
(25,data)
(26,\\\'\\\\0\\\')
(27,data)
(28,badSource(data)
(29,dest)
(30,)
(31,source)
(32,source[100-1])
(33,RET)
(34,data = badSource(data)
(35,"")
(36,printLine(dest)
(37,dest[data] = \\\'\\\\0\\\')
(38,100)
(39,source)
(40,)
(41,dest[100] = "")
(42,\\\'A\\\')
(43,badStatic)
(44,data)
(45,if (data < 100)
(46,data = -1)
(47,dest)
(48,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^