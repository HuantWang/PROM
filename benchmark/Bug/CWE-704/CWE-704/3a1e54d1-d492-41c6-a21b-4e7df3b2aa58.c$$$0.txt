-----label-----
1
-----code-----
static short badSource(short data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,42,45,47,52,53,56
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(26,9,0)
(9,6,0)
(1,7,0)
(24,25,0)
(5,4,0)
(11,4,0)
(20,19,0)
(14,0,0)
(13,5,0)
(0,15,0)
(3,19,0)
(4,0,0)
(13,6,0)
(21,9,0)
(7,19,0)
(25,23,0)
(19,7,0)
(5,18,0)
(15,9,0)
(19,15,0)
(13,8,0)
(5,8,0)
(22,13,0)
(16,15,0)
(4,5,0)
(17,19,0)
(4,11,0)
(10,13,0)
(12,5,0)
(2,15,0)
(0,4,0)
(0,15,1)
(5,8,1)
(12,7,1)
(13,8,1)
(24,7,1)
(13,10,1)
(0,14,1)
(4,0,1)
(7,19,1)
(5,4,1)
(10,25,1)
(1,19,1)
(4,11,1)
(22,13,1)
(15,2,1)
(19,15,1)
(10,5,1)
(19,3,1)
(13,5,1)
(17,15,1)
(20,17,1)
(25,24,1)
(14,12,1)
(7,1,1)
(3,20,1)
(2,16,1)
(25,7,2)
(7,19,2)
(13,5,2)
(5,4,2)
(14,7,2)
(0,15,2)
(24,7,2)
(22,13,2)
(12,7,2)
(4,7,2)
(5,7,2)
(0,7,2)
(4,0,2)
(19,15,2)
(13,8,2)
(4,11,2)
(5,8,2)
-----------------------------------
(0,atoi(inputBuffer)
(1,NULL)
(2,"")
(3,stdin)
(4,(short)
(5,data = (short)
(6,)
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,short data)
(9,)
(10,data)
(11,short)
(12,data)
(13,return data;)
(14,inputBuffer)
(15,inputBuffer[CHAR_ARRAY_SIZE] = "")
(16,inputBuffer)
(17,inputBuffer)
(18,)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,CHAR_ARRAY_SIZE)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,RET)
(23,)
(24,"fgets()
(25,printLine("fgets()
(26,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^