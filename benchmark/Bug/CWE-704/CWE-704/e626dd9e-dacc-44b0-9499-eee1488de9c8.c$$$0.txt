-----label-----
1
-----code-----
static int badSource(int data)
{
    if(badStatic)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
15,16
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
30,32
32,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
53,65
53,66
53,67
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
140,142
141,142
141,143
142,143
142,144
142,145
143,144
145,146
147,148
149,150
151,152
153,154
154,155
154,156
155,156
157,158
157,159
157,160
157,161
158,159
160,161
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
174,175
175,176
175,177
176,177
178,179
178,180
178,181
178,182
178,183
179,180
181,182
183,184
185,186
185,187
186,187
190,191
190,192
191,192
191,193
192,193
192,194
193,194
195,196
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
205,207
206,207
208,209
211,212
212,213
212,214
213,214
215,216
215,217
216,217
218,219
221,222
221,223
222,223
222,224
223,224
225,226
227,228
228,229
229,230
229,231
230,231
232,233
234,235
234,236
235,236
235,237
236,237
238,239
240,241
241,242
242,243
242,244
243,244
245,246
247,248
248,249
-----nextToken-----
2,4,6,8,12,17,19,23,25,29,31,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,104,109,110,113,115,120,122,126,128,131,135,137,139,144,146,148,150,152,156,159,161,163,165,169,171,173,177,180,182,184,187,188,189,194,196,199,200,202,207,209,210,214,217,219,220,224,226,231,233,237,239,244,246,249
-----computeFrom-----
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
106,107
106,108
117,118
117,119
141,142
141,143
154,155
154,156
167,168
167,169
175,176
175,177
185,186
185,187
191,192
191,193
192,193
192,194
197,198
197,199
204,205
204,206
212,213
212,214
222,223
222,224
235,236
235,237
-----guardedBy-----
224,233
237,246
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int data){    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
static int
badSource(int data)
badSource
int data
int
data
data
{    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
badStatic
badStatic
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(146,74,0)
(64,124,0)
(112,109,0)
(114,0,0)
(148,62,0)
(95,7,0)
(122,0,0)
(134,58,0)
(45,34,0)
(138,50,0)
(69,70,0)
(126,89,0)
(3,27,0)
(27,67,0)
(147,28,0)
(152,109,0)
(119,26,0)
(91,12,0)
(92,35,0)
(26,155,0)
(122,35,0)
(149,7,0)
(136,158,0)
(52,50,0)
(113,84,0)
(98,152,0)
(88,145,0)
(11,80,0)
(158,106,0)
(61,34,0)
(103,145,0)
(48,34,0)
(55,14,0)
(25,35,0)
(135,47,0)
(4,120,0)
(23,62,0)
(93,8,0)
(115,13,0)
(128,25,0)
(111,35,0)
(96,63,0)
(118,58,0)
(123,63,0)
(22,44,0)
(34,59,0)
(142,100,0)
(72,34,0)
(100,14,0)
(69,50,0)
(89,34,0)
(144,2,0)
(8,25,0)
(106,35,0)
(127,137,0)
(17,123,0)
(151,35,0)
(0,122,0)
(8,13,0)
(26,67,0)
(158,67,0)
(9,88,0)
(68,158,0)
(156,14,0)
(7,67,0)
(130,29,0)
(6,27,0)
(75,53,0)
(36,93,0)
(67,35,0)
(44,122,0)
(117,34,0)
(7,129,0)
(73,89,0)
(51,107,0)
(12,24,0)
(152,145,0)
(124,14,0)
(79,34,0)
(143,21,0)
(13,21,0)
(66,121,0)
(58,34,0)
(8,83,0)
(40,7,0)
(55,25,0)
(153,70,0)
(145,35,0)
(56,78,0)
(47,131,0)
(97,67,0)
(100,80,0)
(49,141,0)
(101,110,0)
(28,25,0)
(150,123,0)
(76,8,0)
(32,86,0)
(50,69,0)
(42,38,0)
(104,34,0)
(19,62,0)
(87,83,0)
(140,124,0)
(21,13,0)
(7,14,0)
(27,155,0)
(155,27,0)
(152,10,0)
(47,25,0)
(86,35,0)
(99,100,0)
(74,78,0)
(65,55,0)
(70,69,0)
(37,129,0)
(107,25,0)
(62,25,0)
(31,55,0)
(133,35,0)
(28,147,0)
(13,115,0)
(125,120,0)
(121,69,0)
(57,28,0)
(47,58,0)
(74,81,0)
(38,25,0)
(63,123,0)
(129,7,0)
(69,121,0)
(90,55,0)
(38,58,0)
(145,88,0)
(54,106,0)
(1,147,0)
(67,7,0)
(85,129,0)
(105,152,0)
(15,34,0)
(132,28,0)
(14,55,0)
(43,34,0)
(46,77,0)
(12,14,0)
(82,111,0)
(80,34,0)
(116,34,0)
(145,10,0)
(71,141,0)
(60,26,0)
(39,35,0)
(63,86,0)
(139,35,0)
(81,74,0)
(74,35,0)
(141,111,0)
(8,93,0)
(33,38,0)
(78,74,0)
(41,44,0)
(30,107,0)
(20,34,0)
(108,35,0)
(155,26,0)
(120,35,0)
(16,81,0)
(25,62,0)
(12,80,0)
(5,80,0)
(83,8,0)
(14,35,0)
(13,8,0)
(140,14,1)
(78,56,1)
(27,67,1)
(42,75,1)
(12,80,1)
(50,138,1)
(105,18,1)
(102,145,1)
(46,107,1)
(129,85,1)
(124,64,1)
(99,47,1)
(145,88,1)
(125,70,1)
(122,0,1)
(58,118,1)
(146,78,1)
(153,69,1)
(6,3,1)
(155,27,1)
(47,25,1)
(42,113,1)
(126,73,1)
(107,25,1)
(134,89,1)
(90,65,1)
(144,147,1)
(49,74,1)
(11,5,1)
(74,81,1)
(82,141,1)
(120,4,1)
(147,1,1)
(36,8,1)
(89,126,1)
(40,129,1)
(105,154,1)
(33,42,1)
(18,12,1)
(38,25,1)
(13,21,1)
(156,147,1)
(73,154,1)
(96,123,1)
(60,119,1)
(100,14,1)
(18,100,1)
(81,16,1)
(13,115,1)
(121,66,1)
(41,22,1)
(26,67,1)
(118,134,1)
(5,58,1)
(52,80,1)
(51,25,1)
(63,123,1)
(52,102,1)
(0,114,1)
(65,31,1)
(38,33,1)
(105,101,1)
(74,78,1)
(75,155,1)
(38,58,1)
(100,80,1)
(107,30,1)
(9,103,1)
(25,62,1)
(100,142,1)
(12,91,1)
(47,58,1)
(99,38,1)
(42,127,1)
(19,23,1)
(12,14,1)
(130,93,1)
(98,152,1)
(26,60,1)
(158,68,1)
(37,95,1)
(68,136,1)
(69,50,1)
(149,97,1)
(44,41,1)
(106,54,1)
(8,13,1)
(87,13,1)
(86,32,1)
(57,93,1)
(54,158,1)
(143,76,1)
(42,130,1)
(14,55,1)
(16,146,1)
(113,70,1)
(132,57,1)
(152,105,1)
(76,122,1)
(47,135,1)
(124,14,1)
(148,19,1)
(145,10,1)
(150,111,1)
(70,69,1)
(101,18,1)
(85,37,1)
(147,28,1)
(28,25,1)
(136,155,1)
(55,90,1)
(103,106,1)
(70,153,1)
(67,7,1)
(1,28,1)
(27,6,1)
(141,71,1)
(97,124,1)
(31,156,1)
(22,86,1)
(56,107,1)
(42,144,1)
(63,96,1)
(127,124,1)
(23,128,1)
(8,25,1)
(95,149,1)
(88,9,1)
(17,150,1)
(7,129,1)
(93,8,1)
(152,145,1)
(64,140,1)
(111,82,1)
(7,40,1)
(21,143,1)
(42,102,1)
(83,87,1)
(152,10,1)
(55,25,1)
(3,26,1)
(7,14,1)
(71,49,1)
(4,125,1)
(91,100,1)
(62,148,1)
(135,38,1)
(42,46,1)
(66,50,1)
(128,120,1)
(155,26,1)
(69,121,1)
(142,99,1)
(138,52,1)
(80,11,1)
(158,67,1)
(123,17,1)
(32,63,1)
(8,83,1)
(30,51,1)
(119,67,1)
(93,36,1)
(114,44,1)
(28,132,1)
(125,70,2)
(152,145,2)
(155,124,2)
(12,100,2)
(82,107,2)
(97,124,2)
(56,107,2)
(96,107,2)
(16,107,2)
(95,124,2)
(71,107,2)
(114,107,2)
(28,93,2)
(6,26,2)
(51,70,2)
(12,14,2)
(7,129,2)
(58,154,2)
(145,155,2)
(25,62,2)
(150,107,2)
(129,124,2)
(118,154,2)
(74,78,2)
(103,155,2)
(50,102,2)
(100,154,2)
(155,26,2)
(147,28,2)
(37,124,2)
(91,100,2)
(73,154,2)
(52,102,2)
(13,115,2)
(44,107,2)
(122,107,2)
(52,154,2)
(126,154,2)
(149,124,2)
(87,107,2)
(152,10,2)
(122,0,2)
(27,26,2)
(113,70,2)
(57,93,2)
(120,70,2)
(70,154,2)
(74,107,2)
(98,152,2)
(8,25,2)
(141,107,2)
(38,58,2)
(13,21,2)
(67,7,2)
(130,93,2)
(147,93,2)
(70,102,2)
(128,70,2)
(4,70,2)
(49,107,2)
(17,107,2)
(42,154,2)
(33,154,2)
(60,124,2)
(63,123,2)
(47,38,2)
(145,88,2)
(7,124,2)
(18,154,2)
(14,55,2)
(66,102,2)
(50,154,2)
(134,154,2)
(80,154,2)
(124,147,2)
(38,154,2)
(40,124,2)
(25,70,2)
(31,147,2)
(21,107,2)
(158,67,2)
(66,154,2)
(121,102,2)
(142,154,2)
(67,124,2)
(86,107,2)
(8,107,2)
(93,8,2)
(8,13,2)
(47,58,2)
(74,81,2)
(140,147,2)
(3,26,2)
(138,102,2)
(121,154,2)
(132,93,2)
(55,25,2)
(143,107,2)
(5,154,2)
(0,107,2)
(76,107,2)
(69,102,2)
(46,107,2)
(156,147,2)
(23,70,2)
(100,14,2)
(62,70,2)
(69,154,2)
(138,154,2)
(81,107,2)
(155,27,2)
(26,67,2)
(99,154,2)
(75,155,2)
(7,14,2)
(41,107,2)
(78,107,2)
(124,14,2)
(158,155,2)
(136,155,2)
(55,147,2)
(69,50,2)
(19,70,2)
(65,147,2)
(153,154,2)
(107,25,2)
(38,25,2)
(64,147,2)
(30,70,2)
(135,38,2)
(145,10,2)
(153,102,2)
(102,155,2)
(88,155,2)
(111,107,2)
(27,67,2)
(90,147,2)
(148,70,2)
(70,69,2)
(100,80,2)
(28,25,2)
(36,107,2)
(106,155,2)
(68,155,2)
(69,121,2)
(8,83,2)
(13,107,2)
(119,124,2)
(26,124,2)
(93,107,2)
(101,18,2)
(63,107,2)
(9,155,2)
(12,80,2)
(123,107,2)
(22,107,2)
(107,70,2)
(1,93,2)
(85,124,2)
(144,147,2)
(14,147,2)
(47,25,2)
(83,107,2)
(127,124,2)
(54,155,2)
(89,154,2)
(11,154,2)
(32,107,2)
(146,107,2)
-----------------------------------
(0,htons(TCP_PORT)
(1,SOCKET_ERROR)
(2,)
(3,recvResult)
(4,1)
(5,acceptSocket)
(6,0)
(7,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(8,bind(listenSocket, (struct sockaddr*)
(9,inputBuffer)
(10,int data)
(11,INVALID_SOCKET)
(12,CLOSE_SOCKET(acceptSocket)
(13,(struct sockaddr*)
(14,acceptSocket = accept(listenSocket, NULL, NULL)
(15,listenSocket)
(16,service)
(17,sin_addr)
(18,wsaDataInit)
(19,SOCK_STREAM)
(20,wsaDataInit)
(21,&service)
(22,service)
(23,AF_INET)
(24,)
(25,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(26,recvResult == SOCKET_ERROR)
(27,recvResult == 0)
(28,listen(listenSocket, LISTEN_BACKLOG)
(29,)
(30,INVALID_SOCKET)
(31,listenSocket)
(32,INADDR_ANY)
(33,INVALID_SOCKET)
(34,)
(35,)
(36,SOCKET_ERROR)
(37,CHAR_ARRAY_SIZE)
(38,listenSocket != INVALID_SOCKET)
(39,if (bind(listenSocket, (struct sockaddr*)
(40,0)
(41,sin_port)
(42,listenSocket)
(43,if (acceptSocket != INVALID_SOCKET)
(44,service.sin_port)
(45,recvResult)
(46,break;)
(47,CLOSE_SOCKET(listenSocket)
(48,wsaData)
(49,service)
(50,MAKEWORD(2,2)
(51,listenSocket)
(52,2)
(53,)
(54,\'\\\\0\')
(55,accept(listenSocket, NULL, NULL)
(56,service)
(57,listenSocket)
(58,listenSocket = INVALID_SOCKET)
(59,)
(60,SOCKET_ERROR)
(61,inputBuffer)
(62,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(63,service.sin_addr.s_addr)
(64,SOCKET_ERROR)
(65,NULL)
(66,wsaData)
(67,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(68,recvResult)
(69,WSAStartup(MAKEWORD(2,2)
(70,WSAStartup(MAKEWORD(2,2)
(71,sin_family)
(72,if (listenSocket != INVALID_SOCKET)
(73,wsaDataInit)
(74,memset(&service, 0, sizeof(service)
(75,break;)
(76,listenSocket)
(77,)
(78,&service)
(79,do)
(80,acceptSocket = INVALID_SOCKET)
(81,sizeof(service)
(82,AF_INET)
(83,sizeof(service)
(84,)
(85,1)
(86,service.sin_addr.s_addr = INADDR_ANY)
(87,service)
(88,atoi(inputBuffer)
(89,wsaDataInit = 0)
(90,NULL)
(91,acceptSocket)
(92,if (acceptSocket == SOCKET_ERROR)
(93,bind(listenSocket, (struct sockaddr*)
(94,'\\\\0')
(95,inputBuffer)
(96,s_addr)
(97,recvResult)
(98,RET)
(99,acceptSocket)
(100,acceptSocket != INVALID_SOCKET)
(101,WSACleanup()
(102,0)
(103,data)
(104,service)
(105,data)
(106,inputBuffer[recvResult] = \'\\\\0\')
(107,listenSocket == INVALID_SOCKET)
(108,if (listen(listenSocket, LISTEN_BACKLOG)
(109,)
(110,)
(111,service.sin_family = AF_INET)
(112,if(badStatic)
(113,break;)
(114,TCP_PORT)
(115,struct sockaddr*)
(116,if (wsaDataInit)
(117,acceptSocket)
(118,INVALID_SOCKET)
(119,recvResult)
(120,wsaDataInit = 1)
(121,&wsaData)
(122,service.sin_port = htons(TCP_PORT)
(123,service.sin_addr)
(124,acceptSocket == SOCKET_ERROR)
(125,wsaDataInit)
(126,0)
(127,break;)
(128,listenSocket)
(129,CHAR_ARRAY_SIZE - 1)
(130,break;)
(131,)
(132,LISTEN_BACKLOG)
(133,if (WSAStartup(MAKEWORD(2,2)
(134,listenSocket)
(135,listenSocket)
(136,inputBuffer)
(137,)
(138,2)
(139,if (listenSocket == INVALID_SOCKET)
(140,acceptSocket)
(141,service.sin_family)
(142,INVALID_SOCKET)
(143,service)
(144,break;)
(145,data = atoi(inputBuffer)
(146,0)
(147,listen(listenSocket, LISTEN_BACKLOG)
(148,IPPROTO_TCP)
(149,acceptSocket)
(150,service)
(151,if (recvResult == SOCKET_ERROR || recvResult == 0)
(152,return data;)
(153,NO_ERROR)
(154,badStatic)
(155,recvResult == SOCKET_ERROR || recvResult == 0)
(156,acceptSocket)
(157,inputBuffer[recvResult] = '\\\\0')
(158,inputBuffer[recvResult])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^