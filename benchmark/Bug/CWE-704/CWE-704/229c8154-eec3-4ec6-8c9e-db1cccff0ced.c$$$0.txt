-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
52,53
52,54
52,55
52,56
52,57
52,58
53,54
54,55
54,56
56,57
56,58
56,59
59,60
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
91,92
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
100,101
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,51,55,57,58,62,64,67,69,73,75,80,82,86,88,89,92,93,98,101,102,103,107,109,113,115
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
48,49
48,50
71,72
71,73
90,91
90,92
95,96
95,97
99,100
99,101
-----guardedBy-----
50,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_34_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType
CWE194_Unexpected_Sign_Extension__negative_malloc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,17,0)
(43,17,0)
(46,57,0)
(56,17,0)
(22,54,0)
(12,51,0)
(59,17,0)
(56,7,0)
(57,7,0)
(28,56,0)
(23,8,0)
(14,54,0)
(41,53,0)
(5,49,0)
(57,9,0)
(0,15,0)
(63,54,0)
(21,47,0)
(50,9,0)
(43,53,0)
(60,14,0)
(4,54,0)
(29,1,0)
(37,7,0)
(55,32,0)
(18,28,0)
(4,63,0)
(28,32,0)
(42,14,0)
(20,63,0)
(45,53,0)
(15,17,0)
(8,56,0)
(1,29,0)
(16,39,0)
(2,11,0)
(6,44,0)
(53,43,0)
(28,11,0)
(39,4,0)
(9,47,0)
(32,9,0)
(7,37,0)
(52,4,0)
(19,44,0)
(7,56,0)
(36,8,0)
(33,43,0)
(27,17,0)
(48,56,0)
(3,32,0)
(34,49,0)
(49,54,0)
(43,56,0)
(51,56,0)
(63,20,0)
(61,47,0)
(10,20,0)
(53,9,0)
(13,1,0)
(31,54,0)
(44,9,0)
(15,56,0)
(32,28,0)
(35,43,0)
(7,57,0)
(30,39,0)
(29,38,0)
(25,63,0)
(11,17,0)
(47,9,0)
(9,14,0)
(45,33,1)
(51,12,1)
(12,11,1)
(9,47,1)
(8,36,1)
(35,8,1)
(35,29,1)
(61,50,1)
(13,8,1)
(15,56,1)
(7,37,1)
(11,2,1)
(10,25,1)
(53,9,1)
(52,39,1)
(43,53,1)
(19,6,1)
(50,4,1)
(58,44,1)
(4,63,1)
(39,30,1)
(28,56,1)
(7,57,1)
(25,49,1)
(57,9,1)
(6,9,1)
(4,52,1)
(33,35,1)
(46,48,1)
(0,51,1)
(30,16,1)
(53,41,1)
(32,3,1)
(2,28,1)
(58,15,1)
(20,10,1)
(1,13,1)
(57,46,1)
(49,34,1)
(36,23,1)
(47,21,1)
(16,63,1)
(55,18,1)
(56,7,1)
(51,56,1)
(43,56,1)
(32,9,1)
(41,45,1)
(23,56,1)
(18,43,1)
(21,61,1)
(15,0,1)
(8,56,1)
(63,20,1)
(44,19,1)
(29,1,1)
(48,44,1)
(44,9,1)
(28,32,1)
(3,55,1)
(34,5,1)
(63,20,2)
(11,44,2)
(29,1,2)
(1,8,2)
(29,8,2)
(12,44,2)
(0,44,2)
(56,44,2)
(57,44,2)
(15,56,2)
(51,44,2)
(56,7,2)
(4,63,2)
(41,44,2)
(35,44,2)
(8,56,2)
(43,56,2)
(51,56,2)
(2,44,2)
(13,8,2)
(28,56,2)
(32,44,2)
(28,32,2)
(46,44,2)
(15,44,2)
(8,44,2)
(7,57,2)
(45,44,2)
(28,44,2)
(36,44,2)
(7,37,2)
(55,44,2)
(53,9,2)
(7,44,2)
(23,44,2)
(48,44,2)
(43,44,2)
(18,44,2)
(33,44,2)
(9,47,2)
(3,44,2)
(57,9,2)
(44,9,2)
(53,44,2)
(32,9,2)
(43,53,2)
-----------------------------------
(0,dataBuffer)
(1,-1)
(2,'\\\\0')
(3,1)
(4,myUnion.unionFirst = data)
(5,data)
(6,data)
(7,(char *)
(8,dataBuffer == NULL)
(9,data = myUnion.unionSecond)
(10,1)
(11,dataBuffer[data-1] = \'\\\\0\')
(12,dataBuffer)
(13,1)
(14,)
(15,free(dataBuffer)
(16,myUnion)
(17,)
(18,dataBuffer)
(19,100)
(20,-1)
(21,unionSecond)
(22,data)
(23,dataBuffer)
(24,\'\\\\0\')
(25,data)
(26,dataBuffer[data-1] = '\\\\0')
(27,if (dataBuffer == NULL)
(28,dataBuffer[data-1])
(29,exit(-1)
(30,unionFirst)
(31,myUnion)
(32,data-1)
(33,\'A\')
(34,0)
(35,dataBuffer)
(36,NULL)
(37,char *)
(38,)
(39,myUnion.unionFirst)
(40,'A')
(41,1)
(42,if (data < 100)
(43,memset(dataBuffer, \'A\', data-1)
(44,data < 100)
(45,data)
(46,data)
(47,myUnion.unionSecond)
(48,dataBuffer)
(49,data = 0)
(50,data)
(51,printLine(dataBuffer)
(52,data)
(53,data-1)
(54,)
(55,data)
(56,* dataBuffer = (char *)
(57,malloc(data)
(58,RET)
(59,dataBuffer)
(60,data)
(61,myUnion)
(62,memset(dataBuffer, 'A', data-1)
(63,data = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^