-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_11_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(26,11,0)
(36,30,0)
(52,17,0)
(0,52,0)
(42,50,0)
(30,29,0)
(28,52,0)
(6,42,0)
(7,5,0)
(27,28,0)
(48,39,0)
(2,46,0)
(21,49,0)
(52,13,0)
(9,28,0)
(16,11,0)
(46,33,0)
(29,7,0)
(31,49,0)
(10,28,0)
(28,33,0)
(36,52,0)
(24,31,0)
(14,7,0)
(35,36,0)
(28,27,0)
(19,30,0)
(46,52,0)
(27,31,0)
(38,51,0)
(50,1,0)
(29,49,0)
(17,52,0)
(23,29,0)
(11,29,0)
(8,21,0)
(51,49,0)
(30,49,0)
(32,39,0)
(40,27,0)
(21,29,0)
(43,14,0)
(14,33,0)
(4,49,0)
(3,36,0)
(25,30,0)
(7,14,0)
(51,29,0)
(36,33,0)
(50,42,0)
(14,52,0)
(33,39,0)
(5,7,0)
(30,36,0)
(18,39,0)
(12,33,0)
(20,33,0)
(47,49,0)
(7,29,0)
(27,29,0)
(15,17,0)
(44,46,0)
(36,52,1)
(35,19,1)
(11,29,1)
(25,50,1)
(25,11,1)
(52,17,1)
(14,33,1)
(7,5,1)
(50,42,1)
(36,33,1)
(28,9,1)
(21,29,1)
(53,51,1)
(31,24,1)
(30,29,1)
(0,41,1)
(28,33,1)
(51,29,1)
(2,52,1)
(46,33,1)
(36,3,1)
(29,7,1)
(26,16,1)
(7,14,1)
(24,27,1)
(11,26,1)
(46,52,1)
(15,0,1)
(38,21,1)
(21,8,1)
(27,28,1)
(33,20,1)
(3,35,1)
(30,36,1)
(44,2,1)
(6,11,1)
(42,6,1)
(9,10,1)
(19,25,1)
(16,29,1)
(14,43,1)
(23,46,1)
(8,31,1)
(28,52,1)
(20,12,1)
(14,52,1)
(41,33,1)
(51,38,1)
(10,40,1)
(43,23,1)
(17,15,1)
(53,46,1)
(46,44,1)
(27,29,1)
(2,41,1)
(40,30,1)
(3,46,2)
(14,52,2)
(29,46,2)
(51,46,2)
(30,46,2)
(42,11,2)
(16,46,2)
(43,46,2)
(27,29,2)
(28,46,2)
(21,46,2)
(17,41,2)
(46,33,2)
(30,36,2)
(46,52,2)
(52,41,2)
(10,46,2)
(51,29,2)
(7,5,2)
(21,29,2)
(38,46,2)
(15,41,2)
(27,46,2)
(19,46,2)
(7,46,2)
(50,11,2)
(31,46,2)
(24,46,2)
(30,29,2)
(11,46,2)
(26,46,2)
(23,46,2)
(25,46,2)
(35,46,2)
(11,29,2)
(36,52,2)
(6,11,2)
(9,46,2)
(14,33,2)
(28,52,2)
(27,28,2)
(28,33,2)
(14,46,2)
(50,42,2)
(36,46,2)
(29,7,2)
(52,17,2)
(36,33,2)
(7,14,2)
(40,46,2)
(8,46,2)
(0,41,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,1)
(4,dataBuffer)
(5,char *)
(6,1)
(7,(char *)
(8,dataBuffer)
(9,1)
(10,data)
(11,dataBuffer == NULL)
(12,data)
(13,)
(14,malloc(data)
(15,1)
(16,dataBuffer)
(17,-1)
(18,if (data < 100)
(19,\'A\')
(20,0)
(21,printLine(dataBuffer)
(22,'A')
(23,dataBuffer)
(24,\'\\\\0\')
(25,dataBuffer)
(26,NULL)
(27,dataBuffer[data-1])
(28,data-1)
(29,* dataBuffer = (char *)
(30,memset(dataBuffer, \'A\', data-1)
(31,dataBuffer[data-1] = \'\\\\0\')
(32,data)
(33,data = 0)
(34,'\\\\0')
(35,data)
(36,data-1)
(37,memset(dataBuffer, 'A', data-1)
(38,dataBuffer)
(39,)
(40,dataBuffer)
(41,globalReturnsTrue()
(42,-1)
(43,data)
(44,100)
(45,dataBuffer[data-1] = '\\\\0')
(46,data < 100)
(47,if (dataBuffer == NULL)
(48,if(globalReturnsTrue()
(49,)
(50,exit(-1)
(51,free(dataBuffer)
(52,data = -1)
(53,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^