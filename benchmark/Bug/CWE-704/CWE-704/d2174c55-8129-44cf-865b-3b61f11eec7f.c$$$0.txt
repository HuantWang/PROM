-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad()
{
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
62,63
-----nextToken-----
2,4,7,12,14,17,20,22,24,29,31,33,35,37,42,45,47,52,53,57,60,61,63,64
-----computeFrom-----
26,27
26,28
40,41
40,42
-----guardedBy-----
31,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad(){    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }        break;    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_16_bad
{    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }        break;    }}
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
break;
-----joern-----
(29,21,0)
(8,22,0)
(25,14,0)
(27,6,0)
(0,23,0)
(4,6,0)
(13,19,0)
(18,25,0)
(27,21,0)
(12,14,0)
(22,5,0)
(6,26,0)
(1,25,0)
(30,27,0)
(17,25,0)
(10,5,0)
(16,25,0)
(21,25,0)
(28,13,0)
(6,15,0)
(20,21,0)
(15,6,0)
(7,5,0)
(5,22,0)
(17,27,0)
(2,15,0)
(9,5,0)
(11,27,0)
(27,11,0)
(27,17,0)
(28,22,1)
(20,29,1)
(29,24,1)
(9,10,1)
(17,27,1)
(12,17,1)
(15,2,1)
(7,9,1)
(27,11,1)
(8,5,1)
(30,13,1)
(3,12,1)
(10,21,1)
(27,6,1)
(6,15,1)
(5,7,1)
(27,21,1)
(13,28,1)
(27,30,1)
(22,8,1)
(30,6,1)
(21,20,1)
(2,4,1)
(3,24,1)
(22,5,1)
(4,22,1)
(28,22,2)
(12,24,2)
(29,24,2)
(27,21,2)
(9,24,2)
(20,24,2)
(5,24,2)
(8,24,2)
(22,5,2)
(30,24,2)
(27,11,2)
(22,24,2)
(17,27,2)
(6,22,2)
(17,24,2)
(2,22,2)
(27,24,2)
(13,22,2)
(7,24,2)
(6,15,2)
(4,22,2)
(27,6,2)
(15,22,2)
(10,24,2)
(21,24,2)
-----------------------------------
(0,while(1)
(1,doubleNumber)
(2,inputBuffer)
(3,RET)
(4,doubleNumber)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,doubleNumber = atof(inputBuffer)
(7,stdin)
(8,NULL)
(9,CHAR_ARRAY_SIZE)
(10,inputBuffer)
(11,float)
(12,break;)
(13,printLine("fgets()
(14,)
(15,atof(inputBuffer)
(16,inputBuffer)
(17,printFloatLine((float)
(18,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,)
(20,0)
(21,doubleNumber = 0)
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,)
(24,1)
(25,)
(26,)
(27,(float)
(28,"fgets()
(29,doubleNumber)
(30,doubleNumber)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^