-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
67,70
67,71
67,72
67,73
68,69
69,70
69,71
71,72
71,73
71,74
74,75
75,76
75,77
76,77
76,78
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
105,107
106,107
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
115,116
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,70,72,73,77,79,82,84,88,90,95,97,101,103,104,107,108,113,116,117,118,122,124,128,130
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
63,64
63,65
86,87
86,88
105,106
105,107
110,111
110,112
114,115
114,116
-----guardedBy-----
39,55
65,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(65,36,0)
(40,11,0)
(66,31,0)
(37,21,0)
(22,9,0)
(4,20,0)
(44,49,0)
(37,57,0)
(38,62,0)
(35,11,0)
(16,24,0)
(6,11,0)
(41,28,0)
(7,49,0)
(26,59,0)
(5,11,0)
(14,31,0)
(46,63,0)
(50,40,0)
(58,64,0)
(61,39,0)
(2,23,0)
(54,28,0)
(44,2,0)
(55,59,0)
(10,40,0)
(23,36,0)
(38,51,0)
(56,65,0)
(65,21,0)
(52,35,0)
(2,21,0)
(29,3,0)
(2,44,0)
(39,21,0)
(31,66,0)
(21,36,0)
(44,9,0)
(31,21,0)
(62,38,0)
(37,22,0)
(3,9,0)
(48,36,0)
(20,8,0)
(22,37,0)
(25,39,0)
(27,23,0)
(13,62,0)
(17,44,0)
(22,49,0)
(64,49,0)
(42,3,0)
(1,66,0)
(57,37,0)
(18,36,0)
(12,21,0)
(40,63,0)
(59,53,0)
(9,35,0)
(66,9,0)
(24,21,0)
(49,64,0)
(60,9,0)
(35,9,0)
(34,66,0)
(32,28,0)
(31,36,0)
(9,47,0)
(30,31,0)
(3,49,0)
(19,44,0)
(24,36,0)
(11,59,0)
(63,40,0)
(43,2,0)
(45,22,0)
(66,49,0)
(21,37,0)
(33,40,0)
(49,28,0)
(9,35,1)
(44,9,1)
(38,62,1)
(27,2,1)
(50,10,1)
(65,56,1)
(20,4,1)
(22,49,1)
(25,21,1)
(34,30,1)
(64,58,1)
(40,11,1)
(46,40,1)
(1,34,1)
(62,13,1)
(44,49,1)
(65,21,1)
(2,21,1)
(39,21,1)
(13,39,1)
(37,57,1)
(2,44,1)
(10,11,1)
(14,38,1)
(63,46,1)
(43,31,1)
(58,7,1)
(40,33,1)
(61,25,1)
(24,16,1)
(11,5,1)
(31,66,1)
(19,43,1)
(22,9,1)
(66,49,1)
(12,3,1)
(66,1,1)
(3,42,1)
(49,64,1)
(14,39,1)
(39,61,1)
(24,21,1)
(3,49,1)
(21,37,1)
(4,63,1)
(33,50,1)
(30,14,1)
(29,9,1)
(37,22,1)
(29,15,1)
(23,27,1)
(45,12,1)
(31,21,1)
(29,20,1)
(16,23,1)
(0,65,1)
(42,29,1)
(15,49,1)
(3,9,1)
(66,9,1)
(17,19,1)
(63,40,1)
(60,63,1)
(35,11,1)
(52,60,1)
(0,3,1)
(35,52,1)
(6,15,1)
(5,6,1)
(44,17,1)
(56,24,1)
(22,45,1)
(2,44,2)
(43,3,2)
(63,15,2)
(12,3,2)
(37,3,2)
(34,3,2)
(46,15,2)
(66,9,2)
(21,3,2)
(44,49,2)
(21,37,2)
(13,39,2)
(37,57,2)
(61,3,2)
(30,3,2)
(37,22,2)
(50,15,2)
(17,3,2)
(22,3,2)
(38,39,2)
(66,49,2)
(31,3,2)
(23,3,2)
(31,66,2)
(2,21,2)
(38,62,2)
(5,15,2)
(20,63,2)
(49,64,2)
(60,63,2)
(27,3,2)
(25,3,2)
(6,15,2)
(63,40,2)
(10,15,2)
(31,21,2)
(14,3,2)
(35,63,2)
(44,9,2)
(22,49,2)
(4,63,2)
(35,11,2)
(65,21,2)
(3,9,2)
(39,21,2)
(62,39,2)
(45,3,2)
(33,15,2)
(9,35,2)
(19,3,2)
(9,63,2)
(11,15,2)
(3,49,2)
(16,3,2)
(40,15,2)
(66,3,2)
(24,21,2)
(44,3,2)
(1,3,2)
(24,3,2)
(22,9,2)
(65,3,2)
(2,3,2)
(52,63,2)
(40,11,2)
(56,3,2)
(39,3,2)
-----------------------------------
(0,RET)
(1,1)
(2,dataBuffer[data-1])
(3,data < 100)
(4,"fgets()
(5,"")
(6,inputBuffer)
(7,data)
(8,)
(9,data = atoi(inputBuffer)
(10,inputBuffer)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,dataBuffer)
(13,1)
(14,dataBuffer)
(15,staticReturnsTrue()
(16,dataBuffer)
(17,1)
(18,dataBuffer)
(19,data)
(20,printLine("fgets()
(21,* dataBuffer = (char *)
(22,malloc(data)
(23,dataBuffer[data-1] = \\\'\\\\0\\\')
(24,printLine(dataBuffer)
(25,dataBuffer)
(26,inputBuffer)
(27,\\\'\\\\0\\\')
(28,)
(29,data)
(30,\\\'A\\\')
(31,memset(dataBuffer, \\\'A\\\', data-1)
(32,if (data < 100)
(33,stdin)
(34,data)
(35,atoi(inputBuffer)
(36,)
(37,(char *)
(38,exit(-1)
(39,dataBuffer == NULL)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,data)
(42,100)
(43,dataBuffer)
(44,data-1)
(45,data)
(46,NULL)
(47,)
(48,if (dataBuffer == NULL)
(49,data = -1)
(50,CHAR_ARRAY_SIZE)
(51,)
(52,inputBuffer)
(53,)
(54,if(staticReturnsTrue()
(55,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,dataBuffer)
(57,char *)
(58,1)
(59,)
(60,data)
(61,NULL)
(62,-1)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(64,-1)
(65,free(dataBuffer)
(66,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^