-----label-----
1
-----code-----
void CWE843_Type_Confusion__short_34_bad()
{
    void * data;
    CWE843_Type_Confusion__short_34_unionType myUnion;
    /* Initialize data */
    data = NULL;
    {
        /* FLAW: Point data to a short */
        short shortBuffer = 8;
        data = &shortBuffer;
    }
    myUnion.unionFirst = data;
    {
        void * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Attempt to access data as an int */
        printIntLine(*((int*)data));
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
25,26
26,27
26,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
37,38
39,40
40,41
40,42
41,42
41,43
42,43
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
64,65
65,66
65,67
66,67
66,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,31,35,38,43,44,46,50,52,53,57,58,62,67,69,71
-----computeFrom-----
19,20
19,21
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE843_Type_Confusion__short_34_bad(){    void * data;    CWE843_Type_Confusion__short_34_unionType myUnion;    /* Initialize data */    data = NULL;    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    myUnion.unionFirst = data;    {        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }}
void
CWE843_Type_Confusion__short_34_bad()
CWE843_Type_Confusion__short_34_bad
{    void * data;    CWE843_Type_Confusion__short_34_unionType myUnion;    /* Initialize data */    data = NULL;    {        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }    myUnion.unionFirst = data;    {        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }}
void * data;
void * data;
void
* data
*
data
CWE843_Type_Confusion__short_34_unionType myUnion;
CWE843_Type_Confusion__short_34_unionType myUnion;
CWE843_Type_Confusion__short_34_unionType
CWE843_Type_Confusion__short_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        /* FLAW: Point data to a short */        short shortBuffer = 8;        data = &shortBuffer;    }
short shortBuffer = 8;
short shortBuffer = 8;
short
shortBuffer = 8
shortBuffer
= 8
8
data = &shortBuffer;
data = &shortBuffer
data
data
&shortBuffer
shortBuffer
shortBuffer
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }
void * data = myUnion.unionSecond;
void * data = myUnion.unionSecond;
void
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
printIntLine(*((int*)data));
printIntLine(*((int*)data))
printIntLine
printIntLine
*((int*)data)
((int*)data)
(int*)data
int*
int
*
*
data
data
-----joern-----
(0,13,0)
(4,13,0)
(26,25,0)
(25,26,0)
(5,8,0)
(8,15,0)
(7,29,0)
(12,11,0)
(8,29,0)
(26,30,0)
(30,27,0)
(28,11,0)
(21,15,0)
(17,4,0)
(1,13,0)
(27,30,0)
(19,26,0)
(11,28,0)
(30,26,0)
(9,14,0)
(14,0,0)
(16,29,0)
(11,3,0)
(22,14,0)
(32,0,0)
(26,11,0)
(15,8,0)
(23,10,0)
(24,28,0)
(3,13,0)
(6,10,0)
(0,15,0)
(27,3,0)
(10,13,0)
(20,28,0)
(15,4,0)
(29,4,0)
(31,3,0)
(2,13,0)
(19,11,1)
(21,29,1)
(26,19,1)
(8,29,1)
(30,26,1)
(32,14,1)
(18,27,1)
(29,16,1)
(26,11,1)
(10,23,1)
(5,21,1)
(14,22,1)
(16,7,1)
(22,9,1)
(0,15,1)
(0,32,1)
(12,0,1)
(24,12,1)
(15,8,1)
(27,30,1)
(20,24,1)
(26,25,1)
(28,20,1)
(8,5,1)
(11,28,1)
(9,15,1)
(7,10,1)
(23,6,1)
(30,26,2)
(11,28,2)
(8,29,2)
(0,15,2)
(26,25,2)
(15,8,2)
(26,11,2)
(27,30,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,myUnion)
(2,data)
(3,)
(4,)
(5,shortBuffer)
(6,data)
(7,shortBuffer)
(8,&shortBuffer)
(9,myUnion)
(10,data = NULL)
(11,* data = myUnion.unionSecond)
(12,data)
(13,)
(14,myUnion.unionFirst)
(15,data = &shortBuffer)
(16,8)
(17,shortBuffer)
(18,RET)
(19,data)
(20,unionSecond)
(21,data)
(22,unionFirst)
(23,NULL)
(24,myUnion)
(25,int*)
(26,(int*)
(27,printIntLine(*((int*)
(28,myUnion.unionSecond)
(29,shortBuffer = 8)
(30,*((int*)
(31,data)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^