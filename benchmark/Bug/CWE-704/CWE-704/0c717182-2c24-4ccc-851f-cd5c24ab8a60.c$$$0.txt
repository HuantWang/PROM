-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
37,57
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_18_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,23,0)
(7,59,0)
(19,33,0)
(3,14,0)
(65,66,0)
(50,10,0)
(41,2,0)
(51,42,0)
(24,61,0)
(33,37,0)
(43,38,0)
(16,22,0)
(25,31,0)
(46,32,0)
(18,20,0)
(60,37,0)
(33,1,0)
(61,28,0)
(30,20,0)
(26,11,0)
(29,59,0)
(11,26,0)
(54,20,0)
(64,42,0)
(41,1,0)
(63,20,0)
(23,20,0)
(10,23,0)
(12,59,0)
(14,66,0)
(58,34,0)
(58,53,0)
(40,31,0)
(38,37,0)
(61,24,0)
(32,52,0)
(42,33,0)
(32,26,0)
(56,37,0)
(15,1,0)
(42,23,0)
(55,23,0)
(66,63,0)
(10,32,0)
(31,1,0)
(49,20,0)
(41,38,0)
(2,41,0)
(45,15,0)
(1,37,0)
(53,58,0)
(0,13,0)
(1,61,0)
(26,14,0)
(59,66,0)
(57,59,0)
(8,1,0)
(61,1,0)
(33,42,0)
(13,1,0)
(28,61,0)
(35,41,0)
(2,23,0)
(28,32,0)
(5,28,0)
(47,7,0)
(59,7,0)
(36,23,0)
(2,32,0)
(9,66,0)
(6,63,0)
(14,26,0)
(26,32,0)
(42,32,0)
(21,53,0)
(4,2,0)
(48,2,0)
(62,10,0)
(39,33,0)
(22,44,0)
(15,37,0)
(13,37,0)
(27,63,0)
(32,26,1)
(22,16,1)
(42,64,1)
(0,15,1)
(31,25,1)
(51,19,1)
(66,9,1)
(29,57,1)
(7,59,1)
(62,22,1)
(2,23,1)
(41,2,1)
(23,36,1)
(7,47,1)
(35,33,1)
(61,24,1)
(53,21,1)
(17,13,1)
(10,50,1)
(1,61,1)
(2,48,1)
(14,66,1)
(64,51,1)
(17,10,1)
(5,8,1)
(9,65,1)
(19,39,1)
(3,46,1)
(61,28,1)
(2,32,1)
(16,7,1)
(26,11,1)
(36,55,1)
(42,32,1)
(58,53,1)
(65,49,1)
(33,1,1)
(8,10,1)
(25,40,1)
(15,45,1)
(15,1,1)
(4,35,1)
(59,66,1)
(42,23,1)
(10,23,1)
(33,42,1)
(46,7,1)
(31,1,1)
(40,1,1)
(50,62,1)
(43,41,1)
(38,43,1)
(62,32,1)
(57,66,1)
(28,5,1)
(48,4,1)
(12,29,1)
(28,32,1)
(10,32,1)
(59,12,1)
(14,3,1)
(39,58,1)
(49,23,1)
(41,1,1)
(21,31,1)
(39,31,1)
(28,23,1)
(13,0,1)
(45,38,1)
(13,1,1)
(47,59,1)
(26,14,1)
(46,7,2)
(35,10,2)
(2,23,2)
(48,10,2)
(15,10,2)
(61,10,2)
(61,24,2)
(58,53,2)
(39,10,2)
(22,7,2)
(0,10,2)
(42,23,2)
(41,2,2)
(43,10,2)
(61,28,2)
(10,23,2)
(26,14,2)
(32,26,2)
(26,11,2)
(3,7,2)
(14,7,2)
(5,10,2)
(53,31,2)
(42,32,2)
(15,1,2)
(40,10,2)
(28,32,2)
(31,10,2)
(58,31,2)
(32,7,2)
(13,1,2)
(1,61,2)
(2,10,2)
(10,32,2)
(7,59,2)
(2,32,2)
(28,23,2)
(1,10,2)
(33,10,2)
(64,10,2)
(38,10,2)
(59,66,2)
(33,1,2)
(14,66,2)
(4,10,2)
(28,10,2)
(33,42,2)
(51,10,2)
(42,10,2)
(13,10,2)
(21,31,2)
(8,10,2)
(41,10,2)
(26,7,2)
(19,10,2)
(45,10,2)
(41,1,2)
(16,7,2)
(25,10,2)
(31,1,2)
-----------------------------------
(0,dataBuffer)
(1,* dataBuffer = (char *)
(2,data-1)
(3,inputBuffer)
(4,data)
(5,data)
(6,inputBuffer)
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,dataBuffer)
(9,"")
(10,data < 100)
(11,short)
(12,stdin)
(13,free(dataBuffer)
(14,atoi(inputBuffer)
(15,printLine(dataBuffer)
(16,"fgets()
(17,RET)
(18,source:)
(19,\\\'A\\\')
(20,)
(21,1)
(22,printLine("fgets()
(23,data = 0)
(24,char *)
(25,NULL)
(26,(short)
(27,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,malloc(data)
(29,CHAR_ARRAY_SIZE)
(30,data)
(31,dataBuffer == NULL)
(32,data = (short)
(33,memset(dataBuffer, \\\'A\\\', data-1)
(34,)
(35,dataBuffer)
(36,0)
(37,)
(38,dataBuffer[data-1] = \\\'\\\\0\\\')
(39,dataBuffer)
(40,dataBuffer)
(41,dataBuffer[data-1])
(42,data-1)
(43,\\\'\\\\0\\\')
(44,)
(45,dataBuffer)
(46,data)
(47,NULL)
(48,1)
(49,goto source;)
(50,100)
(51,data)
(52,)
(53,-1)
(54,if (data < 100)
(55,data)
(56,if (dataBuffer == NULL)
(57,inputBuffer)
(58,exit(-1)
(59,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(60,dataBuffer)
(61,(char *)
(62,data)
(63,)
(64,1)
(65,inputBuffer)
(66,inputBuffer[CHAR_ARRAY_SIZE] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^