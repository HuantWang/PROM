-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_11_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,7,0)
(30,18,0)
(52,59,0)
(7,44,0)
(7,23,0)
(27,32,0)
(34,24,0)
(29,20,0)
(47,34,0)
(40,9,0)
(22,53,0)
(39,13,0)
(38,28,0)
(61,19,0)
(40,42,0)
(60,28,0)
(4,40,0)
(16,51,0)
(20,10,0)
(53,43,0)
(2,28,0)
(6,10,0)
(12,53,0)
(0,42,0)
(9,24,0)
(35,9,0)
(49,37,0)
(59,53,0)
(32,19,0)
(14,23,0)
(25,8,0)
(60,53,0)
(33,32,0)
(36,5,0)
(8,23,0)
(59,42,0)
(54,27,0)
(15,40,0)
(40,51,0)
(31,34,0)
(13,20,0)
(5,11,0)
(58,10,0)
(23,8,0)
(40,7,0)
(23,7,0)
(62,43,0)
(8,10,0)
(17,60,0)
(37,51,0)
(3,53,0)
(21,27,0)
(46,37,0)
(19,53,0)
(45,42,0)
(10,5,0)
(64,5,0)
(32,27,0)
(50,20,0)
(63,34,0)
(41,7,0)
(51,43,0)
(56,51,0)
(28,60,0)
(20,13,0)
(42,53,0)
(55,43,0)
(18,1,0)
(65,20,0)
(23,14,0)
(34,42,0)
(34,51,0)
(57,60,0)
(37,7,0)
(26,59,1)
(28,2,1)
(46,19,1)
(59,52,1)
(0,7,1)
(63,31,1)
(35,40,1)
(39,20,1)
(40,51,1)
(2,38,1)
(25,41,1)
(10,6,1)
(23,8,1)
(50,65,1)
(34,47,1)
(34,51,1)
(37,51,1)
(54,33,1)
(33,60,1)
(29,50,1)
(21,54,1)
(9,35,1)
(51,16,1)
(42,45,1)
(0,48,1)
(6,58,1)
(18,30,1)
(41,13,1)
(0,18,1)
(34,42,1)
(60,28,1)
(47,63,1)
(30,13,1)
(4,34,1)
(37,49,1)
(59,42,1)
(49,46,1)
(57,42,1)
(19,61,1)
(40,42,1)
(13,39,1)
(16,56,1)
(34,7,1)
(8,10,1)
(17,57,1)
(23,14,1)
(27,21,1)
(38,17,1)
(52,37,1)
(15,4,1)
(61,32,1)
(20,10,1)
(40,15,1)
(20,29,1)
(52,9,1)
(31,37,1)
(32,27,1)
(13,20,1)
(65,10,1)
(48,51,1)
(58,48,1)
(7,23,1)
(37,7,1)
(8,25,1)
(45,0,1)
(40,7,1)
(39,48,2)
(25,13,2)
(37,7,2)
(63,37,2)
(37,51,2)
(34,51,2)
(9,37,2)
(34,7,2)
(60,28,2)
(34,42,2)
(20,48,2)
(13,20,2)
(65,48,2)
(20,10,2)
(40,51,2)
(4,37,2)
(23,14,2)
(8,10,2)
(29,48,2)
(6,48,2)
(58,48,2)
(40,7,2)
(32,27,2)
(23,8,2)
(59,42,2)
(23,13,2)
(15,37,2)
(18,13,2)
(40,37,2)
(7,23,2)
(31,37,2)
(7,13,2)
(10,48,2)
(13,48,2)
(35,37,2)
(50,48,2)
(47,37,2)
(30,13,2)
(41,13,2)
(8,13,2)
(40,42,2)
(34,37,2)
-----------------------------------
(0,dest)
(1,)
(2,1)
(3,if (data < 100)
(4,dest)
(5,)
(6,"")
(7,data = (short)
(8,atoi(inputBuffer)
(9,dest[data] = \\\'\\\\0\\\')
(10,inputBuffer[CHAR_ARRAY_SIZE] = "")
(11,)
(12,source)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,short)
(15,data)
(16,0)
(17,\\\'A\\\')
(18,printLine("fgets()
(19,source[100-1] = \\\'\\\\0\\\')
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,1)
(22,dest)
(23,(short)
(24,)
(25,inputBuffer)
(26,RET)
(27,100-1)
(28,100-1)
(29,stdin)
(30,"fgets()
(31,dest)
(32,source[100-1])
(33,source)
(34,strncpy(dest, source, data)
(35,\\\'\\\\0\\\')
(36,inputBuffer)
(37,data < 100)
(38,100)
(39,NULL)
(40,dest[data])
(41,data)
(42,dest[100] = "")
(43,)
(44,)
(45,"")
(46,data)
(47,data)
(48,globalReturnsTrue()
(49,100)
(50,CHAR_ARRAY_SIZE)
(51,data = 0)
(52,dest)
(53,)
(54,100)
(55,data)
(56,data)
(57,source)
(58,inputBuffer)
(59,printLine(dest)
(60,memset(source, \\\'A\\\', 100-1)
(61,\\\'\\\\0\\\')
(62,if(globalReturnsTrue()
(63,source)
(64,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(65,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^