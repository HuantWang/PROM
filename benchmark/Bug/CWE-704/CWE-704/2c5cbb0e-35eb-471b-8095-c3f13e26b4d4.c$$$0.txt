-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,19,20,25,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(26,41,0)
(13,31,0)
(45,32,0)
(36,50,0)
(51,41,0)
(24,39,0)
(54,21,0)
(49,55,0)
(10,35,0)
(13,26,0)
(19,44,0)
(34,44,0)
(4,50,0)
(36,20,0)
(43,34,0)
(15,26,0)
(44,50,0)
(30,42,0)
(8,13,0)
(5,11,0)
(12,32,0)
(3,50,0)
(46,41,0)
(21,26,0)
(35,10,0)
(28,11,0)
(9,44,0)
(0,10,0)
(40,41,0)
(42,41,0)
(4,15,0)
(40,26,0)
(20,55,0)
(15,4,0)
(48,15,0)
(31,20,0)
(14,13,0)
(18,36,0)
(4,20,0)
(31,50,0)
(44,20,0)
(50,38,0)
(53,21,0)
(50,3,0)
(29,50,0)
(25,40,0)
(26,15,0)
(15,48,0)
(34,42,0)
(35,17,0)
(39,41,0)
(27,32,0)
(1,31,0)
(34,26,0)
(39,26,0)
(44,34,0)
(31,13,0)
(55,20,0)
(7,31,0)
(20,32,0)
(6,4,0)
(13,41,0)
(2,26,0)
(37,20,0)
(23,36,0)
(7,1,1)
(40,26,1)
(4,6,1)
(19,43,1)
(36,20,1)
(44,9,1)
(42,30,1)
(8,21,1)
(0,21,1)
(28,5,1)
(43,13,1)
(13,26,1)
(9,19,1)
(25,42,1)
(24,40,1)
(39,26,1)
(13,31,1)
(30,34,1)
(23,11,1)
(29,11,1)
(36,18,1)
(1,14,1)
(53,54,1)
(44,50,1)
(34,26,1)
(21,53,1)
(31,7,1)
(47,36,1)
(15,48,1)
(40,25,1)
(47,39,1)
(15,4,1)
(11,28,1)
(36,50,1)
(6,2,1)
(10,0,1)
(31,50,1)
(14,8,1)
(2,36,1)
(54,26,1)
(3,29,1)
(20,55,1)
(4,50,1)
(31,20,1)
(35,10,1)
(34,44,1)
(50,3,1)
(55,49,1)
(44,20,1)
(8,35,1)
(23,50,1)
(4,20,1)
(49,37,1)
(21,26,1)
(39,24,1)
(18,23,1)
(26,15,1)
(5,20,1)
(13,36,2)
(31,36,2)
(24,36,2)
(15,4,2)
(34,36,2)
(30,36,2)
(35,10,2)
(26,15,2)
(4,36,2)
(20,55,2)
(31,20,2)
(34,26,2)
(21,26,2)
(53,36,2)
(0,21,2)
(9,36,2)
(25,36,2)
(3,11,2)
(40,36,2)
(43,36,2)
(6,36,2)
(44,36,2)
(13,31,2)
(29,11,2)
(13,26,2)
(15,48,2)
(39,36,2)
(50,11,2)
(21,36,2)
(34,44,2)
(19,36,2)
(26,36,2)
(39,26,2)
(8,36,2)
(1,36,2)
(4,50,2)
(4,20,2)
(44,50,2)
(50,3,2)
(36,50,2)
(7,36,2)
(10,21,2)
(14,36,2)
(42,36,2)
(44,20,2)
(31,50,2)
(54,36,2)
(40,26,2)
(36,20,2)
(35,21,2)
(15,36,2)
(2,36,2)
-----------------------------------
(0,1)
(1,data)
(2,dataBuffer)
(3,RAND32()
(4,malloc(data)
(5,5)
(6,data)
(7,1)
(8,dataBuffer)
(9,1)
(10,-1)
(11,5==5)
(12,data)
(13,memset(dataBuffer, \'A\', data-1)
(14,\'A\')
(15,(char *)
(16,'A')
(17,)
(18,100)
(19,data)
(20,data = -1)
(21,dataBuffer == NULL)
(22,memset(dataBuffer, 'A', data-1)
(23,data)
(24,dataBuffer)
(25,dataBuffer)
(26,* dataBuffer = (char *)
(27,if(5==5)
(28,5)
(29,data)
(30,\'\\\\0\')
(31,data-1)
(32,)
(33,'\\\\0')
(34,dataBuffer[data-1])
(35,exit(-1)
(36,data < 100)
(37,data)
(38,)
(39,free(dataBuffer)
(40,printLine(dataBuffer)
(41,)
(42,dataBuffer[data-1] = \'\\\\0\')
(43,dataBuffer)
(44,data-1)
(45,if (data < 100)
(46,if (dataBuffer == NULL)
(47,RET)
(48,char *)
(49,1)
(50,data = RAND32()
(51,dataBuffer)
(52,dataBuffer[data-1] = '\\\\0')
(53,NULL)
(54,dataBuffer)
(55,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^