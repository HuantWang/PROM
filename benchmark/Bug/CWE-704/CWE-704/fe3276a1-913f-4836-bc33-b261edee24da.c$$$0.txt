-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
73,75
73,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,67,69,72,74,76,78,82,84,85,87,88,93,95,96,97,101,102,107,109,111,113,118,120,121,125,127
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
48,49
48,50
86,87
86,88
90,91
90,92
94,95
94,96
99,100
99,101
115,116
115,117
-----guardedBy-----
39,55
101,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_03_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(7,52,0)
(18,22,0)
(55,22,0)
(62,49,0)
(52,30,0)
(36,20,0)
(59,58,0)
(25,6,0)
(24,48,0)
(54,50,0)
(44,66,0)
(16,52,0)
(39,66,0)
(48,20,0)
(20,50,0)
(28,42,0)
(23,10,0)
(51,36,0)
(64,29,0)
(41,39,0)
(25,55,0)
(53,13,0)
(43,20,0)
(14,10,0)
(61,36,0)
(48,1,0)
(36,49,0)
(19,4,0)
(15,30,0)
(4,38,0)
(35,1,0)
(49,36,0)
(31,20,0)
(13,38,0)
(39,60,0)
(6,12,0)
(5,49,0)
(6,25,0)
(56,1,0)
(47,20,0)
(10,38,0)
(37,55,0)
(2,6,0)
(52,55,0)
(42,38,0)
(40,4,0)
(45,50,0)
(57,4,0)
(4,1,0)
(46,22,0)
(66,39,0)
(8,58,0)
(38,50,0)
(65,64,0)
(27,26,0)
(11,25,0)
(21,38,0)
(30,52,0)
(33,60,0)
(22,17,0)
(9,27,0)
(4,6,0)
(32,13,0)
(13,1,0)
(13,6,0)
(0,55,0)
(38,42,0)
(13,64,0)
(1,20,0)
(4,29,0)
(10,6,0)
(3,52,0)
(60,20,0)
(63,66,0)
(57,40,1)
(4,1,1)
(65,13,1)
(4,38,1)
(63,41,1)
(16,55,1)
(5,62,1)
(64,65,1)
(53,4,1)
(60,33,1)
(34,48,1)
(9,30,1)
(13,6,1)
(38,42,1)
(6,25,1)
(24,64,1)
(1,35,1)
(52,55,1)
(10,23,1)
(23,14,1)
(19,10,1)
(36,49,1)
(33,39,1)
(27,9,1)
(66,44,1)
(25,11,1)
(8,38,1)
(3,7,1)
(32,53,1)
(58,59,1)
(49,5,1)
(35,56,1)
(40,19,1)
(55,37,1)
(4,57,1)
(48,24,1)
(56,6,1)
(48,1,1)
(56,58,1)
(11,2,1)
(13,38,1)
(14,60,1)
(10,6,1)
(13,1,1)
(61,1,1)
(24,10,1)
(28,21,1)
(44,63,1)
(13,32,1)
(10,38,1)
(25,55,1)
(30,52,1)
(37,0,1)
(4,6,1)
(39,66,1)
(52,3,1)
(59,8,1)
(0,58,1)
(30,15,1)
(42,28,1)
(7,16,1)
(41,36,1)
(15,52,1)
(56,27,1)
(62,51,1)
(2,30,1)
(51,61,1)
(53,10,2)
(30,58,2)
(37,58,2)
(2,30,2)
(4,6,2)
(39,66,2)
(16,58,2)
(11,30,2)
(6,30,2)
(52,55,2)
(10,38,2)
(0,58,2)
(36,49,2)
(65,10,2)
(19,10,2)
(25,55,2)
(4,10,2)
(40,10,2)
(38,42,2)
(4,1,2)
(15,58,2)
(6,25,2)
(3,58,2)
(13,6,2)
(48,1,2)
(55,58,2)
(32,10,2)
(7,58,2)
(4,38,2)
(25,30,2)
(13,38,2)
(27,30,2)
(52,58,2)
(64,10,2)
(13,10,2)
(13,1,2)
(10,6,2)
(9,30,2)
(57,10,2)
(30,52,2)
-----------------------------------
(0,inputBuffer)
(1,dest[100] = "")
(2,data)
(3,stdin)
(4,strncpy(dest, source, data)
(5,1)
(6,data = atoi(inputBuffer)
(7,CHAR_ARRAY_SIZE)
(8,5)
(9,"fgets()
(10,data < 100)
(11,inputBuffer)
(12,)
(13,dest[data])
(14,data)
(15,NULL)
(16,inputBuffer)
(17,)
(18,inputBuffer)
(19,dest)
(20,)
(21,data)
(22,)
(23,100)
(24,dest)
(25,atoi(inputBuffer)
(26,)
(27,printLine("fgets()
(28,1)
(29,)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,if (data < 100)
(32,data)
(33,\\\'\\\\0\\\')
(34,RET)
(35,"")
(36,memset(source, \\\'A\\\', 100-1)
(37,"")
(38,data = -1)
(39,source[100-1])
(40,source)
(41,source)
(42,-1)
(43,dest)
(44,1)
(45,data)
(46,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,source)
(48,printLine(dest)
(49,100-1)
(50,)
(51,\\\'A\\\')
(52,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,dest)
(54,if(5==5)
(55,inputBuffer[CHAR_ARRAY_SIZE] = "")
(56,dest)
(57,data)
(58,5==5)
(59,5)
(60,source[100-1] = \\\'\\\\0\\\')
(61,source)
(62,100)
(63,100)
(64,dest[data] = \\\'\\\\0\\\')
(65,\\\'\\\\0\\\')
(66,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^