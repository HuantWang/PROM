-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
32,33
32,34
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_12_bad()
CWE194_Unexpected_Sign_Extension__negative_memmove_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(21,12,0)
(19,5,0)
(3,32,0)
(34,41,0)
(10,24,0)
(35,36,0)
(47,53,0)
(9,42,0)
(30,17,0)
(31,28,0)
(11,29,0)
(12,41,0)
(1,41,0)
(12,18,0)
(48,43,0)
(12,3,0)
(18,39,0)
(29,37,0)
(5,41,0)
(49,4,0)
(53,4,0)
(24,28,0)
(33,37,0)
(3,43,0)
(52,17,0)
(12,42,0)
(37,28,0)
(46,42,0)
(38,46,0)
(0,42,0)
(6,9,0)
(26,53,0)
(25,41,0)
(20,1,0)
(53,37,0)
(16,1,0)
(15,37,0)
(45,18,0)
(23,12,0)
(5,37,0)
(9,3,0)
(43,3,0)
(14,4,0)
(36,17,0)
(42,46,0)
(42,2,0)
(40,46,0)
(50,1,0)
(27,9,0)
(1,42,0)
(4,53,0)
(13,3,0)
(41,37,0)
(1,3,0)
(8,37,0)
(36,29,0)
(1,39,0)
(7,24,0)
(17,36,0)
(44,28,0)
(9,3,1)
(41,25,1)
(26,47,1)
(48,13,1)
(22,24,1)
(18,45,1)
(20,16,1)
(50,20,1)
(24,7,1)
(16,9,1)
(23,1,1)
(45,12,1)
(34,42,1)
(29,11,1)
(40,38,1)
(19,18,1)
(30,52,1)
(1,42,1)
(6,27,1)
(46,40,1)
(1,41,1)
(3,43,1)
(5,19,1)
(9,6,1)
(12,41,1)
(9,42,1)
(42,46,1)
(0,22,1)
(4,49,1)
(25,34,1)
(11,36,1)
(12,42,1)
(5,41,1)
(43,48,1)
(52,35,1)
(19,9,1)
(21,23,1)
(53,4,1)
(27,29,1)
(34,3,1)
(51,5,1)
(36,17,1)
(1,50,1)
(49,14,1)
(47,41,1)
(14,26,1)
(35,53,1)
(13,22,1)
(7,10,1)
(1,3,1)
(38,0,1)
(17,30,1)
(12,21,1)
(12,3,1)
(50,9,2)
(12,9,2)
(1,42,2)
(1,9,2)
(13,22,2)
(0,22,2)
(12,3,2)
(42,46,2)
(23,9,2)
(40,22,2)
(45,9,2)
(18,9,2)
(1,41,2)
(43,22,2)
(1,3,2)
(12,42,2)
(5,41,2)
(3,22,2)
(36,17,2)
(42,22,2)
(46,22,2)
(48,22,2)
(53,4,2)
(12,41,2)
(9,42,2)
(38,22,2)
(21,9,2)
(16,9,2)
(3,43,2)
(9,3,2)
(20,9,2)
-----------------------------------
(0,data)
(1,memmove(dest, source, data)
(2,)
(3,data = -1)
(4,100-1)
(5,printLine(dest)
(6,100)
(7,0)
(8,if (data < 100)
(9,data < 100)
(10,data)
(11,\\\'\\\\0\\\')
(12,dest[data])
(13,data)
(14,100)
(15,source)
(16,dest)
(17,100-1)
(18,dest[data] = \\\'\\\\0\\\')
(19,dest)
(20,source)
(21,data)
(22,globalReturnsTrueOrFalse()
(23,dest)
(24,data = 0)
(25,"")
(26,\\\'A\\\')
(27,data)
(28,)
(29,source[100-1] = \\\'\\\\0\\\')
(30,1)
(31,if(globalReturnsTrueOrFalse()
(32,)
(33,dest)
(34,dest)
(35,source)
(36,source[100-1])
(37,)
(38,100)
(39,)
(40,1)
(41,dest[100] = "")
(42,data = 100-1)
(43,-1)
(44,data)
(45,\\\'\\\\0\\\')
(46,100-1)
(47,source)
(48,1)
(49,1)
(50,data)
(51,RET)
(52,100)
(53,memset(source, \\\'A\\\', 100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^