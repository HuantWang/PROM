-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_char_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
37,40
37,41
38,39
40,41
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
52,53
53,54
53,55
54,55
54,56
57,58
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,42,45,49,51,55,56,58,62,64
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_char_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fscanf_to_char_17_bad()
CWE197_Numeric_Truncation_Error__int_fscanf_to_char_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(31,28,0)
(16,26,0)
(16,28,0)
(13,20,0)
(15,4,0)
(15,20,0)
(5,9,0)
(8,16,0)
(18,15,0)
(20,0,0)
(29,7,0)
(4,22,0)
(18,20,0)
(24,9,0)
(23,0,0)
(17,18,0)
(27,9,0)
(7,9,0)
(4,15,0)
(25,4,0)
(22,0,0)
(28,22,0)
(6,22,0)
(14,3,0)
(1,16,0)
(19,5,0)
(12,4,0)
(28,16,0)
(3,22,0)
(4,25,0)
(30,0,0)
(22,3,0)
(10,0,0)
(21,15,0)
(2,5,0)
(1,8,1)
(4,22,1)
(7,29,1)
(15,4,1)
(3,14,1)
(8,5,1)
(19,7,1)
(22,3,1)
(19,9,1)
(29,16,1)
(7,9,1)
(31,1,1)
(12,21,1)
(5,2,1)
(11,18,1)
(9,27,1)
(28,22,1)
(16,28,1)
(18,17,1)
(27,24,1)
(24,22,1)
(18,15,1)
(14,6,1)
(28,31,1)
(4,25,1)
(21,5,1)
(2,19,1)
(17,15,1)
(5,9,1)
(4,12,1)
(7,5,2)
(8,5,2)
(2,5,2)
(4,25,2)
(28,22,2)
(16,5,2)
(16,28,2)
(28,5,2)
(5,5,2)
(1,5,2)
(15,4,2)
(4,22,2)
(7,9,2)
(18,15,2)
(29,5,2)
(5,9,2)
(19,5,2)
(31,5,2)
(22,3,2)
-----------------------------------
(0,)
(1,"%d")
(2,1)
(3,-1)
(4,(char)
(5,i < 1)
(6,data)
(7,i++)
(8,stdin)
(9,i = 0)
(10,data)
(11,RET)
(12,data)
(13,charData)
(14,1)
(15,charData = (char)
(16,fscanf(stdin, "%d", &data)
(17,charData)
(18,printHexCharLine(charData)
(19,i)
(20,)
(21,charData)
(22,data = -1)
(23,i)
(24,i)
(25,char)
(26,)
(27,0)
(28,&data)
(29,i)
(30,for(i = 0; i < 1; i++)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^