-----label-----
1
-----code-----
int CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_61b_badSource(int data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
40,43
40,44
40,45
40,46
40,47
40,48
40,49
40,50
40,51
41,42
42,43
42,44
43,44
45,46
45,47
45,48
45,49
46,47
48,49
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
67,68
70,71
71,72
72,73
74,75
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
104,105
106,107
106,108
107,108
107,109
108,109
108,110
108,111
108,112
109,110
111,112
113,114
113,115
114,115
114,116
115,116
117,118
119,120
120,121
122,123
123,124
124,125
126,127
128,129
130,131
131,132
131,133
132,133
134,135
134,136
134,137
134,138
134,139
135,136
137,138
139,140
141,142
141,143
142,143
146,147
146,148
147,148
147,149
148,149
148,150
149,150
151,152
153,154
153,155
154,155
157,158
159,160
160,161
160,162
161,162
161,163
162,163
164,165
167,168
168,169
168,170
169,170
171,172
171,173
172,173
174,175
177,178
177,179
178,179
178,180
179,180
181,182
183,184
184,185
185,186
185,187
186,187
188,189
190,191
191,192
-----nextToken-----
2,4,6,8,13,15,19,21,25,27,30,33,35,38,44,47,49,51,53,57,59,61,65,68,69,73,78,79,81,87,88,89,92,94,99,100,103,105,110,112,116,118,121,125,127,129,133,136,138,140,143,144,145,150,152,155,156,158,163,165,166,170,173,175,176,180,182,187,189,192
-----computeFrom-----
42,43
42,44
55,56
55,57
75,76
75,77
83,84
83,85
96,97
96,98
107,108
107,109
131,132
131,133
141,142
141,143
147,148
147,149
148,149
148,150
153,154
153,155
160,161
160,162
168,169
168,170
178,179
178,180
-----guardedBy-----
180,189
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_61b_badSource(int data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
int
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_61b_badSource(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_memcpy_61b_badSource
int data
int
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(67,37,0)
(80,122,0)
(81,30,0)
(90,66,0)
(97,104,0)
(43,5,0)
(32,119,0)
(82,56,0)
(22,13,0)
(30,19,0)
(68,46,0)
(41,37,0)
(96,104,0)
(94,47,0)
(58,102,0)
(61,37,0)
(70,84,0)
(92,17,0)
(13,21,0)
(37,121,0)
(56,62,0)
(2,58,0)
(17,4,0)
(45,104,0)
(39,6,0)
(42,57,0)
(93,37,0)
(105,11,0)
(35,69,0)
(102,22,0)
(34,16,0)
(122,16,0)
(77,108,0)
(32,74,0)
(20,32,0)
(24,85,0)
(83,18,0)
(122,80,0)
(20,113,0)
(58,13,0)
(11,62,0)
(117,37,0)
(8,72,0)
(114,57,0)
(13,62,0)
(71,22,0)
(84,56,0)
(48,21,0)
(20,116,0)
(22,102,0)
(86,80,0)
(40,116,0)
(74,32,0)
(87,55,0)
(78,52,0)
(54,82,0)
(108,29,0)
(21,13,0)
(7,107,0)
(108,113,0)
(124,13,0)
(110,22,0)
(21,47,0)
(53,113,0)
(20,66,0)
(17,13,0)
(64,25,0)
(38,25,0)
(32,20,0)
(104,113,0)
(4,62,0)
(52,122,0)
(30,121,0)
(99,4,0)
(25,37,0)
(73,55,0)
(44,20,0)
(55,24,0)
(106,6,0)
(63,125,0)
(11,19,0)
(120,107,0)
(53,25,0)
(36,17,0)
(33,30,0)
(21,113,0)
(3,85,0)
(88,62,0)
(10,53,0)
(56,82,0)
(28,52,0)
(26,37,0)
(116,20,0)
(107,120,0)
(72,100,0)
(12,0,0)
(56,84,0)
(46,11,0)
(65,9,0)
(1,113,0)
(6,37,0)
(125,88,0)
(31,37,0)
(24,62,0)
(100,72,0)
(30,11,0)
(47,21,0)
(100,120,0)
(16,122,0)
(119,32,0)
(79,62,0)
(66,20,0)
(108,25,0)
(75,113,0)
(115,125,0)
(27,100,0)
(123,1,0)
(51,62,0)
(15,1,0)
(98,72,0)
(102,58,0)
(23,58,0)
(14,21,0)
(89,53,0)
(50,21,0)
(59,37,0)
(120,62,0)
(60,74,0)
(85,24,0)
(101,62,0)
(76,56,0)
(57,62,0)
(113,62,0)
(122,52,0)
(103,88,0)
(91,62,0)
(109,37,0)
(11,46,0)
(113,104,0)
(95,47,0)
(46,68,1)
(102,58,1)
(96,75,1)
(32,119,1)
(55,73,1)
(1,123,1)
(124,66,1)
(70,76,1)
(122,80,1)
(123,15,1)
(108,25,1)
(10,12,1)
(108,113,1)
(7,100,1)
(22,13,1)
(30,19,1)
(2,22,1)
(115,56,1)
(48,14,1)
(75,57,1)
(33,35,1)
(104,45,1)
(52,78,1)
(58,23,1)
(27,72,1)
(86,52,1)
(44,24,1)
(63,115,1)
(47,95,1)
(10,111,1)
(49,53,1)
(56,82,1)
(4,99,1)
(58,13,1)
(68,105,1)
(66,90,1)
(100,72,1)
(99,17,1)
(102,22,1)
(89,10,1)
(94,48,1)
(71,110,1)
(80,86,1)
(90,20,1)
(78,28,1)
(110,13,1)
(30,11,1)
(87,120,1)
(50,47,1)
(10,65,1)
(21,50,1)
(66,20,1)
(21,47,1)
(120,107,1)
(39,106,1)
(33,49,1)
(32,74,1)
(20,32,1)
(24,85,1)
(125,63,1)
(30,33,1)
(21,113,1)
(20,116,1)
(53,113,1)
(108,77,1)
(6,39,1)
(85,3,1)
(28,111,1)
(54,1,1)
(74,60,1)
(84,70,1)
(83,16,1)
(16,34,1)
(76,82,1)
(20,113,1)
(56,84,1)
(17,92,1)
(17,13,1)
(72,8,1)
(116,40,1)
(23,2,1)
(114,42,1)
(34,122,1)
(42,16,1)
(113,104,1)
(8,98,1)
(60,44,1)
(53,25,1)
(28,25,1)
(122,52,1)
(97,96,1)
(43,1,1)
(25,64,1)
(95,94,1)
(11,19,1)
(16,122,1)
(105,4,1)
(15,113,1)
(107,7,1)
(38,6,1)
(35,49,1)
(13,21,1)
(82,54,1)
(12,66,1)
(36,102,1)
(10,83,1)
(98,88,1)
(57,114,1)
(100,27,1)
(53,89,1)
(92,36,1)
(111,11,1)
(73,87,1)
(1,113,1)
(11,46,1)
(103,125,1)
(22,71,1)
(10,43,1)
(88,103,1)
(81,30,1)
(40,32,1)
(3,55,1)
(65,102,1)
(14,124,1)
(64,38,1)
(45,97,1)
(49,108,1)
(77,53,1)
(90,1,2)
(83,16,2)
(11,19,2)
(17,13,2)
(75,16,2)
(58,22,2)
(56,1,2)
(1,113,2)
(45,16,2)
(84,1,2)
(70,1,2)
(74,1,2)
(105,102,2)
(123,16,2)
(103,1,2)
(35,49,2)
(100,1,2)
(63,1,2)
(115,1,2)
(96,16,2)
(99,102,2)
(34,111,2)
(32,74,2)
(82,1,2)
(11,102,2)
(17,102,2)
(32,1,2)
(120,107,2)
(104,16,2)
(15,16,2)
(76,1,2)
(122,52,2)
(107,1,2)
(14,66,2)
(53,25,2)
(113,16,2)
(20,1,2)
(65,102,2)
(21,47,2)
(60,1,2)
(120,1,2)
(77,53,2)
(7,1,2)
(36,102,2)
(72,1,2)
(46,102,2)
(116,1,2)
(111,102,2)
(102,66,2)
(110,66,2)
(8,1,2)
(27,1,2)
(125,1,2)
(98,1,2)
(12,66,2)
(87,1,2)
(24,85,2)
(24,1,2)
(86,111,2)
(21,66,2)
(108,25,2)
(53,113,2)
(81,30,2)
(108,113,2)
(50,66,2)
(66,1,2)
(47,66,2)
(80,111,2)
(122,111,2)
(52,111,2)
(13,21,2)
(32,119,2)
(1,16,2)
(30,19,2)
(40,1,2)
(4,102,2)
(54,1,2)
(56,82,2)
(3,1,2)
(30,11,2)
(94,66,2)
(28,111,2)
(22,66,2)
(102,22,2)
(42,16,2)
(20,113,2)
(11,46,2)
(48,66,2)
(85,1,2)
(71,66,2)
(13,66,2)
(16,122,2)
(124,66,2)
(100,72,2)
(66,20,2)
(97,16,2)
(95,66,2)
(122,80,2)
(43,1,2)
(20,32,2)
(73,1,2)
(21,113,2)
(56,84,2)
(23,22,2)
(102,58,2)
(22,13,2)
(114,16,2)
(2,22,2)
(44,1,2)
(108,53,2)
(88,1,2)
(57,16,2)
(55,1,2)
(58,13,2)
(20,116,2)
(16,111,2)
(78,111,2)
(113,104,2)
(92,102,2)
(68,102,2)
-----------------------------------
(0,)
(1,connectSocket == INVALID_SOCKET)
(2,recvResult)
(3,TCP_PORT)
(4,inputBuffer[recvResult] = '\\\\0')
(5,)
(6,wsaDataInit = 0)
(7,IP_ADDRESS)
(8,sin_addr)
(9,)
(10,connectSocket)
(11,data = atoi(inputBuffer)
(12,break;)
(13,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(14,connectSocket)
(15,connectSocket)
(16,WSAStartup(MAKEWORD(2,2)
(17,inputBuffer[recvResult])
(18,)
(19,int data)
(20,connect(connectSocket, (struct sockaddr*)
(21,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(22,recvResult == SOCKET_ERROR)
(23,0)
(24,service.sin_port = htons(TCP_PORT)
(25,connectSocket = INVALID_SOCKET)
(26,service)
(27,s_addr)
(28,2)
(29,)
(30,return data;)
(31,wsaDataInit)
(32,(struct sockaddr*)
(33,data)
(34,NO_ERROR)
(35,WSACleanup()
(36,inputBuffer)
(37,)
(38,connectSocket)
(39,0)
(40,service)
(41,if (connectSocket != INVALID_SOCKET)
(42,wsaDataInit)
(43,break;)
(44,connectSocket)
(45,IPPROTO_TCP)
(46,atoi(inputBuffer)
(47,CHAR_ARRAY_SIZE - 1)
(48,inputBuffer)
(49,wsaDataInit)
(50,0)
(51,if (connect(connectSocket, (struct sockaddr*)
(52,MAKEWORD(2,2)
(53,connectSocket != INVALID_SOCKET)
(54,service)
(55,service.sin_port)
(56,memset(&service, 0, sizeof(service)
(57,wsaDataInit = 1)
(58,recvResult == 0)
(59,wsaData)
(60,service)
(61,do)
(62,)
(63,sin_family)
(64,INVALID_SOCKET)
(65,break;)
(66,connect(connectSocket, (struct sockaddr*)
(67,connectSocket)
(68,inputBuffer)
(69,)
(70,service)
(71,SOCKET_ERROR)
(72,service.sin_addr)
(73,sin_port)
(74,&service)
(75,connectSocket)
(76,0)
(77,connectSocket)
(78,2)
(79,if (WSAStartup(MAKEWORD(2,2)
(80,&wsaData)
(81,RET)
(82,&service)
(83,break;)
(84,sizeof(service)
(85,htons(TCP_PORT)
(86,wsaData)
(87,service)
(88,service.sin_family = AF_INET)
(89,INVALID_SOCKET)
(90,SOCKET_ERROR)
(91,if (connectSocket == INVALID_SOCKET)
(92,recvResult)
(93,inputBuffer)
(94,CHAR_ARRAY_SIZE)
(95,1)
(96,AF_INET)
(97,SOCK_STREAM)
(98,service)
(99,\'\\\\0\')
(100,service.sin_addr.s_addr)
(101,if (recvResult == SOCKET_ERROR || recvResult == 0)
(102,recvResult == SOCKET_ERROR || recvResult == 0)
(103,AF_INET)
(104,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(105,data)
(106,wsaDataInit)
(107,inet_addr(IP_ADDRESS)
(108,CLOSE_SOCKET(connectSocket)
(109,if (wsaDataInit)
(110,recvResult)
(111,0)
(112,'\\\\0')
(113,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(114,1)
(115,service)
(116,sizeof(service)
(117,recvResult)
(118,inputBuffer[recvResult] = \'\\\\0\')
(119,struct sockaddr*)
(120,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(121,)
(122,WSAStartup(MAKEWORD(2,2)
(123,INVALID_SOCKET)
(124,recvResult)
(125,service.sin_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^