-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_14_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_14_bad(){    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_14_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_14_bad
{    short data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(50,6,0)
(47,13,0)
(40,55,0)
(1,23,0)
(12,14,0)
(55,4,0)
(0,6,0)
(27,37,0)
(15,44,0)
(39,28,0)
(24,4,0)
(6,9,0)
(44,6,0)
(20,18,0)
(45,23,0)
(53,24,0)
(43,14,0)
(34,4,0)
(27,3,0)
(16,4,0)
(18,6,0)
(22,24,0)
(35,28,0)
(50,43,0)
(18,13,0)
(8,50,0)
(37,27,0)
(26,41,0)
(24,53,0)
(5,0,0)
(34,28,0)
(50,13,0)
(4,28,0)
(17,4,0)
(34,44,0)
(41,4,0)
(44,13,0)
(49,41,0)
(24,22,0)
(4,24,0)
(16,28,0)
(43,4,0)
(52,53,0)
(19,23,0)
(14,28,0)
(11,34,0)
(43,50,0)
(6,0,0)
(2,34,0)
(42,33,0)
(29,18,0)
(46,50,0)
(53,6,0)
(53,13,0)
(55,28,0)
(10,33,0)
(13,23,0)
(32,6,0)
(54,13,0)
(36,43,0)
(51,37,0)
(48,44,0)
(44,34,0)
(25,16,0)
(7,18,1)
(27,37,1)
(17,18,1)
(42,10,1)
(8,46,1)
(55,4,1)
(43,4,1)
(44,15,1)
(18,13,1)
(0,5,1)
(52,17,1)
(33,42,1)
(26,49,1)
(47,54,1)
(12,43,1)
(14,12,1)
(44,13,1)
(34,4,1)
(16,25,1)
(2,27,1)
(53,52,1)
(24,53,1)
(18,6,1)
(24,22,1)
(15,48,1)
(2,41,1)
(44,6,1)
(40,16,1)
(55,40,1)
(37,51,1)
(16,4,1)
(48,11,1)
(11,2,1)
(50,8,1)
(49,4,1)
(41,26,1)
(53,13,1)
(43,50,1)
(32,33,1)
(53,6,1)
(4,24,1)
(20,6,1)
(5,32,1)
(50,6,1)
(51,41,1)
(46,36,1)
(13,47,1)
(50,13,1)
(29,20,1)
(34,44,1)
(7,55,1)
(41,4,1)
(25,14,1)
(6,0,1)
(18,29,1)
(36,34,1)
(20,33,1)
(10,13,1)
(55,4,2)
(4,18,2)
(52,18,2)
(44,13,2)
(24,53,2)
(41,4,2)
(11,18,2)
(16,18,2)
(34,18,2)
(17,18,2)
(4,24,2)
(25,18,2)
(50,6,2)
(18,6,2)
(2,18,2)
(14,18,2)
(50,18,2)
(41,18,2)
(53,18,2)
(18,13,2)
(0,33,2)
(6,33,2)
(8,18,2)
(27,41,2)
(51,41,2)
(34,4,2)
(43,18,2)
(5,33,2)
(46,18,2)
(16,4,2)
(27,37,2)
(40,18,2)
(32,33,2)
(48,18,2)
(34,44,2)
(43,4,2)
(12,18,2)
(50,13,2)
(44,6,2)
(53,13,2)
(49,18,2)
(55,18,2)
(6,0,2)
(37,41,2)
(44,18,2)
(15,18,2)
(53,6,2)
(26,18,2)
(24,22,2)
(36,18,2)
(43,50,2)
(24,18,2)
-----------------------------------
(0,-1)
(1,if (data < 100)
(2,dataBuffer)
(3,)
(4,* dataBuffer = (char *)
(5,1)
(6,data = -1)
(7,RET)
(8,1)
(9,)
(10,globalFive)
(11,\'A\')
(12,'\\\\0')
(13,data = 0)
(14,dataBuffer[data-1] = '\\\\0')
(15,1)
(16,printLine(dataBuffer)
(17,dataBuffer)
(18,data < 100)
(19,data)
(20,data)
(21,\'\\\\0\')
(22,char *)
(23,)
(24,(char *)
(25,dataBuffer)
(26,NULL)
(27,exit(-1)
(28,)
(29,100)
(30,dataBuffer[data-1] = \'\\\\0\')
(31,'A')
(32,data)
(33,globalFive==5)
(34,memset(dataBuffer, \'A\', data-1)
(35,dataBuffer)
(36,dataBuffer)
(37,-1)
(38,memset(dataBuffer, 'A', data-1)
(39,if (dataBuffer == NULL)
(40,dataBuffer)
(41,dataBuffer == NULL)
(42,5)
(43,dataBuffer[data-1])
(44,data-1)
(45,if(globalFive==5)
(46,data)
(47,0)
(48,data)
(49,dataBuffer)
(50,data-1)
(51,1)
(52,data)
(53,malloc(data)
(54,data)
(55,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^