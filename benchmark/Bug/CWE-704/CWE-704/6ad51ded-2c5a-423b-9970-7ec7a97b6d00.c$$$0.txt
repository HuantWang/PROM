-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
26,27
27,28
27,29
29,30
29,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
43,46
43,47
44,45
46,47
48,49
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,33,36,38,40,45,47,49,51,53,58,61,63,68,69,73,76,77,81,83
-----computeFrom-----
13,14
13,15
17,18
17,19
42,43
42,44
56,57
56,58
-----guardedBy-----
47,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(27,3,0)
(28,23,0)
(33,15,0)
(18,9,0)
(11,14,0)
(8,14,0)
(29,7,0)
(5,30,0)
(19,38,0)
(16,34,0)
(20,16,0)
(22,16,0)
(24,33,0)
(37,5,0)
(26,3,0)
(14,21,0)
(38,16,0)
(13,3,0)
(33,24,0)
(25,11,0)
(0,17,0)
(15,33,0)
(35,9,0)
(12,7,0)
(11,38,0)
(21,14,0)
(10,26,0)
(31,16,0)
(9,23,0)
(15,16,0)
(6,21,0)
(23,9,0)
(32,17,0)
(33,11,0)
(14,2,0)
(7,3,0)
(1,38,0)
(4,9,0)
(11,33,0)
(37,23,1)
(9,35,1)
(18,38,1)
(14,21,1)
(1,7,1)
(23,9,1)
(13,27,1)
(3,13,1)
(4,18,1)
(11,25,1)
(38,19,1)
(26,10,1)
(25,14,1)
(33,24,1)
(29,12,1)
(26,3,1)
(25,5,1)
(23,28,1)
(7,3,1)
(6,8,1)
(28,9,1)
(5,37,1)
(15,33,1)
(33,11,1)
(19,1,1)
(10,15,1)
(7,29,1)
(11,14,1)
(36,7,1)
(12,3,1)
(11,38,1)
(35,4,1)
(21,6,1)
(8,23,1)
(12,26,1)
(33,11,2)
(11,38,2)
(38,7,2)
(9,7,2)
(23,7,2)
(26,3,2)
(14,21,2)
(14,23,2)
(19,7,2)
(33,24,2)
(10,7,2)
(4,7,2)
(12,7,2)
(5,23,2)
(33,7,2)
(37,23,2)
(6,23,2)
(7,3,2)
(21,23,2)
(15,33,2)
(26,7,2)
(29,7,2)
(15,7,2)
(11,7,2)
(18,7,2)
(23,9,2)
(28,7,2)
(11,14,2)
(35,7,2)
(7,7,2)
(8,23,2)
(25,7,2)
(1,7,2)
-----------------------------------
(0,for(j = 0; j < 1; j++)
(1,doubleNumber)
(2,)
(3,j = 0)
(4,CHAR_ARRAY_SIZE)
(5,printLine("fgets()
(6,inputBuffer)
(7,j < 1)
(8,doubleNumber)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,j)
(11,sqrt(doubleNumber)
(12,j)
(13,0)
(14,doubleNumber = atof(inputBuffer)
(15,printIntLine((int)
(16,)
(17,)
(18,inputBuffer)
(19,0)
(20,doubleNumber)
(21,atof(inputBuffer)
(22,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,int)
(25,doubleNumber)
(26,j++)
(27,j)
(28,NULL)
(29,1)
(30,)
(31,inputBuffer)
(32,j)
(33,(int)
(34,)
(35,stdin)
(36,RET)
(37,"fgets()
(38,doubleNumber = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^