-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
70,73
73,74
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,65,69,71,72,76,78,81,83,87,89,94,96,100,102,103,106,107,112,115,116,117,121,123,127,129
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
62,63
62,64
85,86
85,87
104,105
104,106
109,110
109,111
113,114
113,115
-----guardedBy-----
38,54
64,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(16,3,0)
(56,30,0)
(47,38,0)
(35,47,0)
(2,59,0)
(52,58,0)
(3,64,0)
(41,30,0)
(46,15,0)
(25,15,0)
(4,38,0)
(32,33,0)
(30,47,0)
(47,64,0)
(21,12,0)
(30,0,0)
(19,12,0)
(59,15,0)
(31,53,0)
(26,40,0)
(40,64,0)
(46,0,0)
(58,11,0)
(42,47,0)
(28,0,0)
(59,0,0)
(15,0,0)
(54,12,0)
(14,11,0)
(57,33,0)
(37,0,0)
(4,65,0)
(15,65,0)
(47,30,0)
(38,36,0)
(18,12,0)
(64,40,0)
(30,15,0)
(3,38,0)
(11,50,0)
(65,15,0)
(33,64,0)
(8,4,0)
(1,3,0)
(34,53,0)
(33,32,0)
(22,61,0)
(17,36,0)
(36,38,0)
(6,54,0)
(63,11,0)
(64,53,0)
(9,64,0)
(55,25,0)
(62,33,0)
(60,38,0)
(36,58,0)
(20,39,0)
(61,0,0)
(65,24,0)
(12,54,0)
(10,32,0)
(38,51,0)
(24,65,0)
(32,15,0)
(27,66,0)
(49,53,0)
(65,4,0)
(12,58,0)
(13,58,0)
(48,15,0)
(44,23,0)
(45,25,0)
(29,46,0)
(4,64,0)
(33,38,0)
(23,20,0)
(20,23,0)
(32,61,0)
(66,5,0)
(21,19,1)
(64,40,1)
(42,35,1)
(12,58,1)
(65,4,1)
(30,15,1)
(44,25,1)
(46,15,1)
(26,9,1)
(33,62,1)
(18,21,1)
(54,12,1)
(32,33,1)
(52,13,1)
(59,15,1)
(58,52,1)
(59,2,1)
(12,18,1)
(66,27,1)
(38,36,1)
(30,47,1)
(32,15,1)
(6,12,1)
(1,16,1)
(57,10,1)
(19,58,1)
(10,30,1)
(25,15,1)
(40,26,1)
(3,1,1)
(45,15,1)
(22,32,1)
(2,46,1)
(17,60,1)
(43,64,1)
(33,38,1)
(60,54,1)
(36,17,1)
(36,58,1)
(47,64,1)
(16,38,1)
(35,56,1)
(7,59,1)
(20,23,1)
(8,48,1)
(4,64,1)
(47,38,1)
(54,6,1)
(3,64,1)
(47,42,1)
(3,38,1)
(15,65,1)
(7,3,1)
(61,22,1)
(4,8,1)
(65,24,1)
(41,25,1)
(56,41,1)
(13,43,1)
(62,57,1)
(29,61,1)
(27,54,1)
(41,20,1)
(23,44,1)
(25,55,1)
(55,45,1)
(16,66,1)
(4,38,1)
(48,3,1)
(33,64,1)
(16,43,1)
(46,29,1)
(4,3,2)
(38,36,2)
(32,33,2)
(59,15,2)
(4,64,2)
(58,43,2)
(36,54,2)
(48,3,2)
(47,64,2)
(15,3,2)
(21,43,2)
(38,54,2)
(47,3,2)
(33,3,2)
(33,64,2)
(54,43,2)
(46,3,2)
(25,3,2)
(18,43,2)
(22,3,2)
(4,38,2)
(20,23,2)
(44,25,2)
(27,54,2)
(54,12,2)
(64,40,2)
(8,3,2)
(12,58,2)
(32,3,2)
(15,65,2)
(2,3,2)
(45,3,2)
(59,3,2)
(30,47,2)
(46,15,2)
(66,54,2)
(12,43,2)
(6,43,2)
(23,25,2)
(65,3,2)
(10,3,2)
(41,3,2)
(47,38,2)
(52,43,2)
(56,3,2)
(3,64,2)
(32,15,2)
(55,3,2)
(33,38,2)
(30,3,2)
(61,3,2)
(20,25,2)
(19,43,2)
(25,15,2)
(17,54,2)
(42,3,2)
(36,58,2)
(3,38,2)
(57,3,2)
(35,3,2)
(62,3,2)
(60,54,2)
(65,4,2)
(65,24,2)
(30,15,2)
(29,3,2)
(13,43,2)
-----------------------------------
(0,)
(1,100)
(2,dataBuffer)
(3,data < 100)
(4,malloc(data)
(5,)
(6,NULL)
(7,RET)
(8,data)
(9,data)
(10,dataBuffer)
(11,)
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,inputBuffer)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,* dataBuffer = (char *)
(16,data)
(17,inputBuffer)
(18,stdin)
(19,inputBuffer)
(20,exit(-1)
(21,CHAR_ARRAY_SIZE)
(22,\\\'\\\\0\\\')
(23,-1)
(24,char *)
(25,dataBuffer == NULL)
(26,1)
(27,"fgets()
(28,dataBuffer)
(29,dataBuffer)
(30,memset(dataBuffer, \\\'A\\\', data-1)
(31,if(STATIC_CONST_TRUE)
(32,dataBuffer[data-1])
(33,data-1)
(34,if (data < 100)
(35,data)
(36,atoi(inputBuffer)
(37,if (dataBuffer == NULL)
(38,data = atoi(inputBuffer)
(39,)
(40,-1)
(41,dataBuffer)
(42,1)
(43,STATIC_CONST_TRUE)
(44,1)
(45,dataBuffer)
(46,printLine(dataBuffer)
(47,data-1)
(48,dataBuffer)
(49,data)
(50,)
(51,)
(52,"")
(53,)
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,NULL)
(56,\\\'A\\\')
(57,data)
(58,inputBuffer[CHAR_ARRAY_SIZE] = "")
(59,free(dataBuffer)
(60,data)
(61,dataBuffer[data-1] = \\\'\\\\0\\\')
(62,1)
(63,inputBuffer)
(64,data = -1)
(65,(char *)
(66,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^