-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a negative number */
    data = -1;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
23,25
24,25
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
31,34
34,35
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
43,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
74,75
74,76
75,76
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,14,15,19,21,25,26,30,32,33,37,39,42,44,48,50,55,57,61,63,64,67,68,73,76,77,78,82,84,88,90
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
46,47
46,48
65,66
65,67
70,71
70,72
74,75
74,76
-----guardedBy-----
25,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_01_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_01_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_01_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,46,0)
(2,18,0)
(26,46,0)
(10,31,0)
(12,43,0)
(19,28,0)
(4,31,0)
(3,15,0)
(30,7,0)
(43,15,0)
(48,5,0)
(6,14,0)
(11,7,0)
(21,50,0)
(5,19,0)
(46,19,0)
(27,15,0)
(9,50,0)
(18,50,0)
(32,24,0)
(5,6,0)
(7,14,0)
(37,18,0)
(7,11,0)
(25,19,0)
(11,19,0)
(13,8,0)
(31,4,0)
(28,0,0)
(35,27,0)
(24,14,0)
(43,19,0)
(28,1,0)
(11,8,0)
(6,5,0)
(27,19,0)
(16,11,0)
(38,34,0)
(23,6,0)
(29,5,0)
(34,14,0)
(1,28,0)
(33,6,0)
(4,45,0)
(36,24,0)
(17,7,0)
(20,14,0)
(19,15,0)
(5,15,0)
(0,28,0)
(14,34,0)
(14,50,0)
(47,1,0)
(39,15,0)
(8,15,0)
(28,19,0)
(1,14,0)
(6,14,1)
(38,20,1)
(10,46,1)
(46,42,1)
(7,17,1)
(28,0,1)
(24,32,1)
(36,14,1)
(33,29,1)
(16,5,1)
(19,28,1)
(5,6,1)
(28,1,1)
(23,33,1)
(32,36,1)
(47,25,1)
(30,16,1)
(7,14,1)
(8,13,1)
(34,38,1)
(1,14,1)
(14,34,1)
(25,24,1)
(43,19,1)
(24,14,1)
(27,19,1)
(27,35,1)
(12,8,1)
(11,7,1)
(42,26,1)
(11,19,1)
(17,30,1)
(26,19,1)
(29,48,1)
(48,46,1)
(35,43,1)
(41,27,1)
(48,4,1)
(37,2,1)
(1,47,1)
(6,23,1)
(18,37,1)
(4,31,1)
(13,11,1)
(41,24,1)
(43,12,1)
(31,10,1)
(20,18,1)
(5,19,1)
(46,19,1)
(31,46,2)
(10,46,2)
(43,19,2)
(11,19,2)
(7,24,2)
(6,24,2)
(48,24,2)
(25,24,2)
(46,19,2)
(33,24,2)
(23,24,2)
(28,24,2)
(11,7,2)
(5,6,2)
(5,19,2)
(42,24,2)
(7,14,2)
(26,24,2)
(4,46,2)
(35,24,2)
(12,24,2)
(24,14,2)
(27,19,2)
(11,24,2)
(29,24,2)
(19,24,2)
(5,24,2)
(43,24,2)
(27,24,2)
(47,24,2)
(28,1,2)
(30,24,2)
(17,24,2)
(14,34,2)
(1,24,2)
(46,24,2)
(1,14,2)
(13,24,2)
(28,0,2)
(16,24,2)
(6,14,2)
(4,31,2)
(19,28,2)
(8,24,2)
-----------------------------------
(0,char *)
(1,malloc(data)
(2,data)
(3,if (dataBuffer == NULL)
(4,exit(-1)
(5,memset(dataBuffer, \'A\', data-1)
(6,data-1)
(7,data-1)
(8,dataBuffer[data-1] = \'\\\\0\')
(9,data)
(10,1)
(11,dataBuffer[data-1])
(12,dataBuffer)
(13,'\\\\0')
(14,data = -1)
(15,)
(16,dataBuffer)
(17,1)
(18,data = 0)
(19,* dataBuffer = (char *)
(20,data)
(21,if (data < 100)
(22,memset(dataBuffer, 'A', data-1)
(23,1)
(24,data < 100)
(25,dataBuffer)
(26,dataBuffer)
(27,free(dataBuffer)
(28,(char *)
(29,\'A\')
(30,data)
(31,-1)
(32,100)
(33,data)
(34,-1)
(35,dataBuffer)
(36,data)
(37,0)
(38,1)
(39,dataBuffer)
(40,dataBuffer[data-1] = '\\\\0')
(41,RET)
(42,NULL)
(43,printLine(dataBuffer)
(44,\'\\\\0\')
(45,)
(46,dataBuffer == NULL)
(47,data)
(48,dataBuffer)
(49,'A')
(50,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^