-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_41_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_41_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_41_badSink(short data)
CWE194_Unexpected_Sign_Extension__fgets_malloc_41_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(13,8,0)
(19,37,0)
(11,3,0)
(25,6,0)
(26,36,0)
(38,15,0)
(31,8,0)
(6,42,0)
(23,5,0)
(10,31,0)
(39,36,0)
(31,42,0)
(6,15,0)
(8,31,0)
(28,32,0)
(39,5,0)
(3,11,0)
(15,6,0)
(1,22,0)
(12,26,0)
(9,16,0)
(20,16,0)
(33,15,0)
(14,3,0)
(5,42,0)
(24,16,0)
(21,16,0)
(7,24,0)
(5,23,0)
(17,21,0)
(5,39,0)
(42,16,0)
(22,42,0)
(4,42,0)
(42,5,0)
(0,37,0)
(22,16,0)
(6,16,0)
(37,42,0)
(35,26,0)
(21,42,0)
(29,39,0)
(15,36,0)
(11,18,0)
(31,24,0)
(43,8,0)
(2,6,0)
(8,36,0)
(33,38,1)
(1,21,1)
(3,14,1)
(7,31,1)
(31,8,1)
(37,0,1)
(5,23,1)
(15,36,1)
(22,1,1)
(11,3,1)
(19,42,1)
(14,37,1)
(39,29,1)
(4,26,1)
(43,13,1)
(21,42,1)
(10,6,1)
(42,5,1)
(17,24,1)
(31,42,1)
(8,43,1)
(6,42,1)
(2,37,1)
(8,36,1)
(2,11,1)
(6,15,1)
(21,17,1)
(13,10,1)
(39,36,1)
(35,12,1)
(15,33,1)
(26,35,1)
(5,39,1)
(0,19,1)
(41,22,1)
(22,42,1)
(29,4,1)
(38,25,1)
(24,7,1)
(41,26,1)
(25,2,1)
(26,36,1)
(37,42,1)
(24,26,2)
(43,26,2)
(5,39,2)
(39,36,2)
(8,26,2)
(8,36,2)
(4,26,2)
(38,26,2)
(15,26,2)
(33,26,2)
(15,36,2)
(22,42,2)
(42,26,2)
(17,26,2)
(3,37,2)
(31,42,2)
(25,26,2)
(22,26,2)
(21,26,2)
(37,26,2)
(26,36,2)
(10,26,2)
(31,26,2)
(5,23,2)
(0,26,2)
(21,42,2)
(13,26,2)
(1,26,2)
(29,26,2)
(2,26,2)
(31,8,2)
(11,3,2)
(6,42,2)
(6,26,2)
(14,37,2)
(19,26,2)
(37,42,2)
(5,26,2)
(6,15,2)
(42,5,2)
(7,26,2)
(11,37,2)
(39,26,2)
-----------------------------------
(0,NULL)
(1,dataBuffer)
(2,dataBuffer)
(3,-1)
(4,dataBuffer)
(5,(char *)
(6,memset(dataBuffer, \'A\', data-1)
(7,'\\\\0')
(8,data-1)
(9,dataBuffer)
(10,dataBuffer)
(11,exit(-1)
(12,data)
(13,data)
(14,1)
(15,data-1)
(16,)
(17,dataBuffer)
(18,)
(19,dataBuffer)
(20,if (dataBuffer == NULL)
(21,printLine(dataBuffer)
(22,free(dataBuffer)
(23,char *)
(24,dataBuffer[data-1] = \'\\\\0\')
(25,'A')
(26,data < 100)
(27,\'\\\\0\')
(28,if (data < 100)
(29,data)
(30,dataBuffer[data-1] = '\\\\0')
(31,dataBuffer[data-1])
(32,)
(33,1)
(34,memset(dataBuffer, 'A', data-1)
(35,100)
(36,short data)
(37,dataBuffer == NULL)
(38,data)
(39,malloc(data)
(40,\'A\')
(41,RET)
(42,* dataBuffer = (char *)
(43,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^