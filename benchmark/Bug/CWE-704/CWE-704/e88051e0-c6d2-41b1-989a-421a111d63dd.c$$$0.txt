-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
69,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,70,71,73,77,79
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_10_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(35,38,0)
(22,9,0)
(0,5,0)
(36,18,0)
(27,13,0)
(14,34,0)
(0,38,0)
(18,32,0)
(25,3,0)
(34,5,0)
(33,18,0)
(37,3,0)
(9,34,0)
(18,38,0)
(13,19,0)
(6,15,0)
(18,1,0)
(31,34,0)
(38,0,0)
(15,1,0)
(5,13,0)
(4,32,0)
(15,25,0)
(38,2,0)
(30,0,0)
(34,9,0)
(20,32,0)
(24,13,0)
(32,4,0)
(26,5,0)
(23,7,0)
(28,25,0)
(18,36,0)
(21,1,0)
(29,5,0)
(1,18,0)
(11,4,0)
(32,3,0)
(16,3,0)
(17,34,0)
(1,25,0)
(7,8,0)
(26,29,1)
(9,34,1)
(38,0,1)
(34,5,1)
(9,22,1)
(14,5,1)
(33,21,1)
(0,5,1)
(6,1,1)
(21,12,1)
(34,31,1)
(29,12,1)
(10,15,1)
(35,9,1)
(32,4,1)
(21,38,1)
(30,35,1)
(12,32,1)
(5,26,1)
(1,18,1)
(11,20,1)
(18,33,1)
(18,36,1)
(18,38,1)
(17,14,1)
(23,9,1)
(4,11,1)
(21,7,1)
(31,17,1)
(0,30,1)
(15,6,1)
(15,1,1)
(22,34,1)
(7,23,1)
(18,32,1)
(38,9,2)
(26,12,2)
(17,12,2)
(15,1,2)
(5,12,2)
(23,9,2)
(18,36,2)
(14,12,2)
(34,5,2)
(1,18,2)
(0,5,2)
(32,4,2)
(29,12,2)
(9,34,2)
(34,12,2)
(9,12,2)
(35,9,2)
(38,0,2)
(18,38,2)
(0,9,2)
(18,32,2)
(31,12,2)
(30,9,2)
(7,9,2)
(22,12,2)
-----------------------------------
(0,atoi(inputBuffer)
(1,charData = (char)
(2,)
(3,)
(4,-1)
(5,inputBuffer[CHAR_ARRAY_SIZE] = "")
(6,charData)
(7,printLine("fgets()
(8,)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,RET)
(11,1)
(12,globalTrue)
(13,)
(14,inputBuffer)
(15,printHexCharLine(charData)
(16,data)
(17,CHAR_ARRAY_SIZE)
(18,(char)
(19,)
(20,data)
(21,charData)
(22,NULL)
(23,"fgets()
(24,inputBuffer)
(25,)
(26,"")
(27,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,charData)
(29,inputBuffer)
(30,inputBuffer)
(31,stdin)
(32,data = -1)
(33,data)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,data)
(36,char)
(37,if(globalTrue)
(38,data = atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^