-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,40,42,44,47,49,51,53,57,59,60,62,63,68,70,71,72,76,77,82,84,86,88,93,95,96,100,102
-----computeFrom-----
12,13
12,14
23,24
23,25
61,62
61,63
65,66
65,67
69,70
69,71
74,75
74,76
90,91
90,92
-----guardedBy-----
76,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(52,44,0)
(31,39,0)
(40,18,0)
(39,33,0)
(39,50,0)
(29,20,0)
(17,21,0)
(11,33,0)
(36,20,0)
(15,32,0)
(22,15,0)
(0,17,0)
(17,36,0)
(12,18,0)
(13,25,0)
(40,23,0)
(8,25,0)
(42,33,0)
(5,15,0)
(24,20,0)
(28,21,0)
(2,23,0)
(39,36,0)
(45,20,0)
(1,36,0)
(47,25,0)
(38,32,0)
(18,15,0)
(35,50,0)
(17,33,0)
(30,40,0)
(6,1,0)
(34,28,0)
(25,13,0)
(7,10,0)
(39,28,0)
(51,15,0)
(50,44,0)
(17,50,0)
(43,36,0)
(33,15,0)
(10,15,0)
(46,1,0)
(1,50,0)
(10,33,0)
(37,39,0)
(50,32,0)
(48,20,0)
(3,36,0)
(26,13,0)
(44,50,0)
(23,40,0)
(27,17,0)
(49,16,0)
(53,17,0)
(16,20,0)
(36,43,0)
(13,15,0)
(14,32,0)
(4,13,0)
(19,23,0)
(44,52,1)
(9,10,1)
(12,40,1)
(17,36,1)
(39,31,1)
(10,7,1)
(1,46,1)
(2,30,1)
(17,50,1)
(27,53,1)
(39,50,1)
(11,29,1)
(50,44,1)
(45,16,1)
(10,33,1)
(37,17,1)
(53,0,1)
(43,3,1)
(46,6,1)
(3,41,1)
(28,34,1)
(17,27,1)
(7,28,1)
(17,33,1)
(6,18,1)
(8,47,1)
(23,19,1)
(39,36,1)
(34,39,1)
(18,12,1)
(39,33,1)
(4,26,1)
(42,11,1)
(47,4,1)
(16,49,1)
(13,25,1)
(33,42,1)
(49,41,1)
(1,36,1)
(41,50,1)
(11,45,1)
(52,35,1)
(0,1,1)
(31,37,1)
(19,2,1)
(7,1,1)
(36,43,1)
(26,33,1)
(40,23,1)
(1,50,1)
(30,13,1)
(29,36,1)
(25,8,1)
(36,41,2)
(16,41,2)
(39,1,2)
(17,33,2)
(29,41,2)
(27,1,2)
(10,33,2)
(50,44,2)
(0,1,2)
(1,50,2)
(39,33,2)
(37,1,2)
(1,36,2)
(17,50,2)
(3,41,2)
(53,1,2)
(39,36,2)
(17,36,2)
(17,1,2)
(49,41,2)
(13,25,2)
(34,1,2)
(28,1,2)
(40,23,2)
(31,1,2)
(36,43,2)
(45,41,2)
(43,41,2)
(39,50,2)
-----------------------------------
(0,dest)
(1,data < 100)
(2,100)
(3,data)
(4,\\\'A\\\')
(5,dest)
(6,data)
(7,dest)
(8,1)
(9,RET)
(10,printLine(dest)
(11,dest)
(12,\\\'\\\\0\\\')
(13,memset(source, \\\'A\\\', 100-1)
(14,switch(6)
(15,)
(16,printLine("Benign, fixed string")
(17,memcpy(dest, source, data)
(18,source[100-1] = \\\'\\\\0\\\')
(19,1)
(20,)
(21,)
(22,if (data < 100)
(23,100-1)
(24,default:)
(25,100-1)
(26,source)
(27,data)
(28,dest[data] = \\\'\\\\0\\\')
(29,break;)
(30,source)
(31,data)
(32,)
(33,dest[100] = "")
(34,\\\'\\\\0\\\')
(35,data)
(36,data = RAND32()
(37,dest)
(38,data)
(39,dest[data])
(40,source[100-1])
(41,6)
(42,"")
(43,RAND32()
(44,-1)
(45,break;)
(46,100)
(47,100)
(48,case 6:)
(49,"Benign, fixed string")
(50,data = -1)
(51,source)
(52,1)
(53,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^