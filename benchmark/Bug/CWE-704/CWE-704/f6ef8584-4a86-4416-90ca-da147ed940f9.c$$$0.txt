-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
44,46
47,48
48,49
48,50
49,50
49,51
50,51
52,53
52,54
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,27,30,32,34,36,40,42,43,45,46,51,53,54,55,59,60,65,67,69,71,76,78,79,83,85
-----computeFrom-----
44,45
44,46
48,49
48,50
52,53
52,54
57,58
57,59
73,74
73,75
-----guardedBy-----
59,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_strncpy_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_strncpy_63b_badSink(short * dataPtr)
CWE194_Unexpected_Sign_Extension__rand_strncpy_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(28,21,0)
(34,22,0)
(42,15,0)
(23,11,0)
(39,21,0)
(2,40,0)
(16,38,0)
(26,37,0)
(0,22,0)
(40,24,0)
(7,24,0)
(1,11,0)
(4,22,0)
(41,11,0)
(22,38,0)
(32,40,0)
(27,11,0)
(24,36,0)
(37,11,0)
(12,11,0)
(9,41,0)
(30,36,0)
(21,38,0)
(18,42,0)
(13,41,0)
(17,41,0)
(11,31,0)
(33,26,0)
(22,24,0)
(35,26,0)
(19,12,0)
(24,31,0)
(38,11,0)
(36,24,0)
(29,37,0)
(6,38,0)
(20,33,0)
(22,15,0)
(21,24,0)
(41,9,0)
(8,9,0)
(21,42,0)
(14,9,0)
(12,38,0)
(10,31,0)
(26,33,0)
(36,5,0)
(3,33,0)
(36,30,1)
(21,38,1)
(38,6,1)
(32,2,1)
(30,7,1)
(16,24,1)
(4,34,1)
(18,21,1)
(17,13,1)
(35,41,1)
(21,24,1)
(6,16,1)
(41,9,1)
(40,32,1)
(42,18,1)
(21,28,1)
(40,24,1)
(14,8,1)
(37,29,1)
(8,17,1)
(33,20,1)
(39,22,1)
(0,40,1)
(22,4,1)
(24,36,1)
(9,14,1)
(2,37,1)
(19,40,1)
(22,38,1)
(13,38,1)
(36,5,1)
(20,3,1)
(22,24,1)
(19,42,1)
(29,26,1)
(25,12,1)
(3,35,1)
(28,39,1)
(12,38,1)
(34,0,1)
(12,19,1)
(26,33,1)
(12,38,2)
(24,36,2)
(34,40,2)
(21,24,2)
(21,40,2)
(4,40,2)
(39,40,2)
(42,40,2)
(22,24,2)
(26,33,2)
(21,38,2)
(28,40,2)
(40,24,2)
(22,40,2)
(0,40,2)
(41,9,2)
(18,40,2)
(36,5,2)
(22,38,2)
-----------------------------------
(0,dest)
(1,source)
(2,data)
(3,100)
(4,data)
(5,short * dataPtr)
(6,"")
(7,data)
(8,100)
(9,100-1)
(10,data)
(11,)
(12,printLine(dest)
(13,source)
(14,1)
(15,)
(16,dest)
(17,\\\'A\\\')
(18,\\\'\\\\0\\\')
(19,dest)
(20,1)
(21,dest[data])
(22,strncpy(dest, source, data)
(23,if (data < 100)
(24,data = *dataPtr)
(25,RET)
(26,source[100-1])
(27,dest)
(28,data)
(29,\\\'\\\\0\\\')
(30,dataPtr)
(31,)
(32,100)
(33,100-1)
(34,source)
(35,source)
(36,*dataPtr)
(37,source[100-1] = \\\'\\\\0\\\')
(38,dest[100] = "")
(39,dest)
(40,data < 100)
(41,memset(source, \\\'A\\\', 100-1)
(42,dest[data] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^