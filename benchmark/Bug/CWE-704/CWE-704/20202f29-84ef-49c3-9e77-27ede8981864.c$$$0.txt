-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
44,48
44,49
44,50
45,46
46,47
46,48
48,49
48,50
50,51
52,53
53,54
53,55
55,56
55,57
55,58
57,58
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
68,69
68,70
71,72
72,73
72,74
73,74
73,75
74,75
76,77
76,78
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
87,88
87,89
87,90
87,91
88,89
90,91
92,93
94,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,49,51,54,56,58,60,64,66,67,69,70,75,77,78,79,83,84,89,91,93,95,100,102,103,107,109
-----computeFrom-----
12,13
12,14
17,18
17,19
68,69
68,70
72,73
72,74
76,77
76,78
81,82
81,83
97,98
97,99
-----guardedBy-----
83,102
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_31_bad(){    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_31_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_31_bad
{    short data;    /* Initialize data */    data = 0;    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(33,44,0)
(11,42,0)
(31,48,0)
(28,53,0)
(5,28,0)
(19,10,0)
(43,7,0)
(37,27,0)
(12,54,0)
(39,27,0)
(20,22,0)
(42,11,0)
(48,40,0)
(36,23,0)
(16,33,0)
(4,28,0)
(0,40,0)
(15,48,0)
(30,31,0)
(7,44,0)
(2,10,0)
(49,23,0)
(14,53,0)
(24,23,0)
(54,31,0)
(51,19,0)
(22,31,0)
(8,2,0)
(26,22,0)
(50,19,0)
(47,48,0)
(25,52,0)
(53,28,0)
(6,7,0)
(1,38,0)
(38,41,0)
(48,19,0)
(44,27,0)
(7,31,0)
(13,31,0)
(3,7,0)
(18,54,0)
(32,44,0)
(52,27,0)
(28,27,0)
(42,29,0)
(54,38,0)
(17,27,0)
(31,19,0)
(7,41,0)
(45,10,0)
(9,49,0)
(42,40,0)
(29,42,0)
(54,44,0)
(46,44,0)
(27,19,0)
(34,2,0)
(49,52,0)
(23,49,0)
(33,27,0)
(40,10,0)
(40,42,0)
(21,53,0)
(38,1,1)
(7,44,1)
(0,2,1)
(52,25,1)
(26,20,1)
(42,29,1)
(43,3,1)
(7,31,1)
(16,38,1)
(11,0,1)
(3,6,1)
(25,49,1)
(48,40,1)
(54,31,1)
(7,43,1)
(30,13,1)
(23,24,1)
(42,11,1)
(31,30,1)
(12,18,1)
(22,31,1)
(33,44,1)
(53,21,1)
(13,48,1)
(1,54,1)
(47,15,1)
(15,40,1)
(20,52,1)
(8,34,1)
(35,33,1)
(54,12,1)
(54,44,1)
(24,36,1)
(49,23,1)
(22,26,1)
(6,22,1)
(36,9,1)
(33,16,1)
(28,53,1)
(18,7,1)
(16,22,1)
(2,8,1)
(31,48,1)
(46,32,1)
(14,4,1)
(48,47,1)
(5,44,1)
(4,5,1)
(40,42,1)
(21,14,1)
(9,28,1)
(44,46,1)
(32,31,1)
(33,44,2)
(49,23,2)
(42,29,2)
(7,31,2)
(42,11,2)
(3,22,2)
(18,22,2)
(54,44,2)
(22,31,2)
(7,44,2)
(48,40,2)
(31,48,2)
(28,53,2)
(43,22,2)
(1,22,2)
(54,31,2)
(54,22,2)
(40,42,2)
(6,22,2)
(38,22,2)
(7,22,2)
(12,22,2)
-----------------------------------
(0,data)
(1,\\\'\\\\0\\\')
(2,data = 0)
(3,source)
(4,\\\'A\\\')
(5,source)
(6,dest)
(7,memmove(dest, source, data)
(8,0)
(9,source)
(10,)
(11,RAND32()
(12,data)
(13,data)
(14,100)
(15,dataCopy)
(16,dest)
(17,dest)
(18,dest)
(19,)
(20,data)
(21,1)
(22,data < 100)
(23,100-1)
(24,1)
(25,\\\'\\\\0\\\')
(26,100)
(27,)
(28,memset(source, \\\'A\\\', 100-1)
(29,short)
(30,dataCopy)
(31,data = dataCopy)
(32,dest)
(33,printLine(dest)
(34,data)
(35,RET)
(36,100)
(37,source)
(38,dest[data] = \\\'\\\\0\\\')
(39,if (data < 100)
(40,data = (short)
(41,)
(42,(short)
(43,data)
(44,dest[100] = "")
(45,data)
(46,"")
(47,data)
(48,dataCopy = data)
(49,source[100-1])
(50,dataCopy)
(51,data)
(52,source[100-1] = \\\'\\\\0\\\')
(53,100-1)
(54,dest[data])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^