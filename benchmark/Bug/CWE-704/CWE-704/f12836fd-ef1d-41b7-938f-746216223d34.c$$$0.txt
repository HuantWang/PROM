-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
96,98
97,98
97,99
98,99
101,102
101,103
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,65,67,70,72,74,76,80,82,83,85,86,91,93,94,95,99,100,105,107,109,111,116,118,119,123,125
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
84,85
84,86
88,89
88,90
92,93
92,94
97,98
97,99
113,114
113,115
-----guardedBy-----
33,53
99,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_01_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_01_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_01_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,37,0)
(59,22,0)
(57,26,0)
(24,61,0)
(18,37,0)
(27,15,0)
(49,47,0)
(61,28,0)
(33,38,0)
(58,15,0)
(5,51,0)
(0,47,0)
(26,57,0)
(38,30,0)
(29,39,0)
(39,28,0)
(50,32,0)
(23,47,0)
(25,30,0)
(53,9,0)
(3,11,0)
(37,61,0)
(13,49,0)
(49,34,0)
(52,46,0)
(57,6,0)
(12,5,0)
(10,42,0)
(9,32,0)
(62,46,0)
(45,34,0)
(6,54,0)
(46,28,0)
(31,54,0)
(54,3,0)
(60,22,0)
(30,57,0)
(21,23,0)
(40,6,0)
(37,22,0)
(57,30,0)
(47,11,0)
(55,23,0)
(17,28,0)
(44,32,0)
(32,9,0)
(48,3,0)
(49,42,0)
(32,54,0)
(46,15,0)
(1,54,0)
(15,46,0)
(2,11,0)
(41,3,0)
(14,28,0)
(42,28,0)
(23,30,0)
(8,49,0)
(16,49,0)
(35,42,0)
(28,11,0)
(36,38,0)
(23,42,0)
(7,45,0)
(39,42,0)
(43,28,0)
(6,57,0)
(38,47,0)
(23,45,0)
(30,20,0)
(56,32,0)
(49,30,0)
(19,47,0)
(38,33,1)
(57,26,1)
(12,9,1)
(23,42,1)
(15,27,1)
(13,38,1)
(59,18,1)
(8,13,1)
(49,42,1)
(44,54,1)
(36,61,1)
(35,30,1)
(6,40,1)
(60,59,1)
(39,42,1)
(49,16,1)
(40,25,1)
(0,19,1)
(27,58,1)
(57,6,1)
(49,47,1)
(30,57,1)
(24,37,1)
(56,50,1)
(55,21,1)
(5,12,1)
(61,24,1)
(6,54,1)
(37,22,1)
(52,62,1)
(53,32,1)
(16,8,1)
(9,53,1)
(31,47,1)
(35,5,1)
(29,45,1)
(21,49,1)
(32,56,1)
(46,15,1)
(25,9,1)
(42,10,1)
(33,36,1)
(29,38,1)
(54,1,1)
(32,54,1)
(39,29,1)
(38,30,1)
(18,46,1)
(45,7,1)
(23,47,1)
(49,30,1)
(58,52,1)
(50,44,1)
(4,39,1)
(10,35,1)
(1,31,1)
(22,60,1)
(38,47,1)
(47,0,1)
(7,23,1)
(23,55,1)
(9,32,1)
(23,30,1)
(62,42,1)
(40,9,2)
(32,54,2)
(57,6,2)
(38,30,2)
(8,38,2)
(57,9,2)
(55,38,2)
(23,47,2)
(7,38,2)
(13,38,2)
(49,47,2)
(30,57,2)
(39,42,2)
(6,54,2)
(12,9,2)
(57,26,2)
(23,38,2)
(16,38,2)
(9,32,2)
(49,30,2)
(25,9,2)
(46,15,2)
(23,30,2)
(6,9,2)
(49,38,2)
(49,42,2)
(45,38,2)
(23,42,2)
(21,38,2)
(5,9,2)
(38,47,2)
(37,22,2)
(30,9,2)
-----------------------------------
(0,0)
(1,"")
(2,data)
(3,)
(4,RET)
(5,printLine("fgets()
(6,atoi(inputBuffer)
(7,\\\'\\\\0\\\')
(8,source)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,"")
(11,)
(12,"fgets()
(13,dest)
(14,source)
(15,100-1)
(16,data)
(17,dest)
(18,source)
(19,data)
(20,)
(21,dest)
(22,100-1)
(23,dest[data])
(24,\\\'\\\\0\\\')
(25,data)
(26,short)
(27,1)
(28,)
(29,dest)
(30,data = (short)
(31,inputBuffer)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,100)
(34,)
(35,dest)
(36,data)
(37,source[100-1])
(38,data < 100)
(39,printLine(dest)
(40,inputBuffer)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,dest[100] = "")
(43,if (data < 100)
(44,inputBuffer)
(45,dest[data] = \\\'\\\\0\\\')
(46,memset(source, \\\'A\\\', 100-1)
(47,data = 0)
(48,inputBuffer)
(49,strncpy(dest, source, data)
(50,CHAR_ARRAY_SIZE)
(51,)
(52,\\\'A\\\')
(53,NULL)
(54,inputBuffer[CHAR_ARRAY_SIZE] = "")
(55,data)
(56,stdin)
(57,(short)
(58,100)
(59,100)
(60,1)
(61,source[100-1] = \\\'\\\\0\\\')
(62,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^