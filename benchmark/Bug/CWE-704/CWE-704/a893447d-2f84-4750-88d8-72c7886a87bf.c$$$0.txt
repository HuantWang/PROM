-----label-----
1
-----code-----
void CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad()
{
    switch(6)
    {
    case 6:
    {
        unsigned intUnsigned;
        int intSigned;
        intUnsigned = rand();
        if (rand() % 2 == 0)
        {
            intUnsigned = UINT_MAX - intUnsigned;
        }
        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */
        intSigned = intUnsigned;
        printIntLine(intSigned);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
31,33
32,33
33,34
37,38
38,39
39,40
39,41
40,41
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,7,10,14,16,19,21,25,28,34,35,36,41,44,46,50,52,56,58,59,60,64,65,66
-----computeFrom-----
23,24
23,25
30,31
30,32
31,32
31,33
39,40
39,41
42,43
42,44
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad(){    switch(6)    {    case 6:    {        unsigned intUnsigned;        int intSigned;        intUnsigned = rand();        if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */        intSigned = intUnsigned;        printIntLine(intSigned);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad()
CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad
{    switch(6)    {    case 6:    {        unsigned intUnsigned;        int intSigned;        intUnsigned = rand();        if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */        intSigned = intUnsigned;        printIntLine(intSigned);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        unsigned intUnsigned;        int intSigned;        intUnsigned = rand();        if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */        intSigned = intUnsigned;        printIntLine(intSigned);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        unsigned intUnsigned;        int intSigned;        intUnsigned = rand();        if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */        intSigned = intUnsigned;        printIntLine(intSigned);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        unsigned intUnsigned;        int intSigned;        intUnsigned = rand();        if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }        /* FLAW: intUnsigned could be very large, in which case intSigned will be negative */        intSigned = intUnsigned;        printIntLine(intSigned);    }
unsigned intUnsigned;
unsigned intUnsigned;
unsigned
intUnsigned
intUnsigned
int intSigned;
int intSigned;
int
intSigned
intSigned
intUnsigned = rand();
intUnsigned = rand()
intUnsigned
intUnsigned
rand()
rand
rand
if (rand() % 2 == 0)        {            intUnsigned = UINT_MAX - intUnsigned;        }
rand() % 2 == 0
rand() % 2
rand()
rand
rand
2
0
{            intUnsigned = UINT_MAX - intUnsigned;        }
intUnsigned = UINT_MAX - intUnsigned;
intUnsigned = UINT_MAX - intUnsigned
intUnsigned
intUnsigned
UINT_MAX - intUnsigned
UINT_MAX
UINT_MAX
intUnsigned
intUnsigned
intSigned = intUnsigned;
intSigned = intUnsigned
intSigned
intSigned
intUnsigned
intUnsigned
printIntLine(intSigned);
printIntLine(intSigned)
printIntLine
printIntLine
intSigned
intSigned
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,5,0)
(0,15,0)
(3,22,0)
(23,12,0)
(1,11,0)
(22,28,0)
(9,30,0)
(22,19,0)
(6,22,0)
(19,4,0)
(22,11,0)
(18,28,0)
(17,28,0)
(28,12,0)
(33,14,0)
(25,19,0)
(2,12,0)
(8,29,0)
(27,12,0)
(30,0,0)
(14,19,0)
(0,30,0)
(31,12,0)
(5,11,0)
(15,0,0)
(19,14,0)
(21,22,0)
(6,28,0)
(10,0,0)
(11,28,0)
(7,28,0)
(29,12,0)
(20,6,0)
(14,11,0)
(26,14,0)
(24,32,0)
(30,0,1)
(15,11,1)
(22,21,1)
(20,22,1)
(6,20,1)
(25,30,1)
(16,23,1)
(0,15,1)
(0,10,1)
(1,13,1)
(14,11,1)
(3,19,1)
(22,11,1)
(11,5,1)
(29,8,1)
(2,6,1)
(22,19,1)
(33,26,1)
(23,29,1)
(3,30,1)
(8,13,1)
(6,22,1)
(10,15,1)
(14,33,1)
(5,1,1)
(19,14,1)
(16,2,1)
(9,0,1)
(30,9,1)
(26,25,1)
(21,3,1)
(25,30,2)
(5,13,2)
(19,30,2)
(15,13,2)
(11,5,2)
(26,30,2)
(30,0,2)
(22,19,2)
(30,13,2)
(2,13,2)
(3,13,2)
(23,13,2)
(33,30,2)
(6,13,2)
(0,15,2)
(6,22,2)
(9,13,2)
(10,13,2)
(21,13,2)
(22,13,2)
(8,13,2)
(1,13,2)
(29,13,2)
(22,11,2)
(20,13,2)
(19,14,2)
(14,11,2)
(11,13,2)
(0,13,2)
(14,30,2)
-----------------------------------
(0,rand()
(1,intUnsigned)
(2,break;)
(3,intSigned)
(4,)
(5,rand()
(6,printIntLine(intSigned)
(7,intUnsigned)
(8,"Benign, fixed string")
(9,0)
(10,2)
(11,intUnsigned = rand()
(12,)
(13,6)
(14,UINT_MAX - intUnsigned)
(15,rand()
(16,RET)
(17,if (rand()
(18,intSigned)
(19,intUnsigned = UINT_MAX - intUnsigned)
(20,intSigned)
(21,intUnsigned)
(22,intSigned = intUnsigned)
(23,break;)
(24,switch(6)
(25,intUnsigned)
(26,UINT_MAX)
(27,default:)
(28,)
(29,printLine("Benign, fixed string")
(30,rand()
(31,case 6:)
(32,)
(33,intUnsigned)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^