-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_05_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
64,67
64,68
64,69
64,70
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,69,71,74,76,78,80,84,86,87,89,90,95,97,98,99,103,104,109,111,113,115,120,122,123,127,129
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
88,89
88,90
92,93
92,94
96,97
96,98
101,102
101,103
117,118
117,119
-----guardedBy-----
37,57
103,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_05_bad(){    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_05_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_05_bad
{    short data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,28,0)
(44,33,0)
(51,42,0)
(26,35,0)
(1,34,0)
(38,17,0)
(61,40,0)
(13,17,0)
(61,44,0)
(22,64,0)
(40,61,0)
(57,43,0)
(29,36,0)
(60,30,0)
(30,35,0)
(18,39,0)
(62,53,0)
(15,64,0)
(35,30,0)
(21,43,0)
(58,30,0)
(48,28,0)
(9,57,0)
(49,8,0)
(3,44,0)
(50,8,0)
(56,9,0)
(17,36,0)
(64,39,0)
(32,33,0)
(63,21,0)
(65,8,0)
(8,33,0)
(52,55,0)
(36,21,0)
(24,21,0)
(7,9,0)
(61,55,0)
(14,17,0)
(47,21,0)
(8,49,0)
(55,61,0)
(6,36,0)
(20,34,0)
(34,55,0)
(17,57,0)
(44,61,0)
(17,37,0)
(33,62,0)
(0,8,0)
(11,21,0)
(9,55,0)
(2,43,0)
(9,36,0)
(27,51,0)
(5,57,0)
(12,62,0)
(47,36,0)
(39,11,0)
(28,37,0)
(23,62,0)
(19,43,0)
(16,57,0)
(34,57,0)
(54,49,0)
(45,47,0)
(55,59,0)
(17,55,0)
(46,11,0)
(35,21,0)
(41,33,0)
(4,21,0)
(31,35,0)
(39,64,0)
(41,25,1)
(56,17,1)
(13,38,1)
(46,39,1)
(64,22,1)
(16,5,1)
(8,0,1)
(30,58,1)
(33,32,1)
(60,26,1)
(54,8,1)
(8,33,1)
(48,9,1)
(27,49,1)
(28,48,1)
(1,11,1)
(58,60,1)
(29,51,1)
(55,61,1)
(38,14,1)
(36,6,1)
(10,47,1)
(14,34,1)
(6,29,1)
(52,49,1)
(61,40,1)
(3,52,1)
(7,56,1)
(57,16,1)
(15,18,1)
(47,36,1)
(17,55,1)
(61,44,1)
(0,50,1)
(47,45,1)
(9,7,1)
(9,55,1)
(17,13,1)
(44,3,1)
(34,20,1)
(34,55,1)
(9,36,1)
(9,57,1)
(22,15,1)
(17,57,1)
(34,57,1)
(17,36,1)
(39,64,1)
(44,33,1)
(65,33,1)
(31,36,1)
(50,65,1)
(49,8,1)
(26,31,1)
(29,55,1)
(29,25,1)
(35,30,1)
(25,57,1)
(20,1,1)
(45,34,1)
(51,27,1)
(45,28,1)
(32,41,1)
(49,54,1)
(18,35,1)
(11,46,1)
(9,55,2)
(8,25,2)
(17,55,2)
(61,40,2)
(9,34,2)
(32,25,2)
(55,49,2)
(61,44,2)
(54,25,2)
(44,49,2)
(50,25,2)
(44,33,2)
(17,36,2)
(17,34,2)
(34,55,2)
(13,34,2)
(17,57,2)
(9,57,2)
(35,30,2)
(0,25,2)
(34,57,2)
(51,49,2)
(55,61,2)
(47,36,2)
(49,25,2)
(33,25,2)
(39,64,2)
(28,34,2)
(49,8,2)
(9,36,2)
(65,25,2)
(61,49,2)
(27,49,2)
(48,34,2)
(7,34,2)
(41,25,2)
(52,49,2)
(3,49,2)
(14,34,2)
(8,33,2)
(38,34,2)
(56,34,2)
-----------------------------------
(0,stdin)
(1,data)
(2,data)
(3,inputBuffer)
(4,dest)
(5,data)
(6,"")
(7,data)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,dest[data])
(10,RET)
(11,source[100-1] = \\\'\\\\0\\\')
(12,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,data)
(14,dest)
(15,100)
(16,0)
(17,strncpy(dest, source, data)
(18,source)
(19,if(staticTrue)
(20,100)
(21,)
(22,1)
(23,inputBuffer)
(24,if (data < 100)
(25,staticTrue)
(26,\\\'A\\\')
(27,"fgets()
(28,dest[data] = \\\'\\\\0\\\')
(29,dest)
(30,100-1)
(31,source)
(32,"")
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,data < 100)
(35,memset(source, \\\'A\\\', 100-1)
(36,dest[100] = "")
(37,)
(38,source)
(39,source[100-1])
(40,short)
(41,inputBuffer)
(42,)
(43,)
(44,atoi(inputBuffer)
(45,dest)
(46,\\\'\\\\0\\\')
(47,printLine(dest)
(48,\\\'\\\\0\\\')
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,CHAR_ARRAY_SIZE)
(51,printLine("fgets()
(52,data)
(53,)
(54,NULL)
(55,data = (short)
(56,dest)
(57,data = 0)
(58,1)
(59,)
(60,100)
(61,(short)
(62,)
(63,source)
(64,100-1)
(65,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^