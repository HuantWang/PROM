-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,18,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
21,22
21,23
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_04_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(42,33,0)
(31,2,0)
(36,23,0)
(41,31,0)
(7,20,0)
(23,20,0)
(13,10,0)
(20,33,0)
(35,27,0)
(50,32,0)
(27,2,0)
(9,18,0)
(12,51,0)
(42,2,0)
(53,41,0)
(18,33,0)
(5,20,0)
(20,2,0)
(0,33,0)
(51,22,0)
(40,51,0)
(41,13,0)
(34,14,0)
(30,22,0)
(11,2,0)
(12,2,0)
(2,12,0)
(46,13,0)
(47,27,0)
(23,13,0)
(51,12,0)
(49,44,0)
(12,37,0)
(43,33,0)
(13,32,0)
(29,44,0)
(45,33,0)
(3,45,0)
(34,28,0)
(16,42,0)
(45,2,0)
(1,13,0)
(48,44,0)
(20,23,0)
(39,1,0)
(26,1,0)
(32,13,0)
(31,18,0)
(6,23,0)
(15,31,0)
(1,22,0)
(23,22,0)
(21,28,0)
(31,41,0)
(41,22,0)
(38,41,0)
(2,33,0)
(51,13,0)
(24,22,0)
(37,12,0)
(28,34,0)
(22,44,0)
(1,13,1)
(16,18,1)
(5,7,1)
(24,30,1)
(18,9,1)
(27,47,1)
(20,23,1)
(23,6,1)
(41,13,1)
(41,22,1)
(13,32,1)
(23,22,1)
(11,1,1)
(19,1,1)
(12,51,1)
(41,53,1)
(31,41,1)
(31,2,1)
(42,16,1)
(3,42,1)
(46,4,1)
(47,35,1)
(51,13,1)
(51,40,1)
(7,27,1)
(36,5,1)
(32,50,1)
(50,46,1)
(26,4,1)
(2,12,1)
(45,3,1)
(27,2,1)
(39,26,1)
(6,36,1)
(35,2,1)
(28,21,1)
(15,20,1)
(1,39,1)
(38,15,1)
(34,28,1)
(1,22,1)
(4,22,1)
(12,37,1)
(53,38,1)
(23,13,1)
(51,22,1)
(42,2,1)
(22,24,1)
(7,34,1)
(45,2,1)
(19,45,1)
(26,13,1)
(21,27,1)
(9,31,1)
(40,11,1)
(20,2,1)
(11,1,2)
(9,1,2)
(27,1,2)
(31,1,2)
(2,12,2)
(27,2,2)
(1,13,2)
(16,1,2)
(20,1,2)
(5,1,2)
(23,13,2)
(20,2,2)
(7,1,2)
(32,4,2)
(51,1,2)
(50,4,2)
(12,51,2)
(3,1,2)
(45,1,2)
(12,1,2)
(41,22,2)
(42,2,2)
(42,1,2)
(15,1,2)
(46,4,2)
(34,27,2)
(23,22,2)
(38,1,2)
(41,1,2)
(23,1,2)
(18,1,2)
(13,32,2)
(2,1,2)
(28,27,2)
(12,37,2)
(36,1,2)
(47,1,2)
(41,13,2)
(31,41,2)
(53,1,2)
(31,2,2)
(51,13,2)
(51,22,2)
(35,1,2)
(45,2,2)
(40,1,2)
(6,1,2)
(1,22,2)
(20,23,2)
(13,4,2)
(21,27,2)
(34,28,2)
-----------------------------------
(0,dataBuffer)
(1,data < 100)
(2,* dataBuffer = (char *)
(3,dataBuffer)
(4,STATIC_CONST_TRUE)
(5,'A')
(6,1)
(7,dataBuffer)
(8,\'A\')
(9,\'\\\\0\')
(10,)
(11,dataBuffer)
(12,(char *)
(13,data = -1)
(14,)
(15,dataBuffer)
(16,dataBuffer)
(17,'\\\\0')
(18,dataBuffer[data-1] = '\\\\0')
(19,RET)
(20,memset(dataBuffer, 'A', data-1)
(21,1)
(22,data = 0)
(23,data-1)
(24,0)
(25,memset(dataBuffer, \'A\', data-1)
(26,data)
(27,dataBuffer == NULL)
(28,-1)
(29,data)
(30,data)
(31,dataBuffer[data-1])
(32,-1)
(33,)
(34,exit(-1)
(35,dataBuffer)
(36,data)
(37,char *)
(38,data)
(39,100)
(40,data)
(41,data-1)
(42,printLine(dataBuffer)
(43,if (dataBuffer == NULL)
(44,)
(45,free(dataBuffer)
(46,data)
(47,NULL)
(48,if (data < 100)
(49,if(STATIC_CONST_TRUE)
(50,1)
(51,malloc(data)
(52,dataBuffer[data-1] = \'\\\\0\')
(53,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^