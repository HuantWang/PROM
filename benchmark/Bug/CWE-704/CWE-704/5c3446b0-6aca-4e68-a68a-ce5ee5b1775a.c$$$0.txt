-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_09_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_09_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_09_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_09_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(21,19,0)
(17,5,0)
(35,23,0)
(31,22,0)
(18,49,0)
(9,21,0)
(48,1,0)
(49,1,0)
(11,48,0)
(48,15,0)
(41,12,0)
(15,37,0)
(28,12,0)
(1,46,0)
(44,28,0)
(7,21,0)
(27,12,0)
(20,16,0)
(4,23,0)
(35,22,0)
(39,5,0)
(5,39,0)
(2,19,0)
(8,46,0)
(23,22,0)
(29,35,0)
(33,40,0)
(32,23,0)
(39,34,0)
(26,40,0)
(19,21,0)
(15,23,0)
(0,1,0)
(28,1,0)
(30,15,0)
(12,25,0)
(24,19,0)
(37,22,0)
(19,1,0)
(45,40,0)
(5,1,0)
(15,48,0)
(38,13,0)
(4,22,0)
(39,23,0)
(34,39,0)
(3,22,0)
(46,1,0)
(50,23,0)
(21,22,0)
(42,49,0)
(12,28,0)
(38,16,0)
(10,4,0)
(47,50,0)
(16,38,0)
(23,39,0)
(6,50,0)
(1,40,0)
(43,48,0)
(21,23,0)
(36,37,0)
(20,50,1)
(15,23,1)
(37,36,1)
(47,6,1)
(9,7,1)
(10,37,1)
(5,17,1)
(39,34,1)
(4,10,1)
(41,27,1)
(46,8,1)
(14,49,1)
(21,19,1)
(50,23,1)
(49,1,1)
(28,1,1)
(19,1,1)
(21,23,1)
(28,44,1)
(17,32,1)
(30,21,1)
(38,16,1)
(43,11,1)
(39,5,1)
(32,49,1)
(16,20,1)
(7,38,1)
(6,23,1)
(19,24,1)
(12,28,1)
(51,1,1)
(15,48,1)
(36,15,1)
(24,2,1)
(14,35,1)
(50,47,1)
(2,9,1)
(8,0,1)
(23,39,1)
(11,30,1)
(48,1,1)
(1,46,1)
(44,41,1)
(42,18,1)
(35,29,1)
(35,23,1)
(4,23,1)
(49,42,1)
(29,4,1)
(27,51,1)
(18,12,1)
(7,50,1)
(5,1,1)
(48,43,1)
(18,51,1)
(49,1,2)
(15,23,2)
(9,49,2)
(12,28,2)
(12,51,2)
(10,49,2)
(39,5,2)
(27,51,2)
(47,49,2)
(21,49,2)
(43,49,2)
(11,49,2)
(36,49,2)
(21,19,2)
(1,46,2)
(38,16,2)
(4,49,2)
(41,51,2)
(48,1,2)
(48,49,2)
(38,50,2)
(39,34,2)
(17,49,2)
(35,49,2)
(35,23,2)
(20,50,2)
(15,49,2)
(5,1,2)
(7,49,2)
(21,23,2)
(19,1,2)
(2,49,2)
(30,49,2)
(50,23,2)
(44,51,2)
(28,1,2)
(15,48,2)
(23,39,2)
(37,49,2)
(32,49,2)
(28,51,2)
(6,49,2)
(5,49,2)
(29,49,2)
(4,23,2)
(39,49,2)
(24,49,2)
(16,50,2)
(19,49,2)
(50,49,2)
(23,49,2)
-----------------------------------
(0,data)
(1,data = -1)
(2,data)
(3,dataBuffer)
(4,printLine(dataBuffer)
(5,malloc(data)
(6,dataBuffer)
(7,dataBuffer)
(8,1)
(9,\\\'A\\\')
(10,dataBuffer)
(11,data)
(12,fscanf(stdin, "%d", &data)
(13,)
(14,RET)
(15,dataBuffer[data-1])
(16,-1)
(17,data)
(18,data)
(19,data-1)
(20,1)
(21,memset(dataBuffer, \\\'A\\\', data-1)
(22,)
(23,* dataBuffer = (char *)
(24,1)
(25,)
(26,data)
(27,stdin)
(28,&data)
(29,dataBuffer)
(30,dataBuffer)
(31,if (dataBuffer == NULL)
(32,dataBuffer)
(33,if(GLOBAL_CONST_TRUE)
(34,char *)
(35,free(dataBuffer)
(36,\\\'\\\\0\\\')
(37,dataBuffer[data-1] = \\\'\\\\0\\\')
(38,exit(-1)
(39,(char *)
(40,)
(41,"%d")
(42,100)
(43,1)
(44,data)
(45,if (data < 100)
(46,-1)
(47,NULL)
(48,data-1)
(49,data < 100)
(50,dataBuffer == NULL)
(51,GLOBAL_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^