-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(18,9,0)
(35,40,0)
(24,22,0)
(30,5,0)
(2,33,0)
(34,39,0)
(8,5,0)
(7,6,0)
(9,4,0)
(49,11,0)
(42,46,0)
(3,46,0)
(29,35,0)
(31,11,0)
(14,19,0)
(6,17,0)
(38,4,0)
(48,17,0)
(13,3,0)
(26,48,0)
(5,40,0)
(39,40,0)
(4,38,0)
(6,46,0)
(16,17,0)
(12,48,0)
(9,46,0)
(0,42,0)
(49,51,0)
(5,36,0)
(40,54,0)
(48,23,0)
(41,33,0)
(35,54,0)
(48,12,0)
(36,46,0)
(5,54,0)
(10,36,0)
(20,19,0)
(50,42,0)
(37,19,0)
(28,46,0)
(4,9,0)
(1,22,0)
(46,6,0)
(17,48,0)
(22,40,0)
(52,40,0)
(40,4,0)
(36,5,0)
(39,54,0)
(42,41,0)
(4,40,0)
(33,54,0)
(27,54,0)
(21,36,0)
(11,49,0)
(46,19,0)
(41,40,0)
(17,19,0)
(43,54,0)
(44,3,0)
(41,42,0)
(45,41,0)
(22,24,1)
(48,23,1)
(44,46,1)
(48,26,1)
(5,40,1)
(0,45,1)
(3,46,1)
(42,46,1)
(41,40,1)
(35,40,1)
(2,41,1)
(39,34,1)
(10,8,1)
(4,38,1)
(39,40,1)
(11,31,1)
(8,30,1)
(36,21,1)
(45,5,1)
(30,22,1)
(36,46,1)
(30,49,1)
(7,28,1)
(24,1,1)
(3,13,1)
(31,22,1)
(18,52,1)
(21,10,1)
(4,9,1)
(47,35,1)
(28,17,1)
(6,17,1)
(17,48,1)
(35,29,1)
(34,33,1)
(1,40,1)
(22,40,1)
(13,44,1)
(9,18,1)
(29,39,1)
(40,4,1)
(52,3,1)
(33,2,1)
(6,7,1)
(9,46,1)
(5,36,1)
(42,50,1)
(46,6,1)
(41,42,1)
(49,11,1)
(48,12,1)
(50,0,1)
(47,3,1)
(26,16,1)
(6,17,2)
(21,3,2)
(1,3,2)
(9,3,2)
(48,23,2)
(41,40,2)
(40,3,2)
(5,36,2)
(22,40,2)
(5,40,2)
(41,3,2)
(40,4,2)
(35,40,2)
(11,22,2)
(10,3,2)
(45,3,2)
(49,11,2)
(42,3,2)
(22,3,2)
(17,48,2)
(52,3,2)
(36,3,2)
(36,46,2)
(39,40,2)
(5,3,2)
(4,38,2)
(46,6,2)
(18,3,2)
(39,3,2)
(3,46,2)
(4,3,2)
(34,3,2)
(41,42,2)
(30,3,2)
(0,3,2)
(24,3,2)
(8,3,2)
(49,22,2)
(4,9,2)
(50,3,2)
(9,46,2)
(35,3,2)
(31,22,2)
(29,3,2)
(33,3,2)
(2,3,2)
(48,12,2)
(42,46,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,'\\\\0')
(3,data < 100)
(4,(char *)
(5,memset(dataBuffer, \'A\', data-1)
(6,*dataPtr)
(7,dataPtr)
(8,\'A\')
(9,malloc(data)
(10,data)
(11,-1)
(12,int *)
(13,100)
(14,if (data < 100)
(15,\'\\\\0\')
(16,dataPtr)
(17,* dataPtr = (int *)
(18,data)
(19,)
(20,dataPtr)
(21,1)
(22,dataBuffer == NULL)
(23,void * dataVoidPtr)
(24,NULL)
(25,'A')
(26,dataVoidPtr)
(27,if (dataBuffer == NULL)
(28,data)
(29,dataBuffer)
(30,dataBuffer)
(31,1)
(32,memset(dataBuffer, 'A', data-1)
(33,dataBuffer[data-1] = \'\\\\0\')
(34,dataBuffer)
(35,free(dataBuffer)
(36,data-1)
(37,data)
(38,char *)
(39,printLine(dataBuffer)
(40,* dataBuffer = (char *)
(41,dataBuffer[data-1])
(42,data-1)
(43,dataBuffer)
(44,data)
(45,dataBuffer)
(46,data = (*dataPtr)
(47,RET)
(48,(int *)
(49,exit(-1)
(50,1)
(51,)
(52,dataBuffer)
(53,dataBuffer[data-1] = '\\\\0')
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^