-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_15_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,39,0)
(22,21,0)
(21,22,0)
(43,6,0)
(26,39,0)
(19,39,0)
(46,38,0)
(44,37,0)
(48,20,0)
(6,51,0)
(30,51,0)
(33,17,0)
(38,46,0)
(31,7,0)
(45,3,0)
(47,3,0)
(32,16,0)
(20,37,0)
(16,22,0)
(36,50,0)
(5,37,0)
(40,51,0)
(37,20,0)
(53,6,0)
(29,7,0)
(38,29,0)
(3,22,0)
(18,33,0)
(14,7,0)
(0,29,0)
(35,16,0)
(8,23,0)
(40,7,0)
(6,22,0)
(4,6,0)
(7,50,0)
(49,21,0)
(2,39,0)
(37,7,0)
(16,33,0)
(10,50,0)
(13,39,0)
(6,17,0)
(42,22,0)
(16,51,0)
(11,40,0)
(23,50,0)
(15,46,0)
(3,23,0)
(12,46,0)
(52,7,0)
(51,7,0)
(27,23,0)
(25,20,0)
(1,39,0)
(16,23,0)
(34,51,0)
(6,23,0)
(9,38,0)
(28,1,0)
(49,42,1)
(4,3,1)
(30,34,1)
(11,33,1)
(29,0,1)
(9,37,1)
(42,41,1)
(33,18,1)
(1,28,1)
(16,51,1)
(16,22,1)
(16,32,1)
(26,22,1)
(53,4,1)
(11,3,1)
(23,8,1)
(6,51,1)
(6,22,1)
(2,1,1)
(3,22,1)
(0,38,1)
(24,40,1)
(35,6,1)
(25,5,1)
(16,23,1)
(12,9,1)
(28,41,1)
(5,44,1)
(46,15,1)
(15,12,1)
(37,20,1)
(51,30,1)
(3,23,1)
(6,23,1)
(18,16,1)
(34,2,1)
(32,35,1)
(43,53,1)
(6,43,1)
(34,26,1)
(40,11,1)
(45,47,1)
(20,48,1)
(48,25,1)
(3,45,1)
(22,21,1)
(41,23,1)
(21,49,1)
(8,27,1)
(47,29,1)
(44,51,1)
(40,51,1)
(38,46,1)
(16,51,2)
(42,41,2)
(26,41,2)
(28,41,2)
(4,3,2)
(33,3,2)
(6,23,2)
(37,20,2)
(3,23,2)
(40,51,2)
(35,3,2)
(22,21,2)
(38,46,2)
(22,41,2)
(2,41,2)
(21,41,2)
(3,22,2)
(32,3,2)
(6,51,2)
(6,22,2)
(6,3,2)
(53,3,2)
(16,23,2)
(18,3,2)
(49,41,2)
(43,3,2)
(1,41,2)
(16,3,2)
(16,22,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,printLine("Benign, fixed string")
(2,break;)
(3,data < 100)
(4,dest)
(5,\\\'A\\\')
(6,memcpy(dest, source, data)
(7,)
(8,0)
(9,source)
(10,switch(6)
(11,dest)
(12,100)
(13,default:)
(14,source)
(15,1)
(16,dest[data])
(17,)
(18,\\\'\\\\0\\\')
(19,case 6:)
(20,100-1)
(21,-1)
(22,data = -1)
(23,data = 0)
(24,RET)
(25,100)
(26,break;)
(27,data)
(28,"Benign, fixed string")
(29,source[100-1] = \\\'\\\\0\\\')
(30,"")
(31,dest)
(32,data)
(33,dest[data] = \\\'\\\\0\\\')
(34,dest)
(35,dest)
(36,data)
(37,memset(source, \\\'A\\\', 100-1)
(38,source[100-1])
(39,)
(40,printLine(dest)
(41,6)
(42,data)
(43,data)
(44,source)
(45,100)
(46,100-1)
(47,data)
(48,1)
(49,1)
(50,)
(51,dest[100] = "")
(52,if (data < 100)
(53,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^