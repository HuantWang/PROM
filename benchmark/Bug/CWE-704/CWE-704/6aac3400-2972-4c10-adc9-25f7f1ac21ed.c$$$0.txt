-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e-50, result should be 0.0 (for bad case)
             *
             * Note: alternate input
             * 999999999999999999999999999999999999999999999999999999999999999
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printFloatLine((float)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,66
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }}
if(STATIC_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e-50, result should be 0.0 (for bad case)             *             * Note: alternate input             * 999999999999999999999999999999999999999999999999999999999999999             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printFloatLine((float)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
-----joern-----
(10,15,0)
(1,24,0)
(24,1,0)
(28,20,0)
(11,5,0)
(5,12,0)
(19,25,0)
(3,20,0)
(29,6,0)
(20,26,0)
(6,4,0)
(12,20,0)
(5,9,0)
(16,24,0)
(31,28,0)
(13,28,0)
(27,20,0)
(5,28,0)
(21,10,0)
(4,6,0)
(6,30,0)
(14,20,0)
(17,4,0)
(18,1,0)
(5,6,0)
(8,0,0)
(9,5,0)
(7,25,0)
(23,24,0)
(2,24,0)
(12,5,0)
(22,25,1)
(1,18,1)
(12,5,1)
(5,9,1)
(25,19,1)
(22,12,1)
(11,6,1)
(21,1,1)
(11,10,1)
(24,16,1)
(5,11,1)
(4,17,1)
(19,7,1)
(6,4,1)
(1,24,1)
(16,2,1)
(29,1,1)
(23,28,1)
(17,29,1)
(5,28,1)
(5,6,1)
(13,31,1)
(18,24,1)
(31,25,1)
(2,23,1)
(28,13,1)
(10,21,1)
(31,25,2)
(2,25,2)
(5,9,2)
(21,1,2)
(5,25,2)
(5,6,2)
(11,25,2)
(29,1,2)
(5,28,2)
(6,4,2)
(6,1,2)
(17,1,2)
(13,25,2)
(1,25,2)
(23,25,2)
(28,25,2)
(16,25,2)
(4,1,2)
(1,24,2)
(10,1,2)
(12,25,2)
(18,25,2)
(12,5,2)
(24,25,2)
-----------------------------------
(0,)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,CHAR_ARRAY_SIZE)
(3,inputBuffer)
(4,atof(inputBuffer)
(5,(float)
(6,doubleNumber = atof(inputBuffer)
(7,STATIC_CONST_FIVE)
(8,if(STATIC_CONST_FIVE==5)
(9,float)
(10,printLine("fgets()
(11,doubleNumber)
(12,printFloatLine((float)
(13,0)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,)
(16,stdin)
(17,inputBuffer)
(18,NULL)
(19,5)
(20,)
(21,"fgets()
(22,RET)
(23,inputBuffer)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,STATIC_CONST_FIVE==5)
(26,)
(27,doubleNumber)
(28,doubleNumber = 0)
(29,doubleNumber)
(30,)
(31,doubleNumber)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^