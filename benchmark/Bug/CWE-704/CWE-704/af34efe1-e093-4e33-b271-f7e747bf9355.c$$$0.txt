-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
35,37
35,38
35,39
35,40
35,41
35,42
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
69,71
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
70,79
70,80
70,81
70,82
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
92,93
93,94
93,95
93,96
93,97
94,95
96,97
97,98
100,101
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
138,141
138,142
139,140
141,142
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
152,153
153,154
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
164,169
165,166
167,168
169,170
171,172
171,173
172,173
176,177
176,178
177,178
177,179
178,179
178,180
179,180
181,182
183,184
183,185
184,185
187,188
189,190
190,191
190,192
191,192
191,193
192,193
194,195
197,198
198,199
198,200
199,200
201,202
201,203
202,203
204,205
206,207
206,208
206,209
207,208
207,209
208,209
208,210
209,210
211,212
213,214
213,215
214,215
216,217
218,219
219,220
220,221
220,222
221,222
223,224
225,226
226,227
227,228
227,229
228,229
230,231
233,234
233,235
234,235
234,236
235,236
237,238
239,240
240,241
241,242
241,243
242,243
244,245
246,247
246,248
246,249
246,250
246,251
246,252
247,248
248,249
248,250
250,251
250,252
252,253
254,255
255,256
255,257
257,258
257,259
257,260
259,260
261,262
263,264
264,265
264,266
264,267
264,268
265,266
267,268
270,271
270,272
273,274
274,275
274,276
275,276
275,277
276,277
278,279
278,280
282,283
282,284
283,284
283,285
284,285
287,288
287,289
288,289
289,290
289,291
289,292
289,293
290,291
292,293
294,295
296,297
298,299
299,300
299,301
300,301
300,302
301,302
303,304
306,307
307,308
307,309
308,309
310,311
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,43,45,49,51,55,57,60,63,65,68,74,77,79,81,83,87,89,91,95,98,99,103,108,109,111,117,118,119,122,124,129,130,133,135,140,142,146,148,151,155,157,159,163,166,168,170,173,174,175,180,182,185,186,188,193,195,196,200,203,205,210,212,215,217,222,224,229,231,232,236,238,243,245,249,251,253,256,258,260,262,266,268,269,271,272,277,279,280,281,285,286,291,293,295,297,302,304,305,309,311
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
72,73
72,74
85,86
85,87
105,106
105,107
113,114
113,115
126,127
126,128
137,138
137,139
161,162
161,163
171,172
171,173
177,178
177,179
178,179
178,180
183,184
183,185
190,191
190,192
198,199
198,200
207,208
207,209
208,209
208,210
213,214
213,215
220,221
220,222
227,228
227,229
234,235
234,236
270,271
270,272
274,275
274,276
278,279
278,280
283,284
283,285
299,300
299,301
-----guardedBy-----
236,245
285,304
-----guardedByNegation-----
215,231
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_17_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_strncpy_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(130,127,0)
(153,26,0)
(124,170,0)
(68,90,0)
(181,46,0)
(58,157,0)
(0,158,0)
(146,37,0)
(89,173,0)
(52,108,0)
(1,157,0)
(141,158,0)
(3,64,0)
(183,24,0)
(75,158,0)
(85,30,0)
(84,91,0)
(152,47,0)
(55,122,0)
(9,117,0)
(20,38,0)
(133,48,0)
(134,133,0)
(78,2,0)
(185,127,0)
(119,175,0)
(97,133,0)
(106,52,0)
(70,0,0)
(35,155,0)
(117,98,0)
(108,52,0)
(51,155,0)
(2,144,0)
(16,146,0)
(34,37,0)
(2,124,0)
(157,25,0)
(113,127,0)
(83,34,0)
(45,24,0)
(65,152,0)
(25,112,0)
(47,56,0)
(97,95,0)
(115,116,0)
(87,48,0)
(118,127,0)
(177,140,0)
(101,182,0)
(72,37,0)
(104,23,0)
(76,164,0)
(178,119,0)
(20,128,0)
(187,116,0)
(117,182,0)
(31,152,0)
(161,42,0)
(38,146,0)
(133,37,0)
(14,38,0)
(167,46,0)
(41,158,0)
(50,127,0)
(12,80,0)
(69,42,0)
(94,28,0)
(128,90,0)
(157,50,0)
(21,128,0)
(116,22,0)
(26,133,0)
(143,170,0)
(71,69,0)
(176,158,0)
(146,28,0)
(38,151,0)
(114,51,0)
(164,124,0)
(175,119,0)
(100,0,0)
(27,90,0)
(64,140,0)
(107,120,0)
(145,175,0)
(184,161,0)
(174,85,0)
(138,158,0)
(168,23,0)
(180,13,0)
(67,34,0)
(120,167,0)
(150,187,0)
(13,30,0)
(32,98,0)
(88,48,0)
(105,144,0)
(69,38,0)
(112,25,0)
(15,37,0)
(24,158,0)
(53,51,0)
(2,38,0)
(127,130,0)
(2,128,0)
(82,35,0)
(127,50,0)
(80,56,0)
(56,37,0)
(99,158,0)
(120,146,0)
(179,63,0)
(63,159,0)
(20,144,0)
(109,124,0)
(63,37,0)
(136,69,0)
(111,98,0)
(147,85,0)
(163,8,0)
(156,173,0)
(154,158,0)
(148,61,0)
(57,91,0)
(170,90,0)
(159,63,0)
(59,124,0)
(110,170,0)
(131,112,0)
(97,0,0)
(25,157,0)
(116,115,0)
(165,67,0)
(96,130,0)
(79,46,0)
(50,37,0)
(188,158,0)
(33,64,0)
(17,26,0)
(155,37,0)
(116,187,0)
(92,37,0)
(22,116,0)
(119,170,0)
(169,175,0)
(60,38,0)
(167,120,0)
(98,117,0)
(46,167,0)
(44,40,0)
(29,37,0)
(103,137,0)
(39,97,0)
(54,159,0)
(142,69,0)
(149,30,0)
(126,20,0)
(52,106,0)
(121,187,0)
(63,73,0)
(125,108,0)
(93,115,0)
(28,146,0)
(5,89,0)
(7,52,0)
(6,90,0)
(172,37,0)
(144,122,0)
(89,5,0)
(10,73,0)
(73,63,0)
(52,133,0)
(123,30,0)
(160,128,0)
(23,133,0)
(173,89,0)
(164,170,0)
(11,22,0)
(69,128,0)
(47,152,0)
(66,81,0)
(18,170,0)
(140,37,0)
(48,133,0)
(102,119,0)
(182,170,0)
(36,67,0)
(129,47,0)
(139,2,0)
(77,48,0)
(56,80,0)
(69,144,0)
(52,89,0)
(186,120,0)
(23,0,0)
(19,112,0)
(89,52,0)
(135,106,0)
(155,35,0)
(144,171,0)
(127,133,0)
(69,124,0)
(2,161,0)
(62,20,0)
(46,146,0)
(64,50,0)
(91,37,0)
(86,158,0)
(49,50,0)
(158,166,0)
(122,144,0)
(132,158,0)
(162,130,0)
(112,50,0)
(113,49,1)
(146,28,1)
(23,0,1)
(168,44,1)
(161,184,1)
(97,0,1)
(112,50,1)
(69,124,1)
(126,62,1)
(148,4,1)
(9,119,1)
(168,74,1)
(162,96,1)
(34,83,1)
(69,71,1)
(62,182,1)
(174,147,1)
(168,163,1)
(167,46,1)
(102,124,1)
(79,181,1)
(180,4,1)
(122,55,1)
(53,114,1)
(108,52,1)
(121,0,1)
(83,67,1)
(76,161,1)
(82,51,1)
(175,145,1)
(163,26,1)
(12,47,1)
(128,160,1)
(77,134,1)
(0,100,1)
(112,131,1)
(49,108,1)
(91,84,1)
(100,70,1)
(14,60,1)
(30,149,1)
(89,173,1)
(121,74,1)
(133,48,1)
(169,178,1)
(108,125,1)
(26,133,1)
(44,108,1)
(109,59,1)
(123,128,1)
(103,25,1)
(136,20,1)
(43,164,1)
(160,21,1)
(185,113,1)
(23,133,1)
(74,144,1)
(38,14,1)
(67,36,1)
(153,17,1)
(124,109,1)
(107,46,1)
(13,30,1)
(119,175,1)
(157,58,1)
(87,88,1)
(125,52,1)
(45,183,1)
(157,50,1)
(85,174,1)
(94,16,1)
(97,133,1)
(111,32,1)
(96,185,1)
(73,10,1)
(4,23,1)
(2,124,1)
(186,107,1)
(159,54,1)
(39,23,1)
(58,1,1)
(118,130,1)
(19,50,1)
(105,167,1)
(89,5,1)
(52,106,1)
(10,26,1)
(20,144,1)
(183,85,1)
(116,22,1)
(11,187,1)
(24,45,1)
(184,2,1)
(3,33,1)
(2,38,1)
(93,116,1)
(22,11,1)
(2,144,1)
(71,142,1)
(85,30,1)
(48,87,1)
(115,116,1)
(56,80,1)
(130,162,1)
(106,135,1)
(84,57,1)
(65,31,1)
(120,186,1)
(25,157,1)
(180,148,1)
(98,111,1)
(26,153,1)
(181,146,1)
(69,38,1)
(168,103,1)
(156,7,1)
(101,117,1)
(135,89,1)
(127,130,1)
(147,13,1)
(144,122,1)
(142,136,1)
(38,146,1)
(165,63,1)
(120,146,1)
(7,155,1)
(69,128,1)
(63,159,1)
(2,78,1)
(177,64,1)
(127,118,1)
(127,133,1)
(54,179,1)
(164,76,1)
(51,53,1)
(66,115,1)
(173,156,1)
(64,50,1)
(129,152,1)
(4,97,1)
(97,39,1)
(25,112,1)
(31,34,1)
(152,65,1)
(116,187,1)
(47,129,1)
(167,120,1)
(117,98,1)
(16,140,1)
(104,168,1)
(63,73,1)
(46,146,1)
(187,150,1)
(52,133,1)
(178,102,1)
(50,127,1)
(139,69,1)
(115,93,1)
(23,104,1)
(74,38,1)
(145,169,1)
(131,19,1)
(150,121,1)
(80,12,1)
(57,115,1)
(88,77,1)
(60,167,1)
(55,105,1)
(20,38,1)
(179,73,1)
(20,126,1)
(76,20,1)
(28,94,1)
(147,30,1)
(69,144,1)
(47,152,1)
(52,89,1)
(46,79,1)
(64,3,1)
(33,25,1)
(134,91,1)
(140,177,1)
(164,124,1)
(35,82,1)
(182,101,1)
(32,9,1)
(36,165,1)
(114,56,1)
(155,35,1)
(13,180,1)
(149,123,1)
(17,133,1)
(2,128,1)
(1,112,1)
(70,24,1)
(168,66,1)
(78,139,1)
(20,128,1)
(59,85,1)
(48,115,2)
(183,85,2)
(127,130,2)
(25,112,2)
(58,112,2)
(38,167,2)
(187,85,2)
(105,167,2)
(64,50,2)
(2,38,2)
(93,74,2)
(89,26,2)
(114,26,2)
(56,80,2)
(79,25,2)
(93,85,2)
(11,85,2)
(91,115,2)
(159,26,2)
(57,115,2)
(150,74,2)
(94,25,2)
(133,48,2)
(2,20,2)
(69,38,2)
(144,167,2)
(181,25,2)
(163,26,2)
(20,38,2)
(121,85,2)
(87,115,2)
(168,85,2)
(88,115,2)
(153,115,2)
(107,46,2)
(115,116,2)
(116,187,2)
(100,85,2)
(67,26,2)
(89,5,2)
(73,26,2)
(26,115,2)
(104,85,2)
(112,50,2)
(56,26,2)
(39,23,2)
(97,133,2)
(115,85,2)
(49,108,2)
(117,98,2)
(115,74,2)
(46,25,2)
(78,20,2)
(152,26,2)
(167,46,2)
(47,26,2)
(156,26,2)
(103,25,2)
(24,85,2)
(28,25,2)
(2,144,2)
(19,108,2)
(80,26,2)
(140,25,2)
(25,108,2)
(116,85,2)
(157,112,2)
(186,46,2)
(184,20,2)
(22,85,2)
(83,26,2)
(174,85,2)
(46,146,2)
(185,108,2)
(130,108,2)
(84,115,2)
(52,133,2)
(71,20,2)
(11,74,2)
(14,167,2)
(23,0,2)
(106,26,2)
(52,106,2)
(161,20,2)
(60,167,2)
(2,124,2)
(167,25,2)
(13,85,2)
(23,133,2)
(34,26,2)
(69,144,2)
(187,74,2)
(180,85,2)
(55,167,2)
(118,108,2)
(77,115,2)
(120,146,2)
(13,30,2)
(1,112,2)
(122,167,2)
(33,25,2)
(135,26,2)
(120,46,2)
(85,30,2)
(23,85,2)
(64,25,2)
(167,120,2)
(20,128,2)
(150,85,2)
(108,26,2)
(0,85,2)
(121,74,2)
(51,26,2)
(146,28,2)
(69,128,2)
(63,73,2)
(65,26,2)
(134,115,2)
(144,122,2)
(179,26,2)
(108,52,2)
(50,127,2)
(127,133,2)
(139,20,2)
(20,144,2)
(173,26,2)
(69,124,2)
(74,25,2)
(131,108,2)
(119,175,2)
(47,152,2)
(38,146,2)
(112,108,2)
(125,26,2)
(70,85,2)
(54,26,2)
(12,26,2)
(155,35,2)
(63,159,2)
(10,26,2)
(85,85,2)
(50,108,2)
(53,26,2)
(4,85,2)
(97,0,2)
(31,26,2)
(44,108,2)
(165,26,2)
(113,108,2)
(146,25,2)
(164,124,2)
(162,108,2)
(89,173,2)
(148,4,2)
(52,26,2)
(26,133,2)
(17,115,2)
(142,20,2)
(82,26,2)
(96,108,2)
(35,26,2)
(129,26,2)
(97,23,2)
(177,25,2)
(16,25,2)
(127,108,2)
(157,50,2)
(116,22,2)
(133,115,2)
(63,26,2)
(25,157,2)
(66,115,2)
(36,26,2)
(3,25,2)
(136,20,2)
(147,85,2)
(52,89,2)
(116,74,2)
(7,26,2)
(69,20,2)
(22,74,2)
(45,85,2)
(155,26,2)
(2,128,2)
-----------------------------------
(0,connectSocket = INVALID_SOCKET)
(1,recvResult)
(2,dest[data])
(3,recvResult)
(4,wsaDataInit)
(5,struct sockaddr*)
(6,i)
(7,connectSocket)
(8,)
(9,source)
(10,service)
(11,wsaData)
(12,IP_ADDRESS)
(13,i++)
(14,tempInt)
(15,if (connect(connectSocket, (struct sockaddr*)
(16,tempInt)
(17,connectSocket)
(18,source)
(19,recvResult)
(20,data < 100)
(21,data)
(22,&wsaData)
(23,connectSocket != INVALID_SOCKET)
(24,wsaDataInit = 0)
(25,recvResult == SOCKET_ERROR || recvResult == 0)
(26,connectSocket == INVALID_SOCKET)
(27,data)
(28,atoi(inputBuffer)
(29,if (recvResult == SOCKET_ERROR || recvResult == 0)
(30,i = 0)
(31,service)
(32,100)
(33,inputBuffer)
(34,service.sin_family = AF_INET)
(35,htons(TCP_PORT)
(36,sin_family)
(37,)
(38,data = tempInt)
(39,connectSocket)
(40,)
(41,connectSocket)
(42,)
(43,RET)
(44,break;)
(45,0)
(46,tempInt > SHRT_MAX)
(47,service.sin_addr.s_addr)
(48,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(49,recvResult)
(50,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(51,service.sin_port)
(52,connect(connectSocket, (struct sockaddr*)
(53,sin_port)
(54,service)
(55,1)
(56,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(57,wsaDataInit)
(58,0)
(59,dest)
(60,data)
(61,)
(62,data)
(63,memset(&service, 0, sizeof(service)
(64,inputBuffer[recvResult])
(65,sin_addr)
(66,break;)
(67,service.sin_family)
(68,for(i = 0; i < 1; i++)
(69,strncpy(dest, source, data)
(70,connectSocket)
(71,data)
(72,if (WSAStartup(MAKEWORD(2,2)
(73,&service)
(74,0)
(75,wsaData)
(76,dest)
(77,AF_INET)
(78,data)
(79,SHRT_MAX)
(80,inet_addr(IP_ADDRESS)
(81,)
(82,TCP_PORT)
(83,AF_INET)
(84,1)
(85,i < 1)
(86,recvResult)
(87,IPPROTO_TCP)
(88,SOCK_STREAM)
(89,(struct sockaddr*)
(90,)
(91,wsaDataInit = 1)
(92,if (connectSocket == INVALID_SOCKET)
(93,NO_ERROR)
(94,inputBuffer)
(95,)
(96,CHAR_ARRAY_SIZE)
(97,CLOSE_SOCKET(connectSocket)
(98,100-1)
(99,if (connectSocket != INVALID_SOCKET)
(100,INVALID_SOCKET)
(101,\\\'\\\\0\\\')
(102,source)
(103,break;)
(104,INVALID_SOCKET)
(105,data)
(106,sizeof(service)
(107,tempInt)
(108,connect(connectSocket, (struct sockaddr*)
(109,"")
(110,dest)
(111,1)
(112,recvResult == SOCKET_ERROR)
(113,connectSocket)
(114,service)
(115,WSAStartup(MAKEWORD(2,2)
(116,WSAStartup(MAKEWORD(2,2)
(117,source[100-1])
(118,0)
(119,memset(source, \\\'A\\\', 100-1)
(120,tempInt < SHRT_MIN)
(121,2)
(122,-1)
(123,i)
(124,dest[100] = "")
(125,SOCKET_ERROR)
(126,100)
(127,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(128,data = 0)
(129,s_addr)
(130,CHAR_ARRAY_SIZE - 1)
(131,SOCKET_ERROR)
(132,inputBuffer)
(133,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(134,connectSocket)
(135,service)
(136,dest)
(137,)
(138,service)
(139,dest)
(140,inputBuffer[recvResult] = \\\'\\\\0\\\')
(141,if (wsaDataInit)
(142,source)
(143,if (data < 100)
(144,data = -1)
(145,1)
(146,tempInt = atoi(inputBuffer)
(147,i)
(148,WSACleanup()
(149,0)
(150,2)
(151,)
(152,service.sin_addr)
(153,INVALID_SOCKET)
(154,wsaDataInit)
(155,service.sin_port = htons(TCP_PORT)
(156,service)
(157,recvResult == 0)
(158,)
(159,sizeof(service)
(160,0)
(161,dest[data] = \\\'\\\\0\\\')
(162,1)
(163,break;)
(164,printLine(dest)
(165,service)
(166,)
(167,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(168,connectSocket)
(169,100)
(170,)
(171,)
(172,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(173,&service)
(174,1)
(175,100-1)
(176,do)
(177,\\\'\\\\0\\\')
(178,\\\'A\\\')
(179,0)
(180,i)
(181,tempInt)
(182,source[100-1] = \\\'\\\\0\\\')
(183,wsaDataInit)
(184,\\\'\\\\0\\\')
(185,inputBuffer)
(186,SHRT_MIN)
(187,MAKEWORD(2,2)
(188,tempInt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^