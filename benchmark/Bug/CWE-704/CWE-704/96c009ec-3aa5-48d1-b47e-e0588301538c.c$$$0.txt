-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
79,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,66,69,70,74,76,80,81,83,87,89
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
64,65
64,66
67,68
67,69
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_short_12_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_short_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(10,23,0)
(2,44,0)
(13,16,0)
(7,10,0)
(41,44,0)
(1,5,0)
(44,8,0)
(10,43,0)
(18,34,0)
(37,42,0)
(35,8,0)
(6,4,0)
(9,11,0)
(13,33,0)
(43,10,0)
(33,26,0)
(30,43,0)
(44,10,0)
(40,14,0)
(4,25,0)
(44,25,0)
(20,27,0)
(14,3,0)
(8,44,0)
(22,16,0)
(11,19,0)
(25,19,0)
(32,13,0)
(34,16,0)
(42,34,0)
(5,11,0)
(16,20,0)
(8,11,0)
(28,19,0)
(21,20,0)
(12,25,0)
(33,13,0)
(5,8,0)
(44,2,0)
(31,34,0)
(39,19,0)
(15,33,0)
(44,33,0)
(38,34,0)
(34,42,0)
(24,20,0)
(25,4,0)
(36,16,0)
(0,43,0)
(36,29,1)
(6,12,1)
(8,44,1)
(10,43,1)
(35,10,1)
(1,8,1)
(44,10,1)
(37,34,1)
(13,32,1)
(18,16,1)
(30,0,1)
(16,22,1)
(42,37,1)
(35,14,1)
(17,5,1)
(32,15,1)
(34,38,1)
(13,16,1)
(5,1,1)
(42,34,1)
(44,2,1)
(33,13,1)
(44,25,1)
(22,36,1)
(7,29,1)
(0,7,1)
(31,18,1)
(44,41,1)
(40,42,1)
(15,42,1)
(14,40,1)
(25,4,1)
(44,33,1)
(29,25,1)
(4,6,1)
(41,35,1)
(5,8,1)
(34,16,1)
(38,31,1)
(43,30,1)
(35,33,1)
(42,29,2)
(38,29,2)
(37,29,2)
(10,29,2)
(34,16,2)
(10,43,2)
(30,29,2)
(36,29,2)
(44,33,2)
(16,29,2)
(22,29,2)
(32,42,2)
(44,2,2)
(15,42,2)
(40,42,2)
(7,29,2)
(0,29,2)
(44,10,2)
(5,8,2)
(13,42,2)
(33,42,2)
(31,29,2)
(34,29,2)
(42,34,2)
(8,44,2)
(25,4,2)
(33,13,2)
(14,42,2)
(13,16,2)
(44,25,2)
(43,29,2)
(18,29,2)
-----------------------------------
(0,CHAR_MAX)
(1,shortData)
(2,short)
(3,)
(4,-1)
(5,printShortLine(shortData)
(6,1)
(7,data)
(8,shortData = (short)
(9,shortData)
(10,data = CHAR_MAX-5)
(11,)
(12,data)
(13,atoi(inputBuffer)
(14,printLine("fgets()
(15,data)
(16,inputBuffer[CHAR_ARRAY_SIZE] = "")
(17,RET)
(18,inputBuffer)
(19,)
(20,)
(21,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,"")
(23,)
(24,inputBuffer)
(25,data = -1)
(26,)
(27,)
(28,if(globalReturnsTrueOrFalse()
(29,globalReturnsTrueOrFalse()
(30,5)
(31,CHAR_ARRAY_SIZE)
(32,inputBuffer)
(33,data = atoi(inputBuffer)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,shortData)
(36,inputBuffer)
(37,NULL)
(38,stdin)
(39,data)
(40,"fgets()
(41,data)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,CHAR_MAX-5)
(44,(short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^