-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_07_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
67,68
68,69
68,70
70,71
70,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,71,73,76,78,80,82,86,88,89,91,92,97,99,100,101,105,106,111,113,115,117,122,124,125,129,131
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
90,91
90,92
94,95
94,96
98,99
98,100
103,104
103,105
119,120
119,121
-----guardedBy-----
39,59
105,124
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_07_bad(){    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_07_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_07_bad
{    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,38,0)
(36,46,0)
(28,46,0)
(56,59,0)
(14,2,0)
(12,5,0)
(49,9,0)
(63,13,0)
(65,44,0)
(54,38,0)
(28,7,0)
(39,26,0)
(27,56,0)
(8,59,0)
(45,4,0)
(23,40,0)
(26,21,0)
(57,41,0)
(47,17,0)
(64,27,0)
(10,7,0)
(2,40,0)
(44,38,0)
(50,40,0)
(9,59,0)
(66,32,0)
(22,2,0)
(35,44,0)
(34,13,0)
(44,20,0)
(25,32,0)
(51,5,0)
(44,56,0)
(61,38,0)
(20,67,0)
(61,46,0)
(1,61,0)
(38,46,0)
(0,17,0)
(60,32,0)
(40,37,0)
(21,26,0)
(3,21,0)
(48,26,0)
(31,38,0)
(56,19,0)
(44,4,0)
(32,60,0)
(27,4,0)
(27,67,0)
(53,46,0)
(26,2,0)
(43,27,0)
(15,27,0)
(46,5,0)
(59,8,0)
(59,9,0)
(60,41,0)
(42,28,0)
(17,56,0)
(59,56,0)
(58,60,0)
(33,20,0)
(6,7,0)
(30,16,0)
(52,56,0)
(41,46,0)
(62,4,0)
(4,5,0)
(11,26,0)
(18,46,0)
(17,4,0)
(16,24,0)
(55,28,0)
(7,28,0)
(9,2,0)
(1,17,1)
(44,65,1)
(44,38,1)
(9,49,1)
(57,60,1)
(65,35,1)
(26,2,1)
(16,30,1)
(6,10,1)
(13,63,1)
(35,27,1)
(21,3,1)
(47,41,1)
(60,32,1)
(59,8,1)
(11,2,1)
(17,4,1)
(25,66,1)
(49,52,1)
(61,1,1)
(33,44,1)
(29,61,1)
(43,64,1)
(9,2,1)
(31,13,1)
(34,4,1)
(4,45,1)
(22,14,1)
(44,4,1)
(1,20,1)
(27,43,1)
(31,56,1)
(39,11,1)
(45,62,1)
(42,38,1)
(30,21,1)
(55,42,1)
(41,57,1)
(21,26,1)
(66,58,1)
(58,28,1)
(54,31,1)
(7,6,1)
(17,56,1)
(61,38,1)
(17,0,1)
(44,56,1)
(56,59,1)
(28,7,1)
(2,22,1)
(20,33,1)
(15,17,1)
(14,13,1)
(0,47,1)
(38,54,1)
(26,48,1)
(32,25,1)
(52,21,1)
(3,26,1)
(27,4,1)
(27,38,1)
(63,34,1)
(31,16,1)
(27,56,1)
(48,39,1)
(59,9,1)
(64,15,1)
(10,55,1)
(27,4,2)
(44,4,2)
(15,17,2)
(9,21,2)
(61,38,2)
(59,21,2)
(28,7,2)
(17,4,2)
(27,17,2)
(60,32,2)
(35,17,2)
(26,13,2)
(44,56,2)
(48,13,2)
(14,13,2)
(27,56,2)
(59,9,2)
(44,17,2)
(65,17,2)
(49,21,2)
(2,13,2)
(21,13,2)
(44,38,2)
(21,26,2)
(22,13,2)
(33,17,2)
(52,21,2)
(11,13,2)
(59,8,2)
(30,21,2)
(16,21,2)
(56,21,2)
(39,13,2)
(43,17,2)
(17,56,2)
(9,2,2)
(56,59,2)
(20,17,2)
(64,17,2)
(26,2,2)
(27,38,2)
(3,13,2)
-----------------------------------
(0,100)
(1,dest)
(2,inputBuffer[CHAR_ARRAY_SIZE] = "")
(3,NULL)
(4,data = 0)
(5,)
(6,1)
(7,100-1)
(8,short)
(9,atoi(inputBuffer)
(10,100)
(11,inputBuffer)
(12,if(staticFive==5)
(13,staticFive==5)
(14,inputBuffer)
(15,dest)
(16,printLine("fgets()
(17,data < 100)
(18,dest)
(19,)
(20,dest[data] = \\\'\\\\0\\\')
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,"")
(23,inputBuffer)
(24,)
(25,1)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,memcpy(dest, source, data)
(28,memset(source, \\\'A\\\', 100-1)
(29,RET)
(30,"fgets()
(31,dest)
(32,100-1)
(33,\\\'\\\\0\\\')
(34,staticFive)
(35,dest)
(36,if (data < 100)
(37,)
(38,dest[100] = "")
(39,CHAR_ARRAY_SIZE)
(40,)
(41,source[100-1] = \\\'\\\\0\\\')
(42,source)
(43,data)
(44,dest[data])
(45,0)
(46,)
(47,data)
(48,stdin)
(49,inputBuffer)
(50,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(51,data)
(52,data)
(53,source)
(54,"")
(55,\\\'A\\\')
(56,data = (short)
(57,\\\'\\\\0\\\')
(58,source)
(59,(short)
(60,source[100-1])
(61,printLine(dest)
(62,data)
(63,5)
(64,source)
(65,data)
(66,100)
(67,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^