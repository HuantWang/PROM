-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
            char charData = (char)data;
            printHexCharLine(charData);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,20,23,27,29,32,35,37,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
18,19
18,20
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_31_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_char_31_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_char_31_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */            char charData = (char)data;            printHexCharLine(charData);        }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(24,20,0)
(21,9,0)
(19,23,0)
(13,14,0)
(20,11,0)
(1,13,0)
(18,7,0)
(4,27,0)
(9,7,0)
(10,19,0)
(3,19,0)
(3,20,0)
(27,9,0)
(7,3,0)
(0,11,0)
(4,8,0)
(6,9,0)
(17,27,0)
(25,3,0)
(2,14,0)
(22,3,0)
(7,20,0)
(9,27,0)
(12,7,0)
(9,21,0)
(5,8,0)
(13,11,0)
(23,19,0)
(19,11,0)
(14,13,0)
(15,4,0)
(8,20,0)
(26,20,0)
(27,8,0)
(9,21,1)
(23,10,1)
(16,4,1)
(2,1,1)
(14,2,1)
(12,18,1)
(4,15,1)
(3,25,1)
(15,27,1)
(22,19,1)
(3,19,1)
(10,13,1)
(9,7,1)
(19,23,1)
(7,3,1)
(17,7,1)
(4,27,1)
(7,12,1)
(6,17,1)
(9,6,1)
(25,22,1)
(18,3,1)
(13,14,1)
(27,9,1)
(4,27,2)
(27,9,2)
(7,3,2)
(19,23,2)
(13,14,2)
(9,7,2)
(9,21,2)
(3,19,2)
-----------------------------------
(0,data)
(1,data)
(2,1)
(3,dataCopy = data)
(4,printHexCharLine(charData)
(5,charData)
(6,data)
(7,data = dataCopy)
(8,)
(9,(char)
(10,data)
(11,)
(12,dataCopy)
(13,data = -1)
(14,-1)
(15,charData)
(16,RET)
(17,charData)
(18,data)
(19,data = RAND32()
(20,)
(21,char)
(22,dataCopy)
(23,RAND32()
(24,data)
(25,data)
(26,dataCopy)
(27,charData = (char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^