-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType myStruct)
{
    short data = myStruct.structFirst;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,7,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType myStruct){    short data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType myStruct)
CWE194_Unexpected_Sign_Extension__rand_malloc_67b_badSink
CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType myStruct
CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType
CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType
myStruct
myStruct
{    short data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = myStruct.structFirst;
short data = myStruct.structFirst;
short
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(23,8,0)
(45,8,0)
(23,26,0)
(4,3,0)
(7,49,0)
(20,8,0)
(37,39,0)
(11,39,0)
(38,19,0)
(43,36,0)
(35,33,0)
(31,26,0)
(44,40,0)
(1,14,0)
(24,8,0)
(46,36,0)
(18,35,0)
(8,40,0)
(3,36,0)
(26,23,0)
(14,1,0)
(29,20,0)
(16,8,0)
(38,45,0)
(23,10,0)
(26,19,0)
(19,35,0)
(9,14,0)
(20,40,0)
(16,40,0)
(21,28,0)
(41,35,0)
(13,19,0)
(34,28,0)
(45,38,0)
(22,3,0)
(28,19,0)
(36,19,0)
(1,25,0)
(42,23,0)
(8,45,0)
(3,40,0)
(6,49,0)
(10,40,0)
(32,40,0)
(35,19,0)
(0,10,0)
(48,38,0)
(49,8,0)
(5,26,0)
(27,45,0)
(19,39,0)
(3,8,0)
(36,3,0)
(45,27,0)
(2,16,0)
(4,49,1)
(6,8,1)
(29,16,1)
(35,33,1)
(24,28,1)
(16,8,1)
(23,26,1)
(21,34,1)
(23,8,1)
(19,35,1)
(41,13,1)
(34,19,1)
(46,43,1)
(4,1,1)
(1,14,1)
(0,23,1)
(31,42,1)
(49,8,1)
(3,36,1)
(45,38,1)
(26,19,1)
(20,8,1)
(28,19,1)
(8,45,1)
(5,31,1)
(28,21,1)
(3,8,1)
(45,27,1)
(36,46,1)
(14,9,1)
(20,29,1)
(38,48,1)
(35,18,1)
(43,22,1)
(2,10,1)
(42,3,1)
(38,19,1)
(7,6,1)
(48,24,1)
(10,0,1)
(16,2,1)
(47,28,1)
(9,49,1)
(49,7,1)
(22,4,1)
(26,5,1)
(18,41,1)
(36,19,1)
(47,20,1)
(46,28,2)
(45,27,2)
(45,28,2)
(20,8,2)
(10,28,2)
(42,28,2)
(49,8,2)
(2,28,2)
(20,28,2)
(6,28,2)
(19,35,2)
(3,36,2)
(38,28,2)
(5,28,2)
(49,28,2)
(45,38,2)
(36,28,2)
(31,28,2)
(48,28,2)
(23,28,2)
(43,28,2)
(16,8,2)
(16,28,2)
(14,49,2)
(1,14,2)
(9,49,2)
(8,28,2)
(8,45,2)
(28,19,2)
(29,28,2)
(26,28,2)
(3,28,2)
(36,19,2)
(38,19,2)
(26,19,2)
(24,28,2)
(23,8,2)
(4,28,2)
(35,33,2)
(22,28,2)
(3,8,2)
(23,26,2)
(7,28,2)
(1,49,2)
(0,28,2)
-----------------------------------
(0,'\\\\0')
(1,exit(-1)
(2,dataBuffer)
(3,memset(dataBuffer, \'A\', data-1)
(4,dataBuffer)
(5,1)
(6,dataBuffer)
(7,NULL)
(8,* dataBuffer = (char *)
(9,1)
(10,dataBuffer[data-1] = \'\\\\0\')
(11,if (data < 100)
(12,\'\\\\0\')
(13,data)
(14,-1)
(15,dataBuffer[data-1] = '\\\\0')
(16,printLine(dataBuffer)
(17,memset(dataBuffer, 'A', data-1)
(18,structFirst)
(19,data = myStruct.structFirst)
(20,free(dataBuffer)
(21,100)
(22,\'A\')
(23,dataBuffer[data-1])
(24,dataBuffer)
(25,)
(26,data-1)
(27,char *)
(28,data < 100)
(29,dataBuffer)
(30,'A')
(31,data)
(32,dataBuffer)
(33,CWE194_Unexpected_Sign_Extension__rand_malloc_67_structType myStruct)
(34,data)
(35,myStruct.structFirst)
(36,data-1)
(37,data)
(38,malloc(data)
(39,)
(40,)
(41,myStruct)
(42,dataBuffer)
(43,data)
(44,if (dataBuffer == NULL)
(45,(char *)
(46,1)
(47,RET)
(48,data)
(49,dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^