-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
static void
badSink()
badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,14,0)
(26,20,0)
(7,16,0)
(43,19,0)
(3,43,0)
(32,39,0)
(22,20,0)
(30,39,0)
(33,19,0)
(26,2,0)
(35,10,0)
(29,14,0)
(39,43,0)
(10,2,0)
(46,35,0)
(2,20,0)
(13,12,0)
(27,7,0)
(12,13,0)
(31,43,0)
(36,43,0)
(0,13,0)
(35,43,0)
(14,2,0)
(41,17,0)
(7,27,0)
(12,43,0)
(1,2,0)
(32,2,0)
(37,26,0)
(9,12,0)
(40,27,0)
(10,35,0)
(39,32,0)
(8,20,0)
(25,10,0)
(21,31,0)
(10,25,0)
(5,32,0)
(17,2,0)
(17,20,0)
(32,11,0)
(13,20,0)
(13,2,0)
(15,13,0)
(28,39,0)
(38,12,0)
(2,10,0)
(4,31,0)
(24,11,0)
(6,19,0)
(11,20,0)
(39,30,1)
(0,15,1)
(17,2,1)
(17,41,1)
(4,43,1)
(26,37,1)
(12,9,1)
(29,34,1)
(13,2,1)
(39,43,1)
(21,4,1)
(24,32,1)
(31,21,1)
(41,26,1)
(35,43,1)
(38,0,1)
(5,13,1)
(32,2,1)
(13,12,1)
(1,31,1)
(28,5,1)
(15,14,1)
(31,43,1)
(10,35,1)
(2,10,1)
(35,46,1)
(11,24,1)
(46,1,1)
(10,25,1)
(23,17,1)
(27,40,1)
(7,27,1)
(15,7,1)
(30,28,1)
(34,2,1)
(14,29,1)
(14,2,1)
(40,14,1)
(12,43,1)
(32,39,1)
(9,38,1)
(37,11,1)
(23,31,1)
(26,2,1)
(43,36,1)
(36,3,1)
(37,31,2)
(35,43,2)
(13,12,2)
(24,31,2)
(12,31,2)
(32,2,2)
(38,31,2)
(9,31,2)
(13,2,2)
(26,2,2)
(32,39,2)
(31,43,2)
(39,43,2)
(17,2,2)
(10,31,2)
(30,31,2)
(26,31,2)
(29,31,2)
(10,25,2)
(17,31,2)
(39,31,2)
(12,43,2)
(2,10,2)
(32,31,2)
(28,31,2)
(14,2,2)
(15,31,2)
(41,31,2)
(35,31,2)
(7,14,2)
(14,31,2)
(46,31,2)
(5,31,2)
(34,31,2)
(11,31,2)
(2,31,2)
(27,14,2)
(10,35,2)
(1,31,2)
(13,31,2)
(7,27,2)
(40,14,2)
(0,31,2)
-----------------------------------
(0,'A')
(1,dataBuffer)
(2,* dataBuffer = (char *)
(3,data)
(4,data)
(5,dataBuffer)
(6,data)
(7,exit(-1)
(8,dataBuffer)
(9,1)
(10,(char *)
(11,dataBuffer[data-1] = '\\\\0')
(12,data-1)
(13,memset(dataBuffer, 'A', data-1)
(14,dataBuffer == NULL)
(15,dataBuffer)
(16,)
(17,free(dataBuffer)
(18,memset(dataBuffer, \'A\', data-1)
(19,)
(20,)
(21,100)
(22,if (dataBuffer == NULL)
(23,RET)
(24,\'\\\\0\')
(25,char *)
(26,printLine(dataBuffer)
(27,-1)
(28,data)
(29,NULL)
(30,1)
(31,data < 100)
(32,dataBuffer[data-1])
(33,if (data < 100)
(34,dataBuffer)
(35,malloc(data)
(36,CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData)
(37,dataBuffer)
(38,data)
(39,data-1)
(40,1)
(41,dataBuffer)
(42,dataBuffer[data-1] = \'\\\\0\')
(43,data = CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_45_badData)
(44,\'A\')
(45,'\\\\0')
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^