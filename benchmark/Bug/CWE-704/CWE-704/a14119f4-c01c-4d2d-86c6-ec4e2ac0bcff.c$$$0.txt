-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad()
{
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /* Enter: 1e20f, result should be 2147483647 (for bad case) */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)doubleNumber);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
65,66
-----nextToken-----
2,4,9,10,15,17,20,23,25,27,32,34,36,38,40,45,48,50,55,56,60,63,64,66
-----computeFrom-----
7,8
7,9
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad(){    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_07_bad
{    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }}
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /* Enter: 1e20f, result should be 2147483647 (for bad case) */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)doubleNumber);        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(5,18,0)
(26,0,0)
(0,26,0)
(31,23,0)
(0,3,0)
(27,0,0)
(7,8,0)
(13,9,0)
(6,2,0)
(23,15,0)
(25,11,0)
(27,29,0)
(12,27,0)
(1,11,0)
(8,16,0)
(10,23,0)
(12,23,0)
(22,0,0)
(24,23,0)
(18,2,0)
(30,27,0)
(19,18,0)
(27,12,0)
(14,27,0)
(21,29,0)
(27,30,0)
(17,26,0)
(4,18,0)
(29,23,0)
(20,29,0)
(2,18,0)
(19,29,1)
(14,8,1)
(20,11,1)
(27,0,1)
(28,12,1)
(22,2,1)
(4,5,1)
(27,14,1)
(0,26,1)
(27,29,1)
(17,22,1)
(25,1,1)
(8,7,1)
(27,30,1)
(7,2,1)
(12,27,1)
(5,19,1)
(26,17,1)
(29,21,1)
(2,6,1)
(18,4,1)
(21,20,1)
(11,25,1)
(28,11,1)
(2,18,1)
(6,18,1)
(14,0,1)
(27,29,2)
(19,11,2)
(7,2,2)
(2,18,2)
(27,11,2)
(2,11,2)
(27,0,2)
(21,11,2)
(5,11,2)
(12,11,2)
(14,11,2)
(0,2,2)
(4,11,2)
(12,27,2)
(18,11,2)
(0,26,2)
(29,11,2)
(26,2,2)
(6,11,2)
(8,2,2)
(22,2,2)
(20,11,2)
(27,30,2)
(17,2,2)
-----------------------------------
(0,doubleNumber = atof(inputBuffer)
(1,staticFive)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,)
(4,stdin)
(5,CHAR_ARRAY_SIZE)
(6,NULL)
(7,"fgets()
(8,printLine("fgets()
(9,)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,staticFive==5)
(12,printIntLine((int)
(13,if(staticFive==5)
(14,doubleNumber)
(15,)
(16,)
(17,inputBuffer)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,inputBuffer)
(20,doubleNumber)
(21,0)
(22,doubleNumber)
(23,)
(24,doubleNumber)
(25,5)
(26,atof(inputBuffer)
(27,(int)
(28,RET)
(29,doubleNumber = 0)
(30,int)
(31,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^