-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1; /* true */
    data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,59,62,63,68,71,72,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
60,61
60,62
65,66
65,67
69,70
69,71
-----guardedBy-----
33,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_bad(){    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_bad
{    short data;    /* Initialize data */    data = 0;    CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1; /* true */    data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1;
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal
1
data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data);
data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data)
data
data
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data)
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource
CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(37,19,0)
(14,35,0)
(11,18,0)
(45,37,0)
(37,43,0)
(20,30,0)
(3,17,0)
(18,26,0)
(15,31,0)
(9,1,0)
(19,1,0)
(40,43,0)
(36,28,0)
(26,43,0)
(2,21,0)
(22,23,0)
(4,38,0)
(43,40,0)
(26,17,0)
(18,17,0)
(38,19,0)
(34,19,0)
(6,17,0)
(38,23,0)
(30,20,0)
(39,6,0)
(24,20,0)
(23,26,0)
(13,38,0)
(41,26,0)
(32,3,0)
(23,17,0)
(31,19,0)
(1,19,0)
(12,35,0)
(10,23,0)
(0,20,0)
(43,37,0)
(43,26,0)
(21,35,0)
(25,30,0)
(27,21,0)
(30,3,0)
(19,35,0)
(6,26,0)
(28,35,0)
(30,26,0)
(16,17,0)
(1,21,0)
(20,19,0)
(23,38,0)
(5,28,0)
(44,31,0)
(11,6,1)
(1,9,1)
(10,26,1)
(32,30,1)
(28,36,1)
(21,27,1)
(7,31,1)
(30,20,1)
(38,4,1)
(1,21,1)
(9,34,1)
(27,2,1)
(31,19,1)
(25,23,1)
(34,28,1)
(39,3,1)
(37,19,1)
(30,26,1)
(24,0,1)
(7,18,1)
(13,22,1)
(45,41,1)
(0,25,1)
(20,19,1)
(18,26,1)
(6,39,1)
(43,37,1)
(41,31,1)
(43,40,1)
(6,26,1)
(3,32,1)
(37,45,1)
(4,13,1)
(23,38,1)
(19,1,1)
(22,10,1)
(31,15,1)
(18,11,1)
(23,26,1)
(26,43,1)
(44,19,1)
(15,44,1)
(20,24,1)
(38,19,1)
(36,5,1)
(5,21,1)
(26,43,2)
(10,31,2)
(19,1,2)
(30,20,2)
(30,26,2)
(1,21,2)
(43,37,2)
(30,31,2)
(38,31,2)
(6,31,2)
(13,31,2)
(0,31,2)
(20,31,2)
(18,31,2)
(45,31,2)
(37,31,2)
(23,38,2)
(25,31,2)
(18,26,2)
(23,31,2)
(38,19,2)
(24,31,2)
(39,31,2)
(6,26,2)
(41,31,2)
(31,19,2)
(4,31,2)
(37,19,2)
(23,26,2)
(32,31,2)
(43,31,2)
(43,40,2)
(26,31,2)
(22,31,2)
(20,19,2)
(11,31,2)
(3,31,2)
-----------------------------------
(0,data)
(1,CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data)
(2,data)
(3,dataBuffer[data-1] = '\\\\0')
(4,1)
(5,CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal)
(6,printLine(dataBuffer)
(7,RET)
(8,dataBuffer[data-1] = \'\\\\0\')
(9,data)
(10,dataBuffer)
(11,dataBuffer)
(12,data)
(13,data)
(14,if (data < 100)
(15,100)
(16,dataBuffer)
(17,)
(18,free(dataBuffer)
(19,data = CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badSource(data)
(20,data-1)
(21,data = 0)
(22,'A')
(23,memset(dataBuffer, \'A\', data-1)
(24,1)
(25,dataBuffer)
(26,* dataBuffer = (char *)
(27,0)
(28,CWE194_Unexpected_Sign_Extension__connect_socket_malloc_22_badGlobal = 1)
(29,memset(dataBuffer, 'A', data-1)
(30,dataBuffer[data-1])
(31,data < 100)
(32,\'\\\\0\')
(33,\'A\')
(34,data)
(35,)
(36,1)
(37,malloc(data)
(38,data-1)
(39,dataBuffer)
(40,char *)
(41,dataBuffer)
(42,'\\\\0')
(43,(char *)
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^