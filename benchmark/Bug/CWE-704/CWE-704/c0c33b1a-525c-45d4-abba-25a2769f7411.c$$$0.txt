-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_31_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
77,79
77,80
77,81
77,82
77,83
78,79
79,80
79,81
81,82
81,83
83,84
85,86
86,87
86,88
88,89
88,90
88,91
90,91
92,93
94,95
95,96
95,97
95,98
95,99
96,97
98,99
101,102
101,103
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
120,121
120,122
120,123
120,124
121,122
123,124
125,126
127,128
129,130
130,131
130,132
131,132
131,133
132,133
134,135
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,65,68,71,73,76,80,82,84,87,89,91,93,97,99,100,102,103,108,110,111,112,116,117,122,124,126,128,133,135,136,140,142
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
101,102
101,103
105,106
105,107
109,110
109,111
114,115
114,116
130,131
130,132
-----guardedBy-----
33,53
116,135
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_31_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_31_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_31_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        short dataCopy = data;        short data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(47,4,0)
(9,0,0)
(26,28,0)
(45,49,0)
(6,28,0)
(27,58,0)
(34,7,0)
(24,34,0)
(13,44,0)
(35,48,0)
(3,18,0)
(62,4,0)
(21,42,0)
(65,13,0)
(56,48,0)
(63,2,0)
(13,25,0)
(19,33,0)
(16,49,0)
(29,44,0)
(70,40,0)
(36,63,0)
(20,0,0)
(22,62,0)
(12,48,0)
(28,27,0)
(30,44,0)
(55,15,0)
(1,9,0)
(4,63,0)
(40,70,0)
(64,15,0)
(66,7,0)
(4,33,0)
(14,23,0)
(52,12,0)
(62,33,0)
(37,49,0)
(71,5,0)
(18,62,0)
(33,5,0)
(54,62,0)
(53,45,0)
(50,13,0)
(51,0,0)
(17,18,0)
(57,7,0)
(49,34,0)
(68,12,0)
(46,27,0)
(0,33,0)
(10,42,0)
(38,55,0)
(39,49,0)
(40,11,0)
(4,42,0)
(44,0,0)
(32,11,0)
(13,62,0)
(9,44,0)
(43,0,0)
(23,60,0)
(63,40,0)
(7,5,0)
(12,0,0)
(11,40,0)
(55,44,0)
(59,55,0)
(40,63,0)
(55,62,0)
(69,13,0)
(61,34,0)
(27,28,0)
(15,25,0)
(49,45,0)
(58,0,0)
(67,58,0)
(42,5,0)
(11,34,0)
(41,33,0)
(8,4,0)
(48,12,0)
(6,26,1)
(69,50,1)
(47,63,1)
(48,35,1)
(11,32,1)
(53,49,1)
(61,24,1)
(35,56,1)
(64,55,1)
(26,46,1)
(13,44,1)
(65,18,1)
(45,49,1)
(59,13,1)
(49,37,1)
(16,34,1)
(9,44,1)
(4,8,1)
(50,65,1)
(18,62,1)
(13,69,1)
(44,29,1)
(15,64,1)
(42,21,1)
(68,44,1)
(46,12,1)
(38,59,1)
(11,34,1)
(40,11,1)
(47,23,1)
(49,34,1)
(34,61,1)
(9,1,1)
(40,70,1)
(17,58,1)
(37,39,1)
(21,10,1)
(22,54,1)
(1,15,1)
(32,36,1)
(56,52,1)
(12,48,1)
(28,6,1)
(14,45,1)
(63,40,1)
(55,62,1)
(18,3,1)
(29,30,1)
(13,62,1)
(54,4,1)
(4,42,1)
(27,28,1)
(52,68,1)
(62,22,1)
(36,45,1)
(39,16,1)
(31,9,1)
(62,4,1)
(67,27,1)
(8,47,1)
(1,18,1)
(3,17,1)
(23,14,1)
(58,67,1)
(24,42,1)
(4,63,1)
(55,38,1)
(55,44,1)
(30,62,1)
(45,53,1)
(40,11,2)
(9,44,2)
(4,63,2)
(55,18,2)
(11,34,2)
(12,48,2)
(69,18,2)
(65,18,2)
(49,34,2)
(45,49,2)
(38,18,2)
(14,45,2)
(64,18,2)
(62,4,2)
(13,18,2)
(40,45,2)
(11,45,2)
(40,70,2)
(63,40,2)
(50,18,2)
(13,44,2)
(27,28,2)
(13,62,2)
(55,44,2)
(23,45,2)
(18,62,2)
(32,45,2)
(55,62,2)
(63,45,2)
(36,45,2)
(59,18,2)
(15,18,2)
(4,42,2)
-----------------------------------
(0,)
(1,dest)
(2,)
(3,100)
(4,dataCopy = data)
(5,)
(6,1)
(7,)
(8,data)
(9,printLine(dest)
(10,data)
(11,atoi(inputBuffer)
(12,memset(source, \\\'A\\\', 100-1)
(13,memcpy(dest, source, data)
(14,"fgets()
(15,dest[data] = \\\'\\\\0\\\')
(16,inputBuffer)
(17,data)
(18,data < 100)
(19,dataCopy)
(20,if (data < 100)
(21,0)
(22,dataCopy)
(23,printLine("fgets()
(24,inputBuffer)
(25,)
(26,100)
(27,source[100-1])
(28,100-1)
(29,"")
(30,dest)
(31,RET)
(32,inputBuffer)
(33,)
(34,inputBuffer[CHAR_ARRAY_SIZE] = "")
(35,1)
(36,data)
(37,stdin)
(38,data)
(39,CHAR_ARRAY_SIZE)
(40,(short)
(41,data)
(42,data = 0)
(43,dest)
(44,dest[100] = "")
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,source)
(47,dataCopy)
(48,100-1)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,source)
(51,source)
(52,\\\'A\\\')
(53,NULL)
(54,data)
(55,dest[data])
(56,100)
(57,inputBuffer)
(58,source[100-1] = \\\'\\\\0\\\')
(59,dest)
(60,)
(61,"")
(62,data = dataCopy)
(63,data = (short)
(64,\\\'\\\\0\\\')
(65,dest)
(66,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(67,\\\'\\\\0\\\')
(68,source)
(69,data)
(70,short)
(71,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^