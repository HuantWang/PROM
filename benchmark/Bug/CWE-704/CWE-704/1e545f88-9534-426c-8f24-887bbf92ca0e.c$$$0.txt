-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,35,36,40,42,44,47,49,51,53,57,59,60,62,63,68,70,71,72,76,77,82,84,86,88,93,95,96,100,102
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
34,35
34,36
61,62
61,63
65,66
65,67
69,70
69,71
74,75
74,76
90,91
90,92
-----guardedBy-----
76,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memmove_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(29,36,0)
(53,40,0)
(19,24,0)
(32,44,0)
(4,28,0)
(27,19,0)
(0,32,0)
(39,46,0)
(20,29,0)
(32,8,0)
(38,18,0)
(30,3,0)
(33,3,0)
(20,19,0)
(2,28,0)
(35,10,0)
(26,37,0)
(17,7,0)
(23,19,0)
(42,24,0)
(28,32,0)
(14,47,0)
(18,24,0)
(52,20,0)
(34,24,0)
(22,24,0)
(51,40,0)
(44,32,0)
(20,32,0)
(15,28,0)
(46,29,0)
(6,24,0)
(40,29,0)
(20,47,0)
(24,37,0)
(16,42,0)
(21,11,0)
(31,37,0)
(45,20,0)
(7,17,0)
(28,19,0)
(47,43,0)
(18,19,0)
(46,32,0)
(11,42,0)
(41,46,0)
(13,34,0)
(28,29,0)
(11,10,0)
(9,10,0)
(50,17,0)
(5,29,0)
(3,34,0)
(49,7,0)
(10,11,0)
(48,34,0)
(28,43,0)
(17,37,0)
(29,40,0)
(34,3,0)
(1,24,0)
(38,47,1)
(39,42,1)
(11,10,1)
(45,28,1)
(48,13,1)
(23,27,1)
(38,46,1)
(4,46,1)
(34,3,1)
(17,7,1)
(52,45,1)
(27,32,1)
(29,40,1)
(28,29,1)
(46,41,1)
(20,29,1)
(25,18,1)
(33,30,1)
(5,12,1)
(3,33,1)
(27,29,1)
(47,14,1)
(9,21,1)
(19,23,1)
(28,19,1)
(13,19,1)
(21,34,1)
(0,12,1)
(18,19,1)
(20,32,1)
(14,20,1)
(46,32,1)
(20,52,1)
(28,32,1)
(41,39,1)
(12,17,1)
(28,15,1)
(10,35,1)
(20,19,1)
(7,49,1)
(53,51,1)
(51,5,1)
(49,50,1)
(44,0,1)
(40,53,1)
(32,44,1)
(18,38,1)
(16,11,1)
(42,16,1)
(46,29,1)
(2,4,1)
(35,9,1)
(15,2,1)
(30,48,1)
(29,12,2)
(11,10,2)
(2,46,2)
(0,12,2)
(28,32,2)
(4,46,2)
(14,46,2)
(20,19,2)
(40,12,2)
(44,12,2)
(34,3,2)
(46,32,2)
(29,40,2)
(52,46,2)
(47,46,2)
(20,46,2)
(53,12,2)
(28,19,2)
(28,46,2)
(17,7,2)
(15,46,2)
(51,12,2)
(45,46,2)
(32,44,2)
(5,12,2)
(46,29,2)
(20,32,2)
(28,29,2)
(18,19,2)
(20,29,2)
(32,12,2)
-----------------------------------
(0,data)
(1,if (data < 100)
(2,source)
(3,100-1)
(4,dest)
(5,data)
(6,source)
(7,-1)
(8,)
(9,100)
(10,100-1)
(11,source[100-1])
(12,globalReturnsTrueOrFalse()
(13,source)
(14,\\\'\\\\0\\\')
(15,data)
(16,\\\'\\\\0\\\')
(17,data = -1)
(18,printLine(dest)
(19,dest[100] = "")
(20,dest[data])
(21,source)
(22,dest)
(23,"")
(24,)
(25,RET)
(26,data)
(27,dest)
(28,memmove(dest, source, data)
(29,data = 100-1)
(30,100)
(31,if(globalReturnsTrueOrFalse()
(32,data = RAND32()
(33,1)
(34,memset(source, \\\'A\\\', 100-1)
(35,1)
(36,)
(37,)
(38,dest)
(39,data)
(40,100-1)
(41,100)
(42,source[100-1] = \\\'\\\\0\\\')
(43,)
(44,RAND32()
(45,dest)
(46,data < 100)
(47,dest[data] = \\\'\\\\0\\\')
(48,\\\'A\\\')
(49,1)
(50,data)
(51,100)
(52,data)
(53,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^