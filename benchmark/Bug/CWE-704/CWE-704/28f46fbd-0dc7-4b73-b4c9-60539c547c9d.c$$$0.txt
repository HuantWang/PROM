-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_06_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(43,5,0)
(27,18,0)
(15,18,0)
(35,26,0)
(34,18,0)
(27,43,0)
(27,51,0)
(37,5,0)
(44,17,0)
(31,18,0)
(22,51,0)
(48,18,0)
(10,5,0)
(10,15,0)
(26,30,0)
(24,37,0)
(8,31,0)
(45,30,0)
(13,31,0)
(12,32,0)
(50,30,0)
(30,26,0)
(43,27,0)
(52,27,0)
(49,51,0)
(16,32,0)
(18,51,0)
(15,10,0)
(41,0,0)
(48,51,0)
(6,49,0)
(11,51,0)
(36,5,0)
(20,21,0)
(0,28,0)
(40,5,0)
(19,10,0)
(21,47,0)
(39,51,0)
(21,37,0)
(14,27,0)
(4,43,0)
(18,15,0)
(46,38,0)
(29,38,0)
(1,39,0)
(49,18,0)
(26,18,0)
(42,32,0)
(15,9,0)
(5,32,0)
(26,39,0)
(17,5,0)
(28,0,0)
(25,48,0)
(2,21,0)
(23,43,0)
(37,21,0)
(9,15,0)
(28,33,0)
(30,5,0)
(7,17,0)
(52,31,1)
(10,19,1)
(26,18,1)
(49,6,1)
(36,40,1)
(20,38,1)
(44,38,1)
(15,9,1)
(25,49,1)
(48,25,1)
(41,31,1)
(5,36,1)
(30,5,1)
(2,20,1)
(45,35,1)
(37,5,1)
(3,17,1)
(23,14,1)
(26,30,1)
(49,18,1)
(15,10,1)
(19,34,1)
(0,41,1)
(28,0,1)
(17,5,1)
(27,18,1)
(6,39,1)
(39,1,1)
(30,50,1)
(48,18,1)
(43,5,1)
(8,18,1)
(31,13,1)
(50,45,1)
(13,8,1)
(52,28,1)
(35,27,1)
(21,37,1)
(18,15,1)
(17,7,1)
(14,52,1)
(44,21,1)
(43,4,1)
(4,23,1)
(10,5,1)
(3,48,1)
(24,2,1)
(1,26,1)
(31,18,1)
(7,44,1)
(27,43,1)
(29,46,1)
(38,29,1)
(34,17,1)
(46,5,1)
(37,24,1)
(28,31,2)
(39,17,2)
(10,5,2)
(43,5,2)
(48,17,2)
(30,17,2)
(49,17,2)
(27,43,2)
(15,9,2)
(13,17,2)
(48,18,2)
(25,17,2)
(10,17,2)
(45,17,2)
(4,17,2)
(21,38,2)
(27,18,2)
(49,18,2)
(18,17,2)
(15,10,2)
(26,18,2)
(26,30,2)
(15,17,2)
(43,17,2)
(50,17,2)
(6,17,2)
(37,38,2)
(31,17,2)
(28,0,2)
(30,5,2)
(52,17,2)
(26,17,2)
(34,17,2)
(8,17,2)
(35,17,2)
(41,31,2)
(20,38,2)
(23,17,2)
(31,18,2)
(24,38,2)
(27,17,2)
(18,15,2)
(37,5,2)
(2,38,2)
(17,5,2)
(0,31,2)
(1,17,2)
(14,17,2)
(19,17,2)
(21,37,2)
-----------------------------------
(0,-1)
(1,\\\'\\\\0\\\')
(2,"%hd")
(3,RET)
(4,1)
(5,data = 0)
(6,dataBuffer)
(7,100)
(8,dataBuffer)
(9,char *)
(10,malloc(data)
(11,dataBuffer)
(12,data)
(13,NULL)
(14,\\\'A\\\')
(15,(char *)
(16,if(STATIC_CONST_FIVE==5)
(17,data < 100)
(18,* dataBuffer = (char *)
(19,data)
(20,stdin)
(21,fscanf (stdin, "%hd", &data)
(22,if (dataBuffer == NULL)
(23,data)
(24,data)
(25,dataBuffer)
(26,dataBuffer[data-1])
(27,memset(dataBuffer, \\\'A\\\', data-1)
(28,exit(-1)
(29,5)
(30,data-1)
(31,dataBuffer == NULL)
(32,)
(33,)
(34,dataBuffer)
(35,dataBuffer)
(36,0)
(37,&data)
(38,STATIC_CONST_FIVE==5)
(39,dataBuffer[data-1] = \\\'\\\\0\\\')
(40,data)
(41,1)
(42,if (data < 100)
(43,data-1)
(44,data)
(45,data)
(46,STATIC_CONST_FIVE)
(47,)
(48,free(dataBuffer)
(49,printLine(dataBuffer)
(50,1)
(51,)
(52,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^