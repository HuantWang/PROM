-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_10_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,49,0)
(21,48,0)
(42,1,0)
(16,4,0)
(39,7,0)
(43,2,0)
(7,43,0)
(36,43,0)
(11,40,0)
(23,20,0)
(10,0,0)
(23,49,0)
(43,36,0)
(27,38,0)
(35,21,0)
(30,20,0)
(26,48,0)
(29,42,0)
(51,49,0)
(0,20,0)
(6,23,0)
(25,30,0)
(40,5,0)
(28,51,0)
(48,21,0)
(38,49,0)
(50,20,0)
(44,49,0)
(20,21,0)
(23,15,0)
(45,12,0)
(14,2,0)
(17,29,0)
(12,30,0)
(48,43,0)
(30,38,0)
(46,12,0)
(32,42,0)
(42,29,0)
(33,49,0)
(29,43,0)
(9,11,0)
(0,49,0)
(4,20,0)
(12,43,0)
(13,7,0)
(18,2,0)
(30,12,0)
(3,43,0)
(15,43,0)
(31,42,0)
(21,20,0)
(8,4,0)
(40,11,0)
(34,15,0)
(51,20,0)
(21,35,0)
(41,23,0)
(15,23,0)
(37,36,0)
(24,15,0)
(22,2,0)
(13,39,1)
(26,50,1)
(50,7,1)
(40,11,1)
(21,48,1)
(32,47,1)
(21,35,1)
(43,36,1)
(11,9,1)
(23,15,1)
(12,46,1)
(6,40,1)
(17,31,1)
(48,43,1)
(38,27,1)
(28,0,1)
(24,41,1)
(36,37,1)
(10,38,1)
(4,8,1)
(19,7,1)
(16,20,1)
(0,10,1)
(9,4,1)
(20,21,1)
(45,25,1)
(30,20,1)
(48,26,1)
(15,43,1)
(51,28,1)
(12,43,1)
(39,47,1)
(47,43,1)
(37,3,1)
(4,20,1)
(29,43,1)
(0,20,1)
(39,42,1)
(8,16,1)
(31,32,1)
(6,4,1)
(30,12,1)
(29,17,1)
(46,45,1)
(23,20,1)
(42,29,1)
(51,20,1)
(19,51,1)
(7,13,1)
(27,30,1)
(34,24,1)
(25,23,1)
(7,43,1)
(41,6,1)
(15,34,1)
(26,7,2)
(21,48,2)
(40,4,2)
(45,7,2)
(30,12,2)
(46,7,2)
(48,43,2)
(51,7,2)
(30,20,2)
(0,7,2)
(48,7,2)
(21,7,2)
(11,4,2)
(29,47,2)
(8,7,2)
(23,7,2)
(24,7,2)
(27,7,2)
(42,29,2)
(16,7,2)
(28,7,2)
(17,47,2)
(32,47,2)
(38,7,2)
(29,43,2)
(23,20,2)
(20,7,2)
(9,4,2)
(12,7,2)
(41,7,2)
(34,7,2)
(51,20,2)
(7,43,2)
(40,11,2)
(10,7,2)
(31,47,2)
(43,36,2)
(15,43,2)
(15,7,2)
(0,20,2)
(30,7,2)
(20,21,2)
(25,7,2)
(4,20,2)
(50,7,2)
(6,7,2)
(23,15,2)
(12,43,2)
(21,35,2)
(42,47,2)
(4,7,2)
-----------------------------------
(0,printLine(dataBuffer)
(1,)
(2,)
(3,data)
(4,dataBuffer == NULL)
(5,)
(6,dataBuffer)
(7,data < 100)
(8,NULL)
(9,1)
(10,dataBuffer)
(11,-1)
(12,data-1)
(13,100)
(14,data)
(15,data-1)
(16,dataBuffer)
(17,data)
(18,if(globalTrue)
(19,RET)
(20,* dataBuffer = (char *)
(21,(char *)
(22,if (data < 100)
(23,memset(dataBuffer, \\\'A\\\', data-1)
(24,data)
(25,dataBuffer)
(26,data)
(27,\\\'\\\\0\\\')
(28,dataBuffer)
(29,&data)
(30,dataBuffer[data-1])
(31,"%d")
(32,stdin)
(33,if (dataBuffer == NULL)
(34,1)
(35,char *)
(36,-1)
(37,1)
(38,dataBuffer[data-1] = \\\'\\\\0\\\')
(39,data)
(40,exit(-1)
(41,\\\'A\\\')
(42,fscanf(stdin, "%d", &data)
(43,data = -1)
(44,dataBuffer)
(45,data)
(46,1)
(47,globalTrue)
(48,malloc(data)
(49,)
(50,dataBuffer)
(51,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^