-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_21_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    badStatic = 1; /* true */
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_21_bad(){    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_21_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_21_bad
{    int data;    /* Initialize data */    data = -1;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,12,0)
(14,25,0)
(7,14,0)
(37,25,0)
(18,38,0)
(2,35,0)
(12,46,0)
(46,12,0)
(30,11,0)
(47,30,0)
(25,14,0)
(8,46,0)
(12,14,0)
(34,46,0)
(28,14,0)
(9,20,0)
(46,18,0)
(14,20,0)
(28,20,0)
(45,24,0)
(18,4,0)
(12,20,0)
(30,35,0)
(43,4,0)
(1,20,0)
(40,35,0)
(26,41,0)
(30,14,0)
(54,4,0)
(6,32,0)
(16,11,0)
(24,48,0)
(5,25,0)
(25,37,0)
(11,20,0)
(53,18,0)
(35,18,0)
(31,45,0)
(19,5,0)
(3,12,0)
(15,7,0)
(52,14,0)
(39,42,0)
(22,29,0)
(25,5,0)
(0,41,0)
(7,20,0)
(24,45,0)
(38,43,0)
(38,18,0)
(43,42,0)
(13,29,0)
(35,30,0)
(50,38,0)
(32,14,0)
(42,43,0)
(21,32,0)
(23,43,0)
(29,4,0)
(41,18,0)
(33,28,0)
(5,18,0)
(49,4,0)
(52,41,1)
(3,32,1)
(12,14,1)
(32,6,1)
(39,23,1)
(21,14,1)
(3,24,1)
(18,38,1)
(46,34,1)
(14,25,1)
(26,18,1)
(28,14,1)
(13,22,1)
(34,8,1)
(32,14,1)
(46,18,1)
(43,42,1)
(40,47,1)
(5,19,1)
(35,18,1)
(53,29,1)
(7,14,1)
(2,40,1)
(12,46,1)
(33,11,1)
(44,41,1)
(25,37,1)
(5,18,1)
(41,18,1)
(6,21,1)
(11,16,1)
(42,39,1)
(16,30,1)
(0,26,1)
(24,45,1)
(22,43,1)
(38,43,1)
(8,10,1)
(29,13,1)
(10,3,1)
(38,50,1)
(41,0,1)
(45,31,1)
(50,53,1)
(25,5,1)
(15,28,1)
(31,32,1)
(7,15,1)
(44,7,1)
(19,52,1)
(28,33,1)
(30,14,1)
(47,12,1)
(30,35,1)
(35,2,1)
(2,41,2)
(41,18,2)
(16,41,2)
(45,32,2)
(12,41,2)
(7,41,2)
(3,41,2)
(30,41,2)
(30,14,2)
(47,41,2)
(11,41,2)
(28,41,2)
(31,32,2)
(5,18,2)
(5,41,2)
(14,41,2)
(10,41,2)
(21,41,2)
(15,41,2)
(12,14,2)
(43,42,2)
(32,41,2)
(18,38,2)
(32,14,2)
(19,41,2)
(34,41,2)
(46,41,2)
(28,14,2)
(12,46,2)
(25,41,2)
(25,5,2)
(25,37,2)
(35,18,2)
(8,41,2)
(24,32,2)
(35,41,2)
(30,35,2)
(7,14,2)
(14,25,2)
(40,41,2)
(38,43,2)
(46,18,2)
(24,45,2)
(52,41,2)
(6,41,2)
(33,41,2)
-----------------------------------
(0,100)
(1,dataBuffer)
(2,1)
(3,dataBuffer)
(4,)
(5,malloc(data)
(6,NULL)
(7,free(dataBuffer)
(8,data)
(9,if (dataBuffer == NULL)
(10,'A')
(11,dataBuffer[data-1] = '\\\\0')
(12,memset(dataBuffer, 'A', data-1)
(13,1)
(14,* dataBuffer = (char *)
(15,dataBuffer)
(16,'\\\\0')
(17,memset(dataBuffer, \'A\', data-1)
(18,data = badSource(data)
(19,data)
(20,)
(21,dataBuffer)
(22,badStatic)
(23,data)
(24,exit(-1)
(25,(char *)
(26,data)
(27,dataBuffer[data-1] = \'\\\\0\')
(28,printLine(dataBuffer)
(29,badStatic = 1)
(30,dataBuffer[data-1])
(31,1)
(32,dataBuffer == NULL)
(33,dataBuffer)
(34,1)
(35,data-1)
(36,\'A\')
(37,char *)
(38,badSource(data)
(39,1)
(40,data)
(41,data < 100)
(42,-1)
(43,data = -1)
(44,RET)
(45,-1)
(46,data-1)
(47,dataBuffer)
(48,)
(49,if (data < 100)
(50,data)
(51,\'\\\\0\')
(52,dataBuffer)
(53,data)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^