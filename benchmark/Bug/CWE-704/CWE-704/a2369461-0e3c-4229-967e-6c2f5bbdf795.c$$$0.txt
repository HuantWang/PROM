-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
67,70
67,71
67,72
67,73
68,69
69,70
69,71
71,72
71,73
71,74
74,75
75,76
75,77
76,77
76,78
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
105,107
106,107
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
115,116
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,70,72,73,77,79,82,84,88,90,95,97,101,103,104,107,108,113,116,117,118,122,124,128,130
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
63,64
63,65
86,87
86,88
105,106
105,107
110,111
110,112
114,115
114,116
-----guardedBy-----
39,55
65,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(65,5,0)
(66,3,0)
(12,50,0)
(51,50,0)
(24,27,0)
(28,50,0)
(56,45,0)
(1,19,0)
(17,30,0)
(62,45,0)
(18,56,0)
(58,25,0)
(4,37,0)
(37,50,0)
(9,0,0)
(47,45,0)
(6,47,0)
(32,19,0)
(14,32,0)
(20,58,0)
(2,4,0)
(43,66,0)
(54,21,0)
(59,21,0)
(35,30,0)
(62,5,0)
(45,30,0)
(26,32,0)
(29,66,0)
(50,6,0)
(60,12,0)
(15,62,0)
(55,4,0)
(38,45,0)
(34,46,0)
(5,50,0)
(13,54,0)
(64,43,0)
(41,16,0)
(53,32,0)
(9,43,0)
(62,9,0)
(6,63,0)
(51,21,0)
(32,66,0)
(63,6,0)
(44,5,0)
(46,41,0)
(36,9,0)
(27,21,0)
(11,12,0)
(4,45,0)
(37,54,0)
(42,30,0)
(39,62,0)
(50,21,0)
(45,56,0)
(40,3,0)
(33,51,0)
(3,22,0)
(7,21,0)
(36,45,0)
(19,32,0)
(5,62,0)
(31,66,0)
(47,6,0)
(52,3,0)
(6,50,0)
(4,9,0)
(48,9,0)
(47,9,0)
(43,9,0)
(49,37,0)
(10,36,0)
(37,4,0)
(41,46,0)
(5,21,0)
(23,36,0)
(27,50,0)
(61,47,0)
(12,50,1)
(66,29,1)
(55,2,1)
(2,49,1)
(56,18,1)
(10,9,1)
(47,61,1)
(27,50,1)
(48,19,1)
(28,36,1)
(50,6,1)
(41,46,1)
(47,45,1)
(45,56,1)
(39,15,1)
(46,34,1)
(33,27,1)
(11,50,1)
(23,10,1)
(26,66,1)
(12,60,1)
(51,50,1)
(27,24,1)
(34,12,1)
(36,23,1)
(36,45,1)
(10,58,1)
(36,9,1)
(31,57,1)
(4,9,1)
(53,26,1)
(19,32,1)
(29,31,1)
(61,28,1)
(32,66,1)
(64,48,1)
(47,9,1)
(54,13,1)
(8,36,1)
(4,45,1)
(1,32,1)
(6,47,1)
(6,63,1)
(65,41,1)
(51,33,1)
(32,14,1)
(37,4,1)
(13,37,1)
(10,57,1)
(57,45,1)
(62,9,1)
(62,45,1)
(9,43,1)
(19,1,1)
(18,38,1)
(49,5,1)
(43,66,1)
(24,54,1)
(20,19,1)
(5,62,1)
(43,64,1)
(14,53,1)
(65,12,1)
(15,44,1)
(37,50,1)
(58,20,1)
(8,51,1)
(5,50,1)
(62,39,1)
(44,65,1)
(60,11,1)
(4,55,1)
(34,12,2)
(50,36,2)
(32,57,2)
(4,9,2)
(36,9,2)
(37,50,2)
(49,36,2)
(61,36,2)
(44,36,2)
(19,57,2)
(29,57,2)
(27,50,2)
(50,6,2)
(47,9,2)
(51,50,2)
(47,45,2)
(13,36,2)
(14,57,2)
(41,46,2)
(9,19,2)
(9,43,2)
(27,36,2)
(62,36,2)
(4,45,2)
(15,36,2)
(12,50,2)
(41,12,2)
(62,9,2)
(5,62,2)
(55,36,2)
(53,57,2)
(6,36,2)
(1,57,2)
(4,36,2)
(43,66,2)
(2,36,2)
(33,36,2)
(43,19,2)
(58,19,2)
(60,36,2)
(37,4,2)
(65,36,2)
(24,36,2)
(26,57,2)
(37,36,2)
(20,19,2)
(66,57,2)
(64,19,2)
(39,36,2)
(12,36,2)
(5,50,2)
(11,36,2)
(19,32,2)
(48,19,2)
(51,36,2)
(46,12,2)
(31,57,2)
(6,63,2)
(36,45,2)
(54,36,2)
(45,56,2)
(32,66,2)
(5,36,2)
(28,36,2)
(6,47,2)
(47,36,2)
(62,45,2)
-----------------------------------
(0,)
(1,NULL)
(2,data)
(3,)
(4,data-1)
(5,memset(dataBuffer, \\\'A\\\', data-1)
(6,(char *)
(7,dataBuffer)
(8,RET)
(9,data = atoi(inputBuffer)
(10,data)
(11,dataBuffer)
(12,dataBuffer == NULL)
(13,\\\'\\\\0\\\')
(14,stdin)
(15,data)
(16,)
(17,if(globalReturnsTrue()
(18,1)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,"fgets()
(21,)
(22,)
(23,100)
(24,dataBuffer)
(25,)
(26,inputBuffer)
(27,printLine(dataBuffer)
(28,dataBuffer)
(29,"")
(30,)
(31,inputBuffer)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,dataBuffer)
(34,1)
(35,data)
(36,data < 100)
(37,dataBuffer[data-1])
(38,data)
(39,1)
(40,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,exit(-1)
(42,if (data < 100)
(43,atoi(inputBuffer)
(44,\\\'A\\\')
(45,data = -1)
(46,-1)
(47,malloc(data)
(48,data)
(49,dataBuffer)
(50,* dataBuffer = (char *)
(51,free(dataBuffer)
(52,inputBuffer)
(53,CHAR_ARRAY_SIZE)
(54,dataBuffer[data-1] = \\\'\\\\0\\\')
(55,1)
(56,-1)
(57,globalReturnsTrue()
(58,printLine("fgets()
(59,if (dataBuffer == NULL)
(60,NULL)
(61,data)
(62,data-1)
(63,char *)
(64,inputBuffer)
(65,dataBuffer)
(66,inputBuffer[CHAR_ARRAY_SIZE] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^