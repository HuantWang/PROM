-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_14_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
63,69
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,68,70,73,75,77,79,83,85,86,88,89,94,96,97,98,102,103,108,110,112,114,119,121,122,126,128
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
87,88
87,89
91,92
91,93
95,96
95,97
100,101
100,102
116,117
116,118
-----guardedBy-----
40,56
102,121
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_14_bad(){    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_14_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_14_bad
{    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(47,39,0)
(3,0,0)
(64,5,0)
(5,60,0)
(11,8,0)
(24,45,0)
(24,42,0)
(41,30,0)
(8,41,0)
(24,41,0)
(45,59,0)
(4,5,0)
(31,39,0)
(66,37,0)
(27,18,0)
(22,50,0)
(37,45,0)
(0,3,0)
(58,3,0)
(14,5,0)
(19,46,0)
(62,15,0)
(8,18,0)
(36,55,0)
(54,41,0)
(21,41,0)
(40,1,0)
(59,60,0)
(34,21,0)
(57,46,0)
(65,31,0)
(13,59,0)
(53,24,0)
(30,39,0)
(45,25,0)
(56,31,0)
(26,45,0)
(10,60,0)
(63,30,0)
(15,22,0)
(7,4,0)
(21,30,0)
(49,60,0)
(50,30,0)
(24,31,0)
(51,30,0)
(5,4,0)
(32,65,0)
(28,24,0)
(6,0,0)
(8,45,0)
(35,5,0)
(59,45,0)
(20,15,0)
(2,37,0)
(48,8,0)
(37,31,0)
(17,22,0)
(9,50,0)
(44,0,0)
(31,65,0)
(38,39,0)
(55,12,0)
(8,31,0)
(60,1,0)
(23,3,0)
(16,24,0)
(22,15,0)
(61,30,0)
(18,42,0)
(33,1,0)
(29,41,0)
(0,30,0)
(1,52,0)
(24,41,1)
(8,45,1)
(37,31,1)
(65,32,1)
(35,60,1)
(60,49,1)
(19,57,1)
(57,31,1)
(3,23,1)
(16,37,1)
(49,10,1)
(8,48,1)
(29,46,1)
(50,9,1)
(34,18,1)
(66,2,1)
(59,60,1)
(15,62,1)
(21,34,1)
(14,64,1)
(24,31,1)
(0,3,1)
(9,22,1)
(31,65,1)
(41,54,1)
(28,53,1)
(13,26,1)
(6,41,1)
(59,13,1)
(26,4,1)
(5,60,1)
(18,27,1)
(24,28,1)
(34,37,1)
(53,16,1)
(36,4,1)
(44,6,1)
(23,58,1)
(45,59,1)
(8,41,1)
(64,35,1)
(37,66,1)
(7,5,1)
(43,21,1)
(58,44,1)
(46,19,1)
(10,46,1)
(4,7,1)
(2,50,1)
(55,36,1)
(27,8,1)
(24,45,1)
(37,45,1)
(22,15,1)
(62,20,1)
(21,41,1)
(8,31,1)
(20,17,1)
(5,14,1)
(29,55,1)
(54,29,1)
(4,5,1)
(29,45,1)
(11,24,1)
(17,0,1)
(32,56,1)
(48,11,1)
(59,4,2)
(27,37,2)
(22,15,2)
(24,37,2)
(16,37,2)
(37,45,2)
(35,46,2)
(59,60,2)
(5,46,2)
(4,5,2)
(8,41,2)
(10,46,2)
(4,46,2)
(45,4,2)
(0,3,2)
(24,31,2)
(26,4,2)
(49,46,2)
(64,46,2)
(24,45,2)
(14,46,2)
(45,59,2)
(37,31,2)
(53,37,2)
(8,31,2)
(8,45,2)
(31,65,2)
(8,37,2)
(18,37,2)
(24,41,2)
(60,46,2)
(13,4,2)
(7,46,2)
(36,4,2)
(11,37,2)
(28,37,2)
(5,60,2)
(48,37,2)
(55,4,2)
(21,41,2)
-----------------------------------
(0,memset(source, \\\'A\\\', 100-1)
(1,)
(2,data)
(3,100-1)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,source)
(7,NULL)
(8,dest[data])
(9,\\\'\\\\0\\\')
(10,inputBuffer)
(11,dest)
(12,)
(13,inputBuffer)
(14,stdin)
(15,100-1)
(16,dest)
(17,source)
(18,dest[data] = \\\'\\\\0\\\')
(19,5)
(20,100)
(21,printLine(dest)
(22,source[100-1])
(23,1)
(24,memcpy(dest, source, data)
(25,)
(26,data)
(27,\\\'\\\\0\\\')
(28,data)
(29,dest)
(30,)
(31,data = -1)
(32,1)
(33,inputBuffer)
(34,dest)
(35,inputBuffer)
(36,"fgets()
(37,data < 100)
(38,if(globalFive==5)
(39,)
(40,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,dest[100] = "")
(42,)
(43,RET)
(44,\\\'A\\\')
(45,data = atoi(inputBuffer)
(46,globalFive==5)
(47,data)
(48,data)
(49,"")
(50,source[100-1] = \\\'\\\\0\\\')
(51,source)
(52,)
(53,source)
(54,"")
(55,printLine("fgets()
(56,data)
(57,globalFive)
(58,100)
(59,atoi(inputBuffer)
(60,inputBuffer[CHAR_ARRAY_SIZE] = "")
(61,dest)
(62,1)
(63,if (data < 100)
(64,CHAR_ARRAY_SIZE)
(65,-1)
(66,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^