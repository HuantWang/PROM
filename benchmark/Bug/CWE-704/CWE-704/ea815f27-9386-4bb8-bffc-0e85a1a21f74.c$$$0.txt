-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_52c_badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_52c_badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_52c_badSink(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_52c_badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(36,4,0)
(31,34,0)
(19,0,0)
(0,19,0)
(21,4,0)
(23,30,0)
(43,17,0)
(12,16,0)
(17,43,0)
(0,4,0)
(4,43,0)
(3,20,0)
(2,1,0)
(30,7,0)
(37,30,0)
(15,24,0)
(33,22,0)
(18,24,0)
(39,22,0)
(24,4,0)
(1,20,0)
(22,33,0)
(25,12,0)
(19,16,0)
(14,20,0)
(11,36,0)
(6,0,0)
(30,16,0)
(7,30,0)
(4,20,0)
(0,20,0)
(7,4,0)
(33,29,0)
(9,40,0)
(34,43,0)
(34,16,0)
(32,7,0)
(35,19,0)
(28,4,0)
(13,0,0)
(26,19,0)
(36,20,0)
(38,12,0)
(43,34,0)
(8,21,0)
(7,1,0)
(21,20,0)
(43,4,0)
(5,36,1)
(33,22,1)
(21,4,1)
(12,16,1)
(4,43,1)
(31,28,1)
(6,33,1)
(37,32,1)
(34,16,1)
(15,18,1)
(35,13,1)
(43,17,1)
(24,15,1)
(13,6,1)
(23,37,1)
(39,24,1)
(24,4,1)
(8,1,1)
(11,21,1)
(43,34,1)
(7,4,1)
(30,23,1)
(21,8,1)
(32,0,1)
(30,16,1)
(7,30,1)
(22,39,1)
(19,16,1)
(5,12,1)
(34,31,1)
(0,4,1)
(19,26,1)
(28,12,1)
(26,35,1)
(0,19,1)
(12,38,1)
(38,25,1)
(1,2,1)
(36,11,1)
(18,4,1)
(6,24,1)
(36,4,1)
(2,7,1)
(36,4,2)
(43,12,2)
(2,12,2)
(24,12,2)
(23,12,2)
(34,12,2)
(32,12,2)
(0,12,2)
(0,4,2)
(28,12,2)
(19,16,2)
(11,12,2)
(19,12,2)
(8,12,2)
(4,12,2)
(26,12,2)
(7,30,2)
(18,12,2)
(30,16,2)
(7,4,2)
(12,16,2)
(34,16,2)
(36,12,2)
(39,24,2)
(21,4,2)
(13,12,2)
(43,17,2)
(33,24,2)
(0,19,2)
(24,4,2)
(4,43,2)
(21,12,2)
(22,24,2)
(1,12,2)
(15,12,2)
(33,22,2)
(35,12,2)
(30,12,2)
(6,12,2)
(7,12,2)
(37,12,2)
(43,34,2)
(31,12,2)
-----------------------------------
(0,memset(dataBuffer, \'A\', data-1)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,\'\\\\0\')
(3,if (dataBuffer == NULL)
(4,* dataBuffer = (char *)
(5,RET)
(6,dataBuffer)
(7,dataBuffer[data-1])
(8,dataBuffer)
(9,if (data < 100)
(10,dataBuffer[data-1] = '\\\\0')
(11,dataBuffer)
(12,data < 100)
(13,\'A\')
(14,dataBuffer)
(15,NULL)
(16,int data)
(17,char *)
(18,dataBuffer)
(19,data-1)
(20,)
(21,printLine(dataBuffer)
(22,-1)
(23,1)
(24,dataBuffer == NULL)
(25,data)
(26,1)
(27,'\\\\0')
(28,dataBuffer)
(29,)
(30,data-1)
(31,data)
(32,dataBuffer)
(33,exit(-1)
(34,malloc(data)
(35,data)
(36,free(dataBuffer)
(37,data)
(38,100)
(39,1)
(40,)
(41,'A')
(42,memset(dataBuffer, 'A', data-1)
(43,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^