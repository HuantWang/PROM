-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
44,45
46,47
46,48
46,49
46,50
46,51
46,52
47,48
48,49
48,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,41,42,45,49,51,53,56,58,60,62,66,68,69,71,72,77,79,80,81,85,86,91,93,95,97,102,104,105,109,111
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
36,37
36,38
70,71
70,72
74,75
74,76
78,79
78,80
83,84
83,85
99,100
99,101
-----guardedBy-----
85,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_17_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(48,56,0)
(41,30,0)
(17,24,0)
(27,54,0)
(22,36,0)
(0,33,0)
(20,30,0)
(56,0,0)
(38,50,0)
(54,50,0)
(56,31,0)
(26,0,0)
(15,25,0)
(36,23,0)
(49,36,0)
(13,33,0)
(11,5,0)
(1,53,0)
(44,7,0)
(51,40,0)
(3,33,0)
(21,52,0)
(40,53,0)
(54,14,0)
(36,22,0)
(29,50,0)
(56,22,0)
(23,36,0)
(50,33,0)
(22,6,0)
(14,54,0)
(2,30,0)
(10,56,0)
(9,52,0)
(45,33,0)
(5,0,0)
(25,24,0)
(34,40,0)
(19,32,0)
(18,50,0)
(42,29,0)
(47,14,0)
(7,24,0)
(39,56,0)
(7,22,0)
(12,54,0)
(16,14,0)
(32,31,0)
(43,0,0)
(35,20,0)
(7,0,0)
(24,50,0)
(8,24,0)
(56,24,0)
(52,30,0)
(7,32,0)
(5,22,0)
(36,49,0)
(53,40,0)
(37,50,0)
(53,29,0)
(55,7,0)
(28,22,0)
(25,50,0)
(46,5,0)
(20,35,1)
(7,22,1)
(56,22,1)
(30,2,1)
(14,16,1)
(4,25,1)
(54,14,1)
(0,26,1)
(20,30,1)
(29,42,1)
(10,48,1)
(8,17,1)
(21,9,1)
(34,1,1)
(48,5,1)
(52,30,1)
(15,32,1)
(7,0,1)
(12,27,1)
(5,0,1)
(17,52,1)
(9,30,1)
(52,21,1)
(7,44,1)
(5,46,1)
(9,20,1)
(35,22,1)
(11,29,1)
(56,24,1)
(19,7,1)
(16,47,1)
(22,36,1)
(42,53,1)
(44,55,1)
(41,0,1)
(40,51,1)
(7,24,1)
(46,11,1)
(55,56,1)
(27,24,1)
(53,40,1)
(56,0,1)
(47,12,1)
(32,19,1)
(15,5,1)
(28,52,1)
(56,39,1)
(26,43,1)
(36,49,1)
(5,22,1)
(39,10,1)
(2,41,1)
(23,28,1)
(25,24,1)
(36,23,1)
(51,34,1)
(24,8,1)
(25,15,1)
(1,54,1)
(48,5,2)
(21,52,2)
(9,52,2)
(7,5,2)
(39,5,2)
(56,22,2)
(55,5,2)
(7,24,2)
(56,0,2)
(35,52,2)
(56,5,2)
(53,40,2)
(36,49,2)
(54,14,2)
(7,22,2)
(28,52,2)
(5,0,2)
(56,24,2)
(19,5,2)
(7,0,2)
(32,5,2)
(36,52,2)
(36,23,2)
(22,52,2)
(22,36,2)
(44,5,2)
(20,52,2)
(25,24,2)
(20,30,2)
(23,52,2)
(5,22,2)
(52,52,2)
(10,5,2)
(52,30,2)
-----------------------------------
(0,data = 0)
(1,source)
(2,0)
(3,for(i = 0; i < 1; i++)
(4,RET)
(5,data < 100)
(6,)
(7,dest[data])
(8,"")
(9,i)
(10,source)
(11,data)
(12,\\\'A\\\')
(13,i)
(14,100-1)
(15,dest)
(16,1)
(17,dest)
(18,source)
(19,\\\'\\\\0\\\')
(20,i++)
(21,1)
(22,data = (short)
(23,RAND32()
(24,dest[100] = "")
(25,printLine(dest)
(26,0)
(27,source)
(28,data)
(29,source[100-1] = \\\'\\\\0\\\')
(30,i = 0)
(31,)
(32,dest[data] = \\\'\\\\0\\\')
(33,)
(34,100)
(35,i)
(36,(short)
(37,dest)
(38,if (data < 100)
(39,data)
(40,100-1)
(41,i)
(42,\\\'\\\\0\\\')
(43,data)
(44,data)
(45,data)
(46,100)
(47,100)
(48,dest)
(49,short)
(50,)
(51,1)
(52,i < 1)
(53,source[100-1])
(54,memset(source, \\\'A\\\', 100-1)
(55,dest)
(56,memmove(dest, source, data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^