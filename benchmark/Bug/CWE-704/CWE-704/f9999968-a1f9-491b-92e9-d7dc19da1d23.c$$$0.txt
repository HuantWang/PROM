-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_14_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalFive==5)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_14_bad(){    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_14_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_14_bad
{    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalFive==5)    {        /* FLAW: Use a negative number */        data = -1;    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(56,41,0)
(21,18,0)
(37,26,0)
(4,52,0)
(44,6,0)
(23,37,0)
(41,26,0)
(29,15,0)
(23,5,0)
(1,52,0)
(26,34,0)
(6,4,0)
(48,4,0)
(18,9,0)
(31,51,0)
(32,0,0)
(45,41,0)
(25,9,0)
(22,40,0)
(52,4,0)
(16,14,0)
(27,48,0)
(36,9,0)
(8,36,0)
(13,48,0)
(47,18,0)
(55,9,0)
(30,6,0)
(26,14,0)
(33,14,0)
(37,23,0)
(46,37,0)
(48,26,0)
(31,10,0)
(2,0,0)
(49,40,0)
(32,6,0)
(7,11,0)
(43,15,0)
(6,26,0)
(10,31,0)
(34,26,0)
(37,4,0)
(18,36,0)
(11,9,0)
(25,36,0)
(28,34,0)
(32,36,0)
(4,3,0)
(6,32,0)
(15,36,0)
(42,26,0)
(5,23,0)
(20,14,0)
(18,48,0)
(11,36,0)
(36,23,0)
(12,4,0)
(0,9,0)
(38,25,0)
(17,9,0)
(41,4,0)
(50,10,0)
(48,18,0)
(39,32,0)
(23,36,0)
(30,39,1)
(36,23,1)
(56,45,1)
(48,27,1)
(19,11,1)
(18,48,1)
(38,0,1)
(32,36,1)
(21,31,1)
(40,22,1)
(41,26,1)
(23,5,1)
(15,29,1)
(2,32,1)
(37,26,1)
(28,42,1)
(48,4,1)
(34,28,1)
(48,26,1)
(13,47,1)
(25,38,1)
(10,50,1)
(45,4,1)
(6,44,1)
(37,46,1)
(19,41,1)
(7,25,1)
(47,21,1)
(25,36,1)
(21,15,1)
(46,8,1)
(12,40,1)
(32,6,1)
(44,30,1)
(41,56,1)
(11,36,1)
(52,1,1)
(37,4,1)
(4,52,1)
(49,26,1)
(0,2,1)
(43,36,1)
(22,49,1)
(29,43,1)
(27,13,1)
(18,36,1)
(8,41,1)
(15,36,1)
(26,34,1)
(31,10,1)
(6,26,1)
(45,40,1)
(1,12,1)
(39,18,1)
(11,7,1)
(6,4,1)
(50,15,1)
(23,37,1)
(41,4,1)
(6,4,2)
(23,37,2)
(2,41,2)
(37,41,2)
(4,52,2)
(39,41,2)
(26,34,2)
(31,10,2)
(11,36,2)
(13,41,2)
(37,26,2)
(36,41,2)
(8,41,2)
(30,41,2)
(31,15,2)
(11,41,2)
(0,41,2)
(41,4,2)
(46,41,2)
(4,40,2)
(29,41,2)
(6,26,2)
(23,5,2)
(7,41,2)
(12,40,2)
(1,40,2)
(27,41,2)
(18,48,2)
(32,36,2)
(21,41,2)
(48,4,2)
(23,41,2)
(6,41,2)
(41,26,2)
(25,36,2)
(15,41,2)
(18,36,2)
(10,15,2)
(48,41,2)
(25,41,2)
(18,41,2)
(48,26,2)
(36,23,2)
(47,41,2)
(32,6,2)
(37,4,2)
(15,36,2)
(43,41,2)
(38,41,2)
(44,41,2)
(32,41,2)
(50,15,2)
(52,40,2)
-----------------------------------
(0,dataBuffer[data-1] = \'\\\\0\')
(1,1)
(2,\'\\\\0\')
(3,)
(4,data = -1)
(5,char *)
(6,data-1)
(7,dataBuffer)
(8,dataBuffer)
(9,)
(10,-1)
(11,free(dataBuffer)
(12,data)
(13,data)
(14,)
(15,dataBuffer == NULL)
(16,if(globalFive==5)
(17,if (dataBuffer == NULL)
(18,memset(dataBuffer, 'A', data-1)
(19,RET)
(20,data)
(21,dataBuffer)
(22,5)
(23,(char *)
(24,dataBuffer[data-1] = '\\\\0')
(25,printLine(dataBuffer)
(26,data = -1)
(27,1)
(28,1)
(29,NULL)
(30,data)
(31,exit(-1)
(32,dataBuffer[data-1])
(33,if (data < 100)
(34,-1)
(35,memset(dataBuffer, \'A\', data-1)
(36,* dataBuffer = (char *)
(37,malloc(data)
(38,dataBuffer)
(39,dataBuffer)
(40,globalFive==5)
(41,data < 100)
(42,data)
(43,dataBuffer)
(44,1)
(45,data)
(46,data)
(47,\'A\')
(48,data-1)
(49,globalFive)
(50,1)
(51,)
(52,-1)
(53,'\\\\0')
(54,'A')
(55,dataBuffer)
(56,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^