-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memmove_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                /* FLAW: Use a value input from the network */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
19,22
19,23
19,24
19,25
19,26
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
53,55
54,55
54,56
54,57
54,58
54,59
54,60
54,61
54,62
54,63
54,64
54,65
54,66
55,56
56,57
56,58
57,58
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
81,82
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
115,117
116,117
118,119
120,121
120,122
121,122
121,123
122,123
122,124
122,125
122,126
123,124
125,126
127,128
127,129
128,129
128,130
129,130
131,132
133,134
134,135
136,137
137,138
138,139
140,141
142,143
144,145
145,146
145,147
146,147
148,149
148,150
148,151
148,152
148,153
149,150
151,152
153,154
155,156
155,157
156,157
160,161
160,162
161,162
161,163
162,163
162,164
163,164
165,166
167,168
167,169
168,169
171,172
173,174
174,175
174,176
175,176
175,177
176,177
178,179
181,182
182,183
182,184
183,184
185,186
185,187
186,187
188,189
190,191
190,192
190,193
191,192
191,193
192,193
192,194
193,194
195,196
197,198
197,199
198,199
200,201
202,203
203,204
204,205
204,206
205,206
207,208
209,210
210,211
211,212
211,213
212,213
214,215
217,218
217,219
218,219
218,220
219,220
221,222
223,224
224,225
225,226
225,227
226,227
228,229
230,231
230,232
230,233
230,234
230,235
230,236
231,232
232,233
232,234
234,235
234,236
236,237
238,239
239,240
239,241
241,242
241,243
241,244
243,244
245,246
247,248
248,249
248,250
248,251
248,252
249,250
251,252
254,255
254,256
257,258
258,259
258,260
259,260
259,261
260,261
262,263
262,264
266,267
266,268
267,268
267,269
268,269
271,272
271,273
272,273
273,274
273,275
273,276
273,277
274,275
276,277
278,279
280,281
282,283
283,284
283,285
284,285
284,286
285,286
287,288
290,291
291,292
291,293
292,293
294,295
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,33,35,39,41,44,47,49,52,58,61,63,65,67,71,73,75,79,82,83,87,92,93,95,101,102,103,106,108,113,114,117,119,124,126,130,132,135,139,141,143,147,150,152,154,157,158,159,164,166,169,170,172,177,179,180,184,187,189,194,196,199,201,206,208,213,215,216,220,222,227,229,233,235,237,240,242,244,246,250,252,253,255,256,261,263,264,265,269,270,275,277,279,281,286,288,289,293,295
-----computeFrom-----
12,13
12,14
56,57
56,58
69,70
69,71
89,90
89,91
97,98
97,99
110,111
110,112
121,122
121,123
145,146
145,147
155,156
155,157
161,162
161,163
162,163
162,164
167,168
167,169
174,175
174,176
182,183
182,184
191,192
191,193
192,193
192,194
197,198
197,199
204,205
204,206
211,212
211,213
218,219
218,220
254,255
254,256
258,259
258,260
262,263
262,264
267,268
267,269
283,284
283,285
-----guardedBy-----
220,229
269,288
-----guardedByNegation-----
199,215
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memmove_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__connect_socket_memmove_02_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_memmove_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                /* FLAW: Use a value input from the network */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(179,81,0)
(176,91,0)
(58,130,0)
(84,36,0)
(39,104,0)
(120,157,0)
(141,132,0)
(65,32,0)
(169,40,0)
(154,15,0)
(99,85,0)
(168,81,0)
(87,61,0)
(31,146,0)
(37,40,0)
(27,4,0)
(40,83,0)
(0,163,0)
(113,107,0)
(123,98,0)
(173,55,0)
(4,131,0)
(135,157,0)
(79,132,0)
(151,53,0)
(12,126,0)
(44,103,0)
(54,100,0)
(94,128,0)
(117,53,0)
(148,1,0)
(37,107,0)
(126,157,0)
(45,25,0)
(145,53,0)
(20,13,0)
(32,112,0)
(160,45,0)
(4,126,0)
(18,126,0)
(8,147,0)
(149,139,0)
(12,152,0)
(109,120,0)
(95,63,0)
(75,97,0)
(37,176,0)
(77,18,0)
(122,135,0)
(107,155,0)
(28,1,0)
(149,176,0)
(30,12,0)
(102,1,0)
(125,126,0)
(108,73,0)
(24,1,0)
(155,107,0)
(180,44,0)
(67,100,0)
(27,130,0)
(163,15,0)
(71,42,0)
(63,25,0)
(153,3,0)
(90,18,0)
(152,12,0)
(46,172,0)
(158,155,0)
(69,161,0)
(49,89,0)
(69,126,0)
(22,53,0)
(149,82,0)
(12,61,0)
(127,157,0)
(5,4,0)
(19,83,0)
(175,53,0)
(23,37,0)
(177,44,0)
(70,97,0)
(26,32,0)
(2,150,0)
(61,12,0)
(166,157,0)
(144,40,0)
(27,101,0)
(147,126,0)
(126,147,0)
(149,107,0)
(41,103,0)
(4,159,0)
(55,176,0)
(59,147,0)
(130,27,0)
(9,16,0)
(1,83,0)
(15,88,0)
(129,149,0)
(143,157,0)
(119,172,0)
(106,131,0)
(118,69,0)
(80,138,0)
(52,152,0)
(74,13,0)
(33,53,0)
(42,71,0)
(82,1,0)
(178,26,0)
(43,12,0)
(134,176,0)
(34,36,0)
(132,53,0)
(98,10,0)
(64,38,0)
(114,38,0)
(38,114,0)
(36,138,0)
(131,4,0)
(25,63,0)
(10,89,0)
(162,53,0)
(53,167,0)
(171,148,0)
(81,1,0)
(18,100,0)
(73,127,0)
(138,114,0)
(13,127,0)
(15,163,0)
(47,98,0)
(69,100,0)
(97,128,0)
(56,157,0)
(32,157,0)
(25,85,0)
(100,53,0)
(172,120,0)
(121,88,0)
(81,146,0)
(68,53,0)
(66,53,0)
(48,53,0)
(142,152,0)
(172,71,0)
(146,81,0)
(72,163,0)
(148,82,0)
(42,120,0)
(159,4,0)
(61,157,0)
(97,61,0)
(60,63,0)
(112,32,0)
(50,135,0)
(92,89,0)
(176,120,0)
(4,27,0)
(17,112,0)
(103,157,0)
(55,40,0)
(35,147,0)
(89,61,0)
(21,57,0)
(11,83,0)
(149,40,0)
(55,107,0)
(114,157,0)
(88,1,0)
(71,172,0)
(101,27,0)
(6,139,0)
(98,61,0)
(89,10,0)
(96,146,0)
(137,12,0)
(62,82,0)
(51,37,0)
(37,82,0)
(164,37,0)
(25,45,0)
(107,165,0)
(138,36,0)
(7,42,0)
(115,55,0)
(156,125,0)
(139,136,0)
(105,149,0)
(85,25,0)
(78,82,0)
(140,126,0)
(127,73,0)
(128,157,0)
(76,125,0)
(29,157,0)
(10,98,0)
(111,110,0)
(174,42,0)
(120,104,0)
(37,136,0)
(32,26,0)
(104,120,0)
(133,176,0)
(93,157,0)
(124,159,0)
(77,111,1)
(37,107,1)
(71,42,1)
(13,20,1)
(82,78,1)
(30,152,1)
(77,170,1)
(74,114,1)
(58,5,1)
(39,109,1)
(163,72,1)
(17,125,1)
(72,0,1)
(95,60,1)
(174,120,1)
(54,132,1)
(37,176,1)
(73,108,1)
(37,164,1)
(52,43,1)
(32,26,1)
(12,126,1)
(105,129,1)
(6,149,1)
(18,90,1)
(98,123,1)
(97,61,1)
(134,133,1)
(116,40,1)
(132,141,1)
(41,44,1)
(122,50,1)
(85,25,1)
(111,85,1)
(50,85,1)
(10,98,1)
(37,82,1)
(69,118,1)
(103,41,1)
(51,23,1)
(12,30,1)
(97,75,1)
(38,64,1)
(4,27,1)
(77,153,1)
(4,159,1)
(20,74,1)
(107,155,1)
(64,138,1)
(25,63,1)
(152,142,1)
(172,120,1)
(69,100,1)
(92,49,1)
(25,45,1)
(18,126,1)
(159,124,1)
(139,6,1)
(112,17,1)
(45,160,1)
(125,76,1)
(125,126,1)
(85,99,1)
(149,107,1)
(160,63,1)
(180,177,1)
(86,148,1)
(108,13,1)
(179,82,1)
(60,100,1)
(169,144,1)
(14,18,1)
(69,126,1)
(27,130,1)
(47,89,1)
(177,32,1)
(42,120,1)
(81,146,1)
(62,21,1)
(63,95,1)
(7,174,1)
(138,80,1)
(9,131,1)
(123,47,1)
(70,10,1)
(67,54,1)
(176,134,1)
(148,171,1)
(164,51,1)
(79,116,1)
(100,67,1)
(8,140,1)
(153,125,1)
(149,176,1)
(55,40,1)
(98,61,1)
(170,107,1)
(62,116,1)
(170,176,1)
(115,173,1)
(148,82,1)
(76,156,1)
(55,107,1)
(149,82,1)
(146,31,1)
(40,169,1)
(88,121,1)
(77,2,1)
(154,81,1)
(43,137,1)
(113,71,1)
(109,128,1)
(84,34,1)
(124,27,1)
(55,176,1)
(120,104,1)
(114,38,1)
(80,36,1)
(61,12,1)
(4,126,1)
(118,18,1)
(14,69,1)
(10,89,1)
(149,40,1)
(131,4,1)
(12,152,1)
(44,180,1)
(171,55,1)
(75,70,1)
(141,79,1)
(26,178,1)
(78,62,1)
(18,100,1)
(149,105,1)
(128,94,1)
(129,37,1)
(2,10,1)
(15,163,1)
(49,61,1)
(104,39,1)
(89,92,1)
(96,168,1)
(155,158,1)
(138,36,1)
(60,170,1)
(119,42,1)
(127,73,1)
(27,101,1)
(176,120,1)
(23,55,1)
(94,97,1)
(32,112,1)
(31,96,1)
(89,61,1)
(37,40,1)
(5,127,1)
(131,106,1)
(133,71,1)
(135,122,1)
(77,9,1)
(142,52,1)
(178,65,1)
(59,35,1)
(55,115,1)
(171,139,1)
(106,4,1)
(65,112,1)
(62,14,1)
(42,7,1)
(168,179,1)
(156,126,1)
(130,58,1)
(87,131,1)
(147,59,1)
(172,46,1)
(99,25,1)
(34,103,1)
(173,88,1)
(71,172,1)
(46,119,1)
(158,113,1)
(21,14,1)
(90,77,1)
(121,15,1)
(137,87,1)
(0,154,1)
(35,8,1)
(140,135,1)
(36,84,1)
(126,147,1)
(107,155,2)
(34,125,2)
(80,125,2)
(45,116,2)
(142,131,2)
(158,71,2)
(113,71,2)
(21,14,2)
(114,125,2)
(42,10,2)
(61,12,2)
(65,125,2)
(63,116,2)
(12,126,2)
(74,125,2)
(106,125,2)
(4,126,2)
(32,125,2)
(123,89,2)
(114,38,2)
(55,176,2)
(138,36,2)
(4,125,2)
(140,85,2)
(47,89,2)
(69,126,2)
(176,120,2)
(118,18,2)
(81,146,2)
(73,125,2)
(149,82,2)
(60,116,2)
(5,125,2)
(132,116,2)
(178,125,2)
(130,125,2)
(51,55,2)
(137,131,2)
(174,10,2)
(89,131,2)
(89,61,2)
(25,45,2)
(111,85,2)
(103,125,2)
(27,130,2)
(152,131,2)
(98,61,2)
(14,116,2)
(85,25,2)
(35,85,2)
(44,125,2)
(139,55,2)
(23,55,2)
(87,131,2)
(30,131,2)
(131,125,2)
(125,85,2)
(37,176,2)
(70,10,2)
(15,163,2)
(61,131,2)
(160,116,2)
(159,125,2)
(10,98,2)
(149,40,2)
(27,101,2)
(18,116,2)
(131,4,2)
(12,152,2)
(127,73,2)
(124,125,2)
(4,159,2)
(98,89,2)
(133,71,2)
(172,120,2)
(60,170,2)
(126,147,2)
(52,131,2)
(54,116,2)
(148,82,2)
(9,131,2)
(32,112,2)
(37,55,2)
(125,126,2)
(67,116,2)
(18,126,2)
(58,125,2)
(37,82,2)
(41,125,2)
(85,170,2)
(84,125,2)
(45,170,2)
(37,107,2)
(43,131,2)
(95,116,2)
(10,89,2)
(25,170,2)
(109,10,2)
(149,55,2)
(7,10,2)
(37,40,2)
(126,85,2)
(129,55,2)
(90,116,2)
(120,10,2)
(50,85,2)
(25,63,2)
(2,10,2)
(25,116,2)
(170,10,2)
(59,85,2)
(107,71,2)
(155,71,2)
(85,116,2)
(153,125,2)
(6,55,2)
(69,100,2)
(32,26,2)
(172,42,2)
(36,125,2)
(147,85,2)
(75,10,2)
(104,10,2)
(46,42,2)
(95,170,2)
(13,125,2)
(55,107,2)
(128,10,2)
(55,40,2)
(122,85,2)
(76,85,2)
(134,71,2)
(26,125,2)
(17,125,2)
(141,116,2)
(71,10,2)
(42,120,2)
(38,125,2)
(10,131,2)
(63,170,2)
(71,172,2)
(94,10,2)
(97,10,2)
(164,55,2)
(71,42,2)
(176,71,2)
(177,125,2)
(112,125,2)
(127,125,2)
(156,85,2)
(99,170,2)
(49,131,2)
(100,116,2)
(20,125,2)
(97,61,2)
(77,116,2)
(99,116,2)
(39,10,2)
(69,18,2)
(160,170,2)
(64,125,2)
(105,55,2)
(138,125,2)
(18,100,2)
(27,125,2)
(149,176,2)
(149,107,2)
(8,85,2)
(108,125,2)
(4,27,2)
(119,42,2)
(92,131,2)
(180,125,2)
(135,85,2)
(12,131,2)
(120,104,2)
(79,116,2)
-----------------------------------
(0,100)
(1,)
(2,break;)
(3,)
(4,connect(connectSocket, (struct sockaddr*)
(5,connectSocket)
(6,\\\'\\\\0\\\')
(7,SHRT_MAX)
(8,AF_INET)
(9,break;)
(10,recvResult == SOCKET_ERROR || recvResult == 0)
(11,data)
(12,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(13,service.sin_port)
(14,wsaDataInit)
(15,source[100-1])
(16,)
(17,service)
(18,connectSocket != INVALID_SOCKET)
(19,if(1)
(20,sin_port)
(21,WSACleanup()
(22,if (wsaDataInit)
(23,dest)
(24,if (data < 100)
(25,WSAStartup(MAKEWORD(2,2)
(26,sizeof(service)
(27,(struct sockaddr*)
(28,source)
(29,if (WSAStartup(MAKEWORD(2,2)
(30,0)
(31,1)
(32,memset(&service, 0, sizeof(service)
(33,service)
(34,service)
(35,SOCK_STREAM)
(36,service.sin_addr)
(37,memmove(dest, source, data)
(38,inet_addr(IP_ADDRESS)
(39,inputBuffer)
(40,data = 0)
(41,AF_INET)
(42,tempInt > SHRT_MAX)
(43,inputBuffer)
(44,service.sin_family)
(45,&wsaData)
(46,SHRT_MIN)
(47,recvResult)
(48,connectSocket)
(49,recvResult)
(50,wsaDataInit)
(51,source)
(52,CHAR_ARRAY_SIZE)
(53,)
(54,connectSocket)
(55,data < 100)
(56,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(57,)
(58,service)
(59,IPPROTO_TCP)
(60,2)
(61,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(62,dest)
(63,MAKEWORD(2,2)
(64,IP_ADDRESS)
(65,0)
(66,recvResult)
(67,INVALID_SOCKET)
(68,tempInt)
(69,CLOSE_SOCKET(connectSocket)
(70,inputBuffer)
(71,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(72,1)
(73,htons(TCP_PORT)
(74,service)
(75,recvResult)
(76,INVALID_SOCKET)
(77,connectSocket)
(78,"")
(79,wsaDataInit)
(80,s_addr)
(81,memset(source, \\\'A\\\', 100-1)
(82,dest[100] = "")
(83,)
(84,sin_addr)
(85,WSAStartup(MAKEWORD(2,2)
(86,RET)
(87,recvResult)
(88,source[100-1] = \\\'\\\\0\\\')
(89,recvResult == SOCKET_ERROR)
(90,INVALID_SOCKET)
(91,)
(92,SOCKET_ERROR)
(93,if (connect(connectSocket, (struct sockaddr*)
(94,\\\'\\\\0\\\')
(95,2)
(96,100)
(97,inputBuffer[recvResult])
(98,recvResult == 0)
(99,NO_ERROR)
(100,connectSocket = INVALID_SOCKET)
(101,struct sockaddr*)
(102,dest)
(103,service.sin_family = AF_INET)
(104,atoi(inputBuffer)
(105,data)
(106,SOCKET_ERROR)
(107,data = -1)
(108,TCP_PORT)
(109,tempInt)
(110,)
(111,break;)
(112,&service)
(113,data)
(114,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(115,100)
(116,1)
(117,wsaData)
(118,connectSocket)
(119,tempInt)
(120,tempInt = atoi(inputBuffer)
(121,\\\'\\\\0\\\')
(122,1)
(123,0)
(124,service)
(125,connectSocket == INVALID_SOCKET)
(126,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(127,service.sin_port = htons(TCP_PORT)
(128,inputBuffer[recvResult] = \\\'\\\\0\\\')
(129,dest)
(130,&service)
(131,connect(connectSocket, (struct sockaddr*)
(132,wsaDataInit = 0)
(133,data)
(134,tempInt)
(135,wsaDataInit = 1)
(136,)
(137,connectSocket)
(138,service.sin_addr.s_addr)
(139,dest[data] = \\\'\\\\0\\\')
(140,connectSocket)
(141,0)
(142,1)
(143,if (recvResult == SOCKET_ERROR || recvResult == 0)
(144,data)
(145,wsaDataInit)
(146,100-1)
(147,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(148,printLine(dest)
(149,dest[data])
(150,)
(151,if (connectSocket != INVALID_SOCKET)
(152,CHAR_ARRAY_SIZE - 1)
(153,break;)
(154,source)
(155,-1)
(156,connectSocket)
(157,)
(158,1)
(159,sizeof(service)
(160,wsaData)
(161,)
(162,inputBuffer)
(163,100-1)
(164,data)
(165,)
(166,if (connectSocket == INVALID_SOCKET)
(167,)
(168,\\\'A\\\')
(169,0)
(170,0)
(171,dest)
(172,tempInt < SHRT_MIN)
(173,data)
(174,tempInt)
(175,do)
(176,data = tempInt)
(177,service)
(178,service)
(179,source)
(180,sin_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^