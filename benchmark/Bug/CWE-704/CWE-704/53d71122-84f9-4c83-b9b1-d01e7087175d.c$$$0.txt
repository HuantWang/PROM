-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
60,72
60,73
60,74
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
112,113
113,114
113,115
114,115
114,116
115,116
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
125,127
125,128
125,129
126,127
128,129
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
150,151
152,153
154,155
156,157
158,159
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
169,170
171,172
173,174
173,175
174,175
174,176
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
185,190
186,187
188,189
190,191
192,193
192,194
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
218,219
219,220
219,221
220,221
222,223
222,224
223,224
225,226
228,229
228,230
229,230
229,231
230,231
232,233
234,235
235,236
236,237
236,238
237,238
239,240
241,242
241,243
242,243
242,244
243,244
245,246
247,248
248,249
249,250
249,251
250,251
252,253
254,255
254,256
254,257
254,258
254,259
254,260
255,256
256,257
256,258
258,259
258,260
260,261
262,263
263,264
263,265
265,266
265,267
265,268
267,268
269,270
271,272
272,273
272,274
272,275
272,276
273,274
275,276
278,279
278,280
281,282
282,283
282,284
283,284
283,285
284,285
286,287
286,288
290,291
290,292
291,292
291,293
292,293
295,296
295,297
296,297
297,298
297,299
297,300
297,301
298,299
300,301
302,303
304,305
306,307
307,308
307,309
308,309
308,310
309,310
311,312
314,315
315,316
315,317
316,317
318,319
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,32,36,38,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,111,116,117,120,122,127,129,133,135,138,142,144,146,151,153,155,157,159,163,166,168,170,172,176,178,180,184,187,189,191,194,195,196,201,203,206,207,209,214,216,217,221,224,226,227,231,233,238,240,244,246,251,253,257,259,261,264,266,268,270,274,276,277,279,280,285,287,288,289,293,294,299,301,303,305,310,312,313,317,319
-----computeFrom-----
12,13
12,14
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
113,114
113,115
124,125
124,126
148,149
148,150
161,162
161,163
174,175
174,176
182,183
182,184
192,193
192,194
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
219,220
219,221
229,230
229,231
242,243
242,244
278,279
278,280
282,283
282,284
286,287
286,288
291,292
291,293
307,308
307,309
-----guardedBy-----
231,240
244,253
293,312
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_memcpy_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
staticTrue
staticTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(40,174,0)
(139,99,0)
(137,11,0)
(164,98,0)
(78,87,0)
(189,98,0)
(109,174,0)
(123,40,0)
(140,88,0)
(25,66,0)
(156,0,0)
(86,60,0)
(47,60,0)
(73,164,0)
(130,189,0)
(83,43,0)
(108,174,0)
(182,30,0)
(171,119,0)
(133,48,0)
(97,43,0)
(190,133,0)
(172,176,0)
(36,82,0)
(63,125,0)
(35,3,0)
(173,174,0)
(166,129,0)
(31,93,0)
(113,162,0)
(48,19,0)
(129,27,0)
(88,98,0)
(63,101,0)
(68,99,0)
(59,142,0)
(66,50,0)
(36,0,0)
(2,50,0)
(22,189,0)
(134,34,0)
(104,145,0)
(52,71,0)
(154,48,0)
(44,0,0)
(1,20,0)
(87,78,0)
(118,189,0)
(181,174,0)
(77,43,0)
(145,104,0)
(71,82,0)
(172,98,0)
(122,67,0)
(91,104,0)
(63,60,0)
(166,82,0)
(93,43,0)
(36,11,0)
(50,26,0)
(131,176,0)
(86,125,0)
(160,89,0)
(12,88,0)
(87,174,0)
(111,116,0)
(192,50,0)
(175,55,0)
(13,4,0)
(14,95,0)
(45,50,0)
(76,50,0)
(85,50,0)
(30,22,0)
(104,32,0)
(60,47,0)
(5,77,0)
(128,173,0)
(55,0,0)
(7,4,0)
(105,129,0)
(31,95,0)
(0,44,0)
(115,174,0)
(120,113,0)
(180,9,0)
(32,104,0)
(84,67,0)
(36,27,0)
(69,185,0)
(167,50,0)
(28,184,0)
(94,50,0)
(176,50,0)
(166,0,0)
(132,142,0)
(157,50,0)
(173,184,0)
(17,30,0)
(19,48,0)
(112,174,0)
(98,67,0)
(43,144,0)
(152,19,0)
(121,166,0)
(106,50,0)
(74,22,0)
(136,125,0)
(146,44,0)
(81,86,0)
(166,11,0)
(127,75,0)
(15,35,0)
(183,154,0)
(104,91,0)
(23,3,0)
(102,191,0)
(110,53,0)
(95,31,0)
(188,70,0)
(9,77,0)
(92,32,0)
(97,11,0)
(0,144,0)
(138,30,0)
(161,77,0)
(141,36,0)
(39,166,0)
(113,60,0)
(22,174,0)
(51,97,0)
(143,67,0)
(54,62,0)
(34,174,0)
(155,40,0)
(162,113,0)
(16,144,0)
(82,71,0)
(79,47,0)
(89,87,0)
(49,36,0)
(11,43,0)
(163,60,0)
(96,82,0)
(149,125,0)
(61,43,0)
(10,172,0)
(125,50,0)
(153,187,0)
(55,82,0)
(58,124,0)
(99,60,0)
(189,119,0)
(72,155,0)
(193,11,0)
(98,174,0)
(135,119,0)
(48,154,0)
(60,174,0)
(159,142,0)
(32,60,0)
(56,176,0)
(147,95,0)
(126,174,0)
(18,93,0)
(186,155,0)
(173,191,0)
(189,22,0)
(35,22,0)
(119,189,0)
(80,113,0)
(32,187,0)
(142,59,0)
(67,60,0)
(8,66,0)
(4,22,0)
(148,63,0)
(67,98,0)
(187,32,0)
(164,24,0)
(138,4,0)
(184,173,0)
(124,174,0)
(57,89,0)
(32,92,0)
(4,138,0)
(169,9,0)
(82,174,0)
(117,35,0)
(178,47,0)
(33,32,0)
(158,145,0)
(103,43,0)
(107,133,0)
(46,78,0)
(100,172,0)
(114,31,0)
(3,174,0)
(6,144,0)
(38,50,0)
(164,176,0)
(59,124,0)
(21,189,0)
(41,162,0)
(165,92,0)
(48,133,0)
(37,86,0)
(191,173,0)
(77,9,0)
(170,59,0)
(150,50,0)
(64,55,0)
(177,36,0)
(29,47,0)
(42,34,0)
(179,98,0)
(30,138,0)
(190,176,1)
(65,164,1)
(177,55,1)
(166,121,1)
(37,168,1)
(44,146,1)
(111,88,1)
(51,129,1)
(172,176,1)
(193,137,1)
(96,3,1)
(19,152,1)
(65,172,1)
(97,11,1)
(48,154,1)
(23,35,1)
(32,60,1)
(189,98,1)
(88,12,1)
(161,5,1)
(102,99,1)
(86,60,1)
(71,52,1)
(173,184,1)
(152,48,1)
(145,158,1)
(5,11,1)
(182,17,1)
(57,160,1)
(37,69,1)
(186,72,1)
(37,54,1)
(166,11,1)
(118,119,1)
(63,60,1)
(49,177,1)
(63,148,1)
(148,86,1)
(35,22,1)
(121,39,1)
(149,136,1)
(175,93,1)
(19,48,1)
(99,60,1)
(173,191,1)
(189,118,1)
(39,36,1)
(4,7,1)
(172,98,1)
(87,78,1)
(137,1,1)
(187,32,1)
(164,73,1)
(48,133,1)
(107,190,1)
(162,41,1)
(25,151,1)
(95,14,1)
(169,161,1)
(90,97,1)
(37,188,1)
(31,95,1)
(86,81,1)
(55,0,1)
(179,162,1)
(104,91,1)
(84,179,1)
(40,123,1)
(165,104,1)
(78,46,1)
(110,99,1)
(42,19,1)
(191,102,1)
(37,127,1)
(67,60,1)
(13,22,1)
(132,159,1)
(64,175,1)
(37,110,1)
(0,44,1)
(46,89,1)
(10,86,1)
(55,64,1)
(34,134,1)
(8,25,1)
(21,74,1)
(69,19,1)
(166,0,1)
(52,96,1)
(113,60,1)
(80,120,1)
(35,15,1)
(92,165,1)
(183,133,1)
(3,23,1)
(136,66,1)
(142,132,1)
(170,142,1)
(153,32,1)
(135,171,1)
(168,82,1)
(125,149,1)
(59,170,1)
(164,176,1)
(99,68,1)
(68,139,1)
(176,56,1)
(30,22,1)
(67,122,1)
(100,10,1)
(119,135,1)
(51,55,1)
(138,4,1)
(55,82,1)
(29,178,1)
(172,100,1)
(154,183,1)
(56,131,1)
(189,119,1)
(105,166,1)
(123,155,1)
(15,117,1)
(14,147,1)
(47,79,1)
(58,59,1)
(9,180,1)
(140,98,1)
(113,80,1)
(77,9,1)
(79,29,1)
(60,47,1)
(147,114,1)
(137,65,1)
(97,51,1)
(11,193,1)
(72,173,1)
(171,130,1)
(130,21,1)
(63,125,1)
(187,153,1)
(122,143,1)
(124,58,1)
(178,163,1)
(28,128,1)
(127,187,1)
(138,30,1)
(10,63,1)
(139,60,1)
(17,4,1)
(133,107,1)
(36,11,1)
(36,0,1)
(158,33,1)
(162,113,1)
(184,28,1)
(18,31,1)
(117,138,1)
(22,189,1)
(7,13,1)
(73,172,1)
(12,140,1)
(82,71,1)
(59,142,1)
(151,0,1)
(36,141,1)
(180,169,1)
(163,34,1)
(89,57,1)
(37,111,1)
(33,87,1)
(54,162,1)
(104,145,1)
(160,124,1)
(146,156,1)
(159,40,1)
(143,84,1)
(30,182,1)
(188,138,1)
(120,187,1)
(86,125,1)
(36,82,1)
(128,191,1)
(66,8,1)
(81,37,1)
(88,98,1)
(137,151,1)
(131,125,1)
(129,105,1)
(98,67,1)
(1,65,1)
(74,88,1)
(93,18,1)
(141,49,1)
(114,77,1)
(134,42,1)
(164,98,1)
(4,22,1)
(166,82,1)
(32,104,1)
(155,186,1)
(190,168,1)
(32,92,1)
(41,113,1)
(131,151,2)
(140,162,2)
(88,162,2)
(143,162,2)
(127,187,2)
(172,151,2)
(107,168,2)
(65,151,2)
(92,99,2)
(176,151,2)
(178,19,2)
(34,19,2)
(4,22,2)
(87,99,2)
(170,99,2)
(88,98,2)
(148,86,2)
(190,151,2)
(173,184,2)
(3,138,2)
(154,168,2)
(189,98,2)
(36,55,2)
(173,191,2)
(52,138,2)
(63,125,2)
(152,168,2)
(33,99,2)
(135,88,2)
(111,88,2)
(42,19,2)
(99,60,2)
(35,22,2)
(186,99,2)
(48,168,2)
(154,151,2)
(152,151,2)
(74,88,2)
(48,133,2)
(82,71,2)
(133,151,2)
(32,104,2)
(86,151,2)
(66,151,2)
(67,162,2)
(89,99,2)
(163,19,2)
(172,98,2)
(60,19,2)
(168,138,2)
(117,138,2)
(79,19,2)
(46,99,2)
(119,88,2)
(164,98,2)
(124,99,2)
(133,168,2)
(104,91,2)
(166,55,2)
(86,60,2)
(22,189,2)
(84,162,2)
(77,9,2)
(184,99,2)
(113,187,2)
(183,168,2)
(188,138,2)
(41,187,2)
(166,82,2)
(183,151,2)
(162,113,2)
(56,151,2)
(110,99,2)
(182,4,2)
(104,145,2)
(166,0,2)
(189,88,2)
(19,168,2)
(134,19,2)
(1,65,2)
(122,162,2)
(59,142,2)
(97,11,2)
(160,99,2)
(55,82,2)
(81,151,2)
(29,19,2)
(7,88,2)
(4,88,2)
(155,99,2)
(40,99,2)
(164,172,2)
(172,176,2)
(136,151,2)
(158,99,2)
(10,151,2)
(99,19,2)
(19,151,2)
(23,138,2)
(32,99,2)
(171,88,2)
(100,151,2)
(48,151,2)
(30,4,2)
(96,138,2)
(60,47,2)
(59,99,2)
(166,11,2)
(87,78,2)
(149,151,2)
(104,99,2)
(165,99,2)
(19,48,2)
(15,138,2)
(142,99,2)
(145,99,2)
(17,4,2)
(8,151,2)
(123,99,2)
(57,99,2)
(164,176,2)
(138,88,2)
(63,60,2)
(86,125,2)
(25,151,2)
(187,32,2)
(36,0,2)
(36,82,2)
(98,162,2)
(32,92,2)
(139,19,2)
(118,88,2)
(22,88,2)
(129,55,2)
(13,88,2)
(28,99,2)
(36,11,2)
(190,168,2)
(73,172,2)
(71,138,2)
(128,99,2)
(58,99,2)
(141,55,2)
(138,30,2)
(179,162,2)
(132,99,2)
(130,88,2)
(48,154,2)
(54,162,2)
(159,99,2)
(189,119,2)
(39,55,2)
(113,60,2)
(78,99,2)
(125,151,2)
(187,99,2)
(0,44,2)
(30,22,2)
(35,138,2)
(69,19,2)
(153,99,2)
(31,95,2)
(21,88,2)
(173,99,2)
(63,86,2)
(98,67,2)
(82,138,2)
(55,0,2)
(138,4,2)
(177,55,2)
(191,99,2)
(102,99,2)
(80,187,2)
(105,55,2)
(47,19,2)
(32,60,2)
(120,187,2)
(12,162,2)
(162,187,2)
(67,60,2)
(49,55,2)
(121,55,2)
(68,19,2)
(72,99,2)
(107,151,2)
(37,151,2)
-----------------------------------
(0,data = -1)
(1,WSACleanup()
(2,acceptSocket)
(3,inputBuffer[recvResult] = \\\'\\\\0\\\')
(4,recvResult == SOCKET_ERROR)
(5,source)
(6,data)
(7,SOCKET_ERROR)
(8,0)
(9,100-1)
(10,acceptSocket)
(11,dest[100] = "")
(12,SOCKET_ERROR)
(13,recvResult)
(14,1)
(15,recvResult)
(16,if(staticTrue)
(17,recvResult)
(18,\\\'\\\\0\\\')
(19,WSAStartup(MAKEWORD(2,2)
(20,)
(21,acceptSocket)
(22,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(23,\\\'\\\\0\\\')
(24,)
(25,wsaDataInit)
(26,)
(27,)
(28,service)
(29,SOCK_STREAM)
(30,recvResult == 0)
(31,source[100-1])
(32,bind(listenSocket, (struct sockaddr*)
(33,listenSocket)
(34,wsaDataInit = 1)
(35,inputBuffer[recvResult])
(36,memcpy(dest, source, data)
(37,listenSocket)
(38,if (acceptSocket != INVALID_SOCKET)
(39,dest)
(40,service.sin_family = AF_INET)
(41,SOCKET_ERROR)
(42,wsaDataInit)
(43,)
(44,-1)
(45,listenSocket)
(46,TCP_PORT)
(47,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(48,WSAStartup(MAKEWORD(2,2)
(49,source)
(50,)
(51,dest)
(52,inputBuffer)
(53,)
(54,break;)
(55,data < 100)
(56,INVALID_SOCKET)
(57,sin_port)
(58,INADDR_ANY)
(59,service.sin_addr.s_addr)
(60,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(61,dest)
(62,)
(63,CLOSE_SOCKET(listenSocket)
(64,100)
(65,wsaDataInit)
(66,wsaDataInit = 0)
(67,accept(listenSocket, NULL, NULL)
(68,INVALID_SOCKET)
(69,break;)
(70,)
(71,atoi(inputBuffer)
(72,service)
(73,acceptSocket)
(74,recvResult)
(75,)
(76,do)
(77,memset(source, \\\'A\\\', 100-1)
(78,htons(TCP_PORT)
(79,IPPROTO_TCP)
(80,LISTEN_BACKLOG)
(81,INVALID_SOCKET)
(82,data = atoi(inputBuffer)
(83,if (data < 100)
(84,listenSocket)
(85,inputBuffer)
(86,listenSocket != INVALID_SOCKET)
(87,service.sin_port = htons(TCP_PORT)
(88,acceptSocket == SOCKET_ERROR)
(89,service.sin_port)
(90,RET)
(91,struct sockaddr*)
(92,sizeof(service)
(93,source[100-1] = \\\'\\\\0\\\')
(94,recvResult)
(95,100-1)
(96,data)
(97,printLine(dest)
(98,acceptSocket = accept(listenSocket, NULL, NULL)
(99,listenSocket == INVALID_SOCKET)
(100,INVALID_SOCKET)
(101,)
(102,service)
(103,source)
(104,(struct sockaddr*)
(105,\\\'\\\\0\\\')
(106,if (listenSocket != INVALID_SOCKET)
(107,2)
(108,if (bind(listenSocket, (struct sockaddr*)
(109,if (listen(listenSocket, LISTEN_BACKLOG)
(110,break;)
(111,break;)
(112,if (acceptSocket == SOCKET_ERROR)
(113,listen(listenSocket, LISTEN_BACKLOG)
(114,source)
(115,if (recvResult == SOCKET_ERROR || recvResult == 0)
(116,)
(117,inputBuffer)
(118,0)
(119,CHAR_ARRAY_SIZE - 1)
(120,listenSocket)
(121,data)
(122,NULL)
(123,AF_INET)
(124,service.sin_addr.s_addr = INADDR_ANY)
(125,listenSocket = INVALID_SOCKET)
(126,if (WSAStartup(MAKEWORD(2,2)
(127,break;)
(128,0)
(129,dest[data] = \\\'\\\\0\\\')
(130,inputBuffer)
(131,acceptSocket)
(132,sin_addr)
(133,MAKEWORD(2,2)
(134,1)
(135,1)
(136,listenSocket)
(137,dest)
(138,recvResult == SOCKET_ERROR || recvResult == 0)
(139,listenSocket)
(140,acceptSocket)
(141,data)
(142,service.sin_addr)
(143,NULL)
(144,)
(145,&service)
(146,1)
(147,100)
(148,listenSocket)
(149,INVALID_SOCKET)
(150,if (wsaDataInit)
(151,staticTrue)
(152,NO_ERROR)
(153,SOCKET_ERROR)
(154,&wsaData)
(155,service.sin_family)
(156,data)
(157,wsaDataInit)
(158,service)
(159,service)
(160,service)
(161,\\\'A\\\')
(162,listen(listenSocket, LISTEN_BACKLOG)
(163,listenSocket)
(164,CLOSE_SOCKET(acceptSocket)
(165,service)
(166,dest[data])
(167,service)
(168,0)
(169,100)
(170,s_addr)
(171,CHAR_ARRAY_SIZE)
(172,acceptSocket != INVALID_SOCKET)
(173,memset(&service, 0, sizeof(service)
(174,)
(175,data)
(176,acceptSocket = INVALID_SOCKET)
(177,dest)
(178,AF_INET)
(179,acceptSocket)
(180,1)
(181,if (listenSocket == INVALID_SOCKET)
(182,0)
(183,wsaData)
(184,sizeof(service)
(185,)
(186,sin_family)
(187,bind(listenSocket, (struct sockaddr*)
(188,break;)
(189,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(190,2)
(191,&service)
(192,wsaData)
(193,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^