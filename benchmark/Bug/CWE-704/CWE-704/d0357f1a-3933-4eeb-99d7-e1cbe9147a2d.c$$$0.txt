-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad()
{
    goto sink;
sink:
    {
        char inputBuffer[CHAR_ARRAY_SIZE];
        double doubleNumber = 0;
        /* Enter: 1e20f, result should be 2147483647 (for bad case) */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Read a double */
            doubleNumber = atof(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
        /* FLAW: should not cast without checking if conversion is safe */
        printIntLine((int)doubleNumber);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
11,12
12,13
12,14
14,15
14,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
26,28
26,29
27,28
27,29
28,29
28,30
28,31
28,32
29,30
31,32
33,34
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
63,64
-----nextToken-----
2,4,7,9,13,15,18,21,23,25,30,32,34,36,38,43,46,48,53,54,58,61,62,64
-----computeFrom-----
27,28
27,29
41,42
41,43
-----guardedBy-----
32,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad(){    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e20f, result should be 2147483647 (for bad case) */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)doubleNumber);    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_18_bad
{    goto sink;sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e20f, result should be 2147483647 (for bad case) */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)doubleNumber);    }}
goto sink;
sink
sink:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e20f, result should be 2147483647 (for bad case) */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)doubleNumber);    }
sink
{        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e20f, result should be 2147483647 (for bad case) */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printIntLine((int)doubleNumber);    }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Read a double */            doubleNumber = atof(inputBuffer);        }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)doubleNumber);
printIntLine((int)doubleNumber)
printIntLine
printIntLine
(int)doubleNumber
int
int

doubleNumber
doubleNumber
-----joern-----
(19,16,0)
(14,26,0)
(24,0,0)
(7,22,0)
(8,26,0)
(19,2,0)
(4,22,0)
(1,26,0)
(28,26,0)
(2,12,0)
(26,8,0)
(23,13,0)
(13,16,0)
(15,2,0)
(3,16,0)
(5,12,0)
(16,22,0)
(18,21,0)
(10,13,0)
(2,13,0)
(12,11,0)
(6,2,0)
(9,18,0)
(0,12,0)
(2,15,0)
(12,0,0)
(25,8,0)
(20,16,0)
(2,19,0)
(17,16,0)
(2,15,1)
(2,13,1)
(26,28,1)
(24,5,1)
(27,19,1)
(9,8,1)
(19,2,1)
(10,23,1)
(6,18,1)
(28,14,1)
(8,25,1)
(23,7,1)
(6,12,1)
(1,13,1)
(12,0,1)
(25,26,1)
(14,1,1)
(2,12,1)
(0,24,1)
(2,6,1)
(8,26,1)
(18,9,1)
(5,8,1)
(13,10,1)
(5,8,2)
(2,13,2)
(18,8,2)
(0,8,2)
(8,26,2)
(2,12,2)
(2,15,2)
(9,8,2)
(24,8,2)
(12,8,2)
(19,2,2)
(12,0,2)
-----------------------------------
(0,atof(inputBuffer)
(1,inputBuffer)
(2,(int)
(3,doubleNumber)
(4,sink:)
(5,doubleNumber)
(6,doubleNumber)
(7,goto sink;)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,"fgets()
(10,0)
(11,)
(12,doubleNumber = atof(inputBuffer)
(13,doubleNumber = 0)
(14,CHAR_ARRAY_SIZE)
(15,int)
(16,)
(17,inputBuffer)
(18,printLine("fgets()
(19,printIntLine((int)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,)
(22,)
(23,doubleNumber)
(24,inputBuffer)
(25,NULL)
(26,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,RET)
(28,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^