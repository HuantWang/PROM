-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
32,33
32,34
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_strncpy_12_bad()
CWE194_Unexpected_Sign_Extension__negative_strncpy_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(15,35,0)
(33,0,0)
(13,8,0)
(2,46,0)
(38,0,0)
(4,38,0)
(41,15,0)
(35,15,0)
(34,3,0)
(48,22,0)
(25,8,0)
(32,8,0)
(22,6,0)
(23,5,0)
(16,43,0)
(18,32,0)
(35,2,0)
(42,25,0)
(51,2,0)
(47,13,0)
(19,38,0)
(53,50,0)
(26,13,0)
(13,23,0)
(23,36,0)
(46,6,0)
(13,49,0)
(50,46,0)
(29,3,0)
(44,0,0)
(52,15,0)
(31,5,0)
(37,50,0)
(25,50,0)
(43,49,0)
(20,46,0)
(11,22,0)
(12,50,0)
(30,46,0)
(9,8,0)
(17,13,0)
(25,23,0)
(5,23,0)
(45,6,0)
(3,8,0)
(40,23,0)
(3,23,0)
(10,6,0)
(8,21,0)
(0,46,0)
(13,50,0)
(8,32,0)
(7,12,0)
(0,38,0)
(28,5,0)
(25,43,0)
(39,25,0)
(12,46,0)
(14,35,0)
(27,46,0)
(13,8,1)
(13,26,1)
(51,35,1)
(31,40,1)
(53,23,1)
(40,24,1)
(33,44,1)
(26,47,1)
(28,31,1)
(37,53,1)
(3,8,1)
(24,22,1)
(25,42,1)
(38,4,1)
(12,50,1)
(22,48,1)
(35,15,1)
(42,39,1)
(50,37,1)
(47,17,1)
(16,25,1)
(32,18,1)
(7,3,1)
(13,23,1)
(19,33,1)
(25,8,1)
(3,34,1)
(0,38,1)
(29,2,1)
(53,8,1)
(15,52,1)
(48,11,1)
(9,24,1)
(52,41,1)
(41,14,1)
(43,16,1)
(13,50,1)
(25,50,1)
(17,3,1)
(5,28,1)
(44,50,1)
(7,43,1)
(1,12,1)
(25,23,1)
(8,32,1)
(2,51,1)
(14,0,1)
(39,13,1)
(12,7,1)
(4,19,1)
(3,23,1)
(23,5,1)
(18,9,1)
(34,29,1)
(26,3,2)
(12,50,2)
(13,8,2)
(39,3,2)
(0,38,2)
(5,24,2)
(23,5,2)
(25,50,2)
(47,3,2)
(3,8,2)
(28,24,2)
(25,8,2)
(3,23,2)
(43,3,2)
(25,23,2)
(40,24,2)
(9,24,2)
(13,3,2)
(35,15,2)
(16,3,2)
(17,3,2)
(8,24,2)
(31,24,2)
(18,24,2)
(32,24,2)
(42,3,2)
(25,3,2)
(23,24,2)
(13,50,2)
(13,23,2)
(8,32,2)
-----------------------------------
(0,memset(source, \\\'A\\\', 100-1)
(1,RET)
(2,source[100-1] = \\\'\\\\0\\\')
(3,data < 100)
(4,1)
(5,100-1)
(6,)
(7,dest)
(8,data = -1)
(9,data)
(10,data)
(11,data)
(12,printLine(dest)
(13,strncpy(dest, source, data)
(14,source)
(15,100-1)
(16,\\\'\\\\0\\\')
(17,dest)
(18,1)
(19,100)
(20,dest)
(21,)
(22,data = 0)
(23,data = 100-1)
(24,globalReturnsTrueOrFalse()
(25,dest[data])
(26,data)
(27,if (data < 100)
(28,1)
(29,data)
(30,source)
(31,100)
(32,-1)
(33,\\\'A\\\')
(34,100)
(35,source[100-1])
(36,)
(37,"")
(38,100-1)
(39,dest)
(40,data)
(41,100)
(42,data)
(43,dest[data] = \\\'\\\\0\\\')
(44,source)
(45,if(globalReturnsTrueOrFalse()
(46,)
(47,source)
(48,0)
(49,)
(50,dest[100] = "")
(51,\\\'\\\\0\\\')
(52,1)
(53,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^