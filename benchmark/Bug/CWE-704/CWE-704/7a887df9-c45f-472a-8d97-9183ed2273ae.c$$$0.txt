-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign extension could result in a very large number */
                memmove(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
51,57
52,53
53,54
53,55
55,56
55,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
94,95
94,96
94,97
94,98
95,96
97,98
99,100
101,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,58,61,63,65,67,71,73,74,76,77,82,84,85,86,90,91,96,98,100,102,107,109,110,114,116
-----computeFrom-----
18,19
18,20
33,34
33,35
75,76
75,77
79,80
79,81
83,84
83,85
88,89
88,90
104,105
104,106
-----guardedBy-----
90,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType
CWE194_Unexpected_Sign_Extension__fscanf_memmove_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign extension could result in a very large number */                memmove(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(57,53,0)
(18,47,0)
(3,29,0)
(7,2,0)
(1,47,0)
(9,51,0)
(52,45,0)
(54,23,0)
(13,48,0)
(50,47,0)
(36,46,0)
(47,15,0)
(38,20,0)
(35,20,0)
(22,45,0)
(45,48,0)
(28,15,0)
(0,45,0)
(3,32,0)
(21,32,0)
(35,28,0)
(16,15,0)
(15,51,0)
(29,3,0)
(42,47,0)
(37,6,0)
(27,32,0)
(39,24,0)
(49,6,0)
(30,1,0)
(53,46,0)
(27,51,0)
(10,28,0)
(32,51,0)
(19,35,0)
(5,29,0)
(2,27,0)
(33,24,0)
(35,48,0)
(44,48,0)
(43,32,0)
(46,53,0)
(31,46,0)
(53,47,0)
(45,34,0)
(20,34,0)
(1,48,0)
(29,51,0)
(45,28,0)
(8,51,0)
(24,23,0)
(58,33,0)
(48,47,0)
(55,3,0)
(12,14,0)
(17,53,0)
(41,14,0)
(40,27,0)
(25,35,0)
(23,47,0)
(26,29,0)
(24,33,0)
(4,33,0)
(14,28,0)
(28,14,0)
(6,28,0)
(11,2,0)
(2,7,1)
(44,13,1)
(52,0,1)
(1,30,1)
(48,44,1)
(54,24,1)
(10,27,1)
(6,49,1)
(33,4,1)
(19,45,1)
(30,20,1)
(14,12,1)
(6,28,1)
(46,36,1)
(17,57,1)
(27,32,1)
(49,37,1)
(40,2,1)
(28,14,1)
(56,1,1)
(32,21,1)
(3,32,1)
(37,23,1)
(35,48,1)
(21,43,1)
(11,29,1)
(22,6,1)
(5,32,1)
(20,38,1)
(12,41,1)
(36,31,1)
(4,58,1)
(30,6,1)
(1,48,1)
(41,10,1)
(31,17,1)
(25,19,1)
(23,54,1)
(29,3,1)
(38,35,1)
(35,25,1)
(55,26,1)
(7,11,1)
(45,28,1)
(24,33,1)
(58,39,1)
(57,48,1)
(45,48,1)
(26,5,1)
(45,52,1)
(53,46,1)
(35,28,1)
(0,22,1)
(39,53,1)
(3,55,1)
(13,28,1)
(27,40,1)
(28,14,2)
(20,6,2)
(38,6,2)
(45,48,2)
(35,6,2)
(22,6,2)
(1,48,2)
(35,28,2)
(53,46,2)
(52,6,2)
(6,28,2)
(25,6,2)
(29,3,2)
(19,6,2)
(24,33,2)
(45,6,2)
(3,32,2)
(0,6,2)
(27,32,2)
(35,48,2)
(45,28,2)
-----------------------------------
(0,source)
(1,printLine(dest)
(2,myUnion.unionFirst)
(3,&data)
(4,1)
(5,stdin)
(6,data < 100)
(7,unionFirst)
(8,data)
(9,myUnion)
(10,data)
(11,myUnion)
(12,unionSecond)
(13,dest)
(14,myUnion.unionSecond)
(15,)
(16,data)
(17,\\\'A\\\')
(18,source)
(19,dest)
(20,dest[data] = \\\'\\\\0\\\')
(21,0)
(22,dest)
(23,source[100-1] = \\\'\\\\0\\\')
(24,source[100-1])
(25,data)
(26,"%hd")
(27,myUnion.unionFirst = data)
(28,data = myUnion.unionSecond)
(29,fscanf (stdin, "%hd", &data)
(30,dest)
(31,100)
(32,data = 0)
(33,100-1)
(34,)
(35,dest[data])
(36,1)
(37,data)
(38,\\\'\\\\0\\\')
(39,source)
(40,data)
(41,myUnion)
(42,if (data < 100)
(43,data)
(44,"")
(45,memmove(dest, source, data)
(46,100-1)
(47,)
(48,dest[100] = "")
(49,100)
(50,dest)
(51,)
(52,data)
(53,memset(source, \\\'A\\\', 100-1)
(54,\\\'\\\\0\\\')
(55,data)
(56,RET)
(57,source)
(58,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^