-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_65b_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_65b_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_65b_badSink(short data)
CWE194_Unexpected_Sign_Extension__negative_malloc_65b_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(33,40,0)
(16,29,0)
(41,19,0)
(24,36,0)
(22,39,0)
(28,18,0)
(1,36,0)
(32,13,0)
(38,6,0)
(8,0,0)
(1,6,0)
(40,37,0)
(6,37,0)
(14,39,0)
(15,24,0)
(23,18,0)
(17,26,0)
(24,16,0)
(12,33,0)
(31,30,0)
(37,30,0)
(6,1,0)
(4,30,0)
(26,30,0)
(40,11,0)
(26,37,0)
(11,40,0)
(21,37,0)
(0,36,0)
(33,36,0)
(19,30,0)
(23,7,0)
(18,23,0)
(16,24,0)
(9,24,0)
(27,16,0)
(25,0,0)
(34,1,0)
(29,30,0)
(5,29,0)
(42,1,0)
(40,33,0)
(16,37,0)
(6,30,0)
(39,37,0)
(37,40,0)
(3,6,0)
(19,37,0)
(24,15,1)
(22,37,1)
(38,39,1)
(40,33,1)
(27,6,1)
(5,16,1)
(17,19,1)
(1,34,1)
(16,24,1)
(25,8,1)
(6,1,1)
(2,26,1)
(1,36,1)
(12,21,1)
(21,0,1)
(37,40,1)
(0,36,1)
(19,41,1)
(40,11,1)
(29,5,1)
(39,37,1)
(33,36,1)
(33,12,1)
(18,28,1)
(3,38,1)
(2,0,1)
(26,17,1)
(19,37,1)
(0,25,1)
(23,18,1)
(6,37,1)
(9,27,1)
(28,39,1)
(16,37,1)
(26,37,1)
(14,22,1)
(39,14,1)
(15,9,1)
(41,29,1)
(34,42,1)
(42,3,1)
(38,23,1)
(24,36,1)
(1,0,2)
(33,36,2)
(38,0,2)
(14,0,2)
(39,37,2)
(24,36,2)
(1,36,2)
(37,40,2)
(27,0,2)
(24,0,2)
(23,39,2)
(17,0,2)
(0,36,2)
(28,39,2)
(9,0,2)
(39,0,2)
(22,0,2)
(37,0,2)
(16,24,2)
(21,0,2)
(16,37,2)
(40,0,2)
(6,37,2)
(6,0,2)
(26,37,2)
(23,18,2)
(40,11,2)
(19,37,2)
(15,0,2)
(34,0,2)
(41,0,2)
(3,0,2)
(42,0,2)
(16,0,2)
(33,0,2)
(12,0,2)
(5,0,2)
(29,0,2)
(18,39,2)
(40,33,2)
(19,0,2)
(6,1,2)
(26,0,2)
-----------------------------------
(0,data < 100)
(1,data-1)
(2,RET)
(3,\'A\')
(4,if (dataBuffer == NULL)
(5,\'\\\\0\')
(6,memset(dataBuffer, 'A', data-1)
(7,)
(8,data)
(9,data)
(10,'\\\\0')
(11,char *)
(12,data)
(13,)
(14,NULL)
(15,1)
(16,dataBuffer[data-1])
(17,dataBuffer)
(18,-1)
(19,printLine(dataBuffer)
(20,memset(dataBuffer, \'A\', data-1)
(21,dataBuffer)
(22,dataBuffer)
(23,exit(-1)
(24,data-1)
(25,100)
(26,free(dataBuffer)
(27,dataBuffer)
(28,1)
(29,dataBuffer[data-1] = '\\\\0')
(30,)
(31,dataBuffer)
(32,if (data < 100)
(33,malloc(data)
(34,1)
(35,dataBuffer[data-1] = \'\\\\0\')
(36,short data)
(37,* dataBuffer = (char *)
(38,dataBuffer)
(39,dataBuffer == NULL)
(40,(char *)
(41,dataBuffer)
(42,data)
(43,'A')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^