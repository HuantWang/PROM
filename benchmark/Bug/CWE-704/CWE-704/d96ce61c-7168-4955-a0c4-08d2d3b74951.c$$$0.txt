-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(55,41,0)
(5,41,0)
(40,50,0)
(47,49,0)
(37,14,0)
(9,38,0)
(30,9,0)
(7,38,0)
(10,21,0)
(17,24,0)
(31,38,0)
(44,52,0)
(8,32,0)
(12,32,0)
(6,38,0)
(25,38,0)
(24,42,0)
(49,11,0)
(11,38,0)
(34,13,0)
(41,11,0)
(41,42,0)
(20,8,0)
(18,34,0)
(48,14,0)
(42,50,0)
(49,34,0)
(29,35,0)
(49,42,0)
(4,38,0)
(6,14,0)
(35,42,0)
(15,50,0)
(1,32,0)
(41,13,0)
(33,41,0)
(36,42,0)
(53,42,0)
(2,6,0)
(35,12,0)
(3,53,0)
(23,32,0)
(42,53,0)
(45,25,0)
(16,12,0)
(52,9,0)
(21,52,0)
(54,49,0)
(25,11,0)
(52,21,0)
(46,32,0)
(14,6,0)
(19,11,0)
(0,12,0)
(12,35,0)
(51,24,0)
(27,6,0)
(43,21,0)
(28,32,0)
(22,11,0)
(38,50,0)
(22,1,1)
(34,18,1)
(22,46,1)
(5,33,1)
(3,36,1)
(49,11,1)
(29,0,1)
(8,20,1)
(54,41,1)
(17,9,1)
(48,27,1)
(30,52,1)
(19,22,1)
(16,26,1)
(2,11,1)
(0,16,1)
(25,11,1)
(35,42,1)
(24,42,1)
(39,25,1)
(11,19,1)
(27,2,1)
(20,26,1)
(21,43,1)
(46,12,1)
(49,47,1)
(6,14,1)
(25,45,1)
(51,17,1)
(26,42,1)
(41,42,1)
(41,11,1)
(44,6,1)
(45,34,1)
(55,24,1)
(10,44,1)
(37,48,1)
(41,5,1)
(53,3,1)
(47,54,1)
(49,42,1)
(43,10,1)
(14,37,1)
(12,35,1)
(52,21,1)
(9,30,1)
(18,49,1)
(35,29,1)
(42,53,1)
(33,55,1)
(24,51,1)
(45,24,1)
(1,8,1)
(6,14,2)
(29,26,2)
(24,42,2)
(41,42,2)
(35,26,2)
(18,24,2)
(34,24,2)
(8,26,2)
(35,42,2)
(54,24,2)
(46,26,2)
(42,53,2)
(41,24,2)
(41,11,2)
(33,24,2)
(47,24,2)
(0,26,2)
(49,11,2)
(25,11,2)
(49,24,2)
(16,26,2)
(52,21,2)
(49,42,2)
(12,35,2)
(20,26,2)
(55,24,2)
(1,26,2)
(5,24,2)
(12,26,2)
-----------------------------------
(0,"%d")
(1,break;)
(2,source)
(3,1)
(4,dest)
(5,data)
(6,memset(source, \\\'A\\\', 100-1)
(7,if (data < 100)
(8,printLine("Benign, fixed string")
(9,source[100-1] = \\\'\\\\0\\\')
(10,100)
(11,dest[100] = "")
(12,fscanf(stdin, "%d", &data)
(13,)
(14,100-1)
(15,data)
(16,stdin)
(17,data)
(18,\\\'\\\\0\\\')
(19,"")
(20,"Benign, fixed string")
(21,100-1)
(22,dest)
(23,default:)
(24,data < 100)
(25,printLine(dest)
(26,6)
(27,\\\'A\\\')
(28,case 6:)
(29,data)
(30,\\\'\\\\0\\\')
(31,source)
(32,)
(33,source)
(34,dest[data] = \\\'\\\\0\\\')
(35,&data)
(36,data)
(37,1)
(38,)
(39,RET)
(40,switch(6)
(41,memmove(dest, source, data)
(42,data = -1)
(43,1)
(44,source)
(45,dest)
(46,break;)
(47,data)
(48,100)
(49,dest[data])
(50,)
(51,100)
(52,source[100-1])
(53,-1)
(54,dest)
(55,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^