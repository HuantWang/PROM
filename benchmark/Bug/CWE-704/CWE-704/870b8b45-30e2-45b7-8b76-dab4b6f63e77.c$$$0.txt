-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        /* FLAW: Use a negative number */        data = -1;    }
staticTrue
staticTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(32,26,0)
(33,36,0)
(14,34,0)
(6,20,0)
(37,44,0)
(49,13,0)
(53,37,0)
(22,34,0)
(23,20,0)
(33,44,0)
(15,32,0)
(0,14,0)
(42,34,0)
(11,14,0)
(18,32,0)
(3,13,0)
(8,44,0)
(0,18,0)
(48,26,0)
(16,1,0)
(36,33,0)
(28,25,0)
(33,32,0)
(43,18,0)
(13,14,0)
(13,8,0)
(37,32,0)
(38,14,0)
(32,47,0)
(11,34,0)
(4,11,0)
(30,0,0)
(44,41,0)
(39,2,0)
(12,25,0)
(1,34,0)
(50,34,0)
(26,32,0)
(8,13,0)
(18,0,0)
(21,42,0)
(18,44,0)
(36,10,0)
(54,8,0)
(24,2,0)
(13,34,0)
(52,33,0)
(2,14,0)
(25,12,0)
(19,41,0)
(10,36,0)
(41,44,0)
(12,5,0)
(8,32,0)
(29,8,0)
(44,20,0)
(9,37,0)
(7,18,0)
(27,44,0)
(36,14,0)
(42,14,0)
(0,1,0)
(40,20,0)
(14,36,0)
(0,18,1)
(18,43,1)
(31,11,1)
(43,7,1)
(15,45,1)
(13,8,1)
(9,53,1)
(42,14,1)
(45,44,1)
(18,44,1)
(32,26,1)
(29,3,1)
(49,2,1)
(49,12,1)
(13,14,1)
(53,32,1)
(37,44,1)
(11,4,1)
(25,28,1)
(38,37,1)
(30,13,1)
(4,42,1)
(3,49,1)
(44,41,1)
(2,14,1)
(8,32,1)
(1,16,1)
(0,14,1)
(41,19,1)
(33,32,1)
(53,45,1)
(16,0,1)
(8,54,1)
(28,2,1)
(18,32,1)
(21,1,1)
(24,14,1)
(36,10,1)
(8,44,1)
(39,24,1)
(12,25,1)
(48,15,1)
(11,14,1)
(7,30,1)
(33,52,1)
(31,37,1)
(26,48,1)
(42,21,1)
(2,39,1)
(37,9,1)
(19,27,1)
(14,36,1)
(54,29,1)
(36,33,1)
(33,44,1)
(37,32,1)
(52,38,1)
(33,32,2)
(13,37,2)
(32,26,2)
(39,37,2)
(37,44,2)
(18,44,2)
(28,2,2)
(42,14,2)
(7,37,2)
(8,44,2)
(0,18,2)
(14,36,2)
(13,8,2)
(11,37,2)
(33,37,2)
(12,25,2)
(12,2,2)
(29,37,2)
(52,37,2)
(48,45,2)
(37,32,2)
(14,37,2)
(21,37,2)
(49,37,2)
(0,37,2)
(4,37,2)
(3,37,2)
(11,14,2)
(36,37,2)
(8,32,2)
(36,33,2)
(18,32,2)
(30,37,2)
(2,14,2)
(25,2,2)
(43,37,2)
(54,37,2)
(16,37,2)
(33,44,2)
(15,45,2)
(24,37,2)
(18,37,2)
(36,10,2)
(26,45,2)
(38,37,2)
(32,45,2)
(8,37,2)
(44,41,2)
(1,37,2)
(2,37,2)
(42,37,2)
(13,14,2)
(0,14,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,dataBuffer[data-1] = \'\\\\0\')
(2,dataBuffer == NULL)
(3,\'A\')
(4,dataBuffer)
(5,)
(6,data)
(7,data)
(8,data-1)
(9,100)
(10,char *)
(11,free(dataBuffer)
(12,exit(-1)
(13,memset(dataBuffer, 'A', data-1)
(14,* dataBuffer = (char *)
(15,data)
(16,'\\\\0')
(17,memset(dataBuffer, \'A\', data-1)
(18,data-1)
(19,1)
(20,)
(21,dataBuffer)
(22,dataBuffer)
(23,if (data < 100)
(24,dataBuffer)
(25,-1)
(26,-1)
(27,data)
(28,1)
(29,data)
(30,dataBuffer)
(31,RET)
(32,data = -1)
(33,malloc(data)
(34,)
(35,dataBuffer[data-1] = '\\\\0')
(36,(char *)
(37,data < 100)
(38,dataBuffer)
(39,NULL)
(40,if(staticTrue)
(41,-1)
(42,printLine(dataBuffer)
(43,1)
(44,data = -1)
(45,staticTrue)
(46,\'\\\\0\')
(47,)
(48,1)
(49,dataBuffer)
(50,if (dataBuffer == NULL)
(51,'A')
(52,data)
(53,data)
(54,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^