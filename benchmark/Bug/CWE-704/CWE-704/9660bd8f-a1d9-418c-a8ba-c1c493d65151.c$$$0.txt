-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_11_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,72,75,77,79,81,85,87,88,90,91,96,98,99,100,104,105,110,112,114,116,121,123,124,128,130
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
118,119
118,120
-----guardedBy-----
38,58
104,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_memcpy_11_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_memcpy_11_bad()
CWE194_Unexpected_Sign_Extension__fgets_memcpy_11_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,21,0)
(1,33,0)
(48,5,0)
(51,24,0)
(24,59,0)
(16,30,0)
(32,30,0)
(28,51,0)
(8,11,0)
(4,38,0)
(0,28,0)
(60,53,0)
(19,33,0)
(31,10,0)
(43,49,0)
(55,56,0)
(17,29,0)
(11,41,0)
(15,32,0)
(49,39,0)
(37,57,0)
(45,41,0)
(10,33,0)
(36,28,0)
(9,6,0)
(27,18,0)
(40,27,0)
(57,5,0)
(13,51,0)
(6,29,0)
(25,28,0)
(63,32,0)
(52,18,0)
(28,29,0)
(2,53,0)
(65,30,0)
(29,3,0)
(28,42,0)
(26,3,0)
(44,11,0)
(59,24,0)
(14,21,0)
(7,60,0)
(24,10,0)
(22,49,0)
(6,3,0)
(18,27,0)
(12,53,0)
(38,54,0)
(33,49,0)
(3,30,0)
(5,42,0)
(21,3,0)
(34,57,0)
(46,60,0)
(57,32,0)
(41,11,0)
(56,51,0)
(24,51,0)
(51,47,0)
(64,56,0)
(58,18,0)
(57,51,0)
(61,11,0)
(62,29,0)
(11,33,0)
(10,24,0)
(23,3,0)
(56,32,0)
(35,3,0)
(28,32,0)
(57,29,0)
(53,60,0)
(53,3,0)
(38,4,1)
(12,2,1)
(13,41,1)
(20,6,1)
(32,63,1)
(46,7,1)
(34,28,1)
(52,58,1)
(21,14,1)
(63,15,1)
(25,36,1)
(61,33,1)
(41,11,1)
(31,13,1)
(28,51,1)
(56,51,1)
(11,8,1)
(17,38,1)
(62,17,1)
(58,40,1)
(57,51,1)
(50,32,1)
(57,37,1)
(64,21,1)
(9,56,1)
(19,50,1)
(53,60,1)
(2,29,1)
(10,31,1)
(28,0,1)
(11,33,1)
(24,59,1)
(44,61,1)
(40,53,1)
(51,24,1)
(28,29,1)
(4,41,1)
(56,32,1)
(29,62,1)
(6,9,1)
(48,57,1)
(0,25,1)
(14,27,1)
(17,51,1)
(57,32,1)
(18,52,1)
(37,34,1)
(6,29,1)
(55,64,1)
(17,50,1)
(8,44,1)
(41,45,1)
(33,1,1)
(9,5,1)
(28,32,1)
(1,19,1)
(5,48,1)
(56,55,1)
(10,33,1)
(24,10,1)
(27,18,1)
(36,56,1)
(60,46,1)
(57,29,1)
(45,11,1)
(7,12,1)
(41,11,2)
(57,29,2)
(34,56,2)
(31,41,2)
(28,29,2)
(36,56,2)
(1,50,2)
(53,60,2)
(51,41,2)
(38,41,2)
(8,50,2)
(4,41,2)
(28,32,2)
(33,50,2)
(11,50,2)
(41,50,2)
(57,32,2)
(6,29,2)
(24,41,2)
(19,50,2)
(48,56,2)
(24,59,2)
(27,18,2)
(24,10,2)
(45,50,2)
(44,50,2)
(51,24,2)
(10,33,2)
(57,56,2)
(28,56,2)
(56,32,2)
(13,41,2)
(11,33,2)
(10,41,2)
(61,50,2)
(57,51,2)
(25,56,2)
(28,51,2)
(37,56,2)
(0,56,2)
(5,56,2)
(56,51,2)
-----------------------------------
(0,data)
(1,"")
(2,source)
(3,)
(4,"fgets()
(5,dest[data] = \\\'\\\\0\\\')
(6,printLine(dest)
(7,100)
(8,stdin)
(9,dest)
(10,atoi(inputBuffer)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,\\\'A\\\')
(13,data)
(14,\\\'\\\\0\\\')
(15,data)
(16,if(globalReturnsTrue()
(17,dest)
(18,100-1)
(19,inputBuffer)
(20,RET)
(21,source[100-1] = \\\'\\\\0\\\')
(22,inputBuffer)
(23,if (data < 100)
(24,(short)
(25,source)
(26,dest)
(27,source[100-1])
(28,memcpy(dest, source, data)
(29,dest[100] = "")
(30,)
(31,inputBuffer)
(32,data = 0)
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,dest)
(35,source)
(36,dest)
(37,data)
(38,printLine("fgets()
(39,)
(40,source)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,)
(43,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,CHAR_ARRAY_SIZE)
(45,NULL)
(46,1)
(47,)
(48,\\\'\\\\0\\\')
(49,)
(50,globalReturnsTrue()
(51,data = (short)
(52,1)
(53,memset(source, \\\'A\\\', 100-1)
(54,)
(55,100)
(56,data < 100)
(57,dest[data])
(58,100)
(59,short)
(60,100-1)
(61,inputBuffer)
(62,"")
(63,0)
(64,data)
(65,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^