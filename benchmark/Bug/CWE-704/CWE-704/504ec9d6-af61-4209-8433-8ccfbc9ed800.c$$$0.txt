-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_08_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_08_bad(){    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_08_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_08_bad
{    short data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,31,0)
(22,42,0)
(37,21,0)
(5,46,0)
(49,52,0)
(52,38,0)
(52,42,0)
(42,27,0)
(9,41,0)
(14,42,0)
(37,41,0)
(42,23,0)
(4,52,0)
(11,41,0)
(21,45,0)
(16,46,0)
(39,1,0)
(31,46,0)
(45,21,0)
(45,29,0)
(38,21,0)
(53,21,0)
(15,11,0)
(24,48,0)
(44,27,0)
(3,50,0)
(52,31,0)
(3,33,0)
(47,41,0)
(48,42,0)
(29,45,0)
(20,1,0)
(9,21,0)
(2,9,0)
(7,50,0)
(26,41,0)
(25,36,0)
(6,36,0)
(22,45,0)
(1,21,0)
(50,3,0)
(45,22,0)
(21,41,0)
(51,30,0)
(38,52,0)
(36,30,0)
(27,42,0)
(35,48,0)
(13,31,0)
(34,31,0)
(36,41,0)
(30,36,0)
(22,31,0)
(38,11,0)
(36,21,0)
(12,22,0)
(8,46,0)
(10,37,0)
(48,31,0)
(32,30,0)
(30,42,0)
(19,38,0)
(28,31,1)
(48,24,1)
(13,34,1)
(21,45,1)
(22,42,1)
(3,50,1)
(31,13,1)
(48,42,1)
(1,39,1)
(22,31,1)
(37,21,1)
(53,48,1)
(11,15,1)
(22,12,1)
(6,25,1)
(12,53,1)
(37,10,1)
(4,19,1)
(38,52,1)
(19,36,1)
(36,21,1)
(9,2,1)
(52,31,1)
(30,32,1)
(9,21,1)
(30,42,1)
(0,9,1)
(44,14,1)
(49,4,1)
(24,35,1)
(20,21,1)
(36,30,1)
(7,1,1)
(30,31,1)
(51,6,1)
(35,28,1)
(15,38,1)
(10,11,1)
(1,21,1)
(52,49,1)
(50,7,1)
(39,20,1)
(42,27,1)
(25,3,1)
(32,51,1)
(27,44,1)
(2,37,1)
(48,31,1)
(14,28,1)
(35,42,1)
(45,22,1)
(0,48,1)
(38,21,1)
(52,42,1)
(45,29,1)
(25,1,1)
(32,48,2)
(30,48,2)
(2,48,2)
(38,21,2)
(9,21,2)
(38,52,2)
(52,31,2)
(6,48,2)
(45,48,2)
(42,28,2)
(27,28,2)
(45,29,2)
(19,48,2)
(39,48,2)
(3,50,2)
(52,48,2)
(7,1,2)
(22,42,2)
(3,1,2)
(36,21,2)
(4,48,2)
(48,31,2)
(49,48,2)
(15,48,2)
(30,31,2)
(53,48,2)
(48,42,2)
(42,27,2)
(44,28,2)
(21,48,2)
(10,48,2)
(1,21,2)
(25,48,2)
(36,48,2)
(50,1,2)
(37,48,2)
(12,48,2)
(11,48,2)
(14,28,2)
(22,48,2)
(36,30,2)
(1,48,2)
(22,31,2)
(52,42,2)
(30,42,2)
(21,45,2)
(37,21,2)
(45,22,2)
(20,48,2)
(38,48,2)
(51,48,2)
(9,48,2)
-----------------------------------
(0,RET)
(1,dataBuffer == NULL)
(2,dataBuffer)
(3,exit(-1)
(4,data)
(5,data)
(6,\'A\')
(7,1)
(8,if(staticReturnsTrue()
(9,free(dataBuffer)
(10,dataBuffer)
(11,dataBuffer[data-1] = '\\\\0')
(12,data)
(13,0)
(14,data)
(15,\'\\\\0\')
(16,if (data < 100)
(17,'A')
(18,'\\\\0')
(19,dataBuffer)
(20,dataBuffer)
(21,* dataBuffer = (char *)
(22,malloc(data)
(23,)
(24,100)
(25,dataBuffer)
(26,dataBuffer)
(27,-1)
(28,staticReturnsTrue()
(29,char *)
(30,data-1)
(31,data = 0)
(32,1)
(33,)
(34,data)
(35,data)
(36,memset(dataBuffer, 'A', data-1)
(37,printLine(dataBuffer)
(38,dataBuffer[data-1])
(39,NULL)
(40,dataBuffer[data-1] = \'\\\\0\')
(41,)
(42,data = -1)
(43,memset(dataBuffer, \'A\', data-1)
(44,1)
(45,(char *)
(46,)
(47,if (dataBuffer == NULL)
(48,data < 100)
(49,1)
(50,-1)
(51,data)
(52,data-1)
(53,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^