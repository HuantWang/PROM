-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memmove_42_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
38,39
40,41
42,43
43,44
43,45
43,46
43,47
44,45
46,47
49,50
49,51
52,53
53,54
53,55
54,55
54,56
55,56
57,58
57,59
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,30,32,35,37,39,41,45,47,48,50,51,56,58,59,60,64,65,70,72,74,76,81,83,84,88,90
-----computeFrom-----
12,13
12,14
17,18
17,19
49,50
49,51
53,54
53,55
57,58
57,59
62,63
62,64
78,79
78,80
-----guardedBy-----
64,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_memmove_42_bad(){    short data;    /* Initialize data */    data = 0;    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_memmove_42_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_memmove_42_bad
{    short data;    /* Initialize data */    data = 0;    data = badSource(data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(37,23,0)
(8,37,0)
(10,40,0)
(28,37,0)
(18,23,0)
(22,18,0)
(42,24,0)
(35,31,0)
(31,35,0)
(12,39,0)
(16,7,0)
(20,42,0)
(14,24,0)
(39,12,0)
(3,35,0)
(43,39,0)
(33,31,0)
(42,0,0)
(29,7,0)
(4,7,0)
(30,24,0)
(30,18,0)
(25,42,0)
(34,24,0)
(24,30,0)
(7,37,0)
(1,30,0)
(2,23,0)
(41,38,0)
(31,37,0)
(38,0,0)
(5,40,0)
(44,18,0)
(11,35,0)
(24,23,0)
(26,37,0)
(13,42,0)
(19,26,0)
(32,14,0)
(40,7,0)
(42,7,0)
(17,14,0)
(4,37,0)
(6,37,0)
(9,12,0)
(36,31,0)
(21,39,0)
(27,4,0)
(40,38,0)
(12,26,0)
(40,24,0)
(41,40,1)
(30,1,1)
(24,30,1)
(42,7,1)
(40,5,1)
(32,26,1)
(14,24,1)
(39,43,1)
(42,24,1)
(10,42,1)
(35,11,1)
(16,29,1)
(9,31,1)
(13,25,1)
(26,19,1)
(40,7,1)
(18,44,1)
(34,18,1)
(29,24,1)
(4,27,1)
(25,14,1)
(1,34,1)
(21,9,1)
(20,13,1)
(30,18,1)
(40,24,1)
(33,36,1)
(17,32,1)
(31,35,1)
(19,12,1)
(38,41,1)
(3,33,1)
(42,20,1)
(43,21,1)
(5,10,1)
(7,16,1)
(12,39,1)
(4,7,1)
(11,3,1)
(27,14,1)
(27,38,1)
(15,4,1)
(14,17,1)
(36,7,1)
(44,22,1)
(40,7,2)
(10,14,2)
(30,18,2)
(42,24,2)
(31,35,2)
(42,14,2)
(4,7,2)
(13,14,2)
(25,14,2)
(14,24,2)
(41,14,2)
(24,30,2)
(20,14,2)
(5,14,2)
(40,14,2)
(38,14,2)
(40,24,2)
(42,7,2)
(12,39,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,100)
(4,printLine(dest)
(5,data)
(6,dest)
(7,dest[100] = "")
(8,source)
(9,source)
(10,dest)
(11,1)
(12,source[100-1])
(13,source)
(14,data < 100)
(15,RET)
(16,"")
(17,100)
(18,data = 0)
(19,\\\'\\\\0\\\')
(20,data)
(21,100)
(22,data)
(23,)
(24,data = badSource(data)
(25,dest)
(26,source[100-1] = \\\'\\\\0\\\')
(27,dest)
(28,if (data < 100)
(29,dest)
(30,badSource(data)
(31,memset(source, \\\'A\\\', 100-1)
(32,data)
(33,\\\'A\\\')
(34,data)
(35,100-1)
(36,source)
(37,)
(38,dest[data] = \\\'\\\\0\\\')
(39,100-1)
(40,dest[data])
(41,\\\'\\\\0\\\')
(42,memmove(dest, source, data)
(43,1)
(44,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^