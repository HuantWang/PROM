-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
197,198
197,199
198,199
200,201
202,203
202,204
203,204
203,205
204,205
207,208
207,209
207,210
207,211
207,212
207,213
208,209
209,210
209,211
211,212
211,213
211,214
214,215
215,216
215,217
216,217
216,218
218,219
220,221
220,222
221,222
223,224
225,226
225,227
226,227
226,228
227,228
229,230
231,232
232,233
233,234
233,235
234,235
236,237
238,239
239,240
239,241
239,242
239,243
240,241
242,243
245,246
245,247
246,247
249,250
250,251
250,252
251,252
251,253
252,253
254,255
254,256
255,256
259,260
260,261
260,262
261,262
263,264
265,266
266,267
266,268
267,268
269,270
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,188,192,194,199,201,205,206,210,212,213,217,219,222,224,228,230,235,237,241,243,244,247,248,253,256,257,258,262,264,268,270
-----computeFrom-----
12,13
12,14
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
190,191
190,192
203,204
203,205
226,227
226,228
245,246
245,247
250,251
250,252
254,255
254,256
-----guardedBy-----
192,201
205,256
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(21,78,0)
(116,123,0)
(115,23,0)
(72,68,0)
(142,141,0)
(19,156,0)
(121,124,0)
(32,103,0)
(41,78,0)
(77,131,0)
(119,159,0)
(23,115,0)
(108,130,0)
(110,96,0)
(54,124,0)
(55,91,0)
(155,60,0)
(138,158,0)
(91,68,0)
(95,124,0)
(87,124,0)
(65,68,0)
(144,140,0)
(120,21,0)
(47,155,0)
(122,70,0)
(104,135,0)
(53,140,0)
(158,96,0)
(71,135,0)
(9,90,0)
(36,109,0)
(75,115,0)
(12,135,0)
(68,139,0)
(85,90,0)
(22,125,0)
(125,31,0)
(18,119,0)
(74,20,0)
(141,142,0)
(27,76,0)
(21,23,0)
(0,55,0)
(20,139,0)
(66,65,0)
(26,136,0)
(89,64,0)
(103,139,0)
(163,152,0)
(157,124,0)
(109,132,0)
(140,125,0)
(136,26,0)
(142,82,0)
(37,124,0)
(141,23,0)
(83,144,0)
(129,124,0)
(153,110,0)
(78,139,0)
(117,156,0)
(150,72,0)
(146,49,0)
(137,118,0)
(12,68,0)
(24,56,0)
(13,158,0)
(65,135,0)
(80,101,0)
(90,136,0)
(40,103,0)
(82,142,0)
(35,40,0)
(132,109,0)
(49,125,0)
(149,105,0)
(135,124,0)
(56,70,0)
(170,28,0)
(151,21,0)
(136,90,0)
(113,155,0)
(17,50,0)
(112,105,0)
(91,56,0)
(56,91,0)
(23,139,0)
(101,103,0)
(4,105,0)
(20,76,0)
(56,24,0)
(10,1,0)
(118,125,0)
(147,91,0)
(132,29,0)
(15,31,0)
(60,168,0)
(48,123,0)
(103,101,0)
(60,139,0)
(33,136,0)
(127,84,0)
(96,139,0)
(160,82,0)
(81,12,0)
(22,161,0)
(67,26,0)
(46,82,0)
(131,124,0)
(45,115,0)
(8,139,0)
(22,112,0)
(123,74,0)
(42,93,0)
(166,147,0)
(63,28,0)
(140,50,0)
(28,63,0)
(76,20,0)
(133,23,0)
(96,110,0)
(105,152,0)
(62,144,0)
(79,131,0)
(92,139,0)
(6,12,0)
(34,139,0)
(2,28,0)
(168,60,0)
(68,72,0)
(28,105,0)
(43,139,0)
(59,93,0)
(86,152,0)
(63,31,0)
(39,112,0)
(91,55,0)
(93,139,0)
(124,14,0)
(111,149,0)
(57,115,0)
(97,124,0)
(50,31,0)
(112,60,0)
(112,22,0)
(171,91,0)
(25,68,0)
(155,105,0)
(144,60,0)
(52,169,0)
(61,25,0)
(58,33,0)
(69,31,0)
(100,125,0)
(106,25,0)
(115,68,0)
(154,141,0)
(103,40,0)
(51,60,0)
(118,31,0)
(82,23,0)
(143,63,0)
(169,125,0)
(63,125,0)
(145,119,0)
(164,72,0)
(140,144,0)
(70,56,0)
(74,123,0)
(125,22,0)
(73,168,0)
(94,74,0)
(105,149,0)
(102,63,0)
(44,72,0)
(115,156,0)
(49,31,0)
(126,141,0)
(30,169,0)
(38,7,0)
(28,60,0)
(16,68,0)
(156,115,0)
(3,124,0)
(114,159,0)
(144,105,0)
(159,139,0)
(91,147,0)
(134,152,0)
(161,22,0)
(136,33,0)
(65,165,0)
(6,38,1)
(82,23,1)
(22,112,1)
(76,27,1)
(115,156,1)
(49,146,1)
(62,53,1)
(74,94,1)
(56,70,1)
(170,102,1)
(27,74,1)
(56,24,1)
(9,135,1)
(119,145,1)
(90,85,1)
(143,169,1)
(53,63,1)
(167,12,1)
(155,113,1)
(164,150,1)
(72,164,1)
(155,105,1)
(71,131,1)
(167,65,1)
(98,155,1)
(144,60,1)
(11,60,1)
(23,115,1)
(65,68,1)
(127,33,1)
(80,32,1)
(63,125,1)
(6,127,1)
(6,108,1)
(39,100,1)
(140,125,1)
(45,75,1)
(118,125,1)
(28,60,1)
(160,46,1)
(101,80,1)
(115,57,1)
(65,66,1)
(79,77,1)
(0,56,1)
(136,90,1)
(93,42,1)
(49,125,1)
(12,81,1)
(100,155,1)
(112,60,1)
(41,21,1)
(60,168,1)
(36,169,1)
(67,90,1)
(102,143,1)
(106,68,1)
(104,71,1)
(19,117,1)
(126,23,1)
(50,17,1)
(10,167,1)
(51,78,1)
(33,58,1)
(137,49,1)
(91,56,1)
(96,110,1)
(143,132,1)
(144,83,1)
(91,68,1)
(70,122,1)
(32,40,1)
(61,106,1)
(123,116,1)
(47,5,1)
(40,35,1)
(26,67,1)
(16,93,1)
(154,126,1)
(135,104,1)
(48,159,1)
(44,16,1)
(52,125,1)
(25,68,1)
(42,59,1)
(140,144,1)
(33,136,1)
(159,114,1)
(156,19,1)
(113,47,1)
(75,133,1)
(12,68,1)
(81,6,1)
(66,12,1)
(136,26,1)
(58,136,1)
(138,13,1)
(18,103,1)
(91,55,1)
(2,170,1)
(68,72,1)
(6,89,1)
(35,25,1)
(112,105,1)
(74,123,1)
(108,142,1)
(21,120,1)
(38,25,1)
(142,82,1)
(94,123,1)
(131,79,1)
(155,60,1)
(59,33,1)
(151,142,1)
(82,160,1)
(47,167,1)
(21,23,1)
(147,91,1)
(6,11,1)
(105,149,1)
(115,68,1)
(153,158,1)
(144,105,1)
(30,52,1)
(47,10,1)
(25,61,1)
(169,125,1)
(141,23,1)
(168,73,1)
(89,147,1)
(85,9,1)
(28,105,1)
(5,105,1)
(73,51,1)
(12,135,1)
(22,161,1)
(13,20,1)
(133,147,1)
(122,171,1)
(65,135,1)
(112,39,1)
(118,137,1)
(63,28,1)
(145,18,1)
(110,153,1)
(142,141,1)
(103,40,1)
(171,96,1)
(109,36,1)
(141,154,1)
(147,166,1)
(78,41,1)
(98,118,1)
(125,22,1)
(57,156,1)
(17,140,1)
(120,151,1)
(116,48,1)
(46,141,1)
(132,109,1)
(103,101,1)
(111,4,1)
(20,76,1)
(114,119,1)
(149,111,1)
(158,138,1)
(169,30,1)
(117,45,1)
(77,5,1)
(55,0,1)
(146,50,1)
(9,11,1)
(28,2,1)
(166,91,1)
(150,44,1)
(83,62,1)
(49,155,2)
(48,25,2)
(72,33,2)
(112,60,2)
(142,82,2)
(91,25,2)
(168,142,2)
(32,25,2)
(155,105,2)
(115,147,2)
(76,25,2)
(115,68,2)
(131,5,2)
(18,25,2)
(137,155,2)
(65,12,2)
(27,25,2)
(135,5,2)
(147,91,2)
(91,55,2)
(40,25,2)
(104,5,2)
(25,33,2)
(22,112,2)
(28,155,2)
(23,147,2)
(103,25,2)
(81,5,2)
(46,141,2)
(145,25,2)
(56,70,2)
(60,142,2)
(110,25,2)
(77,5,2)
(33,5,2)
(49,125,2)
(167,5,2)
(56,24,2)
(63,125,2)
(20,76,2)
(123,25,2)
(33,11,2)
(59,33,2)
(28,105,2)
(106,33,2)
(65,68,2)
(79,5,2)
(23,115,2)
(51,142,2)
(170,155,2)
(141,147,2)
(55,25,2)
(155,60,2)
(159,25,2)
(125,155,2)
(58,5,2)
(114,25,2)
(19,147,2)
(117,147,2)
(33,136,2)
(153,25,2)
(44,33,2)
(94,25,2)
(115,156,2)
(57,147,2)
(112,105,2)
(132,109,2)
(12,68,2)
(66,12,2)
(90,11,2)
(144,155,2)
(36,169,2)
(45,147,2)
(96,25,2)
(119,25,2)
(141,23,2)
(74,25,2)
(109,169,2)
(125,22,2)
(62,155,2)
(144,60,2)
(89,147,2)
(120,142,2)
(118,125,2)
(101,25,2)
(30,155,2)
(78,142,2)
(74,123,2)
(112,155,2)
(11,142,2)
(50,155,2)
(20,25,2)
(82,141,2)
(154,147,2)
(67,11,2)
(147,25,2)
(71,5,2)
(68,33,2)
(143,155,2)
(22,161,2)
(171,25,2)
(35,25,2)
(13,25,2)
(136,26,2)
(17,155,2)
(38,25,2)
(0,25,2)
(25,68,2)
(126,147,2)
(52,155,2)
(85,5,2)
(156,147,2)
(158,25,2)
(67,5,2)
(103,40,2)
(21,23,2)
(63,155,2)
(140,125,2)
(144,105,2)
(102,155,2)
(105,149,2)
(70,25,2)
(53,155,2)
(136,90,2)
(39,155,2)
(132,169,2)
(118,155,2)
(26,5,2)
(133,147,2)
(136,5,2)
(6,5,2)
(151,142,2)
(169,125,2)
(82,23,2)
(12,135,2)
(63,28,2)
(160,141,2)
(127,33,2)
(91,68,2)
(22,155,2)
(122,25,2)
(90,5,2)
(100,155,2)
(16,33,2)
(41,142,2)
(9,11,2)
(12,5,2)
(75,147,2)
(9,5,2)
(96,110,2)
(68,72,2)
(83,155,2)
(10,167,2)
(28,60,2)
(58,11,2)
(169,155,2)
(56,25,2)
(91,56,2)
(116,25,2)
(142,141,2)
(150,33,2)
(140,144,2)
(2,155,2)
(142,147,2)
(108,142,2)
(85,11,2)
(146,155,2)
(103,101,2)
(61,33,2)
(140,155,2)
(93,33,2)
(26,11,2)
(73,142,2)
(65,135,2)
(21,142,2)
(42,33,2)
(80,25,2)
(136,11,2)
(166,25,2)
(60,168,2)
(164,33,2)
(138,25,2)
-----------------------------------
(0,service)
(1,)
(2,1)
(3,wsaDataInit)
(4,data)
(5,globalReturnsTrue()
(6,connectSocket)
(7,)
(8,if (recvResult == SOCKET_ERROR || recvResult == 0)
(9,2)
(10,WSACleanup()
(11,0)
(12,connectSocket != INVALID_SOCKET)
(13,service)
(14,)
(15,dataBuffer)
(16,connectSocket)
(17,\'\\\\0\')
(18,service)
(19,1)
(20,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(21,inputBuffer[recvResult])
(22,(char *)
(23,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(24,struct sockaddr*)
(25,connectSocket == INVALID_SOCKET)
(26,&wsaData)
(27,IP_ADDRESS)
(28,data-1)
(29,)
(30,NULL)
(31,)
(32,0)
(33,WSAStartup(MAKEWORD(2,2)
(34,if (connectSocket == INVALID_SOCKET)
(35,service)
(36,1)
(37,inputBuffer)
(38,break;)
(39,data)
(40,&service)
(41,\'\\\\0\')
(42,1)
(43,if (WSAStartup(MAKEWORD(2,2)
(44,AF_INET)
(45,inputBuffer)
(46,recvResult)
(47,data)
(48,service)
(49,printLine(dataBuffer)
(50,dataBuffer[data-1] = \'\\\\0\')
(51,data)
(52,dataBuffer)
(53,dataBuffer)
(54,service)
(55,sizeof(service)
(56,(struct sockaddr*)
(57,0)
(58,NO_ERROR)
(59,wsaDataInit)
(60,data = atoi(inputBuffer)
(61,INVALID_SOCKET)
(62,data)
(63,memset(dataBuffer, \'A\', data-1)
(64,)
(65,CLOSE_SOCKET(connectSocket)
(66,connectSocket)
(67,wsaData)
(68,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(69,if (dataBuffer == NULL)
(70,&service)
(71,connectSocket)
(72,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(73,inputBuffer)
(74,service.sin_addr.s_addr)
(75,connectSocket)
(76,inet_addr(IP_ADDRESS)
(77,wsaDataInit)
(78,inputBuffer[recvResult] = '\\\\0')
(79,0)
(80,service)
(81,INVALID_SOCKET)
(82,recvResult == 0)
(83,1)
(84,)
(85,2)
(86,if (data < 100)
(87,connectSocket)
(88,dataBuffer[data-1] = '\\\\0')
(89,break;)
(90,MAKEWORD(2,2)
(91,connect(connectSocket, (struct sockaddr*)
(92,if (connect(connectSocket, (struct sockaddr*)
(93,wsaDataInit = 1)
(94,s_addr)
(95,wsaData)
(96,service.sin_port = htons(TCP_PORT)
(97,if (connectSocket != INVALID_SOCKET)
(98,RET)
(99,inputBuffer[recvResult] = \'\\\\0\')
(100,dataBuffer)
(101,sizeof(service)
(102,'A')
(103,memset(&service, 0, sizeof(service)
(104,INVALID_SOCKET)
(105,data = -1)
(106,connectSocket)
(107,\'A\')
(108,break;)
(109,-1)
(110,htons(TCP_PORT)
(111,1)
(112,malloc(data)
(113,100)
(114,AF_INET)
(115,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(116,sin_addr)
(117,CHAR_ARRAY_SIZE)
(118,free(dataBuffer)
(119,service.sin_family)
(120,recvResult)
(121,recvResult)
(122,service)
(123,service.sin_addr)
(124,)
(125,* dataBuffer = (char *)
(126,recvResult)
(127,break;)
(128,'\\\\0')
(129,if (wsaDataInit)
(130,)
(131,wsaDataInit = 0)
(132,exit(-1)
(133,recvResult)
(134,if(globalReturnsTrue()
(135,connectSocket = INVALID_SOCKET)
(136,WSAStartup(MAKEWORD(2,2)
(137,dataBuffer)
(138,sin_port)
(139,)
(140,dataBuffer[data-1])
(141,recvResult == SOCKET_ERROR)
(142,recvResult == SOCKET_ERROR || recvResult == 0)
(143,dataBuffer)
(144,data-1)
(145,sin_family)
(146,dataBuffer)
(147,connect(connectSocket, (struct sockaddr*)
(148,memset(dataBuffer, 'A', data-1)
(149,-1)
(150,SOCK_STREAM)
(151,inputBuffer)
(152,)
(153,TCP_PORT)
(154,SOCKET_ERROR)
(155,data < 100)
(156,CHAR_ARRAY_SIZE - 1)
(157,do)
(158,service.sin_port)
(159,service.sin_family = AF_INET)
(160,0)
(161,char *)
(162,'\\\\0')
(163,data)
(164,IPPROTO_TCP)
(165,)
(166,SOCKET_ERROR)
(167,wsaDataInit)
(168,atoi(inputBuffer)
(169,dataBuffer == NULL)
(170,data)
(171,connectSocket)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^