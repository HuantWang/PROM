-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
69,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,70,71,73,77,79
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_04_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(18,10,0)
(36,9,0)
(34,13,0)
(0,9,0)
(16,20,0)
(5,14,0)
(33,13,0)
(23,20,0)
(4,28,0)
(7,5,0)
(31,34,0)
(6,14,0)
(35,25,0)
(30,7,0)
(7,30,0)
(20,28,0)
(11,38,0)
(28,38,0)
(9,13,0)
(14,5,0)
(0,24,0)
(9,0,0)
(13,35,0)
(32,35,0)
(22,5,0)
(1,7,0)
(27,34,0)
(3,17,0)
(10,34,0)
(21,0,0)
(8,13,0)
(37,38,0)
(17,29,0)
(16,28,0)
(7,0,0)
(7,20,0)
(34,10,0)
(20,7,0)
(26,16,0)
(15,35,0)
(19,34,0)
(5,38,0)
(23,17,1)
(16,20,1)
(27,19,1)
(10,18,1)
(8,12,1)
(16,26,1)
(5,14,1)
(36,21,1)
(13,33,1)
(34,13,1)
(18,34,1)
(6,22,1)
(3,10,1)
(7,1,1)
(12,5,1)
(20,7,1)
(7,30,1)
(21,10,1)
(9,36,1)
(0,9,1)
(10,34,1)
(1,23,1)
(34,27,1)
(26,20,1)
(14,6,1)
(33,8,1)
(19,31,1)
(7,0,1)
(7,5,1)
(23,12,1)
(31,13,1)
(17,3,1)
(9,13,1)
(2,16,1)
(23,0,1)
(13,12,2)
(7,5,2)
(34,13,2)
(10,34,2)
(18,12,2)
(16,20,2)
(7,30,2)
(5,14,2)
(10,12,2)
(8,12,2)
(33,12,2)
(27,12,2)
(17,10,2)
(9,10,2)
(7,0,2)
(20,7,2)
(0,9,2)
(31,12,2)
(9,13,2)
(19,12,2)
(0,10,2)
(21,10,2)
(3,10,2)
(34,12,2)
(36,10,2)
-----------------------------------
(0,data = atoi(inputBuffer)
(1,data)
(2,RET)
(3,"fgets()
(4,charData)
(5,data = -1)
(6,1)
(7,(char)
(8,inputBuffer)
(9,atoi(inputBuffer)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,if(STATIC_CONST_TRUE)
(12,STATIC_CONST_TRUE)
(13,inputBuffer[CHAR_ARRAY_SIZE] = "")
(14,-1)
(15,inputBuffer)
(16,printHexCharLine(charData)
(17,printLine("fgets()
(18,NULL)
(19,CHAR_ARRAY_SIZE)
(20,charData = (char)
(21,data)
(22,data)
(23,charData)
(24,)
(25,)
(26,charData)
(27,stdin)
(28,)
(29,)
(30,char)
(31,inputBuffer)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,"")
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,)
(36,inputBuffer)
(37,data)
(38,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^