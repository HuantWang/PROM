-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_02_bad()
{
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    if(1)
    {
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
41,42
42,43
43,44
43,45
44,45
46,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,29,30,31,36,37,38,40,45,48,52,56,58,60
-----computeFrom-----
26,27
26,28
33,34
33,35
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_02_bad(){    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(1)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_02_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_02_bad
{    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(1)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
if(1)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
1
{        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(16,19,0)
(26,12,0)
(16,12,0)
(10,13,0)
(17,8,0)
(3,21,0)
(12,16,0)
(17,13,0)
(8,17,0)
(4,8,0)
(18,1,0)
(20,13,0)
(11,13,0)
(24,13,0)
(14,16,0)
(8,12,0)
(19,13,0)
(23,19,0)
(1,9,0)
(22,19,0)
(9,13,0)
(0,11,0)
(21,11,0)
(12,5,0)
(15,1,0)
(6,13,0)
(8,4,0)
(2,21,0)
(27,8,0)
(28,9,0)
(27,12,1)
(25,17,1)
(17,8,1)
(2,3,1)
(7,11,1)
(18,15,1)
(16,19,1)
(27,7,1)
(0,21,1)
(8,12,1)
(3,9,1)
(12,16,1)
(9,28,1)
(14,26,1)
(8,4,1)
(11,0,1)
(28,1,1)
(8,27,1)
(16,14,1)
(15,19,1)
(1,18,1)
(23,22,1)
(26,7,1)
(19,23,1)
(21,2,1)
(8,4,2)
(8,12,2)
(14,7,2)
(26,7,2)
(16,7,2)
(16,19,2)
(12,16,2)
(12,7,2)
(17,8,2)
-----------------------------------
(0,0)
(1,dataGoodBuffer.intOne)
(2,intTwo)
(3,dataGoodBuffer)
(4,twoIntsStruct *)
(5,)
(6,if(1)
(7,1)
(8,(twoIntsStruct *)
(9,dataGoodBuffer.intOne = 0)
(10,data)
(11,dataGoodBuffer.intTwo = 0)
(12,data = &dataBadBuffer)
(13,)
(14,dataBadBuffer)
(15,dataGoodBuffer)
(16,&dataBadBuffer)
(17,printStructLine((twoIntsStruct *)
(18,intOne)
(19,dataBadBuffer = 100)
(20,dataBadBuffer)
(21,dataGoodBuffer.intTwo)
(22,dataBadBuffer)
(23,100)
(24,dataGoodBuffer)
(25,RET)
(26,data)
(27,data)
(28,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^