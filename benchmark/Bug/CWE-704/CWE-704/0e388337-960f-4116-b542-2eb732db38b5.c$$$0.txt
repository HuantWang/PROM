-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,38,39,43,44,48,50,51,55,57,60,62,66,68,73,75,79,81,82,85,86,91,94,95,96,100,102,106,108
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
41,42
41,43
64,65
64,66
83,84
83,85
88,89
88,90
92,93
92,94
-----guardedBy-----
43,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,45,0)
(17,53,0)
(47,10,0)
(25,27,0)
(57,13,0)
(16,23,0)
(56,46,0)
(36,21,0)
(51,18,0)
(17,25,0)
(10,43,0)
(18,10,0)
(13,10,0)
(2,53,0)
(24,44,0)
(14,57,0)
(34,25,0)
(6,13,0)
(29,21,0)
(17,10,0)
(57,21,0)
(53,17,0)
(13,57,0)
(9,34,0)
(4,21,0)
(33,29,0)
(13,25,0)
(8,7,0)
(5,1,0)
(48,1,0)
(23,16,0)
(41,25,0)
(50,17,0)
(54,34,0)
(28,53,0)
(46,21,0)
(55,43,0)
(53,21,0)
(21,23,0)
(24,30,0)
(0,13,0)
(47,25,0)
(52,8,0)
(43,10,0)
(4,1,0)
(18,25,0)
(15,10,0)
(47,23,0)
(30,24,0)
(3,45,0)
(25,34,0)
(35,17,0)
(31,30,0)
(57,19,0)
(7,10,0)
(38,45,0)
(21,1,0)
(7,8,0)
(23,47,0)
(37,8,0)
(11,7,0)
(8,26,0)
(12,29,0)
(19,1,0)
(53,1,0)
(42,47,0)
(49,19,0)
(23,21,0)
(39,45,0)
(46,1,0)
(40,4,0)
(20,18,0)
(35,50,1)
(49,57,1)
(51,8,1)
(52,37,1)
(4,21,1)
(8,7,1)
(17,25,1)
(41,22,1)
(25,34,1)
(13,25,1)
(51,25,1)
(47,10,1)
(28,2,1)
(17,35,1)
(18,25,1)
(6,0,1)
(2,29,1)
(47,42,1)
(13,6,1)
(29,12,1)
(43,55,1)
(14,53,1)
(0,14,1)
(46,21,1)
(36,18,1)
(7,10,1)
(54,41,1)
(2,24,1)
(32,46,1)
(53,17,1)
(47,25,1)
(24,30,1)
(57,13,1)
(53,21,1)
(37,22,1)
(31,29,1)
(23,47,1)
(30,31,1)
(40,19,1)
(9,54,1)
(7,11,1)
(42,36,1)
(17,10,1)
(32,18,1)
(55,15,1)
(33,21,1)
(19,49,1)
(57,21,1)
(29,21,1)
(22,10,1)
(4,40,1)
(11,52,1)
(13,10,1)
(21,23,1)
(10,43,1)
(23,16,1)
(34,9,1)
(20,51,1)
(18,10,1)
(46,56,1)
(56,4,1)
(50,28,1)
(12,33,1)
(18,20,1)
(46,21,2)
(23,47,2)
(14,18,2)
(54,22,2)
(0,18,2)
(13,10,2)
(53,21,2)
(13,18,2)
(23,18,2)
(40,18,2)
(49,18,2)
(2,18,2)
(4,21,2)
(4,18,2)
(52,22,2)
(57,18,2)
(47,25,2)
(23,16,2)
(21,18,2)
(33,18,2)
(12,18,2)
(37,22,2)
(10,43,2)
(11,22,2)
(36,18,2)
(18,10,2)
(53,18,2)
(56,18,2)
(35,18,2)
(31,29,2)
(53,17,2)
(17,18,2)
(17,25,2)
(34,22,2)
(21,23,2)
(7,10,2)
(42,18,2)
(19,18,2)
(6,18,2)
(46,18,2)
(57,21,2)
(8,22,2)
(9,22,2)
(7,22,2)
(8,7,2)
(29,18,2)
(24,30,2)
(13,25,2)
(24,29,2)
(30,29,2)
(25,34,2)
(47,18,2)
(18,25,2)
(25,22,2)
(41,22,2)
(28,18,2)
(57,13,2)
(47,10,2)
(17,10,2)
(29,21,2)
(50,18,2)
-----------------------------------
(0,data)
(1,)
(2,dataBuffer)
(3,data)
(4,printLine(dataBuffer)
(5,dataBuffer)
(6,1)
(7,&data)
(8,fscanf(stdin, "%d", &data)
(9,1)
(10,data = -1)
(11,data)
(12,NULL)
(13,data-1)
(14,dataBuffer)
(15,data)
(16,char *)
(17,data-1)
(18,data < 100)
(19,dataBuffer[data-1] = \\\'\\\\0\\\')
(20,100)
(21,* dataBuffer = (char *)
(22,globalReturnsTrueOrFalse()
(23,(char *)
(24,exit(-1)
(25,data = 100-1)
(26,)
(27,)
(28,\\\'A\\\')
(29,dataBuffer == NULL)
(30,-1)
(31,1)
(32,RET)
(33,dataBuffer)
(34,100-1)
(35,1)
(36,dataBuffer)
(37,stdin)
(38,if(globalReturnsTrueOrFalse()
(39,if (data < 100)
(40,dataBuffer)
(41,data)
(42,data)
(43,-1)
(44,)
(45,)
(46,free(dataBuffer)
(47,malloc(data)
(48,if (dataBuffer == NULL)
(49,\\\'\\\\0\\\')
(50,data)
(51,data)
(52,"%d")
(53,memset(dataBuffer, \\\'A\\\', data-1)
(54,100)
(55,1)
(56,dataBuffer)
(57,dataBuffer[data-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^