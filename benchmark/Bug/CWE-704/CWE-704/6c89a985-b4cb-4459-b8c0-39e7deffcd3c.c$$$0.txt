-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_05_bad()
{
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    if(staticTrue)
    {
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
40,41
42,43
43,44
44,45
44,46
45,46
47,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,29,30,31,36,37,38,41,46,49,53,57,59,61
-----computeFrom-----
26,27
26,28
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_05_bad(){    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(staticTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_05_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_05_bad
{    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(staticTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
if(staticTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
staticTrue
staticTrue
{        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(25,27,0)
(19,6,0)
(9,27,0)
(16,11,0)
(0,8,0)
(26,8,0)
(22,13,0)
(14,6,0)
(23,8,0)
(5,11,0)
(7,21,0)
(13,3,0)
(28,8,0)
(17,3,0)
(20,8,0)
(13,27,0)
(11,21,0)
(25,0,0)
(4,19,0)
(2,19,0)
(18,25,0)
(3,8,0)
(12,25,0)
(21,8,0)
(25,12,0)
(27,13,0)
(6,8,0)
(0,25,0)
(10,3,0)
(27,1,0)
(21,7,1)
(25,12,1)
(2,3,1)
(18,27,1)
(16,6,1)
(13,3,1)
(11,5,1)
(7,11,1)
(24,0,1)
(9,15,1)
(25,27,1)
(19,4,1)
(14,19,1)
(5,16,1)
(15,21,1)
(17,10,1)
(25,18,1)
(6,14,1)
(22,9,1)
(27,13,1)
(13,22,1)
(4,2,1)
(0,25,1)
(3,17,1)
(18,15,1)
(27,13,2)
(27,15,2)
(25,12,2)
(13,3,2)
(25,27,2)
(9,15,2)
(0,25,2)
(13,15,2)
(22,15,2)
-----------------------------------
(0,printStructLine((twoIntsStruct *)
(1,)
(2,dataGoodBuffer)
(3,dataBadBuffer = 100)
(4,intOne)
(5,intTwo)
(6,dataGoodBuffer.intOne = 0)
(7,0)
(8,)
(9,data)
(10,dataBadBuffer)
(11,dataGoodBuffer.intTwo)
(12,twoIntsStruct *)
(13,&dataBadBuffer)
(14,0)
(15,staticTrue)
(16,dataGoodBuffer)
(17,100)
(18,data)
(19,dataGoodBuffer.intOne)
(20,dataBadBuffer)
(21,dataGoodBuffer.intTwo = 0)
(22,dataBadBuffer)
(23,dataGoodBuffer)
(24,RET)
(25,(twoIntsStruct *)
(26,data)
(27,data = &dataBadBuffer)
(28,if(staticTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^