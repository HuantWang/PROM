-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_54e_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_54e_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_54e_badSink(short data)
CWE194_Unexpected_Sign_Extension__rand_malloc_54e_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(43,15,0)
(42,23,0)
(5,25,0)
(39,37,0)
(21,9,0)
(20,37,0)
(36,39,0)
(28,34,0)
(1,39,0)
(17,40,0)
(42,33,0)
(30,37,0)
(25,5,0)
(40,17,0)
(5,24,0)
(9,14,0)
(27,43,0)
(33,15,0)
(17,37,0)
(17,14,0)
(43,28,0)
(19,28,0)
(23,42,0)
(37,14,0)
(34,14,0)
(28,37,0)
(35,14,0)
(2,14,0)
(33,42,0)
(26,30,0)
(28,43,0)
(8,34,0)
(40,15,0)
(6,43,0)
(30,14,0)
(10,17,0)
(37,42,0)
(16,25,0)
(18,17,0)
(22,0,0)
(42,37,0)
(29,40,0)
(4,0,0)
(3,33,0)
(7,40,0)
(9,37,0)
(38,12,0)
(0,15,0)
(21,34,1)
(36,37,1)
(6,19,1)
(19,17,1)
(43,15,1)
(26,9,1)
(3,20,1)
(42,23,1)
(40,15,1)
(9,37,1)
(5,25,1)
(18,39,1)
(10,18,1)
(30,26,1)
(34,8,1)
(4,22,1)
(33,15,1)
(18,5,1)
(33,3,1)
(17,37,1)
(39,37,1)
(42,33,1)
(25,16,1)
(29,7,1)
(0,15,1)
(28,43,1)
(17,40,1)
(43,27,1)
(20,0,1)
(7,10,1)
(30,37,1)
(9,21,1)
(0,4,1)
(16,39,1)
(40,29,1)
(28,37,1)
(13,30,1)
(27,6,1)
(13,0,1)
(8,28,1)
(1,36,1)
(39,1,1)
(37,42,1)
(5,39,2)
(9,37,2)
(8,0,2)
(1,0,2)
(19,0,2)
(42,33,2)
(0,15,2)
(10,0,2)
(25,39,2)
(40,0,2)
(27,0,2)
(21,0,2)
(39,37,2)
(18,0,2)
(29,0,2)
(30,0,2)
(30,37,2)
(5,25,2)
(26,0,2)
(43,0,2)
(36,0,2)
(37,42,2)
(33,15,2)
(42,23,2)
(43,15,2)
(16,39,2)
(7,0,2)
(37,0,2)
(3,0,2)
(33,0,2)
(34,0,2)
(6,0,2)
(20,0,2)
(17,40,2)
(40,15,2)
(28,0,2)
(42,0,2)
(39,0,2)
(17,0,2)
(9,0,2)
(28,43,2)
(17,37,2)
(28,37,2)
-----------------------------------
(0,data < 100)
(1,NULL)
(2,dataBuffer)
(3,data)
(4,100)
(5,exit(-1)
(6,data)
(7,data)
(8,\'\\\\0\')
(9,printLine(dataBuffer)
(10,'A')
(11,'\\\\0')
(12,)
(13,RET)
(14,)
(15,short data)
(16,1)
(17,memset(dataBuffer, 'A', data-1)
(18,dataBuffer)
(19,dataBuffer)
(20,dataBuffer)
(21,dataBuffer)
(22,data)
(23,char *)
(24,)
(25,-1)
(26,dataBuffer)
(27,1)
(28,dataBuffer[data-1])
(29,1)
(30,free(dataBuffer)
(31,memset(dataBuffer, \'A\', data-1)
(32,\'A\')
(33,malloc(data)
(34,dataBuffer[data-1] = \'\\\\0\')
(35,if (dataBuffer == NULL)
(36,dataBuffer)
(37,* dataBuffer = (char *)
(38,if (data < 100)
(39,dataBuffer == NULL)
(40,data-1)
(41,dataBuffer[data-1] = '\\\\0')
(42,(char *)
(43,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^