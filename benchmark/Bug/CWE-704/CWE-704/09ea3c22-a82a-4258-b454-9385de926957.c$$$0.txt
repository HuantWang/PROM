-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_15_bad()
{
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
45,46
45,47
46,47
48,49
49,50
53,54
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,29,30,31,36,37,38,40,43,47,50,51,52,56,57,58,62,66,68,70
-----computeFrom-----
26,27
26,28
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_15_bad(){    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    switch(6)    {    case 6:        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_15_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_15_bad
{    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    switch(6)    {    case 6:        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
switch(6)    {    case 6:        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(22,17,0)
(11,3,0)
(28,8,0)
(13,16,0)
(1,4,0)
(5,17,0)
(7,17,0)
(30,12,0)
(27,15,0)
(21,15,0)
(32,13,0)
(10,15,0)
(8,15,0)
(23,25,0)
(8,11,0)
(3,17,0)
(4,17,0)
(26,25,0)
(11,8,0)
(18,19,0)
(18,8,0)
(19,17,0)
(6,3,0)
(12,15,0)
(24,16,0)
(18,2,0)
(20,15,0)
(0,13,0)
(14,11,0)
(19,18,0)
(33,18,0)
(34,17,0)
(16,17,0)
(31,3,0)
(25,4,0)
(2,18,0)
(27,12,1)
(18,2,1)
(4,1,1)
(18,8,1)
(25,26,1)
(3,6,1)
(19,18,1)
(0,32,1)
(26,23,1)
(23,16,1)
(8,11,1)
(13,0,1)
(6,31,1)
(1,25,1)
(32,3,1)
(14,28,1)
(12,30,1)
(33,20,1)
(20,8,1)
(18,33,1)
(11,3,1)
(29,19,1)
(16,24,1)
(9,4,1)
(28,9,1)
(33,27,1)
(24,13,1)
(30,9,1)
(11,14,1)
(11,3,2)
(18,2,2)
(19,18,2)
(27,9,2)
(11,9,2)
(8,11,2)
(20,9,2)
(28,9,2)
(14,9,2)
(18,8,2)
(8,9,2)
(30,9,2)
(12,9,2)
-----------------------------------
(0,intOne)
(1,0)
(2,twoIntsStruct *)
(3,dataBadBuffer = 100)
(4,dataGoodBuffer.intTwo = 0)
(5,switch(6)
(6,100)
(7,dataGoodBuffer)
(8,data = &dataBadBuffer)
(9,6)
(10,case 6:)
(11,&dataBadBuffer)
(12,printLine("Benign, fixed string")
(13,dataGoodBuffer.intOne)
(14,dataBadBuffer)
(15,)
(16,dataGoodBuffer.intOne = 0)
(17,)
(18,(twoIntsStruct *)
(19,printStructLine((twoIntsStruct *)
(20,break;)
(21,default:)
(22,data)
(23,dataGoodBuffer)
(24,0)
(25,dataGoodBuffer.intTwo)
(26,intTwo)
(27,break;)
(28,data)
(29,RET)
(30,"Benign, fixed string")
(31,dataBadBuffer)
(32,dataGoodBuffer)
(33,data)
(34,dataBadBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^