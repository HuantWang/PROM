-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_13_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
42,44
42,45
45,46
46,47
46,48
47,48
47,49
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,41,43,44,48,50,53,55,59,61,66,68,72,74,75,78,79,84,87,88,89,93,95,99,101
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
57,58
57,59
76,77
76,78
81,82
81,83
85,86
85,87
-----guardedBy-----
36,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_13_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_13_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_13_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(47,24,0)
(21,22,0)
(15,24,0)
(48,4,0)
(19,36,0)
(27,22,0)
(13,39,0)
(16,32,0)
(17,32,0)
(43,37,0)
(34,25,0)
(0,53,0)
(12,20,0)
(2,12,0)
(27,36,0)
(37,12,0)
(17,37,0)
(9,25,0)
(37,17,0)
(50,26,0)
(28,26,0)
(36,9,0)
(30,25,0)
(6,56,0)
(39,13,0)
(42,37,0)
(37,22,0)
(32,25,0)
(44,29,0)
(26,28,0)
(22,11,0)
(5,13,0)
(28,41,0)
(56,25,0)
(46,17,0)
(41,28,0)
(26,22,0)
(1,36,0)
(56,9,0)
(4,12,0)
(17,9,0)
(29,9,0)
(36,25,0)
(52,4,0)
(35,21,0)
(3,22,0)
(23,11,0)
(8,9,0)
(29,25,0)
(39,31,0)
(12,4,0)
(54,53,0)
(14,21,0)
(4,52,0)
(7,27,0)
(33,11,0)
(45,11,0)
(10,22,0)
(27,12,0)
(55,27,0)
(24,9,0)
(9,28,0)
(21,12,0)
(28,9,0)
(4,48,0)
(36,27,0)
(26,12,0)
(22,3,1)
(24,9,1)
(27,7,1)
(48,2,1)
(14,53,1)
(29,9,1)
(26,50,1)
(7,55,1)
(15,9,1)
(4,48,1)
(55,19,1)
(44,56,1)
(6,32,1)
(39,13,1)
(26,22,1)
(35,14,1)
(8,21,1)
(1,39,1)
(16,17,1)
(43,42,1)
(26,12,1)
(3,10,1)
(14,12,1)
(36,9,1)
(32,16,1)
(37,43,1)
(36,27,1)
(21,22,1)
(0,54,1)
(27,12,1)
(13,5,1)
(46,36,1)
(51,29,1)
(9,28,1)
(56,6,1)
(1,24,1)
(50,8,1)
(24,47,1)
(4,52,1)
(37,12,1)
(2,53,1)
(29,44,1)
(51,21,1)
(56,9,1)
(54,22,1)
(5,24,1)
(28,41,1)
(47,15,1)
(37,22,1)
(27,22,1)
(17,9,1)
(19,1,1)
(21,35,1)
(12,4,1)
(53,0,1)
(28,26,1)
(21,12,1)
(42,46,1)
(17,37,1)
(12,53,2)
(1,21,2)
(4,53,2)
(15,21,2)
(8,21,2)
(12,4,2)
(37,21,2)
(9,21,2)
(47,21,2)
(46,21,2)
(28,26,2)
(37,22,2)
(48,53,2)
(24,21,2)
(39,24,2)
(6,21,2)
(4,52,2)
(36,27,2)
(55,21,2)
(29,21,2)
(37,12,2)
(13,24,2)
(7,21,2)
(27,22,2)
(42,21,2)
(43,21,2)
(17,21,2)
(26,21,2)
(2,53,2)
(17,37,2)
(4,48,2)
(26,12,2)
(26,22,2)
(28,41,2)
(27,21,2)
(28,21,2)
(39,13,2)
(32,21,2)
(44,21,2)
(21,12,2)
(17,9,2)
(5,24,2)
(24,9,2)
(16,21,2)
(21,22,2)
(27,12,2)
(56,9,2)
(56,21,2)
(36,9,2)
(29,9,2)
(19,21,2)
(9,28,2)
(36,21,2)
(50,21,2)
-----------------------------------
(0,5)
(1,dataBuffer)
(2,data)
(3,0)
(4,(short)
(5,1)
(6,dataBuffer)
(7,1)
(8,dataBuffer)
(9,* dataBuffer = (char *)
(10,data)
(11,)
(12,data = (short)
(13,-1)
(14,data)
(15,dataBuffer)
(16,'\\\\0')
(17,dataBuffer[data-1])
(18,\'\\\\0\')
(19,'A')
(20,)
(21,data < 100)
(22,data = 0)
(23,data)
(24,dataBuffer == NULL)
(25,)
(26,malloc(data)
(27,data-1)
(28,(char *)
(29,free(dataBuffer)
(30,if (dataBuffer == NULL)
(31,)
(32,dataBuffer[data-1] = \'\\\\0\')
(33,if (data < 100)
(34,dataBuffer)
(35,100)
(36,memset(dataBuffer, 'A', data-1)
(37,data-1)
(38,\'A\')
(39,exit(-1)
(40,dataBuffer[data-1] = '\\\\0')
(41,char *)
(42,data)
(43,1)
(44,dataBuffer)
(45,if(GLOBAL_CONST_FIVE==5)
(46,dataBuffer)
(47,NULL)
(48,RAND32()
(49,memset(dataBuffer, \'A\', data-1)
(50,data)
(51,RET)
(52,short)
(53,GLOBAL_CONST_FIVE==5)
(54,GLOBAL_CONST_FIVE)
(55,data)
(56,printLine(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^