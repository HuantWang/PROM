-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_18_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    goto source;
source:
    /* FLAW: Use a negative number */
    data = -1;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,18,20,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_18_bad(){    int data;    /* Initialize data */    data = -1;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_18_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_18_bad
{    int data;    /* Initialize data */    data = -1;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
goto source;
source
source:    /* FLAW: Use a negative number */    data = -1;
source
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,21,0)
(35,25,0)
(7,28,0)
(40,30,0)
(19,10,0)
(36,22,0)
(8,26,0)
(28,49,0)
(28,11,0)
(17,30,0)
(31,49,0)
(23,11,0)
(25,35,0)
(42,25,0)
(13,10,0)
(50,6,0)
(23,19,0)
(33,24,0)
(47,29,0)
(27,44,0)
(4,19,0)
(9,30,0)
(34,36,0)
(29,11,0)
(44,26,0)
(32,33,0)
(10,30,0)
(46,22,0)
(12,11,0)
(44,11,0)
(11,26,0)
(2,26,0)
(21,10,0)
(19,23,0)
(49,10,0)
(22,36,0)
(33,10,0)
(43,13,0)
(28,3,0)
(6,11,0)
(6,26,0)
(35,41,0)
(0,21,0)
(5,19,0)
(23,26,0)
(52,23,0)
(20,30,0)
(14,23,0)
(39,10,0)
(22,30,0)
(15,29,0)
(24,11,0)
(49,28,0)
(24,33,0)
(37,49,0)
(53,13,0)
(3,26,0)
(18,24,0)
(1,3,0)
(24,18,0)
(11,24,0)
(21,0,1)
(22,36,1)
(43,53,1)
(49,37,1)
(37,31,1)
(6,50,1)
(42,29,1)
(16,44,1)
(28,49,1)
(6,11,1)
(23,19,1)
(25,42,1)
(33,32,1)
(24,18,1)
(23,11,1)
(13,10,1)
(53,10,1)
(24,33,1)
(28,11,1)
(29,11,1)
(44,27,1)
(52,35,1)
(34,46,1)
(35,25,1)
(16,13,1)
(52,29,1)
(10,21,1)
(12,13,1)
(11,24,1)
(33,10,1)
(19,10,1)
(15,47,1)
(5,4,1)
(47,11,1)
(14,52,1)
(0,39,1)
(32,12,1)
(4,14,1)
(49,10,1)
(7,23,1)
(50,3,1)
(1,28,1)
(19,5,1)
(36,34,1)
(31,7,1)
(13,43,1)
(39,20,1)
(44,11,1)
(27,6,1)
(20,22,1)
(3,1,1)
(29,15,1)
(1,13,2)
(27,13,2)
(4,13,2)
(13,10,2)
(49,13,2)
(42,29,2)
(6,13,2)
(28,49,2)
(24,13,2)
(31,13,2)
(33,10,2)
(52,13,2)
(14,13,2)
(28,11,2)
(10,21,2)
(23,13,2)
(24,33,2)
(32,13,2)
(44,11,2)
(49,10,2)
(6,11,2)
(47,13,2)
(23,11,2)
(37,13,2)
(19,10,2)
(35,25,2)
(29,13,2)
(11,13,2)
(11,24,2)
(35,29,2)
(50,13,2)
(22,36,2)
(5,13,2)
(24,18,2)
(15,13,2)
(12,13,2)
(44,13,2)
(33,13,2)
(19,13,2)
(28,13,2)
(7,13,2)
(25,29,2)
(3,13,2)
(29,11,2)
(23,19,2)
-----------------------------------
(0,1)
(1,'\\\\0')
(2,if (dataBuffer == NULL)
(3,dataBuffer[data-1] = '\\\\0')
(4,data)
(5,1)
(6,printLine(dataBuffer)
(7,dataBuffer)
(8,dataBuffer)
(9,source:)
(10,data = -1)
(11,* dataBuffer = (char *)
(12,dataBuffer)
(13,data < 100)
(14,\'A\')
(15,NULL)
(16,RET)
(17,if (data < 100)
(18,char *)
(19,data-1)
(20,goto source;)
(21,-1)
(22,data = -1)
(23,memset(dataBuffer, \'A\', data-1)
(24,(char *)
(25,-1)
(26,)
(27,dataBuffer)
(28,dataBuffer[data-1])
(29,dataBuffer == NULL)
(30,)
(31,data)
(32,data)
(33,malloc(data)
(34,1)
(35,exit(-1)
(36,-1)
(37,1)
(38,dataBuffer[data-1] = \'\\\\0\')
(39,data)
(40,data)
(41,)
(42,1)
(43,100)
(44,free(dataBuffer)
(45,\'\\\\0\')
(46,data)
(47,dataBuffer)
(48,'A')
(49,data-1)
(50,dataBuffer)
(51,memset(dataBuffer, 'A', data-1)
(52,dataBuffer)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^