-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
65,67
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,66,67,69,73,75
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_short_01_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_short_01_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_short_01_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(27,32,0)
(26,30,0)
(14,27,0)
(28,21,0)
(30,27,0)
(7,22,0)
(24,5,0)
(23,21,0)
(27,16,0)
(8,30,0)
(11,21,0)
(32,12,0)
(29,25,0)
(24,12,0)
(25,26,0)
(5,24,0)
(31,13,0)
(30,8,0)
(35,12,0)
(20,12,0)
(34,26,0)
(22,21,0)
(25,28,0)
(17,11,0)
(9,5,0)
(12,11,0)
(33,15,0)
(26,28,0)
(6,28,0)
(18,24,0)
(15,22,0)
(30,22,0)
(30,26,0)
(4,32,0)
(3,24,0)
(1,31,0)
(2,11,0)
(22,15,0)
(0,30,0)
(19,24,0)
(32,27,0)
(5,24,1)
(35,20,1)
(15,33,1)
(27,32,1)
(24,12,1)
(25,29,1)
(22,15,1)
(31,1,1)
(1,5,1)
(34,31,1)
(30,8,1)
(32,12,1)
(26,30,1)
(20,22,1)
(29,26,1)
(30,22,1)
(34,27,1)
(0,34,1)
(3,12,1)
(30,0,1)
(4,14,1)
(10,25,1)
(33,7,1)
(24,18,1)
(9,24,1)
(5,9,1)
(18,19,1)
(14,5,1)
(12,35,1)
(19,3,1)
(32,4,1)
(30,27,1)
(25,26,1)
(1,5,2)
(27,5,2)
(25,26,2)
(32,5,2)
(31,5,2)
(24,12,2)
(30,22,2)
(27,32,2)
(26,30,2)
(32,12,2)
(22,15,2)
(4,5,2)
(5,24,2)
(14,5,2)
(30,8,2)
(30,27,2)
-----------------------------------
(0,data)
(1,"fgets()
(2,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,inputBuffer)
(4,inputBuffer)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,shortData)
(7,data)
(8,short)
(9,NULL)
(10,RET)
(11,)
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,)
(14,data)
(15,-1)
(16,)
(17,inputBuffer)
(18,stdin)
(19,CHAR_ARRAY_SIZE)
(20,inputBuffer)
(21,)
(22,data = -1)
(23,data)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,printShortLine(shortData)
(26,shortData = (short)
(27,data = atoi(inputBuffer)
(28,)
(29,shortData)
(30,(short)
(31,printLine("fgets()
(32,atoi(inputBuffer)
(33,1)
(34,shortData)
(35,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^