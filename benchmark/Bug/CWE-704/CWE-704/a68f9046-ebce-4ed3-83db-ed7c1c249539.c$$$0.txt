-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = -1;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
74,77
74,78
74,79
74,80
75,76
76,77
76,78
78,79
78,80
80,81
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
110,112
111,112
111,113
112,113
115,116
115,117
116,117
117,118
117,119
117,120
117,121
118,119
120,121
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
131,132
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,53,56,61,63,67,69,73,77,79,81,84,86,88,90,94,96,97,99,100,105,107,108,109,113,114,119,121,123,125,130,132,133,137,139
-----computeFrom-----
32,33
32,34
58,59
58,60
98,99
98,100
102,103
102,104
106,107
106,108
111,112
111,113
127,128
127,129
-----guardedBy-----
113,132
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_32_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memcpy_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = -1;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = -1;
data = -1
data
data
-1
1
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(1,9,0)
(21,20,0)
(61,30,0)
(5,69,0)
(0,62,0)
(7,9,0)
(28,53,0)
(68,54,0)
(71,13,0)
(72,29,0)
(62,39,0)
(40,23,0)
(2,62,0)
(69,9,0)
(56,3,0)
(7,45,0)
(47,10,0)
(23,69,0)
(38,9,0)
(27,20,0)
(55,7,0)
(39,9,0)
(66,62,0)
(30,19,0)
(14,39,0)
(13,7,0)
(35,29,0)
(36,20,0)
(41,59,0)
(19,30,0)
(53,10,0)
(32,11,0)
(18,58,0)
(12,62,0)
(29,59,0)
(33,12,0)
(22,63,0)
(48,4,0)
(24,4,0)
(51,23,0)
(59,46,0)
(60,15,0)
(37,16,0)
(13,16,0)
(26,12,0)
(10,53,0)
(27,62,0)
(67,51,0)
(12,26,0)
(16,39,0)
(43,19,0)
(24,9,0)
(10,69,0)
(23,11,0)
(17,10,0)
(53,11,0)
(34,63,0)
(6,15,0)
(3,8,0)
(31,12,0)
(25,9,0)
(44,26,0)
(8,58,0)
(11,54,0)
(30,9,0)
(50,63,0)
(63,20,0)
(8,3,0)
(15,16,0)
(63,16,0)
(57,45,0)
(64,26,0)
(54,11,0)
(63,46,0)
(70,8,0)
(45,7,0)
(4,24,0)
(65,27,0)
(51,24,0)
(20,62,0)
(54,24,0)
(11,69,0)
(42,24,0)
(29,20,0)
(29,16,0)
(16,13,0)
(58,62,0)
(49,3,0)
(61,7,1)
(6,60,1)
(30,19,1)
(55,24,1)
(8,3,1)
(43,61,1)
(10,53,1)
(11,54,1)
(20,36,1)
(35,72,1)
(47,17,1)
(23,40,1)
(15,6,1)
(63,50,1)
(4,48,1)
(59,41,1)
(37,23,1)
(71,37,1)
(70,12,1)
(32,30,1)
(29,16,1)
(63,20,1)
(29,20,1)
(45,57,1)
(19,43,1)
(44,64,1)
(51,24,1)
(72,63,1)
(57,55,1)
(64,33,1)
(68,32,1)
(53,28,1)
(49,70,1)
(3,56,1)
(50,22,1)
(40,51,1)
(27,20,1)
(51,67,1)
(18,8,1)
(21,16,1)
(28,47,1)
(54,68,1)
(58,18,1)
(12,26,1)
(67,10,1)
(16,13,1)
(34,15,1)
(52,27,1)
(48,42,1)
(23,11,1)
(41,29,1)
(15,16,1)
(36,21,1)
(65,59,1)
(13,71,1)
(13,7,1)
(63,16,1)
(24,4,1)
(56,49,1)
(29,35,1)
(33,31,1)
(17,11,1)
(53,11,1)
(22,34,1)
(7,45,1)
(26,44,1)
(54,24,1)
(60,58,1)
(27,65,1)
(31,20,1)
(65,15,1)
(7,45,2)
(29,16,2)
(16,13,2)
(29,20,2)
(41,15,2)
(15,16,2)
(72,15,2)
(29,15,2)
(13,7,2)
(34,15,2)
(11,54,2)
(8,3,2)
(63,20,2)
(12,26,2)
(27,20,2)
(10,53,2)
(59,15,2)
(53,11,2)
(51,24,2)
(22,15,2)
(24,4,2)
(35,15,2)
(30,19,2)
(63,15,2)
(63,16,2)
(54,24,2)
(23,11,2)
(50,15,2)
-----------------------------------
(0,source)
(1,dataPtr2)
(2,if (data < 100)
(3,100-1)
(4,&data)
(5,data)
(6,100)
(7,*dataPtr2 = &data)
(8,source[100-1])
(9,)
(10,fscanf(stdin, "%d", &data)
(11,data = *dataPtr1)
(12,memset(source, \\\'A\\\', 100-1)
(13,*dataPtr2)
(14,data)
(15,data < 100)
(16,data = *dataPtr2)
(17,stdin)
(18,\\\'\\\\0\\\')
(19,-1)
(20,dest[100] = "")
(21,dest)
(22,source)
(23,*dataPtr1 = data)
(24,*dataPtr1 = &data)
(25,dataPtr1)
(26,100-1)
(27,printLine(dest)
(28,data)
(29,dest[data])
(30,data = -1)
(31,source)
(32,data)
(33,\\\'A\\\')
(34,dest)
(35,data)
(36,"")
(37,data)
(38,data)
(39,)
(40,data)
(41,\\\'\\\\0\\\')
(42,dataPtr1)
(43,1)
(44,1)
(45,&data)
(46,)
(47,"%d")
(48,data)
(49,100)
(50,data)
(51,*dataPtr1)
(52,RET)
(53,&data)
(54,*dataPtr1)
(55,dataPtr2)
(56,1)
(57,data)
(58,source[100-1] = \\\'\\\\0\\\')
(59,dest[data] = \\\'\\\\0\\\')
(60,data)
(61,data)
(62,)
(63,memcpy(dest, source, data)
(64,100)
(65,dest)
(66,dest)
(67,dataPtr1)
(68,dataPtr1)
(69,)
(70,source)
(71,dataPtr2)
(72,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^