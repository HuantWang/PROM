-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_18_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();
source
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,37,0)
(30,33,0)
(34,37,0)
(27,11,0)
(15,11,0)
(46,45,0)
(11,37,0)
(30,25,0)
(5,45,0)
(41,4,0)
(16,9,0)
(23,19,0)
(2,37,0)
(0,25,0)
(32,11,0)
(19,11,0)
(1,32,0)
(32,9,0)
(3,8,0)
(26,39,0)
(19,22,0)
(9,4,0)
(4,6,0)
(31,45,0)
(6,4,0)
(21,19,0)
(47,37,0)
(38,9,0)
(42,38,0)
(4,9,0)
(7,8,0)
(39,37,0)
(37,45,0)
(33,37,0)
(20,38,0)
(29,11,0)
(12,33,0)
(14,32,0)
(44,39,0)
(10,19,0)
(9,45,0)
(24,30,0)
(43,22,0)
(4,41,0)
(39,26,0)
(8,45,0)
(40,39,0)
(17,26,0)
(28,43,0)
(36,27,0)
(19,9,0)
(13,25,0)
(18,26,0)
(25,30,0)
(32,43,0)
(32,1,1)
(36,43,1)
(1,14,1)
(38,20,1)
(20,42,1)
(12,30,1)
(13,24,1)
(19,10,1)
(19,9,1)
(27,36,1)
(17,40,1)
(4,41,1)
(35,27,1)
(39,26,1)
(29,9,1)
(23,38,1)
(32,11,1)
(42,33,1)
(25,0,1)
(14,19,1)
(11,15,1)
(9,4,1)
(16,31,1)
(15,29,1)
(18,17,1)
(26,18,1)
(21,23,1)
(8,3,1)
(31,8,1)
(10,21,1)
(4,6,1)
(32,9,1)
(28,32,1)
(6,16,1)
(19,11,1)
(43,28,1)
(36,38,1)
(33,12,1)
(40,44,1)
(38,9,1)
(30,25,1)
(27,11,1)
(24,39,1)
(0,13,1)
(44,11,1)
(3,7,1)
(32,9,2)
(43,38,2)
(1,38,2)
(39,26,2)
(19,38,2)
(38,9,2)
(4,41,2)
(32,38,2)
(28,38,2)
(19,11,2)
(9,4,2)
(30,25,2)
(23,38,2)
(19,9,2)
(27,11,2)
(4,6,2)
(10,38,2)
(32,11,2)
(14,38,2)
(21,38,2)
-----------------------------------
(0,1)
(1,data)
(2,if (data < 100)
(3,0)
(4,(short)
(5,data)
(6,RAND32()
(7,data)
(8,data = 0)
(9,data = (short)
(10,data)
(11,dest[100] = "")
(12,\\\'\\\\0\\\')
(13,100)
(14,dest)
(15,"")
(16,data)
(17,100)
(18,1)
(19,memcpy(dest, source, data)
(20,100)
(21,source)
(22,)
(23,dest)
(24,source)
(25,100-1)
(26,100-1)
(27,printLine(dest)
(28,\\\'\\\\0\\\')
(29,dest)
(30,source[100-1])
(31,goto source;)
(32,dest[data])
(33,source[100-1] = \\\'\\\\0\\\')
(34,source)
(35,RET)
(36,dest)
(37,)
(38,data < 100)
(39,memset(source, \\\'A\\\', 100-1)
(40,\\\'A\\\')
(41,short)
(42,data)
(43,dest[data] = \\\'\\\\0\\\')
(44,source)
(45,)
(46,source:)
(47,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^