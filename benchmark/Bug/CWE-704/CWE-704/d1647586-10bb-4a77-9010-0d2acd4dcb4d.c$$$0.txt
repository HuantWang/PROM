-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than CHAR_MAX*/
        data = CHAR_MAX-5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,39,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fscanf_to_short_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_12_bad()
CWE197_Numeric_Truncation_Error__int_fscanf_to_short_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a positive integer less than CHAR_MAX*/        data = CHAR_MAX-5;    }
data = CHAR_MAX-5;
data = CHAR_MAX-5
data
data
CHAR_MAX-5
CHAR_MAX
CHAR_MAX
5
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(21,20,0)
(18,4,0)
(20,23,0)
(17,22,0)
(13,19,0)
(5,26,0)
(20,26,0)
(24,4,0)
(7,23,0)
(6,13,0)
(9,19,0)
(26,28,0)
(4,2,0)
(11,18,0)
(18,17,0)
(3,13,0)
(26,15,0)
(10,20,0)
(14,17,0)
(8,19,0)
(4,19,0)
(27,2,0)
(12,17,0)
(28,26,0)
(17,18,0)
(20,21,0)
(1,6,0)
(23,20,0)
(6,23,0)
(29,28,0)
(25,28,0)
(23,13,0)
(2,4,0)
(20,4,0)
(29,5,1)
(14,0,1)
(18,4,1)
(10,7,1)
(20,21,1)
(18,11,1)
(6,1,1)
(20,26,1)
(1,23,1)
(0,4,1)
(26,28,1)
(4,2,1)
(2,27,1)
(23,20,1)
(20,4,1)
(5,0,1)
(12,14,1)
(11,12,1)
(25,29,1)
(20,10,1)
(16,6,1)
(7,17,1)
(7,26,1)
(27,24,1)
(17,18,1)
(28,25,1)
(6,23,1)
(26,28,2)
(4,2,2)
(14,0,2)
(6,23,2)
(25,0,2)
(17,18,2)
(18,4,2)
(26,0,2)
(17,0,2)
(28,0,2)
(23,20,2)
(5,0,2)
(12,0,2)
(20,4,2)
(29,0,2)
(20,26,2)
(20,21,2)
(11,0,2)
(18,0,2)
-----------------------------------
(0,globalReturnsTrueOrFalse()
(1,shortData)
(2,-1)
(3,shortData)
(4,data = -1)
(5,data)
(6,printShortLine(shortData)
(7,shortData)
(8,data)
(9,if(globalReturnsTrueOrFalse()
(10,data)
(11,data)
(12,"%d")
(13,)
(14,stdin)
(15,)
(16,RET)
(17,fscanf(stdin, "%d", &data)
(18,&data)
(19,)
(20,(short)
(21,short)
(22,)
(23,shortData = (short)
(24,data)
(25,5)
(26,data = CHAR_MAX-5)
(27,1)
(28,CHAR_MAX-5)
(29,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^