-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1; /* true */
    data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
71,72
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,60,63,64,69,72,73,74,78,80,84,86
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
61,62
61,63
66,67
66,68
70,71
70,72
-----guardedBy-----
34,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_bad(){    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_bad
{    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1;
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal
1
data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data);
data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data)
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data)
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,36,0)
(14,21,0)
(10,36,0)
(18,30,0)
(1,26,0)
(4,19,0)
(13,5,0)
(30,5,0)
(20,17,0)
(3,17,0)
(45,19,0)
(23,6,0)
(9,27,0)
(4,30,0)
(33,44,0)
(44,22,0)
(21,22,0)
(15,22,0)
(43,36,0)
(27,25,0)
(34,43,0)
(25,27,0)
(31,21,0)
(27,36,0)
(8,16,0)
(41,40,0)
(11,41,0)
(19,40,0)
(40,22,0)
(6,22,0)
(0,4,0)
(35,40,0)
(21,17,0)
(21,40,0)
(28,7,0)
(19,45,0)
(42,25,0)
(41,7,0)
(7,22,0)
(44,40,0)
(6,40,0)
(12,43,0)
(39,36,0)
(17,21,0)
(40,19,0)
(19,4,0)
(5,30,0)
(16,41,0)
(38,26,0)
(5,27,0)
(16,30,0)
(26,30,0)
(41,16,0)
(17,30,0)
(24,16,0)
(20,14,1)
(7,28,1)
(16,8,1)
(42,9,1)
(11,21,1)
(19,4,1)
(43,34,1)
(26,30,1)
(19,45,1)
(6,23,1)
(6,40,1)
(38,1,1)
(35,26,1)
(41,40,1)
(8,24,1)
(21,17,1)
(27,25,1)
(0,35,1)
(13,18,1)
(2,26,1)
(16,30,1)
(5,27,1)
(23,7,1)
(14,31,1)
(4,30,1)
(34,12,1)
(26,38,1)
(24,11,1)
(4,0,1)
(17,3,1)
(44,33,1)
(25,42,1)
(3,20,1)
(18,43,1)
(28,41,1)
(33,6,1)
(30,5,1)
(17,30,1)
(40,19,1)
(44,40,1)
(12,27,1)
(21,40,1)
(5,13,1)
(1,30,1)
(41,16,1)
(2,44,1)
(31,40,1)
(6,26,2)
(31,26,2)
(14,26,2)
(16,26,2)
(6,40,2)
(21,26,2)
(24,26,2)
(30,5,2)
(19,26,2)
(19,4,2)
(44,40,2)
(4,30,2)
(26,30,2)
(16,30,2)
(17,26,2)
(21,17,2)
(8,26,2)
(28,26,2)
(21,40,2)
(41,16,2)
(23,26,2)
(19,45,2)
(7,26,2)
(20,26,2)
(4,26,2)
(41,26,2)
(33,26,2)
(44,26,2)
(3,26,2)
(0,26,2)
(40,19,2)
(27,25,2)
(41,40,2)
(17,30,2)
(35,26,2)
(40,26,2)
(5,27,2)
(11,26,2)
-----------------------------------
(0,data)
(1,data)
(2,RET)
(3,1)
(4,malloc(data)
(5,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data)
(6,printLine(dataBuffer)
(7,dataBuffer[data-1] = '\\\\0')
(8,1)
(9,data)
(10,if (data < 100)
(11,dataBuffer)
(12,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal)
(13,data)
(14,\'A\')
(15,dataBuffer)
(16,data-1)
(17,data-1)
(18,data)
(19,(char *)
(20,data)
(21,memset(dataBuffer, 'A', data-1)
(22,)
(23,dataBuffer)
(24,data)
(25,-1)
(26,data < 100)
(27,data = -1)
(28,'\\\\0')
(29,memset(dataBuffer, \'A\', data-1)
(30,data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badSource(data)
(31,dataBuffer)
(32,'A')
(33,dataBuffer)
(34,1)
(35,dataBuffer)
(36,)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,100)
(39,data)
(40,* dataBuffer = (char *)
(41,dataBuffer[data-1])
(42,1)
(43,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_22_badGlobal = 1)
(44,free(dataBuffer)
(45,char *)
(46,\'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^