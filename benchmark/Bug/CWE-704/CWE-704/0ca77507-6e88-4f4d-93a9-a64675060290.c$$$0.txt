-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
69,72
69,73
69,74
69,75
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
78,80
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
101,105
102,103
104,105
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,52,55,57,62,63,67,68,72,74,75,79,81,84,86,90,92,97,99,103,105,106,109,110,115,118,119,120,124,126,130,132
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
88,89
88,90
107,108
107,109
112,113
112,114
116,117
116,118
-----guardedBy-----
37,57
67,118
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_04_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(48,25,0)
(66,16,0)
(22,41,0)
(3,67,0)
(48,21,0)
(49,66,0)
(51,38,0)
(42,48,0)
(1,23,0)
(27,25,0)
(2,19,0)
(6,62,0)
(51,49,0)
(60,42,0)
(26,58,0)
(38,42,0)
(13,62,0)
(18,3,0)
(66,49,0)
(17,34,0)
(25,19,0)
(5,64,0)
(54,66,0)
(33,51,0)
(64,42,0)
(31,45,0)
(35,0,0)
(9,47,0)
(48,42,0)
(11,64,0)
(12,23,0)
(39,51,0)
(55,58,0)
(53,67,0)
(58,24,0)
(37,38,0)
(47,46,0)
(38,4,0)
(14,56,0)
(28,2,0)
(61,67,0)
(0,42,0)
(44,31,0)
(16,66,0)
(67,42,0)
(34,23,0)
(42,45,0)
(43,34,0)
(8,34,0)
(34,40,0)
(3,49,0)
(41,14,0)
(30,45,0)
(66,54,0)
(16,23,0)
(65,2,0)
(52,19,0)
(49,29,0)
(4,45,0)
(50,19,0)
(15,4,0)
(21,48,0)
(25,48,0)
(31,42,0)
(38,51,0)
(63,62,0)
(10,3,0)
(2,49,0)
(57,16,0)
(67,45,0)
(7,49,0)
(19,62,0)
(36,45,0)
(25,49,0)
(51,19,0)
(40,34,0)
(0,45,0)
(59,40,0)
(14,41,0)
(3,19,0)
(23,58,0)
(67,3,0)
(31,44,1)
(12,1,1)
(51,49,1)
(42,48,1)
(2,28,1)
(49,66,1)
(64,11,1)
(27,60,1)
(51,39,1)
(16,57,1)
(31,42,1)
(51,19,1)
(14,41,1)
(2,19,1)
(38,42,1)
(3,49,1)
(16,23,1)
(10,61,1)
(61,53,1)
(32,0,1)
(67,42,1)
(15,38,1)
(43,17,1)
(40,59,1)
(64,42,1)
(37,67,1)
(66,54,1)
(9,40,1)
(23,12,1)
(4,15,1)
(3,18,1)
(20,19,1)
(44,4,1)
(53,64,1)
(53,14,1)
(3,19,1)
(67,3,1)
(17,23,1)
(0,42,1)
(57,7,1)
(38,51,1)
(33,37,1)
(48,21,1)
(35,31,1)
(65,20,1)
(41,22,1)
(11,5,1)
(25,19,1)
(5,42,1)
(59,34,1)
(19,52,1)
(1,20,1)
(48,25,1)
(32,2,1)
(40,34,1)
(65,47,1)
(47,9,1)
(34,8,1)
(52,50,1)
(2,49,1)
(8,43,1)
(39,33,1)
(18,10,1)
(66,16,1)
(25,27,1)
(60,2,1)
(0,35,1)
(7,40,1)
(22,64,1)
(28,65,1)
(25,49,1)
(65,49,1)
(34,23,1)
(31,42,2)
(8,20,2)
(61,2,2)
(51,2,2)
(67,3,2)
(64,2,2)
(15,2,2)
(25,2,2)
(42,2,2)
(48,25,2)
(10,2,2)
(37,2,2)
(9,40,2)
(12,20,2)
(5,2,2)
(22,64,2)
(49,66,2)
(1,20,2)
(23,20,2)
(66,40,2)
(40,34,2)
(31,2,2)
(2,19,2)
(17,20,2)
(59,20,2)
(48,21,2)
(0,2,2)
(35,2,2)
(48,2,2)
(60,2,2)
(53,2,2)
(25,19,2)
(47,40,2)
(44,2,2)
(38,42,2)
(14,64,2)
(39,2,2)
(66,16,2)
(16,23,2)
(3,19,2)
(43,20,2)
(14,41,2)
(51,19,2)
(33,2,2)
(34,23,2)
(25,49,2)
(67,42,2)
(57,40,2)
(38,51,2)
(27,2,2)
(64,42,2)
(3,2,2)
(34,20,2)
(16,40,2)
(42,48,2)
(2,49,2)
(40,20,2)
(3,49,2)
(67,2,2)
(49,40,2)
(41,64,2)
(51,49,2)
(66,54,2)
(38,2,2)
(7,40,2)
(0,42,2)
(11,2,2)
(18,2,2)
(4,2,2)
-----------------------------------
(0,free(dataBuffer)
(1,inputBuffer)
(2,data < 100)
(3,data-1)
(4,dataBuffer[data-1] = \\\'\\\\0\\\')
(5,dataBuffer)
(6,data)
(7,data)
(8,stdin)
(9,"fgets()
(10,data)
(11,NULL)
(12,"")
(13,if (data < 100)
(14,exit(-1)
(15,\\\'\\\\0\\\')
(16,atoi(inputBuffer)
(17,inputBuffer)
(18,1)
(19,data = 0)
(20,STATIC_CONST_TRUE)
(21,char *)
(22,1)
(23,inputBuffer[CHAR_ARRAY_SIZE] = "")
(24,)
(25,malloc(data)
(26,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,data)
(28,100)
(29,)
(30,if (dataBuffer == NULL)
(31,printLine(dataBuffer)
(32,RET)
(33,data)
(34,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,dataBuffer)
(36,dataBuffer)
(37,dataBuffer)
(38,dataBuffer[data-1])
(39,1)
(40,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(41,-1)
(42,* dataBuffer = (char *)
(43,CHAR_ARRAY_SIZE)
(44,dataBuffer)
(45,)
(46,)
(47,printLine("fgets()
(48,(char *)
(49,data = (short)
(50,data)
(51,data-1)
(52,0)
(53,dataBuffer)
(54,short)
(55,inputBuffer)
(56,)
(57,inputBuffer)
(58,)
(59,NULL)
(60,dataBuffer)
(61,\\\'A\\\')
(62,)
(63,if(STATIC_CONST_TRUE)
(64,dataBuffer == NULL)
(65,data)
(66,(short)
(67,memset(dataBuffer, \\\'A\\\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^