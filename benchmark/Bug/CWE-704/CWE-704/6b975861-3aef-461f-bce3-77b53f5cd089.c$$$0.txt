-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(22,25,0)
(12,31,0)
(15,30,0)
(9,46,0)
(5,19,0)
(44,30,0)
(38,48,0)
(21,45,0)
(13,45,0)
(48,35,0)
(5,1,0)
(6,35,0)
(32,49,0)
(46,32,0)
(23,35,0)
(1,5,0)
(0,13,0)
(49,32,0)
(32,6,0)
(3,45,0)
(25,35,0)
(25,30,0)
(20,25,0)
(32,46,0)
(41,6,0)
(17,48,0)
(26,23,0)
(4,35,0)
(18,43,0)
(39,47,0)
(30,25,0)
(7,24,0)
(48,29,0)
(46,45,0)
(6,32,0)
(36,23,0)
(47,45,0)
(10,18,0)
(47,46,0)
(16,11,0)
(34,1,0)
(11,46,0)
(2,43,0)
(24,45,0)
(30,45,0)
(43,35,0)
(30,46,0)
(18,24,0)
(14,11,0)
(13,46,0)
(35,31,0)
(37,31,0)
(35,48,0)
(43,18,0)
(33,43,0)
(18,46,0)
(18,46,1)
(44,5,1)
(43,35,1)
(1,34,1)
(30,25,1)
(38,17,1)
(10,30,1)
(26,36,1)
(0,24,1)
(41,9,1)
(17,4,1)
(5,1,1)
(25,35,1)
(15,44,1)
(23,26,1)
(33,10,1)
(6,41,1)
(20,22,1)
(47,39,1)
(39,13,1)
(24,7,1)
(46,32,1)
(47,46,1)
(11,14,1)
(30,46,1)
(2,33,1)
(25,20,1)
(18,43,1)
(32,6,1)
(22,15,1)
(11,46,1)
(35,48,1)
(43,2,1)
(6,35,1)
(28,23,1)
(44,11,1)
(34,11,1)
(32,49,1)
(48,29,1)
(13,0,1)
(48,38,1)
(9,23,1)
(7,18,1)
(14,16,1)
(36,35,1)
(28,47,1)
(23,35,1)
(13,46,1)
(16,46,1)
(0,23,2)
(20,23,2)
(25,23,2)
(47,23,2)
(18,43,2)
(24,23,2)
(48,29,2)
(30,46,2)
(23,35,2)
(11,46,2)
(44,23,2)
(18,23,2)
(39,23,2)
(25,35,2)
(34,11,2)
(32,49,2)
(46,23,2)
(5,1,2)
(7,23,2)
(43,23,2)
(2,23,2)
(47,46,2)
(18,46,2)
(30,23,2)
(13,23,2)
(16,23,2)
(5,11,2)
(33,23,2)
(6,23,2)
(46,32,2)
(41,23,2)
(15,23,2)
(43,35,2)
(10,23,2)
(32,23,2)
(6,35,2)
(32,6,2)
(1,11,2)
(13,46,2)
(22,23,2)
(30,25,2)
(35,48,2)
(14,23,2)
(11,23,2)
(9,23,2)
-----------------------------------
(0,dataBuffer)
(1,-1)
(2,1)
(3,if (dataBuffer == NULL)
(4,data)
(5,exit(-1)
(6,malloc(data)
(7,'\\\\0')
(8,\'\\\\0\')
(9,dataBuffer)
(10,dataBuffer)
(11,dataBuffer == NULL)
(12,data)
(13,printLine(dataBuffer)
(14,NULL)
(15,\'A\')
(16,dataBuffer)
(17,dataArray)
(18,dataBuffer[data-1])
(19,)
(20,1)
(21,dataBuffer)
(22,data)
(23,data < 100)
(24,dataBuffer[data-1] = '\\\\0')
(25,data-1)
(26,100)
(27,dataBuffer[data-1] = \'\\\\0\')
(28,RET)
(29,short dataArray[])
(30,memset(dataBuffer, 'A', data-1)
(31,)
(32,(char *)
(33,data)
(34,1)
(35,data = dataArray[2])
(36,data)
(37,if (data < 100)
(38,2)
(39,dataBuffer)
(40,memset(dataBuffer, \'A\', data-1)
(41,data)
(42,'A')
(43,data-1)
(44,dataBuffer)
(45,)
(46,* dataBuffer = (char *)
(47,free(dataBuffer)
(48,dataArray[2])
(49,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^