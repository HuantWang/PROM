-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,29,33,34,35,39,41,43,46,48,50,52,56,58,59,61,62,67,69,70,71,75,76,81,83,85,87,92,94,95,99,101
-----computeFrom-----
12,13
12,14
23,24
23,25
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
89,90
89,91
-----guardedBy-----
75,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memmove_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(5,20,0)
(30,17,0)
(49,31,0)
(12,3,0)
(24,15,0)
(9,20,0)
(47,5,0)
(5,3,0)
(28,16,0)
(30,48,0)
(20,54,0)
(35,22,0)
(48,16,0)
(27,54,0)
(38,0,0)
(5,8,0)
(3,16,0)
(45,17,0)
(0,51,0)
(5,13,0)
(46,3,0)
(0,16,0)
(21,15,0)
(32,3,0)
(14,12,0)
(4,16,0)
(34,17,0)
(12,26,0)
(15,20,0)
(40,4,0)
(4,3,0)
(12,13,0)
(51,0,0)
(50,54,0)
(17,30,0)
(39,30,0)
(25,51,0)
(15,13,0)
(12,20,0)
(20,9,0)
(52,5,0)
(19,0,0)
(36,43,0)
(37,16,0)
(22,13,0)
(53,31,0)
(42,54,0)
(33,16,0)
(41,26,0)
(16,31,0)
(11,51,0)
(44,20,0)
(7,5,0)
(1,13,0)
(13,22,0)
(26,8,0)
(18,9,0)
(43,54,0)
(13,31,0)
(10,48,0)
(29,54,0)
(2,12,0)
(23,4,1)
(12,3,1)
(39,0,1)
(15,13,1)
(7,47,1)
(22,35,1)
(46,29,1)
(14,5,1)
(38,19,1)
(21,24,1)
(44,6,1)
(43,36,1)
(15,20,1)
(48,10,1)
(5,3,1)
(0,51,1)
(5,13,1)
(41,12,1)
(12,20,1)
(34,45,1)
(25,38,1)
(45,39,1)
(17,34,1)
(2,14,1)
(35,1,1)
(40,15,1)
(18,44,1)
(5,7,1)
(15,21,1)
(30,17,1)
(13,22,1)
(52,15,1)
(4,3,1)
(12,2,1)
(51,11,1)
(3,32,1)
(29,20,1)
(11,25,1)
(32,46,1)
(10,30,1)
(12,13,1)
(46,27,1)
(24,48,1)
(19,3,1)
(26,41,1)
(27,43,1)
(47,52,1)
(5,20,1)
(9,18,1)
(4,40,1)
(20,9,1)
(6,13,1)
(40,26,1)
(36,6,1)
(12,3,2)
(9,6,2)
(52,15,2)
(30,17,2)
(47,15,2)
(18,6,2)
(5,13,2)
(12,13,2)
(7,15,2)
(5,15,2)
(14,15,2)
(27,6,2)
(20,9,2)
(0,51,2)
(41,15,2)
(15,13,2)
(20,6,2)
(29,6,2)
(2,15,2)
(36,6,2)
(4,3,2)
(13,22,2)
(44,6,2)
(15,20,2)
(5,20,2)
(12,20,2)
(5,3,2)
(12,15,2)
(43,6,2)
(26,15,2)
-----------------------------------
(0,memset(source, \\\'A\\\', 100-1)
(1,data)
(2,data)
(3,dest[100] = "")
(4,printLine(dest)
(5,memmove(dest, source, data)
(6,6)
(7,data)
(8,)
(9,-1)
(10,\\\'\\\\0\\\')
(11,1)
(12,dest[data])
(13,data = -1)
(14,dest)
(15,data < 100)
(16,)
(17,100-1)
(18,1)
(19,source)
(20,data = -1)
(21,100)
(22,-1)
(23,RET)
(24,data)
(25,100)
(26,dest[data] = \\\'\\\\0\\\')
(27,break;)
(28,if (data < 100)
(29,break;)
(30,source[100-1])
(31,)
(32,"")
(33,dest)
(34,1)
(35,1)
(36,"Benign, fixed string")
(37,source)
(38,\\\'A\\\')
(39,source)
(40,dest)
(41,\\\'\\\\0\\\')
(42,case 6:)
(43,printLine("Benign, fixed string")
(44,data)
(45,100)
(46,dest)
(47,source)
(48,source[100-1] = \\\'\\\\0\\\')
(49,data)
(50,default:)
(51,100-1)
(52,dest)
(53,switch(6)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^