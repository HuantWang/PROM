-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_large_to_short_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a number larger than SHRT_MAX */
        data = SHRT_MAX + 5;
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
52,54
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,43,47,49,53,54,56,60,62
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_large_to_short_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_large_to_short_17_bad()
CWE197_Numeric_Truncation_Error__int_large_to_short_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;    }
data = SHRT_MAX + 5;
data = SHRT_MAX + 5
data
data
SHRT_MAX + 5
SHRT_MAX
SHRT_MAX
5
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(16,21,0)
(30,27,0)
(3,29,0)
(7,27,0)
(23,13,0)
(13,20,0)
(31,13,0)
(13,31,0)
(21,3,0)
(12,18,0)
(9,1,0)
(6,27,0)
(24,30,0)
(26,14,0)
(3,21,0)
(28,19,0)
(5,18,0)
(8,19,0)
(30,1,0)
(0,20,0)
(2,27,0)
(20,14,0)
(1,30,0)
(14,27,0)
(18,19,0)
(20,13,0)
(25,20,0)
(10,21,0)
(15,0,0)
(4,17,0)
(13,30,0)
(22,3,0)
(0,14,0)
(13,3,0)
(17,19,0)
(18,19,1)
(28,30,1)
(10,16,1)
(0,20,1)
(16,22,1)
(13,31,1)
(18,5,1)
(25,18,1)
(15,20,1)
(12,17,1)
(3,21,1)
(4,3,1)
(13,3,1)
(22,18,1)
(21,10,1)
(30,1,1)
(17,4,1)
(1,9,1)
(5,12,1)
(17,19,1)
(19,8,1)
(11,0,1)
(12,19,1)
(8,28,1)
(23,25,1)
(13,30,1)
(20,13,1)
(0,15,1)
(9,24,1)
(13,23,1)
(18,18,2)
(0,20,2)
(3,18,2)
(5,18,2)
(3,21,2)
(22,18,2)
(18,19,2)
(17,19,2)
(16,18,2)
(30,1,2)
(20,13,2)
(12,18,2)
(13,30,2)
(13,3,2)
(10,18,2)
(13,31,2)
(17,18,2)
(4,18,2)
(21,18,2)
-----------------------------------
(0,printShortLine(shortData)
(1,-1)
(2,i)
(3,data = SHRT_MAX + 5)
(4,i)
(5,1)
(6,data)
(7,for(i = 0; i < 1; i++)
(8,0)
(9,1)
(10,5)
(11,RET)
(12,i)
(13,(short)
(14,)
(15,shortData)
(16,SHRT_MAX)
(17,i++)
(18,i < 1)
(19,i = 0)
(20,shortData = (short)
(21,SHRT_MAX + 5)
(22,data)
(23,data)
(24,data)
(25,shortData)
(26,shortData)
(27,)
(28,i)
(29,)
(30,data = -1)
(31,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^