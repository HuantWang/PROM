-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_09_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
22,23
22,24
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_09_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_09_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_09_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a negative number */        data = -1;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(31,11,0)
(47,54,0)
(18,37,0)
(8,9,0)
(6,10,0)
(54,9,0)
(10,39,0)
(18,28,0)
(28,24,0)
(37,0,0)
(0,38,0)
(17,37,0)
(44,34,0)
(18,20,0)
(51,24,0)
(34,44,0)
(1,51,0)
(24,40,0)
(40,24,0)
(13,51,0)
(52,37,0)
(24,11,0)
(20,39,0)
(45,38,0)
(17,39,0)
(4,28,0)
(37,39,0)
(9,22,0)
(54,24,0)
(7,27,0)
(36,39,0)
(41,52,0)
(28,9,0)
(25,18,0)
(9,33,0)
(23,33,0)
(33,9,0)
(34,42,0)
(38,9,0)
(49,52,0)
(27,39,0)
(27,51,0)
(30,11,0)
(50,37,0)
(38,24,0)
(46,17,0)
(12,54,0)
(15,28,0)
(51,27,0)
(3,11,0)
(2,24,0)
(10,37,0)
(0,37,0)
(28,18,0)
(38,0,0)
(51,9,0)
(27,37,0)
(14,20,0)
(0,48,0)
(35,40,0)
(19,39,0)
(48,0,0)
(32,27,0)
(21,44,0)
(47,9,1)
(5,10,1)
(28,9,1)
(5,54,1)
(14,18,1)
(34,44,1)
(24,40,1)
(25,27,1)
(38,45,1)
(9,33,1)
(4,25,1)
(7,32,1)
(54,9,1)
(54,24,1)
(0,38,1)
(18,37,1)
(6,17,1)
(45,50,1)
(0,48,1)
(51,24,1)
(54,12,1)
(40,35,1)
(47,53,1)
(27,51,1)
(27,37,1)
(18,28,1)
(49,37,1)
(15,4,1)
(52,41,1)
(32,52,1)
(28,24,1)
(32,34,1)
(33,23,1)
(17,46,1)
(10,6,1)
(44,21,1)
(46,20,1)
(17,37,1)
(41,49,1)
(8,53,1)
(37,0,1)
(38,9,1)
(10,37,1)
(38,24,1)
(21,52,1)
(51,9,1)
(50,54,1)
(23,8,1)
(12,47,1)
(28,15,1)
(52,37,1)
(13,7,1)
(1,13,1)
(20,14,1)
(53,24,1)
(35,2,1)
(51,1,1)
(38,24,2)
(37,0,2)
(17,37,2)
(32,54,2)
(27,51,2)
(17,54,2)
(52,54,2)
(49,54,2)
(44,52,2)
(25,54,2)
(28,9,2)
(46,54,2)
(38,9,2)
(38,54,2)
(28,54,2)
(20,54,2)
(15,54,2)
(10,54,2)
(9,33,2)
(0,54,2)
(51,24,2)
(41,54,2)
(52,37,2)
(24,40,2)
(50,54,2)
(13,54,2)
(27,37,2)
(4,54,2)
(51,54,2)
(28,24,2)
(33,53,2)
(18,37,2)
(8,53,2)
(34,52,2)
(14,54,2)
(9,53,2)
(54,9,2)
(1,54,2)
(45,54,2)
(51,9,2)
(18,54,2)
(54,24,2)
(6,54,2)
(34,44,2)
(27,54,2)
(23,53,2)
(10,37,2)
(0,48,2)
(18,28,2)
(21,52,2)
(0,38,2)
(37,54,2)
(7,54,2)
-----------------------------------
(0,(char *)
(1,1)
(2,data)
(3,if(GLOBAL_CONST_TRUE)
(4,data)
(5,RET)
(6,dataBuffer)
(7,\'A\')
(8,data)
(9,data = -1)
(10,free(dataBuffer)
(11,)
(12,100)
(13,data)
(14,'\\\\0')
(15,1)
(16,\'\\\\0\')
(17,printLine(dataBuffer)
(18,dataBuffer[data-1])
(19,if (dataBuffer == NULL)
(20,dataBuffer[data-1] = \'\\\\0\')
(21,1)
(22,)
(23,1)
(24,data = -1)
(25,dataBuffer)
(26,dataBuffer[data-1] = '\\\\0')
(27,memset(dataBuffer, \'A\', data-1)
(28,data-1)
(29,memset(dataBuffer, 'A', data-1)
(30,data)
(31,if (data < 100)
(32,dataBuffer)
(33,-1)
(34,exit(-1)
(35,1)
(36,dataBuffer)
(37,* dataBuffer = (char *)
(38,malloc(data)
(39,)
(40,-1)
(41,NULL)
(42,)
(43,'A')
(44,-1)
(45,data)
(46,dataBuffer)
(47,data)
(48,char *)
(49,dataBuffer)
(50,dataBuffer)
(51,data-1)
(52,dataBuffer == NULL)
(53,GLOBAL_CONST_TRUE)
(54,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^