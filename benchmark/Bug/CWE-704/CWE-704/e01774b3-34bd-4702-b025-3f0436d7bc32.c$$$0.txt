-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,29,33,34,35,39,41,43,46,48,50,52,56,58,59,61,62,67,69,70,71,75,76,81,83,85,87,92,94,95,99,101
-----computeFrom-----
12,13
12,14
23,24
23,25
60,61
60,62
64,65
64,66
68,69
68,70
73,74
73,75
89,90
89,91
-----guardedBy-----
75,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_strncpy_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(20,31,0)
(5,7,0)
(8,33,0)
(12,13,0)
(7,33,0)
(48,52,0)
(21,6,0)
(9,19,0)
(17,0,0)
(29,21,0)
(52,7,0)
(47,35,0)
(4,5,0)
(30,42,0)
(18,43,0)
(14,37,0)
(53,6,0)
(42,31,0)
(35,24,0)
(27,21,0)
(22,43,0)
(32,5,0)
(40,33,0)
(46,13,0)
(25,6,0)
(45,33,0)
(26,16,0)
(7,52,0)
(37,24,0)
(13,38,0)
(1,37,0)
(37,42,0)
(6,31,0)
(43,16,0)
(42,41,0)
(19,6,0)
(41,42,0)
(38,13,0)
(43,7,0)
(50,7,0)
(11,38,0)
(43,35,0)
(15,33,0)
(39,10,0)
(34,8,0)
(37,7,0)
(38,10,0)
(19,16,0)
(28,33,0)
(49,41,0)
(3,0,0)
(10,6,0)
(43,42,0)
(2,6,0)
(36,37,0)
(16,6,0)
(37,16,0)
(5,42,0)
(44,31,0)
(54,16,0)
(21,0,0)
(0,21,0)
(0,3,1)
(49,30,1)
(18,22,1)
(22,37,1)
(37,14,1)
(9,35,1)
(8,34,1)
(43,16,1)
(54,26,1)
(43,42,1)
(37,16,1)
(5,7,1)
(32,10,1)
(34,51,1)
(1,36,1)
(36,5,1)
(39,38,1)
(7,52,1)
(17,27,1)
(19,16,1)
(5,42,1)
(46,11,1)
(52,48,1)
(40,8,1)
(29,16,1)
(11,21,1)
(42,41,1)
(37,7,1)
(41,49,1)
(37,42,1)
(38,13,1)
(27,29,1)
(26,28,1)
(10,39,1)
(5,4,1)
(48,50,1)
(9,5,1)
(4,32,1)
(35,47,1)
(16,54,1)
(12,46,1)
(26,40,1)
(51,42,1)
(3,17,1)
(43,7,1)
(28,7,1)
(14,1,1)
(47,43,1)
(19,9,1)
(13,12,1)
(43,18,1)
(21,0,1)
(23,19,1)
(50,51,1)
(34,51,2)
(42,41,2)
(38,13,2)
(1,5,2)
(43,5,2)
(50,51,2)
(5,42,2)
(52,51,2)
(22,5,2)
(43,42,2)
(37,5,2)
(47,5,2)
(18,5,2)
(37,7,2)
(37,16,2)
(35,5,2)
(43,16,2)
(40,51,2)
(28,51,2)
(43,7,2)
(8,51,2)
(48,51,2)
(36,5,2)
(7,51,2)
(37,42,2)
(7,52,2)
(21,0,2)
(5,7,2)
(19,16,2)
(14,5,2)
-----------------------------------
(0,100-1)
(1,source)
(2,source)
(3,1)
(4,100)
(5,data < 100)
(6,)
(7,data = -1)
(8,printLine("Benign, fixed string")
(9,dest)
(10,source[100-1] = \\\'\\\\0\\\')
(11,source)
(12,1)
(13,100-1)
(14,data)
(15,case 6:)
(16,dest[100] = "")
(17,100)
(18,data)
(19,printLine(dest)
(20,data)
(21,memset(source, \\\'A\\\', 100-1)
(22,dest)
(23,RET)
(24,)
(25,if (data < 100)
(26,dest)
(27,\\\'A\\\')
(28,break;)
(29,source)
(30,data)
(31,)
(32,data)
(33,)
(34,"Benign, fixed string")
(35,dest[data] = \\\'\\\\0\\\')
(36,dest)
(37,strncpy(dest, source, data)
(38,source[100-1])
(39,\\\'\\\\0\\\')
(40,break;)
(41,-1)
(42,data = -1)
(43,dest[data])
(44,switch(6)
(45,default:)
(46,100)
(47,\\\'\\\\0\\\')
(48,1)
(49,1)
(50,data)
(51,6)
(52,-1)
(53,dest)
(54,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^