-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
20,21
20,22
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_02_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(28,54,0)
(47,31,0)
(21,54,0)
(15,21,0)
(42,32,0)
(14,15,0)
(54,21,0)
(19,53,0)
(5,8,0)
(7,29,0)
(27,16,0)
(31,23,0)
(52,5,0)
(36,8,0)
(9,32,0)
(44,29,0)
(12,3,0)
(51,43,0)
(8,29,0)
(3,54,0)
(1,5,0)
(43,51,0)
(6,22,0)
(20,1,0)
(51,23,0)
(42,54,0)
(54,32,0)
(45,54,0)
(26,28,0)
(23,13,0)
(40,38,0)
(28,32,0)
(16,8,0)
(23,51,0)
(39,21,0)
(21,39,0)
(15,23,0)
(48,16,0)
(31,8,0)
(46,42,0)
(40,53,0)
(1,32,0)
(0,54,0)
(51,41,0)
(16,23,0)
(17,31,0)
(18,29,0)
(4,23,0)
(33,32,0)
(5,23,0)
(15,8,0)
(50,45,0)
(53,40,0)
(1,54,0)
(41,51,0)
(45,31,0)
(10,3,0)
(22,32,0)
(25,1,0)
(5,1,0)
(49,5,0)
(34,8,0)
(45,22,0)
(21,15,0)
(31,45,0)
(17,47,1)
(1,54,1)
(48,11,1)
(28,26,1)
(27,48,1)
(23,51,1)
(31,17,1)
(11,8,1)
(3,54,1)
(16,23,1)
(46,28,1)
(53,19,1)
(22,6,1)
(10,54,1)
(5,8,1)
(2,16,1)
(42,46,1)
(25,20,1)
(36,34,1)
(0,16,1)
(16,8,1)
(48,23,1)
(31,23,1)
(50,1,1)
(54,21,1)
(3,12,1)
(16,27,1)
(5,49,1)
(26,22,1)
(51,43,1)
(49,52,1)
(45,54,1)
(12,10,1)
(21,39,1)
(47,50,1)
(31,8,1)
(41,4,1)
(21,15,1)
(2,42,1)
(20,40,1)
(15,14,1)
(20,3,1)
(4,11,1)
(52,25,1)
(5,23,1)
(28,54,1)
(6,45,1)
(51,41,1)
(8,36,1)
(15,8,1)
(42,54,1)
(40,53,1)
(14,0,1)
(45,31,1)
(19,3,1)
(1,5,1)
(15,23,1)
(21,39,2)
(41,11,2)
(45,54,2)
(42,54,2)
(16,23,2)
(6,16,2)
(45,31,2)
(1,54,2)
(51,11,2)
(4,11,2)
(28,54,2)
(23,11,2)
(21,16,2)
(5,23,2)
(46,16,2)
(40,3,2)
(5,16,2)
(25,16,2)
(14,16,2)
(15,16,2)
(45,16,2)
(15,8,2)
(47,16,2)
(51,41,2)
(23,51,2)
(1,16,2)
(31,16,2)
(15,23,2)
(22,16,2)
(3,16,2)
(54,16,2)
(20,16,2)
(54,21,2)
(28,16,2)
(5,8,2)
(49,16,2)
(31,23,2)
(26,16,2)
(50,16,2)
(17,16,2)
(52,16,2)
(21,15,2)
(3,54,2)
(53,3,2)
(19,3,2)
(10,16,2)
(16,8,2)
(51,43,2)
(31,8,2)
(12,16,2)
(0,16,2)
(42,16,2)
(1,5,2)
(40,53,2)
-----------------------------------
(0,dataBuffer)
(1,memset(dataBuffer, 'A', data-1)
(2,RET)
(3,dataBuffer == NULL)
(4,data)
(5,data-1)
(6,'\\\\0')
(7,if (data < 100)
(8,data = 0)
(9,if (dataBuffer == NULL)
(10,dataBuffer)
(11,1)
(12,NULL)
(13,)
(14,data)
(15,malloc(data)
(16,data < 100)
(17,1)
(18,data)
(19,1)
(20,dataBuffer)
(21,(char *)
(22,dataBuffer[data-1] = \'\\\\0\')
(23,data = (short)
(24,\'\\\\0\')
(25,'A')
(26,dataBuffer)
(27,100)
(28,printLine(dataBuffer)
(29,)
(30,memset(dataBuffer, \'A\', data-1)
(31,data-1)
(32,)
(33,dataBuffer)
(34,data)
(35,\'A\')
(36,0)
(37,dataBuffer[data-1] = '\\\\0')
(38,)
(39,char *)
(40,exit(-1)
(41,RAND32()
(42,free(dataBuffer)
(43,short)
(44,if(1)
(45,dataBuffer[data-1])
(46,dataBuffer)
(47,data)
(48,data)
(49,1)
(50,dataBuffer)
(51,(short)
(52,data)
(53,-1)
(54,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^