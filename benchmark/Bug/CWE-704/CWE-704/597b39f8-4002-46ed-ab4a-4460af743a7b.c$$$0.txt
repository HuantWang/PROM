-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a value input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
78,79
78,80
79,80
79,81
79,82
79,83
79,84
79,85
79,86
79,87
79,88
79,89
79,90
79,91
79,92
79,93
79,94
80,81
81,82
81,83
82,83
84,85
84,86
84,87
84,88
85,86
87,88
89,90
91,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
106,107
109,110
110,111
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
142,144
143,144
143,145
144,145
144,146
144,147
144,148
145,146
147,148
149,150
149,151
150,151
150,152
151,152
153,154
155,156
156,157
158,159
159,160
160,161
162,163
164,165
166,167
166,168
167,168
167,169
168,169
168,170
168,171
169,170
171,172
173,174
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
190,191
192,193
192,194
193,194
193,195
194,195
196,197
198,199
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
204,209
205,206
207,208
209,210
211,212
211,213
212,213
216,217
216,218
217,218
217,219
218,219
218,220
219,220
221,222
223,224
223,225
224,225
227,228
229,230
230,231
230,232
231,232
231,233
232,233
234,235
237,238
238,239
238,240
239,240
241,242
241,243
242,243
244,245
246,247
246,248
246,249
247,248
247,249
248,249
248,250
249,250
251,252
253,254
253,255
254,255
256,257
258,259
259,260
260,261
260,262
261,262
263,264
265,266
266,267
267,268
267,269
268,269
270,271
273,274
273,275
274,275
274,276
275,276
277,278
279,280
280,281
281,282
281,283
282,283
284,285
286,287
286,288
287,288
287,289
288,289
290,291
292,293
293,294
294,295
294,296
295,296
297,298
299,300
299,301
299,302
299,303
299,304
299,305
300,301
301,302
301,303
303,304
303,305
305,306
307,308
308,309
308,310
310,311
310,312
310,313
312,313
314,315
316,317
317,318
317,319
317,320
317,321
318,319
320,321
323,324
323,325
326,327
327,328
327,329
328,329
328,330
329,330
331,332
331,333
335,336
335,337
336,337
336,338
337,338
340,341
340,342
341,342
342,343
342,344
342,345
342,346
343,344
345,346
347,348
349,350
351,352
352,353
352,354
353,354
353,355
354,355
356,357
359,360
360,361
360,362
361,362
363,364
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,43,45,49,51,55,57,60,64,66,69,72,74,77,83,86,88,90,92,96,98,100,104,107,108,112,117,118,120,126,127,128,130,135,136,139,141,146,148,152,154,157,161,163,165,170,172,174,176,178,182,185,187,189,191,195,197,199,203,206,208,210,213,214,215,220,222,225,226,228,233,235,236,240,243,245,250,252,255,257,262,264,269,271,272,276,278,283,285,289,291,296,298,302,304,306,309,311,313,315,319,321,322,324,325,330,332,333,334,338,339,344,346,348,350,355,357,358,362,364
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
81,82
81,83
94,95
94,96
114,115
114,116
122,123
122,124
132,133
132,134
143,144
143,145
167,168
167,169
180,181
180,182
193,194
193,195
201,202
201,203
211,212
211,213
217,218
217,219
218,219
218,220
223,224
223,225
230,231
230,232
238,239
238,240
247,248
247,249
248,249
248,250
253,254
253,255
260,261
260,262
267,268
267,269
274,275
274,276
287,288
287,289
323,324
323,325
327,328
327,329
331,332
331,333
336,337
336,338
352,353
352,354
-----guardedBy-----
276,285
289,298
338,357
-----guardedByNegation-----
255,271
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_17_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(135,42,0)
(19,102,0)
(118,62,0)
(126,42,0)
(18,62,0)
(138,62,0)
(199,207,0)
(209,185,0)
(75,150,0)
(92,183,0)
(150,31,0)
(216,14,0)
(82,196,0)
(164,4,0)
(45,148,0)
(6,63,0)
(40,35,0)
(211,150,0)
(2,144,0)
(146,84,0)
(130,40,0)
(41,62,0)
(57,62,0)
(122,56,0)
(47,22,0)
(35,40,0)
(117,42,0)
(53,23,0)
(197,42,0)
(137,69,0)
(119,14,0)
(161,197,0)
(1,72,0)
(46,157,0)
(57,85,0)
(66,207,0)
(181,196,0)
(65,161,0)
(20,62,0)
(115,218,0)
(141,74,0)
(2,4,0)
(2,150,0)
(82,62,0)
(33,96,0)
(191,59,0)
(157,46,0)
(109,97,0)
(187,57,0)
(80,62,0)
(131,28,0)
(217,35,0)
(153,151,0)
(21,178,0)
(96,4,0)
(152,85,0)
(163,93,0)
(140,62,0)
(28,182,0)
(112,47,0)
(90,62,0)
(114,197,0)
(72,150,0)
(124,30,0)
(3,80,0)
(168,0,0)
(87,67,0)
(161,65,0)
(29,200,0)
(142,113,0)
(202,11,0)
(69,42,0)
(214,31,0)
(184,28,0)
(84,57,0)
(61,163,0)
(148,113,0)
(3,151,0)
(30,4,0)
(175,138,0)
(68,96,0)
(116,31,0)
(45,163,0)
(37,161,0)
(106,31,0)
(166,3,0)
(47,99,0)
(207,148,0)
(80,187,0)
(83,205,0)
(67,82,0)
(72,4,0)
(179,183,0)
(47,128,0)
(63,6,0)
(43,47,0)
(115,78,0)
(160,22,0)
(4,62,0)
(50,200,0)
(139,62,0)
(128,82,0)
(105,72,0)
(27,30,0)
(76,209,0)
(71,45,0)
(115,185,0)
(101,153,0)
(125,33,0)
(98,59,0)
(89,57,0)
(183,31,0)
(48,82,0)
(107,148,0)
(165,22,0)
(171,78,0)
(129,29,0)
(104,153,0)
(180,113,0)
(193,183,0)
(45,169,0)
(170,115,0)
(45,128,0)
(108,84,0)
(134,128,0)
(188,113,0)
(36,97,0)
(6,42,0)
(39,31,0)
(47,163,0)
(85,4,0)
(10,57,0)
(145,110,0)
(163,149,0)
(206,185,0)
(81,63,0)
(203,62,0)
(94,128,0)
(136,12,0)
(58,217,0)
(54,50,0)
(73,148,0)
(173,204,0)
(35,62,0)
(201,4,0)
(210,89,0)
(147,217,0)
(158,63,0)
(120,31,0)
(185,209,0)
(13,51,0)
(34,89,0)
(67,157,0)
(185,115,0)
(193,57,0)
(60,218,0)
(24,169,0)
(4,30,0)
(151,153,0)
(123,65,0)
(187,80,0)
(200,51,0)
(32,31,0)
(128,215,0)
(14,80,0)
(69,22,0)
(132,118,0)
(26,67,0)
(182,28,0)
(159,45,0)
(103,6,0)
(95,31,0)
(196,82,0)
(176,31,0)
(8,6,0)
(208,93,0)
(79,193,0)
(153,80,0)
(198,31,0)
(162,31,0)
(0,97,0)
(9,18,0)
(121,30,0)
(96,33,0)
(186,201,0)
(213,177,0)
(154,56,0)
(218,115,0)
(110,62,0)
(111,31,0)
(189,85,0)
(205,102,0)
(51,200,0)
(207,163,0)
(45,22,0)
(56,31,0)
(187,59,0)
(91,46,0)
(133,187,0)
(169,99,0)
(88,65,0)
(172,97,0)
(70,0,0)
(42,113,0)
(205,178,0)
(200,29,0)
(46,82,0)
(64,187,0)
(190,46,0)
(182,138,0)
(127,96,0)
(205,62,0)
(78,115,0)
(85,57,0)
(207,128,0)
(151,3,0)
(167,118,0)
(100,110,0)
(38,85,0)
(185,206,0)
(115,4,0)
(49,51,0)
(31,143,0)
(212,187,0)
(194,3,0)
(25,132,0)
(86,2,0)
(193,17,0)
(7,195,0)
(22,42,0)
(16,47,0)
(15,201,0)
(55,109,0)
(47,148,0)
(44,62,0)
(200,50,0)
(155,31,0)
(157,67,0)
(52,132,0)
(192,80,0)
(93,163,0)
(89,183,0)
(178,205,0)
(59,187,0)
(14,18,0)
(5,182,0)
(102,205,0)
(96,127,1)
(50,54,1)
(0,97,1)
(81,158,1)
(102,19,1)
(186,15,1)
(37,6,1)
(58,147,1)
(182,28,1)
(24,45,1)
(47,128,1)
(33,96,1)
(169,24,1)
(79,89,1)
(136,151,1)
(114,161,1)
(123,88,1)
(179,150,1)
(22,165,1)
(158,103,1)
(67,26,1)
(218,60,1)
(34,2,1)
(218,115,1)
(63,81,1)
(193,57,1)
(57,85,1)
(92,179,1)
(2,150,1)
(49,183,1)
(29,200,1)
(19,201,1)
(217,58,1)
(105,136,1)
(124,121,1)
(0,70,1)
(18,9,1)
(129,200,1)
(61,157,1)
(69,22,1)
(28,184,1)
(9,14,1)
(157,46,1)
(161,65,1)
(21,83,1)
(94,134,1)
(185,206,1)
(2,86,1)
(65,123,1)
(46,82,1)
(89,210,1)
(93,208,1)
(5,28,1)
(208,61,1)
(189,38,1)
(36,172,1)
(83,102,1)
(72,150,1)
(67,82,1)
(209,76,1)
(164,110,1)
(35,40,1)
(73,107,1)
(182,5,1)
(33,125,1)
(3,80,1)
(96,4,1)
(88,37,1)
(183,92,1)
(47,163,1)
(168,109,1)
(52,25,1)
(213,77,1)
(175,182,1)
(172,148,1)
(53,201,1)
(77,193,1)
(187,59,1)
(98,133,1)
(72,1,1)
(1,105,1)
(197,114,1)
(48,18,1)
(34,72,1)
(105,173,1)
(76,170,1)
(137,169,1)
(108,57,1)
(207,148,1)
(193,79,1)
(199,197,1)
(86,72,1)
(105,174,1)
(187,212,1)
(38,152,1)
(184,131,1)
(127,68,1)
(151,3,1)
(105,53,1)
(192,84,1)
(151,153,1)
(55,77,1)
(40,130,1)
(77,89,1)
(205,102,1)
(118,167,1)
(121,164,1)
(212,59,1)
(122,0,1)
(60,115,1)
(163,93,1)
(154,122,1)
(51,13,1)
(49,174,1)
(153,104,1)
(47,43,1)
(45,22,1)
(6,63,1)
(202,29,1)
(178,21,1)
(216,119,1)
(211,56,1)
(47,22,1)
(109,97,1)
(105,7,1)
(160,0,1)
(170,35,1)
(43,112,1)
(146,108,1)
(47,148,1)
(148,73,1)
(68,218,1)
(119,151,1)
(210,34,1)
(45,159,1)
(2,4,1)
(168,97,1)
(167,132,1)
(54,51,1)
(201,4,1)
(115,185,1)
(133,64,1)
(45,148,1)
(84,57,1)
(104,101,1)
(14,80,1)
(191,98,1)
(193,183,1)
(115,78,1)
(125,96,1)
(194,153,1)
(207,66,1)
(132,52,1)
(201,186,1)
(128,94,1)
(4,30,1)
(109,55,1)
(205,178,1)
(190,91,1)
(137,207,1)
(72,4,1)
(105,202,1)
(45,163,1)
(131,118,1)
(75,211,1)
(55,213,1)
(85,189,1)
(145,100,1)
(26,87,1)
(150,75,1)
(130,217,1)
(15,4,1)
(166,194,1)
(69,137,1)
(110,145,1)
(84,146,1)
(14,216,1)
(101,80,1)
(156,69,1)
(59,191,1)
(134,157,1)
(46,190,1)
(171,185,1)
(70,168,1)
(89,57,1)
(97,36,1)
(173,84,1)
(87,46,1)
(8,22,1)
(100,29,1)
(196,181,1)
(16,207,1)
(27,124,1)
(174,128,1)
(152,10,1)
(181,48,1)
(10,33,1)
(105,141,1)
(64,192,1)
(165,160,1)
(138,175,1)
(207,163,1)
(185,209,1)
(25,205,1)
(141,218,1)
(45,128,1)
(13,49,1)
(187,57,1)
(85,4,1)
(103,8,1)
(30,27,1)
(82,196,1)
(115,4,1)
(29,129,1)
(200,50,1)
(207,128,1)
(66,199,1)
(78,171,1)
(71,47,1)
(80,187,1)
(89,183,1)
(200,51,1)
(153,80,1)
(159,71,1)
(174,163,1)
(91,82,1)
(147,138,1)
(56,154,1)
(157,67,1)
(3,166,1)
(112,16,1)
(7,33,1)
(128,82,1)
(208,157,2)
(193,183,2)
(50,0,2)
(128,157,2)
(35,40,2)
(38,33,2)
(9,151,2)
(200,50,2)
(24,207,2)
(151,153,2)
(15,29,2)
(3,153,2)
(205,178,2)
(205,102,2)
(45,22,2)
(58,201,2)
(164,29,2)
(104,84,2)
(200,51,2)
(207,128,2)
(60,201,2)
(173,84,2)
(185,201,2)
(184,201,2)
(89,57,2)
(47,128,2)
(51,174,2)
(185,206,2)
(76,201,2)
(70,0,2)
(84,57,2)
(96,4,2)
(19,201,2)
(91,151,2)
(181,151,2)
(115,78,2)
(216,151,2)
(33,218,2)
(61,157,2)
(201,4,2)
(210,0,2)
(150,0,2)
(57,85,2)
(213,77,2)
(26,46,2)
(45,148,2)
(13,174,2)
(138,201,2)
(10,33,2)
(166,153,2)
(29,174,2)
(115,201,2)
(29,0,2)
(182,201,2)
(72,4,2)
(29,200,2)
(115,185,2)
(47,207,2)
(0,0,2)
(129,174,2)
(4,30,2)
(207,148,2)
(45,128,2)
(110,29,2)
(146,33,2)
(98,84,2)
(187,59,2)
(52,201,2)
(51,0,2)
(4,29,2)
(59,84,2)
(211,0,2)
(209,201,2)
(108,33,2)
(27,29,2)
(194,153,2)
(178,201,2)
(49,174,2)
(71,207,2)
(82,196,2)
(217,201,2)
(46,151,2)
(50,174,2)
(109,0,2)
(43,207,2)
(153,80,2)
(100,29,2)
(131,201,2)
(196,151,2)
(170,201,2)
(47,163,2)
(54,0,2)
(132,201,2)
(35,201,2)
(128,82,2)
(102,201,2)
(151,3,2)
(2,72,2)
(67,46,2)
(92,0,2)
(141,218,2)
(200,0,2)
(121,29,2)
(175,201,2)
(163,157,2)
(115,4,2)
(47,148,2)
(72,0,2)
(187,84,2)
(53,201,2)
(193,57,2)
(93,157,2)
(80,187,2)
(46,82,2)
(1,0,2)
(118,201,2)
(87,46,2)
(168,0,2)
(163,93,2)
(127,218,2)
(72,150,2)
(79,89,2)
(6,63,2)
(185,209,2)
(28,201,2)
(0,97,2)
(57,33,2)
(133,84,2)
(174,151,2)
(218,201,2)
(25,201,2)
(186,29,2)
(171,201,2)
(183,0,2)
(54,174,2)
(202,29,2)
(77,0,2)
(192,84,2)
(153,84,2)
(21,201,2)
(84,33,2)
(40,201,2)
(154,0,2)
(130,201,2)
(201,29,2)
(89,0,2)
(68,218,2)
(159,207,2)
(56,0,2)
(190,151,2)
(147,201,2)
(125,218,2)
(16,207,2)
(86,72,2)
(75,0,2)
(2,150,2)
(55,0,2)
(157,46,2)
(18,151,2)
(134,157,2)
(161,65,2)
(47,22,2)
(34,0,2)
(13,0,2)
(152,33,2)
(80,84,2)
(157,151,2)
(189,33,2)
(136,151,2)
(7,33,2)
(101,84,2)
(94,157,2)
(96,218,2)
(69,22,2)
(33,96,2)
(83,201,2)
(78,201,2)
(124,29,2)
(218,115,2)
(85,33,2)
(179,0,2)
(14,80,2)
(82,151,2)
(67,82,2)
(89,183,2)
(167,201,2)
(207,163,2)
(157,67,2)
(191,84,2)
(45,207,2)
(14,151,2)
(48,151,2)
(169,207,2)
(129,0,2)
(119,151,2)
(122,0,2)
(205,201,2)
(187,57,2)
(212,84,2)
(145,29,2)
(85,4,2)
(30,29,2)
(112,207,2)
(105,0,2)
(3,80,2)
(45,163,2)
(200,174,2)
(2,4,2)
(109,97,2)
(193,89,2)
(182,28,2)
(5,201,2)
(151,84,2)
(49,0,2)
(64,84,2)
-----------------------------------
(0,i < 1)
(1,INVALID_SOCKET)
(2,CLOSE_SOCKET(listenSocket)
(3,recvResult == 0)
(4,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(5,s_addr)
(6,memset(source, \\\'A\\\', 100-1)
(7,break;)
(8,source)
(9,\\\'\\\\0\\\')
(10,acceptSocket)
(11,)
(12,)
(13,2)
(14,inputBuffer[recvResult])
(15,listenSocket)
(16,dest)
(17,)
(18,inputBuffer[recvResult] = \\\'\\\\0\\\')
(19,service)
(20,if (bind(listenSocket, (struct sockaddr*)
(21,service)
(22,dest[100] = "")
(23,)
(24,\\\'\\\\0\\\')
(25,service)
(26,SHRT_MIN)
(27,IPPROTO_TCP)
(28,service.sin_addr)
(29,WSAStartup(MAKEWORD(2,2)
(30,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(31,)
(32,do)
(33,listen(listenSocket, LISTEN_BACKLOG)
(34,acceptSocket)
(35,service.sin_port = htons(TCP_PORT)
(36,0)
(37,source)
(38,NULL)
(39,wsaDataInit)
(40,htons(TCP_PORT)
(41,if (listen(listenSocket, LISTEN_BACKLOG)
(42,)
(43,data)
(44,if (listenSocket == INVALID_SOCKET)
(45,dest[data])
(46,tempInt > SHRT_MAX)
(47,strncpy(dest, source, data)
(48,tempInt)
(49,2)
(50,&wsaData)
(51,MAKEWORD(2,2)
(52,sin_family)
(53,break;)
(54,wsaData)
(55,i)
(56,wsaDataInit = 0)
(57,acceptSocket = accept(listenSocket, NULL, NULL)
(58,sin_port)
(59,CHAR_ARRAY_SIZE - 1)
(60,SOCKET_ERROR)
(61,data)
(62,)
(63,100-1)
(64,acceptSocket)
(65,100-1)
(66,100)
(67,tempInt < SHRT_MIN)
(68,listenSocket)
(69,printLine(dest)
(70,1)
(71,dest)
(72,listenSocket != INVALID_SOCKET)
(73,0)
(74,)
(75,INVALID_SOCKET)
(76,service)
(77,wsaDataInit)
(78,sizeof(service)
(79,acceptSocket)
(80,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(81,1)
(82,tempInt = atoi(inputBuffer)
(83,0)
(84,acceptSocket == SOCKET_ERROR)
(85,accept(listenSocket, NULL, NULL)
(86,listenSocket)
(87,tempInt)
(88,100)
(89,acceptSocket != INVALID_SOCKET)
(90,if (recvResult == SOCKET_ERROR || recvResult == 0)
(91,tempInt)
(92,INVALID_SOCKET)
(93,-1)
(94,tempInt)
(95,recvResult)
(96,listen(listenSocket, LISTEN_BACKLOG)
(97,i = 0)
(98,CHAR_ARRAY_SIZE)
(99,)
(100,wsaDataInit)
(101,recvResult)
(102,&service)
(103,\\\'A\\\')
(104,SOCKET_ERROR)
(105,listenSocket)
(106,listenSocket)
(107,data)
(108,acceptSocket)
(109,i++)
(110,wsaDataInit = 1)
(111,service)
(112,source)
(113,)
(114,\\\'\\\\0\\\')
(115,bind(listenSocket, (struct sockaddr*)
(116,inputBuffer)
(117,if (data < 100)
(118,service.sin_family = AF_INET)
(119,inputBuffer)
(120,if (listenSocket != INVALID_SOCKET)
(121,AF_INET)
(122,wsaDataInit)
(123,1)
(124,SOCK_STREAM)
(125,SOCKET_ERROR)
(126,source)
(127,LISTEN_BACKLOG)
(128,data = tempInt)
(129,NO_ERROR)
(130,TCP_PORT)
(131,service)
(132,service.sin_family)
(133,inputBuffer)
(134,data)
(135,dest)
(136,break;)
(137,dest)
(138,service.sin_addr.s_addr = INADDR_ANY)
(139,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(140,if (acceptSocket == SOCKET_ERROR)
(141,break;)
(142,i)
(143,)
(144,)
(145,1)
(146,SOCKET_ERROR)
(147,service)
(148,data = 0)
(149,)
(150,listenSocket = INVALID_SOCKET)
(151,recvResult == SOCKET_ERROR || recvResult == 0)
(152,listenSocket)
(153,recvResult == SOCKET_ERROR)
(154,0)
(155,if (acceptSocket != INVALID_SOCKET)
(156,RET)
(157,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(158,100)
(159,data)
(160,dest)
(161,source[100-1])
(162,if (wsaDataInit)
(163,data = -1)
(164,listenSocket)
(165,"")
(166,0)
(167,AF_INET)
(168,i)
(169,dest[data] = \\\'\\\\0\\\')
(170,listenSocket)
(171,service)
(172,i)
(173,break;)
(174,0)
(175,INADDR_ANY)
(176,acceptSocket)
(177,)
(178,sizeof(service)
(179,acceptSocket)
(180,data)
(181,inputBuffer)
(182,service.sin_addr.s_addr)
(183,acceptSocket = INVALID_SOCKET)
(184,sin_addr)
(185,(struct sockaddr*)
(186,INVALID_SOCKET)
(187,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(188,for(i = 0; i < 1; i++)
(189,NULL)
(190,SHRT_MAX)
(191,1)
(192,recvResult)
(193,CLOSE_SOCKET(acceptSocket)
(194,recvResult)
(195,)
(196,atoi(inputBuffer)
(197,source[100-1] = \\\'\\\\0\\\')
(198,wsaData)
(199,data)
(200,WSAStartup(MAKEWORD(2,2)
(201,listenSocket == INVALID_SOCKET)
(202,break;)
(203,if (WSAStartup(MAKEWORD(2,2)
(204,)
(205,memset(&service, 0, sizeof(service)
(206,struct sockaddr*)
(207,data < 100)
(208,1)
(209,&service)
(210,INVALID_SOCKET)
(211,listenSocket)
(212,0)
(213,WSACleanup()
(214,tempInt)
(215,)
(216,recvResult)
(217,service.sin_port)
(218,bind(listenSocket, (struct sockaddr*)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^