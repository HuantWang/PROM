-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_04_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            int tempInt;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                /* FLAW: Use a value input from the network */
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate string */
                inputBuffer[recvResult] = '\0';
                /* Convert to short - ensure int to short conversion will be successful and if
                 * not ensure that data will be negative */
                tempInt = atoi(inputBuffer);
                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
                {
                    data = -1;
                }
                else
                {
                    data = tempInt;
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
61,62
63,64
63,65
64,65
64,66
64,67
64,68
64,69
64,70
64,71
64,72
64,73
64,74
64,75
64,76
64,77
64,78
64,79
65,66
66,67
66,68
67,68
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
91,92
94,95
95,96
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
122,124
123,124
125,126
127,128
127,129
128,129
128,130
129,130
129,131
129,132
129,133
130,131
132,133
134,135
134,136
135,136
135,137
136,137
138,139
140,141
141,142
143,144
144,145
145,146
147,148
149,150
151,152
151,153
152,153
152,154
153,154
153,155
153,156
154,155
156,157
158,159
160,161
162,163
164,165
165,166
165,167
166,167
168,169
168,170
168,171
168,172
169,170
171,172
173,174
175,176
177,178
177,179
178,179
178,180
179,180
181,182
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
189,193
189,194
190,191
192,193
194,195
196,197
196,198
197,198
201,202
201,203
202,203
202,204
203,204
203,205
204,205
206,207
208,209
208,210
209,210
212,213
214,215
215,216
215,217
216,217
216,218
217,218
219,220
222,223
223,224
223,225
224,225
226,227
226,228
227,228
229,230
231,232
231,233
231,234
232,233
232,234
233,234
233,235
234,235
236,237
238,239
238,240
239,240
241,242
243,244
244,245
245,246
245,247
246,247
248,249
250,251
251,252
252,253
252,254
253,254
255,256
258,259
258,260
259,260
259,261
260,261
262,263
264,265
265,266
266,267
266,268
267,268
269,270
271,272
271,273
272,273
272,274
273,274
275,276
277,278
278,279
279,280
279,281
280,281
282,283
284,285
284,286
284,287
284,288
284,289
284,290
285,286
286,287
286,288
288,289
288,290
290,291
292,293
293,294
293,295
295,296
295,297
295,298
297,298
299,300
301,302
302,303
302,304
302,305
302,306
303,304
305,306
308,309
308,310
311,312
312,313
312,314
313,314
313,315
314,315
316,317
316,318
320,321
320,322
321,322
321,323
322,323
325,326
325,327
326,327
327,328
327,329
327,330
327,331
328,329
330,331
332,333
334,335
336,337
337,338
337,339
338,339
338,340
339,340
341,342
344,345
345,346
345,347
346,347
348,349
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,34,36,40,42,45,49,51,54,57,59,62,68,71,73,75,77,81,83,85,89,92,93,97,102,103,105,111,112,113,115,120,121,124,126,131,133,137,139,142,146,148,150,155,157,159,161,163,167,170,172,174,176,180,182,184,188,191,193,195,198,199,200,205,207,210,211,213,218,220,221,225,228,230,235,237,240,242,247,249,254,256,257,261,263,268,270,274,276,281,283,287,289,291,294,296,298,300,304,306,307,309,310,315,317,318,319,323,324,329,331,333,335,340,342,343,347,349
-----computeFrom-----
12,13
12,14
66,67
66,68
79,80
79,81
99,100
99,101
107,108
107,109
117,118
117,119
128,129
128,130
152,153
152,154
165,166
165,167
178,179
178,180
186,187
186,188
196,197
196,198
202,203
202,204
203,204
203,205
208,209
208,210
215,216
215,217
223,224
223,225
232,233
232,234
233,234
233,235
238,239
238,240
245,246
245,247
252,253
252,254
259,260
259,261
272,273
272,274
308,309
308,310
312,313
312,314
316,317
316,318
321,322
321,323
337,338
337,339
-----guardedBy-----
261,270
274,283
323,342
-----guardedByNegation-----
240,256
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_04_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_04_bad()
CWE194_Unexpected_Sign_Extension__listen_socket_strncpy_04_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            int tempInt;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                /* FLAW: Use a value input from the network */                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate string */                inputBuffer[recvResult] = '\0';                /* Convert to short - ensure int to short conversion will be successful and if                 * not ensure that data will be negative */                tempInt = atoi(inputBuffer);                if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)                {                    data = -1;                }                else                {                    data = tempInt;                }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                    data = -1;                }
data = -1;
data = -1
data
data
-1
1
{                    data = tempInt;                }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,0,0)
(195,0,0)
(0,195,0)
(125,195,0)
(65,151,0)
(60,27,0)
(171,102,0)
(158,102,0)
(33,119,0)
(89,9,0)
(96,4,0)
(40,130,0)
(176,136,0)
(208,107,0)
(50,110,0)
(151,65,0)
(117,191,0)
(37,34,0)
(23,192,0)
(59,114,0)
(42,95,0)
(3,185,0)
(199,152,0)
(21,179,0)
(67,74,0)
(130,114,0)
(84,191,0)
(47,178,0)
(23,34,0)
(127,140,0)
(202,34,0)
(115,152,0)
(1,35,0)
(80,39,0)
(9,191,0)
(88,51,0)
(82,102,0)
(34,102,0)
(61,0,0)
(109,1,0)
(22,107,0)
(77,54,0)
(52,166,0)
(45,2,0)
(28,100,0)
(206,11,0)
(131,9,0)
(197,35,0)
(108,132,0)
(136,188,0)
(193,114,0)
(74,114,0)
(135,64,0)
(20,114,0)
(179,102,0)
(70,83,0)
(117,154,0)
(0,51,0)
(87,189,0)
(12,132,0)
(207,202,0)
(62,176,0)
(144,107,0)
(83,102,0)
(201,142,0)
(54,77,0)
(184,114,0)
(100,179,0)
(173,34,0)
(170,189,0)
(6,102,0)
(132,6,0)
(78,114,0)
(51,0,0)
(9,103,0)
(90,35,0)
(4,102,0)
(153,90,0)
(145,0,0)
(120,185,0)
(188,136,0)
(192,23,0)
(75,118,0)
(29,90,0)
(46,114,0)
(200,187,0)
(192,202,0)
(4,189,0)
(35,39,0)
(148,85,0)
(185,3,0)
(72,27,0)
(178,101,0)
(19,171,0)
(85,4,0)
(132,51,0)
(48,118,0)
(204,157,0)
(177,165,0)
(104,166,0)
(51,102,0)
(34,37,0)
(98,146,0)
(7,102,0)
(160,186,0)
(151,103,0)
(194,119,0)
(112,73,0)
(94,179,0)
(107,34,0)
(66,106,0)
(16,62,0)
(41,118,0)
(3,51,0)
(180,95,0)
(183,94,0)
(191,114,0)
(140,127,0)
(167,73,0)
(169,102,0)
(10,120,0)
(124,191,0)
(118,41,0)
(63,77,0)
(32,11,0)
(90,42,0)
(147,54,0)
(205,70,0)
(86,6,0)
(76,202,0)
(119,31,0)
(103,73,0)
(156,136,0)
(176,159,0)
(71,188,0)
(0,4,0)
(56,169,0)
(18,74,0)
(163,142,0)
(113,23,0)
(144,42,0)
(5,39,0)
(55,158,0)
(103,102,0)
(181,73,0)
(157,178,0)
(25,95,0)
(53,60,0)
(121,140,0)
(189,4,0)
(136,2,0)
(107,155,0)
(97,42,0)
(161,102,0)
(185,120,0)
(123,41,0)
(143,103,0)
(176,62,0)
(15,114,0)
(166,27,0)
(79,127,0)
(128,41,0)
(90,31,0)
(138,33,0)
(175,37,0)
(27,72,0)
(92,169,0)
(140,80,0)
(190,85,0)
(203,72,0)
(136,103,0)
(85,74,0)
(39,95,0)
(90,178,0)
(30,64,0)
(36,144,0)
(33,35,0)
(90,107,0)
(133,117,0)
(17,80,0)
(68,54,0)
(137,130,0)
(33,178,0)
(144,178,0)
(8,33,0)
(27,60,0)
(122,120,0)
(41,39,0)
(33,107,0)
(186,4,0)
(73,103,0)
(179,94,0)
(27,166,0)
(83,70,0)
(126,151,0)
(196,102,0)
(93,144,0)
(11,83,0)
(134,189,0)
(168,114,0)
(179,100,0)
(150,129,0)
(116,114,0)
(33,42,0)
(58,114,0)
(141,114,0)
(198,42,0)
(202,192,0)
(178,157,0)
(77,158,0)
(64,171,0)
(159,176,0)
(117,103,0)
(120,51,0)
(172,127,0)
(136,176,0)
(189,103,0)
(49,39,0)
(1,39,0)
(186,74,0)
(105,65,0)
(111,195,0)
(38,3,0)
(24,210,0)
(149,39,0)
(114,139,0)
(57,102,0)
(152,4,0)
(43,151,0)
(186,182,0)
(44,90,0)
(164,102,0)
(174,23,0)
(26,35,0)
(162,114,0)
(2,136,0)
(142,103,0)
(91,3,0)
(13,102,0)
(85,4,1)
(113,34,1)
(85,190,1)
(98,65,1)
(4,189,1)
(27,60,1)
(118,48,1)
(145,14,1)
(107,208,1)
(143,169,1)
(23,34,1)
(166,52,1)
(61,195,1)
(1,35,1)
(47,192,1)
(119,194,1)
(191,124,1)
(104,74,1)
(22,192,1)
(51,0,1)
(181,143,1)
(96,65,1)
(9,89,1)
(131,50,1)
(87,96,1)
(157,204,1)
(42,97,1)
(150,185,1)
(18,67,1)
(115,199,1)
(86,132,1)
(142,201,1)
(136,2,1)
(131,150,1)
(29,144,1)
(33,107,1)
(67,191,1)
(43,188,1)
(133,9,1)
(90,178,1)
(173,6,1)
(77,63,1)
(41,118,1)
(28,142,1)
(147,68,1)
(11,32,1)
(44,29,1)
(0,61,1)
(151,126,1)
(62,16,1)
(26,197,1)
(176,62,1)
(151,103,1)
(186,74,1)
(68,171,1)
(53,166,1)
(177,72,1)
(109,119,1)
(169,56,1)
(197,209,1)
(65,151,1)
(17,140,1)
(148,117,1)
(189,134,1)
(105,151,1)
(10,122,1)
(37,175,1)
(188,136,1)
(9,191,1)
(117,103,1)
(200,209,1)
(0,195,1)
(76,207,1)
(85,74,1)
(12,108,1)
(69,42,1)
(125,111,1)
(80,17,1)
(74,18,1)
(90,153,1)
(131,81,1)
(2,45,1)
(186,4,1)
(188,71,1)
(171,19,1)
(148,9,1)
(131,24,1)
(153,44,1)
(160,85,1)
(131,66,1)
(77,54,1)
(88,152,1)
(197,69,1)
(179,94,1)
(209,186,1)
(152,4,1)
(158,55,1)
(75,128,1)
(72,27,1)
(54,147,1)
(190,148,1)
(201,163,1)
(63,54,1)
(6,86,1)
(127,172,1)
(140,127,1)
(130,137,1)
(3,51,1)
(194,33,1)
(203,27,1)
(144,42,1)
(136,176,1)
(186,160,1)
(50,152,1)
(185,3,1)
(142,103,1)
(122,3,1)
(90,42,1)
(202,34,1)
(90,35,1)
(45,176,1)
(23,174,1)
(71,136,1)
(189,103,1)
(81,178,1)
(197,200,1)
(8,90,1)
(33,138,1)
(121,41,1)
(152,115,1)
(117,133,1)
(134,170,1)
(109,144,1)
(208,22,1)
(172,79,1)
(94,183,1)
(205,11,1)
(117,191,1)
(192,23,1)
(79,121,1)
(183,21,1)
(40,69,1)
(206,158,1)
(33,178,1)
(30,179,1)
(83,70,1)
(24,188,1)
(93,80,1)
(104,81,1)
(176,159,1)
(84,130,1)
(108,185,1)
(132,51,1)
(19,64,1)
(137,40,1)
(175,173,1)
(174,113,1)
(185,120,1)
(144,107,1)
(163,103,1)
(107,34,1)
(195,125,1)
(14,88,1)
(1,109,1)
(179,100,1)
(124,84,1)
(178,157,1)
(202,76,1)
(120,51,1)
(209,85,1)
(73,112,1)
(135,30,1)
(156,83,1)
(27,166,1)
(33,42,1)
(36,93,1)
(100,28,1)
(21,100,1)
(132,12,1)
(112,167,1)
(167,181,1)
(89,131,1)
(70,205,1)
(55,77,1)
(111,145,1)
(32,206,1)
(103,73,1)
(131,177,1)
(123,35,1)
(66,142,1)
(48,75,1)
(38,91,1)
(60,53,1)
(126,43,1)
(144,36,1)
(64,135,1)
(33,35,1)
(3,38,1)
(56,92,1)
(0,4,1)
(35,26,1)
(65,105,1)
(192,202,1)
(99,1,1)
(81,107,1)
(9,103,1)
(207,23,1)
(72,203,1)
(131,98,1)
(199,4,1)
(92,72,1)
(204,47,1)
(120,10,1)
(97,198,1)
(136,103,1)
(34,37,1)
(144,178,1)
(90,107,1)
(91,51,1)
(52,104,1)
(16,156,1)
(170,87,1)
(128,123,1)
(138,8,1)
(190,69,2)
(4,65,2)
(60,81,2)
(24,188,2)
(183,142,2)
(144,42,2)
(51,0,2)
(120,3,2)
(11,142,2)
(85,69,2)
(130,69,2)
(133,9,2)
(68,142,2)
(2,142,2)
(22,192,2)
(3,152,2)
(83,142,2)
(71,142,2)
(170,65,2)
(70,142,2)
(55,142,2)
(81,185,2)
(92,72,2)
(63,142,2)
(148,69,2)
(207,23,2)
(117,103,2)
(185,120,2)
(178,157,2)
(1,35,2)
(0,4,2)
(12,185,2)
(10,3,2)
(188,136,2)
(33,35,2)
(87,65,2)
(142,103,2)
(53,69,2)
(61,152,2)
(32,142,2)
(126,188,2)
(120,51,2)
(132,185,2)
(158,142,2)
(192,202,2)
(186,74,2)
(65,188,2)
(27,81,2)
(14,152,2)
(67,69,2)
(167,72,2)
(72,69,2)
(150,185,2)
(151,188,2)
(72,27,2)
(30,142,2)
(38,152,2)
(16,142,2)
(90,178,2)
(137,69,2)
(166,69,2)
(202,23,2)
(23,34,2)
(33,42,2)
(18,69,2)
(19,142,2)
(188,142,2)
(21,142,2)
(47,192,2)
(103,72,2)
(203,69,2)
(107,34,2)
(186,4,2)
(37,185,2)
(83,70,2)
(90,144,2)
(191,69,2)
(52,69,2)
(72,81,2)
(88,152,2)
(179,142,2)
(44,144,2)
(40,69,2)
(28,142,2)
(186,85,2)
(77,142,2)
(89,69,2)
(0,195,2)
(85,4,2)
(173,185,2)
(194,144,2)
(86,185,2)
(115,65,2)
(84,69,2)
(111,152,2)
(94,142,2)
(98,65,2)
(160,85,2)
(9,191,2)
(143,72,2)
(176,142,2)
(177,72,2)
(52,81,2)
(132,51,2)
(134,65,2)
(124,69,2)
(77,54,2)
(189,65,2)
(112,72,2)
(157,192,2)
(206,142,2)
(60,69,2)
(41,118,2)
(203,81,2)
(3,51,2)
(66,142,2)
(90,107,2)
(53,81,2)
(64,142,2)
(54,142,2)
(4,189,2)
(96,65,2)
(185,3,2)
(202,34,2)
(0,152,2)
(135,142,2)
(145,152,2)
(142,72,2)
(65,151,2)
(33,107,2)
(169,72,2)
(179,100,2)
(179,94,2)
(8,144,2)
(200,209,2)
(205,142,2)
(178,192,2)
(192,185,2)
(90,42,2)
(189,103,2)
(125,152,2)
(9,103,2)
(144,178,2)
(185,152,2)
(27,69,2)
(176,159,2)
(50,152,2)
(108,185,2)
(6,185,2)
(209,69,2)
(56,72,2)
(152,65,2)
(34,185,2)
(201,72,2)
(76,23,2)
(9,69,2)
(43,188,2)
(51,152,2)
(136,103,2)
(23,185,2)
(163,72,2)
(131,69,2)
(74,69,2)
(171,142,2)
(122,3,2)
(117,191,2)
(113,185,2)
(204,192,2)
(195,152,2)
(119,144,2)
(62,142,2)
(176,62,2)
(174,185,2)
(73,72,2)
(138,144,2)
(147,142,2)
(34,37,2)
(85,74,2)
(33,178,2)
(151,103,2)
(144,107,2)
(166,81,2)
(104,69,2)
(192,23,2)
(104,81,2)
(140,127,2)
(117,9,2)
(29,144,2)
(107,192,2)
(136,2,2)
(105,188,2)
(208,192,2)
(153,144,2)
(100,142,2)
(103,73,2)
(27,166,2)
(136,176,2)
(136,142,2)
(199,65,2)
(175,185,2)
(91,152,2)
(152,4,2)
(156,142,2)
(45,142,2)
(27,60,2)
(90,35,2)
(181,72,2)
(33,144,2)
-----------------------------------
(0,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(1,printLine(dest)
(2,sizeof(service)
(3,recvResult == SOCKET_ERROR)
(4,acceptSocket = accept(listenSocket, NULL, NULL)
(5,dest)
(6,inputBuffer[recvResult] = \\\'\\\\0\\\')
(7,if (bind(listenSocket, (struct sockaddr*)
(8,dest)
(9,listenSocket != INVALID_SOCKET)
(10,0)
(11,service.sin_port)
(12,recvResult)
(13,if (recvResult == SOCKET_ERROR || recvResult == 0)
(14,acceptSocket)
(15,acceptSocket)
(16,service)
(17,\\\'\\\\0\\\')
(18,INVALID_SOCKET)
(19,AF_INET)
(20,recvResult)
(21,0)
(22,data)
(23,tempInt > SHRT_MAX)
(24,break;)
(25,if(STATIC_CONST_TRUE)
(26,"")
(27,WSAStartup(MAKEWORD(2,2)
(28,service)
(29,dest)
(30,service)
(31,)
(32,sin_port)
(33,dest[data])
(34,tempInt = atoi(inputBuffer)
(35,dest[100] = "")
(36,100)
(37,atoi(inputBuffer)
(38,SOCKET_ERROR)
(39,)
(40,wsaDataInit)
(41,memset(source, \\\'A\\\', 100-1)
(42,data = 0)
(43,listenSocket)
(44,source)
(45,service)
(46,if (wsaDataInit)
(47,data)
(48,1)
(49,source)
(50,break;)
(51,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(52,2)
(53,wsaData)
(54,service.sin_addr)
(55,INADDR_ANY)
(56,1)
(57,if (acceptSocket == SOCKET_ERROR)
(58,if (listenSocket != INVALID_SOCKET)
(59,if (acceptSocket != INVALID_SOCKET)
(60,&wsaData)
(61,0)
(62,&service)
(63,s_addr)
(64,service.sin_family)
(65,listen(listenSocket, LISTEN_BACKLOG)
(66,break;)
(67,acceptSocket)
(68,service)
(69,STATIC_CONST_TRUE)
(70,htons(TCP_PORT)
(71,SOCKET_ERROR)
(72,WSAStartup(MAKEWORD(2,2)
(73,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(74,acceptSocket = INVALID_SOCKET)
(75,100)
(76,SHRT_MIN)
(77,service.sin_addr.s_addr)
(78,tempInt)
(79,100)
(80,source[100-1] = \\\'\\\\0\\\')
(81,0)
(82,if (WSAStartup(MAKEWORD(2,2)
(83,service.sin_port = htons(TCP_PORT)
(84,listenSocket)
(85,acceptSocket != INVALID_SOCKET)
(86,\\\'\\\\0\\\')
(87,listenSocket)
(88,recvResult)
(89,INVALID_SOCKET)
(90,strncpy(dest, source, data)
(91,recvResult)
(92,wsaDataInit)
(93,data)
(94,sizeof(service)
(95,)
(96,acceptSocket)
(97,0)
(98,break;)
(99,RET)
(100,&service)
(101,)
(102,)
(103,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(104,2)
(105,SOCKET_ERROR)
(106,)
(107,data = tempInt)
(108,inputBuffer)
(109,dest)
(110,)
(111,CHAR_ARRAY_SIZE)
(112,IPPROTO_TCP)
(113,tempInt)
(114,)
(115,SOCKET_ERROR)
(116,wsaDataInit)
(117,CLOSE_SOCKET(listenSocket)
(118,100-1)
(119,dest[data] = \\\'\\\\0\\\')
(120,recvResult == 0)
(121,source)
(122,recvResult)
(123,source)
(124,INVALID_SOCKET)
(125,1)
(126,LISTEN_BACKLOG)
(127,100-1)
(128,\\\'A\\\')
(129,)
(130,wsaDataInit = 0)
(131,listenSocket)
(132,inputBuffer[recvResult])
(133,listenSocket)
(134,NULL)
(135,sin_family)
(136,bind(listenSocket, (struct sockaddr*)
(137,0)
(138,data)
(139,)
(140,source[100-1])
(141,listenSocket)
(142,listenSocket == INVALID_SOCKET)
(143,listenSocket)
(144,data < 100)
(145,inputBuffer)
(146,)
(147,sin_addr)
(148,acceptSocket)
(149,if (data < 100)
(150,break;)
(151,listen(listenSocket, LISTEN_BACKLOG)
(152,acceptSocket == SOCKET_ERROR)
(153,data)
(154,)
(155,)
(156,listenSocket)
(157,-1)
(158,service.sin_addr.s_addr = INADDR_ANY)
(159,struct sockaddr*)
(160,acceptSocket)
(161,if (listenSocket == INVALID_SOCKET)
(162,service)
(163,listenSocket)
(164,if (listen(listenSocket, LISTEN_BACKLOG)
(165,)
(166,MAKEWORD(2,2)
(167,SOCK_STREAM)
(168,do)
(169,wsaDataInit = 1)
(170,NULL)
(171,service.sin_family = AF_INET)
(172,1)
(173,tempInt)
(174,SHRT_MAX)
(175,inputBuffer)
(176,(struct sockaddr*)
(177,break;)
(178,data = -1)
(179,memset(&service, 0, sizeof(service)
(180,data)
(181,AF_INET)
(182,)
(183,service)
(184,inputBuffer)
(185,recvResult == SOCKET_ERROR || recvResult == 0)
(186,CLOSE_SOCKET(acceptSocket)
(187,)
(188,bind(listenSocket, (struct sockaddr*)
(189,accept(listenSocket, NULL, NULL)
(190,INVALID_SOCKET)
(191,listenSocket = INVALID_SOCKET)
(192,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(193,wsaData)
(194,\\\'\\\\0\\\')
(195,CHAR_ARRAY_SIZE - 1)
(196,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(197,dest)
(198,data)
(199,acceptSocket)
(200,WSACleanup()
(201,INVALID_SOCKET)
(202,tempInt < SHRT_MIN)
(203,NO_ERROR)
(204,1)
(205,TCP_PORT)
(206,service)
(207,tempInt)
(208,tempInt)
(209,wsaDataInit)
(210,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^