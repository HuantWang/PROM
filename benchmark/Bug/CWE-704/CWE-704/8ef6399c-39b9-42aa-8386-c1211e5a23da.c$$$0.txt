-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a negative number */
    data = -1;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
24,26
25,26
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
75,76
75,77
76,77
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,16,20,22,26,27,31,33,34,38,40,43,45,49,51,56,58,62,64,65,68,69,74,77,78,79,83,85,89,91
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
47,48
47,49
66,67
66,68
71,72
71,73
75,76
75,77
-----guardedBy-----
26,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_01_bad(){    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_01_bad
{    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(4,13,0)
(13,33,0)
(26,47,0)
(35,33,0)
(25,20,0)
(28,6,0)
(45,15,0)
(3,41,0)
(12,8,0)
(46,15,0)
(17,43,0)
(44,30,0)
(48,16,0)
(43,1,0)
(10,5,0)
(23,16,0)
(34,43,0)
(39,1,0)
(33,13,0)
(22,36,0)
(15,14,0)
(17,0,0)
(27,23,0)
(31,14,0)
(15,46,0)
(0,17,0)
(13,16,0)
(1,30,0)
(16,17,0)
(16,14,0)
(36,16,0)
(25,6,0)
(15,16,0)
(48,14,0)
(47,26,0)
(5,14,0)
(40,15,0)
(49,48,0)
(41,1,0)
(50,23,0)
(24,47,0)
(43,17,0)
(13,5,0)
(7,33,0)
(33,1,0)
(32,46,0)
(6,25,0)
(19,14,0)
(21,26,0)
(17,16,0)
(47,8,0)
(9,46,0)
(29,41,0)
(38,8,0)
(46,1,0)
(1,8,0)
(36,14,0)
(18,16,0)
(30,1,0)
(26,21,1)
(21,24,1)
(33,1,1)
(22,48,1)
(17,0,1)
(18,41,1)
(17,43,1)
(43,34,1)
(40,45,1)
(48,49,1)
(49,5,1)
(32,40,1)
(27,16,1)
(36,22,1)
(41,29,1)
(29,3,1)
(13,33,1)
(36,16,1)
(28,23,1)
(6,28,1)
(48,16,1)
(35,7,1)
(30,44,1)
(46,9,1)
(23,16,1)
(47,26,1)
(15,46,1)
(5,10,1)
(2,36,1)
(1,30,1)
(45,23,1)
(15,16,1)
(10,13,1)
(25,6,1)
(9,32,1)
(33,35,1)
(41,1,1)
(4,15,1)
(3,1,1)
(39,47,1)
(46,1,1)
(13,16,1)
(23,50,1)
(7,4,1)
(2,41,1)
(45,25,1)
(16,17,1)
(34,18,1)
(50,27,1)
(44,39,1)
(43,1,1)
(46,1,2)
(40,41,2)
(27,41,2)
(43,41,2)
(13,33,2)
(48,41,2)
(41,1,2)
(35,41,2)
(18,41,2)
(13,41,2)
(43,1,2)
(48,16,2)
(15,16,2)
(16,41,2)
(47,26,2)
(50,41,2)
(17,43,2)
(36,16,2)
(46,41,2)
(25,6,2)
(28,23,2)
(10,41,2)
(17,0,2)
(49,41,2)
(33,1,2)
(22,41,2)
(15,41,2)
(5,41,2)
(36,41,2)
(15,46,2)
(45,41,2)
(13,16,2)
(6,23,2)
(33,41,2)
(25,23,2)
(17,41,2)
(1,30,2)
(32,41,2)
(7,41,2)
(23,41,2)
(16,17,2)
(4,41,2)
(23,16,2)
(34,41,2)
(9,41,2)
-----------------------------------
(0,char *)
(1,data = -1)
(2,RET)
(3,data)
(4,dataBuffer)
(5,dataBuffer[data-1] = '\\\\0')
(6,-1)
(7,data)
(8,)
(9,1)
(10,'\\\\0')
(11,dataBuffer[data-1] = \'\\\\0\')
(12,data)
(13,dataBuffer[data-1])
(14,)
(15,memset(dataBuffer, 'A', data-1)
(16,* dataBuffer = (char *)
(17,(char *)
(18,dataBuffer)
(19,dataBuffer)
(20,)
(21,1)
(22,dataBuffer)
(23,dataBuffer == NULL)
(24,data)
(25,exit(-1)
(26,-1)
(27,dataBuffer)
(28,1)
(29,100)
(30,-1)
(31,if (dataBuffer == NULL)
(32,data)
(33,data-1)
(34,data)
(35,1)
(36,free(dataBuffer)
(37,\'\\\\0\')
(38,if (data < 100)
(39,data)
(40,\'A\')
(41,data < 100)
(42,'A')
(43,malloc(data)
(44,1)
(45,dataBuffer)
(46,data-1)
(47,data = -1)
(48,printLine(dataBuffer)
(49,dataBuffer)
(50,NULL)
(51,memset(dataBuffer, \'A\', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^