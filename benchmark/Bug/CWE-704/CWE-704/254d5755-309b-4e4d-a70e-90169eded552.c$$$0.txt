-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_09_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
69,70
69,71
71,72
72,73
72,74
73,74
73,75
76,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,68,70,74,75,77,81,83
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_09_bad(){    short data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_09_bad()
CWE197_Numeric_Truncation_Error__short_fgets_09_bad
{    short data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(14,13,0)
(38,35,0)
(20,13,0)
(31,21,0)
(2,17,0)
(24,11,0)
(13,35,0)
(18,11,0)
(12,30,0)
(40,27,0)
(40,36,0)
(28,31,0)
(13,31,0)
(35,17,0)
(35,5,0)
(15,40,0)
(6,0,0)
(34,27,0)
(9,0,0)
(26,30,0)
(12,8,0)
(12,31,0)
(16,36,0)
(0,37,0)
(11,24,0)
(24,4,0)
(31,12,0)
(36,27,0)
(30,4,0)
(25,24,0)
(13,14,0)
(5,35,0)
(10,4,0)
(27,17,0)
(4,0,0)
(8,12,0)
(3,22,0)
(29,4,0)
(36,13,0)
(7,24,0)
(1,5,0)
(32,24,0)
(23,3,0)
(30,12,0)
(19,17,0)
(13,36,0)
(35,5,1)
(16,3,1)
(7,25,1)
(4,10,1)
(23,11,1)
(36,13,1)
(11,24,1)
(15,36,1)
(13,35,1)
(20,16,1)
(29,33,1)
(40,36,1)
(13,20,1)
(12,30,1)
(12,8,1)
(28,11,1)
(10,29,1)
(33,35,1)
(16,31,1)
(13,31,1)
(40,15,1)
(11,18,1)
(31,12,1)
(3,23,1)
(32,7,1)
(25,4,1)
(5,1,1)
(18,24,1)
(30,26,1)
(16,33,1)
(26,28,1)
(39,40,1)
(30,4,1)
(1,38,1)
(24,32,1)
(13,14,1)
(24,4,1)
(25,33,2)
(36,13,2)
(7,33,2)
(35,5,2)
(26,11,2)
(30,4,2)
(12,30,2)
(24,4,2)
(32,33,2)
(4,33,2)
(13,31,2)
(40,36,2)
(31,11,2)
(12,8,2)
(24,33,2)
(31,12,2)
(11,24,2)
(11,33,2)
(10,33,2)
(3,11,2)
(23,11,2)
(18,33,2)
(12,11,2)
(29,33,2)
(28,11,2)
(13,14,2)
(30,11,2)
(13,35,2)
-----------------------------------
(0,)
(1,1)
(2,data)
(3,printLine("fgets()
(4,inputBuffer[CHAR_ARRAY_SIZE] = "")
(5,-1)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,CHAR_ARRAY_SIZE)
(8,short)
(9,inputBuffer)
(10,"")
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,(short)
(13,(char)
(14,char)
(15,charData)
(16,charData)
(17,)
(18,NULL)
(19,if(GLOBAL_CONST_TRUE)
(20,data)
(21,)
(22,)
(23,"fgets()
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,inputBuffer)
(26,inputBuffer)
(27,)
(28,data)
(29,inputBuffer)
(30,atoi(inputBuffer)
(31,data = (short)
(32,stdin)
(33,GLOBAL_CONST_TRUE)
(34,charData)
(35,data = -1)
(36,charData = (char)
(37,)
(38,data)
(39,RET)
(40,printHexCharLine(charData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^