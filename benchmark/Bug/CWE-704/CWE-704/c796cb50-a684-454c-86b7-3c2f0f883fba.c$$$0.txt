-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
51,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,46,48,52,53,55,59,61
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_char_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_char_17_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_char_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(5,15,0)
(20,19,0)
(9,25,0)
(3,29,0)
(25,21,0)
(19,27,0)
(3,12,0)
(24,12,0)
(28,12,0)
(13,29,0)
(19,14,0)
(29,3,0)
(15,19,0)
(26,16,0)
(11,23,0)
(15,3,0)
(15,8,0)
(0,15,0)
(8,10,0)
(6,3,0)
(8,15,0)
(15,5,0)
(1,21,0)
(17,8,0)
(10,12,0)
(27,19,0)
(7,21,0)
(16,21,0)
(4,12,0)
(23,10,0)
(2,25,0)
(23,8,0)
(22,10,0)
(9,2,1)
(3,29,1)
(1,3,1)
(29,13,1)
(26,19,1)
(2,16,1)
(15,0,1)
(18,23,1)
(11,8,1)
(25,21,1)
(23,8,1)
(23,11,1)
(25,9,1)
(8,15,1)
(20,25,1)
(21,7,1)
(0,17,1)
(13,6,1)
(15,3,1)
(16,26,1)
(27,20,1)
(15,19,1)
(19,27,1)
(17,25,1)
(15,5,1)
(2,21,1)
(7,1,1)
(16,21,1)
(16,25,2)
(15,5,2)
(25,21,2)
(16,21,2)
(23,8,2)
(27,25,2)
(15,19,2)
(9,25,2)
(19,25,2)
(8,15,2)
(19,27,2)
(20,25,2)
(26,25,2)
(25,25,2)
(3,29,2)
(15,3,2)
(2,25,2)
-----------------------------------
(0,data)
(1,i)
(2,i)
(3,data = -1)
(4,i)
(5,char)
(6,data)
(7,0)
(8,charData = (char)
(9,1)
(10,)
(11,charData)
(12,)
(13,1)
(14,)
(15,(char)
(16,i++)
(17,charData)
(18,RET)
(19,data = RAND32()
(20,data)
(21,i = 0)
(22,charData)
(23,printHexCharLine(charData)
(24,for(i = 0; i < 1; i++)
(25,i < 1)
(26,i)
(27,RAND32()
(28,data)
(29,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^