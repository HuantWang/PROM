-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a negative number */
    data = -1;
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            char source[100];
            char dest[100] = "";
            memset(source, 'A', 100-1);
            source[100-1] = '\0';
            if (data < 100)
            {
                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
                 * the sign conversion could result in a very large number */
                memcpy(dest, source, data);
                dest[data] = '\0'; /* NULL terminate */
            }
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,34,36,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
18,19
18,20
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_31_bad(){    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    {        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_31_bad
{    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    {        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = -1;
data = -1
data
data
-1
1
{        int dataCopy = data;        int data = dataCopy;        {            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char source[100];            char dest[100] = "";            memset(source, 'A', 100-1);            source[100-1] = '\0';            if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }            printLine(dest);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)            {                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
data < 100
data
data
100
{                /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,                 * the sign conversion could result in a very large number */                memcpy(dest, source, data);                dest[data] = '\0'; /* NULL terminate */            }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(35,42,0)
(15,25,0)
(22,37,0)
(11,2,0)
(36,3,0)
(4,7,0)
(41,42,0)
(7,38,0)
(29,31,0)
(12,2,0)
(18,12,0)
(23,18,0)
(7,5,0)
(17,38,0)
(47,48,0)
(44,12,0)
(53,31,0)
(32,22,0)
(38,12,0)
(19,17,0)
(37,22,0)
(24,17,0)
(16,3,0)
(9,38,0)
(13,7,0)
(27,12,0)
(42,1,0)
(54,53,0)
(46,39,0)
(52,2,0)
(17,48,0)
(43,38,0)
(7,53,0)
(34,16,0)
(50,31,0)
(52,51,0)
(39,38,0)
(6,22,0)
(1,42,0)
(51,52,0)
(10,52,0)
(8,7,0)
(30,1,0)
(37,50,0)
(1,31,0)
(16,2,0)
(17,53,0)
(48,5,0)
(25,31,0)
(38,18,0)
(20,37,0)
(21,31,0)
(33,51,0)
(25,53,0)
(0,1,0)
(18,16,0)
(31,12,0)
(40,53,0)
(45,39,0)
(26,50,0)
(49,18,0)
(3,16,0)
(14,31,0)
(39,46,1)
(42,41,1)
(49,16,1)
(28,25,1)
(54,40,1)
(32,20,1)
(38,18,1)
(1,42,1)
(18,23,1)
(6,32,1)
(23,49,1)
(47,17,1)
(50,26,1)
(26,37,1)
(7,4,1)
(17,38,1)
(35,30,1)
(8,13,1)
(37,22,1)
(7,38,1)
(45,50,1)
(25,53,1)
(4,8,1)
(9,43,1)
(18,16,1)
(39,38,1)
(33,10,1)
(22,6,1)
(46,45,1)
(43,18,1)
(53,54,1)
(24,19,1)
(40,38,1)
(41,35,1)
(17,24,1)
(16,3,1)
(25,15,1)
(38,9,1)
(15,39,1)
(3,36,1)
(0,53,1)
(17,53,1)
(36,34,1)
(51,33,1)
(52,51,1)
(30,0,1)
(13,39,1)
(34,52,1)
(15,48,1)
(7,53,1)
(20,1,1)
(19,7,1)
(48,47,1)
(25,53,2)
(37,22,2)
(17,53,2)
(1,42,2)
(17,38,2)
(16,3,2)
(7,53,2)
(8,39,2)
(52,51,2)
(18,16,2)
(47,39,2)
(19,39,2)
(24,39,2)
(4,39,2)
(13,39,2)
(7,38,2)
(7,39,2)
(17,39,2)
(39,38,2)
(48,39,2)
(38,18,2)
-----------------------------------
(0,source)
(1,memset(source, \\\'A\\\', 100-1)
(2,)
(3,-1)
(4,data)
(5,)
(6,1)
(7,memcpy(dest, source, data)
(8,source)
(9,dataCopy)
(10,data)
(11,data)
(12,)
(13,dest)
(14,if (data < 100)
(15,dest)
(16,data = -1)
(17,dest[data])
(18,dataCopy = data)
(19,dest)
(20,source)
(21,source)
(22,100-1)
(23,data)
(24,data)
(25,printLine(dest)
(26,\\\'\\\\0\\\')
(27,data)
(28,RET)
(29,dest)
(30,\\\'A\\\')
(31,)
(32,100)
(33,1)
(34,data)
(35,100)
(36,1)
(37,source[100-1])
(38,data = dataCopy)
(39,data < 100)
(40,dest)
(41,1)
(42,100-1)
(43,data)
(44,dataCopy)
(45,data)
(46,100)
(47,\\\'\\\\0\\\')
(48,dest[data] = \\\'\\\\0\\\')
(49,dataCopy)
(50,source[100-1] = \\\'\\\\0\\\')
(51,-1)
(52,data = -1)
(53,dest[100] = "")
(54,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^