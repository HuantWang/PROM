-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(42,26,0)
(37,2,0)
(18,23,0)
(8,40,0)
(7,2,0)
(0,23,0)
(25,40,0)
(9,19,0)
(4,37,0)
(6,42,0)
(17,21,0)
(31,26,0)
(23,0,0)
(33,2,0)
(40,13,0)
(12,19,0)
(23,30,0)
(40,25,0)
(48,21,0)
(47,37,0)
(27,43,0)
(36,25,0)
(10,20,0)
(35,12,0)
(19,26,0)
(1,24,0)
(46,10,0)
(39,2,0)
(28,1,0)
(23,42,0)
(13,2,0)
(9,42,0)
(43,19,0)
(34,14,0)
(12,1,0)
(5,21,0)
(12,20,0)
(32,9,0)
(41,14,0)
(16,13,0)
(21,20,0)
(21,19,0)
(11,12,0)
(10,2,0)
(45,43,0)
(29,25,0)
(38,20,0)
(20,2,0)
(19,9,0)
(3,19,0)
(14,37,0)
(21,24,0)
(37,14,0)
(22,20,0)
(44,26,0)
(42,23,0)
(2,26,0)
(27,45,1)
(10,46,1)
(38,19,1)
(13,16,1)
(14,34,1)
(4,47,1)
(46,43,1)
(9,42,1)
(36,8,1)
(8,37,1)
(18,6,1)
(10,20,1)
(5,48,1)
(45,13,1)
(47,20,1)
(40,25,1)
(3,42,1)
(16,40,1)
(21,20,1)
(48,43,1)
(11,21,1)
(1,28,1)
(12,19,1)
(20,22,1)
(23,18,1)
(42,23,1)
(46,1,1)
(28,12,1)
(43,19,1)
(12,20,1)
(17,5,1)
(25,29,1)
(41,4,1)
(22,38,1)
(23,0,1)
(12,35,1)
(37,14,1)
(35,11,1)
(19,9,1)
(21,17,1)
(34,41,1)
(21,19,1)
(32,3,1)
(43,27,1)
(9,32,1)
(15,10,1)
(23,30,1)
(29,36,1)
(1,43,2)
(9,42,2)
(12,20,2)
(21,19,2)
(10,20,2)
(19,9,2)
(5,43,2)
(12,43,2)
(35,43,2)
(23,0,2)
(40,25,2)
(17,43,2)
(43,19,2)
(42,23,2)
(11,43,2)
(12,19,2)
(23,30,2)
(28,43,2)
(21,20,2)
(48,43,2)
(21,43,2)
(37,14,2)
-----------------------------------
(0,int *)
(1,dest[data] = \\\'\\\\0\\\')
(2,)
(3,data)
(4,\\\'A\\\')
(5,source)
(6,dataPtr)
(7,dest)
(8,source)
(9,*dataPtr)
(10,printLine(dest)
(11,dest)
(12,dest[data])
(13,source[100-1] = \\\'\\\\0\\\')
(14,100-1)
(15,RET)
(16,\\\'\\\\0\\\')
(17,data)
(18,dataVoidPtr)
(19,data = (*dataPtr)
(20,dest[100] = "")
(21,memcpy(dest, source, data)
(22,"")
(23,(int *)
(24,)
(25,100-1)
(26,)
(27,100)
(28,\\\'\\\\0\\\')
(29,1)
(30,void * dataVoidPtr)
(31,data)
(32,dataPtr)
(33,if (data < 100)
(34,1)
(35,data)
(36,100)
(37,memset(source, \\\'A\\\', 100-1)
(38,dest)
(39,source)
(40,source[100-1])
(41,100)
(42,* dataPtr = (int *)
(43,data < 100)
(44,dataPtr)
(45,data)
(46,dest)
(47,source)
(48,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^