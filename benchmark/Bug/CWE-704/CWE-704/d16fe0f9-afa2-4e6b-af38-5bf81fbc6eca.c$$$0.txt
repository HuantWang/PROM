-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
42,43
42,44
42,45
45,46
46,47
46,48
47,48
47,49
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,41,43,44,48,50,53,55,59,61,66,68,72,74,75,78,79,84,87,88,89,93,95,99,101
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
57,58
57,59
76,77
76,78
81,82
81,83
85,86
85,87
-----guardedBy-----
36,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_07_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,24,0)
(38,50,0)
(21,12,0)
(26,50,0)
(2,45,0)
(40,2,0)
(13,29,0)
(38,29,0)
(35,2,0)
(11,28,0)
(53,45,0)
(2,13,0)
(10,9,0)
(7,17,0)
(15,53,0)
(41,28,0)
(50,26,0)
(3,38,0)
(43,14,0)
(47,9,0)
(29,22,0)
(24,6,0)
(20,50,0)
(30,8,0)
(50,9,0)
(23,45,0)
(29,38,0)
(37,50,0)
(6,50,0)
(4,26,0)
(46,13,0)
(52,24,0)
(39,12,0)
(5,33,0)
(14,39,0)
(24,44,0)
(0,20,0)
(6,24,0)
(49,8,0)
(39,13,0)
(29,13,0)
(17,7,0)
(22,29,0)
(28,13,0)
(18,42,0)
(33,45,0)
(8,50,0)
(19,9,0)
(14,50,0)
(31,14,0)
(34,39,0)
(36,6,0)
(13,45,0)
(12,45,0)
(16,45,0)
(33,13,0)
(27,20,0)
(7,48,0)
(8,2,0)
(25,17,0)
(39,14,0)
(32,42,0)
(2,8,0)
(53,13,0)
(1,20,1)
(33,5,1)
(3,46,1)
(25,28,1)
(32,50,1)
(46,20,1)
(28,41,1)
(11,13,1)
(5,53,1)
(50,26,1)
(7,17,1)
(1,33,1)
(49,30,1)
(52,42,1)
(29,22,1)
(6,36,1)
(14,43,1)
(40,35,1)
(34,2,1)
(27,42,1)
(18,32,1)
(4,37,1)
(6,50,1)
(41,11,1)
(31,34,1)
(33,13,1)
(20,0,1)
(26,4,1)
(38,3,1)
(35,7,1)
(2,13,1)
(12,21,1)
(30,40,1)
(24,6,1)
(53,13,1)
(8,49,1)
(42,18,1)
(51,52,1)
(21,39,1)
(43,31,1)
(2,8,1)
(20,50,1)
(17,25,1)
(35,28,1)
(15,12,1)
(38,50,1)
(36,51,1)
(53,15,1)
(14,50,1)
(39,13,1)
(28,13,1)
(29,38,1)
(8,50,1)
(39,14,1)
(13,29,1)
(27,24,1)
(0,27,1)
(39,13,2)
(34,20,2)
(28,20,2)
(38,50,2)
(12,20,2)
(49,20,2)
(31,20,2)
(33,13,2)
(11,20,2)
(24,6,2)
(5,20,2)
(43,20,2)
(14,50,2)
(6,42,2)
(13,20,2)
(2,8,2)
(25,28,2)
(13,29,2)
(40,20,2)
(7,17,2)
(50,26,2)
(20,50,2)
(35,20,2)
(29,20,2)
(36,42,2)
(8,50,2)
(8,20,2)
(33,20,2)
(39,14,2)
(3,20,2)
(2,13,2)
(21,20,2)
(7,28,2)
(15,20,2)
(39,20,2)
(14,20,2)
(53,13,2)
(53,20,2)
(30,20,2)
(29,38,2)
(29,22,2)
(52,42,2)
(46,20,2)
(38,20,2)
(6,50,2)
(41,20,2)
(2,20,2)
(28,13,2)
(51,42,2)
(24,42,2)
(17,28,2)
-----------------------------------
(0,100)
(1,RET)
(2,memset(dataBuffer, \\\'A\\\', data-1)
(3,data)
(4,1)
(5,dataBuffer)
(6,&data)
(7,exit(-1)
(8,data-1)
(9,)
(10,if(staticFive==5)
(11,dataBuffer)
(12,dataBuffer[data-1] = \\\'\\\\0\\\')
(13,* dataBuffer = (char *)
(14,data-1)
(15,dataBuffer)
(16,if (dataBuffer == NULL)
(17,-1)
(18,5)
(19,if (data < 100)
(20,data < 100)
(21,\\\'\\\\0\\\')
(22,char *)
(23,dataBuffer)
(24,fscanf(stdin, "%d", &data)
(25,1)
(26,-1)
(27,data)
(28,dataBuffer == NULL)
(29,(char *)
(30,data)
(31,data)
(32,staticFive)
(33,free(dataBuffer)
(34,dataBuffer)
(35,dataBuffer)
(36,data)
(37,data)
(38,malloc(data)
(39,dataBuffer[data-1])
(40,\\\'A\\\')
(41,NULL)
(42,staticFive==5)
(43,1)
(44,)
(45,)
(46,dataBuffer)
(47,data)
(48,)
(49,1)
(50,data = -1)
(51,"%d")
(52,stdin)
(53,printLine(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^