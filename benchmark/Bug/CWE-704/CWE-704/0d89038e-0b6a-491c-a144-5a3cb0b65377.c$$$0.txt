-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_10_bad()
{
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    if(globalTrue)
    {
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
34,36
35,36
39,40
39,41
40,41
42,43
43,44
44,45
44,46
45,46
47,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,29,30,31,36,37,38,41,46,49,53,57,59,61
-----computeFrom-----
26,27
26,28
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_10_bad(){    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(globalTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_10_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_10_bad
{    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    if(globalTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
if(globalTrue)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
globalTrue
globalTrue
{        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(8,2,0)
(4,24,0)
(16,25,0)
(20,9,0)
(2,8,0)
(15,19,0)
(0,22,0)
(11,2,0)
(5,22,0)
(25,19,0)
(12,22,0)
(9,7,0)
(21,0,0)
(25,14,0)
(8,22,0)
(6,22,0)
(7,22,0)
(3,24,0)
(27,7,0)
(2,26,0)
(24,10,0)
(26,2,0)
(2,25,0)
(1,10,0)
(13,0,0)
(19,0,0)
(10,22,0)
(19,25,0)
(18,22,0)
(23,9,0)
(1,24,1)
(17,10,1)
(11,17,1)
(23,20,1)
(2,25,1)
(8,2,1)
(19,15,1)
(9,23,1)
(20,0,1)
(0,21,1)
(2,11,1)
(15,16,1)
(3,7,1)
(11,25,1)
(4,3,1)
(25,19,1)
(27,9,1)
(21,13,1)
(19,0,1)
(2,26,1)
(10,1,1)
(24,4,1)
(16,17,1)
(28,8,1)
(7,27,1)
(2,26,2)
(2,25,2)
(8,2,2)
(25,17,2)
(19,0,2)
(25,19,2)
(15,17,2)
(16,17,2)
(19,17,2)
-----------------------------------
(0,dataBadBuffer = 100)
(1,0)
(2,(twoIntsStruct *)
(3,dataGoodBuffer)
(4,intTwo)
(5,dataBadBuffer)
(6,data)
(7,dataGoodBuffer.intOne = 0)
(8,printStructLine((twoIntsStruct *)
(9,dataGoodBuffer.intOne)
(10,dataGoodBuffer.intTwo = 0)
(11,data)
(12,if(globalTrue)
(13,dataBadBuffer)
(14,)
(15,dataBadBuffer)
(16,data)
(17,globalTrue)
(18,dataGoodBuffer)
(19,&dataBadBuffer)
(20,dataGoodBuffer)
(21,100)
(22,)
(23,intOne)
(24,dataGoodBuffer.intTwo)
(25,data = &dataBadBuffer)
(26,twoIntsStruct *)
(27,0)
(28,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^