-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
34,37
37,38
38,39
38,40
39,40
39,41
41,42
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
77,78
77,79
78,79
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,15,17,22,24,28,29,33,35,36,40,42,45,47,51,53,58,60,64,66,67,70,71,76,79,80,81,85,87,91,93
-----computeFrom-----
12,13
12,14
20,21
20,22
26,27
26,28
49,50
49,51
68,69
68,70
73,74
73,75
77,78
77,79
-----guardedBy-----
28,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_02_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FLAW: Use a negative number */        data = -1;    }
1
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,11,0)
(1,19,0)
(15,1,0)
(38,32,0)
(11,46,0)
(0,40,0)
(42,43,0)
(23,41,0)
(38,47,0)
(4,43,0)
(0,19,0)
(7,43,0)
(24,40,0)
(16,51,0)
(52,40,0)
(24,19,0)
(2,52,0)
(38,11,0)
(25,46,0)
(36,38,0)
(51,47,0)
(40,32,0)
(32,40,0)
(40,19,0)
(49,2,0)
(5,7,0)
(32,22,0)
(51,11,0)
(33,17,0)
(2,47,0)
(41,23,0)
(45,50,0)
(2,11,0)
(41,53,0)
(31,24,0)
(34,40,0)
(8,0,0)
(32,38,0)
(52,2,0)
(14,19,0)
(43,47,0)
(22,32,0)
(7,40,0)
(37,23,0)
(18,52,0)
(28,51,0)
(13,50,0)
(3,19,0)
(47,50,0)
(20,2,0)
(11,44,0)
(46,11,0)
(43,11,0)
(39,17,0)
(52,1,0)
(17,40,0)
(7,19,0)
(27,47,0)
(43,7,0)
(12,7,0)
(6,50,0)
(29,47,0)
(2,47,1)
(29,27,1)
(5,17,1)
(43,11,1)
(2,49,1)
(36,34,1)
(17,40,1)
(52,40,1)
(16,28,1)
(51,16,1)
(31,1,1)
(48,51,1)
(38,47,1)
(51,11,1)
(7,43,1)
(5,41,1)
(38,36,1)
(7,40,1)
(40,32,1)
(4,12,1)
(2,11,1)
(43,47,1)
(46,25,1)
(23,37,1)
(32,22,1)
(30,47,1)
(17,39,1)
(39,33,1)
(8,24,1)
(37,17,1)
(25,9,1)
(34,51,1)
(42,4,1)
(32,38,1)
(0,8,1)
(11,46,1)
(1,15,1)
(15,52,1)
(18,7,1)
(12,5,1)
(33,40,1)
(24,40,1)
(52,2,1)
(28,30,1)
(43,42,1)
(24,31,1)
(41,23,1)
(20,18,1)
(51,47,1)
(9,30,1)
(48,0,1)
(49,20,1)
(38,11,1)
(0,40,1)
(47,29,1)
(28,11,1)
(43,47,2)
(31,51,2)
(33,51,2)
(11,30,2)
(52,40,2)
(40,51,2)
(51,47,2)
(40,32,2)
(52,51,2)
(34,51,2)
(43,11,2)
(38,11,2)
(32,38,2)
(24,40,2)
(18,51,2)
(32,51,2)
(37,17,2)
(4,51,2)
(20,51,2)
(1,51,2)
(17,51,2)
(52,2,2)
(11,46,2)
(2,47,2)
(38,47,2)
(0,40,2)
(0,51,2)
(7,40,2)
(51,11,2)
(5,51,2)
(36,51,2)
(24,51,2)
(8,51,2)
(38,51,2)
(23,17,2)
(2,51,2)
(9,30,2)
(32,22,2)
(7,43,2)
(15,51,2)
(43,51,2)
(2,11,2)
(7,51,2)
(17,40,2)
(49,51,2)
(12,51,2)
(46,30,2)
(42,51,2)
(41,17,2)
(41,23,2)
(39,51,2)
(25,30,2)
-----------------------------------
(0,free(dataBuffer)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,data-1)
(3,if (dataBuffer == NULL)
(4,data)
(5,dataBuffer)
(6,if (data < 100)
(7,memset(dataBuffer, \'A\', data-1)
(8,dataBuffer)
(9,data)
(10,dataBuffer[data-1] = '\\\\0')
(11,data = -1)
(12,'A')
(13,if(1)
(14,dataBuffer)
(15,'\\\\0')
(16,100)
(17,dataBuffer == NULL)
(18,dataBuffer)
(19,)
(20,data)
(21,memset(dataBuffer, 'A', data-1)
(22,char *)
(23,-1)
(24,printLine(dataBuffer)
(25,1)
(26,\'A\')
(27,data)
(28,data)
(29,0)
(30,1)
(31,dataBuffer)
(32,(char *)
(33,dataBuffer)
(34,dataBuffer)
(35,\'\\\\0\')
(36,data)
(37,1)
(38,malloc(data)
(39,NULL)
(40,* dataBuffer = (char *)
(41,exit(-1)
(42,1)
(43,data-1)
(44,)
(45,data)
(46,-1)
(47,data = 0)
(48,RET)
(49,1)
(50,)
(51,data < 100)
(52,dataBuffer[data-1])
(53,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^