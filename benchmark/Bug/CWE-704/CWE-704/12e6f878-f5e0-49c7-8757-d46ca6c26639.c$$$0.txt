-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_18_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);
source
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(26,32,0)
(4,1,0)
(32,34,0)
(31,3,0)
(3,9,0)
(35,7,0)
(21,31,0)
(3,31,0)
(41,9,0)
(38,30,0)
(6,41,0)
(13,8,0)
(23,1,0)
(1,5,0)
(47,30,0)
(2,8,0)
(19,25,0)
(41,5,0)
(42,3,0)
(31,25,0)
(14,8,0)
(30,9,0)
(10,9,0)
(23,25,0)
(4,25,0)
(5,24,0)
(34,32,0)
(7,1,0)
(33,25,0)
(9,8,0)
(46,7,0)
(34,28,0)
(5,1,0)
(22,30,0)
(44,8,0)
(43,11,0)
(18,9,0)
(31,1,0)
(47,1,0)
(47,45,0)
(1,25,0)
(39,47,0)
(18,14,0)
(36,23,0)
(17,3,0)
(49,4,0)
(48,45,0)
(24,5,0)
(15,8,0)
(45,25,0)
(14,18,0)
(11,9,0)
(20,11,0)
(30,47,0)
(12,9,0)
(37,18,0)
(29,14,0)
(5,41,0)
(16,31,0)
(40,1,0)
(27,14,0)
(31,1,1)
(3,42,1)
(27,13,1)
(43,20,1)
(5,24,1)
(3,9,1)
(13,9,1)
(14,18,1)
(46,35,1)
(30,22,1)
(20,14,1)
(34,32,1)
(0,4,1)
(41,9,1)
(16,21,1)
(40,11,1)
(37,29,1)
(29,27,1)
(26,7,1)
(7,1,1)
(12,10,1)
(39,31,1)
(45,48,1)
(18,9,1)
(41,6,1)
(47,1,1)
(4,49,1)
(47,30,1)
(42,17,1)
(22,38,1)
(23,36,1)
(7,46,1)
(11,9,1)
(6,40,1)
(48,47,1)
(4,1,1)
(17,16,1)
(9,12,1)
(32,26,1)
(36,45,1)
(30,9,1)
(38,39,1)
(21,7,1)
(21,34,1)
(23,1,1)
(1,5,1)
(0,11,1)
(5,41,1)
(49,23,1)
(31,3,1)
(11,43,1)
(35,1,1)
(18,37,1)
(3,11,2)
(41,11,2)
(42,11,2)
(47,1,2)
(22,11,2)
(16,11,2)
(3,9,2)
(18,9,2)
(14,18,2)
(34,32,2)
(1,5,2)
(5,24,2)
(21,11,2)
(41,9,2)
(46,11,2)
(31,11,2)
(5,11,2)
(4,1,2)
(7,11,2)
(49,11,2)
(26,7,2)
(11,9,2)
(17,11,2)
(45,11,2)
(31,3,2)
(23,11,2)
(34,7,2)
(31,1,2)
(36,11,2)
(40,11,2)
(5,41,2)
(47,11,2)
(39,11,2)
(48,11,2)
(38,11,2)
(32,7,2)
(23,1,2)
(6,11,2)
(1,11,2)
(7,1,2)
(30,9,2)
(35,11,2)
(47,30,2)
(30,11,2)
(4,11,2)
-----------------------------------
(0,RET)
(1,* dataBuffer = (char *)
(2,data)
(3,data-1)
(4,free(dataBuffer)
(5,(char *)
(6,data)
(7,dataBuffer == NULL)
(8,)
(9,data = 0)
(10,data)
(11,data < 100)
(12,0)
(13,goto source;)
(14,fscanf (stdin, "%hd", &data)
(15,source:)
(16,\\\'A\\\')
(17,data)
(18,&data)
(19,if (dataBuffer == NULL)
(20,data)
(21,dataBuffer)
(22,1)
(23,printLine(dataBuffer)
(24,char *)
(25,)
(26,1)
(27,stdin)
(28,)
(29,"%hd")
(30,data-1)
(31,memset(dataBuffer, \\\'A\\\', data-1)
(32,-1)
(33,dataBuffer)
(34,exit(-1)
(35,dataBuffer)
(36,dataBuffer)
(37,data)
(38,data)
(39,dataBuffer)
(40,dataBuffer)
(41,malloc(data)
(42,1)
(43,100)
(44,if (data < 100)
(45,dataBuffer[data-1] = \\\'\\\\0\\\')
(46,NULL)
(47,dataBuffer[data-1])
(48,\\\'\\\\0\\\')
(49,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^