-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
40,43
42,43
43,44
45,46
47,48
47,49
47,50
48,49
48,50
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
81,84
81,85
81,86
81,87
82,83
83,84
83,85
85,86
85,87
85,88
88,89
89,90
89,91
90,91
90,92
92,93
94,95
94,96
95,96
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
113,116
113,117
114,115
116,117
119,120
119,121
120,121
123,124
124,125
124,126
125,126
125,127
126,127
128,129
128,130
129,130
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,44,46,51,53,55,57,59,64,67,69,74,75,79,80,84,86,87,91,93,96,98,102,104,109,111,115,117,118,121,122,127,130,131,132,136,138,142,144
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
48,49
48,50
62,63
62,64
77,78
77,79
100,101
100,102
119,120
119,121
124,125
124,126
128,129
128,130
-----guardedBy-----
53,69
79,130
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,40,0)
(0,73,0)
(1,38,0)
(29,64,0)
(45,37,0)
(36,19,0)
(50,64,0)
(37,38,0)
(39,64,0)
(46,13,0)
(12,46,0)
(44,2,0)
(25,2,0)
(47,67,0)
(14,40,0)
(63,13,0)
(4,49,0)
(17,44,0)
(27,30,0)
(13,46,0)
(7,67,0)
(70,6,0)
(51,55,0)
(71,22,0)
(18,32,0)
(6,40,0)
(33,42,0)
(42,51,0)
(73,34,0)
(58,6,0)
(74,32,0)
(23,39,0)
(30,68,0)
(7,6,0)
(54,38,0)
(42,6,0)
(24,54,0)
(26,2,0)
(48,51,0)
(61,2,0)
(22,2,0)
(41,19,0)
(61,44,0)
(64,69,0)
(67,47,0)
(34,25,0)
(5,54,0)
(73,51,0)
(31,39,0)
(22,44,0)
(6,70,0)
(3,4,0)
(49,4,0)
(67,44,0)
(13,2,0)
(9,39,0)
(34,73,0)
(65,36,0)
(52,42,0)
(67,7,0)
(62,2,0)
(57,73,0)
(72,61,0)
(46,51,0)
(34,44,0)
(15,46,0)
(43,40,0)
(11,34,0)
(35,7,0)
(16,70,0)
(32,44,0)
(73,6,0)
(66,19,0)
(13,44,0)
(60,19,0)
(51,9,0)
(46,6,0)
(20,40,0)
(59,13,0)
(7,51,0)
(44,67,0)
(19,39,0)
(19,36,0)
(9,51,0)
(21,25,0)
(49,53,0)
(56,9,0)
(8,38,0)
(7,35,1)
(42,52,1)
(32,18,1)
(61,44,1)
(31,54,1)
(18,74,1)
(1,6,1)
(25,21,1)
(5,38,1)
(67,7,1)
(39,23,1)
(59,32,1)
(45,30,1)
(60,66,1)
(45,51,1)
(63,59,1)
(13,44,1)
(11,13,1)
(41,39,1)
(30,27,1)
(36,65,1)
(59,49,1)
(44,67,1)
(12,63,1)
(70,16,1)
(74,44,1)
(46,6,1)
(34,44,1)
(24,5,1)
(34,73,1)
(33,54,1)
(7,51,1)
(57,0,1)
(22,44,1)
(37,45,1)
(6,70,1)
(66,41,1)
(52,33,1)
(54,24,1)
(72,25,1)
(73,6,1)
(21,34,1)
(22,71,1)
(48,36,1)
(54,38,1)
(46,51,1)
(28,22,1)
(42,6,1)
(73,57,1)
(0,11,1)
(51,9,1)
(38,8,1)
(16,58,1)
(71,61,1)
(3,32,1)
(32,44,1)
(61,72,1)
(49,4,1)
(37,38,1)
(35,17,1)
(67,47,1)
(73,51,1)
(23,31,1)
(28,42,1)
(13,46,1)
(56,48,1)
(17,42,1)
(7,6,1)
(42,51,1)
(65,19,1)
(36,19,1)
(8,1,1)
(4,3,1)
(9,39,1)
(5,37,1)
(19,39,1)
(27,36,1)
(15,12,1)
(46,15,1)
(19,60,1)
(9,56,1)
(15,42,2)
(27,36,2)
(34,44,2)
(67,7,2)
(7,6,2)
(5,54,2)
(32,42,2)
(48,36,2)
(37,38,2)
(35,42,2)
(9,36,2)
(60,54,2)
(37,54,2)
(41,54,2)
(18,42,2)
(36,54,2)
(31,54,2)
(63,42,2)
(25,42,2)
(30,36,2)
(51,36,2)
(73,51,2)
(46,51,2)
(36,19,2)
(7,51,2)
(19,54,2)
(46,42,2)
(74,42,2)
(19,39,2)
(13,44,2)
(65,54,2)
(3,32,2)
(72,42,2)
(12,42,2)
(34,73,2)
(67,42,2)
(6,70,2)
(13,42,2)
(54,54,2)
(44,67,2)
(34,42,2)
(59,42,2)
(32,44,2)
(67,47,2)
(49,4,2)
(49,32,2)
(61,44,2)
(54,38,2)
(66,54,2)
(42,6,2)
(11,42,2)
(39,54,2)
(44,42,2)
(57,42,2)
(24,54,2)
(51,9,2)
(22,44,2)
(73,42,2)
(17,42,2)
(23,54,2)
(21,42,2)
(42,51,2)
(46,6,2)
(71,42,2)
(9,39,2)
(4,32,2)
(56,36,2)
(61,42,2)
(45,54,2)
(0,42,2)
(7,42,2)
(13,46,2)
(22,42,2)
(73,6,2)
-----------------------------------
(0,data)
(1,i)
(2,)
(3,1)
(4,-1)
(5,i)
(6,data = -1)
(7,malloc(data)
(8,0)
(9,atoi(inputBuffer)
(10,i)
(11,dataBuffer)
(12,data)
(13,memset(dataBuffer, \\\'A\\\', data-1)
(14,data)
(15,1)
(16,1)
(17,dataBuffer)
(18,NULL)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,if (data < 100)
(21,\\\'\\\\0\\\')
(22,free(dataBuffer)
(23,"")
(24,1)
(25,dataBuffer[data-1] = \\\'\\\\0\\\')
(26,if (dataBuffer == NULL)
(27,"fgets()
(28,RET)
(29,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,printLine("fgets()
(31,inputBuffer)
(32,dataBuffer == NULL)
(33,data)
(34,dataBuffer[data-1])
(35,data)
(36,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,i++)
(38,i = 0)
(39,inputBuffer[CHAR_ARRAY_SIZE] = "")
(40,)
(41,inputBuffer)
(42,data < 100)
(43,for(i = 0; i < 1; i++)
(44,* dataBuffer = (char *)
(45,i)
(46,data-1)
(47,char *)
(48,data)
(49,exit(-1)
(50,inputBuffer)
(51,data = atoi(inputBuffer)
(52,100)
(53,)
(54,i < 1)
(55,)
(56,inputBuffer)
(57,1)
(58,data)
(59,dataBuffer)
(60,stdin)
(61,printLine(dataBuffer)
(62,dataBuffer)
(63,\\\'A\\\')
(64,)
(65,NULL)
(66,CHAR_ARRAY_SIZE)
(67,(char *)
(68,)
(69,)
(70,-1)
(71,dataBuffer)
(72,dataBuffer)
(73,data-1)
(74,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^