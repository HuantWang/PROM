-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */
        short shortData = (short)data;
        printShortLine(shortData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
51,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,46,48,52,53,55,59,61
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_rand_to_short_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
void
CWE197_Numeric_Truncation_Error__int_rand_to_short_17_bad()
CWE197_Numeric_Truncation_Error__int_rand_to_short_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */        short shortData = (short)data;        printShortLine(shortData);    }
short shortData = (short)data;
short shortData = (short)data;
short
shortData = (short)data
shortData
= (short)data
(short)data
short
short

data
data
printShortLine(shortData);
printShortLine(shortData)
printShortLine
printShortLine
shortData
shortData
-----joern-----
(10,6,0)
(19,7,0)
(25,15,0)
(5,7,0)
(15,5,0)
(2,21,0)
(14,25,0)
(26,24,0)
(6,8,0)
(25,6,0)
(20,3,0)
(12,7,0)
(3,21,0)
(0,16,0)
(15,25,0)
(16,15,0)
(29,3,0)
(25,14,0)
(1,15,0)
(8,6,0)
(25,19,0)
(6,13,0)
(18,21,0)
(23,5,0)
(4,19,0)
(19,17,0)
(17,19,0)
(9,25,0)
(11,7,0)
(27,17,0)
(16,5,0)
(24,21,0)
(22,7,0)
(25,9,1)
(19,17,1)
(28,16,1)
(26,6,1)
(21,2,1)
(16,0,1)
(6,8,1)
(18,19,1)
(20,21,1)
(2,18,1)
(17,27,1)
(0,15,1)
(20,24,1)
(29,20,1)
(24,26,1)
(10,3,1)
(8,10,1)
(25,19,1)
(3,21,1)
(25,6,1)
(1,3,1)
(3,29,1)
(27,4,1)
(9,1,1)
(15,25,1)
(25,14,1)
(16,15,1)
(24,21,1)
(24,3,2)
(24,21,2)
(29,3,2)
(6,8,2)
(16,15,2)
(3,21,2)
(3,3,2)
(8,3,2)
(25,14,2)
(15,25,2)
(25,6,2)
(6,3,2)
(20,3,2)
(10,3,2)
(19,17,2)
(25,19,2)
(26,3,2)
-----------------------------------
(0,shortData)
(1,shortData)
(2,0)
(3,i < 1)
(4,data)
(5,)
(6,data = RAND32()
(7,)
(8,RAND32()
(9,data)
(10,data)
(11,i)
(12,for(i = 0; i < 1; i++)
(13,)
(14,short)
(15,shortData = (short)
(16,printShortLine(shortData)
(17,-1)
(18,i)
(19,data = -1)
(20,i)
(21,i = 0)
(22,data)
(23,shortData)
(24,i++)
(25,(short)
(26,i)
(27,1)
(28,RET)
(29,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^