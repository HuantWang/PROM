-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_16_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
36,42
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
74,75
74,76
75,76
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,30,34,35,39,41,42,46,48,51,53,57,59,64,66,70,72,73,76,77,82,85,86,87,91,93,97,99
-----computeFrom-----
12,13
12,14
32,33
32,34
55,56
55,57
74,75
74,76
79,80
79,81
83,84
83,85
-----guardedBy-----
34,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_16_bad(){    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_16_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_16_bad
{    int data;    /* Initialize data */    data = -1;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(29,51,0)
(19,39,0)
(46,33,0)
(31,29,0)
(28,39,0)
(34,7,0)
(13,5,0)
(19,5,0)
(11,2,0)
(49,5,0)
(51,26,0)
(2,11,0)
(33,29,0)
(51,42,0)
(2,19,0)
(46,19,0)
(23,1,0)
(30,7,0)
(38,33,0)
(34,29,0)
(33,46,0)
(11,25,0)
(14,29,0)
(47,11,0)
(10,7,0)
(40,19,0)
(8,31,0)
(1,19,0)
(36,7,0)
(15,17,0)
(41,15,0)
(16,5,0)
(37,29,0)
(42,19,0)
(48,31,0)
(45,19,0)
(6,34,0)
(39,19,0)
(37,7,0)
(32,42,0)
(0,46,0)
(45,37,0)
(9,37,0)
(51,29,0)
(27,46,0)
(42,51,0)
(26,51,0)
(30,29,0)
(21,7,0)
(15,41,0)
(29,7,0)
(24,11,0)
(50,2,0)
(4,41,0)
(3,37,0)
(12,21,0)
(43,45,0)
(37,45,0)
(52,30,0)
(33,21,0)
(35,25,0)
(44,45,0)
(22,1,0)
(45,19,1)
(23,35,1)
(30,52,1)
(34,29,1)
(18,30,1)
(47,24,1)
(42,19,1)
(43,3,1)
(51,26,1)
(20,19,1)
(37,29,1)
(21,12,1)
(37,45,1)
(31,48,1)
(45,44,1)
(14,1,1)
(31,29,1)
(46,0,1)
(46,19,1)
(2,50,1)
(38,37,1)
(52,34,1)
(33,29,1)
(39,28,1)
(35,11,1)
(9,31,1)
(4,31,1)
(15,41,1)
(1,19,1)
(29,51,1)
(8,29,1)
(50,47,1)
(6,21,1)
(33,46,1)
(0,27,1)
(1,22,1)
(3,9,1)
(32,14,1)
(44,43,1)
(48,8,1)
(9,15,1)
(22,23,1)
(11,2,1)
(51,42,1)
(18,1,1)
(23,20,1)
(19,39,1)
(42,32,1)
(34,6,1)
(2,19,1)
(24,20,1)
(12,33,1)
(30,29,1)
(28,40,1)
(27,38,1)
(41,4,1)
(1,19,2)
(48,1,2)
(37,45,2)
(45,19,2)
(32,1,2)
(30,1,2)
(0,1,2)
(15,41,2)
(43,1,2)
(35,20,2)
(51,1,2)
(42,1,2)
(31,1,2)
(4,31,2)
(9,1,2)
(34,1,2)
(42,19,2)
(34,29,2)
(29,1,2)
(45,1,2)
(38,1,2)
(30,29,2)
(8,1,2)
(19,39,2)
(24,20,2)
(50,20,2)
(33,1,2)
(37,29,2)
(46,1,2)
(46,19,2)
(41,31,2)
(51,42,2)
(2,19,2)
(11,20,2)
(44,1,2)
(51,26,2)
(31,29,2)
(37,1,2)
(27,1,2)
(47,20,2)
(6,1,2)
(33,29,2)
(52,1,2)
(29,51,2)
(14,1,2)
(2,20,2)
(12,1,2)
(21,1,2)
(15,31,2)
(3,1,2)
(11,2,2)
(33,46,2)
-----------------------------------
(0,1)
(1,data < 100)
(2,&data)
(3,\\\'A\\\')
(4,1)
(5,)
(6,dataBuffer)
(7,)
(8,dataBuffer)
(9,dataBuffer)
(10,dataBuffer)
(11,fscanf(stdin, "%d", &data)
(12,\\\'\\\\0\\\')
(13,while(1)
(14,dataBuffer)
(15,exit(-1)
(16,data)
(17,)
(18,RET)
(19,data = -1)
(20,1)
(21,dataBuffer[data-1] = \\\'\\\\0\\\')
(22,100)
(23,data)
(24,stdin)
(25,)
(26,char *)
(27,data)
(28,1)
(29,* dataBuffer = (char *)
(30,free(dataBuffer)
(31,dataBuffer == NULL)
(32,data)
(33,dataBuffer[data-1])
(34,printLine(dataBuffer)
(35,break;)
(36,if (dataBuffer == NULL)
(37,memset(dataBuffer, \\\'A\\\', data-1)
(38,dataBuffer)
(39,-1)
(40,data)
(41,-1)
(42,malloc(data)
(43,data)
(44,1)
(45,data-1)
(46,data-1)
(47,"%d")
(48,NULL)
(49,if (data < 100)
(50,data)
(51,(char *)
(52,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^