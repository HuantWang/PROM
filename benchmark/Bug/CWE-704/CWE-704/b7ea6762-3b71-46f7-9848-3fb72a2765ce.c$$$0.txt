-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
36,39
36,40
36,41
36,42
36,43
36,44
37,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
74,76
75,76
75,77
75,78
75,79
75,80
75,81
75,82
75,83
75,84
75,85
75,86
75,87
75,88
75,89
76,77
77,78
77,79
78,79
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
102,103
105,106
106,107
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
140,142
140,143
140,144
141,142
143,144
145,146
145,147
146,147
146,148
147,148
149,150
151,152
152,153
154,155
155,156
156,157
158,159
160,161
162,163
162,164
163,164
163,165
164,165
164,166
164,167
165,166
167,168
169,170
171,172
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
180,181
182,183
184,185
186,187
188,189
188,190
189,190
189,191
190,191
192,193
194,195
196,197
197,198
197,199
198,199
200,201
200,202
200,203
200,204
200,205
201,202
203,204
205,206
207,208
207,209
208,209
212,213
212,214
213,214
213,215
214,215
214,216
215,216
217,218
219,220
219,221
220,221
223,224
225,226
226,227
226,228
227,228
227,229
228,229
230,231
233,234
234,235
234,236
235,236
237,238
237,239
238,239
240,241
243,244
243,245
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
256,257
256,258
257,258
257,259
258,259
260,261
262,263
263,264
264,265
264,266
265,266
267,268
269,270
269,271
270,271
270,272
271,272
274,275
274,276
274,277
274,278
274,279
274,280
275,276
276,277
276,278
278,279
278,280
278,281
281,282
282,283
282,284
283,284
283,285
285,286
287,288
287,289
288,289
290,291
292,293
292,294
293,294
293,295
294,295
296,297
298,299
299,300
300,301
300,302
301,302
303,304
305,306
306,307
306,308
306,309
306,310
307,308
309,310
312,313
312,314
313,314
316,317
317,318
317,319
318,319
318,320
319,320
321,322
321,323
322,323
326,327
327,328
327,329
328,329
330,331
332,333
333,334
333,335
334,335
336,337
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,41,45,47,51,53,56,60,62,65,68,70,73,79,82,84,86,88,92,94,96,100,103,104,108,113,114,116,122,123,124,126,131,132,135,137,142,144,148,150,153,157,159,161,166,168,170,172,174,178,181,183,185,187,191,193,195,199,202,204,206,209,210,211,216,218,221,222,224,229,231,232,236,239,241,242,246,248,253,255,259,261,266,268,272,273,277,279,280,284,286,289,291,295,297,302,304,308,310,311,314,315,320,323,324,325,329,331,335,337
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
77,78
77,79
90,91
90,92
110,111
110,112
118,119
118,120
128,129
128,130
139,140
139,141
163,164
163,165
176,177
176,178
189,190
189,191
197,198
197,199
207,208
207,209
213,214
213,215
214,215
214,216
219,220
219,221
226,227
226,228
234,235
234,236
244,245
244,246
257,258
257,259
270,271
270,272
293,294
293,295
312,313
312,314
317,318
317,319
321,322
321,323
-----guardedBy-----
246,255
259,268
272,323
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(67,30,0)
(163,162,0)
(187,182,0)
(163,148,0)
(182,187,0)
(160,91,0)
(88,52,0)
(106,97,0)
(150,185,0)
(197,13,0)
(123,144,0)
(130,2,0)
(70,156,0)
(27,167,0)
(178,1,0)
(170,18,0)
(162,163,0)
(14,120,0)
(203,202,0)
(118,100,0)
(93,64,0)
(203,176,0)
(188,1,0)
(164,16,0)
(12,38,0)
(182,156,0)
(159,6,0)
(53,131,0)
(90,145,0)
(17,46,0)
(133,154,0)
(16,52,0)
(191,6,0)
(58,206,0)
(76,170,0)
(66,176,0)
(129,160,0)
(159,97,0)
(45,6,0)
(1,57,0)
(46,16,0)
(184,198,0)
(180,158,0)
(2,174,0)
(71,0,0)
(167,13,0)
(110,131,0)
(163,204,0)
(78,81,0)
(50,6,0)
(104,169,0)
(131,110,0)
(68,148,0)
(113,1,0)
(29,16,0)
(48,138,0)
(141,0,0)
(143,7,0)
(66,135,0)
(98,143,0)
(111,0,0)
(207,67,0)
(92,4,0)
(13,167,0)
(96,158,0)
(146,1,0)
(90,6,0)
(67,154,0)
(22,155,0)
(114,203,0)
(134,203,0)
(143,102,0)
(18,193,0)
(196,91,0)
(176,198,0)
(69,160,0)
(28,202,0)
(140,141,0)
(24,1,0)
(81,2,0)
(51,102,0)
(4,116,0)
(52,88,0)
(60,170,0)
(186,182,0)
(43,2,0)
(86,167,0)
(121,46,0)
(52,6,0)
(79,174,0)
(201,154,0)
(59,49,0)
(174,2,0)
(173,110,0)
(181,144,0)
(183,179,0)
(112,162,0)
(169,154,0)
(87,8,0)
(67,18,0)
(34,156,0)
(25,90,0)
(11,145,0)
(136,63,0)
(83,91,0)
(31,91,0)
(80,147,0)
(143,98,0)
(102,64,0)
(9,25,0)
(193,18,0)
(171,187,0)
(198,18,0)
(0,141,0)
(159,138,0)
(61,148,0)
(208,81,0)
(66,202,0)
(204,163,0)
(154,1,0)
(195,95,0)
(74,6,0)
(192,169,0)
(64,102,0)
(81,50,0)
(152,193,0)
(15,1,0)
(100,182,0)
(26,6,0)
(96,43,0)
(183,139,0)
(3,198,0)
(155,1,0)
(23,52,0)
(117,6,0)
(38,52,0)
(200,98,0)
(158,2,0)
(75,176,0)
(151,103,0)
(35,38,0)
(116,6,0)
(13,179,0)
(54,43,0)
(122,33,0)
(174,176,0)
(94,66,0)
(119,25,0)
(147,179,0)
(46,139,0)
(0,18,0)
(107,156,0)
(85,1,0)
(100,52,0)
(102,143,0)
(177,6,0)
(166,155,0)
(39,50,0)
(7,143,0)
(132,31,0)
(100,147,0)
(36,43,0)
(158,96,0)
(62,33,0)
(16,46,0)
(82,19,0)
(161,204,0)
(41,198,0)
(21,139,0)
(43,96,0)
(33,122,0)
(95,179,0)
(16,182,0)
(169,18,0)
(38,182,0)
(167,52,0)
(126,18,0)
(84,117,0)
(179,139,0)
(153,102,0)
(209,179,0)
(105,183,0)
(77,176,0)
(65,202,0)
(44,139,0)
(99,193,0)
(10,139,0)
(109,189,0)
(13,10,0)
(131,206,0)
(8,174,0)
(174,8,0)
(179,147,0)
(95,139,0)
(102,18,0)
(32,1,0)
(145,90,0)
(144,179,0)
(137,1,0)
(89,4,0)
(55,1,0)
(5,6,0)
(115,8,0)
(167,182,0)
(20,156,0)
(147,100,0)
(18,6,0)
(190,193,0)
(40,51,0)
(206,6,0)
(122,124,0)
(72,159,0)
(168,110,0)
(202,1,0)
(128,174,0)
(138,159,0)
(108,75,0)
(97,159,0)
(73,174,0)
(165,10,0)
(148,163,0)
(198,176,0)
(127,117,0)
(125,88,0)
(46,179,0)
(194,116,0)
(2,6,0)
(47,75,0)
(172,158,0)
(176,6,0)
(205,1,0)
(102,51,0)
(147,80,0)
(16,52,1)
(41,184,1)
(158,172,1)
(194,4,1)
(148,68,1)
(183,105,1)
(193,99,1)
(132,14,1)
(38,12,1)
(125,23,1)
(138,48,1)
(46,16,1)
(206,58,1)
(16,182,1)
(35,160,1)
(13,179,1)
(179,147,1)
(93,102,1)
(46,179,1)
(203,134,1)
(31,91,1)
(81,78,1)
(192,142,1)
(22,166,1)
(36,54,1)
(174,73,1)
(176,198,1)
(167,86,1)
(203,202,1)
(4,89,1)
(141,0,1)
(198,3,1)
(75,176,1)
(173,116,1)
(97,106,1)
(182,187,1)
(92,159,1)
(192,151,1)
(61,202,1)
(47,108,1)
(208,96,1)
(192,82,1)
(160,129,1)
(168,173,1)
(209,38,1)
(159,97,1)
(48,170,1)
(51,40,1)
(40,143,1)
(25,119,1)
(127,84,1)
(170,18,1)
(151,204,1)
(204,163,1)
(28,154,1)
(169,104,1)
(10,165,1)
(114,169,1)
(169,154,1)
(192,136,1)
(121,144,1)
(159,138,1)
(105,10,1)
(190,152,1)
(196,182,1)
(86,27,1)
(69,91,1)
(100,182,1)
(172,180,1)
(131,53,1)
(13,167,1)
(143,98,1)
(166,160,1)
(133,155,1)
(195,183,1)
(64,102,1)
(82,141,1)
(0,71,1)
(67,207,1)
(187,171,1)
(102,18,1)
(53,110,1)
(192,59,1)
(8,87,1)
(144,181,1)
(3,41,1)
(79,130,1)
(147,100,1)
(160,91,1)
(71,111,1)
(117,127,1)
(126,117,1)
(75,47,1)
(130,75,1)
(197,46,1)
(149,66,1)
(180,43,1)
(144,179,1)
(141,140,1)
(164,29,1)
(78,208,1)
(38,52,1)
(100,118,1)
(131,110,1)
(83,196,1)
(73,8,1)
(11,25,1)
(43,36,1)
(108,176,1)
(170,76,1)
(58,131,1)
(207,169,1)
(14,149,1)
(50,39,1)
(59,170,1)
(95,179,1)
(102,51,1)
(69,31,1)
(109,96,1)
(140,0,1)
(192,109,1)
(29,17,1)
(31,132,1)
(37,95,1)
(95,195,1)
(204,161,1)
(77,141,1)
(123,179,1)
(60,18,1)
(39,81,1)
(184,77,1)
(132,149,1)
(96,158,1)
(167,52,1)
(121,122,1)
(104,192,1)
(54,2,1)
(12,35,1)
(163,162,1)
(67,18,1)
(163,148,1)
(174,176,1)
(9,206,1)
(203,176,1)
(65,28,1)
(202,65,1)
(62,144,1)
(2,174,1)
(198,18,1)
(98,200,1)
(118,209,1)
(37,38,1)
(84,204,1)
(33,62,1)
(91,83,1)
(181,123,1)
(18,193,1)
(134,114,1)
(89,92,1)
(192,150,1)
(66,202,1)
(100,52,1)
(66,94,1)
(110,168,1)
(122,33,1)
(152,126,1)
(94,203,1)
(200,153,1)
(149,203,1)
(171,186,1)
(76,60,1)
(81,2,1)
(158,2,1)
(106,72,1)
(162,112,1)
(43,2,1)
(165,13,1)
(174,8,1)
(38,182,1)
(183,179,1)
(155,22,1)
(114,67,1)
(116,194,1)
(66,176,1)
(17,121,1)
(87,115,1)
(102,143,1)
(154,201,1)
(153,90,1)
(27,197,1)
(16,164,1)
(128,79,1)
(90,145,1)
(67,154,1)
(112,148,1)
(136,75,1)
(147,80,1)
(72,138,1)
(115,128,1)
(143,7,1)
(0,18,1)
(150,64,1)
(169,18,1)
(142,52,1)
(129,69,1)
(23,50,1)
(161,163,1)
(61,142,1)
(167,182,1)
(68,61,1)
(88,125,1)
(99,190,1)
(201,133,1)
(145,11,1)
(119,9,1)
(96,43,1)
(52,88,1)
(111,64,1)
(64,93,1)
(10,38,2)
(133,160,2)
(201,160,2)
(9,170,2)
(148,160,2)
(143,170,2)
(200,170,2)
(143,7,2)
(118,38,2)
(66,203,2)
(167,52,2)
(203,176,2)
(16,182,2)
(99,204,2)
(62,144,2)
(152,204,2)
(112,142,2)
(18,193,2)
(0,18,2)
(11,170,2)
(149,160,2)
(3,141,2)
(203,160,2)
(204,142,2)
(31,160,2)
(194,170,2)
(132,160,2)
(202,160,2)
(184,141,2)
(128,75,2)
(142,96,2)
(114,160,2)
(43,75,2)
(61,142,2)
(13,179,2)
(162,142,2)
(170,18,2)
(144,179,2)
(17,38,2)
(25,170,2)
(147,38,2)
(86,38,2)
(190,204,2)
(192,160,2)
(160,91,2)
(90,145,2)
(168,170,2)
(165,38,2)
(174,176,2)
(161,160,2)
(4,170,2)
(130,75,2)
(209,38,2)
(154,160,2)
(115,75,2)
(151,204,2)
(16,52,2)
(81,2,2)
(134,160,2)
(129,160,2)
(41,141,2)
(31,91,2)
(176,198,2)
(102,51,2)
(18,204,2)
(47,141,2)
(106,170,2)
(53,170,2)
(112,160,2)
(159,138,2)
(121,38,2)
(96,75,2)
(122,144,2)
(39,96,2)
(153,170,2)
(0,64,2)
(174,75,2)
(147,80,2)
(38,182,2)
(67,154,2)
(163,162,2)
(116,170,2)
(183,38,2)
(96,158,2)
(150,64,2)
(159,170,2)
(52,96,2)
(110,170,2)
(89,170,2)
(166,160,2)
(95,38,2)
(102,143,2)
(163,142,2)
(90,170,2)
(46,16,2)
(95,179,2)
(158,2,2)
(180,43,2)
(52,88,2)
(27,38,2)
(117,204,2)
(104,160,2)
(65,160,2)
(93,170,2)
(208,96,2)
(148,142,2)
(125,96,2)
(109,96,2)
(161,142,2)
(2,75,2)
(144,38,2)
(64,170,2)
(29,38,2)
(64,102,2)
(163,148,2)
(162,160,2)
(193,204,2)
(138,170,2)
(108,141,2)
(164,38,2)
(61,160,2)
(82,141,2)
(36,75,2)
(167,38,2)
(105,38,2)
(51,170,2)
(77,141,2)
(119,170,2)
(84,204,2)
(203,202,2)
(67,169,2)
(68,142,2)
(8,75,2)
(72,170,2)
(81,96,2)
(143,98,2)
(100,52,2)
(2,174,2)
(169,160,2)
(102,170,2)
(198,18,2)
(66,176,2)
(40,170,2)
(173,170,2)
(75,176,2)
(197,38,2)
(48,170,2)
(170,204,2)
(67,18,2)
(174,8,2)
(54,75,2)
(172,43,2)
(46,179,2)
(100,182,2)
(204,160,2)
(78,96,2)
(100,38,2)
(206,170,2)
(98,170,2)
(123,38,2)
(198,141,2)
(23,96,2)
(50,96,2)
(13,167,2)
(122,33,2)
(141,0,2)
(75,141,2)
(96,43,2)
(183,179,2)
(141,64,2)
(147,100,2)
(92,170,2)
(66,202,2)
(145,170,2)
(43,2,2)
(167,182,2)
(179,147,2)
(22,160,2)
(60,204,2)
(38,52,2)
(140,64,2)
(94,203,2)
(207,169,2)
(204,163,2)
(176,141,2)
(59,170,2)
(97,170,2)
(126,204,2)
(182,187,2)
(69,160,2)
(88,96,2)
(158,43,2)
(195,38,2)
(76,204,2)
(14,149,2)
(28,160,2)
(131,110,2)
(131,170,2)
(46,38,2)
(179,38,2)
(111,64,2)
(160,160,2)
(159,97,2)
(127,204,2)
(79,75,2)
(181,38,2)
(169,154,2)
(87,75,2)
(13,38,2)
(71,64,2)
(169,18,2)
(68,160,2)
(16,38,2)
(102,18,2)
(163,160,2)
(73,75,2)
(136,75,2)
(155,160,2)
(58,170,2)
(33,144,2)
-----------------------------------
(0,listen(listenSocket, LISTEN_BACKLOG)
(1,)
(2,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(3,NULL)
(4,service.sin_family)
(5,if (listenSocket == INVALID_SOCKET)
(6,)
(7,struct sockaddr*)
(8,CHAR_ARRAY_SIZE - 1)
(9,service)
(10,dataBuffer[data-1] = '\\\\0')
(11,TCP_PORT)
(12,100)
(13,dataBuffer[data-1])
(14,WSACleanup()
(15,do)
(16,data-1)
(17,'A')
(18,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(19,)
(20,data)
(21,if (dataBuffer == NULL)
(22,0)
(23,data)
(24,recvResult)
(25,service.sin_port)
(26,if (recvResult == SOCKET_ERROR || recvResult == 0)
(27,data)
(28,acceptSocket)
(29,data)
(30,)
(31,i++)
(32,if (acceptSocket != INVALID_SOCKET)
(33,-1)
(34,if (data < 100)
(35,data)
(36,SOCKET_ERROR)
(37,RET)
(38,data < 100)
(39,'\\\\0')
(40,service)
(41,NULL)
(42,\'A\')
(43,recvResult == SOCKET_ERROR)
(44,dataBuffer)
(45,if (WSAStartup(MAKEWORD(2,2)
(46,memset(dataBuffer, 'A', data-1)
(47,SOCKET_ERROR)
(48,service)
(49,)
(50,inputBuffer[recvResult] = '\\\\0')
(51,sizeof(service)
(52,data = atoi(inputBuffer)
(53,s_addr)
(54,recvResult)
(55,listenSocket)
(56,inputBuffer[recvResult] = \'\\\\0\')
(57,)
(58,INADDR_ANY)
(59,break;)
(60,listenSocket)
(61,2)
(62,1)
(63,)
(64,bind(listenSocket, (struct sockaddr*)
(65,INVALID_SOCKET)
(66,CLOSE_SOCKET(acceptSocket)
(67,CLOSE_SOCKET(listenSocket)
(68,2)
(69,i)
(70,i)
(71,LISTEN_BACKLOG)
(72,0)
(73,0)
(74,if (bind(listenSocket, (struct sockaddr*)
(75,acceptSocket == SOCKET_ERROR)
(76,INVALID_SOCKET)
(77,acceptSocket)
(78,recvResult)
(79,acceptSocket)
(80,char *)
(81,inputBuffer[recvResult])
(82,break;)
(83,0)
(84,wsaDataInit)
(85,service)
(86,1)
(87,1)
(88,atoi(inputBuffer)
(89,sin_family)
(90,service.sin_port = htons(TCP_PORT)
(91,i = 0)
(92,service)
(93,SOCKET_ERROR)
(94,acceptSocket)
(95,free(dataBuffer)
(96,recvResult == SOCKET_ERROR || recvResult == 0)
(97,sizeof(service)
(98,&service)
(99,IPPROTO_TCP)
(100,malloc(data)
(101,dataBuffer[data-1] = \'\\\\0\')
(102,bind(listenSocket, (struct sockaddr*)
(103,)
(104,INVALID_SOCKET)
(105,dataBuffer)
(106,service)
(107,for(i = 0; i < 1; i++)
(108,acceptSocket)
(109,break;)
(110,service.sin_addr)
(111,listenSocket)
(112,wsaData)
(113,acceptSocket)
(114,acceptSocket)
(115,CHAR_ARRAY_SIZE)
(116,service.sin_family = AF_INET)
(117,wsaDataInit = 1)
(118,data)
(119,sin_port)
(120,)
(121,dataBuffer)
(122,exit(-1)
(123,dataBuffer)
(124,)
(125,inputBuffer)
(126,listenSocket)
(127,1)
(128,inputBuffer)
(129,1)
(130,recvResult)
(131,service.sin_addr.s_addr)
(132,i)
(133,listenSocket)
(134,INVALID_SOCKET)
(135,)
(136,break;)
(137,inputBuffer)
(138,&service)
(139,)
(140,SOCKET_ERROR)
(141,listen(listenSocket, LISTEN_BACKLOG)
(142,0)
(143,(struct sockaddr*)
(144,dataBuffer == NULL)
(145,htons(TCP_PORT)
(146,if (listenSocket != INVALID_SOCKET)
(147,(char *)
(148,MAKEWORD(2,2)
(149,wsaDataInit)
(150,break;)
(151,break;)
(152,AF_INET)
(153,listenSocket)
(154,listenSocket = INVALID_SOCKET)
(155,wsaDataInit = 0)
(156,)
(157,\'\\\\0\')
(158,recvResult == 0)
(159,memset(&service, 0, sizeof(service)
(160,i < 1)
(161,NO_ERROR)
(162,&wsaData)
(163,WSAStartup(MAKEWORD(2,2)
(164,1)
(165,\'\\\\0\')
(166,wsaDataInit)
(167,data-1)
(168,sin_addr)
(169,listenSocket != INVALID_SOCKET)
(170,listenSocket == INVALID_SOCKET)
(171,1)
(172,0)
(173,service)
(174,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(175,'\\\\0')
(176,acceptSocket = accept(listenSocket, NULL, NULL)
(177,if (listen(listenSocket, LISTEN_BACKLOG)
(178,wsaData)
(179,* dataBuffer = (char *)
(180,recvResult)
(181,NULL)
(182,data = -1)
(183,printLine(dataBuffer)
(184,listenSocket)
(185,)
(186,data)
(187,-1)
(188,if (wsaDataInit)
(189,)
(190,SOCK_STREAM)
(191,if (acceptSocket == SOCKET_ERROR)
(192,listenSocket)
(193,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(194,AF_INET)
(195,dataBuffer)
(196,i)
(197,dataBuffer)
(198,accept(listenSocket, NULL, NULL)
(199,memset(dataBuffer, \'A\', data-1)
(200,service)
(201,INVALID_SOCKET)
(202,acceptSocket = INVALID_SOCKET)
(203,acceptSocket != INVALID_SOCKET)
(204,WSAStartup(MAKEWORD(2,2)
(205,wsaDataInit)
(206,service.sin_addr.s_addr = INADDR_ANY)
(207,listenSocket)
(208,inputBuffer)
(209,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^