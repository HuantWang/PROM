-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
25,26
25,27
26,27
29,30
29,31
29,32
29,33
29,34
29,35
30,31
31,32
31,33
33,34
33,35
33,36
36,37
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
67,68
67,69
68,69
71,72
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,8,10,14,16,20,23,27,28,32,34,35,39,41,44,46,50,52,57,59,63,65,66,69,70,75,78,79,80,84,86,90,92
-----computeFrom-----
12,13
12,14
18,19
18,20
25,26
25,27
48,49
48,50
67,68
67,69
72,73
72,74
76,77
76,78
-----guardedBy-----
27,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_01_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_01_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(0,8,0)
(31,44,0)
(38,13,0)
(35,25,0)
(35,9,0)
(9,35,0)
(4,44,0)
(50,34,0)
(0,36,0)
(0,3,0)
(33,35,0)
(34,37,0)
(1,5,0)
(47,4,0)
(19,8,0)
(32,44,0)
(3,0,0)
(41,36,0)
(38,5,0)
(39,31,0)
(20,42,0)
(28,23,0)
(14,44,0)
(42,47,0)
(25,40,0)
(23,25,0)
(30,9,0)
(18,34,0)
(8,0,0)
(25,37,0)
(24,9,0)
(40,25,0)
(21,25,0)
(12,48,0)
(6,35,0)
(29,42,0)
(48,36,0)
(11,37,0)
(34,18,0)
(7,23,0)
(15,4,0)
(46,18,0)
(9,44,0)
(2,44,0)
(47,36,0)
(47,42,0)
(9,36,0)
(42,25,0)
(14,36,0)
(36,44,0)
(49,37,0)
(31,36,0)
(22,47,0)
(5,38,0)
(8,25,0)
(36,0,0)
(10,14,0)
(43,48,0)
(36,0,1)
(48,36,1)
(7,25,1)
(9,35,1)
(5,1,1)
(31,39,1)
(20,29,1)
(30,48,1)
(47,36,1)
(16,14,1)
(46,50,1)
(9,36,1)
(40,21,1)
(41,23,1)
(6,24,1)
(0,8,1)
(42,20,1)
(23,25,1)
(16,23,1)
(12,43,1)
(31,36,1)
(14,36,1)
(15,47,1)
(35,33,1)
(23,28,1)
(8,25,1)
(28,7,1)
(22,9,1)
(8,19,1)
(19,41,1)
(34,18,1)
(42,25,1)
(35,25,1)
(33,6,1)
(14,10,1)
(25,40,1)
(47,42,1)
(38,5,1)
(39,4,1)
(43,36,1)
(1,48,1)
(24,30,1)
(48,12,1)
(0,3,1)
(10,31,1)
(30,38,1)
(21,34,1)
(18,46,1)
(4,15,1)
(29,22,1)
(15,23,2)
(48,23,2)
(42,23,2)
(47,23,2)
(14,23,2)
(5,48,2)
(9,23,2)
(0,23,2)
(12,23,2)
(0,8,2)
(39,23,2)
(35,23,2)
(0,3,2)
(34,18,2)
(8,23,2)
(36,23,2)
(30,23,2)
(20,23,2)
(33,23,2)
(9,35,2)
(47,36,2)
(43,23,2)
(42,25,2)
(14,36,2)
(41,23,2)
(31,36,2)
(48,36,2)
(23,25,2)
(25,40,2)
(10,23,2)
(9,36,2)
(22,23,2)
(38,48,2)
(19,23,2)
(31,23,2)
(35,25,2)
(4,23,2)
(36,0,2)
(24,23,2)
(8,25,2)
(1,48,2)
(29,23,2)
(38,5,2)
(47,42,2)
(6,23,2)
-----------------------------------
(0,(char *)
(1,1)
(2,dataBuffer)
(3,char *)
(4,dataBuffer[data-1] = '\\\\0')
(5,-1)
(6,data)
(7,data)
(8,malloc(data)
(9,memset(dataBuffer, 'A', data-1)
(10,dataBuffer)
(11,data)
(12,NULL)
(13,)
(14,free(dataBuffer)
(15,\'\\\\0\')
(16,RET)
(17,memset(dataBuffer, \'A\', data-1)
(18,-1)
(19,data)
(20,1)
(21,data)
(22,dataBuffer)
(23,data < 100)
(24,\'A\')
(25,data = RAND32()
(26,dataBuffer[data-1] = \'\\\\0\')
(27,'\\\\0')
(28,100)
(29,data)
(30,dataBuffer)
(31,printLine(dataBuffer)
(32,if (dataBuffer == NULL)
(33,1)
(34,data = -1)
(35,data-1)
(36,* dataBuffer = (char *)
(37,)
(38,exit(-1)
(39,dataBuffer)
(40,RAND32()
(41,dataBuffer)
(42,data-1)
(43,dataBuffer)
(44,)
(45,'A')
(46,1)
(47,dataBuffer[data-1])
(48,dataBuffer == NULL)
(49,if (data < 100)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^