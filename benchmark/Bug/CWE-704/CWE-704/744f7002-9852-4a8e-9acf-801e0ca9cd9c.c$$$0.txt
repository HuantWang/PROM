-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
20,21
20,22
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_16_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
1
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,39,0)
(10,21,0)
(40,5,0)
(45,21,0)
(41,47,0)
(15,38,0)
(21,10,0)
(1,18,0)
(26,2,0)
(38,47,0)
(37,11,0)
(27,16,0)
(2,11,0)
(31,11,0)
(18,39,0)
(21,45,0)
(48,11,0)
(11,44,0)
(21,39,0)
(39,21,0)
(33,44,0)
(30,38,0)
(47,11,0)
(20,39,0)
(5,26,0)
(3,44,0)
(49,27,0)
(19,44,0)
(35,47,0)
(27,3,0)
(47,38,0)
(23,3,0)
(8,20,0)
(42,39,0)
(46,11,0)
(20,3,0)
(39,24,0)
(7,24,0)
(14,48,0)
(25,5,0)
(43,36,0)
(6,16,0)
(9,26,0)
(13,16,0)
(17,20,0)
(32,2,0)
(20,16,0)
(27,36,0)
(16,11,0)
(20,43,0)
(28,3,0)
(34,27,0)
(4,18,0)
(29,43,0)
(48,16,0)
(26,5,0)
(0,27,0)
(18,3,0)
(7,39,1)
(25,9,1)
(35,41,1)
(45,42,1)
(48,16,1)
(20,17,1)
(8,27,1)
(18,1,1)
(13,22,1)
(20,39,1)
(28,23,1)
(26,5,1)
(29,20,1)
(43,29,1)
(16,6,1)
(18,3,1)
(21,10,1)
(9,47,1)
(41,16,1)
(0,34,1)
(32,26,1)
(34,49,1)
(30,15,1)
(14,18,1)
(27,0,1)
(27,39,1)
(14,43,1)
(3,28,1)
(38,30,1)
(17,8,1)
(42,22,1)
(21,45,1)
(4,2,1)
(27,16,1)
(15,35,1)
(1,4,1)
(6,13,1)
(49,18,1)
(22,3,1)
(47,38,1)
(12,48,1)
(20,16,1)
(18,39,1)
(2,32,1)
(40,25,1)
(20,3,1)
(39,21,1)
(5,40,1)
(27,3,1)
(13,7,1)
(48,14,1)
(8,18,2)
(27,16,2)
(17,18,2)
(48,16,2)
(26,5,2)
(49,18,2)
(20,16,2)
(39,22,2)
(20,39,2)
(7,22,2)
(0,18,2)
(39,21,2)
(18,39,2)
(21,10,2)
(47,38,2)
(27,18,2)
(43,18,2)
(34,18,2)
(20,18,2)
(21,22,2)
(29,18,2)
(42,22,2)
(45,22,2)
(18,3,2)
(21,45,2)
(27,39,2)
(27,3,2)
(20,3,2)
-----------------------------------
(0,data)
(1,100)
(2,source[100-1] = \\\'\\\\0\\\')
(3,data = 0)
(4,data)
(5,100-1)
(6,"")
(7,break;)
(8,dest)
(9,source)
(10,short)
(11,)
(12,RET)
(13,dest)
(14,dest)
(15,100)
(16,dest[100] = "")
(17,data)
(18,data < 100)
(19,data)
(20,dest[data])
(21,(short)
(22,1)
(23,data)
(24,)
(25,100)
(26,source[100-1])
(27,memcpy(dest, source, data)
(28,0)
(29,\\\'\\\\0\\\')
(30,1)
(31,if (data < 100)
(32,\\\'\\\\0\\\')
(33,while(1)
(34,source)
(35,\\\'A\\\')
(36,)
(37,dest)
(38,100-1)
(39,data = (short)
(40,1)
(41,source)
(42,data)
(43,dest[data] = \\\'\\\\0\\\')
(44,)
(45,RAND32()
(46,source)
(47,memset(source, \\\'A\\\', 100-1)
(48,printLine(dest)
(49,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^