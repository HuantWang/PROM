-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
65,67
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,62,66,67,69,73,75
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_fgets_to_char_01_bad(){    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_fgets_to_char_01_bad()
CWE197_Numeric_Truncation_Error__int_fgets_to_char_01_bad
{    int data;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(13,10,0)
(19,14,0)
(22,29,0)
(17,10,0)
(24,4,0)
(21,1,0)
(0,31,0)
(7,25,0)
(18,7,0)
(33,30,0)
(31,12,0)
(6,27,0)
(16,14,0)
(1,14,0)
(31,9,0)
(10,29,0)
(34,27,0)
(23,25,0)
(31,0,0)
(0,4,0)
(31,25,0)
(27,10,0)
(4,29,0)
(14,27,0)
(8,31,0)
(3,0,0)
(20,0,0)
(28,12,0)
(20,4,0)
(14,1,0)
(12,29,0)
(25,7,0)
(25,5,0)
(12,28,0)
(35,33,0)
(2,28,0)
(9,31,0)
(26,14,0)
(11,12,0)
(7,27,0)
(15,20,0)
(15,0,1)
(32,20,1)
(35,1,1)
(31,12,1)
(27,34,1)
(6,12,1)
(1,21,1)
(3,25,1)
(7,27,1)
(23,1,1)
(34,6,1)
(3,33,1)
(2,11,1)
(16,27,1)
(12,28,1)
(26,16,1)
(7,18,1)
(20,15,1)
(33,35,1)
(31,9,1)
(1,14,1)
(21,14,1)
(20,0,1)
(28,2,1)
(14,19,1)
(25,7,1)
(31,25,1)
(14,27,1)
(19,26,1)
(18,23,1)
(31,8,1)
(0,31,1)
(8,3,1)
(33,1,2)
(14,27,2)
(12,28,2)
(20,0,2)
(1,14,2)
(25,7,2)
(7,1,2)
(7,27,2)
(18,1,2)
(31,12,2)
(0,31,2)
(25,1,2)
(35,1,2)
(31,25,2)
(31,9,2)
(23,1,2)
-----------------------------------
(0,charData = (char)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,1)
(3,charData)
(4,)
(5,)
(6,inputBuffer)
(7,atoi(inputBuffer)
(8,data)
(9,char)
(10,)
(11,data)
(12,data = -1)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,charData)
(16,inputBuffer)
(17,inputBuffer)
(18,inputBuffer)
(19,stdin)
(20,printHexCharLine(charData)
(21,NULL)
(22,data)
(23,data)
(24,charData)
(25,data = atoi(inputBuffer)
(26,CHAR_ARRAY_SIZE)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,-1)
(29,)
(30,)
(31,(char)
(32,RET)
(33,printLine("fgets()
(34,"")
(35,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^