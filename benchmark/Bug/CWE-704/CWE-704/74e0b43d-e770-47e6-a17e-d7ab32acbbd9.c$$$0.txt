-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_07_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_07_bad(){    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_07_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_07_bad
{    short data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(13,2,0)
(43,28,0)
(4,18,0)
(21,19,0)
(4,7,0)
(42,33,0)
(25,29,0)
(1,18,0)
(9,19,0)
(19,29,0)
(19,4,0)
(49,4,0)
(35,4,0)
(12,52,0)
(6,29,0)
(28,18,0)
(7,17,0)
(50,11,0)
(46,49,0)
(22,33,0)
(47,3,0)
(29,33,0)
(37,18,0)
(24,10,0)
(3,26,0)
(8,4,0)
(32,11,0)
(36,52,0)
(19,18,0)
(15,10,0)
(20,33,0)
(5,8,0)
(0,3,0)
(20,3,0)
(7,39,0)
(39,7,0)
(29,19,0)
(14,45,0)
(49,18,0)
(33,10,0)
(36,33,0)
(45,4,0)
(34,36,0)
(2,31,0)
(44,10,0)
(17,7,0)
(23,20,0)
(52,4,0)
(45,18,0)
(3,20,0)
(30,33,0)
(16,13,0)
(52,36,0)
(27,36,0)
(7,4,0)
(41,22,0)
(52,28,0)
(17,33,0)
(38,22,0)
(40,17,0)
(2,13,0)
(51,8,0)
(38,3,1)
(8,51,1)
(21,9,1)
(17,33,1)
(8,4,1)
(40,35,1)
(52,36,1)
(43,52,1)
(47,0,1)
(52,4,1)
(36,34,1)
(32,50,1)
(22,33,1)
(14,49,1)
(0,11,1)
(5,4,1)
(17,40,1)
(6,25,1)
(51,5,1)
(35,22,1)
(49,4,1)
(38,11,1)
(20,23,1)
(34,27,1)
(16,8,1)
(23,47,1)
(19,4,1)
(29,6,1)
(48,22,1)
(12,19,1)
(45,4,1)
(45,14,1)
(30,42,1)
(4,7,1)
(22,41,1)
(25,21,1)
(49,46,1)
(9,2,1)
(50,33,1)
(11,32,1)
(7,17,1)
(28,43,1)
(33,30,1)
(46,28,1)
(48,45,1)
(7,39,1)
(36,33,1)
(19,29,1)
(3,20,1)
(27,12,1)
(9,8,1)
(20,33,1)
(2,13,1)
(41,38,1)
(13,16,1)
(29,33,1)
(3,20,2)
(49,22,2)
(22,33,2)
(49,4,2)
(36,33,2)
(40,22,2)
(45,4,2)
(17,22,2)
(7,22,2)
(8,22,2)
(52,4,2)
(19,29,2)
(14,22,2)
(17,33,2)
(21,22,2)
(8,4,2)
(34,22,2)
(35,22,2)
(13,8,2)
(25,22,2)
(12,22,2)
(2,13,2)
(28,22,2)
(7,17,2)
(36,22,2)
(27,22,2)
(9,22,2)
(23,11,2)
(19,4,2)
(2,8,2)
(4,7,2)
(7,39,2)
(20,33,2)
(47,11,2)
(3,11,2)
(5,22,2)
(52,36,2)
(6,22,2)
(20,11,2)
(46,22,2)
(29,33,2)
(29,22,2)
(19,22,2)
(0,11,2)
(43,22,2)
(52,22,2)
(16,8,2)
(51,22,2)
(45,22,2)
(4,22,2)
-----------------------------------
(0,stdin)
(1,if (dataBuffer == NULL)
(2,exit(-1)
(3,fscanf (stdin, "%hd", &data)
(4,* dataBuffer = (char *)
(5,dataBuffer)
(6,1)
(7,(char *)
(8,dataBuffer == NULL)
(9,dataBuffer)
(10,)
(11,staticFive==5)
(12,dataBuffer)
(13,-1)
(14,dataBuffer)
(15,if(staticFive==5)
(16,1)
(17,malloc(data)
(18,)
(19,memset(dataBuffer, \\\'A\\\', data-1)
(20,&data)
(21,\\\'A\\\')
(22,data < 100)
(23,data)
(24,data)
(25,data)
(26,)
(27,data)
(28,dataBuffer[data-1] = \\\'\\\\0\\\')
(29,data-1)
(30,0)
(31,)
(32,5)
(33,data = 0)
(34,1)
(35,dataBuffer)
(36,data-1)
(37,dataBuffer)
(38,data)
(39,char *)
(40,data)
(41,100)
(42,data)
(43,\\\'\\\\0\\\')
(44,if (data < 100)
(45,free(dataBuffer)
(46,dataBuffer)
(47,"%hd")
(48,RET)
(49,printLine(dataBuffer)
(50,staticFive)
(51,NULL)
(52,dataBuffer[data-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^