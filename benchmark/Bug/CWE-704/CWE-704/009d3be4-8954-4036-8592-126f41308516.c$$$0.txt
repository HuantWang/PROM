-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_21_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    badStatic = 1; /* true */
    data = badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,19,20,24,27,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_21_bad(){    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_21_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_21_bad
{    short data;    /* Initialize data */    data = 0;    badStatic = 1; /* true */    data = badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(11,18,0)
(4,23,0)
(45,5,0)
(23,31,0)
(2,20,0)
(30,47,0)
(26,50,0)
(5,45,0)
(22,7,0)
(23,24,0)
(36,45,0)
(6,24,0)
(3,18,0)
(48,24,0)
(49,5,0)
(30,5,0)
(31,23,0)
(47,30,0)
(45,41,0)
(11,5,0)
(21,31,0)
(25,30,0)
(12,47,0)
(28,3,0)
(3,5,0)
(31,6,0)
(17,49,0)
(7,3,0)
(43,18,0)
(51,11,0)
(45,36,0)
(37,18,0)
(3,7,0)
(36,23,0)
(13,1,0)
(39,23,0)
(5,18,0)
(41,45,0)
(1,5,0)
(40,24,0)
(52,18,0)
(47,23,0)
(16,39,0)
(32,40,0)
(10,6,0)
(33,24,0)
(27,6,0)
(1,18,0)
(15,7,0)
(50,2,0)
(53,36,0)
(8,49,0)
(30,37,0)
(38,39,0)
(7,23,0)
(14,3,0)
(34,40,0)
(46,47,0)
(2,50,0)
(35,5,0)
(9,37,0)
(30,5,1)
(10,27,1)
(28,49,1)
(47,12,1)
(36,23,1)
(37,9,1)
(7,22,1)
(45,36,1)
(26,49,1)
(14,28,1)
(11,5,1)
(16,23,1)
(53,35,1)
(21,4,1)
(1,5,1)
(35,39,1)
(34,6,1)
(15,14,1)
(45,41,1)
(38,16,1)
(49,8,1)
(46,25,1)
(17,5,1)
(25,3,1)
(3,5,1)
(39,23,1)
(22,15,1)
(6,10,1)
(39,38,1)
(13,11,1)
(2,50,1)
(11,51,1)
(23,31,1)
(3,7,1)
(32,34,1)
(0,39,1)
(47,23,1)
(12,46,1)
(49,5,1)
(31,21,1)
(51,37,1)
(36,53,1)
(31,6,1)
(50,26,1)
(5,45,1)
(7,23,1)
(4,40,1)
(8,17,1)
(40,32,1)
(28,2,1)
(1,13,1)
(9,30,1)
(0,1,1)
(30,47,1)
(25,39,2)
(22,39,2)
(14,39,2)
(5,45,2)
(45,36,2)
(3,39,2)
(31,6,2)
(13,39,2)
(1,39,2)
(7,39,2)
(45,39,2)
(49,5,2)
(49,39,2)
(36,39,2)
(35,39,2)
(9,39,2)
(2,49,2)
(5,39,2)
(28,39,2)
(26,49,2)
(3,5,2)
(3,7,2)
(17,39,2)
(15,39,2)
(23,31,2)
(37,39,2)
(47,23,2)
(2,50,2)
(45,41,2)
(30,39,2)
(46,39,2)
(30,47,2)
(51,39,2)
(11,5,2)
(1,5,2)
(36,23,2)
(8,39,2)
(50,49,2)
(53,39,2)
(7,23,2)
(47,39,2)
(39,23,2)
(11,39,2)
(12,39,2)
(30,5,2)
-----------------------------------
(0,RET)
(1,free(dataBuffer)
(2,exit(-1)
(3,memset(dataBuffer, 'A', data-1)
(4,data)
(5,* dataBuffer = (char *)
(6,data = 0)
(7,data-1)
(8,NULL)
(9,'\\\\0')
(10,0)
(11,printLine(dataBuffer)
(12,1)
(13,dataBuffer)
(14,'A')
(15,data)
(16,data)
(17,dataBuffer)
(18,)
(19,\'A\')
(20,)
(21,data)
(22,1)
(23,data = badSource(data)
(24,)
(25,dataBuffer)
(26,1)
(27,data)
(28,dataBuffer)
(29,memset(dataBuffer, \'A\', data-1)
(30,dataBuffer[data-1])
(31,badSource(data)
(32,1)
(33,data)
(34,badStatic)
(35,dataBuffer)
(36,malloc(data)
(37,dataBuffer[data-1] = '\\\\0')
(38,100)
(39,data < 100)
(40,badStatic = 1)
(41,char *)
(42,dataBuffer[data-1] = \'\\\\0\')
(43,dataBuffer)
(44,\'\\\\0\')
(45,(char *)
(46,data)
(47,data-1)
(48,if (data < 100)
(49,dataBuffer == NULL)
(50,-1)
(51,dataBuffer)
(52,if (dataBuffer == NULL)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^