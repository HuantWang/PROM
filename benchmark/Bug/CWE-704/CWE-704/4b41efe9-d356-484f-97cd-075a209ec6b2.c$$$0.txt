-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
67,68
68,69
68,70
69,70
73,74
73,75
73,76
73,77
73,78
73,79
74,75
75,76
75,77
77,78
77,79
79,80
81,82
82,83
82,84
84,85
84,86
84,87
86,87
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
116,117
116,118
116,119
116,120
117,118
119,120
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,29,31,36,38,40,42,44,49,52,53,56,58,63,64,65,66,70,71,72,76,78,80,83,85,87,89,93,95,96,98,99,104,106,107,108,112,113,118,120,122,124,129,131,132,136,138
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
97,98
97,99
101,102
101,103
105,106
105,107
110,111
110,112
126,127
126,128
-----guardedBy-----
38,58
112,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_strncpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_strncpy_15_bad()
CWE194_Unexpected_Sign_Extension__fgets_strncpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(19,12,0)
(67,17,0)
(31,24,0)
(39,36,0)
(2,35,0)
(7,43,0)
(6,34,0)
(11,8,0)
(63,48,0)
(54,20,0)
(56,26,0)
(59,26,0)
(7,51,0)
(60,38,0)
(42,23,0)
(21,34,0)
(64,30,0)
(9,6,0)
(56,48,0)
(58,8,0)
(45,56,0)
(13,20,0)
(20,10,0)
(25,20,0)
(25,49,0)
(65,24,0)
(36,8,0)
(23,38,0)
(43,34,0)
(28,23,0)
(16,12,0)
(0,54,0)
(35,6,0)
(1,6,0)
(48,49,0)
(36,55,0)
(57,38,0)
(61,44,0)
(20,7,0)
(5,30,0)
(14,25,0)
(40,25,0)
(47,32,0)
(7,20,0)
(55,12,0)
(56,31,0)
(66,43,0)
(15,26,0)
(30,12,0)
(69,25,0)
(54,31,0)
(18,17,0)
(34,23,0)
(26,12,0)
(30,17,0)
(62,31,0)
(44,12,0)
(68,55,0)
(4,6,0)
(17,30,0)
(32,38,0)
(25,31,0)
(52,24,0)
(43,7,0)
(6,35,0)
(12,24,0)
(53,33,0)
(41,53,0)
(22,12,0)
(46,54,0)
(56,20,0)
(37,38,0)
(25,26,0)
(51,7,0)
(29,56,0)
(3,31,0)
(70,34,0)
(50,38,0)
(8,36,0)
(44,26,0)
(71,44,1)
(48,63,1)
(20,7,1)
(54,20,1)
(68,36,1)
(13,35,1)
(34,21,1)
(64,26,1)
(2,6,1)
(58,11,1)
(66,13,1)
(30,17,1)
(4,1,1)
(43,66,1)
(59,50,1)
(61,48,1)
(56,26,1)
(25,20,1)
(29,25,1)
(25,31,1)
(9,34,1)
(26,15,1)
(50,53,1)
(56,20,1)
(0,55,1)
(57,32,1)
(44,26,1)
(63,56,1)
(27,31,1)
(18,5,1)
(69,40,1)
(62,3,1)
(6,34,1)
(47,27,1)
(50,20,1)
(55,68,1)
(35,2,1)
(35,6,1)
(7,51,1)
(7,43,1)
(39,30,1)
(21,70,1)
(5,64,1)
(25,26,1)
(56,31,1)
(1,9,1)
(44,61,1)
(6,4,1)
(43,34,1)
(25,69,1)
(59,57,1)
(36,8,1)
(32,47,1)
(46,0,1)
(61,54,1)
(15,59,1)
(40,14,1)
(17,67,1)
(41,35,1)
(14,54,1)
(53,41,1)
(45,29,1)
(54,46,1)
(70,27,1)
(54,31,1)
(11,39,1)
(56,45,1)
(67,18,1)
(31,62,1)
(8,58,1)
(14,54,2)
(50,27,2)
(54,31,2)
(29,54,2)
(34,27,2)
(20,35,2)
(36,8,2)
(47,27,2)
(6,34,2)
(20,7,2)
(69,54,2)
(2,27,2)
(6,27,2)
(32,27,2)
(40,54,2)
(41,35,2)
(70,27,2)
(56,31,2)
(25,20,2)
(7,35,2)
(48,54,2)
(25,26,2)
(56,54,2)
(66,35,2)
(54,20,2)
(21,27,2)
(4,27,2)
(43,35,2)
(56,26,2)
(43,34,2)
(56,20,2)
(63,54,2)
(9,27,2)
(30,17,2)
(57,27,2)
(25,54,2)
(44,26,2)
(7,51,2)
(25,31,2)
(13,35,2)
(7,43,2)
(35,27,2)
(1,27,2)
(53,35,2)
(45,54,2)
(35,6,2)
-----------------------------------
(0,data)
(1,CHAR_ARRAY_SIZE)
(2,NULL)
(3,data)
(4,stdin)
(5,\\\'A\\\')
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,(short)
(8,100-1)
(9,inputBuffer)
(10,)
(11,100)
(12,)
(13,data)
(14,dest)
(15,"")
(16,dest)
(17,100-1)
(18,100)
(19,source)
(20,data = (short)
(21,"")
(22,if (data < 100)
(23,)
(24,)
(25,strncpy(dest, source, data)
(26,dest[100] = "")
(27,6)
(28,inputBuffer)
(29,dest)
(30,memset(source, \\\'A\\\', 100-1)
(31,data = 0)
(32,printLine("Benign, fixed string")
(33,)
(34,inputBuffer[CHAR_ARRAY_SIZE] = "")
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,source[100-1])
(37,case 6:)
(38,)
(39,source)
(40,source)
(41,"fgets()
(42,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,atoi(inputBuffer)
(44,printLine(dest)
(45,data)
(46,100)
(47,"Benign, fixed string")
(48,dest[data] = \\\'\\\\0\\\')
(49,)
(50,break;)
(51,short)
(52,switch(6)
(53,printLine("fgets()
(54,data < 100)
(55,source[100-1] = \\\'\\\\0\\\')
(56,dest[data])
(57,break;)
(58,1)
(59,dest)
(60,default:)
(61,dest)
(62,0)
(63,\\\'\\\\0\\\')
(64,source)
(65,data)
(66,inputBuffer)
(67,1)
(68,\\\'\\\\0\\\')
(69,data)
(70,inputBuffer)
(71,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^