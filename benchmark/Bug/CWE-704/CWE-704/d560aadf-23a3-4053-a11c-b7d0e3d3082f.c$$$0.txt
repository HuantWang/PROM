-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1; /* true */
    data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
40,41
40,42
40,43
43,44
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
71,72
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,30,34,35,39,41,42,46,48,51,53,57,59,60,63,64,69,72,73,74,78,80,84,86
-----computeFrom-----
12,13
12,14
18,19
18,20
23,24
23,25
32,33
32,34
61,62
61,63
66,67
66,68
70,71
70,72
-----guardedBy-----
34,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_bad(){    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_bad
{    int data;    /* Initialize data */    data = -1;    CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1; /* true */    data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1;
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal
1
data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data);
data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data)
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data)
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(2,28,0)
(13,37,0)
(15,26,0)
(24,44,0)
(10,46,0)
(20,43,0)
(29,27,0)
(45,17,0)
(32,17,0)
(41,2,0)
(34,22,0)
(37,28,0)
(44,43,0)
(8,18,0)
(3,41,0)
(0,20,0)
(35,28,0)
(9,14,0)
(31,33,0)
(20,41,0)
(46,18,0)
(26,2,0)
(4,46,0)
(27,43,0)
(41,3,0)
(14,37,0)
(43,32,0)
(11,33,0)
(32,43,0)
(17,33,0)
(19,44,0)
(18,46,0)
(36,2,0)
(16,43,0)
(23,35,0)
(18,28,0)
(35,2,0)
(46,43,0)
(1,18,0)
(14,44,0)
(38,7,0)
(5,22,0)
(6,27,0)
(17,7,0)
(26,28,0)
(2,41,0)
(18,2,0)
(7,17,0)
(43,33,0)
(40,32,0)
(14,2,0)
(25,28,0)
(22,33,0)
(44,14,0)
(41,20,0)
(27,29,1)
(29,6,1)
(14,2,1)
(32,40,1)
(7,38,1)
(20,0,1)
(1,8,1)
(27,43,1)
(15,37,1)
(44,43,1)
(18,2,1)
(43,32,1)
(17,7,1)
(14,44,1)
(40,16,1)
(36,27,1)
(41,20,1)
(13,14,1)
(26,15,1)
(35,23,1)
(22,5,1)
(20,43,1)
(6,43,1)
(8,2,1)
(26,2,1)
(41,3,1)
(32,17,1)
(18,46,1)
(9,18,1)
(30,35,1)
(24,19,1)
(34,17,1)
(37,13,1)
(46,10,1)
(5,34,1)
(10,4,1)
(23,26,1)
(4,1,1)
(16,22,1)
(19,9,1)
(30,27,1)
(0,36,1)
(35,2,1)
(2,41,1)
(46,43,1)
(38,45,1)
(44,24,1)
(17,7,2)
(44,27,2)
(20,27,2)
(2,27,2)
(35,2,2)
(24,27,2)
(0,27,2)
(26,27,2)
(41,20,2)
(44,43,2)
(13,27,2)
(36,27,2)
(41,27,2)
(35,27,2)
(46,27,2)
(18,2,2)
(46,43,2)
(1,27,2)
(26,2,2)
(27,43,2)
(8,27,2)
(18,27,2)
(4,27,2)
(14,44,2)
(37,27,2)
(18,46,2)
(14,2,2)
(32,17,2)
(20,43,2)
(41,3,2)
(14,27,2)
(19,27,2)
(15,27,2)
(9,27,2)
(2,41,2)
(10,27,2)
(43,32,2)
(23,27,2)
-----------------------------------
(0,data)
(1,'A')
(2,* dataBuffer = (char *)
(3,char *)
(4,data)
(5,1)
(6,data)
(7,-1)
(8,dataBuffer)
(9,dataBuffer)
(10,1)
(11,data)
(12,\'A\')
(13,'\\\\0')
(14,dataBuffer[data-1])
(15,dataBuffer)
(16,data)
(17,data = -1)
(18,memset(dataBuffer, \'A\', data-1)
(19,data)
(20,malloc(data)
(21,\'\\\\0\')
(22,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal = 1)
(23,dataBuffer)
(24,1)
(25,dataBuffer)
(26,printLine(dataBuffer)
(27,data < 100)
(28,)
(29,100)
(30,RET)
(31,if (data < 100)
(32,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data)
(33,)
(34,CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badGlobal)
(35,free(dataBuffer)
(36,dataBuffer)
(37,dataBuffer[data-1] = \'\\\\0\')
(38,1)
(39,dataBuffer[data-1] = '\\\\0')
(40,data)
(41,(char *)
(42,memset(dataBuffer, 'A', data-1)
(43,data = CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_22_badSource(data)
(44,data-1)
(45,data)
(46,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^