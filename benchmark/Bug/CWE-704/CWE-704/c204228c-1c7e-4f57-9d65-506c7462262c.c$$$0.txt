-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
39,42
41,42
42,43
44,45
46,47
46,48
46,49
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
53,54
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
84,85
84,86
84,87
84,88
84,89
84,90
85,86
86,87
86,88
88,89
88,90
88,91
91,92
92,93
92,94
93,94
93,95
95,96
97,98
97,99
98,99
100,101
102,103
102,104
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
116,119
116,120
117,118
119,120
122,123
122,124
123,124
126,127
127,128
127,129
128,129
128,130
129,130
131,132
131,133
132,133
136,137
137,138
137,139
138,139
140,141
142,143
143,144
143,145
144,145
146,147
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,43,45,50,52,54,56,58,63,66,67,70,72,77,78,82,83,87,89,90,94,96,99,101,105,107,112,114,118,120,121,124,125,130,133,134,135,139,141,145,147
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
47,48
47,49
61,62
61,63
80,81
80,82
103,104
103,105
122,123
122,124
127,128
127,129
131,132
131,133
-----guardedBy-----
52,72
82,133
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_17_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(16,58,0)
(72,26,0)
(43,3,0)
(39,3,0)
(27,36,0)
(31,45,0)
(70,34,0)
(2,24,0)
(51,14,0)
(49,59,0)
(40,26,0)
(4,59,0)
(47,19,0)
(16,55,0)
(20,19,0)
(9,59,0)
(10,34,0)
(69,43,0)
(56,63,0)
(75,40,0)
(38,42,0)
(28,62,0)
(11,36,0)
(62,19,0)
(50,11,0)
(12,14,0)
(42,12,0)
(74,2,0)
(35,27,0)
(40,31,0)
(12,8,0)
(66,46,0)
(29,43,0)
(33,26,0)
(40,12,0)
(31,40,0)
(57,26,0)
(62,33,0)
(37,34,0)
(22,11,0)
(68,4,0)
(14,12,0)
(14,51,0)
(5,30,0)
(33,62,0)
(36,19,0)
(43,61,0)
(31,36,0)
(30,15,0)
(20,36,0)
(33,12,0)
(6,55,0)
(42,26,0)
(60,19,0)
(41,43,0)
(72,12,0)
(0,12,0)
(48,33,0)
(18,42,0)
(61,43,0)
(52,72,0)
(72,1,0)
(45,31,0)
(1,46,0)
(65,3,0)
(14,39,0)
(73,72,0)
(13,61,0)
(17,33,0)
(54,36,0)
(63,59,0)
(36,31,0)
(3,2,0)
(62,36,0)
(27,19,0)
(55,16,0)
(21,39,0)
(67,62,0)
(64,2,0)
(32,26,0)
(1,36,0)
(53,3,0)
(7,20,0)
(71,4,0)
(1,72,0)
(25,1,0)
(44,34,0)
(39,14,0)
(46,19,0)
(26,34,0)
(4,71,1)
(35,20,1)
(73,52,1)
(72,12,1)
(23,27,1)
(42,12,1)
(27,35,1)
(11,50,1)
(0,61,1)
(38,18,1)
(30,5,1)
(55,6,1)
(17,48,1)
(75,54,1)
(31,40,1)
(56,12,1)
(43,3,1)
(62,33,1)
(3,53,1)
(5,61,1)
(68,59,1)
(11,36,1)
(50,22,1)
(68,63,1)
(39,3,1)
(14,51,1)
(66,1,1)
(1,36,1)
(42,26,1)
(65,4,1)
(25,62,1)
(40,26,1)
(28,67,1)
(41,29,1)
(29,69,1)
(1,72,1)
(49,9,1)
(36,31,1)
(40,75,1)
(23,42,1)
(52,25,1)
(53,65,1)
(27,36,1)
(20,36,1)
(21,0,1)
(18,4,1)
(63,59,1)
(72,73,1)
(6,11,1)
(20,7,1)
(12,14,1)
(39,21,1)
(57,32,1)
(62,36,1)
(16,55,1)
(46,66,1)
(54,42,1)
(33,17,1)
(40,12,1)
(31,45,1)
(63,56,1)
(22,36,1)
(43,41,1)
(61,43,1)
(67,16,1)
(59,49,1)
(7,46,1)
(9,26,1)
(67,11,1)
(13,43,1)
(14,39,1)
(61,13,1)
(33,26,1)
(26,57,1)
(48,28,1)
(71,68,1)
(69,3,1)
(72,26,1)
(56,30,1)
(4,59,1)
(42,38,1)
(33,12,1)
(54,42,2)
(73,42,2)
(21,61,2)
(52,42,2)
(28,42,2)
(33,42,2)
(61,43,2)
(20,42,2)
(39,61,2)
(63,59,2)
(12,14,2)
(6,11,2)
(41,4,2)
(27,36,2)
(69,4,2)
(33,12,2)
(67,42,2)
(16,11,2)
(36,42,2)
(4,4,2)
(3,4,2)
(56,4,2)
(13,4,2)
(39,3,2)
(62,42,2)
(50,42,2)
(72,12,2)
(27,42,2)
(25,42,2)
(14,61,2)
(30,61,2)
(1,36,2)
(5,61,2)
(40,12,2)
(31,42,2)
(36,31,2)
(40,42,2)
(43,4,2)
(53,4,2)
(33,26,2)
(68,4,2)
(20,36,2)
(31,45,2)
(35,42,2)
(1,72,2)
(72,26,2)
(4,59,2)
(42,12,2)
(31,40,2)
(72,42,2)
(75,42,2)
(11,36,2)
(14,39,2)
(42,26,2)
(66,42,2)
(43,3,2)
(0,61,2)
(22,42,2)
(11,42,2)
(46,42,2)
(14,51,2)
(62,33,2)
(71,4,2)
(29,4,2)
(62,36,2)
(55,11,2)
(16,55,2)
(17,42,2)
(48,42,2)
(65,4,2)
(63,4,2)
(1,42,2)
(12,61,2)
(40,26,2)
(7,42,2)
(61,4,2)
-----------------------------------
(0,data)
(1,dataBuffer[data-1])
(2,)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,i < 1)
(5,"fgets()
(6,1)
(7,dataBuffer)
(8,)
(9,i)
(10,i)
(11,dataBuffer == NULL)
(12,data = (short)
(13,NULL)
(14,(short)
(15,)
(16,exit(-1)
(17,1)
(18,data)
(19,)
(20,printLine(dataBuffer)
(21,inputBuffer)
(22,dataBuffer)
(23,RET)
(24,)
(25,dataBuffer)
(26,data = 0)
(27,free(dataBuffer)
(28,\\\'A\\\')
(29,CHAR_ARRAY_SIZE)
(30,printLine("fgets()
(31,(char *)
(32,data)
(33,data-1)
(34,)
(35,dataBuffer)
(36,* dataBuffer = (char *)
(37,if (data < 100)
(38,100)
(39,atoi(inputBuffer)
(40,malloc(data)
(41,stdin)
(42,data < 100)
(43,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,for(i = 0; i < 1; i++)
(45,char *)
(46,dataBuffer[data-1] = \\\'\\\\0\\\')
(47,if (dataBuffer == NULL)
(48,data)
(49,0)
(50,NULL)
(51,short)
(52,data)
(53,"")
(54,dataBuffer)
(55,-1)
(56,i)
(57,0)
(58,)
(59,i = 0)
(60,dataBuffer)
(61,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(62,memset(dataBuffer, \\\'A\\\', data-1)
(63,i++)
(64,inputBuffer)
(65,inputBuffer)
(66,\\\'\\\\0\\\')
(67,dataBuffer)
(68,i)
(69,inputBuffer)
(70,data)
(71,1)
(72,data-1)
(73,1)
(74,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(75,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^