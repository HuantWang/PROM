-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad()
{
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,67,69
-----computeFrom-----
7,8
7,9
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad(){    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_03_bad
{    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }}
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(14,0,0)
(27,21,0)
(4,6,0)
(20,0,0)
(17,22,0)
(6,13,0)
(2,28,0)
(23,0,0)
(16,21,0)
(13,6,0)
(4,21,0)
(8,21,0)
(5,6,0)
(12,27,0)
(3,17,0)
(7,24,0)
(21,10,0)
(29,11,0)
(18,5,0)
(6,5,0)
(0,11,0)
(6,4,0)
(28,30,0)
(25,19,0)
(5,27,0)
(5,28,0)
(1,21,0)
(30,28,0)
(32,27,0)
(9,24,0)
(11,0,0)
(28,15,0)
(31,30,0)
(4,6,1)
(11,0,1)
(30,31,1)
(32,24,1)
(17,3,1)
(2,11,1)
(11,29,1)
(14,20,1)
(5,27,1)
(27,12,1)
(6,5,1)
(5,28,1)
(23,27,1)
(18,17,1)
(12,32,1)
(29,0,1)
(3,11,1)
(24,7,1)
(26,4,1)
(6,13,1)
(28,30,1)
(18,28,1)
(26,24,1)
(0,14,1)
(31,2,1)
(20,23,1)
(5,18,1)
(7,9,1)
(6,5,2)
(23,24,2)
(11,0,2)
(14,24,2)
(28,30,2)
(6,24,2)
(12,24,2)
(17,11,2)
(5,24,2)
(5,28,2)
(27,24,2)
(0,24,2)
(28,11,2)
(5,27,2)
(30,11,2)
(29,24,2)
(20,24,2)
(11,24,2)
(31,11,2)
(4,24,2)
(3,11,2)
(6,13,2)
(32,24,2)
(2,11,2)
(18,24,2)
(4,6,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,doubleNumber)
(3,"fgets()
(4,printIntLine((int)
(5,sqrt(doubleNumber)
(6,(int)
(7,5)
(8,inputBuffer)
(9,5)
(10,)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,0)
(13,int)
(14,stdin)
(15,)
(16,doubleNumber)
(17,printLine("fgets()
(18,doubleNumber)
(19,)
(20,CHAR_ARRAY_SIZE)
(21,)
(22,)
(23,inputBuffer)
(24,5==5)
(25,if(5==5)
(26,RET)
(27,doubleNumber = 0)
(28,doubleNumber = atof(inputBuffer)
(29,NULL)
(30,atof(inputBuffer)
(31,inputBuffer)
(32,doubleNumber)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^