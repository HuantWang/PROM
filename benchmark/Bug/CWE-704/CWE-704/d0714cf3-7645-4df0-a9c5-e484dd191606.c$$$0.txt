-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,18,23,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
21,22
21,23
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_02_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,26,0)
(0,21,0)
(22,37,0)
(42,9,0)
(48,46,0)
(1,7,0)
(13,36,0)
(49,10,0)
(2,31,0)
(27,0,0)
(5,23,0)
(2,36,0)
(29,23,0)
(50,19,0)
(17,46,0)
(37,23,0)
(29,26,0)
(35,23,0)
(9,36,0)
(23,5,0)
(20,38,0)
(22,40,0)
(30,36,0)
(37,22,0)
(37,26,0)
(45,31,0)
(36,38,0)
(26,19,0)
(15,46,0)
(23,43,0)
(35,26,0)
(31,23,0)
(36,22,0)
(28,29,0)
(19,26,0)
(4,2,0)
(6,23,0)
(26,46,0)
(14,38,0)
(12,38,0)
(7,36,0)
(7,38,0)
(31,2,0)
(29,30,0)
(21,0,0)
(52,35,0)
(3,30,0)
(53,29,0)
(21,18,0)
(11,2,0)
(2,38,0)
(25,35,0)
(9,38,0)
(8,37,0)
(33,10,0)
(31,26,0)
(10,36,0)
(22,36,0)
(30,12,0)
(40,22,0)
(41,31,0)
(32,12,0)
(30,29,0)
(9,36,1)
(42,7,1)
(52,25,1)
(53,28,1)
(30,29,1)
(5,6,1)
(32,30,1)
(8,13,1)
(12,32,1)
(25,24,1)
(24,26,1)
(7,1,1)
(7,36,1)
(2,31,1)
(9,42,1)
(6,24,1)
(28,3,1)
(22,40,1)
(0,27,1)
(29,26,1)
(49,33,1)
(31,26,1)
(13,35,1)
(23,5,1)
(45,41,1)
(29,53,1)
(29,23,1)
(30,36,1)
(3,2,1)
(44,35,1)
(19,50,1)
(25,23,1)
(31,45,1)
(36,22,1)
(2,36,1)
(10,36,1)
(41,4,1)
(37,26,1)
(26,19,1)
(11,10,1)
(35,52,1)
(27,10,1)
(11,21,1)
(35,26,1)
(4,11,1)
(21,0,1)
(37,23,1)
(37,8,1)
(33,36,1)
(10,49,1)
(1,12,1)
(22,37,1)
(31,23,1)
(50,51,1)
(44,9,1)
(35,23,1)
(2,36,2)
(26,19,2)
(2,35,2)
(35,23,2)
(13,35,2)
(32,35,2)
(22,37,2)
(27,10,2)
(31,23,2)
(30,29,2)
(10,35,2)
(9,36,2)
(29,26,2)
(22,40,2)
(31,35,2)
(37,35,2)
(36,22,2)
(0,10,2)
(7,35,2)
(6,24,2)
(42,35,2)
(36,35,2)
(9,35,2)
(37,23,2)
(21,10,2)
(5,24,2)
(3,35,2)
(33,35,2)
(2,31,2)
(23,5,2)
(30,35,2)
(28,35,2)
(7,36,2)
(31,26,2)
(29,23,2)
(41,35,2)
(53,35,2)
(23,24,2)
(22,35,2)
(49,35,2)
(29,35,2)
(12,35,2)
(8,35,2)
(21,0,2)
(11,35,2)
(45,35,2)
(1,35,2)
(10,36,2)
(30,36,2)
(4,35,2)
(37,26,2)
(35,26,2)
-----------------------------------
(0,-1)
(1,dataBuffer)
(2,memset(dataBuffer, 'A', data-1)
(3,dataBuffer)
(4,'A')
(5,RAND32()
(6,data)
(7,printLine(dataBuffer)
(8,data)
(9,free(dataBuffer)
(10,dataBuffer == NULL)
(11,dataBuffer)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,dataBuffer)
(14,dataBuffer)
(15,data)
(16,dataBuffer[data-1] = '\\\\0')
(17,if(1)
(18,)
(19,-1)
(20,if (dataBuffer == NULL)
(21,exit(-1)
(22,(char *)
(23,data = RAND32()
(24,1)
(25,data)
(26,data = -1)
(27,1)
(28,data)
(29,data-1)
(30,dataBuffer[data-1])
(31,data-1)
(32,'\\\\0')
(33,dataBuffer)
(34,\'\\\\0\')
(35,data < 100)
(36,* dataBuffer = (char *)
(37,malloc(data)
(38,)
(39,memset(dataBuffer, \'A\', data-1)
(40,char *)
(41,data)
(42,dataBuffer)
(43,)
(44,RET)
(45,1)
(46,)
(47,\'A\')
(48,if (data < 100)
(49,NULL)
(50,1)
(51,data)
(52,100)
(53,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^