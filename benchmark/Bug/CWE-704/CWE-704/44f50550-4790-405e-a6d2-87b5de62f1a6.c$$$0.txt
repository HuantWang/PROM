-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_09_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(33,22,0)
(20,11,0)
(10,22,0)
(31,20,0)
(4,5,0)
(1,20,0)
(32,13,0)
(0,17,0)
(13,44,0)
(39,7,0)
(22,17,0)
(27,19,0)
(44,17,0)
(19,3,0)
(30,17,0)
(23,3,0)
(48,19,0)
(38,22,0)
(25,34,0)
(5,17,0)
(34,14,0)
(13,19,0)
(14,5,0)
(22,38,0)
(29,34,0)
(41,28,0)
(7,19,0)
(9,19,0)
(35,17,0)
(8,35,0)
(6,27,0)
(36,27,0)
(40,17,0)
(46,38,0)
(14,34,0)
(45,41,0)
(12,14,0)
(16,11,0)
(11,20,0)
(17,3,0)
(27,41,0)
(15,38,0)
(42,13,0)
(11,19,0)
(26,3,0)
(18,44,0)
(27,44,0)
(43,7,0)
(13,28,0)
(20,47,0)
(35,44,0)
(24,13,0)
(2,44,0)
(44,18,1)
(42,24,1)
(16,31,1)
(7,43,1)
(31,1,1)
(1,21,1)
(13,19,1)
(38,15,1)
(22,38,1)
(2,20,1)
(12,22,1)
(13,42,1)
(27,19,1)
(5,4,1)
(7,19,1)
(37,35,1)
(45,27,1)
(4,14,1)
(36,6,1)
(11,19,1)
(21,19,1)
(11,16,1)
(27,44,1)
(14,34,1)
(34,25,1)
(6,13,1)
(24,32,1)
(41,45,1)
(18,2,1)
(32,7,1)
(35,8,1)
(25,29,1)
(35,44,1)
(20,11,1)
(27,36,1)
(29,12,1)
(39,5,1)
(10,33,1)
(9,48,1)
(19,9,1)
(8,41,1)
(33,44,1)
(15,46,1)
(43,39,1)
(8,7,1)
(13,44,1)
(2,21,1)
(46,10,1)
(35,44,2)
(14,34,2)
(24,7,2)
(36,7,2)
(16,21,2)
(20,21,2)
(41,7,2)
(11,19,2)
(13,19,2)
(27,44,2)
(6,7,2)
(42,7,2)
(7,19,2)
(20,11,2)
(11,21,2)
(31,21,2)
(13,44,2)
(27,19,2)
(45,7,2)
(32,7,2)
(27,7,2)
(22,38,2)
(13,7,2)
(1,21,2)
-----------------------------------
(0,source)
(1,stdin)
(2,dest)
(3,)
(4,\\\'\\\\0\\\')
(5,source[100-1] = \\\'\\\\0\\\')
(6,dest)
(7,data < 100)
(8,dest)
(9,0)
(10,\\\'A\\\')
(11,&data)
(12,source)
(13,memmove(dest, source, data)
(14,source[100-1])
(15,1)
(16,data)
(17,)
(18,"")
(19,data = 0)
(20,fscanf (stdin, "%hd", &data)
(21,GLOBAL_CONST_TRUE)
(22,memset(source, \\\'A\\\', 100-1)
(23,data)
(24,source)
(25,1)
(26,if(GLOBAL_CONST_TRUE)
(27,dest[data])
(28,)
(29,100)
(30,dest)
(31,"%hd")
(32,dest)
(33,source)
(34,100-1)
(35,printLine(dest)
(36,data)
(37,RET)
(38,100-1)
(39,data)
(40,if (data < 100)
(41,dest[data] = \\\'\\\\0\\\')
(42,data)
(43,100)
(44,dest[100] = "")
(45,\\\'\\\\0\\\')
(46,100)
(47,)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^