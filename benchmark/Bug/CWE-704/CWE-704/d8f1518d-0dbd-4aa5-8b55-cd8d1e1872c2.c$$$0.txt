-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_fgets_11_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a number input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
74,76
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,54,57,59,64,65,69,71,75,76,78,82,84
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
-----guardedBy-----
39,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_fgets_11_bad(){    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_fgets_11_bad()
CWE197_Numeric_Truncation_Error__short_fgets_11_bad
{    short data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a number input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(35,40,0)
(11,5,0)
(25,11,0)
(37,3,0)
(16,29,0)
(39,29,0)
(19,16,0)
(10,32,0)
(8,18,0)
(23,1,0)
(15,14,0)
(2,34,0)
(16,34,0)
(30,13,0)
(28,18,0)
(6,11,0)
(1,22,0)
(29,32,0)
(9,7,0)
(12,22,0)
(22,31,0)
(40,36,0)
(18,3,0)
(14,25,0)
(34,7,0)
(20,18,0)
(17,34,0)
(32,29,0)
(29,13,0)
(16,22,0)
(18,25,0)
(33,16,0)
(22,1,0)
(0,13,0)
(2,7,0)
(1,23,0)
(21,11,0)
(14,1,0)
(26,2,0)
(1,14,0)
(27,25,0)
(16,19,0)
(34,16,0)
(24,25,0)
(7,13,0)
(3,18,0)
(1,23,1)
(12,3,1)
(3,18,1)
(26,34,1)
(18,28,1)
(16,29,1)
(2,26,1)
(14,25,1)
(25,24,1)
(16,19,1)
(28,8,1)
(18,25,1)
(32,10,1)
(27,38,1)
(29,32,1)
(8,20,1)
(1,14,1)
(3,37,1)
(16,22,1)
(15,12,1)
(34,16,1)
(24,27,1)
(17,38,1)
(2,34,1)
(22,1,1)
(16,33,1)
(38,29,1)
(4,2,1)
(10,39,1)
(40,35,1)
(14,15,1)
(20,25,1)
(37,18,1)
(35,3,1)
(17,40,1)
(33,17,1)
(17,22,1)
(34,16,2)
(15,3,2)
(14,3,2)
(25,38,2)
(12,3,2)
(1,3,2)
(3,18,2)
(8,38,2)
(14,25,2)
(28,38,2)
(1,23,2)
(37,38,2)
(2,34,2)
(20,38,2)
(27,38,2)
(40,3,2)
(24,38,2)
(16,19,2)
(18,25,2)
(35,3,2)
(18,38,2)
(22,3,2)
(22,1,2)
(1,14,2)
(16,22,2)
(16,29,2)
(3,38,2)
(29,32,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,(short)
(2,printHexCharLine(charData)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,RET)
(5,)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,)
(8,CHAR_ARRAY_SIZE)
(9,charData)
(10,1)
(11,)
(12,data)
(13,)
(14,atoi(inputBuffer)
(15,inputBuffer)
(16,(char)
(17,charData)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,char)
(20,inputBuffer)
(21,inputBuffer)
(22,data = (short)
(23,short)
(24,"")
(25,inputBuffer[CHAR_ARRAY_SIZE] = "")
(26,charData)
(27,inputBuffer)
(28,stdin)
(29,data = -1)
(30,data)
(31,)
(32,-1)
(33,data)
(34,charData = (char)
(35,"fgets()
(36,)
(37,NULL)
(38,globalReturnsTrue()
(39,data)
(40,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^