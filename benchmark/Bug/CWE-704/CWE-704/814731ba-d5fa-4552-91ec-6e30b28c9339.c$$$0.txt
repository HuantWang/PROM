-----label-----
1
-----code-----
void CWE843_Type_Confusion__char_34_bad()
{
    void * data;
    CWE843_Type_Confusion__char_34_unionType myUnion;
    /* Initialize data */
    data = NULL;
    {
        /* FLAW: Point data to a char */
        char charBuffer = 'a';
        data = &charBuffer;
    }
    myUnion.unionFirst = data;
    {
        void * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Attempt to access data as an int */
        printIntLine(*((int*)data));
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
25,26
26,27
26,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
37,38
39,40
40,41
40,42
41,42
41,43
42,43
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
64,65
65,66
65,67
66,67
66,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,31,35,38,43,44,46,50,52,53,57,58,62,67,69,71
-----computeFrom-----
19,20
19,21
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE843_Type_Confusion__char_34_bad(){    void * data;    CWE843_Type_Confusion__char_34_unionType myUnion;    /* Initialize data */    data = NULL;    {        /* FLAW: Point data to a char */        char charBuffer = 'a';        data = &charBuffer;    }    myUnion.unionFirst = data;    {        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }}
void
CWE843_Type_Confusion__char_34_bad()
CWE843_Type_Confusion__char_34_bad
{    void * data;    CWE843_Type_Confusion__char_34_unionType myUnion;    /* Initialize data */    data = NULL;    {        /* FLAW: Point data to a char */        char charBuffer = 'a';        data = &charBuffer;    }    myUnion.unionFirst = data;    {        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }}
void * data;
void * data;
void
* data
*
data
CWE843_Type_Confusion__char_34_unionType myUnion;
CWE843_Type_Confusion__char_34_unionType myUnion;
CWE843_Type_Confusion__char_34_unionType
CWE843_Type_Confusion__char_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        /* FLAW: Point data to a char */        char charBuffer = 'a';        data = &charBuffer;    }
char charBuffer = 'a';
char charBuffer = 'a';
char
charBuffer = 'a'
charBuffer
= 'a'
'a'
data = &charBuffer;
data = &charBuffer
data
data
&charBuffer
charBuffer
charBuffer
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        void * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Attempt to access data as an int */        printIntLine(*((int*)data));    }
void * data = myUnion.unionSecond;
void * data = myUnion.unionSecond;
void
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
printIntLine(*((int*)data));
printIntLine(*((int*)data))
printIntLine
printIntLine
*((int*)data)
((int*)data)
(int*)data
int*
int
*
*
data
data
-----joern-----
(6,18,0)
(16,30,0)
(14,4,0)
(24,16,0)
(16,2,0)
(18,16,0)
(29,18,0)
(15,10,0)
(11,32,0)
(1,2,0)
(22,3,0)
(2,10,0)
(5,30,0)
(18,6,0)
(12,30,0)
(33,9,0)
(13,19,0)
(32,18,0)
(32,11,0)
(28,4,0)
(23,27,0)
(20,19,0)
(4,3,0)
(27,20,0)
(25,19,0)
(3,20,0)
(31,9,0)
(19,10,0)
(0,10,0)
(21,13,0)
(26,13,0)
(30,16,0)
(9,10,0)
(3,10,0)
(11,2,0)
(27,13,0)
(7,20,0)
(18,32,0)
(20,27,0)
(21,26,1)
(18,29,1)
(22,4,1)
(12,5,1)
(18,6,1)
(3,20,1)
(3,22,1)
(14,20,1)
(28,14,1)
(26,9,1)
(31,33,1)
(5,24,1)
(23,7,1)
(27,13,1)
(4,28,1)
(13,21,1)
(29,16,1)
(32,18,1)
(7,13,1)
(8,11,1)
(20,27,1)
(30,12,1)
(18,16,1)
(16,30,1)
(9,31,1)
(27,23,1)
(11,32,1)
(24,3,1)
(27,13,2)
(3,20,2)
(11,32,2)
(18,6,2)
(16,30,2)
(20,27,2)
(18,16,2)
(32,18,2)
-----------------------------------
(0,data)
(1,data)
(2,)
(3,myUnion.unionFirst = data)
(4,myUnion.unionFirst)
(5,myUnion)
(6,int*)
(7,data)
(8,RET)
(9,data = NULL)
(10,)
(11,printIntLine(*((int*)
(12,unionSecond)
(13,charBuffer = \'a\')
(14,myUnion)
(15,myUnion)
(16,* data = myUnion.unionSecond)
(17,charBuffer = 'a')
(18,(int*)
(19,)
(20,data = &charBuffer)
(21,'a')
(22,data)
(23,charBuffer)
(24,data)
(25,charBuffer)
(26,charBuffer)
(27,&charBuffer)
(28,unionFirst)
(29,data)
(30,myUnion.unionSecond)
(31,NULL)
(32,*((int*)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^