-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType myStruct)
{
    int data = myStruct.structFirst;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,7,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType myStruct){    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType myStruct)
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType myStruct
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType
myStruct
myStruct
{    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = myStruct.structFirst;
int data = myStruct.structFirst;
int
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,15,0)
(7,33,0)
(49,18,0)
(47,4,0)
(4,46,0)
(22,48,0)
(25,38,0)
(46,4,0)
(34,25,0)
(37,32,0)
(38,48,0)
(1,6,0)
(40,23,0)
(44,33,0)
(3,48,0)
(9,7,0)
(29,32,0)
(39,46,0)
(11,5,0)
(2,24,0)
(6,5,0)
(8,0,0)
(38,32,0)
(10,24,0)
(36,33,0)
(0,33,0)
(15,38,0)
(18,15,0)
(17,27,0)
(42,5,0)
(45,40,0)
(5,33,0)
(41,6,0)
(15,18,0)
(4,47,0)
(6,38,0)
(48,31,0)
(40,45,0)
(28,45,0)
(35,44,0)
(5,6,0)
(0,4,0)
(5,0,0)
(19,38,0)
(18,7,0)
(18,0,0)
(12,25,0)
(46,38,0)
(27,33,0)
(24,0,0)
(27,0,0)
(14,33,0)
(44,0,0)
(4,0,0)
(26,15,0)
(48,38,0)
(9,18,1)
(25,38,1)
(38,48,1)
(6,1,1)
(10,2,1)
(18,15,1)
(15,26,1)
(24,10,1)
(26,30,1)
(39,8,1)
(22,19,1)
(11,42,1)
(42,40,1)
(21,25,1)
(42,24,1)
(27,17,1)
(34,38,1)
(18,0,1)
(44,35,1)
(5,0,1)
(28,24,1)
(1,41,1)
(46,38,1)
(30,49,1)
(44,0,1)
(17,7,1)
(3,22,1)
(48,31,1)
(2,0,1)
(0,4,1)
(12,34,1)
(41,11,1)
(8,25,1)
(46,39,1)
(4,46,1)
(27,0,1)
(6,38,1)
(35,27,1)
(4,47,1)
(45,28,1)
(7,9,1)
(24,0,1)
(25,12,1)
(48,3,1)
(5,6,1)
(49,5,1)
(15,38,1)
(40,45,1)
(21,44,1)
(27,0,2)
(5,6,2)
(5,0,2)
(5,25,2)
(26,25,2)
(40,24,2)
(28,24,2)
(35,25,2)
(18,15,2)
(44,0,2)
(11,25,2)
(42,25,2)
(9,25,2)
(4,47,2)
(2,25,2)
(0,4,2)
(24,25,2)
(18,0,2)
(6,25,2)
(38,48,2)
(24,0,2)
(8,25,2)
(18,25,2)
(4,25,2)
(39,25,2)
(17,25,2)
(49,25,2)
(4,46,2)
(0,25,2)
(15,25,2)
(30,25,2)
(40,45,2)
(6,38,2)
(27,25,2)
(44,25,2)
(45,24,2)
(10,25,2)
(1,25,2)
(25,38,2)
(15,38,2)
(46,38,2)
(48,31,2)
(7,25,2)
(41,25,2)
(46,25,2)
-----------------------------------
(0,* dataBuffer = (char *)
(1,1)
(2,dataBuffer)
(3,structFirst)
(4,(char *)
(5,memset(dataBuffer, 'A', data-1)
(6,data-1)
(7,dataBuffer[data-1] = \'\\\\0\')
(8,dataBuffer)
(9,\'\\\\0\')
(10,NULL)
(11,\'A\')
(12,100)
(13,memset(dataBuffer, \'A\', data-1)
(14,dataBuffer)
(15,data-1)
(16,dataBuffer[data-1] = '\\\\0')
(17,dataBuffer)
(18,dataBuffer[data-1])
(19,data)
(20,'\\\\0')
(21,RET)
(22,myStruct)
(23,)
(24,dataBuffer == NULL)
(25,data < 100)
(26,1)
(27,printLine(dataBuffer)
(28,1)
(29,if (data < 100)
(30,data)
(31,CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_67_structType myStruct)
(32,)
(33,)
(34,data)
(35,dataBuffer)
(36,if (dataBuffer == NULL)
(37,data)
(38,data = myStruct.structFirst)
(39,data)
(40,exit(-1)
(41,data)
(42,dataBuffer)
(43,'A')
(44,free(dataBuffer)
(45,-1)
(46,malloc(data)
(47,char *)
(48,myStruct.structFirst)
(49,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^