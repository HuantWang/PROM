-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__fscanf_malloc_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(25,43,0)
(32,15,0)
(15,18,0)
(35,22,0)
(11,35,0)
(0,25,0)
(33,20,0)
(20,43,0)
(15,49,0)
(3,46,0)
(22,28,0)
(40,43,0)
(43,46,0)
(47,43,0)
(44,2,0)
(39,31,0)
(8,49,0)
(5,31,0)
(39,43,0)
(13,1,0)
(8,23,0)
(1,49,0)
(49,31,0)
(37,23,0)
(47,24,0)
(4,6,0)
(31,39,0)
(36,25,0)
(31,49,0)
(7,18,0)
(10,47,0)
(18,23,0)
(2,23,0)
(20,1,0)
(34,20,0)
(48,47,0)
(14,49,0)
(27,15,0)
(12,32,0)
(15,32,0)
(26,23,0)
(16,1,0)
(1,23,0)
(22,35,0)
(1,20,0)
(21,39,0)
(31,5,0)
(43,47,0)
(49,23,0)
(45,8,0)
(6,49,0)
(19,32,0)
(32,43,0)
(38,46,0)
(2,49,0)
(30,6,0)
(25,43,1)
(14,25,1)
(15,49,1)
(13,6,1)
(43,47,1)
(35,11,1)
(10,48,1)
(11,6,1)
(8,45,1)
(4,49,1)
(13,22,1)
(32,19,1)
(21,14,1)
(49,31,1)
(1,20,1)
(39,43,1)
(7,15,1)
(25,0,1)
(30,4,1)
(19,12,1)
(17,25,1)
(36,43,1)
(6,30,1)
(27,1,1)
(15,32,1)
(2,44,1)
(31,5,1)
(22,35,1)
(47,10,1)
(39,21,1)
(6,49,1)
(20,34,1)
(12,27,1)
(31,39,1)
(0,36,1)
(45,18,1)
(33,16,1)
(1,49,1)
(17,2,1)
(18,7,1)
(2,49,1)
(44,8,1)
(47,24,1)
(32,43,1)
(8,49,1)
(16,13,1)
(34,33,1)
(20,43,1)
(48,40,1)
(16,25,2)
(13,25,2)
(31,39,2)
(20,43,2)
(43,47,2)
(4,25,2)
(2,49,2)
(21,25,2)
(27,25,2)
(31,5,2)
(2,25,2)
(14,25,2)
(45,25,2)
(22,35,2)
(15,49,2)
(39,43,2)
(34,25,2)
(18,25,2)
(15,32,2)
(32,25,2)
(1,25,2)
(31,25,2)
(39,25,2)
(1,49,2)
(7,25,2)
(6,25,2)
(33,25,2)
(47,24,2)
(19,25,2)
(8,25,2)
(15,25,2)
(20,25,2)
(49,25,2)
(25,43,2)
(35,6,2)
(32,43,2)
(8,49,2)
(49,31,2)
(11,6,2)
(12,25,2)
(6,49,2)
(1,20,2)
(22,6,2)
(44,25,2)
(30,25,2)
-----------------------------------
(0,100)
(1,memset(dataBuffer, \'A\', data-1)
(2,free(dataBuffer)
(3,data)
(4,dataBuffer)
(5,char *)
(6,dataBuffer == NULL)
(7,'\\\\0')
(8,printLine(dataBuffer)
(9,memset(dataBuffer, 'A', data-1)
(10,2)
(11,1)
(12,data)
(13,dataBuffer)
(14,dataBuffer)
(15,dataBuffer[data-1])
(16,'A')
(17,RET)
(18,dataBuffer[data-1] = '\\\\0')
(19,1)
(20,data-1)
(21,data)
(22,exit(-1)
(23,)
(24,short dataArray[])
(25,data < 100)
(26,if (dataBuffer == NULL)
(27,dataBuffer)
(28,)
(29,\'\\\\0\')
(30,NULL)
(31,(char *)
(32,data-1)
(33,data)
(34,1)
(35,-1)
(36,data)
(37,dataBuffer)
(38,if (data < 100)
(39,malloc(data)
(40,data)
(41,dataBuffer[data-1] = \'\\\\0\')
(42,\'A\')
(43,data = dataArray[2])
(44,dataBuffer)
(45,dataBuffer)
(46,)
(47,dataArray[2])
(48,dataArray)
(49,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^