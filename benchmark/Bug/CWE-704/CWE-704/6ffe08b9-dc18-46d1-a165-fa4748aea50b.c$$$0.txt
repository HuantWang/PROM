-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
43,44
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,33,35,37,40,42,44,46,50,52,53,55,56,61,63,64,65,69,70,75,77,79,81,86,88,89,93,95
-----computeFrom-----
12,13
12,14
54,55
54,56
58,59
58,60
62,63
62,64
67,68
67,69
83,84
83,85
-----guardedBy-----
69,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_18_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);
source
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(4,26,0)
(47,26,0)
(3,26,0)
(11,46,0)
(12,37,0)
(45,29,0)
(46,29,0)
(13,29,0)
(35,3,0)
(18,27,0)
(20,16,0)
(36,38,0)
(38,21,0)
(44,39,0)
(39,29,0)
(19,21,0)
(42,21,0)
(39,26,0)
(16,30,0)
(25,2,0)
(9,26,0)
(24,46,0)
(40,34,0)
(23,10,0)
(14,2,0)
(1,30,0)
(6,39,0)
(22,37,0)
(46,23,0)
(33,9,0)
(30,7,0)
(37,9,0)
(17,23,0)
(31,7,0)
(28,16,0)
(41,38,0)
(0,21,0)
(27,38,0)
(2,27,0)
(37,21,0)
(7,38,0)
(30,16,0)
(43,39,0)
(15,38,0)
(34,38,0)
(5,3,0)
(34,29,0)
(26,21,0)
(27,2,0)
(9,37,0)
(39,10,0)
(29,38,0)
(46,26,0)
(32,27,0)
(19,26,1)
(20,1,1)
(16,28,1)
(2,25,1)
(46,11,1)
(44,3,1)
(22,12,1)
(23,17,1)
(24,39,1)
(14,32,1)
(11,24,1)
(34,29,1)
(32,18,1)
(7,31,1)
(40,3,1)
(25,14,1)
(1,27,1)
(3,35,1)
(27,2,1)
(40,23,1)
(17,46,1)
(30,16,1)
(9,33,1)
(6,44,1)
(26,47,1)
(5,7,1)
(46,29,1)
(18,29,1)
(35,5,1)
(34,40,1)
(45,37,1)
(39,43,1)
(13,45,1)
(8,34,1)
(37,9,1)
(39,26,1)
(12,19,1)
(9,26,1)
(33,22,1)
(3,26,1)
(46,26,1)
(39,29,1)
(47,4,1)
(43,6,1)
(28,20,1)
(31,30,1)
(29,13,1)
(39,3,2)
(17,3,2)
(46,3,2)
(46,26,2)
(43,3,2)
(46,29,2)
(37,9,2)
(23,3,2)
(11,3,2)
(39,29,2)
(9,26,2)
(30,16,2)
(24,3,2)
(34,29,2)
(39,26,2)
(44,3,2)
(27,2,2)
(3,26,2)
(6,3,2)
-----------------------------------
(0,source:)
(1,source)
(2,100-1)
(3,data < 100)
(4,data)
(5,data)
(6,source)
(7,source[100-1] = \\\'\\\\0\\\')
(8,RET)
(9,&data)
(10,)
(11,data)
(12,stdin)
(13,"")
(14,100)
(15,source)
(16,100-1)
(17,\\\'\\\\0\\\')
(18,source)
(19,goto source;)
(20,100)
(21,)
(22,"%hd")
(23,dest[data] = \\\'\\\\0\\\')
(24,dest)
(25,1)
(26,data = 0)
(27,memset(source, \\\'A\\\', 100-1)
(28,1)
(29,dest[100] = "")
(30,source[100-1])
(31,\\\'\\\\0\\\')
(32,\\\'A\\\')
(33,data)
(34,printLine(dest)
(35,100)
(36,dest)
(37,fscanf (stdin, "%hd", &data)
(38,)
(39,memmove(dest, source, data)
(40,dest)
(41,if (data < 100)
(42,data)
(43,data)
(44,dest)
(45,dest)
(46,dest[data])
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^