-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_09_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_09_bad(){    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_09_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memmove_09_bad
{    int data;    /* Initialize data */    data = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(27,17,0)
(8,56,0)
(55,56,0)
(25,1,0)
(17,32,0)
(18,25,0)
(24,14,0)
(22,14,0)
(51,49,0)
(49,46,0)
(58,16,0)
(23,32,0)
(49,11,0)
(40,56,0)
(2,49,0)
(42,40,0)
(47,20,0)
(15,58,0)
(60,32,0)
(57,8,0)
(48,32,0)
(12,48,0)
(62,63,0)
(10,16,0)
(9,48,0)
(30,16,0)
(39,1,0)
(54,13,0)
(35,1,0)
(44,40,0)
(6,22,0)
(63,16,0)
(40,63,0)
(36,11,0)
(19,48,0)
(41,52,0)
(0,14,0)
(55,11,0)
(45,54,0)
(3,56,0)
(64,43,0)
(63,62,0)
(17,58,0)
(33,58,0)
(26,41,0)
(8,63,0)
(28,62,0)
(7,11,0)
(37,55,0)
(29,8,0)
(8,32,0)
(56,55,0)
(46,49,0)
(8,54,0)
(38,63,0)
(59,49,0)
(11,41,0)
(32,58,0)
(25,58,0)
(31,25,0)
(14,22,0)
(48,56,0)
(43,58,0)
(1,25,0)
(56,5,0)
(20,53,0)
(21,46,0)
(48,13,0)
(48,63,0)
(61,41,0)
(22,43,0)
(4,58,0)
(42,44,1)
(46,21,1)
(48,56,1)
(3,46,1)
(28,38,1)
(56,55,1)
(40,63,1)
(55,11,1)
(48,63,1)
(45,8,1)
(57,48,1)
(31,32,1)
(9,12,1)
(36,7,1)
(24,6,1)
(60,56,1)
(60,34,1)
(51,11,1)
(7,34,1)
(23,60,1)
(0,24,1)
(50,17,1)
(59,2,1)
(12,40,1)
(63,62,1)
(8,56,1)
(40,56,1)
(54,45,1)
(32,23,1)
(34,63,1)
(27,54,1)
(22,14,1)
(46,49,1)
(20,47,1)
(11,36,1)
(64,22,1)
(21,49,1)
(37,3,1)
(19,9,1)
(27,40,1)
(49,59,1)
(8,32,1)
(17,32,1)
(8,63,1)
(44,43,1)
(35,39,1)
(29,57,1)
(39,18,1)
(40,42,1)
(17,27,1)
(47,46,1)
(43,64,1)
(49,11,1)
(60,20,1)
(25,1,1)
(48,19,1)
(14,0,1)
(1,35,1)
(48,32,1)
(8,29,1)
(18,31,1)
(6,25,1)
(62,28,1)
(2,51,1)
(55,37,1)
(3,46,2)
(48,56,2)
(48,32,2)
(49,34,2)
(8,40,2)
(12,40,2)
(47,46,2)
(56,46,2)
(21,34,2)
(36,34,2)
(8,63,2)
(55,46,2)
(54,40,2)
(48,63,2)
(8,32,2)
(46,49,2)
(40,56,2)
(55,11,2)
(17,32,2)
(45,40,2)
(37,46,2)
(25,1,2)
(46,34,2)
(8,56,2)
(9,40,2)
(22,14,2)
(29,40,2)
(19,40,2)
(51,34,2)
(56,55,2)
(59,34,2)
(63,62,2)
(7,34,2)
(20,46,2)
(49,11,2)
(57,40,2)
(48,40,2)
(2,34,2)
(11,34,2)
(40,63,2)
-----------------------------------
(0,1)
(1,100-1)
(2,CHAR_ARRAY_SIZE)
(3,data)
(4,source)
(5,)
(6,source)
(7,inputBuffer)
(8,dest[data])
(9,source)
(10,data)
(11,inputBuffer[CHAR_ARRAY_SIZE] = "")
(12,dest)
(13,)
(14,100-1)
(15,if (data < 100)
(16,)
(17,printLine(dest)
(18,\\\'A\\\')
(19,data)
(20,printLine("fgets()
(21,NULL)
(22,source[100-1])
(23,"")
(24,100)
(25,memset(source, \\\'A\\\', 100-1)
(26,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,dest)
(28,1)
(29,data)
(30,if(GLOBAL_CONST_TRUE)
(31,source)
(32,dest[100] = "")
(33,dest)
(34,GLOBAL_CONST_TRUE)
(35,1)
(36,"")
(37,inputBuffer)
(38,data)
(39,100)
(40,data < 100)
(41,)
(42,100)
(43,source[100-1] = \\\'\\\\0\\\')
(44,data)
(45,\\\'\\\\0\\\')
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,"fgets()
(48,memmove(dest, source, data)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,RET)
(51,inputBuffer)
(52,)
(53,)
(54,dest[data] = \\\'\\\\0\\\')
(55,atoi(inputBuffer)
(56,data = atoi(inputBuffer)
(57,dest)
(58,)
(59,stdin)
(60,dest)
(61,inputBuffer)
(62,-1)
(63,data = -1)
(64,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^