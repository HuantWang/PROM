-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__short_rand_15_bad()
{
    short data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a random number */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
35,36
36,37
36,38
37,38
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
49,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,32,33,34,38,39,40,44,46,50,51,53,57,59
-----computeFrom-----
12,13
12,14
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__short_rand_15_bad(){    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a random number */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__short_rand_15_bad()
CWE197_Numeric_Truncation_Error__short_rand_15_bad
{    short data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a random number */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
short data;
short data;
short
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a random number */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a random number */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(26,12,0)
(5,11,0)
(26,7,0)
(19,3,0)
(8,22,0)
(26,11,0)
(12,25,0)
(13,12,0)
(20,3,0)
(29,8,0)
(10,0,0)
(26,20,0)
(2,3,0)
(23,26,0)
(7,26,0)
(4,11,0)
(6,0,0)
(8,29,0)
(1,3,0)
(22,8,0)
(17,20,0)
(11,27,0)
(16,27,0)
(25,12,0)
(28,3,0)
(8,20,0)
(4,27,0)
(20,8,0)
(18,4,0)
(9,25,0)
(14,28,0)
(12,0,0)
(27,0,0)
(11,26,0)
(15,3,0)
(8,29,1)
(26,20,1)
(28,14,1)
(5,1,1)
(25,9,1)
(14,24,1)
(1,20,1)
(24,12,1)
(18,11,1)
(26,12,1)
(11,26,1)
(22,17,1)
(8,22,1)
(21,4,1)
(26,7,1)
(17,24,1)
(20,8,1)
(4,11,1)
(12,25,1)
(19,28,1)
(26,23,1)
(4,18,1)
(5,19,1)
(9,13,1)
(23,5,1)
(4,11,2)
(26,12,2)
(26,20,2)
(20,8,2)
(8,29,2)
(19,24,2)
(28,24,2)
(1,24,2)
(22,24,2)
(11,26,2)
(14,24,2)
(8,22,2)
(20,24,2)
(26,7,2)
(8,24,2)
(12,25,2)
(17,24,2)
-----------------------------------
(0,)
(1,break;)
(2,case 6:)
(3,)
(4,printHexCharLine(charData)
(5,charData)
(6,data)
(7,char)
(8,(short)
(9,1)
(10,switch(6)
(11,charData = (char)
(12,data = -1)
(13,data)
(14,"Benign, fixed string")
(15,default:)
(16,charData)
(17,data)
(18,charData)
(19,break;)
(20,data = (short)
(21,RET)
(22,RAND32()
(23,data)
(24,6)
(25,-1)
(26,(char)
(27,)
(28,printLine("Benign, fixed string")
(29,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^