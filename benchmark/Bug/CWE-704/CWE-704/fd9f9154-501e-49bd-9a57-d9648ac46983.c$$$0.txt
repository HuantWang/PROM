-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_04_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
28,31
28,32
28,33
28,34
29,30
30,31
30,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
39,42
41,42
43,44
45,46
46,47
46,48
46,49
46,50
47,48
49,50
52,53
52,54
55,56
56,57
56,58
57,58
57,59
58,59
60,61
60,62
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,33,35,38,40,42,44,48,50,51,53,54,59,61,62,63,67,68,73,75,77,79,84,86,87,91,93
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
56,57
56,58
60,61
60,62
65,66
65,67
81,82
81,83
-----guardedBy-----
67,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_04_bad(){    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_04_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_04_bad
{    int data;    /* Initialize data */    data = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,27,0)
(13,32,0)
(45,7,0)
(12,41,0)
(23,12,0)
(33,47,0)
(47,33,0)
(26,33,0)
(31,45,0)
(34,13,0)
(21,20,0)
(43,34,0)
(22,3,0)
(0,29,0)
(7,14,0)
(5,14,0)
(9,45,0)
(29,14,0)
(36,41,0)
(15,27,0)
(28,34,0)
(45,13,0)
(37,3,0)
(3,12,0)
(13,25,0)
(47,5,0)
(1,14,0)
(3,38,0)
(39,20,0)
(42,38,0)
(41,12,0)
(17,45,0)
(3,13,0)
(44,27,0)
(45,46,0)
(10,33,0)
(11,14,0)
(4,7,0)
(24,44,0)
(27,44,0)
(18,5,0)
(2,7,0)
(38,46,0)
(14,20,0)
(19,13,0)
(8,14,0)
(29,7,0)
(44,14,0)
(45,12,0)
(32,13,0)
(34,12,0)
(12,20,0)
(3,7,0)
(16,44,0)
(35,47,0)
(45,12,1)
(27,15,1)
(18,47,1)
(31,34,1)
(38,42,1)
(3,7,1)
(3,13,1)
(34,12,1)
(19,40,1)
(44,27,1)
(36,23,1)
(0,38,1)
(45,9,1)
(12,41,1)
(2,13,1)
(3,12,1)
(4,2,1)
(16,24,1)
(40,12,1)
(24,7,1)
(32,19,1)
(45,7,1)
(29,7,1)
(29,0,1)
(45,13,1)
(37,45,1)
(5,18,1)
(28,43,1)
(35,44,1)
(30,16,1)
(6,29,1)
(41,36,1)
(43,5,1)
(2,40,1)
(47,33,1)
(33,26,1)
(10,35,1)
(22,37,1)
(15,30,1)
(17,31,1)
(9,17,1)
(34,13,1)
(26,10,1)
(7,4,1)
(3,22,1)
(42,3,1)
(13,32,1)
(34,28,1)
(0,34,1)
(44,27,2)
(45,34,2)
(13,32,2)
(45,12,2)
(12,41,2)
(37,34,2)
(45,13,2)
(34,12,2)
(45,7,2)
(3,13,2)
(47,33,2)
(13,40,2)
(29,7,2)
(38,34,2)
(19,40,2)
(17,34,2)
(34,13,2)
(3,34,2)
(3,12,2)
(22,34,2)
(3,7,2)
(9,34,2)
(42,34,2)
(31,34,2)
(32,40,2)
-----------------------------------
(0,dest)
(1,source)
(2,dest)
(3,dest[data])
(4,"")
(5,source[100-1] = \\\'\\\\0\\\')
(6,RET)
(7,dest[100] = "")
(8,dest)
(9,data)
(10,100)
(11,if (data < 100)
(12,data = -1)
(13,data = RAND32()
(14,)
(15,1)
(16,\\\'A\\\')
(17,source)
(18,\\\'\\\\0\\\')
(19,data)
(20,)
(21,data)
(22,data)
(23,data)
(24,source)
(25,)
(26,1)
(27,100-1)
(28,100)
(29,printLine(dest)
(30,100)
(31,dest)
(32,RAND32()
(33,100-1)
(34,data < 100)
(35,source)
(36,1)
(37,dest)
(38,dest[data] = \\\'\\\\0\\\')
(39,if(STATIC_CONST_TRUE)
(40,STATIC_CONST_TRUE)
(41,-1)
(42,\\\'\\\\0\\\')
(43,data)
(44,memset(source, \\\'A\\\', 100-1)
(45,memcpy(dest, source, data)
(46,)
(47,source[100-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^