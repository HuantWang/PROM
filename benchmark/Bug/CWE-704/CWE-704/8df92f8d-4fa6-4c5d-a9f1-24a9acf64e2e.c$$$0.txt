-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_bad()
{
    int data;
    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
82,84
83,84
83,85
84,85
87,88
87,89
87,90
87,91
87,92
87,93
88,89
89,90
89,91
91,92
91,93
91,94
94,95
95,96
95,97
96,97
96,98
98,99
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
109,110
111,112
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
119,122
119,123
120,121
122,123
125,126
125,127
126,127
129,130
130,131
130,132
131,132
131,133
132,133
134,135
134,136
135,136
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,56,61,62,67,68,70,74,76,80,81,85,86,90,92,93,97,99,102,104,108,110,115,117,121,123,124,127,128,133,136,137,138,142,144,148,150
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
83,84
83,85
106,107
106,108
125,126
125,127
130,131
130,132
134,135
134,136
-----guardedBy-----
40,56
85,136
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_bad(){    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_bad
{    int data;    CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType myUnion;    /* Initialize data */    data = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType myUnion;
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(44,62,0)
(76,70,0)
(40,44,0)
(47,23,0)
(61,47,0)
(18,75,0)
(74,70,0)
(28,13,0)
(68,75,0)
(4,47,0)
(1,47,0)
(2,42,0)
(24,70,0)
(72,67,0)
(60,17,0)
(56,62,0)
(14,42,0)
(66,19,0)
(69,24,0)
(25,36,0)
(67,13,0)
(53,52,0)
(10,25,0)
(19,13,0)
(57,23,0)
(28,52,0)
(42,2,0)
(62,44,0)
(54,1,0)
(58,47,0)
(12,13,0)
(70,24,0)
(24,23,0)
(11,23,0)
(3,23,0)
(26,58,0)
(11,47,0)
(22,13,0)
(5,65,0)
(61,23,0)
(4,29,0)
(38,58,0)
(35,19,0)
(15,59,0)
(41,35,0)
(29,4,0)
(30,29,0)
(8,35,0)
(49,56,0)
(67,28,0)
(24,47,0)
(39,10,0)
(70,62,0)
(31,47,0)
(21,42,0)
(7,62,0)
(62,59,0)
(63,29,0)
(42,35,0)
(38,62,0)
(20,1,0)
(58,38,0)
(29,62,0)
(10,35,0)
(59,13,0)
(55,42,0)
(45,24,0)
(33,28,0)
(75,18,0)
(73,56,0)
(32,11,0)
(65,67,0)
(9,38,0)
(58,26,0)
(4,57,0)
(43,61,0)
(52,28,0)
(50,25,0)
(46,4,0)
(47,58,0)
(64,19,0)
(0,59,0)
(18,37,0)
(51,2,0)
(67,25,0)
(34,57,0)
(25,10,0)
(71,23,0)
(27,60,0)
(6,44,0)
(16,65,0)
(38,9,1)
(1,47,1)
(2,51,1)
(32,57,1)
(50,2,1)
(70,74,1)
(39,50,1)
(48,61,1)
(53,33,1)
(67,25,1)
(74,76,1)
(73,62,1)
(43,11,1)
(40,6,1)
(41,8,1)
(10,35,1)
(51,42,1)
(35,41,1)
(42,35,1)
(8,28,1)
(67,28,1)
(5,16,1)
(70,62,1)
(60,27,1)
(49,73,1)
(9,31,1)
(56,62,1)
(63,46,1)
(10,39,1)
(1,54,1)
(28,52,1)
(16,25,1)
(25,10,1)
(65,5,1)
(72,65,1)
(27,2,1)
(29,30,1)
(42,55,1)
(55,14,1)
(24,47,1)
(67,72,1)
(61,47,1)
(57,34,1)
(30,63,1)
(2,42,1)
(38,62,1)
(58,26,1)
(29,62,1)
(75,68,1)
(76,69,1)
(21,35,1)
(6,7,1)
(46,24,1)
(31,56,1)
(45,18,1)
(16,60,1)
(52,53,1)
(7,67,1)
(54,20,1)
(62,44,1)
(45,1,1)
(44,40,1)
(24,70,1)
(20,47,1)
(11,47,1)
(61,43,1)
(4,47,1)
(34,4,1)
(11,32,1)
(58,38,1)
(14,21,1)
(69,45,1)
(68,1,1)
(56,49,1)
(48,56,1)
(47,58,1)
(18,75,1)
(4,29,1)
(27,2,2)
(29,62,2)
(4,29,2)
(43,56,2)
(34,56,2)
(10,35,2)
(47,58,2)
(9,56,2)
(62,44,2)
(10,2,2)
(45,56,2)
(20,56,2)
(61,47,2)
(47,56,2)
(58,26,2)
(24,70,2)
(74,56,2)
(57,56,2)
(60,2,2)
(69,56,2)
(11,56,2)
(58,56,2)
(29,56,2)
(25,2,2)
(24,47,2)
(70,62,2)
(38,62,2)
(58,38,2)
(56,62,2)
(67,28,2)
(67,25,2)
(1,47,2)
(50,2,2)
(25,10,2)
(68,1,2)
(18,75,2)
(2,42,2)
(76,56,2)
(63,56,2)
(28,52,2)
(38,56,2)
(39,2,2)
(42,35,2)
(30,56,2)
(32,56,2)
(1,56,2)
(54,56,2)
(61,56,2)
(70,56,2)
(31,56,2)
(24,56,2)
(11,47,2)
(18,1,2)
(4,47,2)
(75,1,2)
(46,56,2)
(4,56,2)
-----------------------------------
(0,data)
(1,dataBuffer == NULL)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,dataBuffer)
(4,dataBuffer[data-1])
(5,unionFirst)
(6,myUnion)
(7,data)
(8,inputBuffer)
(9,data)
(10,atoi(inputBuffer)
(11,printLine(dataBuffer)
(12,data)
(13,)
(14,CHAR_ARRAY_SIZE)
(15,if (data < 100)
(16,myUnion)
(17,)
(18,exit(-1)
(19,)
(20,dataBuffer)
(21,inputBuffer)
(22,myUnion)
(23,)
(24,memset(dataBuffer, \\\'A\\\', data-1)
(25,data = atoi(inputBuffer)
(26,char *)
(27,"fgets()
(28,data = -1)
(29,data-1)
(30,1)
(31,dataBuffer)
(32,dataBuffer)
(33,data)
(34,\\\'\\\\0\\\')
(35,inputBuffer[CHAR_ARRAY_SIZE] = "")
(36,)
(37,)
(38,malloc(data)
(39,inputBuffer)
(40,unionSecond)
(41,"")
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,dataBuffer)
(44,myUnion.unionSecond)
(45,dataBuffer)
(46,dataBuffer)
(47,* dataBuffer = (char *)
(48,RET)
(49,100)
(50,data)
(51,NULL)
(52,-1)
(53,1)
(54,NULL)
(55,stdin)
(56,data < 100)
(57,dataBuffer[data-1] = \\\'\\\\0\\\')
(58,(char *)
(59,)
(60,printLine("fgets()
(61,free(dataBuffer)
(62,data = myUnion.unionSecond)
(63,data)
(64,inputBuffer)
(65,myUnion.unionFirst)
(66,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(67,myUnion.unionFirst = data)
(68,1)
(69,\\\'A\\\')
(70,data-1)
(71,if (dataBuffer == NULL)
(72,data)
(73,data)
(74,1)
(75,-1)
(76,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^