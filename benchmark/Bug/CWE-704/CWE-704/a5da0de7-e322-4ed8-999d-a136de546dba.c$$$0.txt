-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType myStruct)
{
    int data = myStruct.structFirst;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,7,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType myStruct){    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67b_badSink(CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType myStruct)
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67b_badSink
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType myStruct
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType
myStruct
myStruct
{    int data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = myStruct.structFirst;
int data = myStruct.structFirst;
int
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,45,0)
(5,49,0)
(40,27,0)
(20,8,0)
(6,27,0)
(16,22,0)
(7,41,0)
(13,17,0)
(48,5,0)
(44,24,0)
(48,49,0)
(8,5,0)
(41,7,0)
(10,24,0)
(19,0,0)
(36,45,0)
(7,45,0)
(0,49,0)
(30,9,0)
(8,39,0)
(3,13,0)
(31,15,0)
(9,5,0)
(17,13,0)
(39,8,0)
(29,20,0)
(2,5,0)
(18,16,0)
(1,41,0)
(41,5,0)
(17,43,0)
(27,15,0)
(35,15,0)
(5,8,0)
(4,49,0)
(38,11,0)
(20,45,0)
(27,5,0)
(37,7,0)
(47,34,0)
(15,45,0)
(21,34,0)
(14,7,0)
(16,45,0)
(45,16,0)
(15,27,0)
(45,24,0)
(25,48,0)
(11,5,0)
(11,49,0)
(33,9,0)
(8,20,0)
(41,0,0)
(27,49,0)
(12,16,0)
(26,49,0)
(33,30,1)
(30,5,1)
(6,9,1)
(40,6,1)
(19,41,1)
(25,0,1)
(6,17,1)
(5,8,1)
(41,5,1)
(16,12,1)
(28,11,1)
(7,45,1)
(12,18,1)
(37,14,1)
(34,47,1)
(13,3,1)
(3,9,1)
(0,19,1)
(15,45,1)
(8,20,1)
(9,5,1)
(20,29,1)
(11,38,1)
(48,5,1)
(45,16,1)
(35,31,1)
(1,27,1)
(8,39,1)
(21,45,1)
(41,7,1)
(17,13,1)
(9,33,1)
(2,34,1)
(14,1,1)
(16,22,1)
(11,5,1)
(38,48,1)
(34,45,1)
(47,21,1)
(15,35,1)
(7,37,1)
(29,2,1)
(31,40,1)
(20,45,1)
(28,34,1)
(18,36,1)
(27,5,1)
(48,25,1)
(27,15,1)
(7,45,2)
(17,13,2)
(34,45,2)
(1,34,2)
(29,34,2)
(27,5,2)
(15,45,2)
(20,34,2)
(41,7,2)
(41,5,2)
(9,34,2)
(40,34,2)
(6,34,2)
(37,34,2)
(30,34,2)
(38,34,2)
(3,9,2)
(9,5,2)
(15,34,2)
(41,34,2)
(35,34,2)
(25,34,2)
(8,34,2)
(45,16,2)
(27,34,2)
(8,39,2)
(27,15,2)
(16,22,2)
(2,34,2)
(31,34,2)
(33,34,2)
(14,34,2)
(11,5,2)
(20,45,2)
(0,34,2)
(19,34,2)
(7,34,2)
(17,9,2)
(11,34,2)
(5,34,2)
(5,8,2)
(48,34,2)
(8,20,2)
(48,5,2)
(13,9,2)
-----------------------------------
(0,dataBuffer[data-1] = \'\\\\0\')
(1,dataBuffer)
(2,dataBuffer)
(3,1)
(4,if (dataBuffer == NULL)
(5,* dataBuffer = (char *)
(6,dataBuffer)
(7,data-1)
(8,(char *)
(9,dataBuffer == NULL)
(10,if (data < 100)
(11,free(dataBuffer)
(12,structFirst)
(13,-1)
(14,data)
(15,data-1)
(16,myStruct.structFirst)
(17,exit(-1)
(18,myStruct)
(19,'\\\\0')
(20,malloc(data)
(21,data)
(22,CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_67_structType myStruct)
(23,dataBuffer[data-1] = '\\\\0')
(24,)
(25,dataBuffer)
(26,dataBuffer)
(27,memset(dataBuffer, \'A\', data-1)
(28,RET)
(29,data)
(30,dataBuffer)
(31,data)
(32,memset(dataBuffer, 'A', data-1)
(33,NULL)
(34,data < 100)
(35,1)
(36,data)
(37,1)
(38,dataBuffer)
(39,char *)
(40,\'A\')
(41,dataBuffer[data-1])
(42,\'\\\\0\')
(43,)
(44,data)
(45,data = myStruct.structFirst)
(46,'A')
(47,100)
(48,printLine(dataBuffer)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^