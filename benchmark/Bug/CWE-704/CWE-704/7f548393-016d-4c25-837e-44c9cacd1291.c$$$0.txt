-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_bad()
{
    short data;
    CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* FLAW: Use a value input from the console using fscanf() */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
56,59
56,60
56,61
56,62
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,55,59,61,62,66,68,71,73,77,79,84,86,90,92,93,96,97,102,105,106,107,111,113,117,119
-----computeFrom-----
18,19
18,20
33,34
33,35
52,53
52,54
75,76
75,77
94,95
94,96
99,100
99,101
103,104
103,105
-----guardedBy-----
54,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_bad(){    short data;    CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_bad
{    short data;    CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* FLAW: Use a value input from the console using fscanf() */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
short data;
short data;
short
data
data
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType myUnion;
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType
CWE194_Unexpected_Sign_Extension__fscanf_malloc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(41,26,0)
(1,26,0)
(38,33,0)
(46,26,0)
(23,59,0)
(33,34,0)
(57,34,0)
(54,20,0)
(22,9,0)
(53,31,0)
(29,25,0)
(10,25,0)
(24,13,0)
(17,26,0)
(13,37,0)
(19,9,0)
(56,13,0)
(60,55,0)
(36,26,0)
(55,8,0)
(0,1,0)
(46,1,0)
(40,38,0)
(27,20,0)
(5,1,0)
(25,20,0)
(48,55,0)
(28,46,0)
(41,1,0)
(9,19,0)
(58,37,0)
(50,9,0)
(6,4,0)
(32,33,0)
(42,34,0)
(19,1,0)
(13,24,0)
(8,55,0)
(15,5,0)
(45,41,0)
(24,8,0)
(14,24,0)
(19,26,0)
(51,57,0)
(59,8,0)
(47,53,0)
(16,7,0)
(4,8,0)
(57,25,0)
(9,8,0)
(52,24,0)
(43,59,0)
(13,1,0)
(4,5,0)
(3,8,0)
(11,44,0)
(25,57,0)
(31,35,0)
(37,26,0)
(5,15,0)
(5,4,0)
(31,53,0)
(30,19,0)
(1,5,0)
(33,20,0)
(34,20,0)
(44,20,0)
(8,44,0)
(7,1,0)
(49,7,0)
(39,38,0)
(21,44,0)
(2,19,0)
(18,34,0)
(1,5,1)
(2,30,1)
(22,2,1)
(52,14,1)
(8,55,1)
(23,8,1)
(5,15,1)
(25,57,1)
(33,32,1)
(38,40,1)
(28,41,1)
(59,43,1)
(48,60,1)
(45,37,1)
(19,1,1)
(57,34,1)
(33,34,1)
(24,52,1)
(41,45,1)
(12,59,1)
(12,46,1)
(55,48,1)
(47,7,1)
(9,8,1)
(13,24,1)
(19,9,1)
(9,50,1)
(40,39,1)
(14,56,1)
(7,49,1)
(56,19,1)
(50,22,1)
(30,7,1)
(37,58,1)
(42,18,1)
(5,4,1)
(3,33,1)
(53,47,1)
(34,42,1)
(49,16,1)
(4,8,1)
(58,13,1)
(10,29,1)
(16,1,1)
(7,1,1)
(41,1,1)
(13,1,1)
(24,8,1)
(57,51,1)
(46,28,1)
(29,34,1)
(39,25,1)
(32,38,1)
(46,1,1)
(43,23,1)
(0,59,1)
(59,8,1)
(31,53,1)
(4,6,1)
(60,3,1)
(30,31,1)
(51,10,1)
(6,0,1)
(5,15,2)
(4,8,2)
(41,1,2)
(53,7,2)
(7,59,2)
(47,7,2)
(19,9,2)
(31,53,2)
(13,24,2)
(49,59,2)
(16,59,2)
(24,8,2)
(50,59,2)
(19,1,2)
(4,59,2)
(1,59,2)
(58,59,2)
(0,59,2)
(24,59,2)
(1,5,2)
(56,59,2)
(22,59,2)
(37,59,2)
(57,34,2)
(6,59,2)
(46,59,2)
(41,59,2)
(14,59,2)
(13,1,2)
(52,59,2)
(8,55,2)
(7,1,2)
(28,59,2)
(13,59,2)
(19,59,2)
(33,34,2)
(30,59,2)
(59,8,2)
(5,4,2)
(9,8,2)
(25,57,2)
(5,59,2)
(31,7,2)
(2,59,2)
(46,1,2)
(9,59,2)
(45,59,2)
-----------------------------------
(0,dataBuffer)
(1,* dataBuffer = (char *)
(2,\\\'A\\\')
(3,data)
(4,malloc(data)
(5,(char *)
(6,data)
(7,dataBuffer == NULL)
(8,data = myUnion.unionSecond)
(9,data-1)
(10,"%hd")
(11,data)
(12,RET)
(13,dataBuffer[data-1])
(14,data)
(15,char *)
(16,dataBuffer)
(17,dataBuffer)
(18,data)
(19,memset(dataBuffer, \\\'A\\\', data-1)
(20,)
(21,if (data < 100)
(22,data)
(23,data)
(24,data-1)
(25,fscanf (stdin, "%hd", &data)
(26,)
(27,data)
(28,dataBuffer)
(29,stdin)
(30,dataBuffer)
(31,exit(-1)
(32,data)
(33,myUnion.unionFirst = data)
(34,data = 0)
(35,)
(36,if (dataBuffer == NULL)
(37,dataBuffer[data-1] = \\\'\\\\0\\\')
(38,myUnion.unionFirst)
(39,myUnion)
(40,unionFirst)
(41,printLine(dataBuffer)
(42,0)
(43,100)
(44,)
(45,dataBuffer)
(46,free(dataBuffer)
(47,1)
(48,unionSecond)
(49,NULL)
(50,1)
(51,data)
(52,1)
(53,-1)
(54,myUnion)
(55,myUnion.unionSecond)
(56,dataBuffer)
(57,&data)
(58,\\\'\\\\0\\\')
(59,data < 100)
(60,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^