-----label-----
1
-----code-----
static short badSource(short data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a number input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
54,55
55,56
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,42,45,47,52,53,56
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a number input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(9,15,0)
(1,21,0)
(24,23,0)
(17,8,0)
(10,16,0)
(20,15,0)
(7,4,0)
(14,3,0)
(19,25,0)
(18,13,0)
(25,8,0)
(22,18,0)
(2,23,0)
(15,21,0)
(12,15,0)
(16,14,0)
(23,13,0)
(5,18,0)
(16,10,0)
(8,18,0)
(0,8,0)
(6,14,0)
(14,11,0)
(26,7,0)
(16,25,0)
(21,15,0)
(25,16,0)
(23,11,0)
(14,16,0)
(23,14,0)
(15,8,0)
(21,15,1)
(23,24,1)
(25,19,1)
(25,8,1)
(14,16,1)
(15,12,1)
(15,8,1)
(19,6,1)
(20,9,1)
(24,7,1)
(7,26,1)
(23,14,1)
(2,23,1)
(14,11,1)
(26,21,1)
(24,14,1)
(9,8,1)
(1,15,1)
(21,1,1)
(16,25,1)
(6,21,1)
(12,20,1)
(0,17,1)
(23,11,1)
(16,10,1)
(8,0,1)
(26,21,2)
(6,21,2)
(14,16,2)
(2,23,2)
(16,25,2)
(7,21,2)
(25,8,2)
(16,21,2)
(19,21,2)
(21,15,2)
(25,21,2)
(23,14,2)
(14,21,2)
(16,10,2)
(23,11,2)
(15,8,2)
(14,11,2)
-----------------------------------
(0,"")
(1,NULL)
(2,RET)
(3,)
(4,)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,data)
(7,printLine("fgets()
(8,inputBuffer[CHAR_ARRAY_SIZE] = "")
(9,inputBuffer)
(10,short)
(11,short data)
(12,stdin)
(13,)
(14,data = (short)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,(short)
(17,inputBuffer)
(18,)
(19,inputBuffer)
(20,CHAR_ARRAY_SIZE)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,inputBuffer)
(23,return data;)
(24,data)
(25,atoi(inputBuffer)
(26,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^