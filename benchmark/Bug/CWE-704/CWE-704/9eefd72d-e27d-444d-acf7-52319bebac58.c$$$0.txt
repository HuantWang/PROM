-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
39,40
39,41
39,42
39,43
39,44
39,45
40,41
41,42
41,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
75,77
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,37,38,42,44,46,49,51,53,55,59,61,62,64,65,70,72,73,74,78,79,84,86,88,90,95,97,98,102,104
-----computeFrom-----
12,13
12,14
33,34
33,35
36,37
36,38
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
92,93
92,94
-----guardedBy-----
78,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_memmove_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_memmove_12_bad()
CWE194_Unexpected_Sign_Extension__fscanf_memmove_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(9,32,0)
(51,4,0)
(52,4,0)
(2,5,0)
(43,0,0)
(51,36,0)
(4,32,0)
(14,29,0)
(3,39,0)
(7,16,0)
(35,7,0)
(29,38,0)
(1,51,0)
(5,9,0)
(45,52,0)
(7,35,0)
(19,38,0)
(34,50,0)
(5,2,0)
(12,50,0)
(8,36,0)
(17,32,0)
(0,39,0)
(23,5,0)
(50,12,0)
(36,46,0)
(25,50,0)
(22,4,0)
(11,9,0)
(22,7,0)
(44,27,0)
(18,39,0)
(40,4,0)
(24,12,0)
(38,27,0)
(29,7,0)
(28,32,0)
(31,27,0)
(0,38,0)
(51,7,0)
(47,22,0)
(49,38,0)
(51,38,0)
(52,32,0)
(22,38,0)
(50,32,0)
(37,32,0)
(10,7,0)
(30,4,0)
(20,51,0)
(13,22,0)
(15,22,0)
(22,46,0)
(53,35,0)
(33,2,0)
(32,27,0)
(48,29,0)
(39,54,0)
(42,35,0)
(41,12,0)
(6,2,0)
(39,0,0)
(4,30,1)
(3,18,1)
(52,4,1)
(12,41,1)
(0,43,1)
(22,38,1)
(24,34,1)
(22,7,1)
(53,10,1)
(11,5,1)
(30,40,1)
(8,51,1)
(45,29,1)
(29,48,1)
(5,2,1)
(15,13,1)
(38,49,1)
(22,4,1)
(6,23,1)
(40,7,1)
(41,24,1)
(48,14,1)
(9,11,1)
(0,38,1)
(51,38,1)
(47,29,1)
(2,33,1)
(49,19,1)
(33,6,1)
(35,42,1)
(51,20,1)
(34,25,1)
(23,50,1)
(10,26,1)
(52,45,1)
(14,9,1)
(7,35,1)
(40,39,1)
(42,53,1)
(45,36,1)
(20,1,1)
(36,8,1)
(39,0,1)
(51,7,1)
(26,38,1)
(29,7,1)
(13,47,1)
(25,4,1)
(18,26,1)
(50,12,1)
(51,4,1)
(43,3,1)
(1,22,1)
(22,15,1)
(21,52,1)
(29,38,1)
(22,4,2)
(36,29,2)
(22,38,2)
(53,26,2)
(0,26,2)
(51,38,2)
(1,29,2)
(22,29,2)
(8,29,2)
(51,4,2)
(43,26,2)
(39,26,2)
(18,26,2)
(10,26,2)
(51,29,2)
(5,2,2)
(29,7,2)
(3,26,2)
(42,26,2)
(52,4,2)
(35,26,2)
(47,29,2)
(50,12,2)
(51,7,2)
(0,38,2)
(20,29,2)
(13,29,2)
(29,38,2)
(22,7,2)
(15,29,2)
(7,26,2)
(7,35,2)
(39,0,2)
-----------------------------------
(0,&data)
(1,dest)
(2,100-1)
(3,"%hd")
(4,dest[100] = "")
(5,source[100-1])
(6,100)
(7,data = 100-1)
(8,\\\'\\\\0\\\')
(9,source[100-1] = \\\'\\\\0\\\')
(10,data)
(11,\\\'\\\\0\\\')
(12,100-1)
(13,source)
(14,data)
(15,data)
(16,)
(17,dest)
(18,stdin)
(19,data)
(20,data)
(21,RET)
(22,memmove(dest, source, data)
(23,source)
(24,100)
(25,source)
(26,globalReturnsTrueOrFalse()
(27,)
(28,source)
(29,data < 100)
(30,"")
(31,if(globalReturnsTrueOrFalse()
(32,)
(33,1)
(34,\\\'A\\\')
(35,100-1)
(36,dest[data] = \\\'\\\\0\\\')
(37,if (data < 100)
(38,data = 0)
(39,fscanf (stdin, "%hd", &data)
(40,dest)
(41,1)
(42,1)
(43,data)
(44,data)
(45,dest)
(46,)
(47,dest)
(48,100)
(49,0)
(50,memset(source, \\\'A\\\', 100-1)
(51,dest[data])
(52,printLine(dest)
(53,100)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^