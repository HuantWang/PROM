-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66_bad()
{
    short data;
    short dataArray[5];
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* FLAW: Use a value input from the network */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* put data in array */
    dataArray[2] = data;
    CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
23,28
23,29
23,30
24,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
57,59
58,59
58,60
58,61
58,62
58,63
58,64
58,65
58,66
58,67
58,68
58,69
58,70
59,60
60,61
60,62
61,62
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
85,86
88,89
89,90
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
149,150
149,151
150,151
152,153
152,154
152,155
152,156
152,157
153,154
155,156
157,158
159,160
159,161
160,161
164,165
164,166
165,166
165,167
166,167
166,168
167,168
169,170
171,172
171,173
172,173
175,176
177,178
178,179
178,180
179,180
179,181
180,181
182,183
185,186
186,187
186,188
187,188
189,190
189,191
190,191
192,193
194,195
194,196
194,197
195,196
195,197
196,197
196,198
197,198
199,200
201,202
201,203
202,203
204,205
206,207
207,208
208,209
208,210
209,210
211,212
213,214
214,215
215,216
215,217
216,217
218,219
221,222
221,223
222,223
222,224
223,224
225,226
227,228
228,229
229,230
229,231
230,231
232,233
234,235
235,236
235,237
236,237
236,238
237,238
240,241
242,243
243,244
243,245
244,245
246,247
-----nextToken-----
2,4,8,10,13,15,17,21,22,26,28,31,33,37,39,43,45,48,51,53,56,62,65,67,69,71,75,77,79,83,86,87,91,96,97,99,105,106,107,110,112,117,118,121,123,128,130,134,136,139,143,145,147,151,154,156,158,161,162,163,168,170,173,174,176,181,183,184,188,191,193,198,200,203,205,210,212,217,219,220,224,226,231,233,238,239,241,245,247
-----computeFrom-----
19,20
19,21
60,61
60,62
73,74
73,75
93,94
93,95
101,102
101,103
114,115
114,116
125,126
125,127
149,150
149,151
159,160
159,161
165,166
165,167
166,167
166,168
171,172
171,173
178,179
178,180
186,187
186,188
195,196
195,197
196,197
196,198
201,202
201,203
208,209
208,210
215,216
215,217
222,223
222,224
235,236
235,237
-----guardedBy-----
224,233
-----guardedByNegation-----
203,219
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66_bad(){    short data;    short dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray);}
void
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66_bad()
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66_bad
{    short data;    short dataArray[5];    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* put data in array */    dataArray[2] = data;    CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray);}
short data;
short data;
short
data
data
short dataArray[5];
short dataArray[5];
short
dataArray[5]
dataArray
[5]
5
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray);
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray)
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink
CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink
dataArray
dataArray
-----joern-----
(88,57,0)
(24,120,0)
(11,22,0)
(83,128,0)
(109,65,0)
(95,41,0)
(11,2,0)
(59,39,0)
(82,108,0)
(140,109,0)
(139,21,0)
(72,61,0)
(52,95,0)
(7,62,0)
(50,144,0)
(136,67,0)
(116,24,0)
(98,108,0)
(133,72,0)
(0,84,0)
(5,62,0)
(66,21,0)
(113,125,0)
(125,68,0)
(41,95,0)
(37,39,0)
(96,132,0)
(16,79,0)
(100,88,0)
(53,78,0)
(112,5,0)
(122,128,0)
(23,108,0)
(129,1,0)
(56,137,0)
(6,99,0)
(19,120,0)
(18,95,0)
(123,72,0)
(121,9,0)
(62,79,0)
(132,37,0)
(73,105,0)
(63,49,0)
(29,2,0)
(76,108,0)
(146,72,0)
(49,65,0)
(21,108,0)
(120,24,0)
(54,137,0)
(138,25,0)
(41,49,0)
(72,65,0)
(31,12,0)
(81,74,0)
(69,129,0)
(35,109,0)
(44,21,0)
(149,108,0)
(33,80,0)
(118,62,0)
(2,80,0)
(137,5,0)
(42,62,0)
(152,79,0)
(115,46,0)
(2,29,0)
(77,99,0)
(106,97,0)
(97,149,0)
(88,100,0)
(141,49,0)
(134,15,0)
(14,44,0)
(65,108,0)
(110,119,0)
(75,74,0)
(89,22,0)
(121,22,0)
(93,62,0)
(21,139,0)
(47,149,0)
(95,65,0)
(102,61,0)
(45,108,0)
(39,37,0)
(40,104,0)
(21,44,0)
(27,104,0)
(127,97,0)
(71,100,0)
(137,22,0)
(111,144,0)
(26,144,0)
(12,79,0)
(55,121,0)
(8,13,0)
(25,129,0)
(94,57,0)
(130,108,0)
(32,84,0)
(147,13,0)
(64,105,0)
(85,17,0)
(20,11,0)
(100,120,0)
(132,13,0)
(11,20,0)
(15,120,0)
(151,15,0)
(65,72,0)
(43,57,0)
(10,62,0)
(30,103,0)
(72,22,0)
(87,20,0)
(22,108,0)
(13,132,0)
(46,62,0)
(58,61,0)
(105,22,0)
(143,5,0)
(3,62,0)
(38,113,0)
(12,104,0)
(57,88,0)
(12,15,0)
(22,144,0)
(125,113,0)
(57,120,0)
(135,79,0)
(68,125,0)
(104,79,0)
(129,25,0)
(144,22,0)
(86,11,0)
(121,5,0)
(90,70,0)
(145,16,0)
(84,108,0)
(61,72,0)
(37,108,0)
(99,45,0)
(80,2,0)
(142,60,0)
(4,62,0)
(91,100,0)
(125,74,0)
(12,129,0)
(28,62,0)
(67,45,0)
(48,65,0)
(74,125,0)
(103,108,0)
(36,139,0)
(15,34,0)
(60,11,0)
(128,12,0)
(107,62,0)
(49,41,0)
(45,67,0)
(148,68,0)
(126,62,0)
(2,11,0)
(51,46,0)
(120,108,0)
(109,103,0)
(124,114,0)
(11,60,0)
(121,5,1)
(151,88,1)
(47,97,1)
(33,86,1)
(101,137,1)
(113,38,1)
(120,24,1)
(132,96,1)
(75,5,1)
(12,104,1)
(103,30,1)
(121,55,1)
(137,54,1)
(50,111,1)
(5,112,1)
(100,91,1)
(85,101,1)
(54,56,1)
(56,110,1)
(104,40,1)
(21,44,1)
(57,94,1)
(26,89,1)
(123,61,1)
(21,139,1)
(150,15,1)
(0,68,1)
(83,122,1)
(52,65,1)
(96,13,1)
(41,49,1)
(49,65,1)
(22,144,1)
(100,120,1)
(36,66,1)
(14,105,1)
(115,51,1)
(20,87,1)
(146,48,1)
(51,104,1)
(60,11,1)
(16,145,1)
(121,22,1)
(55,137,1)
(45,67,1)
(60,142,1)
(110,60,1)
(122,85,1)
(81,75,1)
(32,0,1)
(89,84,1)
(2,80,1)
(94,43,1)
(127,21,1)
(63,95,1)
(69,88,1)
(139,36,1)
(122,101,1)
(128,83,1)
(66,44,1)
(133,146,1)
(53,41,1)
(2,29,1)
(31,128,1)
(40,27,1)
(124,105,1)
(73,64,1)
(41,95,1)
(43,100,1)
(56,53,1)
(61,102,1)
(145,12,1)
(11,20,1)
(117,16,1)
(84,32,1)
(95,65,1)
(140,35,1)
(72,123,1)
(19,103,1)
(67,136,1)
(75,150,1)
(141,63,1)
(149,47,1)
(6,77,1)
(15,120,1)
(106,127,1)
(38,74,1)
(39,59,1)
(58,133,1)
(137,5,1)
(72,22,1)
(112,143,1)
(37,39,1)
(88,57,1)
(72,61,1)
(25,138,1)
(111,26,1)
(15,134,1)
(68,148,1)
(109,65,1)
(101,121,1)
(8,147,1)
(86,45,1)
(143,46,1)
(144,50,1)
(77,37,1)
(12,15,1)
(49,141,1)
(148,125,1)
(134,151,1)
(105,22,1)
(147,149,1)
(125,113,1)
(142,11,1)
(105,73,1)
(91,71,1)
(102,58,1)
(57,120,1)
(132,13,1)
(24,116,1)
(48,60,1)
(30,109,1)
(46,115,1)
(99,6,1)
(137,22,1)
(136,99,1)
(95,18,1)
(125,74,1)
(13,8,1)
(56,150,1)
(71,120,1)
(64,22,1)
(18,52,1)
(12,129,1)
(56,124,1)
(88,100,1)
(44,14,1)
(35,41,1)
(68,125,1)
(74,81,1)
(97,106,1)
(116,19,1)
(11,2,1)
(90,68,1)
(109,140,1)
(56,90,1)
(129,25,1)
(65,72,1)
(12,31,1)
(87,2,1)
(11,22,1)
(80,33,1)
(150,129,1)
(59,132,1)
(138,69,1)
(124,105,2)
(105,68,2)
(22,144,2)
(6,105,2)
(141,95,2)
(21,105,2)
(49,65,2)
(25,88,2)
(88,57,2)
(2,80,2)
(41,60,2)
(58,60,2)
(86,105,2)
(123,60,2)
(26,68,2)
(21,139,2)
(18,60,2)
(68,125,2)
(21,44,2)
(121,22,2)
(87,105,2)
(11,2,2)
(15,120,2)
(147,105,2)
(88,100,2)
(81,150,2)
(89,68,2)
(57,100,2)
(120,24,2)
(41,95,2)
(2,29,2)
(30,41,2)
(37,39,2)
(14,105,2)
(65,72,2)
(48,60,2)
(125,150,2)
(150,41,2)
(69,88,2)
(97,105,2)
(129,25,2)
(134,88,2)
(137,22,2)
(55,137,2)
(11,105,2)
(88,41,2)
(125,113,2)
(12,15,2)
(75,150,2)
(60,105,2)
(50,68,2)
(67,105,2)
(127,105,2)
(45,67,2)
(80,105,2)
(140,41,2)
(95,65,2)
(121,137,2)
(139,105,2)
(32,68,2)
(85,101,2)
(39,105,2)
(142,105,2)
(59,105,2)
(63,95,2)
(136,105,2)
(133,60,2)
(121,5,2)
(60,11,2)
(22,68,2)
(105,22,2)
(11,22,2)
(37,105,2)
(71,41,2)
(73,68,2)
(68,150,2)
(109,65,2)
(19,41,2)
(151,88,2)
(64,68,2)
(38,150,2)
(96,105,2)
(61,60,2)
(77,105,2)
(66,105,2)
(72,22,2)
(2,105,2)
(148,150,2)
(45,105,2)
(47,105,2)
(102,60,2)
(110,60,2)
(53,41,2)
(132,105,2)
(146,60,2)
(95,60,2)
(116,41,2)
(33,105,2)
(100,41,2)
(138,88,2)
(137,5,2)
(72,60,2)
(36,105,2)
(74,150,2)
(106,105,2)
(94,100,2)
(91,41,2)
(35,41,2)
(57,120,2)
(20,105,2)
(120,41,2)
(8,105,2)
(13,105,2)
(99,105,2)
(43,100,2)
(129,88,2)
(100,120,2)
(49,95,2)
(24,41,2)
(12,129,2)
(15,88,2)
(65,60,2)
(109,41,2)
(149,105,2)
(41,49,2)
(90,68,2)
(52,60,2)
(84,68,2)
(132,13,2)
(125,74,2)
(72,61,2)
(44,105,2)
(111,68,2)
(144,68,2)
(12,104,2)
(113,150,2)
(103,41,2)
(0,68,2)
(11,20,2)
-----------------------------------
(0,wsaDataInit)
(1,)
(2,(struct sockaddr*)
(3,wsaDataInit)
(4,if (wsaDataInit)
(5,connectSocket = INVALID_SOCKET)
(6,sin_port)
(7,recvResult)
(8,sin_addr)
(9,)
(10,inputBuffer)
(11,connect(connectSocket, (struct sockaddr*)
(12,dataArray[2] = data)
(13,service.sin_addr)
(14,service)
(15,data = tempInt)
(16,CWE194_Unexpected_Sign_Extension__connect_socket_memcpy_66b_badSink(dataArray)
(17,)
(18,SOCKET_ERROR)
(19,tempInt)
(20,sizeof(service)
(21,memset(&service, 0, sizeof(service)
(22,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(23,if (recvResult == SOCKET_ERROR || recvResult == 0)
(24,atoi(inputBuffer)
(25,-1)
(26,AF_INET)
(27,data)
(28,wsaData)
(29,struct sockaddr*)
(30,'\\\\0')
(31,data)
(32,1)
(33,service)
(34,)
(35,inputBuffer)
(36,service)
(37,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(38,wsaData)
(39,inet_addr(IP_ADDRESS)
(40,0)
(41,recvResult == SOCKET_ERROR || recvResult == 0)
(42,connectSocket)
(43,tempInt)
(44,&service)
(45,service.sin_port = htons(TCP_PORT)
(46,wsaDataInit = 0)
(47,AF_INET)
(48,recvResult)
(49,recvResult == 0)
(50,IPPROTO_TCP)
(51,wsaDataInit)
(52,recvResult)
(53,break;)
(54,INVALID_SOCKET)
(55,connectSocket)
(56,connectSocket)
(57,tempInt < SHRT_MIN)
(58,CHAR_ARRAY_SIZE)
(59,IP_ADDRESS)
(60,connect(connectSocket, (struct sockaddr*)
(61,CHAR_ARRAY_SIZE - 1)
(62,)
(63,recvResult)
(64,connectSocket)
(65,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(66,0)
(67,htons(TCP_PORT)
(68,WSAStartup(MAKEWORD(2,2)
(69,data)
(70,)
(71,tempInt)
(72,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(73,INVALID_SOCKET)
(74,MAKEWORD(2,2)
(75,2)
(76,if (connect(connectSocket, (struct sockaddr*)
(77,service)
(78,)
(79,)
(80,&service)
(81,2)
(82,if (connectSocket == INVALID_SOCKET)
(83,2)
(84,wsaDataInit = 1)
(85,WSACleanup()
(86,connectSocket)
(87,service)
(88,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(89,connectSocket)
(90,break;)
(91,SHRT_MAX)
(92,\'\\\\0\')
(93,service)
(94,SHRT_MIN)
(95,recvResult == SOCKET_ERROR)
(96,s_addr)
(97,service.sin_family)
(98,if (WSAStartup(MAKEWORD(2,2)
(99,service.sin_port)
(100,tempInt > SHRT_MAX)
(101,wsaDataInit)
(102,1)
(103,inputBuffer[recvResult] = \'\\\\0\')
(104,data = 0)
(105,connectSocket == INVALID_SOCKET)
(106,sin_family)
(107,if (connectSocket != INVALID_SOCKET)
(108,)
(109,inputBuffer[recvResult])
(110,break;)
(111,SOCK_STREAM)
(112,INVALID_SOCKET)
(113,&wsaData)
(114,)
(115,0)
(116,inputBuffer)
(117,RET)
(118,tempInt)
(119,)
(120,tempInt = atoi(inputBuffer)
(121,CLOSE_SOCKET(connectSocket)
(122,dataArray)
(123,0)
(124,break;)
(125,WSAStartup(MAKEWORD(2,2)
(126,do)
(127,service)
(128,dataArray[2])
(129,data = -1)
(130,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(131,inputBuffer[recvResult] = '\\\\0')
(132,service.sin_addr.s_addr)
(133,inputBuffer)
(134,tempInt)
(135,dataArray)
(136,TCP_PORT)
(137,connectSocket != INVALID_SOCKET)
(138,1)
(139,sizeof(service)
(140,recvResult)
(141,0)
(142,SOCKET_ERROR)
(143,connectSocket)
(144,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(145,dataArray)
(146,connectSocket)
(147,service)
(148,NO_ERROR)
(149,service.sin_family = AF_INET)
(150,0)
(151,data)
(152,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^