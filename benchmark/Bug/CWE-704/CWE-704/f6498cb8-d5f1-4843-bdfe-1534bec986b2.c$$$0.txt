-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
70,73
70,74
70,75
70,76
71,72
72,73
72,74
74,75
74,76
76,77
78,79
79,80
79,81
81,82
81,83
81,84
83,84
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
94,95
94,96
97,98
98,99
98,100
99,100
99,101
100,101
102,103
102,104
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
113,114
113,115
113,116
113,117
114,115
116,117
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
127,128
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,73,75,77,80,82,84,86,90,92,93,95,96,101,103,104,105,109,110,115,117,119,121,126,128,129,133,135
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
94,95
94,96
98,99
98,100
102,103
102,104
107,108
107,109
123,124
123,125
-----guardedBy-----
39,55
109,128
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_15_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_memcpy_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(66,65,0)
(38,66,0)
(47,7,0)
(17,68,0)
(52,10,0)
(58,70,0)
(10,19,0)
(18,36,0)
(55,19,0)
(24,48,0)
(67,50,0)
(7,19,0)
(51,50,0)
(54,19,0)
(15,49,0)
(25,65,0)
(54,10,0)
(45,58,0)
(26,18,0)
(44,24,0)
(1,60,0)
(50,18,0)
(62,10,0)
(0,36,0)
(52,6,0)
(31,70,0)
(61,19,0)
(23,35,0)
(4,36,0)
(65,7,0)
(68,48,0)
(14,34,0)
(40,48,0)
(21,40,0)
(13,10,0)
(40,10,0)
(3,20,0)
(46,48,0)
(60,33,0)
(53,67,0)
(60,35,0)
(56,14,0)
(2,18,0)
(40,49,0)
(69,35,0)
(16,33,0)
(49,6,0)
(19,35,0)
(9,58,0)
(27,66,0)
(52,48,0)
(39,52,0)
(67,29,0)
(33,60,0)
(64,52,0)
(48,24,0)
(5,67,0)
(65,66,0)
(48,59,0)
(40,60,0)
(37,19,0)
(12,67,0)
(57,52,0)
(24,50,0)
(22,50,0)
(30,36,0)
(32,36,0)
(68,60,0)
(20,36,0)
(58,19,0)
(41,68,0)
(42,40,0)
(70,58,0)
(11,70,0)
(52,60,0)
(29,67,0)
(28,54,0)
(43,29,0)
(0,20,1)
(20,3,1)
(13,30,1)
(11,45,1)
(30,14,1)
(40,42,1)
(52,10,1)
(22,63,1)
(62,13,1)
(43,67,1)
(48,24,1)
(5,53,1)
(16,1,1)
(66,38,1)
(31,11,1)
(60,33,1)
(40,60,1)
(57,68,1)
(63,60,1)
(53,50,1)
(9,10,1)
(47,65,1)
(58,70,1)
(7,47,1)
(67,12,1)
(50,51,1)
(68,60,1)
(24,44,1)
(70,31,1)
(49,15,1)
(54,10,1)
(45,9,1)
(64,39,1)
(65,66,1)
(8,54,1)
(40,48,1)
(41,17,1)
(3,63,1)
(21,52,1)
(51,22,1)
(40,10,1)
(52,60,1)
(12,5,1)
(68,41,1)
(27,25,1)
(29,43,1)
(25,58,1)
(56,29,1)
(17,7,1)
(10,62,1)
(42,21,1)
(28,68,1)
(38,27,1)
(28,49,1)
(68,48,1)
(15,40,1)
(33,16,1)
(52,64,1)
(46,29,1)
(67,50,1)
(39,57,1)
(54,28,1)
(13,0,1)
(30,48,1)
(24,50,1)
(44,46,1)
(14,56,1)
(52,48,1)
(29,67,1)
(46,29,2)
(43,63,2)
(67,63,2)
(21,68,2)
(40,48,2)
(48,29,2)
(52,60,2)
(40,60,2)
(29,67,2)
(53,63,2)
(20,63,2)
(52,68,2)
(52,10,2)
(60,33,2)
(5,63,2)
(24,29,2)
(68,60,2)
(39,68,2)
(48,24,2)
(54,10,2)
(52,48,2)
(65,66,2)
(68,48,2)
(42,68,2)
(30,63,2)
(51,63,2)
(44,29,2)
(12,63,2)
(64,68,2)
(56,29,2)
(29,63,2)
(14,29,2)
(15,68,2)
(67,50,2)
(40,10,2)
(40,68,2)
(22,63,2)
(58,70,2)
(49,68,2)
(0,63,2)
(3,63,2)
(50,63,2)
(24,50,2)
(57,68,2)
-----------------------------------
(0,break;)
(1,data)
(2,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,"Benign, fixed string")
(4,case 6:)
(5,CHAR_ARRAY_SIZE)
(6,)
(7,source[100-1] = \\\'\\\\0\\\')
(8,RET)
(9,source)
(10,dest[100] = "")
(11,100)
(12,stdin)
(13,dest)
(14,printLine("fgets()
(15,\\\'\\\\0\\\')
(16,1)
(17,data)
(18,)
(19,)
(20,printLine("Benign, fixed string")
(21,dest)
(22,inputBuffer)
(23,data)
(24,atoi(inputBuffer)
(25,source)
(26,inputBuffer)
(27,100)
(28,dest)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,break;)
(31,1)
(32,default:)
(33,-1)
(34,)
(35,)
(36,)
(37,dest)
(38,1)
(39,source)
(40,dest[data])
(41,100)
(42,data)
(43,NULL)
(44,inputBuffer)
(45,\\\'A\\\')
(46,data)
(47,\\\'\\\\0\\\')
(48,data = atoi(inputBuffer)
(49,dest[data] = \\\'\\\\0\\\')
(50,inputBuffer[CHAR_ARRAY_SIZE] = "")
(51,"")
(52,memcpy(dest, source, data)
(53,inputBuffer)
(54,printLine(dest)
(55,if (data < 100)
(56,"fgets()
(57,dest)
(58,memset(source, \\\'A\\\', 100-1)
(59,)
(60,data = -1)
(61,source)
(62,"")
(63,6)
(64,data)
(65,source[100-1])
(66,100-1)
(67,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(68,data < 100)
(69,switch(6)
(70,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^