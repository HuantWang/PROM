-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,33,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
32,33
32,34
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memcpy_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memcpy_12_bad()
CWE194_Unexpected_Sign_Extension__negative_memcpy_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a negative number */        data = -1;    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(53,30,0)
(13,53,0)
(20,17,0)
(51,16,0)
(4,43,0)
(15,35,0)
(30,33,0)
(14,30,0)
(6,11,0)
(7,4,0)
(25,49,0)
(35,49,0)
(34,17,0)
(27,0,0)
(35,32,0)
(49,25,0)
(35,21,0)
(14,49,0)
(52,21,0)
(28,35,0)
(2,43,0)
(11,36,0)
(48,12,0)
(5,11,0)
(35,30,0)
(42,43,0)
(14,21,0)
(31,37,0)
(23,18,0)
(3,14,0)
(14,37,0)
(47,16,0)
(39,35,0)
(17,18,0)
(10,21,0)
(9,30,0)
(45,4,0)
(41,21,0)
(24,16,0)
(8,36,0)
(12,16,0)
(22,53,0)
(0,30,0)
(21,16,0)
(38,49,0)
(1,18,0)
(16,18,0)
(4,16,0)
(30,0,0)
(37,32,0)
(53,49,0)
(50,25,0)
(26,52,0)
(49,46,0)
(36,12,0)
(43,4,0)
(52,16,0)
(40,14,0)
(19,0,0)
(36,11,0)
(0,19,1)
(28,39,1)
(2,7,1)
(52,21,1)
(50,38,1)
(27,9,1)
(42,2,1)
(41,49,1)
(20,34,1)
(44,17,1)
(37,31,1)
(53,30,1)
(26,53,1)
(10,41,1)
(30,0,1)
(11,6,1)
(38,44,1)
(21,10,1)
(22,12,1)
(41,30,1)
(13,22,1)
(12,48,1)
(31,14,1)
(35,28,1)
(15,53,1)
(19,27,1)
(53,13,1)
(6,5,1)
(35,21,1)
(40,3,1)
(45,21,1)
(43,42,1)
(39,15,1)
(17,20,1)
(3,35,1)
(14,40,1)
(52,26,1)
(4,43,1)
(8,4,1)
(53,49,1)
(14,21,1)
(35,49,1)
(29,52,1)
(14,49,1)
(36,11,1)
(7,45,1)
(48,36,1)
(49,25,1)
(25,50,1)
(35,30,1)
(9,44,1)
(26,37,1)
(5,8,1)
(14,30,1)
(4,43,2)
(53,49,2)
(15,53,2)
(28,53,2)
(40,53,2)
(39,53,2)
(52,21,2)
(25,44,2)
(14,49,2)
(0,44,2)
(36,11,2)
(19,44,2)
(50,44,2)
(35,21,2)
(53,30,2)
(27,44,2)
(35,30,2)
(49,25,2)
(35,53,2)
(14,21,2)
(38,44,2)
(14,53,2)
(9,44,2)
(30,0,2)
(35,49,2)
(3,53,2)
(49,44,2)
(30,44,2)
(14,30,2)
(31,53,2)
(37,53,2)
-----------------------------------
(0,100-1)
(1,data)
(2,100)
(3,dest)
(4,memset(source, \\\'A\\\', 100-1)
(5,100)
(6,1)
(7,\\\'A\\\')
(8,source)
(9,data)
(10,"")
(11,100-1)
(12,source[100-1] = \\\'\\\\0\\\')
(13,100)
(14,dest[data])
(15,dest)
(16,)
(17,data = 0)
(18,)
(19,1)
(20,0)
(21,dest[100] = "")
(22,data)
(23,if(globalReturnsTrueOrFalse()
(24,if (data < 100)
(25,-1)
(26,dest)
(27,100)
(28,data)
(29,RET)
(30,data = 100-1)
(31,\\\'\\\\0\\\')
(32,)
(33,)
(34,data)
(35,memcpy(dest, source, data)
(36,source[100-1])
(37,dest[data] = \\\'\\\\0\\\')
(38,data)
(39,source)
(40,data)
(41,dest)
(42,1)
(43,100-1)
(44,globalReturnsTrueOrFalse()
(45,source)
(46,)
(47,dest)
(48,\\\'\\\\0\\\')
(49,data = -1)
(50,1)
(51,source)
(52,printLine(dest)
(53,data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^