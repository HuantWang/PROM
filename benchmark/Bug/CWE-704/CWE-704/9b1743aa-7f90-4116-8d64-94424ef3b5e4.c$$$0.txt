-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_05_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,19,24,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_05_bad(){    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_05_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_05_bad
{    int data;    /* Initialize data */    data = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(41,1,0)
(40,48,0)
(6,1,0)
(22,41,0)
(13,1,0)
(42,9,0)
(12,21,0)
(39,45,0)
(6,10,0)
(9,43,0)
(3,39,0)
(45,39,0)
(53,39,0)
(33,21,0)
(10,50,0)
(37,50,0)
(39,1,0)
(20,50,0)
(11,31,0)
(48,33,0)
(32,33,0)
(17,32,0)
(32,6,0)
(43,9,0)
(14,10,0)
(49,21,0)
(16,33,0)
(26,16,0)
(6,32,0)
(31,1,0)
(4,45,0)
(45,33,0)
(23,18,0)
(41,48,0)
(31,50,0)
(25,6,0)
(36,1,0)
(51,21,0)
(2,13,0)
(0,1,0)
(1,50,0)
(41,22,0)
(30,33,0)
(45,9,0)
(15,0,0)
(48,9,0)
(35,8,0)
(44,0,0)
(18,23,0)
(8,33,0)
(39,50,0)
(33,8,0)
(13,50,0)
(23,29,0)
(38,16,0)
(32,9,0)
(16,9,0)
(1,41,0)
(52,32,0)
(48,41,0)
(24,18,0)
(9,34,0)
(7,45,0)
(6,1,1)
(38,9,1)
(2,10,1)
(41,48,1)
(42,46,1)
(3,53,1)
(1,41,1)
(11,13,1)
(44,15,1)
(33,8,1)
(8,35,1)
(4,7,1)
(6,32,1)
(9,43,1)
(41,22,1)
(18,24,1)
(48,40,1)
(5,16,1)
(45,9,1)
(16,9,1)
(48,33,1)
(26,38,1)
(15,1,1)
(7,3,1)
(53,0,1)
(45,4,1)
(10,14,1)
(32,17,1)
(16,33,1)
(0,44,1)
(32,33,1)
(52,25,1)
(13,2,1)
(35,30,1)
(14,6,1)
(39,45,1)
(53,23,1)
(31,1,1)
(39,1,1)
(45,33,1)
(46,33,1)
(31,11,1)
(0,1,1)
(25,39,1)
(17,52,1)
(32,9,1)
(40,36,1)
(5,31,1)
(16,26,1)
(43,42,1)
(38,46,1)
(24,0,1)
(48,9,1)
(23,18,1)
(36,16,1)
(13,1,1)
(23,0,2)
(2,16,2)
(1,41,2)
(40,16,2)
(6,16,2)
(48,33,2)
(16,9,2)
(42,46,2)
(16,33,2)
(15,16,2)
(32,9,2)
(43,46,2)
(41,48,2)
(23,18,2)
(41,16,2)
(3,16,2)
(32,33,2)
(33,8,2)
(45,16,2)
(4,16,2)
(1,16,2)
(7,16,2)
(25,16,2)
(24,0,2)
(18,0,2)
(48,16,2)
(45,33,2)
(39,45,2)
(41,22,2)
(36,16,2)
(6,32,2)
(52,16,2)
(32,16,2)
(9,46,2)
(44,16,2)
(11,16,2)
(17,16,2)
(45,9,2)
(31,16,2)
(10,16,2)
(13,1,2)
(39,1,2)
(13,16,2)
(9,43,2)
(31,1,2)
(53,16,2)
(48,9,2)
(0,1,2)
(14,16,2)
(39,16,2)
(0,16,2)
(6,1,2)
-----------------------------------
(0,dataBuffer == NULL)
(1,* dataBuffer = (char *)
(2,dataBuffer)
(3,'A')
(4,1)
(5,RET)
(6,dataBuffer[data-1])
(7,data)
(8,-1)
(9,data = RAND32()
(10,dataBuffer[data-1] = \'\\\\0\')
(11,dataBuffer)
(12,data)
(13,printLine(dataBuffer)
(14,'\\\\0')
(15,dataBuffer)
(16,data < 100)
(17,1)
(18,-1)
(19,dataBuffer[data-1] = '\\\\0')
(20,dataBuffer)
(21,)
(22,char *)
(23,exit(-1)
(24,1)
(25,dataBuffer)
(26,100)
(27,\'A\')
(28,\'\\\\0\')
(29,)
(30,data)
(31,free(dataBuffer)
(32,data-1)
(33,data = -1)
(34,)
(35,1)
(36,dataBuffer)
(37,if (dataBuffer == NULL)
(38,data)
(39,memset(dataBuffer, 'A', data-1)
(40,data)
(41,(char *)
(42,data)
(43,RAND32()
(44,NULL)
(45,data-1)
(46,staticTrue)
(47,memset(dataBuffer, \'A\', data-1)
(48,malloc(data)
(49,if(staticTrue)
(50,)
(51,if (data < 100)
(52,data)
(53,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^