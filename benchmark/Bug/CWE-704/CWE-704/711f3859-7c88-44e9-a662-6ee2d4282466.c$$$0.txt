-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_01_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* FLAW: Use a value input from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to short */
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
65,66
65,67
65,68
65,69
65,70
65,71
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
73,75
74,75
74,76
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
112,114
113,114
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,48,51,53,58,59,63,64,68,70,71,75,77,80,82,86,88,93,95,99,101,102,105,106,111,114,115,116,120,122,126,128
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
61,62
61,63
84,85
84,86
103,104
103,105
108,109
108,110
112,113
112,114
-----guardedBy-----
33,53
63,114
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_01_bad(){    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_01_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_01_bad
{    short data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* FLAW: Use a value input from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to short */            data = (short)atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to short */            data = (short)atoi(inputBuffer);        }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(18,60,0)
(35,23,0)
(34,47,0)
(41,64,0)
(8,2,0)
(55,59,0)
(37,2,0)
(15,13,0)
(11,26,0)
(43,59,0)
(36,49,0)
(63,44,0)
(62,9,0)
(54,9,0)
(44,13,0)
(44,2,0)
(53,9,0)
(52,60,0)
(47,20,0)
(64,5,0)
(10,1,0)
(56,62,0)
(62,47,0)
(48,2,0)
(3,44,0)
(25,42,0)
(28,49,0)
(62,56,0)
(22,37,0)
(64,41,0)
(27,1,0)
(1,9,0)
(21,49,0)
(12,23,0)
(40,56,0)
(2,27,0)
(51,24,0)
(29,8,0)
(31,27,0)
(26,49,0)
(30,62,0)
(38,47,0)
(0,35,0)
(42,59,0)
(17,34,0)
(19,35,0)
(34,9,0)
(61,62,0)
(20,47,0)
(2,49,0)
(47,46,0)
(44,49,0)
(18,59,0)
(42,20,0)
(13,44,0)
(6,51,0)
(1,47,0)
(20,42,0)
(56,26,0)
(4,18,0)
(27,2,0)
(28,2,0)
(58,23,0)
(56,2,0)
(45,37,0)
(20,33,0)
(33,20,0)
(39,13,0)
(16,34,0)
(59,35,0)
(13,47,0)
(9,23,0)
(13,9,0)
(32,41,0)
(1,27,0)
(27,31,0)
(7,18,0)
(60,18,0)
(50,28,0)
(57,18,0)
(8,49,0)
(60,52,1)
(62,9,1)
(13,47,1)
(18,59,1)
(7,59,1)
(62,47,1)
(32,37,1)
(30,61,1)
(15,3,1)
(45,2,1)
(52,18,1)
(63,64,1)
(38,60,1)
(27,1,1)
(34,17,1)
(18,4,1)
(41,32,1)
(9,54,1)
(4,57,1)
(1,47,1)
(34,47,1)
(43,9,1)
(16,47,1)
(44,2,1)
(17,16,1)
(20,33,1)
(63,37,1)
(59,55,1)
(11,56,1)
(28,50,1)
(1,9,1)
(37,2,1)
(40,44,1)
(25,38,1)
(60,18,1)
(28,2,1)
(47,20,1)
(3,63,1)
(56,62,1)
(64,41,1)
(22,45,1)
(16,51,1)
(61,40,1)
(6,60,1)
(1,10,1)
(14,34,1)
(62,30,1)
(8,29,1)
(56,2,1)
(37,22,1)
(2,27,1)
(27,31,1)
(55,43,1)
(13,9,1)
(48,34,1)
(42,25,1)
(14,28,1)
(57,7,1)
(44,13,1)
(51,6,1)
(20,42,1)
(26,11,1)
(50,8,1)
(39,15,1)
(10,48,1)
(42,59,1)
(29,26,1)
(13,39,1)
(54,53,1)
(34,9,1)
(8,2,1)
(64,41,2)
(8,34,2)
(47,60,2)
(30,34,2)
(44,13,2)
(27,34,2)
(2,34,2)
(42,60,2)
(10,34,2)
(44,34,2)
(39,34,2)
(28,34,2)
(13,34,2)
(56,62,2)
(34,9,2)
(48,34,2)
(28,2,2)
(56,34,2)
(38,60,2)
(1,9,2)
(51,60,2)
(62,47,2)
(50,34,2)
(2,27,2)
(11,34,2)
(8,2,2)
(29,34,2)
(20,33,2)
(34,47,2)
(27,1,2)
(63,34,2)
(1,34,2)
(26,34,2)
(62,9,2)
(44,2,2)
(47,20,2)
(64,37,2)
(3,34,2)
(32,37,2)
(13,9,2)
(40,34,2)
(1,47,2)
(27,31,2)
(18,59,2)
(6,60,2)
(42,59,2)
(22,34,2)
(20,60,2)
(60,18,2)
(13,47,2)
(61,34,2)
(37,34,2)
(15,34,2)
(45,34,2)
(62,34,2)
(20,42,2)
(37,2,2)
(25,60,2)
(41,37,2)
(56,2,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,malloc(data)
(2,* dataBuffer = (char *)
(3,\\\'A\\\')
(4,stdin)
(5,)
(6,"fgets()
(7,inputBuffer)
(8,printLine(dataBuffer)
(9,data = 0)
(10,data)
(11,\\\'\\\\0\\\')
(12,data)
(13,data-1)
(14,RET)
(15,data)
(16,data)
(17,100)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,inputBuffer)
(20,(short)
(21,dataBuffer)
(22,NULL)
(23,)
(24,)
(25,inputBuffer)
(26,dataBuffer[data-1] = \\\'\\\\0\\\')
(27,(char *)
(28,free(dataBuffer)
(29,dataBuffer)
(30,1)
(31,char *)
(32,1)
(33,short)
(34,data < 100)
(35,)
(36,if (dataBuffer == NULL)
(37,dataBuffer == NULL)
(38,data)
(39,1)
(40,dataBuffer)
(41,-1)
(42,atoi(inputBuffer)
(43,inputBuffer)
(44,memset(dataBuffer, \\\'A\\\', data-1)
(45,dataBuffer)
(46,)
(47,data = (short)
(48,dataBuffer)
(49,)
(50,dataBuffer)
(51,printLine("fgets()
(52,NULL)
(53,data)
(54,0)
(55,"")
(56,dataBuffer[data-1])
(57,CHAR_ARRAY_SIZE)
(58,if (data < 100)
(59,inputBuffer[CHAR_ARRAY_SIZE] = "")
(60,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(61,data)
(62,data-1)
(63,dataBuffer)
(64,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^