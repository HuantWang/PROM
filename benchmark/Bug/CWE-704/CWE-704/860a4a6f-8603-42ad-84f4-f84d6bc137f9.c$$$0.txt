-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_66b_badSink(short dataArray[])
{
    /* copy data out of dataArray */
    short data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_66b_badSink(short dataArray[]){    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_66b_badSink(short dataArray[])
CWE194_Unexpected_Sign_Extension__rand_malloc_66b_badSink
short dataArray[]
short
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    short data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = dataArray[2];
short data = dataArray[2];
short
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(36,32,0)
(33,10,0)
(40,8,0)
(14,18,0)
(19,47,0)
(8,31,0)
(20,18,0)
(34,30,0)
(41,4,0)
(32,0,0)
(13,39,0)
(31,32,0)
(2,37,0)
(43,39,0)
(48,18,0)
(32,31,0)
(28,45,0)
(27,45,0)
(4,41,0)
(41,11,0)
(7,37,0)
(4,31,0)
(37,31,0)
(41,22,0)
(22,41,0)
(23,47,0)
(27,31,0)
(20,11,0)
(31,5,0)
(15,18,0)
(10,11,0)
(12,5,0)
(44,5,0)
(49,11,0)
(45,27,0)
(30,11,0)
(11,41,0)
(17,27,0)
(29,31,0)
(10,18,0)
(11,18,0)
(16,8,0)
(37,10,0)
(1,27,0)
(24,20,0)
(10,37,0)
(39,11,0)
(6,10,0)
(9,4,0)
(45,11,0)
(47,19,0)
(19,42,0)
(38,32,0)
(30,18,0)
(3,15,0)
(45,15,0)
(30,11,1)
(39,11,1)
(38,29,1)
(4,31,1)
(27,17,1)
(30,34,1)
(16,31,1)
(4,9,1)
(17,1,1)
(9,49,1)
(15,3,1)
(32,36,1)
(31,32,1)
(11,41,1)
(1,28,1)
(13,43,1)
(7,2,1)
(43,11,1)
(27,31,1)
(20,11,1)
(10,11,1)
(33,19,1)
(39,13,1)
(36,38,1)
(2,6,1)
(40,16,1)
(32,0,1)
(23,39,1)
(49,8,1)
(8,31,1)
(6,33,1)
(45,11,1)
(20,24,1)
(37,7,1)
(33,39,1)
(19,47,1)
(41,4,1)
(21,8,1)
(21,20,1)
(28,10,1)
(37,31,1)
(3,45,1)
(47,23,1)
(45,27,1)
(24,30,1)
(10,37,1)
(41,22,1)
(34,15,1)
(8,40,1)
(30,11,2)
(41,22,2)
(30,8,2)
(41,4,2)
(41,8,2)
(45,27,2)
(7,8,2)
(43,8,2)
(23,39,2)
(19,47,2)
(20,11,2)
(4,31,2)
(11,8,2)
(45,11,2)
(17,8,2)
(45,8,2)
(32,0,2)
(28,8,2)
(37,31,2)
(4,8,2)
(10,37,2)
(24,8,2)
(6,8,2)
(27,31,2)
(9,8,2)
(49,8,2)
(19,39,2)
(8,31,2)
(34,8,2)
(2,8,2)
(39,8,2)
(10,8,2)
(10,11,2)
(39,11,2)
(47,39,2)
(33,8,2)
(31,32,2)
(11,41,2)
(1,8,2)
(37,8,2)
(15,8,2)
(3,8,2)
(13,8,2)
(27,8,2)
(20,8,2)
-----------------------------------
(0,short dataArray[])
(1,data)
(2,data)
(3,\'\\\\0\')
(4,malloc(data)
(5,)
(6,\'A\')
(7,1)
(8,data < 100)
(9,data)
(10,memset(dataBuffer, 'A', data-1)
(11,* dataBuffer = (char *)
(12,if (data < 100)
(13,NULL)
(14,if (dataBuffer == NULL)
(15,dataBuffer[data-1] = \'\\\\0\')
(16,data)
(17,1)
(18,)
(19,exit(-1)
(20,free(dataBuffer)
(21,RET)
(22,char *)
(23,1)
(24,dataBuffer)
(25,memset(dataBuffer, \'A\', data-1)
(26,dataBuffer[data-1] = '\\\\0')
(27,data-1)
(28,dataBuffer)
(29,data)
(30,printLine(dataBuffer)
(31,data = dataArray[2])
(32,dataArray[2])
(33,dataBuffer)
(34,dataBuffer)
(35,'\\\\0')
(36,2)
(37,data-1)
(38,dataArray)
(39,dataBuffer == NULL)
(40,100)
(41,(char *)
(42,)
(43,dataBuffer)
(44,data)
(45,dataBuffer[data-1])
(46,'A')
(47,-1)
(48,dataBuffer)
(49,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^