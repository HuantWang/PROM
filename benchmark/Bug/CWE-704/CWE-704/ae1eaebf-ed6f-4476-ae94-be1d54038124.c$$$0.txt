-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
30,31
31,32
31,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
40,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,16,20,25,28,32,34,36,39,41,43,45,49,51,52,54,55,60,62,63,64,68,69,74,76,78,80,85,87,88,92,94
-----computeFrom-----
12,13
12,14
23,24
23,25
53,54
53,55
57,58
57,59
61,62
61,63
66,67
66,68
82,83
82,84
-----guardedBy-----
68,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_memcpy_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(16,40,0)
(37,29,0)
(15,7,0)
(41,33,0)
(28,19,0)
(38,17,0)
(30,0,0)
(29,32,0)
(29,13,0)
(43,32,0)
(0,17,0)
(4,28,0)
(27,33,0)
(38,28,0)
(32,19,0)
(9,38,0)
(8,3,0)
(13,29,0)
(12,17,0)
(38,20,0)
(23,13,0)
(2,19,0)
(0,15,0)
(17,3,0)
(44,45,0)
(45,17,0)
(19,3,0)
(24,15,0)
(34,19,0)
(11,17,0)
(25,19,0)
(40,28,0)
(17,11,0)
(21,3,0)
(36,33,0)
(18,28,0)
(14,11,0)
(39,15,0)
(6,38,0)
(26,27,0)
(42,13,0)
(15,39,0)
(33,27,0)
(10,38,0)
(27,19,0)
(35,45,0)
(40,19,0)
(1,27,0)
(31,20,0)
(47,31,0)
(5,0,0)
(38,15,0)
(45,28,0)
(45,31,0)
(45,15,0)
(33,41,1)
(37,27,1)
(41,36,1)
(18,15,1)
(42,37,1)
(4,18,1)
(38,28,1)
(43,29,1)
(40,28,1)
(5,32,1)
(29,13,1)
(39,24,1)
(16,31,1)
(35,38,1)
(0,30,1)
(15,39,1)
(10,6,1)
(16,0,1)
(28,4,1)
(24,22,1)
(18,22,1)
(6,0,1)
(17,11,1)
(32,43,1)
(26,1,1)
(40,16,1)
(46,40,1)
(1,28,1)
(27,33,1)
(22,17,1)
(45,28,1)
(14,12,1)
(23,42,1)
(38,17,1)
(0,15,1)
(45,15,1)
(11,14,1)
(45,44,1)
(30,5,1)
(47,45,1)
(9,10,1)
(38,15,1)
(38,9,1)
(44,35,1)
(31,47,1)
(45,17,1)
(0,17,1)
(36,26,1)
(13,23,1)
(17,11,2)
(45,17,2)
(15,22,2)
(31,0,2)
(38,17,2)
(35,0,2)
(47,0,2)
(6,0,2)
(27,33,2)
(0,17,2)
(40,28,2)
(45,28,2)
(39,22,2)
(38,15,2)
(44,0,2)
(29,13,2)
(15,39,2)
(45,15,2)
(24,22,2)
(0,15,2)
(10,0,2)
(45,0,2)
(38,0,2)
(38,28,2)
(9,0,2)
-----------------------------------
(0,data < 100)
(1,source)
(2,dest)
(3,)
(4,"")
(5,data)
(6,dest)
(7,)
(8,data)
(9,data)
(10,source)
(11,-1)
(12,data)
(13,100-1)
(14,1)
(15,data = RAND32()
(16,dest)
(17,data = -1)
(18,dest)
(19,)
(20,)
(21,if(globalReturnsTrue()
(22,globalReturnsTrue()
(23,1)
(24,data)
(25,if (data < 100)
(26,\\\'A\\\')
(27,memset(source, \\\'A\\\', 100-1)
(28,dest[100] = "")
(29,source[100-1])
(30,100)
(31,dest[data] = \\\'\\\\0\\\')
(32,source[100-1] = \\\'\\\\0\\\')
(33,100-1)
(34,source)
(35,dest)
(36,100)
(37,source)
(38,memcpy(dest, source, data)
(39,RAND32()
(40,printLine(dest)
(41,1)
(42,100)
(43,\\\'\\\\0\\\')
(44,data)
(45,dest[data])
(46,RET)
(47,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^