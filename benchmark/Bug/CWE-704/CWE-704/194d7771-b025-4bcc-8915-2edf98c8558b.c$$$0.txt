-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_06_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
60,61
61,62
61,63
62,63
62,64
63,64
65,66
65,67
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
85,86
86,87
86,88
87,88
87,89
88,89
90,91
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,38,40,43,45,47,49,53,55,56,58,59,64,66,67,68,72,73,78,80,82,84,89,91,92,96,98
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
57,58
57,59
61,62
61,63
65,66
65,67
70,71
70,72
86,87
86,88
-----guardedBy-----
72,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_06_bad(){    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_06_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_06_bad
{    short data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(30,5,0)
(38,47,0)
(11,31,0)
(34,40,0)
(40,21,0)
(31,46,0)
(37,39,0)
(26,48,0)
(47,35,0)
(4,29,0)
(2,35,0)
(15,19,0)
(5,40,0)
(1,21,0)
(28,48,0)
(44,48,0)
(28,47,0)
(42,2,0)
(2,48,0)
(4,19,0)
(23,48,0)
(33,4,0)
(2,39,0)
(14,26,0)
(3,2,0)
(49,27,0)
(39,31,0)
(24,46,0)
(25,28,0)
(16,36,0)
(43,27,0)
(45,17,0)
(26,19,0)
(2,19,0)
(7,31,0)
(4,33,0)
(0,2,0)
(50,46,0)
(19,4,0)
(28,19,0)
(20,27,0)
(22,31,0)
(19,6,0)
(9,28,0)
(36,31,0)
(8,49,0)
(29,4,0)
(28,39,0)
(18,17,0)
(48,46,0)
(27,31,0)
(12,39,0)
(27,49,0)
(13,5,0)
(10,49,0)
(40,5,0)
(21,31,0)
(36,39,0)
(41,26,0)
(16,26,1)
(40,5,1)
(36,16,1)
(42,26,1)
(21,1,1)
(27,49,1)
(18,48,1)
(2,0,1)
(28,48,1)
(37,12,1)
(3,42,1)
(16,47,1)
(9,25,1)
(47,38,1)
(48,44,1)
(26,19,1)
(45,18,1)
(2,19,1)
(1,40,1)
(5,30,1)
(49,10,1)
(33,15,1)
(28,9,1)
(43,39,1)
(39,37,1)
(2,48,1)
(14,21,1)
(36,39,1)
(12,19,1)
(41,14,1)
(32,36,1)
(26,48,1)
(4,29,1)
(2,39,1)
(10,8,1)
(19,4,1)
(28,39,1)
(34,27,1)
(28,19,1)
(17,45,1)
(15,17,1)
(0,3,1)
(4,33,1)
(13,34,1)
(26,41,1)
(30,13,1)
(25,2,1)
(20,43,1)
(12,17,1)
(8,20,1)
(38,28,1)
(44,23,1)
(25,26,2)
(4,17,2)
(28,39,2)
(4,29,2)
(2,26,2)
(3,26,2)
(9,26,2)
(28,26,2)
(4,33,2)
(28,48,2)
(47,26,2)
(2,48,2)
(2,19,2)
(38,26,2)
(19,17,2)
(2,39,2)
(19,4,2)
(40,5,2)
(0,26,2)
(36,39,2)
(15,17,2)
(42,26,2)
(33,17,2)
(28,19,2)
(26,19,2)
(26,48,2)
(27,49,2)
-----------------------------------
(0,data)
(1,\\\'\\\\0\\\')
(2,memmove(dest, source, data)
(3,source)
(4,(short)
(5,100-1)
(6,)
(7,dest)
(8,100)
(9,data)
(10,1)
(11,if (data < 100)
(12,dest)
(13,100)
(14,data)
(15,data)
(16,dest)
(17,STATIC_CONST_FIVE==5)
(18,STATIC_CONST_FIVE)
(19,data = (short)
(20,\\\'A\\\')
(21,source[100-1] = \\\'\\\\0\\\')
(22,source)
(23,data)
(24,if(STATIC_CONST_FIVE==5)
(25,dest)
(26,data < 100)
(27,memset(source, \\\'A\\\', 100-1)
(28,dest[data])
(29,short)
(30,1)
(31,)
(32,RET)
(33,RAND32()
(34,source)
(35,)
(36,printLine(dest)
(37,"")
(38,\\\'\\\\0\\\')
(39,dest[100] = "")
(40,source[100-1])
(41,100)
(42,dest)
(43,source)
(44,0)
(45,5)
(46,)
(47,dest[data] = \\\'\\\\0\\\')
(48,data = 0)
(49,100-1)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^