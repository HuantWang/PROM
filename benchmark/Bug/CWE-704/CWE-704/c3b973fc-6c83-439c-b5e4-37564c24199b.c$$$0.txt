-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_09_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_09_bad(){    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_09_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_09_bad
{    short data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,5,0)
(1,18,0)
(16,5,0)
(9,44,0)
(40,6,0)
(28,44,0)
(48,27,0)
(15,11,0)
(0,21,0)
(50,22,0)
(48,44,0)
(31,10,0)
(12,44,0)
(44,21,0)
(14,22,0)
(6,37,0)
(33,22,0)
(8,9,0)
(37,24,0)
(3,9,0)
(43,9,0)
(8,26,0)
(11,23,0)
(25,27,0)
(42,37,0)
(2,17,0)
(6,44,0)
(10,44,0)
(29,26,0)
(38,22,0)
(30,50,0)
(35,8,0)
(7,37,0)
(38,26,0)
(5,26,0)
(39,44,0)
(36,21,0)
(9,8,0)
(27,25,0)
(4,39,0)
(50,26,0)
(26,22,0)
(27,26,0)
(11,15,0)
(37,6,0)
(32,48,0)
(17,22,0)
(18,26,0)
(49,38,0)
(34,10,0)
(5,22,0)
(47,21,0)
(19,39,0)
(5,39,0)
(8,17,0)
(46,18,0)
(26,27,0)
(39,5,0)
(27,48,0)
(20,15,0)
(43,35,1)
(48,44,1)
(46,26,1)
(11,15,1)
(9,3,1)
(49,17,1)
(10,44,1)
(2,8,1)
(27,48,1)
(27,25,1)
(26,27,1)
(39,44,1)
(8,9,1)
(42,13,1)
(1,46,1)
(4,19,1)
(30,38,1)
(40,7,1)
(34,37,1)
(13,44,1)
(41,10,1)
(17,2,1)
(48,32,1)
(5,26,1)
(38,49,1)
(19,16,1)
(6,44,1)
(45,11,1)
(37,6,1)
(44,12,1)
(20,18,1)
(31,34,1)
(9,44,1)
(34,13,1)
(50,30,1)
(32,29,1)
(3,43,1)
(35,5,1)
(41,50,1)
(7,42,1)
(18,26,1)
(39,4,1)
(38,26,1)
(10,31,1)
(45,18,1)
(29,10,1)
(8,26,1)
(12,28,1)
(15,20,1)
(18,1,1)
(6,40,1)
(50,26,1)
(5,39,1)
(16,45,1)
(16,10,2)
(4,10,2)
(29,10,2)
(9,10,2)
(18,26,2)
(30,10,2)
(19,10,2)
(40,13,2)
(10,44,2)
(17,10,2)
(42,13,2)
(39,10,2)
(8,9,2)
(15,18,2)
(27,25,2)
(37,13,2)
(48,10,2)
(5,39,2)
(49,10,2)
(38,10,2)
(6,44,2)
(3,10,2)
(32,10,2)
(26,10,2)
(46,10,2)
(43,10,2)
(27,48,2)
(1,10,2)
(5,26,2)
(20,18,2)
(27,10,2)
(45,10,2)
(6,13,2)
(2,10,2)
(37,6,2)
(26,27,2)
(50,10,2)
(9,44,2)
(11,15,2)
(18,10,2)
(38,26,2)
(35,10,2)
(8,26,2)
(48,44,2)
(11,18,2)
(5,10,2)
(7,13,2)
(8,10,2)
(39,44,2)
(50,26,2)
-----------------------------------
(0,data)
(1,NULL)
(2,\\\'\\\\0\\\')
(3,1)
(4,1)
(5,memset(dataBuffer, \\\'A\\\', data-1)
(6,&data)
(7,"%hd")
(8,dataBuffer[data-1])
(9,data-1)
(10,data < 100)
(11,exit(-1)
(12,0)
(13,GLOBAL_CONST_TRUE)
(14,dataBuffer)
(15,-1)
(16,\\\'A\\\')
(17,dataBuffer[data-1] = \\\'\\\\0\\\')
(18,dataBuffer == NULL)
(19,data)
(20,1)
(21,)
(22,)
(23,)
(24,)
(25,char *)
(26,* dataBuffer = (char *)
(27,(char *)
(28,data)
(29,dataBuffer)
(30,dataBuffer)
(31,100)
(32,data)
(33,if (dataBuffer == NULL)
(34,data)
(35,dataBuffer)
(36,if (data < 100)
(37,fscanf (stdin, "%hd", &data)
(38,printLine(dataBuffer)
(39,data-1)
(40,data)
(41,RET)
(42,stdin)
(43,data)
(44,data = 0)
(45,dataBuffer)
(46,dataBuffer)
(47,if(GLOBAL_CONST_TRUE)
(48,malloc(data)
(49,dataBuffer)
(50,free(dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^