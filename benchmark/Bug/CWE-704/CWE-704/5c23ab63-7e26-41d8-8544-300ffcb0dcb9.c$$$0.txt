-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memcpy(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
22,23
22,24
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memcpy_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memcpy_15_bad()
CWE194_Unexpected_Sign_Extension__rand_memcpy_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memcpy(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memcpy(dest, source, data);
memcpy(dest, source, data)
memcpy
memcpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(14,6,0)
(18,15,0)
(6,47,0)
(4,12,0)
(42,17,0)
(36,33,0)
(33,0,0)
(50,0,0)
(53,18,0)
(1,28,0)
(53,51,0)
(5,0,0)
(2,27,0)
(38,18,0)
(28,52,0)
(34,12,0)
(29,15,0)
(51,6,0)
(27,33,0)
(35,51,0)
(3,20,0)
(27,18,0)
(30,0,0)
(6,14,0)
(53,33,0)
(45,20,0)
(8,49,0)
(16,20,0)
(24,27,0)
(0,15,0)
(41,33,0)
(27,49,0)
(53,8,0)
(43,27,0)
(39,17,0)
(52,31,0)
(7,33,0)
(17,12,0)
(13,38,0)
(38,51,0)
(12,17,0)
(22,31,0)
(17,0,0)
(48,7,0)
(23,53,0)
(6,51,0)
(9,53,0)
(26,20,0)
(47,6,0)
(52,28,0)
(25,15,0)
(19,18,0)
(27,51,0)
(54,52,0)
(40,20,0)
(51,20,0)
(44,18,0)
(21,8,0)
(7,0,0)
(11,38,0)
(31,0,0)
(32,16,0)
(10,28,0)
(9,23,1)
(53,9,1)
(38,18,1)
(7,48,1)
(27,18,1)
(37,7,1)
(53,18,1)
(27,43,1)
(31,22,1)
(51,6,1)
(14,35,1)
(19,44,1)
(1,54,1)
(27,33,1)
(39,42,1)
(36,41,1)
(8,21,1)
(2,38,1)
(10,1,1)
(46,18,1)
(13,31,1)
(18,19,1)
(24,2,1)
(41,26,1)
(53,33,1)
(42,33,1)
(23,27,1)
(43,24,1)
(4,39,1)
(34,4,1)
(48,8,1)
(32,46,1)
(21,53,1)
(27,51,1)
(28,10,1)
(12,34,1)
(35,46,1)
(33,36,1)
(11,13,1)
(54,17,1)
(17,12,1)
(38,51,1)
(52,28,1)
(41,3,1)
(7,33,1)
(48,38,1)
(3,16,1)
(53,51,1)
(38,11,1)
(26,51,1)
(6,47,1)
(22,52,1)
(16,32,1)
(6,14,1)
(14,46,2)
(27,33,2)
(24,38,2)
(32,46,2)
(26,46,2)
(43,38,2)
(27,18,2)
(23,38,2)
(53,51,2)
(53,33,2)
(7,33,2)
(53,18,2)
(51,46,2)
(3,46,2)
(9,38,2)
(35,46,2)
(6,46,2)
(27,51,2)
(6,14,2)
(53,38,2)
(6,47,2)
(38,18,2)
(21,38,2)
(52,28,2)
(8,38,2)
(27,38,2)
(51,6,2)
(2,38,2)
(17,12,2)
(38,51,2)
(16,46,2)
-----------------------------------
(0,)
(1,100)
(2,dest)
(3,break;)
(4,100)
(5,dest)
(6,(short)
(7,printLine(dest)
(8,dest[data] = \\\'\\\\0\\\')
(9,data)
(10,1)
(11,100)
(12,100-1)
(13,data)
(14,RAND32()
(15,)
(16,printLine("Benign, fixed string")
(17,memset(source, \\\'A\\\', 100-1)
(18,data = 0)
(19,0)
(20,)
(21,\\\'\\\\0\\\')
(22,\\\'\\\\0\\\')
(23,dest)
(24,source)
(25,data)
(26,break;)
(27,memcpy(dest, source, data)
(28,100-1)
(29,switch(6)
(30,if (data < 100)
(31,source[100-1] = \\\'\\\\0\\\')
(32,"Benign, fixed string")
(33,dest[100] = "")
(34,1)
(35,data)
(36,"")
(37,RET)
(38,data < 100)
(39,\\\'A\\\')
(40,default:)
(41,dest)
(42,source)
(43,data)
(44,data)
(45,case 6:)
(46,6)
(47,short)
(48,dest)
(49,)
(50,source)
(51,data = (short)
(52,source[100-1])
(53,dest[data])
(54,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^