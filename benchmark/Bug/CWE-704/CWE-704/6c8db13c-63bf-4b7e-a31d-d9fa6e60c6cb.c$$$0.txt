-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        int dataCopy = data;
        int data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
49,52
49,53
49,54
49,55
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
87,88
87,89
88,89
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
97,98
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,32,35,38,40,43,47,48,52,54,55,59,61,64,66,70,72,77,79,83,85,86,89,90,95,98,99,100,104,106,110,112
-----computeFrom-----
12,13
12,14
45,46
45,47
68,69
68,70
87,88
87,89
92,93
92,94
96,97
96,98
-----guardedBy-----
47,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_31_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_31_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(22,37,0)
(24,42,0)
(6,16,0)
(37,42,0)
(7,33,0)
(47,42,0)
(51,45,0)
(4,44,0)
(11,9,0)
(29,31,0)
(26,5,0)
(37,5,0)
(54,31,0)
(51,33,0)
(19,14,0)
(31,16,0)
(33,29,0)
(33,51,0)
(21,5,0)
(32,23,0)
(16,13,0)
(3,49,0)
(46,8,0)
(29,48,0)
(44,42,0)
(8,5,0)
(36,47,0)
(45,51,0)
(47,36,0)
(42,5,0)
(44,4,0)
(30,4,0)
(9,11,0)
(35,14,0)
(47,8,0)
(56,26,0)
(40,29,0)
(42,51,0)
(16,23,0)
(15,48,0)
(25,43,0)
(53,31,0)
(55,36,0)
(12,43,0)
(31,48,0)
(9,16,0)
(51,42,0)
(27,44,0)
(18,47,0)
(57,48,0)
(44,5,0)
(23,16,0)
(52,29,0)
(0,9,0)
(48,13,0)
(1,11,0)
(12,41,0)
(20,5,0)
(14,42,0)
(11,13,0)
(49,29,0)
(28,13,0)
(50,49,0)
(2,11,0)
(38,4,0)
(17,44,0)
(43,12,0)
(36,29,0)
(4,29,0)
(26,42,0)
(34,36,0)
(10,48,0)
(38,27,1)
(9,0,1)
(0,1,1)
(42,51,1)
(49,29,1)
(40,31,1)
(24,49,1)
(14,42,1)
(19,42,1)
(2,16,1)
(54,11,1)
(11,9,1)
(9,16,1)
(53,54,1)
(17,12,1)
(3,29,1)
(8,46,1)
(27,17,1)
(25,14,1)
(46,47,1)
(47,36,1)
(18,44,1)
(30,38,1)
(50,3,1)
(35,19,1)
(4,30,1)
(39,49,1)
(37,22,1)
(43,25,1)
(22,8,1)
(44,42,1)
(29,31,1)
(1,2,1)
(31,16,1)
(56,37,1)
(37,42,1)
(16,23,1)
(33,7,1)
(44,4,1)
(34,55,1)
(36,34,1)
(52,40,1)
(12,43,1)
(29,52,1)
(7,24,1)
(32,6,1)
(23,32,1)
(31,53,1)
(26,56,1)
(49,50,1)
(39,26,1)
(26,42,1)
(51,33,1)
(17,14,1)
(4,29,1)
(51,45,1)
(55,18,1)
(36,29,1)
(47,42,1)
(14,35,1)
(33,29,1)
(30,49,2)
(33,29,2)
(7,49,2)
(18,49,2)
(38,49,2)
(35,49,2)
(26,42,2)
(44,4,2)
(33,49,2)
(51,33,2)
(12,43,2)
(56,49,2)
(49,29,2)
(46,49,2)
(51,49,2)
(24,49,2)
(17,49,2)
(51,45,2)
(14,49,2)
(42,49,2)
(14,42,2)
(16,23,2)
(47,36,2)
(9,16,2)
(27,49,2)
(22,49,2)
(43,14,2)
(44,49,2)
(31,16,2)
(36,29,2)
(37,49,2)
(36,49,2)
(47,49,2)
(4,29,2)
(12,14,2)
(29,31,2)
(55,49,2)
(26,49,2)
(44,42,2)
(4,49,2)
(42,51,2)
(8,49,2)
(34,49,2)
(47,42,2)
(11,9,2)
(37,42,2)
(25,14,2)
(19,49,2)
-----------------------------------
(0,data)
(1,"%d")
(2,stdin)
(3,data)
(4,data-1)
(5,)
(6,data)
(7,data)
(8,dataBuffer[data-1] = \\\'\\\\0\\\')
(9,&data)
(10,data)
(11,fscanf(stdin, "%d", &data)
(12,exit(-1)
(13,)
(14,dataBuffer == NULL)
(15,dataCopy)
(16,data = -1)
(17,dataBuffer)
(18,dataBuffer)
(19,dataBuffer)
(20,dataBuffer)
(21,if (dataBuffer == NULL)
(22,dataBuffer)
(23,-1)
(24,dataBuffer)
(25,1)
(26,free(dataBuffer)
(27,\\\'A\\\')
(28,data)
(29,data = dataCopy)
(30,1)
(31,dataCopy = data)
(32,1)
(33,malloc(data)
(34,1)
(35,NULL)
(36,data-1)
(37,printLine(dataBuffer)
(38,data)
(39,RET)
(40,data)
(41,)
(42,* dataBuffer = (char *)
(43,-1)
(44,memset(dataBuffer, \\\'A\\\', data-1)
(45,char *)
(46,\\\'\\\\0\\\')
(47,dataBuffer[data-1])
(48,)
(49,data < 100)
(50,100)
(51,(char *)
(52,dataCopy)
(53,data)
(54,dataCopy)
(55,data)
(56,dataBuffer)
(57,if (data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^