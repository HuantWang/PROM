-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,71,73,74,78,80,83,85,89,91,96,98,102,104,105,108,109,114,117,118,119,123,125,129,131
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
87,88
87,89
106,107
106,108
111,112
111,113
115,116
115,117
-----guardedBy-----
40,56
66,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_07_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,37,0)
(39,59,0)
(31,28,0)
(12,17,0)
(59,26,0)
(17,41,0)
(50,3,0)
(0,38,0)
(7,28,0)
(26,19,0)
(63,37,0)
(54,22,0)
(5,41,0)
(17,27,0)
(30,54,0)
(49,22,0)
(55,2,0)
(64,48,0)
(40,15,0)
(63,62,0)
(22,49,0)
(38,26,0)
(42,22,0)
(61,13,0)
(25,42,0)
(52,40,0)
(65,57,0)
(6,22,0)
(33,36,0)
(52,17,0)
(24,4,0)
(16,68,0)
(26,40,0)
(58,48,0)
(20,49,0)
(54,57,0)
(4,19,0)
(37,63,0)
(52,22,0)
(44,13,0)
(18,57,0)
(60,32,0)
(21,48,0)
(29,13,0)
(28,50,0)
(41,28,0)
(9,48,0)
(48,28,0)
(51,50,0)
(32,17,0)
(35,4,0)
(32,22,0)
(46,35,0)
(15,40,0)
(54,17,0)
(42,35,0)
(34,32,0)
(11,42,0)
(36,26,0)
(36,19,0)
(57,54,0)
(57,26,0)
(35,26,0)
(40,26,0)
(59,19,0)
(35,42,0)
(48,21,0)
(8,38,0)
(1,68,0)
(43,26,0)
(47,50,0)
(14,52,0)
(67,21,0)
(57,19,0)
(45,54,0)
(56,19,0)
(42,17,0)
(41,17,0)
(66,55,0)
(40,52,0)
(23,19,0)
(22,13,0)
(12,21,1)
(40,52,1)
(53,59,1)
(64,28,1)
(28,7,1)
(16,22,1)
(52,22,1)
(41,28,1)
(36,26,1)
(48,9,1)
(63,37,1)
(54,22,1)
(49,20,1)
(5,12,1)
(42,22,1)
(30,65,1)
(35,26,1)
(36,33,1)
(65,18,1)
(38,26,1)
(1,16,1)
(14,43,1)
(22,49,1)
(0,26,1)
(7,31,1)
(32,17,1)
(34,68,1)
(42,17,1)
(59,39,1)
(67,48,1)
(34,17,1)
(68,1,1)
(26,40,1)
(18,63,1)
(55,66,1)
(38,8,1)
(39,36,1)
(21,48,1)
(9,58,1)
(10,38,1)
(54,17,1)
(18,38,1)
(52,17,1)
(11,46,1)
(20,6,1)
(31,68,1)
(59,26,1)
(21,67,1)
(41,5,1)
(48,28,1)
(57,54,1)
(32,60,1)
(46,57,1)
(43,32,1)
(54,45,1)
(32,22,1)
(24,35,1)
(17,41,1)
(60,34,1)
(8,0,1)
(34,55,1)
(52,14,1)
(35,42,1)
(58,64,1)
(37,10,1)
(4,24,1)
(45,30,1)
(57,26,1)
(66,21,1)
(33,4,1)
(53,32,1)
(25,11,1)
(40,15,1)
(42,25,1)
(57,26,2)
(21,48,2)
(8,32,2)
(63,37,2)
(12,21,2)
(40,15,2)
(36,26,2)
(52,17,2)
(37,38,2)
(42,17,2)
(17,21,2)
(38,26,2)
(40,52,2)
(35,42,2)
(26,40,2)
(42,32,2)
(42,22,2)
(66,21,2)
(9,68,2)
(59,32,2)
(28,68,2)
(4,32,2)
(54,32,2)
(54,22,2)
(11,32,2)
(35,26,2)
(21,68,2)
(41,28,2)
(10,38,2)
(55,21,2)
(59,26,2)
(57,32,2)
(52,22,2)
(48,68,2)
(43,32,2)
(58,68,2)
(46,32,2)
(33,32,2)
(32,22,2)
(40,32,2)
(26,32,2)
(31,68,2)
(14,32,2)
(54,17,2)
(52,32,2)
(45,32,2)
(41,21,2)
(35,32,2)
(5,21,2)
(24,32,2)
(7,68,2)
(38,32,2)
(30,32,2)
(32,17,2)
(63,38,2)
(39,32,2)
(36,32,2)
(0,32,2)
(48,28,2)
(17,41,2)
(65,32,2)
(18,32,2)
(57,54,2)
(67,68,2)
(25,32,2)
(64,68,2)
(22,49,2)
-----------------------------------
(0,dataBuffer)
(1,5)
(2,)
(3,)
(4,dataBuffer[data-1] = \\\'\\\\0\\\')
(5,inputBuffer)
(6,data)
(7,"")
(8,NULL)
(9,stdin)
(10,1)
(11,data)
(12,data)
(13,)
(14,data)
(15,char *)
(16,staticFive)
(17,data = atoi(inputBuffer)
(18,dataBuffer)
(19,)
(20,1)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,data = -1)
(23,if (dataBuffer == NULL)
(24,\\\'\\\\0\\\')
(25,1)
(26,* dataBuffer = (char *)
(27,)
(28,inputBuffer[CHAR_ARRAY_SIZE] = "")
(29,if(staticFive==5)
(30,data)
(31,inputBuffer)
(32,data < 100)
(33,dataBuffer)
(34,data)
(35,dataBuffer[data-1])
(36,printLine(dataBuffer)
(37,-1)
(38,dataBuffer == NULL)
(39,dataBuffer)
(40,(char *)
(41,atoi(inputBuffer)
(42,data-1)
(43,dataBuffer)
(44,if (data < 100)
(45,1)
(46,dataBuffer)
(47,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,-1)
(50,)
(51,inputBuffer)
(52,malloc(data)
(53,RET)
(54,data-1)
(55,printLine("fgets()
(56,dataBuffer)
(57,memset(dataBuffer, \\\'A\\\', data-1)
(58,CHAR_ARRAY_SIZE)
(59,free(dataBuffer)
(60,100)
(61,data)
(62,)
(63,exit(-1)
(64,inputBuffer)
(65,\\\'A\\\')
(66,"fgets()
(67,NULL)
(68,staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^