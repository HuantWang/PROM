-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a negative number */
    data = -1;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,29,30,34,36,37,41,43,46,48,52,54,59,61,65,67,68,71,72,77,80,81,82,86,88,92,94
-----computeFrom-----
12,13
12,14
21,22
21,23
27,28
27,29
50,51
50,52
69,70
69,71
74,75
74,76
78,79
78,80
-----guardedBy-----
29,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_18_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a negative number */    data = -1;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a negative number */    data = -1;
source
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,47,0)
(17,12,0)
(13,25,0)
(26,34,0)
(27,25,0)
(25,34,0)
(17,26,0)
(46,44,0)
(12,44,0)
(6,34,0)
(50,27,0)
(24,47,0)
(7,18,0)
(14,22,0)
(37,39,0)
(0,34,0)
(42,52,0)
(42,44,0)
(28,22,0)
(38,17,0)
(2,26,0)
(17,52,0)
(15,27,0)
(49,44,0)
(3,22,0)
(48,9,0)
(27,52,0)
(8,52,0)
(39,44,0)
(52,44,0)
(10,0,0)
(34,22,0)
(16,6,0)
(30,41,0)
(11,52,0)
(5,6,0)
(35,34,0)
(25,27,0)
(9,4,0)
(4,9,0)
(32,25,0)
(4,51,0)
(18,0,0)
(52,18,0)
(41,22,0)
(31,8,0)
(20,8,0)
(18,52,0)
(21,22,0)
(27,44,0)
(33,26,0)
(18,7,0)
(0,18,0)
(47,34,0)
(39,52,0)
(23,12,0)
(26,17,0)
(43,41,0)
(1,42,0)
(17,52,1)
(41,30,1)
(27,52,1)
(33,2,1)
(4,9,1)
(26,33,1)
(13,32,1)
(50,8,1)
(48,8,1)
(6,34,1)
(5,34,1)
(50,4,1)
(42,1,1)
(52,18,1)
(31,52,1)
(16,5,1)
(39,37,1)
(39,52,1)
(42,52,1)
(47,24,1)
(18,0,1)
(25,34,1)
(18,7,1)
(14,41,1)
(45,42,1)
(9,48,1)
(8,52,1)
(38,27,1)
(0,10,1)
(12,23,1)
(17,26,1)
(20,31,1)
(0,34,1)
(32,15,1)
(26,34,1)
(1,39,1)
(25,13,1)
(45,6,1)
(2,38,1)
(35,14,1)
(15,50,1)
(24,35,1)
(8,20,1)
(30,43,1)
(27,25,1)
(10,11,1)
(23,17,1)
(37,12,1)
(11,6,1)
(34,47,1)
(6,16,1)
(52,18,2)
(52,6,2)
(27,25,2)
(27,52,2)
(18,6,2)
(0,6,2)
(17,6,2)
(17,52,2)
(20,6,2)
(50,6,2)
(8,52,2)
(6,34,2)
(26,34,2)
(26,6,2)
(39,52,2)
(42,6,2)
(38,6,2)
(8,6,2)
(17,26,2)
(25,34,2)
(23,6,2)
(34,47,2)
(0,34,2)
(10,6,2)
(25,6,2)
(31,6,2)
(48,8,2)
(27,6,2)
(18,7,2)
(2,6,2)
(32,6,2)
(15,6,2)
(1,6,2)
(9,8,2)
(4,9,2)
(39,6,2)
(42,52,2)
(13,6,2)
(11,6,2)
(4,8,2)
(37,6,2)
(33,6,2)
(18,0,2)
(12,6,2)
-----------------------------------
(0,malloc(data)
(1,dataBuffer)
(2,data)
(3,source:)
(4,exit(-1)
(5,data)
(6,data < 100)
(7,char *)
(8,dataBuffer == NULL)
(9,-1)
(10,data)
(11,dataBuffer)
(12,dataBuffer[data-1] = \'\\\\0\')
(13,1)
(14,goto source;)
(15,\'A\')
(16,100)
(17,dataBuffer[data-1])
(18,(char *)
(19,'A')
(20,NULL)
(21,data)
(22,)
(23,'\\\\0')
(24,1)
(25,data-1)
(26,data-1)
(27,memset(dataBuffer, 'A', data-1)
(28,if (data < 100)
(29,memset(dataBuffer, \'A\', data-1)
(30,0)
(31,dataBuffer)
(32,data)
(33,1)
(34,data = -1)
(35,data)
(36,\'\\\\0\')
(37,dataBuffer)
(38,dataBuffer)
(39,printLine(dataBuffer)
(40,dataBuffer[data-1] = '\\\\0')
(41,data = 0)
(42,free(dataBuffer)
(43,data)
(44,)
(45,RET)
(46,if (dataBuffer == NULL)
(47,-1)
(48,1)
(49,dataBuffer)
(50,dataBuffer)
(51,)
(52,* dataBuffer = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^