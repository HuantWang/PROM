-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_64b_badSink(void * dataVoidPtr)
CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,14,0)
(28,32,0)
(5,20,0)
(14,41,0)
(6,30,0)
(41,14,0)
(18,42,0)
(33,22,0)
(30,41,0)
(3,11,0)
(28,24,0)
(39,24,0)
(49,42,0)
(53,35,0)
(13,21,0)
(20,2,0)
(37,1,0)
(4,11,0)
(38,32,0)
(24,28,0)
(2,41,0)
(15,31,0)
(45,14,0)
(14,45,0)
(14,9,0)
(41,11,0)
(9,28,0)
(42,28,0)
(1,29,0)
(8,31,0)
(1,37,0)
(0,21,0)
(0,41,0)
(35,41,0)
(12,33,0)
(31,28,0)
(25,33,0)
(33,25,0)
(20,28,0)
(21,11,0)
(43,2,0)
(35,11,0)
(2,20,0)
(30,11,0)
(10,54,0)
(51,2,0)
(26,37,0)
(0,42,0)
(33,54,0)
(42,0,0)
(44,41,0)
(54,32,0)
(54,33,0)
(27,41,0)
(24,54,0)
(40,44,0)
(34,32,0)
(2,11,0)
(23,0,0)
(46,28,0)
(19,9,0)
(7,20,0)
(17,32,0)
(36,44,0)
(33,12,1)
(37,26,1)
(51,1,1)
(9,19,1)
(40,36,1)
(0,41,1)
(14,9,1)
(43,51,1)
(30,41,1)
(2,20,1)
(18,49,1)
(6,21,1)
(24,39,1)
(13,0,1)
(35,41,1)
(1,37,1)
(20,28,1)
(28,24,1)
(24,54,1)
(20,7,1)
(36,41,1)
(7,5,1)
(23,2,1)
(0,42,1)
(52,31,1)
(49,23,1)
(14,45,1)
(9,28,1)
(27,31,1)
(52,35,1)
(41,14,1)
(46,54,1)
(31,28,1)
(30,6,1)
(54,33,1)
(44,41,1)
(33,22,1)
(39,46,1)
(51,44,1)
(42,28,1)
(21,13,1)
(15,28,1)
(2,41,1)
(35,53,1)
(5,43,1)
(31,8,1)
(42,18,1)
(44,40,1)
(8,15,1)
(53,30,1)
(33,25,1)
(26,44,1)
(12,10,1)
(19,27,1)
(30,41,2)
(44,31,2)
(42,31,2)
(14,31,2)
(27,31,2)
(33,22,2)
(28,24,2)
(37,44,2)
(49,31,2)
(7,31,2)
(21,31,2)
(31,28,2)
(2,20,2)
(19,31,2)
(42,28,2)
(40,31,2)
(0,31,2)
(9,28,2)
(36,31,2)
(2,31,2)
(35,41,2)
(0,42,2)
(9,31,2)
(35,31,2)
(6,31,2)
(13,31,2)
(1,37,2)
(23,31,2)
(53,31,2)
(2,41,2)
(51,31,2)
(18,31,2)
(26,44,2)
(1,44,2)
(33,25,2)
(14,9,2)
(41,31,2)
(24,54,2)
(20,28,2)
(44,41,2)
(5,31,2)
(30,31,2)
(14,45,2)
(43,31,2)
(54,33,2)
(0,41,2)
(41,14,2)
(20,31,2)
-----------------------------------
(0,dataBuffer[data-1])
(1,exit(-1)
(2,memset(dataBuffer, 'A', data-1)
(3,if (dataBuffer == NULL)
(4,dataBuffer)
(5,data)
(6,dataBuffer)
(7,1)
(8,100)
(9,malloc(data)
(10,dataPtr)
(11,)
(12,dataVoidPtr)
(13,'\\\\0')
(14,(char *)
(15,data)
(16,memset(dataBuffer, \'A\', data-1)
(17,dataPtr)
(18,1)
(19,data)
(20,data-1)
(21,dataBuffer[data-1] = '\\\\0')
(22,void * dataVoidPtr)
(23,dataBuffer)
(24,*dataPtr)
(25,int *)
(26,1)
(27,dataBuffer)
(28,data = (*dataPtr)
(29,)
(30,printLine(dataBuffer)
(31,data < 100)
(32,)
(33,(int *)
(34,if (data < 100)
(35,free(dataBuffer)
(36,dataBuffer)
(37,-1)
(38,data)
(39,dataPtr)
(40,NULL)
(41,* dataBuffer = (char *)
(42,data-1)
(43,\'A\')
(44,dataBuffer == NULL)
(45,char *)
(46,data)
(47,'A')
(48,dataBuffer[data-1] = \'\\\\0\')
(49,data)
(50,\'\\\\0\')
(51,dataBuffer)
(52,RET)
(53,dataBuffer)
(54,* dataPtr = (int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^