-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad()
{
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE];
        double doubleNumber = 0;
        /* Enter: 1e-50, result should be 0.0 (for bad case)
         *
         * Note: alternate input
         * 999999999999999999999999999999999999999999999999999999999999999
         */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Read a double */
            doubleNumber = atof(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
        /* FLAW: should not cast without checking if conversion is safe */
        printFloatLine((float)doubleNumber);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,7,10,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,65,66,67,71,72,73
-----computeFrom-----
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad(){    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_15_bad
{    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE];        double doubleNumber = 0;        /* Enter: 1e-50, result should be 0.0 (for bad case)         *         * Note: alternate input         * 999999999999999999999999999999999999999999999999999999999999999         */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }        /* FLAW: should not cast without checking if conversion is safe */        printFloatLine((float)doubleNumber);    }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Read a double */            doubleNumber = atof(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Read a double */            doubleNumber = atof(inputBuffer);        }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printFloatLine((float)doubleNumber);
printFloatLine((float)doubleNumber)
printFloatLine
printFloatLine
(float)doubleNumber
float
float

doubleNumber
doubleNumber
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,1,0)
(27,12,0)
(14,17,0)
(21,28,0)
(11,26,0)
(28,10,0)
(33,27,0)
(1,17,0)
(18,0,0)
(10,28,0)
(19,22,0)
(28,21,0)
(20,17,0)
(32,4,0)
(23,33,0)
(6,28,0)
(8,22,0)
(27,33,0)
(30,17,0)
(29,9,0)
(3,0,0)
(16,0,0)
(28,27,0)
(22,9,0)
(34,11,0)
(9,17,0)
(7,3,0)
(21,9,0)
(5,27,0)
(24,9,0)
(31,17,0)
(28,22,0)
(15,0,0)
(13,9,0)
(0,3,0)
(2,25,1)
(30,1,1)
(8,19,1)
(21,28,1)
(1,2,1)
(15,22,1)
(5,3,1)
(28,27,1)
(35,14,1)
(28,6,1)
(23,5,1)
(19,25,1)
(16,15,1)
(33,23,1)
(14,21,1)
(6,27,1)
(18,16,1)
(3,7,1)
(22,8,1)
(11,34,1)
(3,0,1)
(28,10,1)
(27,33,1)
(28,22,1)
(7,0,1)
(34,3,1)
(6,11,1)
(0,18,1)
(35,30,1)
(3,25,2)
(21,28,2)
(15,25,2)
(0,25,2)
(28,27,2)
(19,25,2)
(5,3,2)
(27,33,2)
(23,3,2)
(28,10,2)
(27,3,2)
(28,22,2)
(3,0,2)
(34,3,2)
(6,25,2)
(22,25,2)
(7,25,2)
(33,3,2)
(1,25,2)
(18,25,2)
(30,25,2)
(16,25,2)
(28,25,2)
(2,25,2)
(21,25,2)
(11,3,2)
(14,25,2)
(8,25,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,printLine("Benign, fixed string")
(2,"Benign, fixed string")
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,)
(5,doubleNumber)
(6,doubleNumber)
(7,NULL)
(8,0)
(9,)
(10,float)
(11,printLine("fgets()
(12,)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,break;)
(15,inputBuffer)
(16,CHAR_ARRAY_SIZE)
(17,)
(18,stdin)
(19,doubleNumber)
(20,case 6:)
(21,printFloatLine((float)
(22,doubleNumber = 0)
(23,inputBuffer)
(24,inputBuffer)
(25,6)
(26,)
(27,doubleNumber = atof(inputBuffer)
(28,(float)
(29,doubleNumber)
(30,break;)
(31,default:)
(32,switch(6)
(33,atof(inputBuffer)
(34,"fgets()
(35,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^