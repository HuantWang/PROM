-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_17_bad()
{
    int i;
    short data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
36,39
36,40
37,38
39,40
42,43
43,44
45,46
45,47
46,47
46,48
47,48
50,51
50,52
50,53
50,54
50,55
50,56
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,13,15,19,20,25,26,29,30,33,38,40,41,44,48,49,53,55,56,60,62,65,67,71,73,78,80,84,86,87,90,91,96,99,100,101,105,107,111,113
-----computeFrom-----
17,18
17,19
23,24
23,25
27,28
27,29
46,47
46,48
69,70
69,71
88,89
88,90
93,94
93,95
97,98
97,99
-----guardedBy-----
48,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_17_bad(){    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_17_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_17_bad
{    int i;    short data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,31,0)
(34,3,0)
(27,58,0)
(20,27,0)
(39,38,0)
(49,38,0)
(18,50,0)
(36,51,0)
(50,47,0)
(9,2,0)
(16,42,0)
(8,49,0)
(4,58,0)
(22,48,0)
(52,13,0)
(25,33,0)
(16,26,0)
(46,51,0)
(14,40,0)
(3,58,0)
(33,40,0)
(55,2,0)
(32,31,0)
(3,5,0)
(48,4,0)
(2,48,0)
(12,38,0)
(5,3,0)
(3,50,0)
(57,38,0)
(17,33,0)
(13,58,0)
(37,53,0)
(40,33,0)
(2,51,0)
(15,49,0)
(53,47,0)
(47,50,0)
(7,58,0)
(45,36,0)
(5,51,0)
(21,5,0)
(40,51,0)
(1,31,0)
(48,50,0)
(6,26,0)
(28,4,0)
(56,43,0)
(43,50,0)
(47,53,0)
(0,31,0)
(50,58,0)
(27,50,0)
(53,51,0)
(19,57,0)
(24,43,0)
(13,50,0)
(30,51,0)
(10,47,0)
(33,29,0)
(41,5,0)
(54,58,0)
(48,2,0)
(11,31,0)
(23,36,0)
(35,3,0)
(47,10,0)
(26,16,0)
(13,52,1)
(24,50,1)
(25,17,1)
(38,12,1)
(44,13,1)
(37,18,1)
(27,20,1)
(47,53,1)
(3,50,1)
(46,30,1)
(49,38,1)
(36,23,1)
(48,50,1)
(43,50,1)
(16,26,1)
(57,19,1)
(53,37,1)
(28,48,1)
(4,28,1)
(44,36,1)
(3,5,1)
(26,6,1)
(36,51,1)
(53,51,1)
(18,36,1)
(56,24,1)
(8,38,1)
(27,50,1)
(6,43,1)
(14,25,1)
(51,46,1)
(35,34,1)
(17,49,1)
(34,16,1)
(22,3,1)
(12,39,1)
(2,51,1)
(20,4,1)
(19,33,1)
(47,10,1)
(5,51,1)
(50,47,1)
(23,45,1)
(13,50,1)
(15,8,1)
(21,35,1)
(48,2,1)
(39,51,1)
(45,49,1)
(43,56,1)
(49,15,1)
(40,14,1)
(9,55,1)
(33,40,1)
(8,57,1)
(40,51,1)
(41,21,1)
(57,38,1)
(52,27,1)
(34,43,1)
(2,9,1)
(55,22,1)
(5,41,1)
(41,36,2)
(33,49,2)
(27,36,2)
(13,36,2)
(3,36,2)
(18,36,2)
(8,49,2)
(49,49,2)
(3,5,2)
(47,36,2)
(43,36,2)
(36,51,2)
(26,43,2)
(5,36,2)
(49,38,2)
(4,36,2)
(17,49,2)
(25,49,2)
(6,43,2)
(2,36,2)
(15,49,2)
(24,36,2)
(16,43,2)
(3,50,2)
(20,36,2)
(35,36,2)
(19,49,2)
(43,50,2)
(9,36,2)
(56,36,2)
(48,36,2)
(5,51,2)
(27,50,2)
(28,36,2)
(33,40,2)
(50,36,2)
(40,49,2)
(40,51,2)
(57,49,2)
(2,51,2)
(48,50,2)
(34,36,2)
(14,49,2)
(13,50,2)
(52,36,2)
(22,36,2)
(16,26,2)
(57,38,2)
(37,36,2)
(21,36,2)
(53,51,2)
(53,36,2)
(50,47,2)
(47,10,2)
(48,2,2)
(47,53,2)
(55,36,2)
-----------------------------------
(0,data)
(1,for(i = 0; i < 1; i++)
(2,data-1)
(3,memset(dataBuffer, \\\'A\\\', data-1)
(4,dataBuffer[data-1] = \\\'\\\\0\\\')
(5,data-1)
(6,1)
(7,dataBuffer)
(8,i)
(9,1)
(10,char *)
(11,i)
(12,0)
(13,free(dataBuffer)
(14,data)
(15,1)
(16,exit(-1)
(17,stdin)
(18,dataBuffer)
(19,i)
(20,dataBuffer)
(21,data)
(22,dataBuffer)
(23,100)
(24,dataBuffer)
(25,"%hd")
(26,-1)
(27,printLine(dataBuffer)
(28,\\\'\\\\0\\\')
(29,)
(30,data)
(31,)
(32,if (data < 100)
(33,fscanf (stdin, "%hd", &data)
(34,dataBuffer)
(35,\\\'A\\\')
(36,data < 100)
(37,data)
(38,i = 0)
(39,i)
(40,&data)
(41,1)
(42,)
(43,dataBuffer == NULL)
(44,RET)
(45,data)
(46,0)
(47,(char *)
(48,dataBuffer[data-1])
(49,i < 1)
(50,* dataBuffer = (char *)
(51,data = 0)
(52,dataBuffer)
(53,malloc(data)
(54,if (dataBuffer == NULL)
(55,data)
(56,NULL)
(57,i++)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^