-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
34,37
34,38
34,39
34,40
35,36
36,37
36,38
38,39
38,40
38,41
41,42
42,43
42,44
43,44
43,45
45,46
47,48
47,49
48,49
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
81,82
81,83
82,83
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,32,33,37,39,40,44,46,49,51,55,57,62,64,68,70,71,74,75,80,83,84,85,89,91,95,97
-----computeFrom-----
12,13
12,14
30,31
30,32
53,54
53,55
72,73
72,74
77,78
77,79
81,82
81,83
-----guardedBy-----
32,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_02_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
1
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(30,1,0)
(46,7,0)
(13,33,0)
(30,7,0)
(15,30,0)
(34,36,0)
(9,50,0)
(10,29,0)
(48,38,0)
(31,50,0)
(1,26,0)
(17,9,0)
(25,36,0)
(46,32,0)
(50,9,0)
(14,46,0)
(35,49,0)
(43,38,0)
(47,1,0)
(19,36,0)
(3,44,0)
(50,7,0)
(22,19,0)
(4,34,0)
(13,27,0)
(41,9,0)
(32,34,0)
(33,13,0)
(25,19,0)
(8,18,0)
(12,7,0)
(2,44,0)
(32,46,0)
(40,36,0)
(45,18,0)
(21,33,0)
(24,7,0)
(11,1,0)
(5,19,0)
(49,10,0)
(49,7,0)
(0,32,0)
(39,5,0)
(10,49,0)
(9,36,0)
(20,50,0)
(42,38,0)
(7,38,0)
(28,36,0)
(29,10,0)
(23,25,0)
(19,10,0)
(32,19,0)
(18,7,0)
(44,19,0)
(10,19,0)
(5,36,0)
(6,46,0)
(9,19,0)
(1,30,0)
(3,19,1)
(19,10,1)
(10,29,1)
(47,16,1)
(46,6,1)
(39,34,1)
(49,35,1)
(5,19,1)
(44,2,1)
(0,9,1)
(31,17,1)
(25,23,1)
(30,15,1)
(8,45,1)
(13,33,1)
(33,21,1)
(44,19,1)
(12,24,1)
(20,31,1)
(23,5,1)
(2,3,1)
(5,39,1)
(37,18,1)
(6,14,1)
(30,7,1)
(18,7,1)
(15,11,1)
(41,13,1)
(34,4,1)
(32,19,1)
(21,44,1)
(35,22,1)
(22,18,1)
(9,50,1)
(37,25,1)
(45,1,1)
(7,12,1)
(46,7,1)
(4,32,1)
(14,0,1)
(50,7,1)
(10,49,1)
(16,7,1)
(11,47,1)
(50,20,1)
(25,19,1)
(45,16,1)
(41,44,1)
(1,30,1)
(49,7,1)
(32,46,1)
(18,8,1)
(9,19,1)
(17,41,1)
(5,19,2)
(50,18,2)
(11,16,2)
(14,18,2)
(35,18,2)
(32,46,2)
(25,18,2)
(6,18,2)
(44,19,2)
(13,33,2)
(3,18,2)
(21,44,2)
(46,7,2)
(50,7,2)
(9,18,2)
(41,18,2)
(30,7,2)
(18,7,2)
(39,18,2)
(10,18,2)
(10,29,2)
(19,18,2)
(13,44,2)
(23,18,2)
(5,18,2)
(25,19,2)
(0,18,2)
(49,18,2)
(9,50,2)
(20,18,2)
(34,18,2)
(9,19,2)
(22,18,2)
(31,18,2)
(2,18,2)
(10,49,2)
(4,18,2)
(33,44,2)
(1,16,2)
(47,16,2)
(17,18,2)
(44,18,2)
(32,19,2)
(32,18,2)
(1,30,2)
(30,16,2)
(15,16,2)
(49,7,2)
(19,10,2)
(46,18,2)
-----------------------------------
(0,dataBuffer)
(1,fscanf (stdin, "%hd", &data)
(2,NULL)
(3,dataBuffer)
(4,\\\'\\\\0\\\')
(5,printLine(dataBuffer)
(6,1)
(7,data = 0)
(8,100)
(9,memset(dataBuffer, \\\'A\\\', data-1)
(10,(char *)
(11,"%hd")
(12,0)
(13,exit(-1)
(14,data)
(15,data)
(16,1)
(17,\\\'A\\\')
(18,data < 100)
(19,* dataBuffer = (char *)
(20,1)
(21,1)
(22,dataBuffer)
(23,dataBuffer)
(24,data)
(25,free(dataBuffer)
(26,)
(27,)
(28,if (dataBuffer == NULL)
(29,char *)
(30,&data)
(31,data)
(32,dataBuffer[data-1])
(33,-1)
(34,dataBuffer[data-1] = \\\'\\\\0\\\')
(35,data)
(36,)
(37,RET)
(38,)
(39,dataBuffer)
(40,dataBuffer)
(41,dataBuffer)
(42,data)
(43,if (data < 100)
(44,dataBuffer == NULL)
(45,data)
(46,data-1)
(47,stdin)
(48,if(1)
(49,malloc(data)
(50,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^