-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_10_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
93,95
97,98
97,99
98,99
98,100
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
105,106
107,108
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
122,123
122,124
123,124
125,126
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,66,68,71,73,75,77,81,83,84,86,87,92,94,95,96,100,101,106,108,110,112,117,119,120,124,126
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
85,86
85,87
89,90
89,91
93,94
93,95
98,99
98,100
114,115
114,116
-----guardedBy-----
38,54
100,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_10_bad(){    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_10_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_10_bad
{    int data;    /* Initialize data */    data = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(22,61,0)
(7,37,0)
(1,25,0)
(8,7,0)
(29,13,0)
(19,51,0)
(38,35,0)
(50,44,0)
(3,54,0)
(30,10,0)
(33,35,0)
(48,19,0)
(53,9,0)
(16,25,0)
(37,7,0)
(35,41,0)
(40,7,0)
(32,25,0)
(38,51,0)
(61,35,0)
(35,0,0)
(63,61,0)
(18,41,0)
(7,25,0)
(62,51,0)
(61,47,0)
(46,1,0)
(27,37,0)
(34,38,0)
(42,11,0)
(43,38,0)
(45,54,0)
(19,35,0)
(21,0,0)
(3,39,0)
(64,11,0)
(38,44,0)
(11,10,0)
(56,13,0)
(51,20,0)
(15,3,0)
(0,35,0)
(12,39,0)
(17,62,0)
(52,61,0)
(49,19,0)
(5,25,0)
(31,3,0)
(32,13,0)
(24,55,0)
(2,39,0)
(61,51,0)
(61,13,0)
(57,32,0)
(38,13,0)
(62,39,0)
(4,51,0)
(10,1,0)
(25,41,0)
(39,55,0)
(44,47,0)
(55,36,0)
(10,11,0)
(9,23,0)
(51,62,0)
(60,25,0)
(13,25,0)
(28,3,0)
(26,41,0)
(54,3,0)
(6,55,0)
(14,37,0)
(61,51,1)
(62,17,1)
(54,45,1)
(28,39,1)
(12,58,1)
(56,9,1)
(0,21,1)
(21,33,1)
(19,35,1)
(38,35,1)
(53,54,1)
(13,29,1)
(37,27,1)
(40,8,1)
(56,58,1)
(44,50,1)
(32,57,1)
(52,22,1)
(59,32,1)
(15,28,1)
(39,2,1)
(46,10,1)
(3,31,1)
(48,1,1)
(61,13,1)
(54,3,1)
(61,35,1)
(19,49,1)
(17,4,1)
(43,61,1)
(7,37,1)
(34,43,1)
(35,0,1)
(8,13,1)
(57,44,1)
(42,30,1)
(19,51,1)
(1,46,1)
(9,53,1)
(38,51,1)
(27,14,1)
(63,52,1)
(58,35,1)
(3,39,1)
(10,11,1)
(50,38,1)
(38,13,1)
(4,54,1)
(38,34,1)
(22,19,1)
(56,51,1)
(14,40,1)
(62,39,1)
(61,63,1)
(31,15,1)
(11,64,1)
(32,13,1)
(29,56,1)
(64,42,1)
(45,3,1)
(57,19,1)
(2,12,1)
(30,7,1)
(51,62,1)
(49,48,1)
(4,54,2)
(39,58,2)
(3,39,2)
(51,54,2)
(35,0,2)
(51,62,2)
(19,35,2)
(44,19,2)
(2,58,2)
(63,19,2)
(53,54,2)
(45,58,2)
(7,37,2)
(38,13,2)
(31,58,2)
(9,54,2)
(54,3,2)
(22,19,2)
(38,51,2)
(12,58,2)
(38,19,2)
(17,54,2)
(34,19,2)
(61,51,2)
(3,58,2)
(43,19,2)
(61,13,2)
(54,58,2)
(50,19,2)
(62,39,2)
(15,58,2)
(32,13,2)
(61,35,2)
(28,58,2)
(52,19,2)
(19,51,2)
(62,54,2)
(61,19,2)
(38,35,2)
(10,11,2)
-----------------------------------
(0,-1)
(1,source[100-1] = \\\'\\\\0\\\')
(2,"")
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,data)
(5,dest)
(6,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,memset(source, \\\'A\\\', 100-1)
(8,source)
(9,printLine("fgets()
(10,source[100-1])
(11,100-1)
(12,inputBuffer)
(13,dest[100] = "")
(14,100)
(15,CHAR_ARRAY_SIZE)
(16,source)
(17,inputBuffer)
(18,data)
(19,data < 100)
(20,)
(21,1)
(22,dest)
(23,)
(24,inputBuffer)
(25,)
(26,if(globalTrue)
(27,1)
(28,inputBuffer)
(29,"")
(30,source)
(31,stdin)
(32,printLine(dest)
(33,data)
(34,data)
(35,data = -1)
(36,)
(37,100-1)
(38,dest[data])
(39,inputBuffer[CHAR_ARRAY_SIZE] = "")
(40,\\\'A\\\')
(41,)
(42,100)
(43,dest)
(44,dest[data] = \\\'\\\\0\\\')
(45,NULL)
(46,\\\'\\\\0\\\')
(47,)
(48,data)
(49,100)
(50,\\\'\\\\0\\\')
(51,data = atoi(inputBuffer)
(52,source)
(53,"fgets()
(54,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(55,)
(56,dest)
(57,dest)
(58,globalTrue)
(59,RET)
(60,if (data < 100)
(61,strncpy(dest, source, data)
(62,atoi(inputBuffer)
(63,data)
(64,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^