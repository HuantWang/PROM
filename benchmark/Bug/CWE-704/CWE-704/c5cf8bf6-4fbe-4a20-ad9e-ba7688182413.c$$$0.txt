-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_65b_badSink(short data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_65b_badSink(short data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_65b_badSink(short data)
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_65b_badSink
short data
short
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(10,38,0)
(20,14,0)
(35,14,0)
(29,32,0)
(23,4,0)
(30,31,0)
(43,27,0)
(28,9,0)
(38,27,0)
(37,31,0)
(34,21,0)
(37,27,0)
(15,37,0)
(8,28,0)
(38,18,0)
(18,40,0)
(10,14,0)
(0,27,0)
(16,38,0)
(14,9,0)
(19,28,0)
(14,10,0)
(3,31,0)
(41,27,0)
(31,37,0)
(26,27,0)
(2,21,0)
(17,37,0)
(13,6,0)
(7,10,0)
(40,18,0)
(31,9,0)
(24,0,0)
(18,33,0)
(37,38,0)
(40,9,0)
(13,5,0)
(26,38,0)
(21,38,0)
(32,38,0)
(5,13,0)
(10,0,0)
(33,18,0)
(18,38,0)
(32,27,0)
(25,26,0)
(1,40,0)
(11,5,0)
(25,0,1)
(14,35,1)
(31,9,1)
(36,32,1)
(7,37,1)
(11,21,1)
(29,26,1)
(26,25,1)
(40,9,1)
(26,38,1)
(20,7,1)
(37,31,1)
(15,17,1)
(18,33,1)
(28,9,1)
(30,3,1)
(1,16,1)
(28,8,1)
(21,34,1)
(32,38,1)
(16,28,1)
(17,21,1)
(0,24,1)
(21,38,1)
(10,14,1)
(10,38,1)
(35,20,1)
(14,9,1)
(31,30,1)
(3,15,1)
(18,40,1)
(17,13,1)
(34,2,1)
(38,18,1)
(24,10,1)
(32,29,1)
(37,38,1)
(5,11,1)
(40,1,1)
(13,5,1)
(36,28,1)
(2,38,1)
(8,19,1)
(29,28,2)
(25,28,2)
(31,28,2)
(17,28,2)
(18,28,2)
(11,21,2)
(1,28,2)
(10,14,2)
(14,9,2)
(32,38,2)
(18,40,2)
(18,33,2)
(28,9,2)
(7,28,2)
(31,9,2)
(26,28,2)
(20,28,2)
(34,28,2)
(15,28,2)
(10,28,2)
(37,31,2)
(13,21,2)
(40,9,2)
(2,28,2)
(0,28,2)
(14,28,2)
(32,28,2)
(21,38,2)
(38,28,2)
(35,28,2)
(10,38,2)
(16,28,2)
(5,21,2)
(24,28,2)
(13,5,2)
(38,18,2)
(21,28,2)
(37,38,2)
(30,28,2)
(37,28,2)
(3,28,2)
(40,28,2)
(26,38,2)
-----------------------------------
(0,dataBuffer[data-1] = \'\\\\0\')
(1,data)
(2,dataBuffer)
(3,data)
(4,)
(5,-1)
(6,)
(7,dataBuffer)
(8,100)
(9,short data)
(10,dataBuffer[data-1])
(11,1)
(12,dataBuffer[data-1] = '\\\\0')
(13,exit(-1)
(14,data-1)
(15,'A')
(16,dataBuffer)
(17,dataBuffer)
(18,(char *)
(19,data)
(20,data)
(21,dataBuffer == NULL)
(22,\'A\')
(23,if (data < 100)
(24,'\\\\0')
(25,dataBuffer)
(26,printLine(dataBuffer)
(27,)
(28,data < 100)
(29,dataBuffer)
(30,1)
(31,data-1)
(32,free(dataBuffer)
(33,char *)
(34,NULL)
(35,1)
(36,RET)
(37,memset(dataBuffer, \'A\', data-1)
(38,* dataBuffer = (char *)
(39,memset(dataBuffer, 'A', data-1)
(40,malloc(data)
(41,if (dataBuffer == NULL)
(42,\'\\\\0\')
(43,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^