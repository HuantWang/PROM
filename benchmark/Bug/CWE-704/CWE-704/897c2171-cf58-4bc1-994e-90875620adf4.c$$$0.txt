-----label-----
1
-----code-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FLAW: should not cast without checking if conversion is safe */
            printIntLine((int)(sqrt(doubleNumber)));
        }
    }
    else
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE];
            double doubleNumber = 0;
            /*  * Enter: -2.0, result should be 0 (for bad case)
             *
             * Square root of a negative number is NaN. NaN when casted to int is 0.
             */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Read a double */
                doubleNumber = atof(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */
            /* NOTE: The number could be really large, however we are testing NaN here */
            if (doubleNumber < 0)
            {
                printLine("Value is negative");
            }
            else
            {
                printIntLine((int)(sqrt(doubleNumber)));
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
71,75
72,73
73,74
73,75
75,76
75,77
77,78
78,79
80,81
81,82
81,83
83,84
83,85
85,86
87,88
87,89
87,90
88,89
88,90
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
98,99
100,101
101,102
102,103
102,104
103,104
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
116,117
116,118
116,119
117,118
117,119
118,119
121,122
122,123
123,124
123,125
124,125
127,128
128,129
129,130
129,131
130,131
132,133
132,134
133,134
133,135
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,9,14,16,19,22,24,26,31,33,35,37,39,44,47,49,54,55,59,62,63,67,69,74,76,79,82,84,86,91,93,95,97,99,104,107,109,114,115,119,120,125,126,131,134,135,139,141
-----computeFrom-----
28,29
28,30
42,43
42,44
88,89
88,90
102,103
102,104
117,118
117,119
-----guardedBy-----
33,49
93,109
-----guardedByNegation-----
119,141
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */            /* NOTE: The number could be really large, however we are testing NaN here */            if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }        }    }}
void
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad()
CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */            /* NOTE: The number could be really large, however we are testing NaN here */            if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }        }    }}
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }    else    {        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */            /* NOTE: The number could be really large, however we are testing NaN here */            if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FLAW: should not cast without checking if conversion is safe */            printIntLine((int)(sqrt(doubleNumber)));        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
{        {            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */            /* NOTE: The number could be really large, however we are testing NaN here */            if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE];            double doubleNumber = 0;            /*  * Enter: -2.0, result should be 0 (for bad case)             *             * Square root of a negative number is NaN. NaN when casted to int is 0.             */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }            /* FIX: ensure number is non-negative and less thatn INT_MAX squared */            /* NOTE: The number could be really large, however we are testing NaN here */            if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }        }
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
double doubleNumber = 0;
double doubleNumber = 0;
double
doubleNumber = 0
doubleNumber
= 0
0
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Read a double */                doubleNumber = atof(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Read a double */                doubleNumber = atof(inputBuffer);            }
doubleNumber = atof(inputBuffer);
doubleNumber = atof(inputBuffer)
doubleNumber
doubleNumber
atof(inputBuffer)
atof
atof
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (doubleNumber < 0)            {                printLine("Value is negative");            }            else            {                printIntLine((int)(sqrt(doubleNumber)));            }
doubleNumber < 0
doubleNumber
doubleNumber
0
{                printLine("Value is negative");            }
printLine("Value is negative");
printLine("Value is negative")
printLine
printLine
"Value is negative"
{                printIntLine((int)(sqrt(doubleNumber)));            }
printIntLine((int)(sqrt(doubleNumber)));
printIntLine((int)(sqrt(doubleNumber)))
printIntLine
printIntLine
(int)(sqrt(doubleNumber))
int
int

(sqrt(doubleNumber))
sqrt(doubleNumber)
sqrt
sqrt
doubleNumber
doubleNumber
-----joern-----
(0,20,0)
(25,53,0)
(60,34,0)
(12,47,0)
(38,36,0)
(60,59,0)
(31,47,0)
(34,60,0)
(44,15,0)
(49,30,0)
(51,31,0)
(19,17,0)
(3,36,0)
(22,23,0)
(47,36,0)
(23,22,0)
(57,55,0)
(10,55,0)
(17,1,0)
(1,17,0)
(9,29,0)
(5,55,0)
(1,47,0)
(4,30,0)
(46,45,0)
(35,36,0)
(36,50,0)
(53,23,0)
(2,17,0)
(6,47,0)
(25,48,0)
(18,30,0)
(28,33,0)
(45,55,0)
(62,34,0)
(43,23,0)
(24,45,0)
(64,31,0)
(61,60,0)
(30,49,0)
(13,28,0)
(54,58,0)
(39,55,0)
(53,45,0)
(17,2,0)
(53,25,0)
(48,25,0)
(15,37,0)
(63,9,0)
(16,9,0)
(40,53,0)
(19,11,0)
(7,0,0)
(26,22,0)
(5,25,0)
(55,42,0)
(56,1,0)
(31,60,0)
(29,9,0)
(1,60,0)
(23,27,0)
(52,9,0)
(17,19,0)
(32,29,0)
(14,36,0)
(21,49,0)
(65,30,0)
(25,5,0)
(52,16,1)
(23,22,1)
(22,26,1)
(12,6,1)
(8,5,1)
(60,34,1)
(31,60,1)
(61,49,1)
(8,19,1)
(1,56,1)
(62,61,1)
(29,9,1)
(1,47,1)
(9,52,1)
(49,21,1)
(47,12,1)
(18,47,1)
(13,49,1)
(31,64,1)
(63,45,1)
(53,45,1)
(34,62,1)
(29,32,1)
(4,18,1)
(16,63,1)
(44,29,1)
(24,41,1)
(53,23,1)
(56,31,1)
(25,48,1)
(25,53,1)
(28,13,1)
(43,29,1)
(21,30,1)
(40,15,1)
(0,7,1)
(53,40,1)
(26,43,1)
(45,46,1)
(46,24,1)
(15,44,1)
(51,28,1)
(32,9,1)
(8,0,1)
(30,65,1)
(1,60,1)
(40,23,1)
(51,60,1)
(19,17,1)
(49,30,1)
(17,1,1)
(64,51,1)
(31,47,1)
(5,25,1)
(7,31,1)
(6,41,1)
(17,2,1)
(65,4,1)
(43,29,2)
(49,30,2)
(5,25,2)
(46,41,2)
(17,2,2)
(60,34,2)
(56,31,2)
(6,41,2)
(47,41,2)
(49,41,2)
(31,60,2)
(17,31,2)
(53,41,2)
(5,41,2)
(23,29,2)
(31,41,2)
(21,41,2)
(19,17,2)
(32,41,2)
(25,41,2)
(51,41,2)
(9,41,2)
(40,41,2)
(0,31,2)
(29,41,2)
(30,41,2)
(61,49,2)
(34,49,2)
(63,41,2)
(53,45,2)
(17,1,2)
(29,9,2)
(18,41,2)
(19,31,2)
(52,41,2)
(13,49,2)
(22,29,2)
(31,47,2)
(25,53,2)
(25,48,2)
(53,23,2)
(65,41,2)
(15,29,2)
(28,49,2)
(45,41,2)
(7,31,2)
(60,49,2)
(64,41,2)
(26,29,2)
(1,47,2)
(23,22,2)
(16,41,2)
(4,41,2)
(62,49,2)
(44,29,2)
(1,31,2)
(12,41,2)
(24,41,2)
(1,60,2)
-----------------------------------
(0,printLine("Value is negative")
(1,sqrt(doubleNumber)
(2,int)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,CHAR_ARRAY_SIZE)
(5,printIntLine((int)
(6,doubleNumber)
(7,"Value is negative")
(8,RET)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,inputBuffer)
(11,)
(12,0)
(13,"fgets()
(14,doubleNumber)
(15,printLine("fgets()
(16,CHAR_ARRAY_SIZE)
(17,(int)
(18,inputBuffer)
(19,printIntLine((int)
(20,)
(21,NULL)
(22,atof(inputBuffer)
(23,doubleNumber = atof(inputBuffer)
(24,doubleNumber)
(25,(int)
(26,inputBuffer)
(27,)
(28,printLine("fgets()
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,doubleNumber < 0)
(32,NULL)
(33,)
(34,atof(inputBuffer)
(35,if (doubleNumber < 0)
(36,)
(37,)
(38,inputBuffer)
(39,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,doubleNumber)
(41,globalReturnsTrueOrFalse()
(42,)
(43,doubleNumber)
(44,"fgets()
(45,doubleNumber = 0)
(46,0)
(47,doubleNumber = 0)
(48,int)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,)
(51,doubleNumber)
(52,stdin)
(53,sqrt(doubleNumber)
(54,if(globalReturnsTrueOrFalse()
(55,)
(56,doubleNumber)
(57,doubleNumber)
(58,)
(59,)
(60,doubleNumber = atof(inputBuffer)
(61,doubleNumber)
(62,inputBuffer)
(63,inputBuffer)
(64,0)
(65,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^