-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_15_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FLAW: Use a negative number */
        data = -1;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
12,13
12,14
22,23
22,24
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_15_bad(){    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_15_bad()
CWE194_Unexpected_Sign_Extension__negative_malloc_15_bad
{    short data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a negative number */        data = -1;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = -1;
data = -1
data
data
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(20,53,0)
(33,9,0)
(39,34,0)
(26,55,0)
(24,14,0)
(28,6,0)
(24,12,0)
(16,31,0)
(1,0,0)
(19,55,0)
(8,31,0)
(16,53,0)
(42,29,0)
(20,41,0)
(41,29,0)
(4,37,0)
(15,53,0)
(43,20,0)
(10,51,0)
(22,0,0)
(31,16,0)
(30,6,0)
(22,24,0)
(24,22,0)
(41,55,0)
(53,6,0)
(17,22,0)
(14,53,0)
(37,22,0)
(1,22,0)
(20,34,0)
(34,20,0)
(31,0,0)
(48,20,0)
(32,0,0)
(7,3,0)
(5,53,0)
(37,0,0)
(45,16,0)
(49,31,0)
(34,18,0)
(27,53,0)
(2,16,0)
(44,55,0)
(25,15,0)
(9,22,0)
(13,41,0)
(40,14,0)
(50,55,0)
(14,24,0)
(12,24,0)
(46,55,0)
(38,18,0)
(18,0,0)
(52,15,0)
(54,1,0)
(10,3,0)
(15,41,0)
(23,19,0)
(34,22,0)
(14,41,0)
(31,22,0)
(29,41,0)
(11,6,0)
(21,9,0)
(47,0,0)
(3,10,0)
(16,41,0)
(13,36,1)
(34,22,1)
(7,9,1)
(2,49,1)
(21,33,1)
(48,39,1)
(15,53,1)
(27,5,1)
(33,22,1)
(1,22,1)
(49,8,1)
(31,22,1)
(18,38,1)
(43,48,1)
(9,22,1)
(45,2,1)
(52,46,1)
(37,4,1)
(24,12,1)
(20,43,1)
(25,52,1)
(37,22,1)
(39,31,1)
(20,41,1)
(40,17,1)
(22,24,1)
(35,37,1)
(52,50,1)
(15,25,1)
(53,27,1)
(8,9,1)
(46,41,1)
(4,1,1)
(42,13,1)
(38,34,1)
(29,42,1)
(24,14,1)
(31,16,1)
(23,36,1)
(19,23,1)
(14,53,1)
(3,7,1)
(16,53,1)
(1,54,1)
(34,20,1)
(16,41,1)
(14,40,1)
(14,41,1)
(8,10,1)
(15,41,1)
(50,19,1)
(36,53,1)
(54,18,1)
(17,15,1)
(20,53,1)
(10,3,1)
(41,29,1)
(16,45,1)
(9,21,1)
(35,15,1)
(16,53,2)
(22,24,2)
(13,36,2)
(31,22,2)
(34,15,2)
(46,36,2)
(33,15,2)
(37,22,2)
(45,15,2)
(7,9,2)
(50,36,2)
(22,15,2)
(24,12,2)
(14,53,2)
(16,15,2)
(15,53,2)
(39,15,2)
(41,36,2)
(8,15,2)
(16,41,2)
(31,15,2)
(29,36,2)
(38,15,2)
(23,36,2)
(2,15,2)
(34,22,2)
(49,15,2)
(3,9,2)
(9,15,2)
(14,15,2)
(9,22,2)
(10,3,2)
(43,15,2)
(31,16,2)
(1,22,2)
(14,41,2)
(10,9,2)
(37,15,2)
(20,15,2)
(20,53,2)
(24,14,2)
(34,20,2)
(41,29,2)
(15,41,2)
(40,15,2)
(17,15,2)
(1,15,2)
(20,41,2)
(54,15,2)
(24,15,2)
(21,15,2)
(4,15,2)
(18,15,2)
(42,36,2)
(19,36,2)
(48,15,2)
-----------------------------------
(0,)
(1,printLine(dataBuffer)
(2,data)
(3,-1)
(4,dataBuffer)
(5,data)
(6,)
(7,1)
(8,dataBuffer)
(9,dataBuffer == NULL)
(10,exit(-1)
(11,switch(6)
(12,char *)
(13,data)
(14,malloc(data)
(15,data < 100)
(16,data-1)
(17,dataBuffer)
(18,dataBuffer[data-1] = \\\'\\\\0\\\')
(19,printLine("Benign, fixed string")
(20,data-1)
(21,NULL)
(22,* dataBuffer = (char *)
(23,"Benign, fixed string")
(24,(char *)
(25,100)
(26,case 6:)
(27,0)
(28,data)
(29,-1)
(30,if (data < 100)
(31,memset(dataBuffer, \\\'A\\\', data-1)
(32,if (dataBuffer == NULL)
(33,dataBuffer)
(34,dataBuffer[data-1])
(35,RET)
(36,6)
(37,free(dataBuffer)
(38,\\\'\\\\0\\\')
(39,dataBuffer)
(40,data)
(41,data = -1)
(42,1)
(43,1)
(44,default:)
(45,1)
(46,break;)
(47,dataBuffer)
(48,data)
(49,\\\'A\\\')
(50,break;)
(51,)
(52,data)
(53,data = 0)
(54,dataBuffer)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^