-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        /* FLAW: Use a negative number */
        data = -1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
33,35
33,36
33,37
33,38
33,39
34,35
35,36
35,37
37,38
37,39
37,40
40,41
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,32,36,38,39,43,45,48,50,54,56,61,63,67,69,70,73,74,79,82,83,84,88,90,94,96
-----computeFrom-----
12,13
12,14
23,24
23,25
29,30
29,31
52,53
52,54
71,72
71,73
76,77
76,78
80,81
80,82
-----guardedBy-----
31,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        /* FLAW: Use a negative number */        data = -1;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Use a negative number */        data = -1;    }
data = -1;
data = -1
data
data
-1
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(4,17,0)
(54,35,0)
(26,12,0)
(27,47,0)
(47,35,0)
(25,46,0)
(14,51,0)
(20,19,0)
(39,17,0)
(6,46,0)
(52,1,0)
(1,52,0)
(23,3,0)
(3,35,0)
(20,35,0)
(23,46,0)
(3,23,0)
(22,25,0)
(8,23,0)
(45,42,0)
(39,11,0)
(32,3,0)
(1,19,0)
(12,46,0)
(15,3,0)
(1,6,0)
(28,39,0)
(46,25,0)
(19,35,0)
(51,35,0)
(31,17,0)
(29,6,0)
(44,21,0)
(13,42,0)
(11,39,0)
(17,42,0)
(38,39,0)
(44,37,0)
(6,1,0)
(9,21,0)
(19,1,0)
(23,17,0)
(5,4,0)
(43,35,0)
(11,19,0)
(17,4,0)
(48,23,0)
(34,11,0)
(16,42,0)
(46,18,0)
(12,17,0)
(47,19,0)
(0,46,0)
(30,19,0)
(41,10,0)
(21,44,0)
(6,17,0)
(11,51,0)
(39,46,0)
(40,12,0)
(2,20,0)
(10,19,0)
(50,10,0)
(3,19,0)
(33,17,1)
(51,14,1)
(0,33,1)
(15,32,1)
(34,3,1)
(23,46,1)
(29,30,1)
(39,46,1)
(39,17,1)
(1,52,1)
(12,46,1)
(32,44,1)
(22,0,1)
(30,12,1)
(50,41,1)
(10,50,1)
(25,22,1)
(20,19,1)
(32,10,1)
(38,34,1)
(6,17,1)
(3,23,1)
(6,46,1)
(23,48,1)
(28,38,1)
(47,27,1)
(39,28,1)
(46,25,1)
(20,2,1)
(44,21,1)
(11,39,1)
(11,19,1)
(26,40,1)
(47,19,1)
(40,33,1)
(3,19,1)
(19,1,1)
(21,9,1)
(23,17,1)
(5,31,1)
(8,15,1)
(6,29,1)
(4,5,1)
(7,12,1)
(48,8,1)
(12,17,1)
(2,47,1)
(41,19,1)
(1,6,1)
(40,46,1)
(7,20,1)
(14,11,1)
(10,19,1)
(27,51,1)
(17,4,1)
(9,10,1)
(12,26,1)
(3,12,2)
(2,12,2)
(12,46,2)
(29,12,2)
(12,17,2)
(46,33,2)
(46,25,2)
(6,17,2)
(3,19,2)
(14,12,2)
(39,12,2)
(19,1,2)
(32,12,2)
(34,12,2)
(10,12,2)
(11,39,2)
(30,12,2)
(27,12,2)
(9,10,2)
(1,6,2)
(51,12,2)
(38,12,2)
(10,19,2)
(11,12,2)
(15,12,2)
(3,23,2)
(8,12,2)
(19,12,2)
(23,46,2)
(23,17,2)
(6,12,2)
(28,12,2)
(20,12,2)
(41,12,2)
(47,19,2)
(1,12,2)
(11,19,2)
(39,17,2)
(48,12,2)
(50,12,2)
(44,21,2)
(47,12,2)
(44,10,2)
(39,46,2)
(0,33,2)
(23,12,2)
(21,10,2)
(6,46,2)
(22,33,2)
(25,33,2)
(17,4,2)
(1,52,2)
(20,19,2)
-----------------------------------
(0,data)
(1,(char *)
(2,dataBuffer)
(3,memset(dataBuffer, 'A', data-1)
(4,-1)
(5,1)
(6,malloc(data)
(7,RET)
(8,data)
(9,1)
(10,dataBuffer == NULL)
(11,dataBuffer[data-1])
(12,data < 100)
(13,data)
(14,\'\\\\0\')
(15,'A')
(16,if(staticReturnsTrue()
(17,data = -1)
(18,)
(19,* dataBuffer = (char *)
(20,free(dataBuffer)
(21,-1)
(22,1)
(23,data-1)
(24,memset(dataBuffer, \'A\', data-1)
(25,-1)
(26,100)
(27,dataBuffer)
(28,1)
(29,data)
(30,dataBuffer)
(31,data)
(32,dataBuffer)
(33,staticReturnsTrue()
(34,dataBuffer)
(35,)
(36,\'A\')
(37,)
(38,data)
(39,data-1)
(40,data)
(41,dataBuffer)
(42,)
(43,if (dataBuffer == NULL)
(44,exit(-1)
(45,if (data < 100)
(46,data = -1)
(47,printLine(dataBuffer)
(48,1)
(49,'\\\\0')
(50,NULL)
(51,dataBuffer[data-1] = '\\\\0')
(52,char *)
(53,dataBuffer[data-1] = \'\\\\0\')
(54,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^