-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_12_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
76,78
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
83,86
83,87
84,85
86,87
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,36,38,39,43,45,47,50,52,54,56,60,62,63,65,66,71,73,74,75,79,80,85,87,89,91,96,98,99,103,105
-----computeFrom-----
12,13
12,14
34,35
34,36
37,38
37,39
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
93,94
93,95
-----guardedBy-----
79,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_12_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_12_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_memmove_12_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(31,32,0)
(10,30,0)
(38,35,0)
(23,6,0)
(36,55,0)
(0,38,0)
(35,48,0)
(30,35,0)
(5,32,0)
(6,32,0)
(8,30,0)
(45,40,0)
(25,21,0)
(4,43,0)
(18,27,0)
(34,35,0)
(28,6,0)
(17,43,0)
(9,21,0)
(49,26,0)
(33,45,0)
(21,11,0)
(46,11,0)
(37,6,0)
(26,43,0)
(13,38,0)
(37,27,0)
(38,27,0)
(27,53,0)
(11,21,0)
(24,16,0)
(44,3,0)
(32,55,0)
(27,16,0)
(48,35,0)
(14,48,0)
(12,26,0)
(43,26,0)
(29,38,0)
(11,31,0)
(19,6,0)
(40,35,0)
(52,40,0)
(23,32,0)
(30,27,0)
(38,3,0)
(54,23,0)
(35,55,0)
(16,27,0)
(38,6,0)
(20,32,0)
(45,1,0)
(42,16,0)
(37,44,0)
(47,37,0)
(40,45,0)
(51,55,0)
(50,31,0)
(39,32,0)
(7,44,0)
(37,35,0)
(41,45,0)
(43,32,0)
(22,37,0)
(25,9,1)
(19,28,1)
(38,13,1)
(2,23,1)
(14,34,1)
(12,4,1)
(30,35,1)
(24,42,1)
(49,12,1)
(47,22,1)
(7,37,1)
(48,14,1)
(23,6,1)
(44,7,1)
(38,6,1)
(4,17,1)
(30,8,1)
(35,48,1)
(54,44,1)
(23,54,1)
(45,40,1)
(28,27,1)
(21,25,1)
(15,35,1)
(37,27,1)
(43,26,1)
(8,10,1)
(50,11,1)
(28,45,1)
(0,29,1)
(6,19,1)
(27,16,1)
(9,46,1)
(38,27,1)
(30,27,1)
(54,30,1)
(40,35,1)
(38,35,1)
(16,24,1)
(11,21,1)
(31,50,1)
(52,41,1)
(37,47,1)
(46,43,1)
(41,33,1)
(17,6,1)
(22,38,1)
(33,15,1)
(18,15,1)
(42,18,1)
(29,30,1)
(40,52,1)
(10,31,1)
(13,0,1)
(37,35,1)
(26,49,1)
(37,6,1)
(30,35,2)
(38,27,2)
(37,6,2)
(0,30,2)
(33,15,2)
(13,30,2)
(16,15,2)
(43,26,2)
(42,15,2)
(40,15,2)
(18,15,2)
(37,35,2)
(44,30,2)
(45,15,2)
(37,30,2)
(52,15,2)
(22,30,2)
(45,40,2)
(11,21,2)
(38,35,2)
(27,16,2)
(35,48,2)
(27,15,2)
(7,30,2)
(24,15,2)
(47,30,2)
(30,27,2)
(38,6,2)
(37,27,2)
(41,15,2)
(23,6,2)
(29,30,2)
(40,35,2)
(38,30,2)
-----------------------------------
(0,source)
(1,)
(2,RET)
(3,)
(4,\\\'A\\\')
(5,dest)
(6,dest[100] = "")
(7,\\\'\\\\0\\\')
(8,100)
(9,100)
(10,data)
(11,source[100-1])
(12,100)
(13,data)
(14,1)
(15,globalReturnsTrueOrFalse()
(16,100-1)
(17,source)
(18,data)
(19,"")
(20,if (data < 100)
(21,100-1)
(22,dest)
(23,printLine(dest)
(24,1)
(25,1)
(26,100-1)
(27,data = 100-1)
(28,dest)
(29,dest)
(30,data < 100)
(31,source[100-1] = \\\'\\\\0\\\')
(32,)
(33,stdin)
(34,data)
(35,data = -1)
(36,if(globalReturnsTrueOrFalse()
(37,dest[data])
(38,memmove(dest, source, data)
(39,source)
(40,&data)
(41,"%d")
(42,100)
(43,memset(source, \\\'A\\\', 100-1)
(44,dest[data] = \\\'\\\\0\\\')
(45,fscanf(stdin, "%d", &data)
(46,source)
(47,data)
(48,-1)
(49,1)
(50,\\\'\\\\0\\\')
(51,data)
(52,data)
(53,)
(54,dest)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^