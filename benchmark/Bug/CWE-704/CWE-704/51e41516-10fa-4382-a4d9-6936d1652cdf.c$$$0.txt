-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_18_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* FLAW: Use a random value that could be less than 0 */
    data = (short)RAND32();
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
88,89
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,34,36,38,41,43,45,47,51,53,54,56,57,62,64,65,66,70,71,76,78,80,82,87,89,90,94,96
-----computeFrom-----
12,13
12,14
21,22
21,23
55,56
55,57
59,60
59,61
63,64
63,65
68,69
68,70
84,85
84,86
-----guardedBy-----
70,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_memmove_18_bad(){    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__rand_memmove_18_bad()
CWE194_Unexpected_Sign_Extension__rand_memmove_18_bad
{    short data;    /* Initialize data */    data = 0;    goto source;source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* FLAW: Use a random value that could be less than 0 */    data = (short)RAND32();
source
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(47,16,0)
(3,41,0)
(5,26,0)
(17,39,0)
(32,26,0)
(41,9,0)
(16,47,0)
(11,2,0)
(46,9,0)
(38,9,0)
(26,13,0)
(8,40,0)
(15,41,0)
(28,16,0)
(39,47,0)
(2,41,0)
(21,47,0)
(18,27,0)
(16,35,0)
(23,41,0)
(30,9,0)
(22,6,0)
(29,41,0)
(43,3,0)
(40,47,0)
(4,15,0)
(20,15,0)
(16,28,0)
(36,6,0)
(44,42,0)
(0,41,0)
(35,16,0)
(7,13,0)
(25,20,0)
(43,27,0)
(47,9,0)
(33,40,0)
(24,43,0)
(31,39,0)
(13,26,0)
(37,42,0)
(40,19,0)
(6,9,0)
(12,40,0)
(42,20,0)
(2,3,0)
(20,42,0)
(13,41,0)
(10,3,0)
(34,13,0)
(43,47,0)
(14,3,0)
(1,43,0)
(40,3,0)
(27,19,0)
(16,28,1)
(16,35,1)
(43,3,1)
(24,1,1)
(18,43,1)
(37,25,1)
(17,31,1)
(15,4,1)
(3,10,1)
(26,5,1)
(39,17,1)
(7,3,1)
(11,27,1)
(22,36,1)
(46,6,1)
(40,47,1)
(27,18,1)
(8,12,1)
(40,3,1)
(2,11,1)
(1,40,1)
(12,39,1)
(5,32,1)
(28,21,1)
(4,20,1)
(31,15,1)
(2,3,1)
(34,7,1)
(42,44,1)
(44,37,1)
(40,33,1)
(14,47,1)
(43,47,1)
(33,8,1)
(47,16,1)
(25,13,1)
(20,42,1)
(21,46,1)
(6,22,1)
(32,34,1)
(39,47,1)
(11,39,1)
(43,24,1)
(10,14,1)
(45,2,1)
(13,26,1)
(8,39,2)
(43,3,2)
(12,39,2)
(40,39,2)
(33,39,2)
(13,26,2)
(20,42,2)
(47,16,2)
(40,47,2)
(39,47,2)
(43,39,2)
(2,3,2)
(16,28,2)
(16,35,2)
(24,39,2)
(1,39,2)
(27,39,2)
(43,47,2)
(40,3,2)
(18,39,2)
-----------------------------------
(0,if (data < 100)
(1,dest)
(2,printLine(dest)
(3,dest[100] = "")
(4,\\\'\\\\0\\\')
(5,1)
(6,data = 0)
(7,source)
(8,source)
(9,)
(10,"")
(11,dest)
(12,dest)
(13,memset(source, \\\'A\\\', 100-1)
(14,dest)
(15,source[100-1] = \\\'\\\\0\\\')
(16,(short)
(17,100)
(18,\\\'\\\\0\\\')
(19,)
(20,source[100-1])
(21,data)
(22,0)
(23,source)
(24,data)
(25,source)
(26,100-1)
(27,dest[data] = \\\'\\\\0\\\')
(28,RAND32()
(29,dest)
(30,data)
(31,data)
(32,100)
(33,data)
(34,\\\'A\\\')
(35,short)
(36,data)
(37,100)
(38,source:)
(39,data < 100)
(40,memmove(dest, source, data)
(41,)
(42,100-1)
(43,dest[data])
(44,1)
(45,RET)
(46,goto source;)
(47,data = (short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^