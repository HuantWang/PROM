-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    short * dataPtr = (short *)dataVoidPtr;
    /* dereference dataPtr into data */
    short data = (*dataPtr);
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            memmove(dest, source, data);
            dest[data] = '\0'; /* NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,42,45,47,49,51,55,57,58,60,61,66,68,69,70,74,75,80,82,84,86,91,93,94,98,100
-----computeFrom-----
59,60
59,61
63,64
63,65
67,68
67,69
72,73
72,74
88,89
88,90
-----guardedBy-----
74,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_memmove_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_memmove_64b_badSink(void * dataVoidPtr)
CWE194_Unexpected_Sign_Extension__negative_memmove_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }}
short * dataPtr = (short *)dataVoidPtr;
short * dataPtr = (short *)dataVoidPtr;
short
* dataPtr = (short *)dataVoidPtr
*
dataPtr
= (short *)dataVoidPtr
(short *)dataVoidPtr
short *
short
*
*
dataVoidPtr
dataVoidPtr
short data = (*dataPtr);
short data = (*dataPtr);
short
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            memmove(dest, source, data);            dest[data] = '\0'; /* NULL terminate */        }
memmove(dest, source, data);
memmove(dest, source, data)
memmove
memmove
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(34,5,0)
(4,30,0)
(47,43,0)
(3,43,0)
(42,9,0)
(41,12,0)
(43,38,0)
(16,30,0)
(1,38,0)
(39,30,0)
(9,25,0)
(9,12,0)
(35,0,0)
(2,4,0)
(31,38,0)
(32,38,0)
(45,14,0)
(17,27,0)
(18,5,0)
(14,34,0)
(26,6,0)
(24,4,0)
(8,25,0)
(29,6,0)
(30,38,0)
(12,38,0)
(19,12,0)
(40,3,0)
(27,29,0)
(10,0,0)
(25,13,0)
(34,6,0)
(20,6,0)
(14,12,0)
(11,19,0)
(15,9,0)
(5,34,0)
(36,12,0)
(19,38,0)
(21,7,0)
(28,27,0)
(38,6,0)
(27,17,0)
(9,34,0)
(22,29,0)
(48,14,0)
(23,7,0)
(0,34,0)
(14,13,0)
(29,27,0)
(30,4,0)
(7,3,0)
(27,37,0)
(3,7,0)
(44,14,0)
(33,34,0)
(5,29,0)
(46,19,1)
(21,40,1)
(14,48,1)
(7,23,1)
(44,0,1)
(9,12,1)
(5,29,1)
(28,22,1)
(4,24,1)
(14,12,1)
(19,11,1)
(48,45,1)
(14,34,1)
(11,25,1)
(47,3,1)
(36,41,1)
(27,28,1)
(29,27,1)
(0,35,1)
(11,0,1)
(42,14,1)
(27,37,1)
(18,33,1)
(30,4,1)
(43,47,1)
(24,2,1)
(19,12,1)
(33,29,1)
(5,18,1)
(39,16,1)
(0,34,1)
(9,15,1)
(25,8,1)
(45,44,1)
(9,34,1)
(23,21,1)
(10,43,1)
(12,36,1)
(41,34,1)
(16,12,1)
(27,17,1)
(3,7,1)
(40,30,1)
(15,42,1)
(8,9,1)
(2,39,1)
(34,5,1)
(35,10,1)
(5,29,2)
(29,27,2)
(34,5,2)
(0,34,2)
(3,7,2)
(25,0,2)
(14,12,2)
(48,0,2)
(8,0,2)
(30,4,2)
(19,12,2)
(44,0,2)
(27,17,2)
(9,12,2)
(14,0,2)
(14,34,2)
(42,0,2)
(15,0,2)
(9,34,2)
(9,0,2)
(45,0,2)
(27,37,2)
-----------------------------------
(0,data < 100)
(1,if (data < 100)
(2,100)
(3,source[100-1])
(4,100-1)
(5,*dataPtr)
(6,)
(7,100-1)
(8,\\\'\\\\0\\\')
(9,dest[data])
(10,data)
(11,dest)
(12,dest[100] = "")
(13,)
(14,memmove(dest, source, data)
(15,data)
(16,source)
(17,short *)
(18,dataPtr)
(19,printLine(dest)
(20,dataPtr)
(21,100)
(22,dataPtr)
(23,1)
(24,1)
(25,dest[data] = \\\'\\\\0\\\')
(26,data)
(27,(short *)
(28,dataVoidPtr)
(29,* dataPtr = (short *)
(30,memset(source, \\\'A\\\', 100-1)
(31,source)
(32,dest)
(33,data)
(34,data = (*dataPtr)
(35,100)
(36,"")
(37,void * dataVoidPtr)
(38,)
(39,\\\'A\\\')
(40,source)
(41,dest)
(42,dest)
(43,source[100-1] = \\\'\\\\0\\\')
(44,dest)
(45,source)
(46,RET)
(47,\\\'\\\\0\\\')
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^