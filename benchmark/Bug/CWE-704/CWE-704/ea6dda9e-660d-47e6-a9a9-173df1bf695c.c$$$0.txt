-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68b_badSink()
{
    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
57,58
57,59
58,59
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,13,17,18,22,24,25,29,31,34,36,40,42,47,49,53,55,56,59,60,65,68,69,70,74,76,80,82
-----computeFrom-----
15,16
15,17
38,39
38,40
57,58
57,59
62,63
62,64
66,67
66,68
-----guardedBy-----
17,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68b_badSink(){    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68b_badSink()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68b_badSink
{    int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData;
int data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData;
int
data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData
data
= CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(45,29,0)
(3,30,0)
(18,10,0)
(20,37,0)
(25,33,0)
(9,5,0)
(36,20,0)
(17,13,0)
(24,10,0)
(1,13,0)
(13,10,0)
(38,33,0)
(44,26,0)
(39,10,0)
(41,19,0)
(21,43,0)
(24,12,0)
(40,15,0)
(5,9,0)
(11,24,0)
(2,6,0)
(4,12,0)
(6,9,0)
(10,19,0)
(33,37,0)
(24,15,0)
(43,10,0)
(22,18,0)
(37,26,0)
(13,33,0)
(43,19,0)
(13,19,0)
(6,37,0)
(46,26,0)
(33,13,0)
(23,29,0)
(18,19,0)
(8,20,0)
(0,37,0)
(12,19,0)
(9,10,0)
(15,37,0)
(9,6,0)
(16,15,0)
(30,10,0)
(31,19,0)
(29,45,0)
(7,30,0)
(10,9,0)
(15,24,0)
(45,42,0)
(28,37,0)
(3,10,1)
(9,6,1)
(15,16,1)
(8,36,1)
(4,24,1)
(12,4,1)
(43,21,1)
(20,8,1)
(30,10,1)
(30,7,1)
(13,33,1)
(33,38,1)
(1,30,1)
(20,37,1)
(39,20,1)
(2,39,1)
(40,11,1)
(43,10,1)
(6,37,1)
(10,9,1)
(23,30,1)
(28,0,1)
(29,23,1)
(1,45,1)
(18,22,1)
(37,28,1)
(35,20,1)
(15,37,1)
(24,10,1)
(35,18,1)
(11,13,1)
(33,37,1)
(22,43,1)
(24,15,1)
(25,17,1)
(18,10,1)
(7,3,1)
(16,40,1)
(6,2,1)
(17,1,1)
(13,10,1)
(21,12,1)
(38,25,1)
(45,29,1)
(36,37,1)
(9,5,1)
(1,20,2)
(7,20,2)
(11,20,2)
(24,15,2)
(33,20,2)
(45,29,2)
(15,20,2)
(9,6,2)
(10,9,2)
(13,33,2)
(24,20,2)
(20,37,2)
(6,37,2)
(13,20,2)
(22,20,2)
(2,20,2)
(18,20,2)
(23,30,2)
(17,20,2)
(9,5,2)
(30,10,2)
(30,20,2)
(12,20,2)
(9,20,2)
(40,20,2)
(29,30,2)
(43,10,2)
(39,20,2)
(33,37,2)
(10,20,2)
(21,20,2)
(13,10,2)
(18,10,2)
(38,20,2)
(25,20,2)
(16,20,2)
(43,20,2)
(4,20,2)
(24,10,2)
(3,20,2)
(6,20,2)
(45,30,2)
(15,37,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,data)
(3,dataBuffer)
(4,\'\\\\0\')
(5,char *)
(6,malloc(data)
(7,NULL)
(8,100)
(9,(char *)
(10,* dataBuffer = (char *)
(11,dataBuffer)
(12,dataBuffer[data-1] = '\\\\0')
(13,memset(dataBuffer, \'A\', data-1)
(14,dataBuffer[data-1] = \'\\\\0\')
(15,data-1)
(16,1)
(17,\'A\')
(18,free(dataBuffer)
(19,)
(20,data < 100)
(21,dataBuffer)
(22,dataBuffer)
(23,1)
(24,dataBuffer[data-1])
(25,data)
(26,)
(27,'\\\\0')
(28,CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData)
(29,-1)
(30,dataBuffer == NULL)
(31,if (dataBuffer == NULL)
(32,'A')
(33,data-1)
(34,memset(dataBuffer, 'A', data-1)
(35,RET)
(36,data)
(37,data = CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_68_badData)
(38,1)
(39,dataBuffer)
(40,data)
(41,dataBuffer)
(42,)
(43,printLine(dataBuffer)
(44,if (data < 100)
(45,exit(-1)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^