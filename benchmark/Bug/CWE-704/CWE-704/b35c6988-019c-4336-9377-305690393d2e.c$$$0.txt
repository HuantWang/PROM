-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_14_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
35,41
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,38,40,41,45,47,50,52,56,58,63,65,69,71,72,75,76,81,84,85,86,90,92,96,98
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
54,55
54,56
73,74
73,75
78,79
78,80
82,83
82,84
-----guardedBy-----
33,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_14_bad(){    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_14_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_14_bad
{    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(55,10,0)
(10,3,0)
(36,2,0)
(10,19,0)
(17,49,0)
(8,26,0)
(21,2,0)
(46,30,0)
(3,11,0)
(28,1,0)
(27,44,0)
(19,10,0)
(27,1,0)
(15,30,0)
(43,30,0)
(7,49,0)
(19,2,0)
(13,11,0)
(16,49,0)
(32,3,0)
(53,15,0)
(5,34,0)
(35,19,0)
(1,26,0)
(22,3,0)
(11,3,0)
(44,3,0)
(45,2,0)
(44,30,0)
(25,15,0)
(5,9,0)
(3,49,0)
(14,10,0)
(45,26,0)
(0,45,0)
(32,30,0)
(38,44,0)
(41,34,0)
(8,2,0)
(30,31,0)
(54,2,0)
(32,54,0)
(27,2,0)
(6,44,0)
(4,21,0)
(15,3,0)
(19,26,0)
(2,26,0)
(39,26,0)
(54,32,0)
(50,8,0)
(24,26,0)
(51,54,0)
(2,54,0)
(54,51,0)
(30,43,0)
(52,19,0)
(23,32,0)
(10,30,0)
(12,37,0)
(18,27,0)
(29,21,0)
(34,5,0)
(44,27,0)
(48,37,0)
(36,15,1)
(1,28,1)
(23,36,1)
(27,2,1)
(32,30,1)
(34,41,1)
(19,10,1)
(37,48,1)
(50,1,1)
(18,19,1)
(44,38,1)
(10,14,1)
(20,15,1)
(29,4,1)
(5,34,1)
(13,22,1)
(46,37,1)
(53,37,1)
(54,32,1)
(14,55,1)
(53,30,1)
(6,18,1)
(32,3,1)
(30,43,1)
(28,27,1)
(38,6,1)
(12,3,1)
(48,12,1)
(15,30,1)
(54,51,1)
(44,3,1)
(44,30,1)
(55,35,1)
(41,21,1)
(0,8,1)
(10,30,1)
(8,2,1)
(15,3,1)
(45,2,1)
(52,21,1)
(8,50,1)
(15,25,1)
(4,2,1)
(21,2,1)
(11,13,1)
(52,5,1)
(21,29,1)
(45,0,1)
(27,44,1)
(3,11,1)
(32,23,1)
(20,45,1)
(19,2,1)
(35,52,1)
(2,54,1)
(10,3,1)
(43,46,1)
(25,53,1)
(15,30,2)
(38,15,2)
(19,15,2)
(43,37,2)
(19,2,2)
(14,15,2)
(44,15,2)
(41,21,2)
(55,15,2)
(50,15,2)
(19,10,2)
(52,15,2)
(30,43,2)
(8,15,2)
(30,37,2)
(4,15,2)
(32,30,2)
(0,15,2)
(32,3,2)
(6,15,2)
(29,15,2)
(54,32,2)
(45,2,2)
(1,15,2)
(21,2,2)
(2,15,2)
(46,37,2)
(21,15,2)
(54,51,2)
(15,3,2)
(44,30,2)
(32,15,2)
(18,15,2)
(54,15,2)
(10,15,2)
(5,34,2)
(44,3,2)
(35,15,2)
(5,21,2)
(36,15,2)
(8,2,2)
(45,15,2)
(27,44,2)
(28,15,2)
(10,30,2)
(23,15,2)
(10,3,2)
(27,15,2)
(2,54,2)
(34,21,2)
(27,2,2)
(3,11,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,* dataBuffer = (char *)
(3,data = -1)
(4,dataBuffer)
(5,exit(-1)
(6,data)
(7,if(globalFive==5)
(8,printLine(dataBuffer)
(9,)
(10,data-1)
(11,-1)
(12,globalFive)
(13,1)
(14,1)
(15,data < 100)
(16,if (data < 100)
(17,data)
(18,dataBuffer)
(19,memset(dataBuffer, \'A\', data-1)
(20,RET)
(21,dataBuffer == NULL)
(22,data)
(23,data)
(24,dataBuffer)
(25,100)
(26,)
(27,dataBuffer[data-1])
(28,\'\\\\0\')
(29,NULL)
(30,data = RAND32()
(31,)
(32,malloc(data)
(33,dataBuffer[data-1] = '\\\\0')
(34,-1)
(35,\'A\')
(36,dataBuffer)
(37,globalFive==5)
(38,1)
(39,if (dataBuffer == NULL)
(40,memset(dataBuffer, 'A', data-1)
(41,1)
(42,'\\\\0')
(43,RAND32()
(44,data-1)
(45,free(dataBuffer)
(46,data)
(47,'A')
(48,5)
(49,)
(50,dataBuffer)
(51,char *)
(52,dataBuffer)
(53,data)
(54,(char *)
(55,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^