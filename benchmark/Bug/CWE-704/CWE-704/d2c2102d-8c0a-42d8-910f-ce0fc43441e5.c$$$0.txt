-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_41_badSink(int data)
{
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
54,55
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,6,8,13,14,18,20,21,25,27,30,32,36,38,43,45,49,51,52,55,56,61,64,65,66,70,72,76,78
-----computeFrom-----
11,12
11,13
34,35
34,36
53,54
53,55
58,59
58,60
62,63
62,64
-----guardedBy-----
13,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_41_badSink(int data){    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_41_badSink(int data)
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_41_badSink
int data
int
data
data
{    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(36,14,0)
(22,4,0)
(43,40,0)
(28,14,0)
(13,27,0)
(3,8,0)
(41,14,0)
(18,27,0)
(14,41,0)
(40,38,0)
(21,22,0)
(34,24,0)
(4,38,0)
(22,13,0)
(42,38,0)
(0,18,0)
(9,27,0)
(5,29,0)
(1,27,0)
(10,9,0)
(22,14,0)
(8,12,0)
(19,4,0)
(41,40,0)
(7,42,0)
(40,41,0)
(23,4,0)
(31,33,0)
(18,29,0)
(12,6,0)
(12,8,0)
(41,35,0)
(2,27,0)
(4,22,0)
(30,36,0)
(39,42,0)
(29,18,0)
(18,14,0)
(29,38,0)
(36,27,0)
(9,14,0)
(35,41,0)
(15,29,0)
(11,13,0)
(16,18,0)
(24,14,0)
(14,27,0)
(37,24,0)
(24,34,1)
(14,41,1)
(34,37,1)
(28,42,1)
(9,10,1)
(18,14,1)
(30,9,1)
(20,42,1)
(0,24,1)
(19,23,1)
(29,15,1)
(29,38,1)
(42,39,1)
(12,8,1)
(4,19,1)
(24,14,1)
(21,18,1)
(0,12,1)
(4,38,1)
(43,28,1)
(36,14,1)
(42,38,1)
(15,5,1)
(37,14,1)
(20,36,1)
(13,11,1)
(3,24,1)
(40,38,1)
(40,43,1)
(22,4,1)
(11,22,1)
(39,7,1)
(23,21,1)
(10,13,1)
(41,40,1)
(5,16,1)
(9,14,1)
(36,30,1)
(8,3,1)
(22,14,1)
(16,0,1)
(41,35,1)
(18,29,1)
(18,42,2)
(12,24,2)
(14,42,2)
(12,8,2)
(11,42,2)
(37,42,2)
(24,42,2)
(29,42,2)
(3,24,2)
(4,42,2)
(14,41,2)
(23,42,2)
(29,38,2)
(24,14,2)
(42,38,2)
(16,42,2)
(9,14,2)
(36,14,2)
(41,40,2)
(41,35,2)
(21,42,2)
(18,29,2)
(5,42,2)
(18,14,2)
(30,42,2)
(43,42,2)
(40,42,2)
(15,42,2)
(34,42,2)
(28,42,2)
(9,42,2)
(22,4,2)
(13,42,2)
(41,42,2)
(4,38,2)
(40,38,2)
(19,42,2)
(36,42,2)
(0,42,2)
(10,42,2)
(8,24,2)
(22,14,2)
(22,42,2)
-----------------------------------
(0,dataBuffer)
(1,if (dataBuffer == NULL)
(2,dataBuffer)
(3,1)
(4,data-1)
(5,data)
(6,)
(7,data)
(8,-1)
(9,printLine(dataBuffer)
(10,dataBuffer)
(11,'\\\\0')
(12,exit(-1)
(13,dataBuffer[data-1] = \'\\\\0\')
(14,* dataBuffer = (char *)
(15,1)
(16,\'A\')
(17,'A')
(18,memset(dataBuffer, \'A\', data-1)
(19,1)
(20,RET)
(21,dataBuffer)
(22,dataBuffer[data-1])
(23,data)
(24,dataBuffer == NULL)
(25,\'\\\\0\')
(26,memset(dataBuffer, 'A', data-1)
(27,)
(28,dataBuffer)
(29,data-1)
(30,dataBuffer)
(31,if (data < 100)
(32,dataBuffer[data-1] = '\\\\0')
(33,)
(34,NULL)
(35,char *)
(36,free(dataBuffer)
(37,dataBuffer)
(38,int data)
(39,100)
(40,malloc(data)
(41,(char *)
(42,data < 100)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^