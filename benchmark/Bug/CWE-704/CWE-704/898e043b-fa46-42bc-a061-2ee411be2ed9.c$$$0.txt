-----label-----
1
-----code-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_17_bad()
{
    int i;
    void * data;
    twoIntsStruct dataGoodBuffer;
    int dataBadBuffer = 100;
    dataGoodBuffer.intOne = 0;
    dataGoodBuffer.intTwo = 0;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Set data to point to an int */
        data = &dataBadBuffer;
    }
    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */
    printStructLine((twoIntsStruct *)data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
37,38
38,39
38,40
39,40
39,41
40,41
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
59,60
59,61
60,61
62,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
-----nextToken-----
2,4,8,10,13,15,16,20,22,25,27,29,34,35,36,41,42,43,48,49,52,53,56,61,64,68,72,74,76
-----computeFrom-----
31,32
31,33
38,39
38,40
46,47
46,48
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_17_bad(){    int i;    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
void
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_17_bad()
CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_17_bad
{    int i;    void * data;    twoIntsStruct dataGoodBuffer;    int dataBadBuffer = 100;    dataGoodBuffer.intOne = 0;    dataGoodBuffer.intTwo = 0;    for(i = 0; i < 1; i++)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }    /* POTENTIAL FLAW: Attempt to print a struct when data may be a non-struct data type */    printStructLine((twoIntsStruct *)data);}
int i;
int i;
int
i
i
void * data;
void * data;
void
* data
*
data
twoIntsStruct dataGoodBuffer;
twoIntsStruct dataGoodBuffer;
twoIntsStruct
twoIntsStruct
dataGoodBuffer
dataGoodBuffer
int dataBadBuffer = 100;
int dataBadBuffer = 100;
int
dataBadBuffer = 100
dataBadBuffer
= 100
100
dataGoodBuffer.intOne = 0;
dataGoodBuffer.intOne = 0
dataGoodBuffer.intOne
dataGoodBuffer
dataGoodBuffer
intOne
0
dataGoodBuffer.intTwo = 0;
dataGoodBuffer.intTwo = 0
dataGoodBuffer.intTwo
dataGoodBuffer
dataGoodBuffer
intTwo
0
for(i = 0; i < 1; i++)    {        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Set data to point to an int */        data = &dataBadBuffer;    }
data = &dataBadBuffer;
data = &dataBadBuffer
data
data
&dataBadBuffer
dataBadBuffer
dataBadBuffer
printStructLine((twoIntsStruct *)data);
printStructLine((twoIntsStruct *)data)
printStructLine
printStructLine
(twoIntsStruct *)data
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
data
data
-----joern-----
(19,24,0)
(16,28,0)
(6,28,0)
(29,30,0)
(15,17,0)
(8,2,0)
(5,28,0)
(14,21,0)
(13,28,0)
(1,21,0)
(26,3,0)
(33,28,0)
(9,0,0)
(35,27,0)
(24,17,0)
(2,28,0)
(22,32,0)
(21,22,0)
(27,28,0)
(10,28,0)
(20,30,0)
(7,17,0)
(4,0,0)
(10,21,0)
(12,17,0)
(30,18,0)
(3,22,0)
(11,7,0)
(21,14,0)
(0,27,0)
(21,10,0)
(3,2,0)
(31,22,0)
(34,2,0)
(36,7,0)
(22,3,0)
(18,28,0)
(25,18,0)
(26,31,1)
(3,2,1)
(7,11,1)
(3,26,1)
(21,22,1)
(1,7,1)
(27,35,1)
(24,19,1)
(11,36,1)
(2,34,1)
(0,4,1)
(4,9,1)
(29,2,1)
(9,18,1)
(17,15,1)
(30,20,1)
(36,24,1)
(10,21,1)
(31,7,1)
(36,17,1)
(34,8,1)
(15,12,1)
(24,17,1)
(21,1,1)
(23,10,1)
(7,17,1)
(18,25,1)
(35,0,1)
(22,3,1)
(19,22,1)
(12,27,1)
(25,30,1)
(21,14,1)
(20,29,1)
(36,7,2)
(7,7,2)
(22,3,2)
(24,7,2)
(11,7,2)
(3,7,2)
(19,7,2)
(31,7,2)
(21,14,2)
(3,2,2)
(10,21,2)
(22,7,2)
(26,7,2)
(21,22,2)
(7,17,2)
(24,17,2)
-----------------------------------
(0,dataGoodBuffer.intTwo)
(1,data)
(2,dataBadBuffer = 100)
(3,&dataBadBuffer)
(4,intTwo)
(5,dataBadBuffer)
(6,i)
(7,i < 1)
(8,dataBadBuffer)
(9,dataGoodBuffer)
(10,printStructLine((twoIntsStruct *)
(11,1)
(12,i)
(13,data)
(14,twoIntsStruct *)
(15,0)
(16,dataGoodBuffer)
(17,i = 0)
(18,dataGoodBuffer.intOne = 0)
(19,i)
(20,intOne)
(21,(twoIntsStruct *)
(22,data = &dataBadBuffer)
(23,RET)
(24,i++)
(25,0)
(26,dataBadBuffer)
(27,dataGoodBuffer.intTwo = 0)
(28,)
(29,dataGoodBuffer)
(30,dataGoodBuffer.intOne)
(31,data)
(32,)
(33,for(i = 0; i < 1; i++)
(34,100)
(35,0)
(36,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^