-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_66b_badSink(int dataArray[])
CWE195_Signed_to_Unsigned_Conversion_Error__listen_socket_malloc_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(3,20,0)
(18,21,0)
(7,20,0)
(17,27,0)
(41,13,0)
(33,23,0)
(38,13,0)
(49,23,0)
(22,35,0)
(29,21,0)
(32,11,0)
(30,35,0)
(28,38,0)
(36,33,0)
(32,45,0)
(44,20,0)
(34,9,0)
(27,20,0)
(48,43,0)
(21,13,0)
(21,40,0)
(0,17,0)
(16,20,0)
(11,13,0)
(25,23,0)
(3,38,0)
(23,33,0)
(23,13,0)
(37,10,0)
(17,20,0)
(8,9,0)
(9,13,0)
(1,20,0)
(38,3,0)
(45,32,0)
(16,27,0)
(32,27,0)
(11,32,0)
(2,48,0)
(15,1,0)
(10,27,0)
(6,16,0)
(46,3,0)
(43,39,0)
(31,38,0)
(12,27,0)
(33,27,0)
(3,27,0)
(33,1,0)
(47,11,0)
(27,32,0)
(4,10,0)
(43,48,0)
(13,35,0)
(13,21,0)
(19,3,0)
(8,34,1)
(32,45,1)
(23,13,1)
(13,21,1)
(49,36,1)
(21,29,1)
(23,25,1)
(4,37,1)
(9,13,1)
(29,18,1)
(10,4,1)
(15,33,1)
(12,9,1)
(47,12,1)
(19,46,1)
(9,8,1)
(3,38,1)
(0,1,1)
(33,23,1)
(17,27,1)
(10,27,1)
(2,10,1)
(11,13,1)
(38,28,1)
(16,27,1)
(36,3,1)
(18,41,1)
(16,6,1)
(46,10,1)
(24,9,1)
(21,40,1)
(28,31,1)
(1,15,1)
(17,0,1)
(3,27,1)
(27,32,1)
(48,2,1)
(37,27,1)
(46,43,1)
(32,11,1)
(11,47,1)
(33,27,1)
(34,13,1)
(6,17,1)
(25,49,1)
(43,48,1)
(24,16,1)
(38,13,1)
(31,19,1)
(15,9,2)
(33,27,2)
(3,9,2)
(37,9,2)
(10,27,2)
(32,11,2)
(4,9,2)
(23,9,2)
(21,40,2)
(23,13,2)
(31,9,2)
(38,13,2)
(16,27,2)
(27,9,2)
(43,48,2)
(27,32,2)
(17,27,2)
(10,9,2)
(28,9,2)
(49,9,2)
(2,10,2)
(3,27,2)
(1,9,2)
(38,9,2)
(33,9,2)
(11,9,2)
(25,9,2)
(46,9,2)
(11,13,2)
(16,9,2)
(17,9,2)
(0,9,2)
(32,9,2)
(48,10,2)
(33,23,2)
(47,9,2)
(6,9,2)
(32,45,2)
(12,9,2)
(36,9,2)
(19,9,2)
(9,13,2)
(43,10,2)
(3,38,2)
(13,21,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer[data-1] = \'\\\\0\')
(2,1)
(3,memset(dataBuffer, \'A\', data-1)
(4,NULL)
(5,dataBuffer[data-1] = '\\\\0')
(6,dataBuffer)
(7,if (dataBuffer == NULL)
(8,100)
(9,data < 100)
(10,dataBuffer == NULL)
(11,malloc(data)
(12,dataBuffer)
(13,data = dataArray[2])
(14,memset(dataBuffer, 'A', data-1)
(15,\'\\\\0\')
(16,free(dataBuffer)
(17,printLine(dataBuffer)
(18,dataArray)
(19,'A')
(20,)
(21,dataArray[2])
(22,data)
(23,data-1)
(24,RET)
(25,1)
(26,'\\\\0')
(27,* dataBuffer = (char *)
(28,1)
(29,2)
(30,if (data < 100)
(31,data)
(32,(char *)
(33,dataBuffer[data-1])
(34,data)
(35,)
(36,dataBuffer)
(37,dataBuffer)
(38,data-1)
(39,)
(40,int dataArray[])
(41,data)
(42,\'A\')
(43,exit(-1)
(44,dataBuffer)
(45,char *)
(46,dataBuffer)
(47,data)
(48,-1)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^