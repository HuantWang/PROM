-----label-----
1
-----code-----
static short badSource(short data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        int tempInt;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* FLAW: Use a value input from the network */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate string */
            inputBuffer[recvResult] = '\0';
            /* Convert to short - ensure int to short conversion will be successful and if
             * not ensure that data will be negative */
            tempInt = atoi(inputBuffer);
            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
            {
                data = -1;
            }
            else
            {
                data = tempInt;
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
46,47
47,48
47,49
48,49
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
72,73
75,76
76,77
77,78
79,80
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
109,110
111,112
111,113
112,113
112,114
113,114
113,115
113,116
113,117
114,115
116,117
118,119
118,120
119,120
119,121
120,121
122,123
124,125
125,126
127,128
128,129
129,130
131,132
133,134
135,136
136,137
136,138
137,138
139,140
139,141
139,142
139,143
139,144
140,141
142,143
144,145
146,147
146,148
147,148
151,152
151,153
152,153
152,154
153,154
153,155
154,155
156,157
158,159
158,160
159,160
162,163
164,165
165,166
165,167
166,167
166,168
167,168
169,170
172,173
173,174
173,175
174,175
176,177
176,178
177,178
179,180
181,182
181,183
181,184
182,183
182,184
183,184
183,185
184,185
186,187
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
200,201
201,202
202,203
202,204
203,204
205,206
208,209
208,210
209,210
209,211
210,211
212,213
214,215
215,216
216,217
216,218
217,218
219,220
221,222
222,223
-----nextToken-----
2,4,6,8,13,15,18,20,24,26,30,32,35,38,40,43,49,52,54,56,58,62,64,66,70,73,74,78,83,84,86,92,93,94,97,99,104,105,108,110,115,117,121,123,126,130,132,134,138,141,143,145,148,149,150,155,157,160,161,163,168,170,171,175,178,180,185,187,190,192,197,199,204,206,207,211,213,218,220,223
-----computeFrom-----
47,48
47,49
60,61
60,62
80,81
80,82
88,89
88,90
101,102
101,103
112,113
112,114
136,137
136,138
146,147
146,148
152,153
152,154
153,154
153,155
158,159
158,160
165,166
165,167
173,174
173,175
182,183
182,184
183,184
183,185
188,189
188,190
195,196
195,197
202,203
202,204
209,210
209,211
-----guardedBy-----
211,220
-----guardedByNegation-----
190,206
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static short badSource(short data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
static short
badSource(short data)
badSource
short data
short
data
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        int tempInt;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
int tempInt;
int tempInt;
int
tempInt
tempInt
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* FLAW: Use a value input from the network */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate string */            inputBuffer[recvResult] = '\0';            /* Convert to short - ensure int to short conversion will be successful and if             * not ensure that data will be negative */            tempInt = atoi(inputBuffer);            if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
tempInt = atoi(inputBuffer);
tempInt = atoi(inputBuffer)
tempInt
tempInt
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)            {                data = -1;            }            else            {                data = tempInt;            }
tempInt > SHRT_MAX || tempInt < SHRT_MIN
tempInt > SHRT_MAX
tempInt
tempInt
SHRT_MAX
SHRT_MAX
tempInt < SHRT_MIN
tempInt
tempInt
SHRT_MIN
SHRT_MIN
{                data = -1;            }
data = -1;
data = -1
data
data
-1
1
{                data = tempInt;            }
data = tempInt;
data = tempInt
data
data
tempInt
tempInt
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(36,55,0)
(15,123,0)
(88,137,0)
(57,26,0)
(117,132,0)
(73,43,0)
(95,48,0)
(124,50,0)
(59,4,0)
(126,4,0)
(26,50,0)
(136,55,0)
(84,140,0)
(91,20,0)
(68,30,0)
(12,116,0)
(29,134,0)
(56,51,0)
(135,77,0)
(2,50,0)
(63,25,0)
(93,140,0)
(32,111,0)
(34,81,0)
(108,41,0)
(41,50,0)
(81,88,0)
(7,56,0)
(108,39,0)
(115,9,0)
(29,16,0)
(87,26,0)
(143,140,0)
(54,76,0)
(54,41,0)
(121,26,0)
(57,77,0)
(122,18,0)
(117,50,0)
(17,88,0)
(70,25,0)
(56,137,0)
(67,134,0)
(69,54,0)
(57,73,0)
(26,25,0)
(55,30,0)
(20,91,0)
(74,25,0)
(141,73,0)
(94,86,0)
(131,57,0)
(47,105,0)
(58,132,0)
(129,143,0)
(100,140,0)
(60,48,0)
(111,30,0)
(14,140,0)
(133,140,0)
(35,88,0)
(142,50,0)
(109,117,0)
(78,56,0)
(75,26,0)
(42,0,0)
(45,140,0)
(116,127,0)
(31,98,0)
(77,57,0)
(113,105,0)
(5,24,0)
(72,54,0)
(65,21,0)
(8,87,0)
(83,24,0)
(68,36,0)
(76,50,0)
(57,110,0)
(134,29,0)
(127,50,0)
(27,143,0)
(25,26,0)
(30,50,0)
(139,108,0)
(6,134,0)
(56,30,0)
(35,82,0)
(99,75,0)
(22,87,0)
(119,140,0)
(87,53,0)
(80,50,0)
(102,80,0)
(44,117,0)
(73,141,0)
(29,0,0)
(28,44,0)
(43,73,0)
(1,87,0)
(0,29,0)
(3,140,0)
(138,11,0)
(35,137,0)
(71,118,0)
(24,127,0)
(10,68,0)
(36,68,0)
(92,9,0)
(41,87,0)
(128,35,0)
(73,57,0)
(20,50,0)
(19,35,0)
(112,75,0)
(52,30,0)
(105,140,0)
(38,21,0)
(103,16,0)
(66,83,0)
(24,83,0)
(53,87,0)
(90,53,0)
(127,116,0)
(55,36,0)
(79,83,0)
(30,111,0)
(39,108,0)
(13,113,0)
(35,56,0)
(104,50,0)
(114,108,0)
(39,48,0)
(9,105,0)
(87,41,0)
(64,41,0)
(113,46,0)
(130,110,0)
(132,117,0)
(117,44,0)
(107,11,0)
(4,20,0)
(48,39,0)
(110,57,0)
(9,26,0)
(33,76,0)
(140,82,0)
(88,81,0)
(62,140,0)
(21,50,0)
(48,41,0)
(120,105,0)
(11,80,0)
(85,53,0)
(106,140,0)
(16,29,0)
(37,91,0)
(113,26,0)
(101,55,0)
(125,50,0)
(23,141,0)
(88,49,0)
(61,68,0)
(54,41,1)
(69,72,1)
(108,139,1)
(57,77,1)
(48,41,1)
(139,114,1)
(113,13,1)
(94,97,1)
(97,113,1)
(20,91,1)
(63,74,1)
(130,57,1)
(7,78,1)
(40,56,1)
(65,16,1)
(35,88,1)
(40,88,1)
(85,90,1)
(114,48,1)
(55,136,1)
(39,108,1)
(73,43,1)
(99,26,1)
(77,135,1)
(19,94,1)
(111,32,1)
(30,111,1)
(88,81,1)
(101,68,1)
(83,79,1)
(67,40,1)
(24,5,1)
(116,12,1)
(29,0,1)
(16,29,1)
(37,4,1)
(75,112,1)
(44,28,1)
(54,69,1)
(61,10,1)
(8,64,1)
(72,39,1)
(35,137,1)
(74,70,1)
(53,85,1)
(113,105,1)
(1,8,1)
(21,38,1)
(52,76,1)
(127,116,1)
(5,83,1)
(27,129,1)
(60,41,1)
(79,66,1)
(24,83,1)
(108,41,1)
(107,117,1)
(97,9,1)
(48,95,1)
(31,39,1)
(13,9,1)
(66,80,1)
(57,73,1)
(36,55,1)
(122,16,1)
(131,20,1)
(78,36,1)
(59,127,1)
(42,134,1)
(35,19,1)
(105,47,1)
(134,6,1)
(4,126,1)
(55,30,1)
(143,27,1)
(121,21,1)
(95,60,1)
(126,59,1)
(88,137,1)
(25,63,1)
(75,26,1)
(23,131,1)
(70,121,1)
(73,141,1)
(115,31,1)
(76,33,1)
(17,36,1)
(9,26,1)
(115,71,1)
(120,143,1)
(6,67,1)
(68,30,1)
(56,30,1)
(132,58,1)
(103,29,1)
(67,105,1)
(29,134,1)
(16,103,1)
(109,132,1)
(64,110,1)
(22,53,1)
(19,97,1)
(110,130,1)
(87,53,1)
(112,99,1)
(58,75,1)
(71,110,1)
(32,52,1)
(35,56,1)
(135,73,1)
(9,105,1)
(92,115,1)
(38,65,1)
(10,30,1)
(141,23,1)
(91,37,1)
(115,122,1)
(113,26,1)
(102,11,1)
(117,44,1)
(115,15,1)
(41,87,1)
(68,61,1)
(26,25,1)
(117,132,1)
(115,40,1)
(81,34,1)
(12,24,1)
(128,35,1)
(47,120,1)
(87,22,1)
(11,138,1)
(90,1,1)
(15,75,1)
(57,26,1)
(28,109,1)
(56,7,1)
(9,92,1)
(136,101,1)
(39,48,1)
(56,137,1)
(80,102,1)
(34,17,1)
(36,68,1)
(87,26,1)
(110,57,1)
(138,107,1)
(33,54,1)
(0,42,1)
(61,39,2)
(88,137,2)
(141,75,2)
(34,36,2)
(29,134,2)
(16,29,2)
(121,16,2)
(135,75,2)
(29,40,2)
(55,30,2)
(113,9,2)
(113,105,2)
(10,39,2)
(68,30,2)
(33,39,2)
(48,41,2)
(130,75,2)
(87,53,2)
(64,110,2)
(91,75,2)
(65,16,2)
(108,48,2)
(16,40,2)
(88,81,2)
(128,35,2)
(73,75,2)
(122,16,2)
(117,44,2)
(107,75,2)
(30,39,2)
(44,75,2)
(29,0,2)
(9,105,2)
(4,75,2)
(81,36,2)
(109,75,2)
(35,56,2)
(57,77,2)
(28,75,2)
(80,75,2)
(72,39,2)
(21,16,2)
(57,73,2)
(103,40,2)
(13,9,2)
(38,16,2)
(41,110,2)
(36,39,2)
(79,75,2)
(67,40,2)
(73,141,2)
(63,16,2)
(110,57,2)
(15,75,2)
(87,110,2)
(30,111,2)
(37,75,2)
(41,87,2)
(75,16,2)
(76,39,2)
(70,16,2)
(57,75,2)
(114,48,2)
(53,110,2)
(1,110,2)
(136,68,2)
(71,110,2)
(8,110,2)
(131,75,2)
(59,75,2)
(42,40,2)
(20,91,2)
(57,26,2)
(87,26,2)
(39,108,2)
(127,75,2)
(56,137,2)
(132,75,2)
(23,75,2)
(6,40,2)
(85,110,2)
(117,75,2)
(26,25,2)
(55,68,2)
(24,83,2)
(56,30,2)
(126,75,2)
(112,16,2)
(134,40,2)
(5,75,2)
(117,132,2)
(60,110,2)
(17,36,2)
(7,36,2)
(66,75,2)
(138,75,2)
(36,55,2)
(69,39,2)
(99,16,2)
(12,75,2)
(58,75,2)
(75,26,2)
(26,16,2)
(52,39,2)
(35,137,2)
(73,43,2)
(94,97,2)
(113,26,2)
(54,41,2)
(25,16,2)
(40,39,2)
(108,41,2)
(31,39,2)
(78,36,2)
(24,75,2)
(56,36,2)
(127,116,2)
(74,16,2)
(35,88,2)
(90,110,2)
(83,75,2)
(139,48,2)
(95,110,2)
(116,75,2)
(110,75,2)
(77,75,2)
(32,39,2)
(39,48,2)
(101,68,2)
(0,40,2)
(22,110,2)
(9,26,2)
(54,39,2)
(20,75,2)
(48,110,2)
(11,75,2)
(36,68,2)
(88,36,2)
(68,39,2)
(102,75,2)
(39,110,2)
(111,39,2)
-----------------------------------
(0,&wsaData)
(1,inputBuffer)
(2,if (connect(connectSocket, (struct sockaddr*)
(3,inputBuffer)
(4,service.sin_port)
(5,s_addr)
(6,2)
(7,tempInt)
(8,connectSocket)
(9,connectSocket != INVALID_SOCKET)
(10,tempInt)
(11,service.sin_family)
(12,IP_ADDRESS)
(13,connectSocket)
(14,connectSocket)
(15,break;)
(16,WSAStartup(MAKEWORD(2,2)
(17,data)
(18,)
(19,data)
(20,service.sin_port = htons(TCP_PORT)
(21,wsaDataInit = 1)
(22,0)
(23,service)
(24,service.sin_addr.s_addr)
(25,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(26,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(27,0)
(28,service)
(29,WSAStartup(MAKEWORD(2,2)
(30,tempInt = atoi(inputBuffer)
(31,break;)
(32,inputBuffer)
(33,\'\\\\0\')
(34,1)
(35,return data;)
(36,tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(37,TCP_PORT)
(38,1)
(39,recvResult == SOCKET_ERROR || recvResult == 0)
(40,0)
(41,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(42,wsaData)
(43,struct sockaddr*)
(44,sizeof(service)
(45,do)
(46,)
(47,INVALID_SOCKET)
(48,recvResult == SOCKET_ERROR)
(49,)
(50,)
(51,)
(52,tempInt)
(53,CHAR_ARRAY_SIZE - 1)
(54,inputBuffer[recvResult])
(55,tempInt < SHRT_MIN)
(56,data = tempInt)
(57,connect(connectSocket, (struct sockaddr*)
(58,service)
(59,service)
(60,recvResult)
(61,SHRT_MAX)
(62,wsaData)
(63,IPPROTO_TCP)
(64,recvResult)
(65,wsaDataInit)
(66,service)
(67,2)
(68,tempInt > SHRT_MAX)
(69,recvResult)
(70,AF_INET)
(71,break;)
(72,inputBuffer)
(73,(struct sockaddr*)
(74,SOCK_STREAM)
(75,connectSocket == INVALID_SOCKET)
(76,inputBuffer[recvResult] = '\\\\0')
(77,sizeof(service)
(78,data)
(79,sin_addr)
(80,service.sin_family = AF_INET)
(81,-1)
(82,)
(83,service.sin_addr)
(84,if (connectSocket != INVALID_SOCKET)
(85,1)
(86,)
(87,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(88,data = -1)
(89,inputBuffer[recvResult] = \'\\\\0\')
(90,CHAR_ARRAY_SIZE)
(91,htons(TCP_PORT)
(92,INVALID_SOCKET)
(93,recvResult)
(94,WSACleanup()
(95,SOCKET_ERROR)
(96,'\\\\0')
(97,wsaDataInit)
(98,)
(99,connectSocket)
(100,wsaDataInit)
(101,tempInt)
(102,AF_INET)
(103,NO_ERROR)
(104,if (WSAStartup(MAKEWORD(2,2)
(105,connectSocket = INVALID_SOCKET)
(106,service)
(107,service)
(108,recvResult == 0)
(109,0)
(110,connect(connectSocket, (struct sockaddr*)
(111,atoi(inputBuffer)
(112,INVALID_SOCKET)
(113,CLOSE_SOCKET(connectSocket)
(114,recvResult)
(115,connectSocket)
(116,inet_addr(IP_ADDRESS)
(117,memset(&service, 0, sizeof(service)
(118,)
(119,tempInt)
(120,connectSocket)
(121,connectSocket)
(122,break;)
(123,)
(124,if (tempInt > SHRT_MAX || tempInt < SHRT_MIN)
(125,if (recvResult == SOCKET_ERROR || recvResult == 0)
(126,sin_port)
(127,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(128,RET)
(129,wsaDataInit)
(130,SOCKET_ERROR)
(131,connectSocket)
(132,&service)
(133,if (wsaDataInit)
(134,MAKEWORD(2,2)
(135,service)
(136,SHRT_MIN)
(137,short data)
(138,sin_family)
(139,0)
(140,)
(141,&service)
(142,if (connectSocket == INVALID_SOCKET)
(143,wsaDataInit = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^