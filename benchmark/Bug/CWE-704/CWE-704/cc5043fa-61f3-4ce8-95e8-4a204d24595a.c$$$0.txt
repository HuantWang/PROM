-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_02_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* FLAW: Use a value input from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to short */
                data = (short)atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
49,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,51,54,56,61,62,66,67,71,73,74,78,80,83,85,89,91,96,98,102,104,105,108,109,114,117,118,119,123,125,129,131
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
64,65
64,66
87,88
87,89
106,107
106,108
111,112
111,113
115,116
115,117
-----guardedBy-----
36,56
66,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fgets_malloc_02_bad(){    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fgets_malloc_02_bad()
CWE194_Unexpected_Sign_Extension__fgets_malloc_02_bad
{    short data;    /* Initialize data */    data = 0;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* FLAW: Use a value input from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to short */                data = (short)atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to short */                data = (short)atoi(inputBuffer);            }
data = (short)atoi(inputBuffer);
data = (short)atoi(inputBuffer)
data
data
(short)atoi(inputBuffer)
short
short

atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(51,32,0)
(42,15,0)
(44,35,0)
(11,1,0)
(3,14,0)
(66,35,0)
(2,57,0)
(23,37,0)
(1,48,0)
(27,37,0)
(31,12,0)
(48,14,0)
(19,32,0)
(43,56,0)
(32,24,0)
(6,55,0)
(30,10,0)
(23,24,0)
(15,55,0)
(29,35,0)
(37,23,0)
(41,16,0)
(9,59,0)
(13,1,0)
(44,24,0)
(7,56,0)
(54,59,0)
(38,10,0)
(15,42,0)
(42,58,0)
(26,48,0)
(10,48,0)
(10,30,0)
(63,48,0)
(28,15,0)
(65,46,0)
(0,16,0)
(45,30,0)
(49,24,0)
(53,12,0)
(50,14,0)
(5,24,0)
(37,46,0)
(60,10,0)
(4,64,0)
(36,23,0)
(5,35,0)
(61,44,0)
(23,35,0)
(16,15,0)
(5,42,0)
(34,15,0)
(32,35,0)
(24,11,0)
(35,56,0)
(37,15,0)
(11,24,0)
(11,18,0)
(14,33,0)
(67,4,0)
(21,34,0)
(40,5,0)
(8,44,0)
(12,15,0)
(58,42,0)
(42,5,0)
(1,11,0)
(9,39,0)
(25,10,0)
(57,55,0)
(44,12,0)
(46,55,0)
(17,56,0)
(59,9,0)
(12,44,0)
(34,55,0)
(18,11,0)
(12,55,0)
(24,62,0)
(20,23,0)
(57,15,0)
(22,55,0)
(30,45,1)
(46,65,1)
(5,24,1)
(60,38,1)
(38,48,1)
(16,15,1)
(19,47,1)
(34,15,1)
(57,15,1)
(44,24,1)
(19,24,1)
(26,63,1)
(32,51,1)
(53,31,1)
(59,54,1)
(49,30,1)
(42,5,1)
(10,25,1)
(21,57,1)
(1,48,1)
(25,60,1)
(15,42,1)
(12,44,1)
(2,46,1)
(9,59,1)
(48,26,1)
(5,40,1)
(32,35,1)
(36,27,1)
(12,15,1)
(30,10,1)
(32,24,1)
(65,37,1)
(52,34,1)
(40,28,1)
(31,9,1)
(34,21,1)
(44,35,1)
(47,35,1)
(23,35,1)
(31,16,1)
(23,24,1)
(37,15,1)
(20,36,1)
(16,41,1)
(57,2,1)
(51,19,1)
(5,35,1)
(37,23,1)
(67,30,1)
(29,66,1)
(35,29,1)
(52,32,1)
(11,1,1)
(42,58,1)
(23,20,1)
(27,12,1)
(1,13,1)
(28,32,1)
(13,49,1)
(4,67,1)
(24,11,1)
(8,53,1)
(41,0,1)
(10,48,1)
(11,18,1)
(63,47,1)
(54,16,1)
(19,4,1)
(0,15,1)
(44,61,1)
(61,8,1)
(45,10,1)
(23,24,2)
(34,32,2)
(5,35,2)
(54,16,2)
(38,47,2)
(49,30,2)
(11,18,2)
(45,47,2)
(44,35,2)
(40,32,2)
(9,59,2)
(41,32,2)
(60,47,2)
(44,24,2)
(23,35,2)
(57,15,2)
(44,32,2)
(21,32,2)
(9,16,2)
(1,48,2)
(30,10,2)
(23,32,2)
(16,32,2)
(28,32,2)
(11,1,2)
(13,30,2)
(32,24,2)
(42,58,2)
(24,30,2)
(24,11,2)
(5,24,2)
(46,32,2)
(5,32,2)
(42,5,2)
(57,32,2)
(25,47,2)
(26,47,2)
(12,32,2)
(37,15,2)
(48,47,2)
(37,32,2)
(32,35,2)
(63,47,2)
(1,30,2)
(34,15,2)
(59,16,2)
(61,32,2)
(53,32,2)
(10,47,2)
(27,32,2)
(8,32,2)
(37,23,2)
(11,30,2)
(0,32,2)
(12,15,2)
(2,32,2)
(30,47,2)
(67,30,2)
(15,42,2)
(16,15,2)
(10,48,2)
(31,32,2)
(12,44,2)
(65,32,2)
(42,32,2)
(4,30,2)
(20,32,2)
(15,32,2)
(36,32,2)
-----------------------------------
(0,dataBuffer)
(1,atoi(inputBuffer)
(2,dataBuffer)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,printLine("fgets()
(5,malloc(data)
(6,if (dataBuffer == NULL)
(7,if(1)
(8,data)
(9,exit(-1)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,(short)
(12,memset(dataBuffer, \\\'A\\\', data-1)
(13,inputBuffer)
(14,)
(15,* dataBuffer = (char *)
(16,dataBuffer == NULL)
(17,data)
(18,short)
(19,data)
(20,1)
(21,dataBuffer)
(22,dataBuffer)
(23,data-1)
(24,data = (short)
(25,stdin)
(26,"")
(27,dataBuffer)
(28,dataBuffer)
(29,0)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,dataBuffer)
(32,data < 100)
(33,)
(34,free(dataBuffer)
(35,data = 0)
(36,data)
(37,dataBuffer[data-1])
(38,inputBuffer)
(39,)
(40,data)
(41,NULL)
(42,(char *)
(43,if (data < 100)
(44,data-1)
(45,NULL)
(46,dataBuffer[data-1] = \\\'\\\\0\\\')
(47,1)
(48,inputBuffer[CHAR_ARRAY_SIZE] = "")
(49,data)
(50,inputBuffer)
(51,100)
(52,RET)
(53,\\\'A\\\')
(54,1)
(55,)
(56,)
(57,printLine(dataBuffer)
(58,char *)
(59,-1)
(60,CHAR_ARRAY_SIZE)
(61,1)
(62,)
(63,inputBuffer)
(64,)
(65,\\\'\\\\0\\\')
(66,data)
(67,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^