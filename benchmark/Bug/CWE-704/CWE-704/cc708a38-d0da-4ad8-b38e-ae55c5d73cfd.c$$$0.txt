-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_14_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
68,70
68,71
68,72
68,73
68,74
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,71,73,74,78,80,83,85,89,91,96,98,102,104,105,108,109,114,117,118,119,123,125,129,131
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
87,88
87,89
106,107
106,108
111,112
111,113
115,116
115,117
-----guardedBy-----
40,56
66,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_14_bad(){    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_14_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_malloc_14_bad
{    int data;    /* Initialize data */    data = -1;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(57,0,0)
(20,45,0)
(7,0,0)
(29,0,0)
(4,44,0)
(9,68,0)
(45,19,0)
(5,55,0)
(39,62,0)
(40,62,0)
(63,20,0)
(0,7,0)
(59,38,0)
(13,63,0)
(20,63,0)
(50,45,0)
(68,45,0)
(45,53,0)
(63,39,0)
(66,46,0)
(27,45,0)
(49,8,0)
(21,39,0)
(42,45,0)
(11,42,0)
(50,44,0)
(30,55,0)
(35,28,0)
(55,28,0)
(53,45,0)
(38,49,0)
(41,68,0)
(46,66,0)
(32,19,0)
(50,62,0)
(47,53,0)
(36,26,0)
(16,24,0)
(68,44,0)
(21,8,0)
(44,30,0)
(2,8,0)
(38,68,0)
(22,8,0)
(3,0,0)
(1,8,0)
(20,44,0)
(37,51,0)
(23,39,0)
(38,39,0)
(48,20,0)
(12,19,0)
(51,39,0)
(46,58,0)
(24,54,0)
(18,63,0)
(30,44,0)
(14,20,0)
(62,50,0)
(63,8,0)
(0,55,0)
(39,8,0)
(6,42,0)
(52,26,0)
(65,50,0)
(43,28,0)
(68,38,0)
(56,7,0)
(62,39,0)
(44,10,0)
(33,66,0)
(60,49,0)
(34,55,0)
(17,1,0)
(28,25,0)
(31,19,0)
(1,39,0)
(62,40,0)
(61,30,0)
(15,51,0)
(64,21,0)
(42,44,0)
(39,62,1)
(50,65,1)
(37,39,1)
(52,45,1)
(30,61,1)
(63,39,1)
(30,55,1)
(33,51,1)
(46,66,1)
(16,7,1)
(63,20,1)
(50,44,1)
(64,1,1)
(50,45,1)
(42,44,1)
(60,38,1)
(23,42,1)
(51,39,1)
(26,36,1)
(29,55,1)
(20,45,1)
(56,0,1)
(38,39,1)
(48,13,1)
(20,44,1)
(20,14,1)
(1,39,1)
(36,52,1)
(62,40,1)
(68,45,1)
(68,44,1)
(3,57,1)
(65,23,1)
(53,47,1)
(62,50,1)
(67,21,1)
(68,9,1)
(44,30,1)
(18,51,1)
(11,26,1)
(67,42,1)
(0,55,1)
(49,60,1)
(18,46,1)
(42,45,1)
(7,0,1)
(41,59,1)
(13,18,1)
(51,15,1)
(17,49,1)
(55,34,1)
(57,29,1)
(1,17,1)
(21,64,1)
(42,6,1)
(6,11,1)
(15,37,1)
(9,41,1)
(21,39,1)
(66,33,1)
(14,48,1)
(59,63,1)
(34,5,1)
(45,53,1)
(24,16,1)
(61,4,1)
(7,56,1)
(5,26,1)
(11,24,1)
(0,3,1)
(47,27,1)
(4,7,1)
(38,68,1)
(11,44,1)
(48,42,2)
(63,20,2)
(68,42,2)
(17,42,2)
(13,42,2)
(4,7,2)
(20,42,2)
(24,7,2)
(0,26,2)
(30,55,2)
(68,44,2)
(21,42,2)
(66,51,2)
(42,44,2)
(0,55,2)
(34,26,2)
(9,42,2)
(15,42,2)
(50,42,2)
(63,39,2)
(33,51,2)
(56,26,2)
(62,40,2)
(38,42,2)
(44,7,2)
(61,7,2)
(50,44,2)
(51,39,2)
(39,42,2)
(14,42,2)
(55,26,2)
(49,42,2)
(7,0,2)
(23,42,2)
(44,30,2)
(62,42,2)
(46,66,2)
(64,42,2)
(60,42,2)
(68,45,2)
(41,42,2)
(29,26,2)
(20,45,2)
(45,53,2)
(7,26,2)
(21,39,2)
(57,26,2)
(50,45,2)
(5,26,2)
(42,45,2)
(62,50,2)
(1,39,2)
(39,62,2)
(46,51,2)
(51,42,2)
(63,42,2)
(1,42,2)
(3,26,2)
(59,42,2)
(30,7,2)
(20,44,2)
(65,42,2)
(38,68,2)
(38,39,2)
(16,7,2)
(18,42,2)
(37,42,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,printLine(dataBuffer)
(2,if (dataBuffer == NULL)
(3,stdin)
(4,data)
(5,inputBuffer)
(6,100)
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,)
(9,1)
(10,)
(11,data)
(12,data)
(13,\\\'A\\\')
(14,1)
(15,NULL)
(16,"fgets()
(17,dataBuffer)
(18,dataBuffer)
(19,)
(20,data-1)
(21,free(dataBuffer)
(22,dataBuffer)
(23,dataBuffer)
(24,printLine("fgets()
(25,)
(26,globalFive==5)
(27,data)
(28,)
(29,inputBuffer)
(30,atoi(inputBuffer)
(31,if (data < 100)
(32,if(globalFive==5)
(33,1)
(34,"")
(35,inputBuffer)
(36,5)
(37,dataBuffer)
(38,dataBuffer[data-1])
(39,* dataBuffer = (char *)
(40,char *)
(41,data)
(42,data < 100)
(43,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,data = atoi(inputBuffer)
(45,data = -1)
(46,exit(-1)
(47,1)
(48,data)
(49,dataBuffer[data-1] = \\\'\\\\0\\\')
(50,malloc(data)
(51,dataBuffer == NULL)
(52,globalFive)
(53,-1)
(54,)
(55,inputBuffer[CHAR_ARRAY_SIZE] = "")
(56,NULL)
(57,CHAR_ARRAY_SIZE)
(58,)
(59,dataBuffer)
(60,\\\'\\\\0\\\')
(61,inputBuffer)
(62,(char *)
(63,memset(dataBuffer, \\\'A\\\', data-1)
(64,dataBuffer)
(65,data)
(66,-1)
(67,RET)
(68,data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^