-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a value input from the console using fscanf() */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
44,50
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,37,38,42,43,47,49,50,54,56,59,61,65,67,72,74,78,80,81,84,85,90,93,94,95,99,101,105,107
-----computeFrom-----
12,13
12,14
33,34
33,35
36,37
36,38
40,41
40,42
63,64
63,65
82,83
82,84
87,88
87,89
91,92
91,93
-----guardedBy-----
42,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__fscanf_malloc_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__fscanf_malloc_12_bad()
CWE194_Unexpected_Sign_Extension__fscanf_malloc_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a value input from the console using fscanf() */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(49,20,0)
(55,29,0)
(21,12,0)
(13,23,0)
(44,6,0)
(0,1,0)
(56,39,0)
(25,12,0)
(26,14,0)
(18,30,0)
(28,12,0)
(26,25,0)
(0,6,0)
(31,41,0)
(42,21,0)
(35,21,0)
(54,51,0)
(37,29,0)
(31,29,0)
(43,31,0)
(17,20,0)
(20,47,0)
(25,30,0)
(32,25,0)
(21,54,0)
(34,55,0)
(8,48,0)
(50,38,0)
(15,29,0)
(12,48,0)
(26,55,0)
(52,12,0)
(3,19,0)
(24,29,0)
(15,55,0)
(54,55,0)
(41,31,0)
(38,29,0)
(36,15,0)
(25,26,0)
(40,54,0)
(11,48,0)
(16,41,0)
(54,21,0)
(14,26,0)
(55,26,0)
(20,39,0)
(39,12,0)
(21,30,0)
(46,48,0)
(38,55,0)
(33,31,0)
(30,23,0)
(39,20,0)
(51,29,0)
(7,19,0)
(5,23,0)
(30,4,0)
(10,18,0)
(23,30,0)
(9,30,0)
(6,0,0)
(27,51,0)
(19,55,0)
(31,55,0)
(41,12,0)
(22,18,0)
(45,41,0)
(18,12,0)
(41,30,0)
(13,9,1)
(38,50,1)
(21,42,1)
(50,51,1)
(32,34,1)
(7,55,1)
(39,56,1)
(26,14,1)
(20,39,1)
(38,55,1)
(21,30,1)
(34,18,1)
(21,12,1)
(12,28,1)
(6,44,1)
(40,31,1)
(31,55,1)
(2,12,1)
(55,26,1)
(22,20,1)
(35,40,1)
(3,7,1)
(43,0,1)
(36,38,1)
(42,35,1)
(33,43,1)
(53,15,1)
(16,33,1)
(0,6,1)
(19,55,1)
(54,55,1)
(41,30,1)
(25,30,1)
(53,18,1)
(18,12,1)
(41,45,1)
(27,54,1)
(10,22,1)
(22,30,1)
(39,12,1)
(5,13,1)
(23,5,1)
(54,21,1)
(26,25,1)
(31,41,1)
(25,32,1)
(25,12,1)
(18,30,1)
(19,3,1)
(15,36,1)
(56,49,1)
(18,10,1)
(45,16,1)
(44,19,1)
(30,23,1)
(9,2,1)
(51,27,1)
(43,19,1)
(41,12,1)
(49,17,1)
(15,55,1)
(17,2,1)
(28,52,1)
(19,55,2)
(0,6,2)
(34,18,2)
(44,19,2)
(6,19,2)
(55,26,2)
(21,30,2)
(32,18,2)
(49,2,2)
(31,41,2)
(35,18,2)
(21,18,2)
(45,18,2)
(5,2,2)
(54,21,2)
(25,12,2)
(15,18,2)
(40,18,2)
(15,55,2)
(9,2,2)
(26,18,2)
(56,2,2)
(55,18,2)
(39,12,2)
(16,18,2)
(30,23,2)
(26,14,2)
(18,30,2)
(38,18,2)
(36,18,2)
(25,30,2)
(26,25,2)
(43,18,2)
(20,39,2)
(18,12,2)
(31,55,2)
(54,18,2)
(54,55,2)
(42,18,2)
(30,2,2)
(39,2,2)
(41,30,2)
(41,12,2)
(20,2,2)
(50,18,2)
(41,18,2)
(13,2,2)
(33,18,2)
(25,18,2)
(0,19,2)
(17,2,2)
(21,12,2)
(7,18,2)
(51,18,2)
(19,18,2)
(3,18,2)
(31,18,2)
(23,2,2)
(38,55,2)
(27,18,2)
-----------------------------------
(0,exit(-1)
(1,)
(2,globalReturnsTrueOrFalse()
(3,NULL)
(4,)
(5,1)
(6,-1)
(7,dataBuffer)
(8,if(globalReturnsTrueOrFalse()
(9,data)
(10,100)
(11,if (data < 100)
(12,data = 0)
(13,100)
(14,char *)
(15,free(dataBuffer)
(16,data)
(17,stdin)
(18,data < 100)
(19,dataBuffer == NULL)
(20,fscanf (stdin, "%hd", &data)
(21,data-1)
(22,data)
(23,100-1)
(24,dataBuffer)
(25,malloc(data)
(26,(char *)
(27,\\\'\\\\0\\\')
(28,0)
(29,)
(30,data = 100-1)
(31,memset(dataBuffer, \\\'A\\\', data-1)
(32,data)
(33,\\\'A\\\')
(34,dataBuffer)
(35,data)
(36,dataBuffer)
(37,if (dataBuffer == NULL)
(38,printLine(dataBuffer)
(39,&data)
(40,dataBuffer)
(41,data-1)
(42,1)
(43,dataBuffer)
(44,1)
(45,1)
(46,data)
(47,)
(48,)
(49,"%hd")
(50,dataBuffer)
(51,dataBuffer[data-1] = \\\'\\\\0\\\')
(52,data)
(53,RET)
(54,dataBuffer[data-1])
(55,* dataBuffer = (char *)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^