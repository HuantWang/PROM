-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign conversion could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
73,75
73,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,67,69,72,74,76,78,82,84,85,87,88,93,95,96,97,101,102,107,109,111,113,118,120,121,125,127
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
86,87
86,88
90,91
90,92
94,95
94,96
99,100
99,101
115,116
115,117
-----guardedBy-----
39,55
101,120
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_08_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fgets_strncpy_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign conversion could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(55,13,0)
(29,19,0)
(62,32,0)
(4,44,0)
(26,18,0)
(13,7,0)
(39,41,0)
(19,59,0)
(61,31,0)
(32,7,0)
(50,20,0)
(41,10,0)
(18,9,0)
(38,60,0)
(0,43,0)
(30,10,0)
(42,17,0)
(60,2,0)
(53,2,0)
(25,7,0)
(12,22,0)
(23,10,0)
(37,61,0)
(11,7,0)
(56,13,0)
(15,52,0)
(44,10,0)
(17,34,0)
(22,61,0)
(47,10,0)
(54,61,0)
(16,34,0)
(24,59,0)
(3,52,0)
(13,9,0)
(36,11,0)
(35,22,0)
(64,19,0)
(63,59,0)
(60,23,0)
(44,41,0)
(5,19,0)
(19,20,0)
(22,7,0)
(61,54,0)
(45,17,0)
(57,54,0)
(48,8,0)
(13,61,0)
(27,41,0)
(32,18,0)
(58,34,0)
(32,41,0)
(1,8,0)
(7,8,0)
(28,10,0)
(33,13,0)
(54,59,0)
(52,46,0)
(10,8,0)
(20,19,0)
(59,52,0)
(2,60,0)
(14,23,0)
(34,10,0)
(51,32,0)
(49,0,0)
(13,41,0)
(34,17,0)
(7,11,0)
(21,2,0)
(32,61,0)
(36,25,1)
(54,57,1)
(39,61,1)
(55,33,1)
(41,27,1)
(20,19,1)
(32,41,1)
(50,19,1)
(32,61,1)
(57,37,1)
(22,61,1)
(27,39,1)
(35,23,1)
(54,59,1)
(2,21,1)
(4,22,1)
(56,55,1)
(13,7,1)
(49,20,1)
(60,2,1)
(12,35,1)
(14,60,1)
(32,7,1)
(16,41,1)
(53,38,1)
(7,11,1)
(39,6,1)
(62,13,1)
(0,49,1)
(45,42,1)
(40,44,1)
(33,22,1)
(4,18,1)
(22,7,1)
(5,64,1)
(63,6,1)
(34,17,1)
(32,51,1)
(6,7,1)
(39,0,1)
(51,62,1)
(18,26,1)
(24,63,1)
(13,61,1)
(19,29,1)
(61,54,1)
(19,59,1)
(21,53,1)
(20,50,1)
(22,12,1)
(44,4,1)
(59,24,1)
(13,56,1)
(64,59,1)
(13,41,1)
(58,16,1)
(11,36,1)
(42,58,1)
(37,20,1)
(44,41,1)
(29,5,1)
(17,45,1)
(26,32,1)
(23,14,1)
(38,34,1)
(61,54,2)
(18,22,2)
(13,22,2)
(26,22,2)
(13,41,2)
(63,6,2)
(34,17,2)
(49,20,2)
(61,20,2)
(56,22,2)
(32,7,2)
(51,22,2)
(19,6,2)
(13,61,2)
(20,6,2)
(64,6,2)
(54,20,2)
(55,22,2)
(44,41,2)
(59,6,2)
(32,41,2)
(24,6,2)
(54,59,2)
(5,6,2)
(13,7,2)
(32,22,2)
(7,11,2)
(62,22,2)
(60,2,2)
(33,22,2)
(22,7,2)
(22,61,2)
(50,6,2)
(57,20,2)
(29,6,2)
(19,59,2)
(0,20,2)
(32,61,2)
(20,19,2)
(37,20,2)
-----------------------------------
(0,printLine("fgets()
(1,data)
(2,100-1)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,dest)
(5,CHAR_ARRAY_SIZE)
(6,staticReturnsTrue()
(7,data = -1)
(8,)
(9,)
(10,)
(11,-1)
(12,100)
(13,strncpy(dest, source, data)
(14,\\\'\\\\0\\\')
(15,inputBuffer)
(16,source)
(17,100-1)
(18,dest[data] = \\\'\\\\0\\\')
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,1)
(22,data < 100)
(23,source[100-1] = \\\'\\\\0\\\')
(24,"")
(25,data)
(26,\\\'\\\\0\\\')
(27,"")
(28,if (data < 100)
(29,stdin)
(30,source)
(31,)
(32,dest[data])
(33,dest)
(34,memset(source, \\\'A\\\', 100-1)
(35,data)
(36,1)
(37,data)
(38,source)
(39,dest)
(40,RET)
(41,dest[100] = "")
(42,100)
(43,)
(44,printLine(dest)
(45,1)
(46,)
(47,dest)
(48,if(staticReturnsTrue()
(49,"fgets()
(50,NULL)
(51,data)
(52,)
(53,100)
(54,atoi(inputBuffer)
(55,source)
(56,data)
(57,inputBuffer)
(58,\\\'A\\\')
(59,inputBuffer[CHAR_ARRAY_SIZE] = "")
(60,source[100-1])
(61,data = atoi(inputBuffer)
(62,dest)
(63,inputBuffer)
(64,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^