-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_31_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* FLAW: Use a negative number */
    data = -1;
    {
        int dataCopy = data;
        int data = dataCopy;
        /* Assume we want to allocate a relatively small buffer */
        if (data < 100)
        {
            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
             * the conversion will cause malloc() to allocate a very large amount of data or fail */
            char * dataBuffer = (char *)malloc(data);
            if (dataBuffer == NULL) {exit(-1);}
            /* Do something with dataBuffer */
            memset(dataBuffer, 'A', data-1);
            dataBuffer[data-1] = '\0';
            printLine(dataBuffer);
            free(dataBuffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,34,36,39,43,44,48,50,51,55,57,60,62,66,68,73,75,79,81,82,85,86,91,94,95,96,100,102,106,108
-----computeFrom-----
12,13
12,14
18,19
18,20
41,42
41,43
64,65
64,66
83,84
83,85
88,89
88,90
92,93
92,94
-----guardedBy-----
43,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_31_bad(){    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_31_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_31_bad
{    int data;    /* Initialize data */    data = -1;    /* FLAW: Use a negative number */    data = -1;    {        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
data = -1;
data = -1
data
data
-1
1
{        int dataCopy = data;        int data = dataCopy;        /* Assume we want to allocate a relatively small buffer */        if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if (data < 100)        {            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,             * the conversion will cause malloc() to allocate a very large amount of data or fail */            char * dataBuffer = (char *)malloc(data);            if (dataBuffer == NULL) {exit(-1);}            /* Do something with dataBuffer */            memset(dataBuffer, 'A', data-1);            dataBuffer[data-1] = '\0';            printLine(dataBuffer);            free(dataBuffer);        }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(49,2,0)
(18,40,0)
(4,41,0)
(14,53,0)
(58,46,0)
(41,4,0)
(8,36,0)
(21,2,0)
(42,39,0)
(0,20,0)
(39,33,0)
(12,6,0)
(7,56,0)
(56,55,0)
(23,56,0)
(2,6,0)
(5,40,0)
(7,55,0)
(27,4,0)
(40,5,0)
(39,45,0)
(5,45,0)
(2,53,0)
(6,45,0)
(50,55,0)
(13,36,0)
(59,53,0)
(54,55,0)
(46,2,0)
(56,32,0)
(34,55,0)
(25,33,0)
(1,32,0)
(49,30,0)
(19,49,0)
(30,56,0)
(28,2,0)
(38,45,0)
(33,39,0)
(57,56,0)
(51,23,0)
(9,7,0)
(52,21,0)
(53,39,0)
(17,2,0)
(44,6,0)
(20,55,0)
(32,46,0)
(30,49,0)
(36,2,0)
(22,56,0)
(3,49,0)
(46,32,0)
(41,26,0)
(32,1,0)
(24,6,0)
(16,23,0)
(57,55,0)
(11,21,0)
(30,20,0)
(37,57,0)
(50,56,0)
(32,56,0)
(36,7,0)
(29,5,0)
(15,30,0)
(7,36,0)
(10,7,0)
(53,6,0)
(47,50,0)
(42,5,1)
(27,23,1)
(3,19,1)
(0,30,1)
(17,53,1)
(36,2,1)
(15,7,1)
(37,50,1)
(50,47,1)
(50,56,1)
(14,59,1)
(53,39,1)
(53,14,1)
(39,33,1)
(8,10,1)
(7,56,1)
(41,4,1)
(23,56,1)
(46,58,1)
(47,20,1)
(52,2,1)
(36,13,1)
(58,22,1)
(49,2,1)
(35,21,1)
(30,56,1)
(7,36,1)
(2,53,1)
(5,40,1)
(18,29,1)
(57,56,1)
(22,21,1)
(23,51,1)
(19,15,1)
(28,17,1)
(59,39,1)
(21,2,1)
(10,9,1)
(40,18,1)
(35,57,1)
(11,52,1)
(33,25,1)
(13,8,1)
(51,16,1)
(32,46,1)
(25,42,1)
(2,28,1)
(20,0,1)
(21,11,1)
(16,56,1)
(57,37,1)
(49,3,1)
(9,41,1)
(9,23,1)
(46,2,1)
(4,27,1)
(30,49,1)
(32,1,1)
(56,32,1)
(57,21,2)
(16,21,2)
(30,49,2)
(49,2,2)
(7,21,2)
(49,21,2)
(0,21,2)
(36,21,2)
(22,21,2)
(32,21,2)
(37,21,2)
(30,56,2)
(41,23,2)
(50,56,2)
(50,21,2)
(27,23,2)
(15,21,2)
(2,53,2)
(23,56,2)
(47,21,2)
(7,36,2)
(53,39,2)
(3,21,2)
(10,21,2)
(9,21,2)
(7,56,2)
(13,21,2)
(20,21,2)
(51,21,2)
(58,21,2)
(8,21,2)
(32,46,2)
(46,21,2)
(39,33,2)
(56,21,2)
(41,4,2)
(46,2,2)
(57,56,2)
(4,23,2)
(21,2,2)
(23,21,2)
(5,40,2)
(32,1,2)
(36,2,2)
(19,21,2)
(56,32,2)
(30,21,2)
-----------------------------------
(0,\'\\\\0\')
(1,char *)
(2,data = dataCopy)
(3,1)
(4,-1)
(5,data = -1)
(6,)
(7,memset(dataBuffer, \'A\', data-1)
(8,data)
(9,dataBuffer)
(10,\'A\')
(11,100)
(12,if (data < 100)
(13,1)
(14,data)
(15,dataBuffer)
(16,dataBuffer)
(17,data)
(18,1)
(19,data)
(20,dataBuffer[data-1] = \'\\\\0\')
(21,data < 100)
(22,dataBuffer)
(23,dataBuffer == NULL)
(24,data)
(25,1)
(26,)
(27,1)
(28,dataCopy)
(29,data)
(30,dataBuffer[data-1])
(31,'A')
(32,(char *)
(33,-1)
(34,dataBuffer)
(35,RET)
(36,data-1)
(37,dataBuffer)
(38,data)
(39,data = -1)
(40,-1)
(41,exit(-1)
(42,data)
(43,dataBuffer[data-1] = '\\\\0')
(44,dataCopy)
(45,)
(46,malloc(data)
(47,dataBuffer)
(48,'\\\\0')
(49,data-1)
(50,printLine(dataBuffer)
(51,NULL)
(52,data)
(53,dataCopy = data)
(54,if (dataBuffer == NULL)
(55,)
(56,* dataBuffer = (char *)
(57,free(dataBuffer)
(58,data)
(59,dataCopy)
(60,memset(dataBuffer, 'A', data-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^