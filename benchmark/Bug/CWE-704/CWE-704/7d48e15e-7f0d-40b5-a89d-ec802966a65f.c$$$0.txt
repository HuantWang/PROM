-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_11_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
76,77
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,36,40,42,43,47,49,52,54,58,60,65,67,71,73,74,77,78,83,86,87,88,92,94,98,100
-----computeFrom-----
12,13
12,14
33,34
33,35
56,57
56,58
75,76
75,77
80,81
80,82
84,85
84,86
-----guardedBy-----
35,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_11_bad(){    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_11_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_11_bad
{    int data;    /* Initialize data */    data = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(34,10,0)
(49,47,0)
(27,47,0)
(38,37,0)
(6,42,0)
(36,6,0)
(40,37,0)
(33,47,0)
(6,37,0)
(20,22,0)
(22,47,0)
(39,5,0)
(8,46,0)
(10,42,0)
(23,26,0)
(16,29,0)
(28,40,0)
(33,1,0)
(21,1,0)
(1,33,0)
(34,49,0)
(41,42,0)
(24,47,0)
(32,29,0)
(14,42,0)
(45,24,0)
(19,40,0)
(37,26,0)
(1,35,0)
(15,6,0)
(3,11,0)
(31,9,0)
(25,49,0)
(49,34,0)
(17,49,0)
(26,37,0)
(48,1,0)
(13,34,0)
(46,37,0)
(46,42,0)
(26,23,0)
(18,44,0)
(11,37,0)
(4,24,0)
(47,22,0)
(5,47,0)
(24,6,0)
(18,9,0)
(9,18,0)
(30,23,0)
(0,29,0)
(11,42,0)
(51,33,0)
(6,24,0)
(43,5,0)
(26,7,0)
(12,10,0)
(37,42,0)
(7,26,0)
(23,47,0)
(34,37,0)
(47,29,0)
(12,34,1)
(6,37,1)
(9,31,1)
(23,30,1)
(2,11,1)
(43,50,1)
(40,37,1)
(10,12,1)
(51,21,1)
(40,28,1)
(39,43,1)
(38,5,1)
(33,47,1)
(24,45,1)
(11,37,1)
(24,47,1)
(50,47,1)
(28,19,1)
(5,47,1)
(20,27,1)
(49,47,1)
(19,37,1)
(46,37,1)
(18,9,1)
(31,40,1)
(4,15,1)
(5,39,1)
(1,33,1)
(2,5,1)
(46,8,1)
(11,3,1)
(36,18,1)
(45,4,1)
(48,50,1)
(34,49,1)
(37,26,1)
(47,22,1)
(15,36,1)
(21,48,1)
(3,46,1)
(8,10,1)
(49,25,1)
(25,17,1)
(26,7,1)
(26,23,1)
(30,38,1)
(13,6,1)
(33,51,1)
(22,20,1)
(43,1,1)
(23,47,1)
(34,37,1)
(6,24,1)
(17,13,1)
(36,40,1)
(6,24,2)
(46,5,2)
(51,50,2)
(28,5,2)
(23,5,2)
(5,47,2)
(40,37,2)
(8,5,2)
(33,50,2)
(34,5,2)
(6,5,2)
(24,47,2)
(3,5,2)
(9,40,2)
(1,33,2)
(18,40,2)
(48,50,2)
(46,37,2)
(37,5,2)
(45,5,2)
(21,50,2)
(33,47,2)
(10,5,2)
(11,5,2)
(49,47,2)
(17,5,2)
(31,40,2)
(24,5,2)
(37,26,2)
(47,22,2)
(26,7,2)
(15,5,2)
(38,5,2)
(34,49,2)
(11,37,2)
(30,5,2)
(12,5,2)
(26,5,2)
(25,5,2)
(18,9,2)
(13,5,2)
(26,23,2)
(49,5,2)
(6,37,2)
(19,5,2)
(4,5,2)
(1,50,2)
(40,5,2)
(34,37,2)
(23,47,2)
(36,5,2)
-----------------------------------
(0,data)
(1,fscanf(stdin, "%d", &data)
(2,RET)
(3,dataBuffer)
(4,data)
(5,data < 100)
(6,memset(dataBuffer, \\\'A\\\', data-1)
(7,char *)
(8,dataBuffer)
(9,-1)
(10,dataBuffer[data-1] = \\\'\\\\0\\\')
(11,free(dataBuffer)
(12,\\\'\\\\0\\\')
(13,dataBuffer)
(14,dataBuffer)
(15,\\\'A\\\')
(16,if(globalReturnsTrue()
(17,data)
(18,exit(-1)
(19,dataBuffer)
(20,1)
(21,"%d")
(22,-1)
(23,malloc(data)
(24,data-1)
(25,1)
(26,(char *)
(27,data)
(28,NULL)
(29,)
(30,data)
(31,1)
(32,if (data < 100)
(33,&data)
(34,dataBuffer[data-1])
(35,)
(36,dataBuffer)
(37,* dataBuffer = (char *)
(38,dataBuffer)
(39,100)
(40,dataBuffer == NULL)
(41,if (dataBuffer == NULL)
(42,)
(43,data)
(44,)
(45,1)
(46,printLine(dataBuffer)
(47,data = -1)
(48,stdin)
(49,data-1)
(50,globalReturnsTrue()
(51,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^