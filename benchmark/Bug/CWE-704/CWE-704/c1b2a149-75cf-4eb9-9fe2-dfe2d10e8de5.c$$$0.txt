-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType myStruct)
{
    short data = myStruct.structFirst;
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
65,66
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,7,9,13,15,19,20,24,25,29,31,32,36,38,41,43,47,49,54,56,60,62,63,66,67,72,75,76,77,81,83,87,89
-----computeFrom-----
22,23
22,24
45,46
45,47
64,65
64,66
69,70
69,71
73,74
73,75
-----guardedBy-----
24,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType myStruct){    short data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67b_badSink(CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType myStruct)
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67b_badSink
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType myStruct
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType
CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType
myStruct
myStruct
{    short data = myStruct.structFirst;    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data = myStruct.structFirst;
short data = myStruct.structFirst;
short
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(9,11,0)
(20,26,0)
(30,3,0)
(34,2,0)
(20,3,0)
(2,3,0)
(43,3,0)
(17,1,0)
(42,14,0)
(15,38,0)
(26,15,0)
(14,26,0)
(22,29,0)
(29,17,0)
(13,14,0)
(24,23,0)
(39,32,0)
(11,12,0)
(43,26,0)
(32,26,0)
(16,1,0)
(12,35,0)
(23,17,0)
(14,30,0)
(5,2,0)
(14,42,0)
(15,26,0)
(31,30,0)
(44,42,0)
(0,17,0)
(15,29,0)
(10,42,0)
(48,34,0)
(8,3,0)
(26,3,0)
(6,1,0)
(37,43,0)
(49,26,0)
(2,34,0)
(46,2,0)
(21,34,0)
(25,32,0)
(12,11,0)
(38,15,0)
(18,17,0)
(0,19,0)
(4,0,0)
(34,17,0)
(42,17,0)
(17,0,0)
(36,23,0)
(27,20,0)
(2,26,0)
(40,3,0)
(29,15,0)
(47,0,0)
(34,48,1)
(46,32,1)
(12,11,1)
(7,20,1)
(21,5,1)
(5,46,1)
(4,18,1)
(23,24,1)
(2,26,1)
(43,37,1)
(31,14,1)
(20,26,1)
(25,26,1)
(14,26,1)
(29,22,1)
(7,23,1)
(0,47,1)
(14,42,1)
(47,4,1)
(29,17,1)
(44,13,1)
(27,43,1)
(13,2,1)
(42,10,1)
(24,36,1)
(34,17,1)
(11,9,1)
(0,19,1)
(9,32,1)
(17,0,1)
(2,34,1)
(42,17,1)
(23,17,1)
(32,26,1)
(22,49,1)
(36,17,1)
(43,26,1)
(30,31,1)
(26,15,1)
(15,38,1)
(46,12,1)
(15,29,1)
(32,39,1)
(49,23,1)
(48,21,1)
(37,30,1)
(39,25,1)
(20,27,1)
(10,44,1)
(14,42,2)
(22,23,2)
(42,17,2)
(15,23,2)
(29,23,2)
(42,23,2)
(32,26,2)
(34,23,2)
(26,15,2)
(21,23,2)
(14,26,2)
(17,0,2)
(13,23,2)
(12,32,2)
(0,19,2)
(29,17,2)
(14,23,2)
(20,26,2)
(31,23,2)
(39,23,2)
(11,32,2)
(2,34,2)
(44,23,2)
(25,23,2)
(46,23,2)
(27,23,2)
(49,23,2)
(9,32,2)
(10,23,2)
(15,29,2)
(20,23,2)
(43,23,2)
(43,26,2)
(5,23,2)
(15,38,2)
(48,23,2)
(26,23,2)
(2,26,2)
(34,17,2)
(30,23,2)
(23,17,2)
(37,23,2)
(32,23,2)
(2,23,2)
(12,11,2)
-----------------------------------
(0,myStruct.structFirst)
(1,)
(2,memset(dataBuffer, \'A\', data-1)
(3,)
(4,myStruct)
(5,\'A\')
(6,data)
(7,RET)
(8,if (dataBuffer == NULL)
(9,1)
(10,1)
(11,-1)
(12,exit(-1)
(13,dataBuffer)
(14,dataBuffer[data-1])
(15,(char *)
(16,if (data < 100)
(17,data = myStruct.structFirst)
(18,data)
(19,CWE194_Unexpected_Sign_Extension__listen_socket_malloc_67_structType myStruct)
(20,free(dataBuffer)
(21,data)
(22,data)
(23,data < 100)
(24,100)
(25,dataBuffer)
(26,* dataBuffer = (char *)
(27,dataBuffer)
(28,memset(dataBuffer, 'A', data-1)
(29,malloc(data)
(30,dataBuffer[data-1] = '\\\\0')
(31,\'\\\\0\')
(32,dataBuffer == NULL)
(33,'A')
(34,data-1)
(35,)
(36,data)
(37,dataBuffer)
(38,char *)
(39,NULL)
(40,dataBuffer)
(41,'\\\\0')
(42,data-1)
(43,printLine(dataBuffer)
(44,data)
(45,dataBuffer[data-1] = \'\\\\0\')
(46,dataBuffer)
(47,structFirst)
(48,1)
(49,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^