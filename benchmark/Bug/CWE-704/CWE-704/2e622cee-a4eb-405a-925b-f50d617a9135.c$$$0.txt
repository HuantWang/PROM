-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_12_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Use a random value that could be less than 0 */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a positive integer less than &InitialDataSize&*/
        data = 100-1;
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
37,38
37,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,38,39,43,44,48,50,51,55,57,60,62,66,68,73,75,79,81,82,85,86,91,94,95,96,100,102,106,108
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
37,38
37,39
41,42
41,43
64,65
64,66
83,84
83,85
88,89
88,90
92,93
92,94
-----guardedBy-----
43,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__rand_malloc_12_bad(){    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__rand_malloc_12_bad()
CWE194_Unexpected_Sign_Extension__rand_malloc_12_bad
{    short data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }    else    {        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Use a random value that could be less than 0 */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a positive integer less than &InitialDataSize&*/        data = 100-1;    }
data = 100-1;
data = 100-1
data
data
100-1
100
1
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(19,36,0)
(48,21,0)
(14,47,0)
(27,30,0)
(9,5,0)
(31,30,0)
(47,24,0)
(49,31,0)
(5,33,0)
(7,17,0)
(45,13,0)
(58,30,0)
(23,57,0)
(17,13,0)
(11,3,0)
(15,44,0)
(43,11,0)
(3,11,0)
(57,9,0)
(36,3,0)
(17,30,0)
(2,36,0)
(20,17,0)
(13,3,0)
(40,22,0)
(51,44,0)
(32,5,0)
(38,44,0)
(6,60,0)
(41,31,0)
(5,47,0)
(1,4,0)
(13,17,0)
(13,5,0)
(2,53,0)
(36,2,0)
(57,31,0)
(39,3,0)
(42,15,0)
(41,30,0)
(3,29,0)
(57,23,0)
(26,22,0)
(46,44,0)
(22,5,0)
(53,30,0)
(9,3,0)
(4,31,0)
(54,36,0)
(12,9,0)
(0,13,0)
(47,14,0)
(25,53,0)
(10,11,0)
(56,31,0)
(17,31,0)
(31,57,0)
(9,57,0)
(59,49,0)
(49,30,0)
(35,15,0)
(8,4,0)
(36,5,0)
(18,2,0)
(24,47,0)
(21,6,0)
(52,41,0)
(2,31,0)
(47,5,0)
(6,21,0)
(22,3,0)
(57,23,1)
(40,5,1)
(32,50,1)
(8,31,1)
(56,22,1)
(25,2,1)
(49,59,1)
(42,35,1)
(19,54,1)
(41,52,1)
(43,10,1)
(36,3,1)
(6,21,1)
(31,57,1)
(50,15,1)
(4,31,1)
(54,18,1)
(48,4,1)
(18,17,1)
(39,50,1)
(52,49,1)
(12,56,1)
(45,7,1)
(3,11,1)
(49,31,1)
(22,5,1)
(36,19,1)
(13,5,1)
(9,5,1)
(17,31,1)
(13,0,1)
(53,25,1)
(47,24,1)
(22,3,1)
(20,6,1)
(2,36,1)
(7,20,1)
(34,41,1)
(47,14,1)
(26,40,1)
(34,22,1)
(59,53,1)
(17,13,1)
(2,31,1)
(11,43,1)
(10,39,1)
(21,48,1)
(40,3,1)
(14,32,1)
(41,31,1)
(13,3,1)
(15,42,1)
(22,26,1)
(4,1,1)
(5,47,1)
(36,5,1)
(0,45,1)
(9,12,1)
(1,8,1)
(57,9,1)
(20,4,1)
(9,3,1)
(9,5,2)
(47,50,2)
(57,9,2)
(54,22,2)
(32,50,2)
(2,31,2)
(22,3,2)
(12,22,2)
(4,22,2)
(6,21,2)
(57,23,2)
(9,3,2)
(17,13,2)
(9,22,2)
(8,22,2)
(49,31,2)
(19,22,2)
(22,5,2)
(36,22,2)
(52,22,2)
(13,3,2)
(18,22,2)
(3,11,2)
(11,50,2)
(4,31,2)
(49,22,2)
(6,4,2)
(48,4,2)
(39,50,2)
(21,4,2)
(41,31,2)
(1,22,2)
(2,22,2)
(36,5,2)
(56,22,2)
(59,22,2)
(5,50,2)
(5,47,2)
(13,5,2)
(53,22,2)
(0,22,2)
(47,24,2)
(57,22,2)
(31,22,2)
(10,50,2)
(41,22,2)
(14,50,2)
(17,22,2)
(25,22,2)
(31,57,2)
(13,22,2)
(36,3,2)
(17,31,2)
(45,22,2)
(7,22,2)
(20,22,2)
(3,50,2)
(43,50,2)
(47,14,2)
(2,36,2)
-----------------------------------
(0,1)
(1,NULL)
(2,dataBuffer[data-1])
(3,data = 100-1)
(4,dataBuffer == NULL)
(5,data = (short)
(6,exit(-1)
(7,\'A\')
(8,dataBuffer)
(9,malloc(data)
(10,100)
(11,100-1)
(12,data)
(13,data-1)
(14,RAND32()
(15,data = 0)
(16,'A')
(17,memset(dataBuffer, \'A\', data-1)
(18,dataBuffer)
(19,1)
(20,dataBuffer)
(21,-1)
(22,data < 100)
(23,char *)
(24,short)
(25,\'\\\\0\')
(26,100)
(27,if (dataBuffer == NULL)
(28,memset(dataBuffer, 'A', data-1)
(29,)
(30,)
(31,* dataBuffer = (char *)
(32,data)
(33,)
(34,RET)
(35,data)
(36,data-1)
(37,'\\\\0')
(38,data)
(39,data)
(40,data)
(41,free(dataBuffer)
(42,0)
(43,1)
(44,)
(45,data)
(46,if (data < 100)
(47,(short)
(48,1)
(49,printLine(dataBuffer)
(50,globalReturnsTrueOrFalse()
(51,if(globalReturnsTrueOrFalse()
(52,dataBuffer)
(53,dataBuffer[data-1] = \'\\\\0\')
(54,data)
(55,dataBuffer[data-1] = '\\\\0')
(56,dataBuffer)
(57,(char *)
(58,dataBuffer)
(59,dataBuffer)
(60,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^