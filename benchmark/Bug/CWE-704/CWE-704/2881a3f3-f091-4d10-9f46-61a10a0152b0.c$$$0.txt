-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    short * dataPtr = (short *)dataVoidPtr;
    /* dereference dataPtr into data */
    short data = (*dataPtr);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
49,51
51,52
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
72,76
73,74
75,76
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,46,50,52,55,57,61,63,68,70,74,76,77,80,81,86,89,90,91,95,97,101,103
-----computeFrom-----
36,37
36,38
59,60
59,61
78,79
78,80
83,84
83,85
87,88
87,89
-----guardedBy-----
38,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE194_Unexpected_Sign_Extension__negative_malloc_64b_badSink(void * dataVoidPtr)
CWE194_Unexpected_Sign_Extension__negative_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
short * dataPtr = (short *)dataVoidPtr;
short * dataPtr = (short *)dataVoidPtr;
short
* dataPtr = (short *)dataVoidPtr
*
dataPtr
= (short *)dataVoidPtr
(short *)dataVoidPtr
short *
short
*
*
dataVoidPtr
dataVoidPtr
short data = (*dataPtr);
short data = (*dataPtr);
short
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(2,51,0)
(13,5,0)
(50,52,0)
(0,29,0)
(30,41,0)
(38,41,0)
(11,17,0)
(27,43,0)
(17,0,0)
(41,38,0)
(39,43,0)
(43,27,0)
(3,33,0)
(9,41,0)
(4,23,0)
(52,16,0)
(54,29,0)
(23,1,0)
(7,1,0)
(2,1,0)
(42,39,0)
(43,36,0)
(41,0,0)
(37,38,0)
(48,7,0)
(5,23,0)
(10,50,0)
(25,2,0)
(31,51,0)
(46,51,0)
(0,42,0)
(38,1,0)
(32,29,0)
(6,43,0)
(7,48,0)
(44,1,0)
(5,0,0)
(26,29,0)
(8,1,0)
(43,39,0)
(23,33,0)
(24,44,0)
(12,42,0)
(21,44,0)
(38,51,0)
(20,0,0)
(15,20,0)
(53,8,0)
(1,51,0)
(39,29,0)
(8,51,0)
(52,50,0)
(47,1,0)
(40,39,0)
(1,7,0)
(33,51,0)
(35,38,0)
(22,17,0)
(19,5,0)
(23,5,0)
(28,0,0)
(20,7,0)
(42,0,0)
(7,20,0)
(18,17,1)
(25,33,1)
(37,44,1)
(8,53,1)
(38,41,1)
(41,0,1)
(11,0,1)
(22,11,1)
(8,1,1)
(28,39,1)
(17,0,1)
(23,5,1)
(12,28,1)
(47,17,1)
(2,1,1)
(1,7,1)
(38,1,1)
(21,1,1)
(39,43,1)
(37,52,1)
(5,13,1)
(10,44,1)
(53,2,1)
(43,27,1)
(43,36,1)
(19,4,1)
(4,38,1)
(30,35,1)
(20,15,1)
(6,40,1)
(41,9,1)
(50,10,1)
(23,1,1)
(7,48,1)
(0,42,1)
(15,47,1)
(5,0,1)
(3,23,1)
(42,39,1)
(43,6,1)
(20,0,1)
(7,20,1)
(44,24,1)
(44,1,1)
(17,22,1)
(9,30,1)
(52,50,1)
(2,25,1)
(13,19,1)
(33,3,1)
(42,12,1)
(35,37,1)
(18,8,1)
(24,21,1)
(44,17,2)
(53,17,2)
(50,44,2)
(41,17,2)
(19,17,2)
(23,17,2)
(35,17,2)
(8,17,2)
(3,17,2)
(2,1,2)
(21,17,2)
(33,17,2)
(43,36,2)
(30,17,2)
(13,17,2)
(17,0,2)
(8,1,2)
(47,17,2)
(5,0,2)
(15,17,2)
(1,7,2)
(38,41,2)
(20,0,2)
(7,48,2)
(52,44,2)
(5,17,2)
(2,17,2)
(23,1,2)
(0,42,2)
(25,17,2)
(1,17,2)
(38,1,2)
(23,5,2)
(24,17,2)
(9,17,2)
(37,17,2)
(10,44,2)
(4,17,2)
(44,1,2)
(41,0,2)
(38,17,2)
(52,50,2)
(7,17,2)
(43,27,2)
(7,20,2)
(20,17,2)
(39,43,2)
(42,39,2)
-----------------------------------
(0,data = (*dataPtr)
(1,* dataBuffer = (char *)
(2,printLine(dataBuffer)
(3,'\\\\0')
(4,dataBuffer)
(5,data-1)
(6,dataVoidPtr)
(7,(char *)
(8,free(dataBuffer)
(9,1)
(10,1)
(11,data)
(12,dataPtr)
(13,1)
(14,\'\\\\0\')
(15,data)
(16,)
(17,data < 100)
(18,RET)
(19,data)
(20,malloc(data)
(21,dataBuffer)
(22,100)
(23,dataBuffer[data-1])
(24,NULL)
(25,dataBuffer)
(26,data)
(27,short *)
(28,data)
(29,)
(30,data)
(31,dataBuffer)
(32,dataPtr)
(33,dataBuffer[data-1] = \'\\\\0\')
(34,dataBuffer[data-1] = '\\\\0')
(35,\'A\')
(36,void * dataVoidPtr)
(37,dataBuffer)
(38,memset(dataBuffer, 'A', data-1)
(39,* dataPtr = (short *)
(40,dataPtr)
(41,data-1)
(42,*dataPtr)
(43,(short *)
(44,dataBuffer == NULL)
(45,memset(dataBuffer, \'A\', data-1)
(46,if (dataBuffer == NULL)
(47,dataBuffer)
(48,char *)
(49,'A')
(50,-1)
(51,)
(52,exit(-1)
(53,dataBuffer)
(54,if (data < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^