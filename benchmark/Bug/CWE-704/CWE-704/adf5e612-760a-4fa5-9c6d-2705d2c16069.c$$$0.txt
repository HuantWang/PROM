-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_01_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,30,31,35,37,38,42,44,47,49,53,55,60,62,66,68,69,72,73,78,81,82,83,87,89,93,95
-----computeFrom-----
12,13
12,14
28,29
28,30
51,52
51,53
70,71
70,72
75,76
75,77
79,80
79,81
-----guardedBy-----
30,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_01_bad(){    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_01_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__fscanf_malloc_01_bad
{    int data;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(43,21,0)
(22,31,0)
(37,20,0)
(23,38,0)
(40,19,0)
(11,37,0)
(38,23,0)
(34,9,0)
(35,21,0)
(10,45,0)
(32,19,0)
(12,44,0)
(17,24,0)
(20,1,0)
(28,23,0)
(33,31,0)
(4,23,0)
(38,29,0)
(29,38,0)
(28,19,0)
(4,9,0)
(47,9,0)
(31,33,0)
(3,28,0)
(6,19,0)
(38,44,0)
(30,39,0)
(23,19,0)
(24,19,0)
(13,26,0)
(43,39,0)
(4,24,0)
(41,39,0)
(21,33,0)
(5,33,0)
(48,27,0)
(36,16,0)
(45,23,0)
(26,23,0)
(15,27,0)
(45,19,0)
(9,33,0)
(14,26,0)
(9,4,0)
(33,39,0)
(42,43,0)
(8,4,0)
(27,6,0)
(27,33,0)
(18,23,0)
(46,6,0)
(6,23,0)
(2,6,0)
(44,33,0)
(21,43,0)
(20,37,0)
(44,38,0)
(7,16,0)
(6,27,0)
(16,33,0)
(0,43,0)
(6,23,1)
(3,45,1)
(8,6,1)
(22,5,1)
(7,43,1)
(14,23,1)
(47,8,1)
(9,34,1)
(25,16,1)
(27,33,1)
(38,29,1)
(46,2,1)
(16,33,1)
(48,15,1)
(2,26,1)
(36,7,1)
(43,21,1)
(21,33,1)
(17,4,1)
(11,26,1)
(12,18,1)
(28,3,1)
(26,23,1)
(6,27,1)
(44,12,1)
(24,17,1)
(42,0,1)
(13,14,1)
(0,33,1)
(4,9,1)
(26,13,1)
(10,24,1)
(44,33,1)
(2,20,1)
(35,42,1)
(34,47,1)
(18,16,1)
(27,48,1)
(37,11,1)
(31,22,1)
(9,33,1)
(4,23,1)
(21,35,1)
(28,23,1)
(38,44,1)
(20,37,1)
(16,36,1)
(25,28,1)
(33,31,1)
(45,10,1)
(45,23,1)
(15,46,1)
(23,38,1)
(24,16,2)
(4,9,2)
(9,16,2)
(27,16,2)
(38,29,2)
(14,16,2)
(33,31,2)
(38,16,2)
(43,21,2)
(17,16,2)
(6,23,2)
(12,16,2)
(28,16,2)
(10,16,2)
(8,16,2)
(13,16,2)
(20,37,2)
(38,44,2)
(23,38,2)
(21,33,2)
(16,33,2)
(37,26,2)
(4,16,2)
(27,33,2)
(44,16,2)
(18,16,2)
(15,16,2)
(3,16,2)
(9,33,2)
(2,16,2)
(11,26,2)
(45,16,2)
(26,16,2)
(28,23,2)
(4,23,2)
(45,23,2)
(46,16,2)
(48,16,2)
(34,16,2)
(6,16,2)
(47,16,2)
(20,26,2)
(6,27,2)
(23,16,2)
(26,23,2)
(44,33,2)
-----------------------------------
(0,stdin)
(1,)
(2,dataBuffer)
(3,dataBuffer)
(4,dataBuffer[data-1])
(5,data)
(6,memset(dataBuffer, \\\'A\\\', data-1)
(7,data)
(8,dataBuffer)
(9,data-1)
(10,dataBuffer)
(11,1)
(12,data)
(13,NULL)
(14,dataBuffer)
(15,data)
(16,data < 100)
(17,\\\'\\\\0\\\')
(18,dataBuffer)
(19,)
(20,exit(-1)
(21,&data)
(22,1)
(23,* dataBuffer = (char *)
(24,dataBuffer[data-1] = \\\'\\\\0\\\')
(25,RET)
(26,dataBuffer == NULL)
(27,data-1)
(28,free(dataBuffer)
(29,char *)
(30,if (data < 100)
(31,-1)
(32,if (dataBuffer == NULL)
(33,data = -1)
(34,1)
(35,data)
(36,100)
(37,-1)
(38,(char *)
(39,)
(40,dataBuffer)
(41,data)
(42,"%d")
(43,fscanf(stdin, "%d", &data)
(44,malloc(data)
(45,printLine(dataBuffer)
(46,\\\'A\\\')
(47,data)
(48,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^