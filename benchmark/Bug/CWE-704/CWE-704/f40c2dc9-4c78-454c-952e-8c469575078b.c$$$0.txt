-----label-----
1
-----code-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_16_bad()
{
    short data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FLAW: Use a negative number */
        data = -1;
        break;
    }
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,
             * the sign extension could result in a very large number */
            strncpy(dest, source, data);
            dest[data] = '\0'; /* strncpy() does not always NULL terminate */
        }
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,29,31,33,36,38,40,42,46,48,49,51,52,57,59,60,61,65,66,71,73,75,77,82,84,85,89,91
-----computeFrom-----
12,13
12,14
20,21
20,22
50,51
50,52
54,55
54,56
58,59
58,60
63,64
63,65
79,80
79,81
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE194_Unexpected_Sign_Extension__negative_strncpy_16_bad(){    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
void
CWE194_Unexpected_Sign_Extension__negative_strncpy_16_bad()
CWE194_Unexpected_Sign_Extension__negative_strncpy_16_bad
{    short data;    /* Initialize data */    data = 0;    while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }    {        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FLAW: Use a negative number */        data = -1;        break;    }
1
{        /* FLAW: Use a negative number */        data = -1;        break;    }
data = -1;
data = -1
data
data
-1
1
break;
{        char source[100];        char dest[100] = "";        memset(source, 'A', 100-1);        source[100-1] = '\0';        if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }        printLine(dest);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
memset(source, 'A', 100-1);
memset(source, 'A', 100-1)
memset
memset
source
source
'A'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
if (data < 100)        {            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
data < 100
data
data
100
{            /* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,             * the sign extension could result in a very large number */            strncpy(dest, source, data);            dest[data] = '\0'; /* strncpy() does not always NULL terminate */        }
strncpy(dest, source, data);
strncpy(dest, source, data)
strncpy
strncpy
dest
dest
source
source
data
data
dest[data] = '\0';
dest[data] = '\0'
dest[data]
dest
dest
data
data
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(6,24,0)
(15,18,0)
(28,40,0)
(23,24,0)
(36,16,0)
(45,36,0)
(5,16,0)
(47,16,0)
(37,13,0)
(39,47,0)
(24,43,0)
(43,31,0)
(3,16,0)
(25,16,0)
(24,35,0)
(21,25,0)
(2,10,0)
(10,44,0)
(48,30,0)
(10,18,0)
(35,4,0)
(17,18,0)
(9,47,0)
(10,43,0)
(30,36,0)
(35,41,0)
(14,40,0)
(18,16,0)
(25,18,0)
(30,13,0)
(20,16,0)
(16,31,0)
(7,10,0)
(1,43,0)
(40,0,0)
(40,18,0)
(13,30,0)
(41,35,0)
(38,41,0)
(47,29,0)
(40,35,0)
(42,29,0)
(10,35,0)
(32,4,0)
(29,47,0)
(26,43,0)
(19,31,0)
(12,29,0)
(33,13,0)
(11,35,0)
(40,43,0)
(22,31,0)
(0,44,0)
(8,10,0)
(27,0,0)
(24,35,1)
(9,18,1)
(42,12,1)
(10,35,1)
(35,41,1)
(10,18,1)
(40,35,1)
(48,47,1)
(7,2,1)
(6,36,1)
(37,48,1)
(40,18,1)
(10,43,1)
(2,8,1)
(24,43,1)
(30,13,1)
(39,9,1)
(10,7,1)
(23,6,1)
(24,23,1)
(26,1,1)
(8,24,1)
(43,26,1)
(0,27,1)
(18,17,1)
(27,40,1)
(14,28,1)
(17,15,1)
(21,0,1)
(28,10,1)
(40,43,1)
(11,46,1)
(36,45,1)
(12,39,1)
(25,21,1)
(40,14,1)
(45,30,1)
(46,43,1)
(47,29,1)
(15,32,1)
(25,18,1)
(32,35,1)
(29,42,1)
(33,37,1)
(41,38,1)
(15,46,1)
(13,33,1)
(38,11,1)
(21,24,1)
(34,25,1)
(35,46,2)
(47,29,2)
(40,24,2)
(28,24,2)
(32,46,2)
(10,18,2)
(10,35,2)
(8,24,2)
(40,18,2)
(0,24,2)
(41,46,2)
(25,18,2)
(14,24,2)
(10,24,2)
(30,13,2)
(7,24,2)
(10,43,2)
(27,24,2)
(11,46,2)
(40,35,2)
(24,43,2)
(35,41,2)
(24,35,2)
(38,46,2)
(40,43,2)
(2,24,2)
-----------------------------------
(0,dest[data] = \\\'\\\\0\\\')
(1,data)
(2,source)
(3,source)
(4,)
(5,if (data < 100)
(6,data)
(7,data)
(8,dest)
(9,source)
(10,strncpy(dest, source, data)
(11,data)
(12,100)
(13,100-1)
(14,data)
(15,dest)
(16,)
(17,"")
(18,dest[100] = "")
(19,data)
(20,dest)
(21,dest)
(22,while(1)
(23,100)
(24,data < 100)
(25,printLine(dest)
(26,0)
(27,\\\'\\\\0\\\')
(28,dest)
(29,100-1)
(30,source[100-1])
(31,)
(32,break;)
(33,1)
(34,RET)
(35,data = -1)
(36,source[100-1] = \\\'\\\\0\\\')
(37,100)
(38,1)
(39,\\\'A\\\')
(40,dest[data])
(41,-1)
(42,1)
(43,data = 0)
(44,)
(45,\\\'\\\\0\\\')
(46,1)
(47,memset(source, \\\'A\\\', 100-1)
(48,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^