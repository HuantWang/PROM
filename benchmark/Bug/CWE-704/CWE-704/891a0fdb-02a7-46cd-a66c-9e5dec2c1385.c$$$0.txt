-----label-----
1
-----code-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_17_bad()
{
    int i;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    /* Assume we want to allocate a relatively small buffer */
    if (data < 100)
    {
        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,
         * the conversion will cause malloc() to allocate a very large amount of data or fail */
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        /* Do something with dataBuffer */
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
48,51
48,52
48,53
48,54
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,13,15,19,21,26,27,30,31,34,39,42,46,47,51,53,54,58,60,63,65,69,71,76,78,82,84,85,88,89,94,97,98,99,103,105,109,111
-----computeFrom-----
17,18
17,19
24,25
24,26
28,29
28,30
37,38
37,39
44,45
44,46
67,68
67,69
86,87
86,88
91,92
91,93
95,96
95,97
-----guardedBy-----
46,97
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_17_bad(){    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
void
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_17_bad()
CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_17_bad
{    int i;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    /* Assume we want to allocate a relatively small buffer */    if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }}
int i;
int i;
int
i
i
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if (data < 100)    {        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
data < 100
data
data
100
{        /* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,         * the conversion will cause malloc() to allocate a very large amount of data or fail */        char * dataBuffer = (char *)malloc(data);        if (dataBuffer == NULL) {exit(-1);}        /* Do something with dataBuffer */        memset(dataBuffer, 'A', data-1);        dataBuffer[data-1] = '\0';        printLine(dataBuffer);        free(dataBuffer);    }
char * dataBuffer = (char *)malloc(data);
char * dataBuffer = (char *)malloc(data);
char
* dataBuffer = (char *)malloc(data)
*
dataBuffer
= (char *)malloc(data)
(char *)malloc(data)
char *
char
*
*
malloc(data)
malloc
malloc
data
data
if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', data-1);
memset(dataBuffer, 'A', data-1)
memset
memset
dataBuffer
dataBuffer
'A'
data-1
data
data
1
dataBuffer[data-1] = '\0';
dataBuffer[data-1] = '\0'
dataBuffer[data-1]
dataBuffer
dataBuffer
data-1
data
data
1
'\0'
printLine(dataBuffer);
printLine(dataBuffer)
printLine
printLine
dataBuffer
dataBuffer
free(dataBuffer);
free(dataBuffer)
free
free
dataBuffer
dataBuffer
-----joern-----
(12,14,0)
(57,13,0)
(20,11,0)
(23,32,0)
(3,23,0)
(60,16,0)
(32,46,0)
(38,19,0)
(30,9,0)
(13,32,0)
(7,51,0)
(9,30,0)
(42,54,0)
(1,9,0)
(56,57,0)
(1,14,0)
(39,48,0)
(24,19,0)
(4,41,0)
(21,60,0)
(40,18,0)
(15,16,0)
(57,9,0)
(13,18,0)
(14,1,0)
(14,0,0)
(22,48,0)
(46,35,0)
(54,28,0)
(54,42,0)
(53,19,0)
(8,13,0)
(13,57,0)
(51,18,0)
(29,42,0)
(45,16,0)
(26,22,0)
(23,18,0)
(22,46,0)
(14,32,0)
(61,13,0)
(41,9,0)
(50,11,0)
(5,15,0)
(22,9,0)
(52,32,0)
(9,6,0)
(48,39,0)
(44,16,0)
(47,9,0)
(46,22,0)
(17,1,0)
(57,48,0)
(27,0,0)
(32,18,0)
(33,18,0)
(41,48,0)
(51,32,0)
(11,32,0)
(49,1,0)
(48,19,0)
(10,41,0)
(0,18,0)
(35,46,0)
(2,48,0)
(1,48,0)
(59,57,0)
(36,60,0)
(46,32,0)
(43,39,0)
(25,19,0)
(30,47,1)
(29,11,1)
(22,48,1)
(23,32,1)
(43,2,1)
(13,57,1)
(10,60,1)
(36,21,1)
(15,16,1)
(46,22,1)
(1,48,1)
(17,49,1)
(56,59,1)
(60,36,1)
(15,5,1)
(61,11,1)
(44,48,1)
(61,54,1)
(57,9,1)
(50,20,1)
(42,29,1)
(14,32,1)
(39,43,1)
(49,12,1)
(55,23,1)
(57,48,1)
(45,44,1)
(1,17,1)
(52,41,1)
(5,9,1)
(26,52,1)
(0,27,1)
(14,1,1)
(59,8,1)
(8,61,1)
(46,35,1)
(41,48,1)
(27,14,1)
(60,16,1)
(57,56,1)
(13,32,1)
(20,32,1)
(7,0,1)
(16,45,1)
(22,9,1)
(54,42,1)
(23,3,1)
(51,7,1)
(9,30,1)
(48,39,1)
(12,13,1)
(51,32,1)
(1,9,1)
(32,46,1)
(3,51,1)
(41,9,1)
(22,26,1)
(21,15,1)
(11,32,1)
(21,16,1)
(55,41,1)
(4,10,1)
(11,50,1)
(47,60,1)
(41,4,1)
(5,60,2)
(26,41,2)
(23,32,2)
(46,35,2)
(9,30,2)
(14,32,2)
(20,41,2)
(1,9,2)
(9,60,2)
(36,60,2)
(32,41,2)
(30,60,2)
(22,9,2)
(46,22,2)
(14,1,2)
(60,16,2)
(1,41,2)
(21,60,2)
(15,60,2)
(0,41,2)
(13,32,2)
(47,60,2)
(22,48,2)
(7,41,2)
(27,41,2)
(12,41,2)
(54,11,2)
(13,41,2)
(61,41,2)
(46,41,2)
(17,41,2)
(13,57,2)
(49,41,2)
(51,32,2)
(41,48,2)
(1,48,2)
(48,39,2)
(11,32,2)
(11,41,2)
(23,41,2)
(52,41,2)
(56,41,2)
(14,41,2)
(22,41,2)
(54,42,2)
(60,60,2)
(59,41,2)
(29,11,2)
(42,11,2)
(57,41,2)
(50,41,2)
(3,41,2)
(41,9,2)
(8,41,2)
(32,46,2)
(57,9,2)
(57,48,2)
(15,16,2)
(51,41,2)
-----------------------------------
(0,dataBuffer[data-1] = '\\\\0')
(1,data-1)
(2,data)
(3,dataBuffer)
(4,100)
(5,i)
(6,)
(7,dataBuffer)
(8,\'A\')
(9,data = RAND32()
(10,data)
(11,dataBuffer == NULL)
(12,dataBuffer)
(13,memset(dataBuffer, \'A\', data-1)
(14,dataBuffer[data-1])
(15,i++)
(16,i = 0)
(17,1)
(18,)
(19,)
(20,dataBuffer)
(21,i)
(22,malloc(data)
(23,free(dataBuffer)
(24,for(i = 0; i < 1; i++)
(25,data)
(26,data)
(27,\'\\\\0\')
(28,)
(29,1)
(30,RAND32()
(31,'\\\\0')
(32,* dataBuffer = (char *)
(33,dataBuffer)
(34,'A')
(35,char *)
(36,1)
(37,memset(dataBuffer, 'A', data-1)
(38,i)
(39,-1)
(40,if (dataBuffer == NULL)
(41,data < 100)
(42,-1)
(43,1)
(44,i)
(45,0)
(46,(char *)
(47,data)
(48,data = -1)
(49,data)
(50,NULL)
(51,printLine(dataBuffer)
(52,dataBuffer)
(53,if (data < 100)
(54,exit(-1)
(55,RET)
(56,1)
(57,data-1)
(58,dataBuffer[data-1] = \'\\\\0\')
(59,data)
(60,i < 1)
(61,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^