-----label-----
1
-----code-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* FLAW: Use a number larger than SHRT_MAX */
        data = SHRT_MAX + 5;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */
        char charData = (char)data;
        printHexCharLine(charData);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
32,33
33,34
33,35
34,35
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
46,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,31,35,36,37,41,43,47,48,50,54,56
-----computeFrom-----
12,13
12,14
23,24
23,25
26,27
26,28
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE197_Numeric_Truncation_Error__int_large_to_char_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
void
CWE197_Numeric_Truncation_Error__int_large_to_char_15_bad()
CWE197_Numeric_Truncation_Error__int_large_to_char_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a number larger than SHRT_MAX */        data = SHRT_MAX + 5;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = SHRT_MAX + 5;
data = SHRT_MAX + 5
data
data
SHRT_MAX + 5
SHRT_MAX
SHRT_MAX
5
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        /* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */        char charData = (char)data;        printHexCharLine(charData);    }
char charData = (char)data;
char charData = (char)data;
char
charData = (char)data
charData
= (char)data
(char)data
char
char

data
data
printHexCharLine(charData);
printHexCharLine(charData)
printHexCharLine
printHexCharLine
charData
charData
-----joern-----
(17,0,0)
(10,16,0)
(22,12,0)
(26,3,0)
(25,26,0)
(23,16,0)
(19,29,0)
(3,26,0)
(27,8,0)
(7,20,0)
(6,29,0)
(26,10,0)
(2,23,0)
(24,16,0)
(28,10,0)
(18,16,0)
(29,10,0)
(26,25,0)
(20,0,0)
(10,29,0)
(8,0,0)
(9,0,0)
(13,27,0)
(11,25,0)
(1,16,0)
(15,26,0)
(21,8,0)
(25,20,0)
(26,8,0)
(12,25,0)
(12,20,0)
(8,27,0)
(4,16,0)
(12,22,1)
(27,13,1)
(5,12,1)
(11,4,1)
(23,2,1)
(26,10,1)
(25,26,1)
(12,25,1)
(8,27,1)
(29,19,1)
(26,15,1)
(4,10,1)
(2,14,1)
(10,29,1)
(14,8,1)
(15,11,1)
(22,25,1)
(19,6,1)
(26,3,1)
(6,28,1)
(13,21,1)
(1,23,1)
(11,1,1)
(28,14,1)
(26,8,1)
(4,14,2)
(26,3,2)
(6,14,2)
(8,27,2)
(23,14,2)
(10,29,2)
(28,14,2)
(26,8,2)
(29,14,2)
(26,10,2)
(2,14,2)
(19,14,2)
(25,26,2)
(12,25,2)
(1,14,2)
(10,14,2)
-----------------------------------
(0,)
(1,break;)
(2,"Benign, fixed string")
(3,char)
(4,break;)
(5,RET)
(6,SHRT_MAX)
(7,charData)
(8,data = -1)
(9,switch(6)
(10,data = SHRT_MAX + 5)
(11,charData)
(12,printHexCharLine(charData)
(13,1)
(14,6)
(15,data)
(16,)
(17,data)
(18,case 6:)
(19,5)
(20,)
(21,data)
(22,charData)
(23,printLine("Benign, fixed string")
(24,default:)
(25,charData = (char)
(26,(char)
(27,-1)
(28,data)
(29,SHRT_MAX + 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^