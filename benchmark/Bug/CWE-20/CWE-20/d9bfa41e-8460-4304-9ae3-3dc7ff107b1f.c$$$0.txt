-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_struct_13_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
75,76
76,77
78,79
78,80
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
90,91
90,92
91,92
91,93
92,93
92,94
93,94
95,96
99,100
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
110,111
111,112
112,113
112,114
113,114
115,116
116,117
116,118
117,118
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,62,64,69,70,73,74,77,84,86,87,88,94,96,97,98,102,104,108,109,114,118,119
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
67,68
67,69
71,72
71,73
80,81
80,82
90,91
90,92
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_struct_13_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_struct_13_bad()
CWE416_Use_After_Free__malloc_free_struct_13_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i].intOne = 1;                data[i].intTwo = 2;            }
data[i].intOne = 1;
data[i].intOne = 1
data[i].intOne
data[i]
data
data
i
i
intOne
1
data[i].intTwo = 2;
data[i].intTwo = 2
data[i].intTwo
data[i]
data
data
i
i
intTwo
2
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(55,18,0)
(25,51,0)
(65,19,0)
(37,11,0)
(23,43,0)
(31,58,0)
(2,42,0)
(0,58,0)
(33,5,0)
(7,39,0)
(32,58,0)
(24,32,0)
(21,29,0)
(30,17,0)
(14,27,0)
(0,52,0)
(43,34,0)
(57,50,0)
(51,46,0)
(7,16,0)
(3,18,0)
(35,48,0)
(42,46,0)
(61,5,0)
(51,3,0)
(58,7,0)
(15,43,0)
(58,52,0)
(39,7,0)
(22,30,0)
(45,46,0)
(49,29,0)
(3,51,0)
(18,48,0)
(16,7,0)
(32,43,0)
(30,22,0)
(51,58,0)
(63,32,0)
(64,52,0)
(29,58,0)
(13,35,0)
(53,38,0)
(59,52,0)
(32,41,0)
(16,5,0)
(4,11,0)
(44,22,0)
(41,32,0)
(50,46,0)
(54,3,0)
(10,59,0)
(40,61,0)
(36,0,0)
(62,51,0)
(8,41,0)
(56,34,0)
(6,59,0)
(1,50,0)
(5,16,0)
(11,46,0)
(5,61,0)
(28,34,0)
(27,35,0)
(27,50,0)
(9,34,0)
(41,8,0)
(7,58,0)
(26,38,0)
(60,19,0)
(8,47,0)
(50,27,0)
(50,58,0)
(12,46,0)
(0,36,1)
(29,49,1)
(37,4,1)
(50,57,1)
(25,35,1)
(50,58,1)
(57,1,1)
(44,29,1)
(22,44,1)
(21,58,1)
(42,46,1)
(32,43,1)
(54,51,1)
(62,25,1)
(38,26,1)
(65,60,1)
(12,45,1)
(32,58,1)
(7,39,1)
(4,46,1)
(43,23,1)
(14,50,1)
(46,12,1)
(24,19,1)
(51,62,1)
(1,11,1)
(60,0,1)
(42,2,1)
(45,30,1)
(35,13,1)
(30,22,1)
(36,11,1)
(29,58,1)
(20,19,1)
(13,27,1)
(16,5,1)
(27,50,1)
(63,24,1)
(33,31,1)
(20,8,1)
(19,65,1)
(3,51,1)
(51,46,1)
(4,42,1)
(0,58,1)
(51,58,1)
(45,29,1)
(32,63,1)
(8,41,1)
(40,33,1)
(5,61,1)
(58,7,1)
(60,38,1)
(53,43,1)
(27,14,1)
(26,53,1)
(3,54,1)
(7,16,1)
(11,37,1)
(50,46,1)
(61,40,1)
(11,46,1)
(41,32,1)
(18,55,1)
(49,21,1)
(2,18,1)
(31,38,1)
(23,15,1)
(55,3,1)
(7,39,2)
(27,50,2)
(63,19,2)
(40,38,2)
(16,38,2)
(5,38,2)
(46,38,2)
(55,11,2)
(61,38,2)
(51,46,2)
(32,19,2)
(42,46,2)
(24,19,2)
(3,11,2)
(45,38,2)
(37,11,2)
(2,11,2)
(36,38,2)
(33,38,2)
(18,11,2)
(51,58,2)
(11,46,2)
(25,11,2)
(32,58,2)
(42,11,2)
(14,11,2)
(21,38,2)
(7,38,2)
(41,32,2)
(62,11,2)
(1,11,2)
(50,46,2)
(50,58,2)
(8,19,2)
(22,29,2)
(58,7,2)
(7,16,2)
(16,5,2)
(0,58,2)
(11,11,2)
(27,11,2)
(49,38,2)
(57,11,2)
(29,58,2)
(44,29,2)
(8,41,2)
(3,51,2)
(32,43,2)
(37,38,2)
(11,38,2)
(30,22,2)
(13,11,2)
(4,11,2)
(0,38,2)
(30,29,2)
(50,11,2)
(12,38,2)
(41,19,2)
(51,11,2)
(5,61,2)
(29,38,2)
(54,11,2)
(4,38,2)
(58,38,2)
(31,38,2)
(35,11,2)
-----------------------------------
(0,free(data)
(1,data)
(2,i)
(3,data[i].intTwo)
(4,i)
(5,100*sizeof(twoIntsStruct)
(6,for(i = 0; i < 100; i++)
(7,(twoIntsStruct *)
(8,printStructLine(&data[0])
(9,data)
(10,i)
(11,i < 100)
(12,0)
(13,1)
(14,intOne)
(15,data)
(16,malloc(100*sizeof(twoIntsStruct)
(17,)
(18,data[i].intTwo = 2)
(19,GLOBAL_CONST_FIVE==5)
(20,RET)
(21,data)
(22,-1)
(23,NULL)
(24,data)
(25,data)
(26,5)
(27,data[i].intOne)
(28,if(GLOBAL_CONST_FIVE==5)
(29,data == NULL)
(30,exit(-1)
(31,data)
(32,data[0])
(33,100)
(34,)
(35,data[i].intOne = 1)
(36,data)
(37,100)
(38,GLOBAL_CONST_FIVE==5)
(39,twoIntsStruct *)
(40,twoIntsStruct)
(41,&data[0])
(42,i++)
(43,data = NULL)
(44,1)
(45,i)
(46,i = 0)
(47,)
(48,)
(49,NULL)
(50,data[i])
(51,data[i])
(52,)
(53,GLOBAL_CONST_FIVE)
(54,intTwo)
(55,2)
(56,if(GLOBAL_CONST_FIVE==5)
(57,i)
(58,data = (twoIntsStruct *)
(59,)
(60,GLOBAL_CONST_FIVE)
(61,sizeof(twoIntsStruct)
(62,i)
(63,0)
(64,if (data == NULL)
(65,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^