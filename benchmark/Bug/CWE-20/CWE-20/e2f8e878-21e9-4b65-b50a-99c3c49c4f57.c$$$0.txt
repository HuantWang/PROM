-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,24,27,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
22,23
22,24
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_11_bad()
CWE190_Integer_Overflow__int_rand_square_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,4,0)
(2,13,0)
(16,12,0)
(21,16,0)
(12,16,0)
(9,13,0)
(16,9,0)
(20,5,0)
(19,16,0)
(16,23,0)
(3,13,0)
(8,0,0)
(5,0,0)
(5,12,0)
(14,23,0)
(7,13,0)
(15,12,0)
(12,0,0)
(17,9,0)
(22,23,0)
(18,9,0)
(23,1,0)
(23,14,0)
(11,6,1)
(9,17,1)
(11,5,1)
(19,21,1)
(5,12,1)
(6,23,1)
(10,9,1)
(16,9,1)
(5,20,1)
(16,19,1)
(20,12,1)
(21,15,1)
(12,16,1)
(17,18,1)
(23,14,1)
(14,22,1)
(16,23,1)
(22,10,1)
(15,6,1)
(6,10,1)
(12,6,2)
(16,6,2)
(23,14,2)
(16,9,2)
(16,23,2)
(15,6,2)
(21,6,2)
(23,10,2)
(14,10,2)
(5,12,2)
(19,6,2)
(5,6,2)
(20,6,2)
(12,16,2)
(22,10,2)
-----------------------------------
(0,)
(1,)
(2,data)
(3,if(globalReturnsTrue()
(4,)
(5,printIntLine(result)
(6,globalReturnsTrue()
(7,if(globalReturnsTrue()
(8,result)
(9,data = 0)
(10,globalReturnsTrue()
(11,RET)
(12,result = data * data)
(13,)
(14,RAND32()
(15,result)
(16,data * data)
(17,0)
(18,data)
(19,data)
(20,result)
(21,data)
(22,data)
(23,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^