-----label-----
1
-----code-----
static int * badSource(int * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,49
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(24,20,0)
(7,2,0)
(20,2,0)
(2,19,0)
(15,14,0)
(11,4,0)
(0,6,0)
(5,16,0)
(17,1,0)
(16,5,0)
(2,16,0)
(16,2,0)
(2,6,0)
(20,10,0)
(20,6,0)
(1,4,0)
(18,10,0)
(0,2,0)
(21,19,0)
(4,1,0)
(5,1,0)
(8,0,0)
(22,16,0)
(14,15,0)
(3,14,0)
(1,5,0)
(15,9,0)
(23,0,0)
(16,22,0)
(12,20,0)
(2,16,1)
(23,8,1)
(11,17,1)
(12,13,1)
(1,4,1)
(8,2,1)
(7,13,1)
(12,0,1)
(20,2,1)
(16,5,1)
(0,2,1)
(2,6,1)
(20,12,1)
(15,14,1)
(3,0,1)
(12,15,1)
(17,7,1)
(24,20,1)
(0,6,1)
(0,23,1)
(5,1,1)
(20,6,1)
(16,22,1)
(4,11,1)
(14,3,1)
(2,6,2)
(16,13,2)
(20,6,2)
(4,13,2)
(2,13,2)
(0,2,2)
(7,13,2)
(11,13,2)
(3,0,2)
(15,0,2)
(20,2,2)
(23,13,2)
(2,16,2)
(1,13,2)
(16,22,2)
(24,20,2)
(8,13,2)
(0,13,2)
(0,6,2)
(16,5,2)
(17,13,2)
(5,1,2)
(1,4,2)
(5,13,2)
(15,14,2)
(14,0,2)
-----------------------------------
(0,data == NULL)
(1,50*sizeof(int)
(2,data = (int *)
(3,1)
(4,sizeof(int)
(5,malloc(50*sizeof(int)
(6,int * data)
(7,data)
(8,data)
(9,)
(10,)
(11,int)
(12,data)
(13,badStatic)
(14,-1)
(15,exit(-1)
(16,(int *)
(17,50)
(18,if(badStatic)
(19,)
(20,return data;)
(21,if (data == NULL)
(22,int *)
(23,NULL)
(24,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^