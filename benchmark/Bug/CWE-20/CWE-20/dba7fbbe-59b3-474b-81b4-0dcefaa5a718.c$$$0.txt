-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
51,52
52,53
52,54
53,54
57,58
57,59
57,60
57,61
57,62
58,59
59,60
59,61
61,62
61,63
61,64
63,64
65,66
66,67
68,69
69,70
69,71
70,71
72,73
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
87,88
88,89
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
104,106
105,106
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,39,41,46,48,49,50,54,55,56,60,62,64,67,71,73,78,79,82,83,86,92,94,97,99,103,106,107,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
76,77
76,78
80,81
80,82
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(37,50,0)
(41,52,0)
(23,50,0)
(53,11,0)
(56,5,0)
(27,23,0)
(30,42,0)
(0,55,0)
(21,24,0)
(7,56,0)
(17,45,0)
(28,27,0)
(2,27,0)
(26,23,0)
(48,33,0)
(33,42,0)
(10,24,0)
(9,52,0)
(40,55,0)
(56,7,0)
(16,19,0)
(13,10,0)
(38,36,0)
(36,49,0)
(47,50,0)
(3,27,0)
(18,17,0)
(44,24,0)
(39,23,0)
(52,19,0)
(12,41,0)
(34,24,0)
(41,49,0)
(1,41,0)
(46,23,0)
(29,49,0)
(56,42,0)
(11,23,0)
(26,42,0)
(51,24,0)
(55,49,0)
(22,24,0)
(11,20,0)
(11,49,0)
(42,56,0)
(32,7,0)
(14,19,0)
(20,41,0)
(26,19,0)
(27,42,0)
(41,20,0)
(4,33,0)
(54,26,0)
(31,19,0)
(28,19,0)
(6,18,0)
(11,42,0)
(35,49,0)
(17,18,0)
(8,11,0)
(5,56,0)
(20,15,0)
(27,28,0)
(19,50,0)
(42,24,0)
(11,49,1)
(23,46,1)
(41,52,1)
(12,11,1)
(41,1,1)
(32,30,1)
(52,9,1)
(2,55,1)
(35,52,1)
(56,5,1)
(3,2,1)
(33,48,1)
(9,51,1)
(53,8,1)
(26,54,1)
(33,42,1)
(27,23,1)
(38,20,1)
(51,17,1)
(48,4,1)
(27,3,1)
(49,29,1)
(0,49,1)
(28,27,1)
(18,6,1)
(41,49,1)
(11,42,1)
(11,23,1)
(36,49,1)
(43,23,1)
(30,43,1)
(55,40,1)
(56,7,1)
(42,56,1)
(51,33,1)
(11,53,1)
(20,41,1)
(8,55,1)
(29,35,1)
(25,26,1)
(55,49,1)
(27,42,1)
(6,33,1)
(40,0,1)
(10,13,1)
(7,32,1)
(26,42,1)
(13,43,1)
(9,34,1)
(36,38,1)
(0,36,1)
(34,10,1)
(17,18,1)
(4,42,1)
(26,23,1)
(46,39,1)
(54,28,1)
(1,12,1)
(28,27,2)
(41,55,2)
(51,43,2)
(33,42,2)
(17,33,2)
(27,23,2)
(7,43,2)
(41,49,2)
(48,43,2)
(11,49,2)
(4,43,2)
(30,43,2)
(55,55,2)
(55,49,2)
(38,55,2)
(32,43,2)
(34,43,2)
(11,55,2)
(10,43,2)
(20,41,2)
(26,23,2)
(13,43,2)
(27,42,2)
(42,56,2)
(6,33,2)
(11,42,2)
(56,43,2)
(40,55,2)
(36,49,2)
(33,43,2)
(1,55,2)
(56,5,2)
(41,52,2)
(18,33,2)
(26,42,2)
(0,55,2)
(20,55,2)
(36,55,2)
(17,18,2)
(12,55,2)
(8,55,2)
(56,7,2)
(11,23,2)
(53,55,2)
(42,43,2)
-----------------------------------
(0,i)
(1,i)
(2,data)
(3,0)
(4,data)
(5,int *)
(6,1)
(7,malloc(10)
(8,data)
(9,source)
(10,printLine("Benign, fixed string")
(11,data[i])
(12,source)
(13,"Benign, fixed string")
(14,for (i = 0; i < 10; i++)
(15,)
(16,i)
(17,exit(-1)
(18,-1)
(19,)
(20,data[i] = source[i])
(21,if (data == NULL)
(22,default:)
(23,data = NULL)
(24,)
(25,RET)
(26,free(data)
(27,data[0])
(28,printIntLine(data[0])
(29,0)
(30,data)
(31,source)
(32,10)
(33,data == NULL)
(34,break;)
(35,i)
(36,i++)
(37,data)
(38,i)
(39,data)
(40,10)
(41,source[i])
(42,data = (int *)
(43,6)
(44,case 6:)
(45,)
(46,NULL)
(47,switch(6)
(48,NULL)
(49,i = 0)
(50,)
(51,break;)
(52,source[10] = {0})
(53,i)
(54,data)
(55,i < 10)
(56,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^