-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goto source;
source:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
65,68
65,69
66,67
68,69
68,70
69,70
71,72
73,74
75,76
75,77
76,77
76,78
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
85,88
85,89
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,36,38,42,44,47,49,50,54,56,60,62,67,70,72,74,77,79,80,84,86,87,88,92,94,96,98,102,104,106
-----computeFrom-----
23,24
23,25
58,59
58,60
68,69
68,70
75,76
75,77
76,77
76,78
-----guardedBy-----
60,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad()
CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
source
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(27,15,0)
(39,15,0)
(41,43,0)
(35,17,0)
(37,35,0)
(42,35,0)
(44,21,0)
(2,17,0)
(1,17,0)
(12,2,0)
(28,41,0)
(10,26,0)
(41,7,0)
(20,43,0)
(36,21,0)
(21,3,0)
(7,41,0)
(38,17,0)
(6,2,0)
(4,33,0)
(5,3,0)
(43,17,0)
(32,35,0)
(14,6,0)
(0,10,0)
(12,6,0)
(33,43,0)
(24,33,0)
(41,24,0)
(23,17,0)
(34,7,0)
(7,3,0)
(15,17,0)
(24,35,0)
(31,12,0)
(10,24,0)
(11,24,0)
(9,10,0)
(26,7,0)
(25,3,0)
(18,17,0)
(40,25,0)
(7,8,0)
(16,41,0)
(13,26,0)
(19,12,0)
(33,24,0)
(3,25,0)
(7,26,0)
(22,43,0)
(3,35,0)
(29,2,0)
(43,15,0)
(26,10,0)
(21,36,1)
(41,43,1)
(22,15,1)
(41,24,1)
(36,44,1)
(20,22,1)
(43,15,1)
(15,39,1)
(10,9,1)
(31,6,1)
(38,43,1)
(39,27,1)
(44,3,1)
(3,25,1)
(7,3,1)
(28,21,1)
(4,11,1)
(10,24,1)
(13,34,1)
(16,28,1)
(33,43,1)
(34,41,1)
(7,41,1)
(9,0,1)
(7,26,1)
(11,38,1)
(26,10,1)
(41,16,1)
(21,3,1)
(25,40,1)
(30,12,1)
(24,33,1)
(40,5,1)
(12,19,1)
(19,31,1)
(14,21,1)
(5,24,1)
(6,14,1)
(0,13,1)
(33,4,1)
(12,6,1)
(14,7,1)
(43,20,1)
(10,24,2)
(24,33,2)
(13,21,2)
(41,43,2)
(21,3,2)
(7,26,2)
(34,21,2)
(28,21,2)
(7,3,2)
(26,10,2)
(7,41,2)
(3,25,2)
(7,21,2)
(41,24,2)
(16,21,2)
(12,6,2)
(10,21,2)
(33,43,2)
(26,21,2)
(43,15,2)
(9,21,2)
(41,21,2)
(0,21,2)
-----------------------------------
(0,dataLen)
(1,source:)
(2,)
(3,* environment = GETENV(ENV_VARIABLE)
(4,data)
(5,environment)
(6,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(7,strncat(data+dataLen, environment, 100-dataLen-1)
(8,)
(9,1)
(10,dataLen-1)
(11,dataLen)
(12,EXECV(COMMAND_INT_PATH, args)
(13,100)
(14,args)
(15,dataBuffer[100] = COMMAND_ARG2)
(16,dataLen)
(17,)
(18,dataBuffer)
(19,args)
(20,dataBuffer)
(21,environment != NULL)
(22,data)
(23,data)
(24,dataLen = strlen(data)
(25,GETENV(ENV_VARIABLE)
(26,100-dataLen-1)
(27,dataBuffer)
(28,data)
(29,args)
(30,RET)
(31,COMMAND_INT_PATH)
(32,environment)
(33,strlen(data)
(34,environment)
(35,)
(36,NULL)
(37,if (environment != NULL)
(38,goto source;)
(39,COMMAND_ARG2)
(40,ENV_VARIABLE)
(41,data+dataLen)
(42,dataLen)
(43,data = dataBuffer)
(44,environment)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^