-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(staticFive==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, strlen(data), "%s", data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
79,84
80,81
82,83
84,85
84,86
85,86
87,88
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,86,88,89,91,95,97,101,103
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
SNPRINTF(dest, strlen(data), "%s", data);
SNPRINTF(dest, strlen(data), "%s", data)
SNPRINTF
SNPRINTF
dest
dest
strlen(data)
strlen
strlen
data
data
"%s"
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(51,16,0)
(48,28,0)
(22,16,0)
(3,30,0)
(9,39,0)
(31,3,0)
(16,28,0)
(9,3,0)
(26,38,0)
(24,4,0)
(16,3,0)
(47,30,0)
(36,21,0)
(4,3,0)
(7,37,0)
(29,9,0)
(14,26,0)
(14,4,0)
(20,37,0)
(25,33,0)
(50,30,0)
(10,16,0)
(31,47,0)
(6,15,0)
(19,9,0)
(35,30,0)
(0,10,0)
(49,40,0)
(33,25,0)
(3,4,0)
(16,47,0)
(28,47,0)
(5,44,0)
(32,16,0)
(17,47,0)
(45,36,0)
(41,44,0)
(12,25,0)
(27,38,0)
(1,28,0)
(16,10,0)
(40,3,0)
(52,34,0)
(38,26,0)
(9,37,0)
(37,9,0)
(23,15,0)
(11,31,0)
(4,24,0)
(8,25,0)
(13,26,0)
(43,3,0)
(40,47,0)
(26,14,0)
(46,45,0)
(34,39,0)
(33,34,0)
(33,3,0)
(36,45,0)
(44,3,0)
(2,33,0)
(4,14,0)
(10,3,0)
(42,30,0)
(16,3,1)
(2,9,1)
(22,32,1)
(10,0,1)
(20,7,1)
(41,3,1)
(14,26,1)
(46,44,1)
(27,13,1)
(37,20,1)
(15,23,1)
(44,3,1)
(16,10,1)
(9,3,1)
(3,4,1)
(11,16,1)
(10,3,1)
(34,52,1)
(18,40,1)
(12,2,1)
(25,8,1)
(16,22,1)
(1,48,1)
(31,11,1)
(44,5,1)
(19,29,1)
(0,51,1)
(29,15,1)
(26,38,1)
(45,46,1)
(36,45,1)
(32,10,1)
(48,15,1)
(16,28,1)
(33,25,1)
(31,3,1)
(38,27,1)
(52,33,1)
(28,1,1)
(40,49,1)
(4,14,1)
(48,34,1)
(49,31,1)
(8,12,1)
(7,19,1)
(9,37,1)
(13,43,1)
(23,6,1)
(5,41,1)
(6,44,1)
(4,24,1)
(51,28,1)
(40,3,1)
(33,3,1)
(6,36,1)
(9,15,2)
(33,25,2)
(16,10,2)
(14,26,2)
(40,3,2)
(33,3,2)
(7,15,2)
(31,3,2)
(46,44,2)
(37,15,2)
(29,15,2)
(9,3,2)
(36,44,2)
(34,15,2)
(33,15,2)
(44,3,2)
(10,3,2)
(26,38,2)
(3,4,2)
(2,15,2)
(52,15,2)
(4,14,2)
(25,15,2)
(12,15,2)
(16,28,2)
(9,37,2)
(45,44,2)
(16,3,2)
(20,15,2)
(8,15,2)
(19,15,2)
(36,45,2)
(4,24,2)
-----------------------------------
(0,data)
(1,"")
(2,data)
(3,data = (char *)
(4,(char *)
(5,NULL)
(6,staticFive)
(7,100)
(8,1)
(9,memset(data, \\\'A\\\', 100-1)
(10,strlen(data)
(11,data)
(12,100)
(13,100)
(14,malloc(100*sizeof(char)
(15,staticFive==5)
(16,SNPRINTF(dest, strlen(data)
(17,dest)
(18,RET)
(19,\\\'A\\\')
(20,1)
(21,)
(22,data)
(23,5)
(24,char *)
(25,100-1)
(26,100*sizeof(char)
(27,char)
(28,dest[50] = "")
(29,data)
(30,)
(31,printLine(data)
(32,"%s")
(33,data[100-1])
(34,data[100-1] = \\\'\\\\0\\\')
(35,data)
(36,exit(-1)
(37,100-1)
(38,sizeof(char)
(39,)
(40,free(data)
(41,data)
(42,if(staticFive==5)
(43,data)
(44,data == NULL)
(45,-1)
(46,1)
(47,)
(48,dest)
(49,data)
(50,if (data == NULL)
(51,dest)
(52,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^