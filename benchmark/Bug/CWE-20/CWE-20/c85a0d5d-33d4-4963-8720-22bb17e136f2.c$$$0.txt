-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fscanf_square_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
55,56
55,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,60,62,66,68
-----computeFrom-----
18,19
18,20
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_34_bad(){    int data;    CWE190_Integer_Overflow__int_fscanf_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_34_bad()
CWE190_Integer_Overflow__int_fscanf_square_34_bad
{    int data;    CWE190_Integer_Overflow__int_fscanf_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_square_34_unionType
CWE190_Integer_Overflow__int_fscanf_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,2,0)
(12,2,0)
(26,27,0)
(25,16,0)
(3,0,0)
(13,20,0)
(5,19,0)
(2,16,0)
(0,16,0)
(1,16,0)
(24,0,0)
(28,16,0)
(15,4,0)
(11,20,0)
(9,3,0)
(11,28,0)
(8,5,0)
(32,10,0)
(14,20,0)
(4,32,0)
(20,11,0)
(10,32,0)
(23,10,0)
(27,28,0)
(21,28,0)
(4,27,0)
(17,19,0)
(22,3,0)
(32,27,0)
(10,11,0)
(18,10,0)
(0,19,0)
(29,32,0)
(31,11,0)
(19,16,0)
(5,2,0)
(2,5,0)
(30,19,0)
(11,20,1)
(3,9,1)
(13,14,1)
(8,12,1)
(10,11,1)
(0,19,1)
(12,7,1)
(31,0,1)
(15,32,1)
(4,15,1)
(6,4,1)
(23,18,1)
(2,5,1)
(14,31,1)
(30,17,1)
(0,24,1)
(5,8,1)
(20,13,1)
(9,22,1)
(24,3,1)
(4,32,1)
(10,23,1)
(19,30,1)
(29,11,1)
(18,29,1)
(22,2,1)
(5,19,1)
(7,19,1)
(32,10,1)
(0,19,2)
(11,20,2)
(4,32,2)
(10,11,2)
(2,5,2)
(32,10,2)
(5,19,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,myUnion)
(2,fscanf(stdin, "%d", &data)
(3,myUnion.unionFirst)
(4,printIntLine(result)
(5,&data)
(6,RET)
(7,stdin)
(8,data)
(9,unionFirst)
(10,data * data)
(11,data = myUnion.unionSecond)
(12,"%d")
(13,unionSecond)
(14,myUnion)
(15,result)
(16,)
(17,data)
(18,data)
(19,data = 0)
(20,myUnion.unionSecond)
(21,data)
(22,myUnion)
(23,data)
(24,data)
(25,data)
(26,result)
(27,)
(28,)
(29,result)
(30,0)
(31,data)
(32,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^