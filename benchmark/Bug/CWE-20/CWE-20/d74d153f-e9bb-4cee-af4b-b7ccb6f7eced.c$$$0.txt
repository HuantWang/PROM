-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
69,71
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,68,70,73,74,78,81,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad(){    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad
{    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,22,0)
(19,16,0)
(22,16,0)
(3,26,0)
(21,16,0)
(41,15,0)
(23,26,0)
(26,3,0)
(34,7,0)
(35,8,0)
(28,11,0)
(3,22,0)
(15,1,0)
(1,29,0)
(2,28,0)
(24,0,0)
(17,7,0)
(16,0,0)
(8,16,0)
(8,24,0)
(39,6,0)
(22,3,0)
(32,31,0)
(27,25,0)
(9,13,0)
(36,24,0)
(6,28,0)
(22,24,0)
(14,24,0)
(33,11,0)
(40,22,0)
(1,15,0)
(7,16,0)
(12,14,0)
(20,6,0)
(31,27,0)
(25,27,0)
(7,28,0)
(27,31,0)
(22,14,0)
(27,28,0)
(37,0,0)
(22,28,0)
(7,36,0)
(8,28,0)
(10,3,0)
(38,24,0)
(28,27,0)
(36,7,0)
(5,13,0)
(30,0,0)
(22,14,1)
(1,15,1)
(31,32,1)
(39,20,1)
(15,41,1)
(7,16,1)
(9,5,1)
(6,39,1)
(7,34,1)
(8,28,1)
(27,25,1)
(20,28,1)
(36,7,1)
(32,2,1)
(26,23,1)
(22,3,1)
(40,18,1)
(3,26,1)
(22,28,1)
(12,1,1)
(17,22,1)
(4,8,1)
(28,27,1)
(34,17,1)
(14,12,1)
(8,16,1)
(27,31,1)
(23,10,1)
(22,16,1)
(21,19,1)
(12,6,1)
(35,36,1)
(8,35,1)
(12,13,1)
(16,21,1)
(7,28,1)
(2,13,1)
(6,28,1)
(10,40,1)
(18,14,1)
(13,9,1)
(41,6,1)
(5,16,1)
(6,13,2)
(15,6,2)
(1,6,2)
(22,16,2)
(22,28,2)
(7,28,2)
(8,28,2)
(36,7,2)
(28,27,2)
(27,13,2)
(27,31,2)
(1,15,2)
(41,6,2)
(22,3,2)
(32,13,2)
(22,14,2)
(27,25,2)
(31,13,2)
(8,16,2)
(7,16,2)
(28,13,2)
(39,13,2)
(6,28,2)
(20,13,2)
(2,13,2)
(3,26,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,data)
(3,10*sizeof(int)
(4,RET)
(5,STATIC_CONST_FIVE)
(6,data == NULL)
(7,data[0])
(8,free(data)
(9,5)
(10,10)
(11,)
(12,source)
(13,STATIC_CONST_FIVE==5)
(14,source[10] = {0})
(15,-1)
(16,data = NULL)
(17,data)
(18,data)
(19,data)
(20,data)
(21,NULL)
(22,memmove(data, source, 10*sizeof(int)
(23,int)
(24,)
(25,int *)
(26,sizeof(int)
(27,(int *)
(28,data = (int *)
(29,)
(30,data)
(31,malloc(10)
(32,10)
(33,if (data == NULL)
(34,0)
(35,data)
(36,printIntLine(data[0])
(37,if(STATIC_CONST_FIVE==5)
(38,source)
(39,NULL)
(40,source)
(41,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^