-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_bad()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType myUnion;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* wexecl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
34,38
34,39
34,40
34,41
35,36
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
73,75
74,75
74,76
74,77
74,78
74,79
74,80
74,81
74,82
74,83
74,84
74,85
74,86
74,87
74,88
75,76
76,77
76,78
77,78
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
101,102
104,105
105,106
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
138,139
140,141
140,142
141,142
141,143
142,143
142,144
142,145
142,146
143,144
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
154,155
156,157
157,158
158,159
160,161
162,163
164,165
165,166
165,167
166,167
168,169
168,170
168,171
168,172
168,173
169,170
171,172
173,174
173,175
174,175
174,176
176,177
178,179
179,180
179,181
180,181
182,183
184,185
184,186
185,186
186,187
186,188
189,190
190,191
190,192
191,192
191,193
193,194
197,198
197,199
198,199
198,200
199,200
199,201
200,201
202,203
204,205
204,206
205,206
208,209
210,211
211,212
211,213
212,213
212,214
213,214
215,216
215,217
216,217
218,219
218,220
219,220
221,222
222,223
222,224
226,227
227,228
227,229
228,229
230,231
230,232
230,233
231,232
233,234
236,237
236,238
237,238
239,240
240,241
241,242
241,243
242,243
243,244
246,247
247,248
247,249
248,249
250,251
250,252
250,253
251,252
253,254
256,257
256,258
257,258
259,260
260,261
261,262
261,263
262,263
263,264
267,268
267,269
268,269
268,270
269,270
271,272
273,274
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
282,284
283,284
286,287
288,289
288,290
289,290
290,291
290,292
292,293
292,294
292,295
295,296
296,297
296,298
297,298
300,301
301,302
301,303
301,304
301,305
301,306
301,307
302,303
304,305
306,307
308,309
310,311
312,313
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,37,39,43,45,48,50,51,55,57,60,64,66,70,72,78,81,83,85,87,91,93,95,99,102,103,107,112,113,115,121,122,123,126,128,133,134,137,139,144,146,150,152,155,159,161,163,167,170,172,175,177,181,183,187,188,192,194,195,196,201,203,206,207,209,214,217,220,223,224,225,229,232,234,235,238,244,245,249,252,254,255,258,264,265,266,270,272,277,279,284,285,287,291,293,294,298,299,303,305,307,309,311,313
-----computeFrom-----
29,30
29,31
76,77
76,78
89,90
89,91
109,110
109,111
117,118
117,119
130,131
130,132
141,142
141,143
165,166
165,167
179,180
179,181
184,185
184,186
190,191
190,192
191,192
191,193
198,199
198,200
199,200
199,201
204,205
204,206
211,212
211,213
215,216
215,217
218,219
218,220
227,228
227,229
241,242
241,243
247,248
247,249
261,262
261,263
268,269
268,270
281,282
281,283
-----guardedBy-----
270,279
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_bad(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_bad()
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_bad
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType
CWE78_OS_Command_Injection__wchar_t_connect_socket_execl_34_unionType
myUnion
myUnion
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(100,114,0)
(103,42,0)
(152,103,0)
(70,32,0)
(143,87,0)
(49,93,0)
(78,32,0)
(103,104,0)
(80,32,0)
(57,91,0)
(103,140,0)
(126,104,0)
(44,32,0)
(132,93,0)
(146,93,0)
(86,46,0)
(74,147,0)
(56,140,0)
(160,87,0)
(93,95,0)
(125,67,0)
(35,31,0)
(62,95,0)
(4,148,0)
(18,16,0)
(7,9,0)
(89,16,0)
(154,25,0)
(157,7,0)
(127,91,0)
(94,114,0)
(47,11,0)
(148,145,0)
(28,91,0)
(98,32,0)
(58,120,0)
(15,145,0)
(84,140,0)
(67,148,0)
(29,56,0)
(54,5,0)
(19,160,0)
(119,83,0)
(24,32,0)
(20,93,0)
(153,41,0)
(101,67,0)
(155,55,0)
(138,31,0)
(27,125,0)
(63,147,0)
(76,17,0)
(158,3,0)
(123,155,0)
(100,131,0)
(52,121,0)
(46,33,0)
(13,125,0)
(135,87,0)
(142,9,0)
(37,56,0)
(51,99,0)
(145,95,0)
(109,104,0)
(90,32,0)
(164,59,0)
(133,84,0)
(71,7,0)
(105,107,0)
(97,95,0)
(96,103,0)
(92,95,0)
(59,64,0)
(88,84,0)
(81,131,0)
(130,33,0)
(85,32,0)
(39,99,0)
(16,83,0)
(79,96,0)
(121,93,0)
(43,5,0)
(23,36,0)
(41,40,0)
(27,151,0)
(104,109,0)
(125,93,0)
(14,5,0)
(9,120,0)
(139,27,0)
(5,54,0)
(40,41,0)
(129,98,0)
(151,27,0)
(131,140,0)
(155,140,0)
(151,100,0)
(137,98,0)
(118,143,0)
(104,126,0)
(31,32,0)
(156,27,0)
(134,45,0)
(87,143,0)
(100,151,0)
(64,32,0)
(65,46,0)
(104,103,0)
(9,7,0)
(40,105,0)
(98,137,0)
(5,31,0)
(113,72,0)
(68,148,0)
(120,95,0)
(2,41,0)
(136,93,0)
(107,105,0)
(90,36,0)
(26,56,0)
(111,93,0)
(131,33,0)
(35,54,0)
(141,90,0)
(75,93,0)
(159,143,0)
(0,77,0)
(114,100,0)
(150,116,0)
(31,131,0)
(6,42,0)
(50,131,0)
(54,35,0)
(148,95,0)
(117,35,0)
(144,135,0)
(8,91,0)
(83,95,0)
(116,93,0)
(60,129,0)
(33,131,0)
(103,96,0)
(66,145,0)
(91,120,0)
(33,46,0)
(67,125,0)
(162,64,0)
(105,32,0)
(33,130,0)
(61,93,0)
(73,93,0)
(124,129,0)
(140,56,0)
(1,151,0)
(10,32,0)
(122,59,0)
(131,31,0)
(87,160,0)
(115,109,0)
(90,17,0)
(110,140,0)
(38,82,0)
(140,32,0)
(34,35,0)
(161,116,0)
(99,32,0)
(36,90,0)
(112,107,0)
(128,40,0)
(46,125,0)
(53,121,0)
(155,121,0)
(30,91,0)
(17,90,0)
(83,148,0)
(106,93,0)
(147,140,0)
(84,121,0)
(87,135,0)
(46,148,0)
(21,137,0)
(131,100,0)
(42,103,0)
(147,140,1)
(8,28,1)
(155,123,1)
(88,12,1)
(117,5,1)
(115,152,1)
(114,94,1)
(46,148,1)
(129,60,1)
(31,131,1)
(43,31,1)
(99,39,1)
(118,125,1)
(86,65,1)
(5,31,1)
(131,140,1)
(68,145,1)
(22,70,1)
(60,124,1)
(19,143,1)
(140,56,1)
(83,148,1)
(13,121,1)
(156,139,1)
(67,101,1)
(162,59,1)
(148,4,1)
(142,83,1)
(158,147,1)
(27,156,1)
(103,42,1)
(35,34,1)
(88,154,1)
(110,99,1)
(153,64,1)
(143,159,1)
(107,112,1)
(159,118,1)
(0,108,1)
(1,114,1)
(151,27,1)
(157,142,1)
(135,144,1)
(108,155,1)
(53,52,1)
(9,7,1)
(2,153,1)
(91,30,1)
(160,19,1)
(17,76,1)
(46,86,1)
(48,91,1)
(125,67,1)
(113,54,1)
(108,84,1)
(46,125,1)
(118,12,1)
(84,121,1)
(155,121,1)
(34,117,1)
(40,41,1)
(14,43,1)
(26,110,1)
(127,8,1)
(41,2,1)
(84,140,1)
(38,163,1)
(74,63,1)
(16,18,1)
(137,21,1)
(47,22,1)
(133,88,1)
(76,147,1)
(155,140,1)
(104,126,1)
(161,148,1)
(121,53,1)
(28,57,1)
(27,125,1)
(105,107,1)
(103,140,1)
(154,96,1)
(124,105,1)
(100,114,1)
(152,98,1)
(12,38,1)
(5,14,1)
(109,115,1)
(150,161,1)
(116,150,1)
(33,130,1)
(88,134,1)
(148,145,1)
(6,104,1)
(164,90,1)
(87,143,1)
(35,31,1)
(147,74,1)
(54,35,1)
(94,33,1)
(67,148,1)
(89,108,1)
(65,50,1)
(163,47,1)
(88,158,1)
(131,81,1)
(81,100,1)
(100,151,1)
(103,104,1)
(79,103,1)
(42,6,1)
(98,137,1)
(89,0,1)
(18,89,1)
(135,87,1)
(101,13,1)
(33,46,1)
(56,29,1)
(122,164,1)
(50,138,1)
(51,135,1)
(40,128,1)
(4,68,1)
(141,17,1)
(39,51,1)
(83,119,1)
(12,163,1)
(90,17,1)
(30,127,1)
(128,41,1)
(57,9,1)
(131,100,1)
(131,33,1)
(21,129,1)
(7,71,1)
(63,140,1)
(52,116,1)
(84,133,1)
(90,36,1)
(70,54,1)
(104,109,1)
(37,26,1)
(54,5,1)
(88,113,1)
(138,96,1)
(145,66,1)
(64,162,1)
(71,157,1)
(36,23,1)
(66,15,1)
(96,79,1)
(144,87,1)
(87,160,1)
(139,1,1)
(123,84,1)
(59,122,1)
(119,16,1)
(96,103,1)
(163,22,1)
(29,37,1)
(112,40,1)
(134,135,1)
(23,141,1)
(36,147,2)
(90,17,2)
(67,148,2)
(96,103,2)
(23,147,2)
(131,96,2)
(107,147,2)
(27,125,2)
(129,147,2)
(155,84,2)
(131,100,2)
(128,147,2)
(46,148,2)
(26,135,2)
(56,135,2)
(29,135,2)
(33,46,2)
(0,108,2)
(138,96,2)
(156,96,2)
(12,54,2)
(19,12,2)
(163,54,2)
(21,147,2)
(110,135,2)
(114,96,2)
(152,147,2)
(34,5,2)
(98,137,2)
(41,147,2)
(103,140,2)
(70,54,2)
(122,147,2)
(123,84,2)
(38,163,2)
(147,135,2)
(143,12,2)
(103,104,2)
(2,147,2)
(154,96,2)
(54,96,2)
(40,147,2)
(63,135,2)
(27,96,2)
(76,147,2)
(90,147,2)
(74,135,2)
(112,147,2)
(35,31,2)
(125,67,2)
(33,130,2)
(109,147,2)
(100,114,2)
(118,12,2)
(40,41,2)
(151,27,2)
(140,135,2)
(39,135,2)
(65,96,2)
(117,5,2)
(43,96,2)
(105,147,2)
(42,147,2)
(9,7,2)
(31,96,2)
(60,147,2)
(87,143,2)
(46,96,2)
(139,96,2)
(140,56,2)
(35,5,2)
(124,147,2)
(59,147,2)
(86,96,2)
(1,96,2)
(84,121,2)
(155,140,2)
(81,96,2)
(6,147,2)
(131,140,2)
(54,5,2)
(162,147,2)
(135,12,2)
(135,87,2)
(158,147,2)
(148,145,2)
(131,33,2)
(79,147,2)
(155,121,2)
(83,148,2)
(159,12,2)
(147,140,2)
(51,135,2)
(100,96,2)
(17,147,2)
(33,96,2)
(31,131,2)
(153,147,2)
(87,12,2)
(134,135,2)
(84,140,2)
(100,151,2)
(50,96,2)
(103,147,2)
(96,147,2)
(105,107,2)
(113,54,2)
(54,35,2)
(104,109,2)
(5,96,2)
(47,22,2)
(164,147,2)
(151,96,2)
(90,36,2)
(144,12,2)
(22,54,2)
(46,125,2)
(115,147,2)
(103,42,2)
(99,135,2)
(14,96,2)
(37,135,2)
(137,147,2)
(98,147,2)
(141,147,2)
(104,147,2)
(87,160,2)
(94,96,2)
(5,31,2)
(160,12,2)
(104,126,2)
(64,147,2)
-----------------------------------
(0,WSACleanup()
(1,100)
(2,sin_addr)
(3,)
(4,dataBuffer)
(5,recvResult == SOCKET_ERROR)
(6,service)
(7,myUnion.unionSecond)
(8,COMMAND_ARG1)
(9,* data = myUnion.unionSecond)
(10,if (replace)
(11,)
(12,0)
(13,dataLen)
(14,SOCKET_ERROR)
(15,dataBuffer)
(16,myUnion.unionFirst)
(17,&service)
(18,unionFirst)
(19,wsaData)
(20,wsaDataInit)
(21,TCP_PORT)
(22,replace)
(23,service)
(24,if (recvResult == SOCKET_ERROR || recvResult == 0)
(25,)
(26,AF_INET)
(27,dataLen - 1)
(28,COMMAND_INT_PATH)
(29,IPPROTO_TCP)
(30,NULL)
(31,recvResult = recv(connectSocket, (char *)
(32,)
(33,(char *)
(34,0)
(35,recvResult == 0)
(36,sizeof(service)
(37,SOCK_STREAM)
(38,'\\\\0')
(39,1)
(40,service.sin_addr.s_addr)
(41,service.sin_addr)
(42,sizeof(service)
(43,recvResult)
(44,if (connectSocket == INVALID_SOCKET)
(45,)
(46,data + dataLen)
(47,'\\\\0')
(48,RET)
(49,do)
(50,connectSocket)
(51,wsaDataInit)
(52,connectSocket)
(53,INVALID_SOCKET)
(54,recvResult == SOCKET_ERROR || recvResult == 0)
(55,)
(56,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(57,COMMAND_INT_PATH)
(58,data)
(59,service.sin_family)
(60,sin_port)
(61,if (wsaDataInit)
(62,data)
(63,connectSocket)
(64,service.sin_family = AF_INET)
(65,data)
(66,COMMAND_ARG2)
(67,wcslen(data)
(68,data)
(69,\'\\\\0\')
(70,\'\\\\0\')
(71,unionSecond)
(72,)
(73,service)
(74,INVALID_SOCKET)
(75,wsaData)
(76,service)
(77,)
(78,if (replace)
(79,SOCKET_ERROR)
(80,if (connect(connectSocket, (struct sockaddr*)
(81,0)
(82,)
(83,myUnion.unionFirst = data)
(84,connectSocket != INVALID_SOCKET)
(85,if (WSAStartup(MAKEWORD(2,2)
(86,dataLen)
(87,WSAStartup(MAKEWORD(2,2)
(88,connectSocket)
(89,myUnion)
(90,memset(&service, 0, sizeof(service)
(91,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(92,myUnion)
(93,)
(94,wchar_t)
(95,)
(96,connect(connectSocket, (struct sockaddr*)
(97,dataBuffer)
(98,service.sin_port = htons(TCP_PORT)
(99,wsaDataInit = 1)
(100,sizeof(wchar_t)
(101,data)
(102,\'\\\\0\')
(103,connect(connectSocket, (struct sockaddr*)
(104,(struct sockaddr*)
(105,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(106,if (connectSocket != INVALID_SOCKET)
(107,inet_addr(IP_ADDRESS)
(108,wsaDataInit)
(109,&service)
(110,connectSocket)
(111,connectSocket)
(112,IP_ADDRESS)
(113,break;)
(114,sizeof(wchar_t)
(115,service)
(116,wsaDataInit = 0)
(117,recvResult)
(118,2)
(119,data)
(120,)
(121,connectSocket = INVALID_SOCKET)
(122,sin_family)
(123,connectSocket)
(124,service)
(125,dataLen = wcslen(data)
(126,struct sockaddr*)
(127,COMMAND_ARG3)
(128,s_addr)
(129,service.sin_port)
(130,char *)
(131,recv(connectSocket, (char *)
(132,recvResult)
(133,INVALID_SOCKET)
(134,break;)
(135,WSAStartup(MAKEWORD(2,2)
(136,dataLen)
(137,htons(TCP_PORT)
(138,recvResult)
(139,dataLen)
(140,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(141,0)
(142,data)
(143,MAKEWORD(2,2)
(144,NO_ERROR)
(145,dataBuffer[100] = COMMAND_ARG2)
(146,replace)
(147,connectSocket == INVALID_SOCKET)
(148,data = dataBuffer)
(149,'\\\\0')
(150,0)
(151,100 - dataLen - 1)
(152,connectSocket)
(153,service)
(154,break;)
(155,CLOSE_SOCKET(connectSocket)
(156,1)
(157,myUnion)
(158,break;)
(159,2)
(160,&wsaData)
(161,wsaDataInit)
(162,AF_INET)
(163,replace)
(164,service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^