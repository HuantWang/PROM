-----label-----
1
-----code-----
static void badSink()
{
    char * data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData;
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
9,12
12,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
30,32
33,34
34,35
34,36
35,36
35,37
36,37
38,39
38,40
42,43
43,44
43,45
43,46
44,45
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,11,14,18,20,22,26,28,29,31,32,37,39,40,41,45,47,49,53,55,59,61
-----computeFrom-----
30,31
30,32
34,35
34,36
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char * data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData;    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
static void
badSink()
badSink
{    char * data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData;    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData;
char * data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData;
char
* data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData
*
data
= CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(16,8,0)
(5,9,0)
(17,11,0)
(25,16,0)
(26,25,0)
(21,26,0)
(28,8,0)
(9,16,0)
(0,11,0)
(24,11,0)
(14,22,0)
(20,22,0)
(7,3,0)
(6,16,0)
(22,16,0)
(11,8,0)
(3,16,0)
(27,5,0)
(23,21,0)
(15,26,0)
(22,11,0)
(26,21,0)
(12,24,0)
(3,11,0)
(24,16,0)
(1,9,0)
(13,9,0)
(9,5,0)
(2,5,0)
(19,21,0)
(10,25,0)
(14,20,1)
(2,27,1)
(1,13,1)
(0,17,1)
(13,11,1)
(23,19,1)
(9,5,1)
(20,25,1)
(25,10,1)
(19,15,1)
(22,11,1)
(3,11,1)
(4,24,1)
(11,0,1)
(24,11,1)
(10,26,1)
(12,3,1)
(21,23,1)
(15,9,1)
(22,14,1)
(24,12,1)
(7,22,1)
(27,1,1)
(5,2,1)
(26,21,1)
(3,7,1)
(22,11,2)
(9,5,2)
(26,21,2)
(3,11,2)
(24,11,2)
-----------------------------------
(0,CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData)
(1,'C')
(2,1)
(3,printLine(data)
(4,RET)
(5,100-1)
(6,source)
(7,data)
(8,)
(9,memset(source, 'C', 100-1)
(10,'\\\\0')
(11,* data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_badData)
(12,data)
(13,source)
(14,source)
(15,source)
(16,)
(17,data)
(18,memset(source, \'C\', 100-1)
(19,100)
(20,data)
(21,100-1)
(22,strcpy(data, source)
(23,1)
(24,free(data)
(25,source[100-1] = '\\\\0')
(26,source[100-1])
(27,100)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^