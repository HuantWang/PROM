-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad()
{
    if(1)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printLine((char *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid->charFirst);
            printLine((char *)structCharVoid->voidSecond);
            free(structCharVoid);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
28,29
28,30
29,30
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
52,54
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
71,72
72,73
72,74
72,75
72,76
73,74
75,76
75,77
76,77
79,80
81,82
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
96,97
97,98
98,99
98,100
99,100
102,103
103,104
103,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
115,116
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
125,127
126,127
126,128
128,129
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,7,13,15,16,21,23,26,30,31,35,37,42,44,49,50,53,55,57,61,64,66,69,70,74,77,78,80,85,91,92,100,101,104,105,106,107,111,114,116,119,120,124,127,129,132,133,137,139
-----computeFrom-----
33,34
33,35
46,47
46,48
87,88
87,89
93,94
93,95
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad(){    if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02_bad
{    if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
1
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);            free(structCharVoid);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memcpy
memcpy
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
free(structCharVoid);
free(structCharVoid)
free
free
structCharVoid
structCharVoid
-----joern-----
(66,33,0)
(51,14,0)
(59,67,0)
(60,0,0)
(40,11,0)
(52,25,0)
(64,33,0)
(4,59,0)
(2,40,0)
(46,51,0)
(71,48,0)
(6,2,0)
(2,47,0)
(19,47,0)
(23,21,0)
(38,7,0)
(59,4,0)
(17,31,0)
(16,11,0)
(22,67,0)
(18,40,0)
(69,12,0)
(7,53,0)
(42,63,0)
(55,2,0)
(14,40,0)
(45,62,0)
(43,72,0)
(47,19,0)
(16,40,0)
(70,11,0)
(8,63,0)
(53,34,0)
(27,72,0)
(42,0,0)
(33,38,0)
(41,38,0)
(33,64,0)
(9,23,0)
(67,59,0)
(34,53,0)
(71,0,0)
(51,49,0)
(72,40,0)
(36,61,0)
(37,67,0)
(48,71,0)
(25,5,0)
(10,21,0)
(24,71,0)
(31,19,0)
(65,18,0)
(32,47,0)
(23,40,0)
(5,25,0)
(18,42,0)
(71,24,0)
(3,24,0)
(49,51,0)
(66,11,0)
(62,48,0)
(42,18,0)
(38,40,0)
(0,42,0)
(40,23,0)
(14,51,0)
(33,66,0)
(12,40,0)
(30,10,0)
(53,7,0)
(67,7,0)
(38,33,0)
(47,2,0)
(7,11,0)
(47,11,0)
(62,40,0)
(39,16,0)
(59,50,0)
(15,62,0)
(19,31,0)
(12,7,0)
(68,38,0)
(57,18,0)
(21,23,0)
(51,46,0)
(67,40,0)
(4,11,0)
(23,9,0)
(49,11,0)
(0,71,0)
(20,14,0)
(5,44,0)
(48,62,0)
(50,59,0)
(1,12,0)
(58,14,0)
(11,35,0)
(63,11,0)
(21,10,0)
(26,40,0)
(31,40,0)
(29,11,0)
(54,53,0)
(38,41,1)
(3,48,1)
(39,66,1)
(66,33,1)
(53,34,1)
(49,51,1)
(15,45,1)
(68,49,1)
(2,55,1)
(6,4,1)
(12,40,1)
(4,59,1)
(55,6,1)
(2,40,1)
(12,69,1)
(19,31,1)
(1,72,1)
(63,8,1)
(27,40,1)
(10,30,1)
(25,52,1)
(32,2,1)
(22,7,1)
(30,26,1)
(18,57,1)
(21,10,1)
(72,43,1)
(71,24,1)
(37,22,1)
(42,18,1)
(7,53,1)
(62,15,1)
(45,18,1)
(59,50,1)
(14,40,1)
(23,21,1)
(67,37,1)
(17,32,1)
(48,62,1)
(41,68,1)
(0,71,1)
(67,40,1)
(26,56,1)
(54,12,1)
(43,27,1)
(62,40,1)
(51,46,1)
(71,48,1)
(13,56,1)
(47,2,1)
(1,5,1)
(38,40,1)
(57,65,1)
(69,1,1)
(59,67,1)
(14,58,1)
(33,38,1)
(24,3,1)
(8,42,1)
(72,40,1)
(42,0,1)
(65,47,1)
(0,60,1)
(18,40,1)
(53,54,1)
(16,39,1)
(20,63,1)
(67,7,1)
(13,16,1)
(38,7,1)
(52,72,1)
(33,64,1)
(51,14,1)
(58,20,1)
(31,40,1)
(60,71,1)
(23,9,1)
(16,40,1)
(31,17,1)
(47,19,1)
(5,25,1)
(40,23,1)
(59,50,2)
(1,56,2)
(67,7,2)
(2,56,2)
(7,56,2)
(31,56,2)
(38,56,2)
(18,56,2)
(66,33,2)
(59,56,2)
(22,56,2)
(48,62,2)
(24,56,2)
(69,56,2)
(53,34,2)
(10,56,2)
(18,40,2)
(0,56,2)
(32,56,2)
(43,56,2)
(68,56,2)
(17,56,2)
(33,56,2)
(57,56,2)
(21,56,2)
(71,48,2)
(19,31,2)
(65,56,2)
(53,56,2)
(72,40,2)
(41,56,2)
(33,38,2)
(21,10,2)
(71,56,2)
(25,72,2)
(54,56,2)
(20,56,2)
(38,40,2)
(40,23,2)
(7,53,2)
(49,51,2)
(6,56,2)
(71,24,2)
(14,56,2)
(67,40,2)
(14,40,2)
(15,56,2)
(23,56,2)
(48,56,2)
(19,56,2)
(62,40,2)
(40,56,2)
(55,56,2)
(16,40,2)
(2,40,2)
(51,56,2)
(72,56,2)
(37,56,2)
(33,64,2)
(16,56,2)
(12,40,2)
(59,67,2)
(67,56,2)
(3,56,2)
(49,56,2)
(0,71,2)
(47,19,2)
(47,2,2)
(42,0,2)
(8,56,2)
(5,25,2)
(4,59,2)
(23,21,2)
(26,56,2)
(27,56,2)
(51,14,2)
(58,56,2)
(5,72,2)
(47,56,2)
(60,56,2)
(23,9,2)
(4,56,2)
(39,56,2)
(12,56,2)
(30,56,2)
(63,56,2)
(51,46,2)
(38,7,2)
(42,18,2)
(62,56,2)
(45,56,2)
(31,40,2)
(66,56,2)
(42,56,2)
(52,72,2)
-----------------------------------
(0,(sizeof(structCharVoid->charFirst)
(1,structCharVoid)
(2,structCharVoid->charFirst)
(3,char)
(4,printLine((char *)
(5,exit(-1)
(6,structCharVoid)
(7,structCharVoid->voidSecond = (void *)
(8,\'\\\\0\')
(9,charVoid *)
(10,sizeof(charVoid)
(11,)
(12,structCharVoid->voidSecond)
(13,RET)
(14,structCharVoid->charFirst)
(15,charFirst)
(16,free(structCharVoid)
(17,structCharVoid)
(18,structCharVoid->charFirst)
(19,sizeof(*structCharVoid)
(20,structCharVoid)
(21,malloc(sizeof(charVoid)
(22,structCharVoid)
(23,(charVoid *)
(24,sizeof(char)
(25,-1)
(26,structCharVoid)
(27,structCharVoid)
(28,'\\\\0')
(29,if (structCharVoid == NULL)
(30,charVoid)
(31,*structCharVoid)
(32,SRC_STR)
(33,(char *)
(34,void *)
(35,)
(36,if(1)
(37,voidSecond)
(38,structCharVoid->voidSecond)
(39,structCharVoid)
(40,* structCharVoid = (charVoid *)
(41,voidSecond)
(42,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(43,NULL)
(44,)
(45,structCharVoid)
(46,char *)
(47,memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(48,sizeof(structCharVoid->charFirst)
(49,printLine((char *)
(50,char *)
(51,(char *)
(52,1)
(53,(void *)
(54,SRC_STR)
(55,charFirst)
(56,1)
(57,charFirst)
(58,charFirst)
(59,(char *)
(60,1)
(61,)
(62,structCharVoid->charFirst)
(63,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(64,char *)
(65,structCharVoid)
(66,printLine((char *)
(67,structCharVoid->voidSecond)
(68,structCharVoid)
(69,voidSecond)
(70,structCharVoid)
(71,sizeof(structCharVoid->charFirst)
(72,structCharVoid == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^