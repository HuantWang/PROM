-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,78,80,84,86
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_32_bad()
CWE190_Integer_Overflow__int_max_square_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,4,0)
(0,13,0)
(9,0,0)
(43,5,0)
(0,3,0)
(7,13,0)
(29,38,0)
(6,13,0)
(2,32,0)
(2,36,0)
(3,21,0)
(20,5,0)
(12,33,0)
(36,32,0)
(30,12,0)
(35,42,0)
(41,18,0)
(4,43,0)
(22,33,0)
(27,43,0)
(34,24,0)
(24,36,0)
(18,40,0)
(40,21,0)
(36,24,0)
(5,43,0)
(11,42,0)
(23,40,0)
(33,21,0)
(13,3,0)
(16,36,0)
(1,30,0)
(19,3,0)
(39,21,0)
(24,12,0)
(4,0,0)
(17,12,0)
(38,19,0)
(28,21,0)
(8,3,0)
(32,33,0)
(31,2,0)
(26,24,0)
(30,40,0)
(12,30,0)
(15,32,0)
(38,43,0)
(37,19,0)
(42,21,0)
(19,38,0)
(43,21,0)
(14,21,0)
(40,18,0)
(9,4,1)
(10,2,1)
(6,7,1)
(41,23,1)
(2,36,1)
(2,31,1)
(16,12,1)
(24,12,1)
(29,37,1)
(12,30,1)
(43,5,1)
(23,43,1)
(0,9,1)
(30,1,1)
(7,19,1)
(40,18,1)
(19,38,1)
(0,13,1)
(35,11,1)
(25,13,1)
(18,41,1)
(36,24,1)
(38,29,1)
(11,40,1)
(20,27,1)
(17,0,1)
(34,16,1)
(30,40,1)
(4,25,1)
(37,42,1)
(38,43,1)
(13,6,1)
(1,17,1)
(5,20,1)
(26,34,1)
(42,35,1)
(24,26,1)
(4,43,1)
(31,36,1)
(36,24,2)
(38,43,2)
(24,12,2)
(2,36,2)
(19,38,2)
(4,43,2)
(0,13,2)
(43,5,2)
(30,40,2)
(40,18,2)
(12,30,2)
-----------------------------------
(0,*dataPtr1 = data)
(1,dataPtr2)
(2,printIntLine(result)
(3,)
(4,*dataPtr1)
(5,&data)
(6,INT_MAX)
(7,data)
(8,data)
(9,data)
(10,RET)
(11,data)
(12,data = *dataPtr2)
(13,data = INT_MAX)
(14,dataPtr2)
(15,result)
(16,result)
(17,data)
(18,&data)
(19,data = *dataPtr1)
(20,data)
(21,)
(22,data)
(23,dataPtr2)
(24,data * data)
(25,dataPtr1)
(26,data)
(27,dataPtr1)
(28,dataPtr1)
(29,dataPtr1)
(30,*dataPtr2)
(31,result)
(32,)
(33,)
(34,data)
(35,0)
(36,result = data * data)
(37,data)
(38,*dataPtr1)
(39,data)
(40,*dataPtr2 = &data)
(41,data)
(42,data = 0)
(43,*dataPtr1 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^