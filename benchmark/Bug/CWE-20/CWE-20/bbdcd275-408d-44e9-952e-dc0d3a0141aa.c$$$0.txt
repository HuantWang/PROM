-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use an invalid index */
        data = 10;
    }
    if(staticReturnsTrue())
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
94,96
94,97
95,96
95,97
96,97
99,100
99,101
100,101
101,102
101,103
102,103
102,104
103,104
105,106
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
114,115
114,116
115,116
118,119
119,120
121,122
122,123
123,124
123,125
124,125
126,127
126,128
127,128
129,130
131,132
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,14,16,20,25,26,30,35,37,40,42,43,47,49,52,54,57,58,62,64,69,71,76,77,80,81,84,90,92,93,97,98,104,106,107,112,113,116,117,120,125,128,130,135,136,140,142
-----computeFrom-----
12,13
12,14
23,24
23,25
53,54
53,55
60,61
60,62
74,75
74,76
78,79
78,80
87,88
87,89
95,96
95,97
101,102
101,103
110,111
110,112
114,115
114,116
-----guardedBy-----
97,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
data = 10;
data = 10
data
data
10
if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(28,76,0)
(30,57,0)
(51,39,0)
(62,20,0)
(42,76,0)
(70,24,0)
(73,44,0)
(25,58,0)
(0,25,0)
(15,51,0)
(36,78,0)
(61,43,0)
(32,31,0)
(78,12,0)
(43,57,0)
(33,12,0)
(39,76,0)
(29,43,0)
(78,24,0)
(12,9,0)
(67,63,0)
(16,33,0)
(64,32,0)
(47,37,0)
(2,58,0)
(3,47,0)
(19,21,0)
(78,39,0)
(13,76,0)
(5,78,0)
(6,25,0)
(77,33,0)
(43,39,0)
(52,68,0)
(78,36,0)
(13,39,0)
(50,70,0)
(40,49,0)
(79,76,0)
(27,44,0)
(57,48,0)
(40,75,0)
(21,63,0)
(38,39,0)
(14,71,0)
(35,18,0)
(20,35,0)
(17,35,0)
(68,39,0)
(72,4,0)
(39,51,0)
(8,0,0)
(55,76,0)
(23,48,0)
(0,47,0)
(11,47,0)
(41,78,0)
(33,63,0)
(4,63,0)
(18,51,0)
(18,35,0)
(66,4,0)
(10,24,0)
(51,15,0)
(1,24,0)
(43,25,0)
(74,75,0)
(60,76,0)
(34,71,0)
(51,18,0)
(33,39,0)
(25,71,0)
(75,40,0)
(36,7,0)
(22,0,0)
(45,63,0)
(35,20,0)
(54,12,0)
(65,71,0)
(76,56,0)
(26,13,0)
(69,68,0)
(58,25,0)
(43,47,0)
(44,24,0)
(50,36,1)
(78,12,1)
(43,47,1)
(64,0,1)
(74,68,1)
(29,0,1)
(22,4,1)
(66,63,1)
(44,24,1)
(0,8,1)
(62,17,1)
(21,63,1)
(75,74,1)
(4,63,1)
(58,2,1)
(18,35,1)
(41,44,1)
(45,67,1)
(53,25,1)
(78,24,1)
(67,68,1)
(33,39,1)
(40,75,1)
(54,33,1)
(68,52,1)
(3,11,1)
(70,50,1)
(13,39,1)
(59,46,1)
(2,6,1)
(44,73,1)
(36,78,1)
(59,13,1)
(26,32,1)
(27,70,1)
(66,21,1)
(20,62,1)
(4,72,1)
(52,69,1)
(12,54,1)
(0,25,1)
(35,20,1)
(78,39,1)
(32,64,1)
(1,57,1)
(69,39,1)
(51,15,1)
(47,3,1)
(0,47,1)
(77,4,1)
(33,63,1)
(43,61,1)
(10,1,1)
(67,40,1)
(68,39,1)
(46,53,1)
(57,30,1)
(78,5,1)
(27,24,1)
(8,22,1)
(13,26,1)
(21,19,1)
(43,25,1)
(51,18,1)
(73,27,1)
(26,44,1)
(43,39,1)
(38,46,1)
(70,24,1)
(24,10,1)
(25,58,1)
(11,53,1)
(5,41,1)
(17,38,1)
(33,16,1)
(72,66,1)
(19,12,1)
(63,45,1)
(30,43,1)
(16,77,1)
(39,51,1)
(61,29,1)
(46,47,1)
(43,0,2)
(52,46,2)
(26,46,2)
(44,24,2)
(36,78,2)
(69,46,2)
(8,46,2)
(33,39,2)
(72,4,2)
(45,46,2)
(68,39,2)
(39,46,2)
(13,46,2)
(78,44,2)
(21,4,2)
(0,46,2)
(44,44,2)
(61,0,2)
(41,44,2)
(43,25,2)
(38,46,2)
(16,4,2)
(39,51,2)
(4,4,2)
(62,46,2)
(18,46,2)
(77,4,2)
(13,39,2)
(43,47,2)
(17,46,2)
(35,20,2)
(43,39,2)
(30,0,2)
(57,0,2)
(73,0,2)
(25,58,2)
(78,12,2)
(5,44,2)
(0,25,2)
(3,53,2)
(64,0,2)
(44,0,2)
(1,0,2)
(24,0,2)
(50,44,2)
(78,24,2)
(29,0,2)
(27,44,2)
(75,68,2)
(36,44,2)
(0,47,2)
(12,4,2)
(10,0,2)
(51,18,2)
(66,4,2)
(20,46,2)
(33,4,2)
(68,46,2)
(32,0,2)
(4,46,2)
(67,46,2)
(73,44,2)
(54,4,2)
(35,46,2)
(70,24,2)
(74,68,2)
(19,4,2)
(27,0,2)
(66,46,2)
(40,68,2)
(21,63,2)
(47,53,2)
(72,46,2)
(63,46,2)
(70,44,2)
(40,75,2)
(78,39,2)
(51,46,2)
(11,53,2)
(22,46,2)
(33,63,2)
(4,63,2)
(51,15,2)
(18,35,2)
-----------------------------------
(0,data >= 0)
(1,i)
(2,1)
(3,10)
(4,i < 10)
(5,i)
(6,data)
(7,)
(8,0)
(9,)
(10,0)
(11,data)
(12,buffer[i] = 0)
(13,free(buffer)
(14,if(staticReturnsTrue()
(15,int *)
(16,i)
(17,10)
(18,malloc(10 * sizeof(int)
(19,i)
(20,sizeof(int)
(21,i++)
(22,data)
(23,for(i = 0; i < 10; i++)
(24,i = 0)
(25,data = -1)
(26,buffer)
(27,i)
(28,for (i = 0; i < 10; i++)
(29,buffer)
(30,1)
(31,)
(32,printLine("ERROR: Array index is negative.")
(33,buffer[i])
(34,if(staticReturnsTrue()
(35,10 * sizeof(int)
(36,printIntLine(buffer[i])
(37,)
(38,buffer)
(39,* buffer = (int *)
(40,exit(-1)
(41,buffer)
(42,if (data >= 0)
(43,buffer[data])
(44,i < 10)
(45,0)
(46,staticReturnsTrue()
(47,data = 10)
(48,)
(49,)
(50,i)
(51,(int *)
(52,NULL)
(53,staticReturnsTrue()
(54,0)
(55,buffer)
(56,)
(57,buffer[data] = 1)
(58,-1)
(59,RET)
(60,i)
(61,data)
(62,int)
(63,i = 0)
(64,"ERROR: Array index is negative.")
(65,data)
(66,i)
(67,i)
(68,buffer == NULL)
(69,buffer)
(70,i++)
(71,)
(72,10)
(73,10)
(74,1)
(75,-1)
(76,)
(77,buffer)
(78,buffer[i])
(79,if (buffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^