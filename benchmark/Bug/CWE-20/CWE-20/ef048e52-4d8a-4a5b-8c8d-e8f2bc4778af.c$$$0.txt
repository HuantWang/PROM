-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
72,74
74,75
75,76
75,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,60,63,67,69,71,73,76,77,81,84,85,89,91
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(34,19,0)
(2,38,0)
(33,1,0)
(37,17,0)
(17,2,0)
(38,14,0)
(13,32,0)
(29,17,0)
(28,21,0)
(36,33,0)
(11,29,0)
(17,33,0)
(24,19,0)
(12,13,0)
(4,18,0)
(38,2,0)
(2,9,0)
(29,11,0)
(13,2,0)
(34,35,0)
(22,1,0)
(38,15,0)
(10,27,0)
(20,18,0)
(18,32,0)
(13,33,0)
(42,18,0)
(6,32,0)
(5,36,0)
(15,38,0)
(17,32,0)
(19,34,0)
(40,27,0)
(18,42,0)
(15,21,0)
(21,15,0)
(8,21,0)
(7,9,0)
(27,2,0)
(17,36,0)
(17,29,0)
(30,17,0)
(0,29,0)
(14,38,0)
(25,11,0)
(41,8,0)
(42,33,0)
(39,1,0)
(21,8,0)
(32,1,0)
(18,2,0)
(26,33,0)
(16,32,0)
(3,2,0)
(36,5,1)
(24,27,1)
(32,16,1)
(5,27,1)
(18,32,1)
(17,29,1)
(0,37,1)
(18,20,1)
(20,4,1)
(37,30,1)
(13,2,1)
(30,36,1)
(11,25,1)
(27,2,1)
(21,8,1)
(28,3,1)
(27,10,1)
(17,36,1)
(12,42,1)
(31,32,1)
(8,41,1)
(38,15,1)
(5,34,1)
(16,6,1)
(19,24,1)
(23,13,1)
(18,2,1)
(42,18,1)
(15,21,1)
(40,2,1)
(38,14,1)
(17,2,1)
(5,31,1)
(4,17,1)
(13,32,1)
(2,38,1)
(29,11,1)
(34,19,1)
(41,28,1)
(25,0,1)
(3,31,1)
(17,32,1)
(10,40,1)
(13,12,1)
(18,2,2)
(42,18,2)
(17,2,2)
(15,31,2)
(17,32,2)
(10,31,2)
(15,21,2)
(21,8,2)
(38,15,2)
(41,31,2)
(38,14,2)
(18,32,2)
(2,38,2)
(17,29,2)
(24,27,2)
(2,31,2)
(28,31,2)
(34,27,2)
(19,27,2)
(13,2,2)
(29,11,2)
(13,32,2)
(8,31,2)
(34,19,2)
(17,36,2)
(38,31,2)
(3,31,2)
(40,31,2)
(27,31,2)
(21,31,2)
(27,2,2)
-----------------------------------
(0,100)
(1,)
(2,data = (int *)
(3,data)
(4,data)
(5,source)
(6,data)
(7,if (data == NULL)
(8,sizeof(int)
(9,)
(10,NULL)
(11,sizeof(int)
(12,data)
(13,free(data)
(14,int *)
(15,malloc(50*sizeof(int)
(16,NULL)
(17,memmove(data, source, 100*sizeof(int)
(18,data[0])
(19,-1)
(20,0)
(21,50*sizeof(int)
(22,if(GLOBAL_CONST_TRUE)
(23,RET)
(24,1)
(25,int)
(26,source)
(27,data == NULL)
(28,50)
(29,100*sizeof(int)
(30,data)
(31,GLOBAL_CONST_TRUE)
(32,data = NULL)
(33,)
(34,exit(-1)
(35,)
(36,source[100] = {0})
(37,source)
(38,(int *)
(39,data)
(40,data)
(41,int)
(42,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^