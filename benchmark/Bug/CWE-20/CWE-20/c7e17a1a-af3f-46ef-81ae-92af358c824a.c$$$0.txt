-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    wmemset(data, L'A', 100-1); /* fill with L'A's */
    data[100-1] = L'\0'; /* null terminate */
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        wcsncpy(dest, data, wcslen(data));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
62,66
62,67
63,64
64,65
64,66
66,67
66,68
66,69
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
87,89
88,89
90,91
90,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,69,71,75,77,79,82,84,89,91,92,93,97,99,103,105
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcsncpy(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcsncpy(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcsncpy(dest, data, wcslen(data));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcsncpy(dest, data, wcslen(data));
wcsncpy(dest, data, wcslen(data))
wcsncpy
wcsncpy
dest
dest
data
data
wcslen(data)
wcslen
wcslen
data
data
dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(6,28,0)
(17,29,0)
(25,19,0)
(25,20,0)
(5,22,0)
(13,26,0)
(29,4,0)
(2,28,0)
(2,16,0)
(26,28,0)
(28,18,0)
(15,28,0)
(9,18,0)
(23,18,0)
(0,18,0)
(3,28,0)
(4,29,0)
(20,25,0)
(24,6,0)
(24,22,0)
(30,22,0)
(3,22,0)
(2,20,0)
(8,24,0)
(14,3,0)
(28,2,0)
(19,25,0)
(4,12,0)
(32,19,0)
(11,22,0)
(31,30,0)
(7,6,0)
(6,24,0)
(1,26,0)
(24,28,0)
(22,18,0)
(20,2,0)
(10,24,0)
(16,2,0)
(27,25,0)
(30,28,0)
(4,29,1)
(20,25,1)
(6,28,1)
(26,1,1)
(27,15,1)
(5,9,1)
(17,26,1)
(31,3,1)
(29,17,1)
(30,28,1)
(19,32,1)
(3,28,1)
(30,31,1)
(24,28,1)
(6,7,1)
(26,28,1)
(2,20,1)
(3,14,1)
(21,30,1)
(11,24,1)
(7,10,1)
(25,19,1)
(2,16,1)
(9,4,1)
(13,28,1)
(1,13,1)
(28,2,1)
(32,27,1)
(8,5,1)
(24,6,1)
(10,8,1)
(9,26,1)
(14,11,1)
(24,28,2)
(30,28,2)
(17,26,2)
(28,2,2)
(29,26,2)
(3,28,2)
(2,20,2)
(20,25,2)
(4,29,2)
(2,16,2)
(4,26,2)
(26,28,2)
(24,6,2)
(25,19,2)
(6,28,2)
-----------------------------------
(0,data)
(1,NULL)
(2,(wchar_t *)
(3,printWLine(data)
(4,exit(-1)
(5,"")
(6,wcslen(data)
(7,data)
(8,dest)
(9,\\\'\\\\0\\\')
(10,data)
(11,\\\'\\\\0\\\')
(12,)
(13,data)
(14,data)
(15,data)
(16,wchar_t *)
(17,1)
(18,)
(19,sizeof(wchar_t)
(20,malloc(100*sizeof(wchar_t)
(21,RET)
(22,)
(23,if (data == NULL)
(24,wcsncpy(dest, data, wcslen(data)
(25,100*sizeof(wchar_t)
(26,data == NULL)
(27,100)
(28,data = (wchar_t *)
(29,-1)
(30,free(data)
(31,data)
(32,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^