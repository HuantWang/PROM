-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(29,59,0)
(32,48,0)
(43,37,0)
(22,1,0)
(6,51,0)
(34,0,0)
(40,19,0)
(24,44,0)
(36,37,0)
(59,60,0)
(52,2,0)
(32,44,0)
(44,32,0)
(60,59,0)
(0,55,0)
(18,40,0)
(16,18,0)
(48,59,0)
(36,3,0)
(3,50,0)
(9,48,0)
(44,24,0)
(48,32,0)
(31,59,0)
(33,40,0)
(43,1,0)
(25,52,0)
(17,33,0)
(11,45,0)
(38,39,0)
(52,37,0)
(42,0,0)
(62,48,0)
(24,29,0)
(24,37,0)
(28,43,0)
(19,40,0)
(8,40,0)
(61,55,0)
(49,44,0)
(30,60,0)
(61,39,0)
(45,64,0)
(12,29,0)
(1,43,0)
(57,18,0)
(14,23,0)
(15,24,0)
(40,51,0)
(65,36,0)
(56,52,0)
(55,27,0)
(29,24,0)
(0,40,0)
(4,5,0)
(43,45,0)
(18,57,0)
(59,5,0)
(1,59,0)
(63,3,0)
(33,37,0)
(26,51,0)
(61,33,0)
(58,57,0)
(27,55,0)
(33,61,0)
(53,18,0)
(47,2,0)
(66,33,0)
(35,29,0)
(19,37,0)
(21,19,0)
(10,61,0)
(60,37,0)
(55,0,0)
(46,1,0)
(7,20,0)
(55,61,0)
(51,54,0)
(39,61,0)
(23,50,0)
(36,40,0)
(41,36,0)
(57,58,1)
(10,55,1)
(60,30,1)
(23,14,1)
(42,33,1)
(45,11,1)
(55,27,1)
(44,24,1)
(24,29,1)
(29,59,1)
(24,37,1)
(49,24,1)
(39,38,1)
(62,9,1)
(46,28,1)
(40,19,1)
(53,16,1)
(0,34,1)
(56,52,1)
(33,37,1)
(33,17,1)
(63,36,1)
(15,48,1)
(25,45,1)
(11,43,1)
(61,10,1)
(55,0,1)
(1,22,1)
(0,40,1)
(44,49,1)
(25,13,1)
(36,40,1)
(17,66,1)
(16,40,1)
(14,39,1)
(30,31,1)
(61,33,1)
(41,23,1)
(34,42,1)
(18,53,1)
(59,60,1)
(19,21,1)
(36,65,1)
(58,18,1)
(61,55,1)
(43,37,1)
(28,32,1)
(52,25,1)
(29,12,1)
(18,40,1)
(9,59,1)
(12,35,1)
(31,39,1)
(57,18,1)
(25,57,1)
(25,3,1)
(38,61,1)
(65,41,1)
(25,32,1)
(43,1,1)
(22,46,1)
(32,48,1)
(21,8,1)
(3,63,1)
(66,57,1)
(36,37,1)
(19,37,1)
(39,61,1)
(33,40,1)
(1,59,1)
(35,15,1)
(48,62,1)
(60,37,1)
(52,37,1)
(48,59,1)
(32,44,1)
(8,13,1)
(29,59,2)
(9,39,2)
(48,59,2)
(39,57,2)
(60,37,2)
(3,39,2)
(36,37,2)
(11,32,2)
(35,48,2)
(62,39,2)
(31,39,2)
(33,57,2)
(41,39,2)
(32,48,2)
(32,39,2)
(12,48,2)
(14,39,2)
(65,39,2)
(17,57,2)
(33,40,2)
(34,57,2)
(16,13,2)
(10,57,2)
(55,57,2)
(15,48,2)
(56,52,2)
(44,48,2)
(0,57,2)
(32,44,2)
(45,32,2)
(24,29,2)
(38,57,2)
(18,13,2)
(60,39,2)
(66,57,2)
(24,48,2)
(61,33,2)
(28,32,2)
(40,13,2)
(63,39,2)
(19,13,2)
(36,40,2)
(59,60,2)
(22,32,2)
(19,37,2)
(0,40,2)
(61,57,2)
(43,32,2)
(43,37,2)
(21,13,2)
(46,32,2)
(33,37,2)
(18,40,2)
(30,39,2)
(40,19,2)
(1,32,2)
(57,18,2)
(42,57,2)
(23,39,2)
(52,37,2)
(57,13,2)
(44,24,2)
(55,0,2)
(58,13,2)
(39,61,2)
(8,13,2)
(1,59,2)
(24,37,2)
(48,39,2)
(59,39,2)
(36,39,2)
(61,55,2)
(29,48,2)
(43,1,2)
(49,48,2)
(55,27,2)
(53,13,2)
-----------------------------------
(0,100-dataLen)
(1,dataLen-1)
(2,)
(3,data[dataLen] = \\\'\\\\0\\\')
(4,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,)
(6,dataLen)
(7,if (fgets(data+dataLen, (int)
(8,dataLen)
(9,dataLen)
(10,stdin)
(11,\\\'\\\\0\\\')
(12,1)
(13,CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
(14,"fgets()
(15,data)
(16,100)
(17,dataLen)
(18,100-dataLen)
(19,strlen(data)
(20,)
(21,data)
(22,1)
(23,printLine("fgets()
(24,data[dataLen-1])
(25,data)
(26,if (100-dataLen > 1)
(27,int)
(28,data)
(29,dataLen-1)
(30,data)
(31,dataLen)
(32,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,data+dataLen)
(34,dataLen)
(35,dataLen)
(36,data[dataLen])
(37,char * data)
(38,NULL)
(39,fgets(data+dataLen, (int)
(40,dataLen = strlen(data)
(41,data)
(42,100)
(43,data[dataLen-1])
(44,data[dataLen-1] == \\\'\\\\n\\\')
(45,data[dataLen-1] = \\\'\\\\0\\\')
(46,dataLen)
(47,if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
(48,dataLen > 0)
(49,\\\'\\\\n\\\')
(50,)
(51,)
(52,return data;)
(53,dataLen)
(54,)
(55,(int)
(56,RET)
(57,100-dataLen > 1)
(58,1)
(59,dataLen = strlen(data)
(60,strlen(data)
(61,fgets(data+dataLen, (int)
(62,0)
(63,\\\'\\\\0\\\')
(64,)
(65,dataLen)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^