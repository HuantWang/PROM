-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
33,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,36,39,41,44,48,50
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_11_bad()
CWE190_Integer_Overflow__char_max_preinc_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,21,0)
(3,10,0)
(19,7,0)
(0,7,0)
(13,12,0)
(10,7,0)
(0,17,0)
(0,12,0)
(5,12,0)
(16,17,0)
(13,7,0)
(13,17,0)
(23,17,0)
(9,21,0)
(10,0,0)
(11,0,0)
(6,21,0)
(20,21,0)
(17,24,0)
(7,8,0)
(14,12,0)
(18,13,0)
(4,0,0)
(13,12,1)
(11,4,1)
(10,0,1)
(0,12,1)
(0,17,1)
(14,5,1)
(0,11,1)
(17,23,1)
(18,22,1)
(3,0,1)
(13,18,1)
(1,12,1)
(23,16,1)
(22,17,1)
(2,22,1)
(16,1,1)
(13,17,1)
(12,14,1)
(4,13,1)
(10,3,1)
(2,10,1)
(22,1,1)
(3,22,2)
(23,1,2)
(10,0,2)
(17,1,2)
(13,17,2)
(10,22,2)
(4,22,2)
(18,22,2)
(0,12,2)
(13,22,2)
(13,12,2)
(16,1,2)
(0,17,2)
(0,22,2)
(11,22,2)
-----------------------------------
(0,result = data)
(1,globalReturnsTrue()
(2,RET)
(3,result)
(4,result)
(5,data)
(6,if(globalReturnsTrue()
(7,)
(8,)
(9,if(globalReturnsTrue()
(10,printHexCharLine(result)
(11,data)
(12,data = ' ')
(13,++data)
(14,' ')
(15,data = \' \')
(16,data)
(17,data = CHAR_MAX)
(18,data)
(19,result)
(20,data)
(21,)
(22,globalReturnsTrue()
(23,CHAR_MAX)
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^