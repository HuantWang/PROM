-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_char_08_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(staticReturnsTrue())
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
62,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,63,68,70
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_char_08_bad(){    char * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_char_08_bad()
CWE415_Double_Free__malloc_free_char_08_bad
{    char * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,3,0)
(28,24,0)
(23,28,0)
(26,22,0)
(28,16,0)
(8,16,0)
(16,28,0)
(10,6,0)
(24,22,0)
(14,30,0)
(18,25,0)
(9,4,0)
(24,28,0)
(2,30,0)
(14,0,0)
(22,24,0)
(8,32,0)
(16,12,0)
(15,12,0)
(4,16,0)
(31,7,0)
(21,25,0)
(13,7,0)
(20,16,0)
(27,3,0)
(6,22,0)
(30,14,0)
(17,8,0)
(1,3,0)
(7,16,0)
(22,6,0)
(19,3,0)
(8,25,0)
(28,23,0)
(4,12,0)
(11,4,1)
(4,9,1)
(14,30,1)
(5,25,1)
(13,16,1)
(20,5,1)
(28,23,1)
(6,10,1)
(26,20,1)
(10,26,1)
(31,13,1)
(9,7,1)
(30,2,1)
(17,11,1)
(29,8,1)
(8,16,1)
(29,11,1)
(25,21,1)
(7,16,1)
(2,7,1)
(16,28,1)
(22,6,1)
(7,31,1)
(9,14,1)
(11,5,1)
(4,16,1)
(21,18,1)
(8,17,1)
(8,25,1)
(24,22,1)
(28,24,1)
(24,5,2)
(16,28,2)
(17,11,2)
(28,23,2)
(13,5,2)
(8,25,2)
(22,5,2)
(8,11,2)
(14,30,2)
(24,22,2)
(16,5,2)
(7,16,2)
(10,5,2)
(4,5,2)
(30,7,2)
(28,5,2)
(6,5,2)
(22,6,2)
(20,5,2)
(9,5,2)
(28,24,2)
(26,5,2)
(2,7,2)
(7,5,2)
(31,5,2)
(4,16,2)
(14,7,2)
(8,16,2)
-----------------------------------
(0,)
(1,data)
(2,1)
(3,)
(4,free(data)
(5,staticReturnsTrue()
(6,sizeof(char)
(7,data == NULL)
(8,free(data)
(9,data)
(10,char)
(11,staticReturnsTrue()
(12,)
(13,data)
(14,exit(-1)
(15,if (data == NULL)
(16,data = (char *)
(17,data)
(18,data)
(19,if(staticReturnsTrue()
(20,data)
(21,NULL)
(22,100*sizeof(char)
(23,char *)
(24,malloc(100*sizeof(char)
(25,data = NULL)
(26,100)
(27,if(staticReturnsTrue()
(28,(char *)
(29,RET)
(30,-1)
(31,NULL)
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^