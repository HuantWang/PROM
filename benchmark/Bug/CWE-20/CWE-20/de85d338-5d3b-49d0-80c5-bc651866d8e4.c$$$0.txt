-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_char_cpy_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        char * dataBuffer = (char *)malloc(100*sizeof(char));
        if (dataBuffer == NULL) {exit(-1);}
        memset(dataBuffer, 'A', 100-1);
        dataBuffer[100-1] = '\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        strcpy(data, source);
        printLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
87,88
88,89
88,90
89,90
93,94
93,95
93,96
93,97
93,98
94,95
95,96
95,97
97,98
97,99
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
108,110
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
120,121
121,122
121,123
121,124
122,123
124,125
126,127
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,85,86,90,91,92,96,98,100,104,106,107,109,110,115,117,118,119,123,125,127,131,133
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
108,109
108,110
112,113
112,114
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_char_cpy_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        strcpy(data, source);        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_char_cpy_15_bad()
CWE124_Buffer_Underwrite__malloc_char_cpy_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        strcpy(data, source);        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        strcpy(data, source);        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(23,3,0)
(71,67,0)
(0,33,0)
(33,22,0)
(2,50,0)
(28,33,0)
(10,71,0)
(8,31,0)
(52,22,0)
(25,21,0)
(65,17,0)
(31,8,0)
(11,68,0)
(35,67,0)
(71,57,0)
(42,3,0)
(9,40,0)
(49,44,0)
(14,32,0)
(45,21,0)
(8,22,0)
(13,57,0)
(62,28,0)
(61,18,0)
(48,8,0)
(8,33,0)
(68,19,0)
(66,28,0)
(1,13,0)
(47,59,0)
(63,31,0)
(65,9,0)
(70,21,0)
(4,12,0)
(34,56,0)
(71,44,0)
(30,68,0)
(13,33,0)
(16,22,0)
(56,34,0)
(60,19,0)
(39,21,0)
(41,26,0)
(6,31,0)
(33,9,0)
(44,59,0)
(57,13,0)
(69,8,0)
(14,5,0)
(68,44,0)
(40,9,0)
(67,59,0)
(9,65,0)
(64,49,0)
(15,19,0)
(50,46,0)
(24,46,0)
(38,17,0)
(43,32,0)
(17,65,0)
(55,34,0)
(56,26,0)
(51,67,0)
(17,12,0)
(32,14,0)
(26,22,0)
(46,50,0)
(19,68,0)
(9,33,0)
(18,21,0)
(37,56,0)
(36,50,0)
(57,22,0)
(7,59,0)
(29,57,0)
(46,49,0)
(56,33,0)
(22,21,0)
(58,13,0)
(3,44,0)
(3,57,0)
(3,67,0)
(12,17,0)
(53,44,0)
(20,34,0)
(31,63,1)
(19,60,1)
(48,28,1)
(24,68,1)
(60,15,1)
(57,13,1)
(27,67,1)
(49,64,1)
(58,1,1)
(15,11,1)
(8,31,1)
(41,56,1)
(30,39,1)
(28,33,1)
(17,12,1)
(64,46,1)
(61,27,1)
(0,27,1)
(71,67,1)
(33,9,1)
(69,48,1)
(12,4,1)
(51,35,1)
(13,58,1)
(20,55,1)
(46,50,1)
(8,33,1)
(25,18,1)
(6,69,1)
(42,49,1)
(37,8,1)
(62,66,1)
(68,19,1)
(71,57,1)
(65,17,1)
(10,3,1)
(4,38,1)
(30,25,1)
(50,2,1)
(32,43,1)
(1,29,1)
(29,26,1)
(23,42,1)
(28,62,1)
(43,28,1)
(34,20,1)
(56,34,1)
(11,30,1)
(54,71,1)
(56,33,1)
(39,57,1)
(66,33,1)
(13,33,1)
(9,65,1)
(3,23,1)
(2,36,1)
(18,61,1)
(26,41,1)
(67,51,1)
(3,67,1)
(48,14,1)
(14,32,1)
(38,0,1)
(63,6,1)
(36,24,1)
(55,37,1)
(3,57,1)
(9,40,1)
(71,10,1)
(28,27,2)
(9,65,2)
(65,27,2)
(69,27,2)
(29,27,2)
(14,32,2)
(37,27,2)
(57,27,2)
(58,27,2)
(56,33,2)
(33,9,2)
(3,67,2)
(17,12,2)
(71,57,2)
(65,17,2)
(62,27,2)
(31,27,2)
(13,33,2)
(46,50,2)
(56,27,2)
(48,27,2)
(8,27,2)
(8,31,2)
(13,27,2)
(4,27,2)
(32,28,2)
(41,27,2)
(9,40,2)
(0,27,2)
(6,27,2)
(3,57,2)
(39,27,2)
(66,27,2)
(68,19,2)
(18,27,2)
(25,27,2)
(56,34,2)
(20,27,2)
(14,28,2)
(55,27,2)
(28,33,2)
(9,27,2)
(38,27,2)
(61,27,2)
(43,28,2)
(12,27,2)
(34,27,2)
(71,67,2)
(8,33,2)
(63,27,2)
(26,27,2)
(57,13,2)
(17,27,2)
(1,27,2)
(33,27,2)
-----------------------------------
(0,dataBuffer)
(1,dataBuffer)
(2,1)
(3,strcpy(data, source)
(4,char)
(5,)
(6,100)
(7,data)
(8,memset(dataBuffer, \\\'A\\\', 100-1)
(9,(char *)
(10,data)
(11,\\\'C\\\')
(12,sizeof(char)
(13,dataBuffer - 8)
(14,exit(-1)
(15,100)
(16,dataBuffer)
(17,100*sizeof(char)
(18,printLine("Benign, fixed string")
(19,100-1)
(20,1)
(21,)
(22,)
(23,source)
(24,source)
(25,break;)
(26,dataBuffer[100-1] = \\\'\\\\0\\\')
(27,6)
(28,dataBuffer == NULL)
(29,data)
(30,source)
(31,100-1)
(32,-1)
(33,* dataBuffer = (char *)
(34,100-1)
(35,data)
(36,100)
(37,dataBuffer)
(38,100)
(39,break;)
(40,char *)
(41,\\\'\\\\0\\\')
(42,data)
(43,1)
(44,)
(45,case 6:)
(46,source[100-1])
(47,switch(6)
(48,dataBuffer)
(49,source[100-1] = \\\'\\\\0\\\')
(50,100-1)
(51,NULL)
(52,if (dataBuffer == NULL)
(53,source)
(54,RET)
(55,100)
(56,dataBuffer[100-1])
(57,data = dataBuffer - 8)
(58,8)
(59,)
(60,1)
(61,"Benign, fixed string")
(62,NULL)
(63,1)
(64,\\\'\\\\0\\\')
(65,malloc(100*sizeof(char)
(66,dataBuffer)
(67,data = NULL)
(68,memset(source, \\\'C\\\', 100-1)
(69,\\\'A\\\')
(70,default:)
(71,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^