-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66_bad()
{
    wchar_t * data;
    wchar_t * dataArray[5];
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    /* put data in array */
    dataArray[2] = data;
    CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
50,51
50,52
51,52
51,53
53,54
56,57
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
85,87
86,87
88,89
90,91
90,92
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
97,99
98,99
100,101
100,102
101,102
105,106
106,107
107,108
107,109
108,109
108,110
109,110
111,112
111,113
112,113
116,117
116,118
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
124,126
125,126
127,128
130,131
131,132
131,133
132,133
132,134
133,134
136,137
138,139
139,140
139,141
140,141
142,143
-----nextToken-----
2,4,8,10,11,14,16,17,19,22,24,26,29,33,35,40,42,46,48,52,54,55,61,64,66,69,70,73,75,77,79,84,87,89,94,95,99,102,103,104,110,113,114,115,120,121,126,128,129,134,135,137,141,143
-----computeFrom-----
31,32
31,33
50,51
50,52
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
82,83
82,84
91,92
91,93
92,93
92,94
96,97
96,98
100,101
100,102
107,108
107,109
111,112
111,113
123,124
123,125
131,132
131,133
-----guardedBy-----
54,128
64,110
75,113
99,110
102,113
-----guardedByNegation-----
64,126
75,128
-----lastLexicalUse-----
64,126
75,128
-----jump-----
64,126
75,128
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66_bad(){    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray);}
void
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66_bad()
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66_bad
{    wchar_t * data;    wchar_t * dataArray[5];    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* put data in array */    dataArray[2] = data;    CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataArray[5];
wchar_t * dataArray[5];
wchar_t
* dataArray[5]
*
dataArray
[5]
5
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
dataArray[2] = data;
dataArray[2] = data
dataArray[2]
dataArray
dataArray
2
data
data
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray);
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray)
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink
CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink
dataArray
dataArray
-----joern-----
(54,24,0)
(3,19,0)
(5,13,0)
(5,15,0)
(19,5,0)
(53,15,0)
(27,14,0)
(31,5,0)
(6,33,0)
(50,34,0)
(49,44,0)
(21,10,0)
(44,40,0)
(28,52,0)
(44,49,0)
(6,52,0)
(49,48,0)
(7,34,0)
(15,13,0)
(29,33,0)
(23,13,0)
(20,19,0)
(18,41,0)
(14,13,0)
(52,6,0)
(46,10,0)
(37,13,0)
(9,12,0)
(34,5,0)
(48,49,0)
(30,9,0)
(22,36,0)
(1,21,0)
(43,49,0)
(16,7,0)
(48,9,0)
(36,5,0)
(10,21,0)
(40,44,0)
(0,12,0)
(24,41,0)
(49,43,0)
(36,9,0)
(19,9,0)
(35,21,0)
(26,15,0)
(39,29,0)
(21,9,0)
(47,40,0)
(2,7,0)
(17,48,0)
(44,19,0)
(19,44,0)
(12,13,0)
(25,13,0)
(9,36,0)
(52,5,0)
(38,45,0)
(32,48,0)
(34,13,0)
(42,12,0)
(51,5,0)
(8,44,0)
(4,6,0)
(1,35,1)
(35,9,1)
(5,31,1)
(20,10,1)
(27,34,1)
(8,49,1)
(14,27,1)
(49,43,1)
(54,40,1)
(15,53,1)
(39,6,1)
(19,3,1)
(16,18,1)
(47,44,1)
(36,22,1)
(22,30,1)
(52,28,1)
(46,21,1)
(16,39,1)
(49,48,1)
(53,26,1)
(18,24,1)
(30,5,1)
(6,52,1)
(28,4,1)
(2,16,1)
(51,15,1)
(44,49,1)
(19,5,1)
(10,46,1)
(3,20,1)
(4,40,1)
(21,1,1)
(11,14,1)
(17,19,1)
(21,9,1)
(52,5,1)
(48,32,1)
(34,5,1)
(10,21,1)
(9,36,1)
(50,7,1)
(44,8,1)
(34,50,1)
(19,9,1)
(5,15,1)
(44,19,1)
(7,2,1)
(32,17,1)
(48,9,1)
(40,47,1)
(40,44,1)
(16,10,1)
(36,5,1)
(31,51,1)
(24,54,1)
(34,5,2)
(40,44,2)
(24,40,2)
(48,10,2)
(6,52,2)
(8,10,2)
(39,40,2)
(44,49,2)
(49,48,2)
(52,40,2)
(9,36,2)
(19,10,2)
(18,40,2)
(52,5,2)
(19,5,2)
(21,9,2)
(36,5,2)
(10,21,2)
(20,10,2)
(40,10,2)
(17,10,2)
(44,19,2)
(28,40,2)
(47,10,2)
(6,40,2)
(32,10,2)
(44,10,2)
(5,15,2)
(49,43,2)
(54,40,2)
(3,10,2)
(48,9,2)
(4,40,2)
(49,10,2)
(19,9,2)
-----------------------------------
(0,if (100-dataLen > 1)
(1,dataLen)
(2,2)
(3,dataLen)
(4,dataLen)
(5,data = dataBuffer)
(6,dataLen = wcslen(data)
(7,dataArray[2])
(8,stdin)
(9,dataLen = wcslen(data)
(10,100-dataLen > 1)
(11,RET)
(12,)
(13,)
(14,CWE78_OS_Command_Injection__wchar_t_console_w32_spawnv_66b_badSink(dataArray)
(15,dataBuffer[100] = COMMAND_ARG2)
(16,dataArray)
(17,100)
(18,\\\'\\\\0\\\')
(19,data+dataLen)
(20,data)
(21,100-dataLen)
(22,data)
(23,dataBuffer)
(24,printLine("fgetws()
(25,dataArray)
(26,dataBuffer)
(27,dataArray)
(28,data)
(29,)
(30,dataLen)
(31,dataBuffer)
(32,dataLen)
(33,)
(34,dataArray[2] = data)
(35,100)
(36,wcslen(data)
(37,data)
(38,if (fgetws(data+dataLen, (int)
(39,\\\'\\\\0\\\')
(40,fgetws(data+dataLen, (int)
(41,)
(42,dataLen)
(43,int)
(44,fgetws(data+dataLen, (int)
(45,)
(46,1)
(47,NULL)
(48,100-dataLen)
(49,(int)
(50,data)
(51,data)
(52,wcslen(data)
(53,COMMAND_ARG2)
(54,"fgetws()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^