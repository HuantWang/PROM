-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        {
            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (dataBuffer == NULL) {exit(-1);}
            wmemset(dataBuffer, L'A', 100-1);
            dataBuffer[100-1] = L'\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with 'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        memcpy(data, source, 100*sizeof(wchar_t));
        /* Ensure the destination buffer is null terminated */
        data[100-1] = L'\0';
        printWLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
85,87
85,88
85,89
85,90
85,91
86,87
87,88
87,89
89,90
89,91
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
113,116
113,117
114,115
116,117
118,119
120,121
120,122
122,123
123,124
123,125
126,127
127,128
127,129
128,129
128,130
129,130
131,132
131,133
135,136
136,137
136,138
137,138
139,140
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,88,90,92,96,98,99,101,102,107,109,110,111,115,117,119,121,124,125,130,132,133,134,138,140
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
100,101
100,102
104,105
104,106
108,109
108,110
120,121
120,122
127,128
127,129
131,132
131,133
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(wchar_t));        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_11_bad()
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(wchar_t));        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(wchar_t));        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memcpy(data, source, 100*sizeof(wchar_t));
memcpy(data, source, 100*sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(8,44,0)
(0,32,0)
(1,17,0)
(29,15,0)
(33,35,0)
(1,11,0)
(11,24,0)
(23,44,0)
(10,20,0)
(28,29,0)
(39,17,0)
(1,44,0)
(35,29,0)
(20,10,0)
(27,40,0)
(24,11,0)
(31,41,0)
(4,7,0)
(6,29,0)
(36,41,0)
(5,47,0)
(41,35,0)
(18,24,0)
(10,26,0)
(32,35,0)
(20,14,0)
(14,20,0)
(43,40,0)
(22,47,0)
(12,8,0)
(11,1,0)
(8,36,0)
(41,36,0)
(9,29,0)
(25,1,0)
(40,27,0)
(19,41,0)
(2,32,0)
(35,20,0)
(42,17,0)
(21,26,0)
(36,29,0)
(37,17,0)
(7,26,0)
(26,10,0)
(8,17,0)
(27,38,0)
(45,44,0)
(1,36,0)
(30,1,0)
(20,35,0)
(13,36,0)
(46,11,0)
(26,7,0)
(17,47,0)
(44,47,0)
(25,30,1)
(37,36,1)
(7,4,1)
(32,35,1)
(31,19,1)
(46,25,1)
(27,40,1)
(41,31,1)
(0,35,1)
(11,24,1)
(3,44,1)
(43,32,1)
(6,27,1)
(37,3,1)
(1,44,1)
(24,18,1)
(4,21,1)
(16,8,1)
(6,32,1)
(36,41,1)
(21,33,1)
(32,2,1)
(1,11,1)
(26,7,1)
(10,26,1)
(23,45,1)
(40,43,1)
(13,6,1)
(35,20,1)
(2,0,1)
(41,35,1)
(8,12,1)
(39,1,1)
(44,23,1)
(8,44,1)
(30,37,1)
(12,39,1)
(20,10,1)
(18,46,1)
(8,36,1)
(19,13,1)
(20,14,1)
(1,36,1)
(33,3,1)
(27,32,2)
(27,40,2)
(8,36,2)
(4,3,2)
(32,3,2)
(33,3,2)
(8,44,2)
(13,3,2)
(40,32,2)
(6,3,2)
(10,3,2)
(35,20,2)
(43,32,2)
(26,3,2)
(1,11,2)
(36,41,2)
(1,36,2)
(20,10,2)
(32,35,2)
(35,3,2)
(20,3,2)
(36,3,2)
(41,35,2)
(2,3,2)
(19,3,2)
(0,3,2)
(21,3,2)
(31,3,2)
(41,3,2)
(7,3,2)
(20,14,2)
(26,7,2)
(11,24,2)
(1,44,2)
(10,26,2)
-----------------------------------
(0,dataBuffer)
(1,memcpy(data, source, 100*sizeof(wchar_t)
(2,NULL)
(3,globalReturnsTrue()
(4,wchar_t)
(5,data)
(6,'\\\\0')
(7,sizeof(wchar_t)
(8,printWLine(data)
(9,dataBuffer)
(10,malloc(100*sizeof(wchar_t)
(11,100*sizeof(wchar_t)
(12,data)
(13,data)
(14,wchar_t *)
(15,)
(16,RET)
(17,)
(18,wchar_t)
(19,dataBuffer)
(20,(wchar_t *)
(21,100)
(22,if(globalReturnsTrue()
(23,NULL)
(24,sizeof(wchar_t)
(25,source)
(26,100*sizeof(wchar_t)
(27,exit(-1)
(28,if (dataBuffer == NULL)
(29,)
(30,data)
(31,8)
(32,dataBuffer == NULL)
(33,dataBuffer)
(34,\'\\\\0\')
(35,* dataBuffer = (wchar_t *)
(36,data = dataBuffer - 8)
(37,'\\\\0')
(38,)
(39,'\\\\0')
(40,-1)
(41,dataBuffer - 8)
(42,source)
(43,1)
(44,data = NULL)
(45,data)
(46,100)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^