-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_char_03_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(5==5)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,68,70
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_char_03_bad(){    char * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_char_03_bad()
CWE415_Double_Free__malloc_free_char_03_bad
{    char * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
5==5
5
5
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(5==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(17,31,0)
(26,2,0)
(6,36,0)
(18,16,0)
(14,34,0)
(15,31,0)
(4,31,0)
(14,19,0)
(22,25,0)
(26,17,0)
(11,35,0)
(0,5,0)
(13,29,0)
(36,31,0)
(12,5,0)
(17,26,0)
(24,29,0)
(15,21,0)
(7,2,0)
(31,17,0)
(2,26,0)
(32,13,0)
(3,1,0)
(16,2,0)
(13,31,0)
(30,36,0)
(9,25,0)
(20,17,0)
(33,1,0)
(2,16,0)
(17,20,0)
(27,34,0)
(35,25,0)
(34,14,0)
(15,35,0)
(8,35,0)
(10,25,0)
(28,15,0)
(31,29,0)
(15,31,1)
(23,15,1)
(14,34,1)
(13,32,1)
(6,31,1)
(18,7,1)
(31,17,1)
(32,14,1)
(3,13,1)
(15,28,1)
(12,35,1)
(36,30,1)
(4,5,1)
(1,33,1)
(26,2,1)
(17,20,1)
(34,27,1)
(0,12,1)
(30,6,1)
(35,11,1)
(2,16,1)
(5,0,1)
(27,36,1)
(3,5,1)
(28,1,1)
(7,4,1)
(13,31,1)
(36,31,1)
(33,3,1)
(23,1,1)
(15,35,1)
(32,36,1)
(16,18,1)
(11,8,1)
(17,26,1)
(26,2,2)
(18,5,2)
(4,5,2)
(36,5,2)
(13,31,2)
(31,17,2)
(15,31,2)
(15,1,2)
(14,34,2)
(2,5,2)
(30,5,2)
(17,5,2)
(26,5,2)
(14,36,2)
(7,5,2)
(15,35,2)
(28,1,2)
(27,36,2)
(17,26,2)
(2,16,2)
(31,5,2)
(34,36,2)
(17,20,2)
(32,5,2)
(13,5,2)
(16,5,2)
(6,5,2)
(36,31,2)
-----------------------------------
(0,5)
(1,5==5)
(2,100*sizeof(char)
(3,5)
(4,data)
(5,5==5)
(6,data)
(7,100)
(8,data)
(9,if(5==5)
(10,data)
(11,NULL)
(12,5)
(13,free(data)
(14,exit(-1)
(15,free(data)
(16,sizeof(char)
(17,(char *)
(18,char)
(19,)
(20,char *)
(21,)
(22,if(5==5)
(23,RET)
(24,if (data == NULL)
(25,)
(26,malloc(100*sizeof(char)
(27,1)
(28,data)
(29,)
(30,NULL)
(31,data = (char *)
(32,data)
(33,5)
(34,-1)
(35,data = NULL)
(36,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^