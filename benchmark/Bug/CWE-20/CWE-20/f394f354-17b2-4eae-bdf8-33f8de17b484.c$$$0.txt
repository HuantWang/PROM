-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,80,82,83,86,87,91,93,97,99
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
75,76
75,77
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (strlen(source) + 1) * sizeof(char));
memmove(data, source, (strlen(source) + 1) * sizeof(char))
memmove
memmove
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,14,0)
(14,13,0)
(30,4,0)
(26,42,0)
(24,13,0)
(42,31,0)
(30,9,0)
(4,0,0)
(35,23,0)
(8,17,0)
(10,3,0)
(42,26,0)
(5,24,0)
(0,4,0)
(0,44,0)
(16,11,0)
(33,37,0)
(25,4,0)
(1,42,0)
(5,14,0)
(27,9,0)
(36,5,0)
(21,24,0)
(18,34,0)
(20,13,0)
(34,18,0)
(29,5,0)
(11,24,0)
(43,6,0)
(11,14,0)
(33,24,0)
(5,0,0)
(34,37,0)
(19,3,0)
(33,14,0)
(43,23,0)
(2,30,0)
(5,37,0)
(3,37,0)
(38,13,0)
(23,43,0)
(44,0,0)
(31,34,0)
(31,42,0)
(12,37,0)
(9,24,0)
(34,31,0)
(37,17,0)
(0,5,0)
(40,9,0)
(11,37,0)
(39,44,0)
(4,30,0)
(28,33,0)
(22,14,0)
(37,34,0)
(41,26,0)
(5,9,0)
(0,4,1)
(4,25,1)
(5,14,1)
(33,14,1)
(5,9,1)
(30,9,1)
(32,14,1)
(36,9,1)
(5,37,1)
(39,4,1)
(19,37,1)
(15,22,1)
(5,0,1)
(3,37,1)
(41,1,1)
(40,27,1)
(3,10,1)
(28,11,1)
(25,30,1)
(30,2,1)
(0,44,1)
(44,39,1)
(11,14,1)
(10,19,1)
(33,28,1)
(1,12,1)
(43,23,1)
(2,29,1)
(9,40,1)
(35,3,1)
(4,30,1)
(12,32,1)
(7,33,1)
(11,37,1)
(34,31,1)
(27,3,1)
(23,35,1)
(37,34,1)
(31,42,1)
(27,32,1)
(42,26,1)
(27,43,1)
(34,18,1)
(26,41,1)
(16,5,1)
(11,16,1)
(29,36,1)
(14,15,1)
(33,37,1)
(34,18,2)
(34,31,2)
(4,30,2)
(5,14,2)
(1,32,2)
(23,3,2)
(31,32,2)
(11,14,2)
(42,32,2)
(11,37,2)
(5,9,2)
(0,4,2)
(19,32,2)
(34,32,2)
(26,32,2)
(37,34,2)
(41,32,2)
(43,23,2)
(37,32,2)
(33,14,2)
(10,32,2)
(31,42,2)
(5,37,2)
(12,32,2)
(35,3,2)
(5,0,2)
(30,9,2)
(0,44,2)
(3,37,2)
(42,26,2)
(3,32,2)
(33,37,2)
(43,3,2)
-----------------------------------
(0,(strlen(source)
(1,10)
(2,source)
(3,data == NULL)
(4,strlen(source)
(5,memmove(data, source, (strlen(source)
(6,)
(7,RET)
(8,if (data == NULL)
(9,source[10+1] = SRC_STRING)
(10,NULL)
(11,printLine(data)
(12,data)
(13,)
(14,data = NULL)
(15,NULL)
(16,data)
(17,)
(18,char *)
(19,data)
(20,data)
(21,source)
(22,data)
(23,-1)
(24,)
(25,1)
(26,sizeof(char)
(27,source)
(28,data)
(29,source)
(30,strlen(source)
(31,malloc(10*sizeof(char)
(32,staticReturnsTrue()
(33,free(data)
(34,(char *)
(35,1)
(36,data)
(37,data = (char *)
(38,if(staticReturnsTrue()
(39,char)
(40,SRC_STRING)
(41,char)
(42,10*sizeof(char)
(43,exit(-1)
(44,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^