-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    goto source;
source:
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    wmemset(data, L'A', 100-1); /* fill with L'A's */
    data[100-1] = L'\0'; /* null terminate */
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        wcscpy(dest, data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
45,46
45,47
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,46,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,93,95
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1); /* fill with L'A's */    data[100-1] = L'\0'; /* null terminate */    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
goto source;
source
source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    wmemset(data, L'A', 100-1);
source
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcscpy(dest, data);
wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(19,3,0)
(0,17,0)
(22,0,0)
(24,23,0)
(7,14,0)
(20,23,0)
(29,27,0)
(18,29,0)
(27,29,0)
(23,18,0)
(26,14,0)
(12,14,0)
(29,28,0)
(5,3,0)
(10,18,0)
(18,14,0)
(21,16,0)
(30,14,0)
(6,4,0)
(3,17,0)
(1,18,0)
(13,14,0)
(11,31,0)
(15,6,0)
(29,18,0)
(11,16,0)
(0,18,0)
(9,4,0)
(2,1,0)
(4,6,0)
(6,28,0)
(8,17,0)
(1,17,0)
(3,18,0)
(28,29,0)
(16,11,0)
(28,6,0)
(17,14,0)
(13,11,1)
(29,28,1)
(23,20,1)
(1,2,1)
(0,22,1)
(6,4,1)
(5,8,1)
(19,5,1)
(25,0,1)
(3,18,1)
(22,1,1)
(8,12,1)
(2,3,1)
(20,24,1)
(28,6,1)
(9,15,1)
(11,16,1)
(12,13,1)
(1,18,1)
(3,19,1)
(4,9,1)
(24,18,1)
(16,21,1)
(15,10,1)
(0,18,1)
(23,18,1)
(21,23,1)
(29,27,1)
(18,29,1)
(13,23,1)
(29,27,2)
(3,18,2)
(0,18,2)
(16,23,2)
(11,16,2)
(6,4,2)
(11,23,2)
(28,6,2)
(21,23,2)
(1,18,2)
(18,29,2)
(23,18,2)
(29,28,2)
-----------------------------------
(0,free(data)
(1,printWLine(data)
(2,data)
(3,wcscpy(dest, data)
(4,sizeof(wchar_t)
(5,dest)
(6,100*sizeof(wchar_t)
(7,source:)
(8,"")
(9,wchar_t)
(10,data)
(11,exit(-1)
(12,\\\'\\\\0\\\')
(13,goto source;)
(14,)
(15,100)
(16,-1)
(17,)
(18,data = (wchar_t *)
(19,data)
(20,NULL)
(21,1)
(22,data)
(23,data == NULL)
(24,data)
(25,RET)
(26,data)
(27,wchar_t *)
(28,malloc(100*sizeof(wchar_t)
(29,(wchar_t *)
(30,if (data == NULL)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^