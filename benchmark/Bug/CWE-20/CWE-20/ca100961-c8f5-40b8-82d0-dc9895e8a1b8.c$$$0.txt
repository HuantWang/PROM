-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    else
    {
        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */
        wmemset(data, L'A', 50-1); /* fill with L'A's */
        data[50-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
87,89
87,90
87,91
87,92
88,89
89,90
89,91
91,92
91,93
91,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
103,104
105,106
105,107
106,107
106,108
107,108
109,110
111,112
112,113
112,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
120,122
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,71,73,74,76,77,82,84,85,86,90,92,94,96,100,102,104,108,110,113,114,119,121,122,123,127,129,133,135
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
75,76
75,77
79,80
79,81
83,84
83,85
105,106
105,107
116,117
116,118
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        wmemset(data, L'A', 50-1); /* fill with L'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        wmemset(data, L'A', 50-1); /* fill with L'A's */        data[50-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        wmemset(data, L'A', 50-1); /* fill with L'A's */        data[50-1] = L'\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        wmemset(data, L'A', 50-1); /* fill with L'A's */        data[50-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 50-1);
wmemset(data, L'A', 50-1)
wmemset
wmemset
data
data
L'A'
50-1
50
1
data[50-1] = L'\0';
data[50-1] = L'\0'
data[50-1]
data
data
50-1
50
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memcpy(dest, data, wcslen(data)*sizeof(wchar_t));
memcpy(dest, data, wcslen(data)*sizeof(wchar_t))
memcpy
memcpy
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(36,14,0)
(22,20,0)
(26,34,0)
(37,21,0)
(39,41,0)
(25,31,0)
(2,33,0)
(41,14,0)
(31,25,0)
(22,28,0)
(42,9,0)
(35,20,0)
(4,8,0)
(38,8,0)
(41,25,0)
(40,31,0)
(14,8,0)
(13,3,0)
(24,0,0)
(34,26,0)
(41,21,0)
(23,41,0)
(29,34,0)
(17,26,0)
(11,21,0)
(25,3,0)
(0,14,0)
(37,14,0)
(21,8,0)
(7,9,0)
(14,0,0)
(6,10,0)
(31,14,0)
(0,18,0)
(27,21,0)
(25,41,0)
(19,14,0)
(0,24,0)
(30,19,0)
(18,0,0)
(18,26,0)
(26,18,0)
(9,14,0)
(5,8,0)
(19,21,0)
(1,37,0)
(3,25,0)
(20,22,0)
(15,37,1)
(40,23,1)
(1,19,1)
(27,6,1)
(13,31,1)
(41,14,1)
(18,26,1)
(37,1,1)
(31,14,1)
(17,36,1)
(19,14,1)
(39,27,1)
(7,14,1)
(37,14,1)
(23,39,1)
(0,18,1)
(16,22,1)
(41,25,1)
(14,0,1)
(2,16,1)
(16,9,1)
(26,34,1)
(11,41,1)
(20,35,1)
(0,24,1)
(6,16,1)
(25,3,1)
(29,17,1)
(3,13,1)
(22,20,1)
(9,14,1)
(31,40,1)
(9,42,1)
(34,29,1)
(30,11,1)
(25,31,1)
(19,30,1)
(27,2,1)
(42,7,1)
(35,9,1)
(20,9,2)
(25,31,2)
(18,26,2)
(0,24,2)
(14,0,2)
(31,14,2)
(41,14,2)
(22,9,2)
(19,14,2)
(2,16,2)
(37,14,2)
(26,34,2)
(35,9,2)
(6,16,2)
(41,25,2)
(22,20,2)
(9,14,2)
(0,18,2)
(25,3,2)
-----------------------------------
(0,(wchar_t *)
(1,data)
(2,\\'\\\\0\\')
(3,sizeof(wchar_t)
(4,if (data == NULL)
(5,data)
(6,\\'\\\\0\\')
(7,data)
(8,)
(9,data == NULL)
(10,)
(11,\\\'\\\\0\\\')
(12,\\\'\\\\0\\\')
(13,wchar_t)
(14,data = (wchar_t *)
(15,RET)
(16,globalReturnsTrueOrFalse()
(17,100)
(18,malloc(100*sizeof(wchar_t)
(19,printWLine(data)
(20,-1)
(21,)
(22,exit(-1)
(23,data)
(24,wchar_t *)
(25,wcslen(data)
(26,100*sizeof(wchar_t)
(27,"")
(28,)
(29,wchar_t)
(30,data)
(31,wcslen(data)
(32,\\\'\\\\0\\\')
(33,)
(34,sizeof(wchar_t)
(35,1)
(36,data)
(37,free(data)
(38,if(globalReturnsTrueOrFalse()
(39,dest)
(40,data)
(41,memcpy(dest, data, wcslen(data)
(42,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^