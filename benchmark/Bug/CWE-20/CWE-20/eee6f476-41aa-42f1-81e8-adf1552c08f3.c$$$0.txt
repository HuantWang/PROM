-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad()
{
    int data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
52,55
52,56
52,57
52,58
53,54
54,55
54,56
56,57
58,59
59,60
59,61
61,62
61,63
61,64
64,65
65,66
65,67
66,67
66,68
68,69
70,71
70,72
71,72
73,74
73,75
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
98,99
98,100
99,100
102,103
103,104
105,106
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
114,116
114,117
115,116
115,117
116,117
119,120
119,121
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
128,131
128,132
129,130
130,131
130,132
131,132
134,135
134,136
135,136
138,139
139,140
141,142
142,143
143,144
143,145
144,145
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
161,162
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,29,32,37,38,40,44,46,50,51,55,57,60,62,63,67,69,72,74,77,78,82,84,89,91,96,97,100,101,104,110,112,113,117,118,124,126,127,132,133,136,137,140,145,148,150,155,156,160,162
-----computeFrom-----
18,19
18,20
34,35
34,36
73,74
73,75
80,81
80,82
94,95
94,96
98,99
98,100
107,108
107,109
115,116
115,117
121,122
121,123
130,131
130,132
134,135
134,136
-----guardedBy-----
117,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad(){    int data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_bad
{    int data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;    /* Initialize data */    data = -1;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType
myUnion
myUnion
data = -1;
data = -1
data
data
-1
1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(14,18,0)
(36,33,0)
(27,71,0)
(49,84,0)
(50,84,0)
(22,34,0)
(12,85,0)
(51,57,0)
(15,48,0)
(23,62,0)
(25,75,0)
(65,46,0)
(35,61,0)
(64,54,0)
(85,78,0)
(27,50,0)
(56,72,0)
(83,16,0)
(73,37,0)
(22,48,0)
(38,64,0)
(75,48,0)
(10,38,0)
(40,46,0)
(16,50,0)
(48,74,0)
(50,27,0)
(48,75,0)
(21,6,0)
(55,51,0)
(88,47,0)
(30,46,0)
(67,85,0)
(0,48,0)
(17,46,0)
(87,27,0)
(74,54,0)
(69,47,0)
(59,30,0)
(38,37,0)
(5,50,0)
(42,66,0)
(86,69,0)
(13,0,0)
(31,22,0)
(19,9,0)
(22,50,0)
(81,64,0)
(24,84,0)
(8,73,0)
(68,47,0)
(45,3,0)
(37,73,0)
(69,50,0)
(11,84,0)
(79,69,0)
(30,35,0)
(6,47,0)
(52,78,0)
(4,16,0)
(62,47,0)
(20,29,0)
(70,34,0)
(43,65,0)
(28,84,0)
(76,50,0)
(14,69,0)
(78,37,0)
(77,0,0)
(63,84,0)
(2,30,0)
(84,74,0)
(69,14,0)
(32,75,0)
(29,46,0)
(30,50,0)
(1,35,0)
(39,37,0)
(3,56,0)
(80,6,0)
(34,66,0)
(71,27,0)
(64,38,0)
(5,84,0)
(53,22,0)
(26,64,0)
(60,65,0)
(37,54,0)
(33,87,0)
(27,87,0)
(44,54,0)
(56,3,0)
(9,33,0)
(33,9,0)
(78,54,0)
(82,54,0)
(69,35,0)
(58,74,0)
(87,33,0)
(41,5,0)
(0,13,1)
(65,46,1)
(21,80,1)
(55,0,1)
(43,29,1)
(17,56,1)
(77,65,1)
(8,39,1)
(3,45,1)
(14,69,1)
(29,46,1)
(30,46,1)
(35,1,1)
(17,16,1)
(67,64,1)
(69,47,1)
(15,78,1)
(56,3,1)
(40,17,1)
(51,55,1)
(38,37,1)
(16,4,1)
(22,53,1)
(70,22,1)
(33,9,1)
(5,50,1)
(48,75,1)
(23,14,1)
(22,48,1)
(2,59,1)
(5,41,1)
(78,52,1)
(80,47,1)
(1,30,1)
(41,6,1)
(7,5,1)
(75,32,1)
(41,51,1)
(47,68,1)
(80,62,1)
(62,23,1)
(37,73,1)
(73,8,1)
(13,77,1)
(60,43,1)
(0,48,1)
(25,15,1)
(27,87,1)
(79,6,1)
(9,19,1)
(81,37,1)
(64,38,1)
(50,27,1)
(6,21,1)
(12,67,1)
(38,10,1)
(88,34,1)
(36,76,1)
(4,83,1)
(30,50,1)
(30,2,1)
(53,31,1)
(52,85,1)
(26,81,1)
(69,35,1)
(76,48,1)
(31,0,1)
(45,16,1)
(85,12,1)
(22,50,1)
(62,47,1)
(29,20,1)
(86,79,1)
(46,40,1)
(87,33,1)
(10,26,1)
(65,60,1)
(32,25,1)
(20,35,1)
(83,50,1)
(68,88,1)
(34,70,1)
(27,71,1)
(6,47,1)
(59,65,1)
(19,36,1)
(69,50,1)
(16,50,1)
(78,37,1)
(43,46,1)
(69,86,1)
(47,0,2)
(43,65,2)
(70,0,2)
(60,65,2)
(65,46,2)
(78,37,2)
(22,50,2)
(62,6,2)
(69,50,2)
(38,37,2)
(5,50,2)
(51,0,2)
(6,6,2)
(14,6,2)
(22,48,2)
(69,6,2)
(33,9,2)
(21,0,2)
(34,0,2)
(65,65,2)
(30,50,2)
(88,0,2)
(27,71,2)
(48,75,2)
(6,47,2)
(20,65,2)
(53,0,2)
(69,47,2)
(56,16,2)
(86,6,2)
(1,65,2)
(23,6,2)
(30,65,2)
(2,65,2)
(14,69,2)
(55,0,2)
(37,73,2)
(35,65,2)
(29,65,2)
(45,16,2)
(64,38,2)
(22,0,2)
(6,0,2)
(16,50,2)
(21,6,2)
(3,16,2)
(80,6,2)
(59,65,2)
(62,47,2)
(68,0,2)
(30,46,2)
(50,27,2)
(87,33,2)
(0,48,2)
(79,6,2)
(27,87,2)
(29,46,2)
(80,0,2)
(69,35,2)
(31,0,2)
(56,3,2)
-----------------------------------
(0,data >= 0)
(1,0)
(2,i)
(3,-1)
(4,NULL)
(5,free(buffer)
(6,i < 10)
(7,RET)
(8,1)
(9,sizeof(int)
(10,data)
(11,if (buffer == NULL)
(12,unionFirst)
(13,0)
(14,printIntLine(buffer[i])
(15,data)
(16,buffer == NULL)
(17,i)
(18,)
(19,int)
(20,i)
(21,10)
(22,buffer[data])
(23,i)
(24,if (data >= 0)
(25,myUnion)
(26,"%d")
(27,(int *)
(28,i)
(29,i++)
(30,buffer[i])
(31,buffer)
(32,unionSecond)
(33,10 * sizeof(int)
(34,buffer[data] = 1)
(35,buffer[i] = 0)
(36,10)
(37,data = -1)
(38,&data)
(39,data)
(40,0)
(41,buffer)
(42,for(i = 0; i < 10; i++)
(43,i)
(44,data)
(45,1)
(46,i = 0)
(47,i = 0)
(48,data = myUnion.unionSecond)
(49,for (i = 0; i < 10; i++)
(50,* buffer = (int *)
(51,printLine("ERROR: Array index is negative.")
(52,data)
(53,data)
(54,)
(55,"ERROR: Array index is negative.")
(56,exit(-1)
(57,)
(58,data)
(59,buffer)
(60,10)
(61,)
(62,i++)
(63,buffer)
(64,fscanf(stdin, "%d", &data)
(65,i < 10)
(66,)
(67,myUnion)
(68,0)
(69,buffer[i])
(70,1)
(71,int *)
(72,)
(73,-1)
(74,)
(75,myUnion.unionSecond)
(76,buffer)
(77,data)
(78,myUnion.unionFirst = data)
(79,buffer)
(80,i)
(81,stdin)
(82,myUnion)
(83,buffer)
(84,)
(85,myUnion.unionFirst)
(86,i)
(87,malloc(10 * sizeof(int)
(88,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^