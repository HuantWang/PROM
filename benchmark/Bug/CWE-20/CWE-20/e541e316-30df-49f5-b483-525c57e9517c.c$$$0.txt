-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_struct_01_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i].intOne = 1;
            data[i].intTwo = 2;
        }
    }
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printStructLine(&data[0]);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
72,74
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
83,84
84,85
84,86
85,86
85,87
86,87
86,88
87,88
89,90
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,56,58,63,64,67,68,71,78,80,81,82,88,90,91,92,96,98,102,106,107
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
61,62
61,63
65,66
65,67
74,75
74,76
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_struct_01_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    {        size_t i;        for(i = 0; i < 100; i++)        {            data[i].intOne = 1;            data[i].intTwo = 2;        }    }    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */    free(data);    /* POTENTIAL FLAW: Use of data that may have been freed */    printStructLine(&data[0]);    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */}
void
CWE416_Use_After_Free__malloc_free_struct_01_bad()
CWE416_Use_After_Free__malloc_free_struct_01_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    {        size_t i;        for(i = 0; i < 100; i++)        {            data[i].intOne = 1;            data[i].intTwo = 2;        }    }    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */    free(data);    /* POTENTIAL FLAW: Use of data that may have been freed */    printStructLine(&data[0]);    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        size_t i;        for(i = 0; i < 100; i++)        {            data[i].intOne = 1;            data[i].intTwo = 2;        }    }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)        {            data[i].intOne = 1;            data[i].intTwo = 2;        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i].intOne = 1;            data[i].intTwo = 2;        }
data[i].intOne = 1;
data[i].intOne = 1
data[i].intOne
data[i]
data
data
i
i
intOne
1
data[i].intTwo = 2;
data[i].intTwo = 2
data[i].intTwo
data[i]
data
data
i
i
intTwo
2
free(data);
free(data)
free
free
data
data
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(0,7,0)
(45,52,0)
(5,10,0)
(22,52,0)
(55,54,0)
(47,36,0)
(33,26,0)
(28,25,0)
(13,46,0)
(25,52,0)
(30,8,0)
(5,4,0)
(31,14,0)
(34,16,0)
(32,36,0)
(24,49,0)
(43,55,0)
(36,52,0)
(41,53,0)
(18,53,0)
(49,36,0)
(10,5,0)
(14,52,0)
(42,52,0)
(2,49,0)
(53,36,0)
(35,54,0)
(27,47,0)
(51,32,0)
(21,55,0)
(25,36,0)
(44,37,0)
(4,9,0)
(2,7,0)
(46,47,0)
(49,54,0)
(46,16,0)
(45,6,0)
(32,6,0)
(6,32,0)
(16,1,0)
(39,2,0)
(20,54,0)
(47,54,0)
(12,50,0)
(38,37,0)
(47,46,0)
(23,36,0)
(10,8,0)
(8,10,0)
(40,14,0)
(36,4,0)
(3,10,0)
(48,47,0)
(11,29,0)
(11,50,0)
(49,2,0)
(37,52,0)
(17,32,0)
(50,11,0)
(9,4,0)
(15,49,0)
(6,45,0)
(4,36,0)
(26,54,0)
(4,5,0)
(7,1,0)
(16,34,1)
(6,32,1)
(47,48,1)
(21,26,1)
(2,39,1)
(20,53,1)
(8,30,1)
(55,43,1)
(47,36,1)
(13,47,1)
(3,23,1)
(21,54,1)
(49,54,1)
(12,53,1)
(26,54,1)
(48,27,1)
(40,31,1)
(5,10,1)
(53,36,1)
(26,33,1)
(19,45,1)
(20,11,1)
(25,28,1)
(11,50,1)
(49,24,1)
(47,54,1)
(46,13,1)
(51,17,1)
(14,40,1)
(30,3,1)
(33,16,1)
(10,8,1)
(15,55,1)
(23,14,1)
(4,5,1)
(55,54,1)
(46,47,1)
(50,12,1)
(32,51,1)
(24,15,1)
(17,25,1)
(4,9,1)
(27,7,1)
(39,49,1)
(36,4,1)
(49,36,1)
(34,46,1)
(28,55,1)
(43,21,1)
(7,0,1)
(45,6,1)
(18,41,1)
(0,2,1)
(2,49,1)
(54,35,1)
(53,18,1)
(41,36,1)
(25,36,1)
(32,36,1)
(35,20,1)
(26,55,2)
(0,55,2)
(16,55,2)
(55,54,2)
(49,55,2)
(53,36,2)
(46,55,2)
(4,5,2)
(49,54,2)
(15,55,2)
(11,53,2)
(2,49,2)
(10,8,2)
(25,36,2)
(39,55,2)
(4,9,2)
(47,36,2)
(21,55,2)
(48,55,2)
(26,54,2)
(43,55,2)
(32,36,2)
(55,55,2)
(6,32,2)
(47,55,2)
(46,47,2)
(50,53,2)
(33,55,2)
(11,50,2)
(49,36,2)
(34,55,2)
(13,55,2)
(27,55,2)
(36,4,2)
(47,54,2)
(2,55,2)
(24,55,2)
(5,10,2)
(12,53,2)
(45,6,2)
(7,55,2)
-----------------------------------
(0,1)
(1,)
(2,data[i].intOne)
(3,100)
(4,(twoIntsStruct *)
(5,malloc(100*sizeof(twoIntsStruct)
(6,&data[0])
(7,data[i].intOne = 1)
(8,sizeof(twoIntsStruct)
(9,twoIntsStruct *)
(10,100*sizeof(twoIntsStruct)
(11,exit(-1)
(12,1)
(13,intTwo)
(14,data = NULL)
(15,data)
(16,data[i].intTwo = 2)
(17,data)
(18,NULL)
(19,RET)
(20,i)
(21,i)
(22,if (data == NULL)
(23,data)
(24,i)
(25,free(data)
(26,i++)
(27,data)
(28,data)
(29,)
(30,twoIntsStruct)
(31,data)
(32,data[0])
(33,i)
(34,2)
(35,0)
(36,data = (twoIntsStruct *)
(37,)
(38,i)
(39,intOne)
(40,NULL)
(41,data)
(42,data)
(43,100)
(44,for(i = 0; i < 100; i++)
(45,printStructLine(&data[0])
(46,data[i].intTwo)
(47,data[i])
(48,i)
(49,data[i])
(50,-1)
(51,0)
(52,)
(53,data == NULL)
(54,i = 0)
(55,i < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^