-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_11_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(globalReturnsTrue())
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
73,74
74,75
74,76
75,76
77,78
77,79
79,80
81,82
81,83
82,83
83,84
83,85
84,85
86,87
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
98,99
99,100
101,102
101,103
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
108,109
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
118,119
122,123
122,124
122,125
123,124
124,125
124,126
125,126
127,128
129,130
129,131
129,132
129,133
130,131
131,132
131,133
132,133
135,136
135,137
136,137
139,140
140,141
142,143
143,144
144,145
144,146
145,146
145,147
146,147
148,149
150,151
150,152
151,152
153,154
155,156
156,157
156,158
157,158
159,160
160,161
160,162
161,162
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,64,69,71,76,78,80,85,87,92,93,96,97,100,107,109,110,111,117,119,120,121,126,128,133,134,137,138,141,147,149,152,154,158,162,163
-----computeFrom-----
30,31
30,32
54,55
54,56
67,68
67,69
90,91
90,92
94,95
94,96
103,104
103,105
113,114
113,115
131,132
131,133
135,136
135,137
144,145
144,146
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_11_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_11_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_11_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalReturnsTrue())    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(40,39,0)
(78,11,0)
(13,79,0)
(27,66,0)
(54,9,0)
(56,64,0)
(59,11,0)
(33,30,0)
(19,9,0)
(52,6,0)
(68,66,0)
(58,42,0)
(63,66,0)
(50,80,0)
(22,78,0)
(19,45,0)
(77,19,0)
(46,79,0)
(11,78,0)
(43,55,0)
(73,71,0)
(72,80,0)
(45,68,0)
(6,52,0)
(65,71,0)
(14,56,0)
(10,64,0)
(18,36,0)
(6,41,0)
(0,46,0)
(57,9,0)
(44,68,0)
(42,71,0)
(38,21,0)
(8,39,0)
(29,43,0)
(55,60,0)
(79,41,0)
(3,71,0)
(45,49,0)
(60,55,0)
(78,22,0)
(16,38,0)
(20,42,0)
(9,11,0)
(1,19,0)
(67,76,0)
(6,36,0)
(56,9,0)
(48,39,0)
(60,78,0)
(35,3,0)
(31,39,0)
(38,42,0)
(23,53,0)
(76,71,0)
(53,71,0)
(5,55,0)
(7,50,0)
(55,43,0)
(41,79,0)
(28,66,0)
(41,6,0)
(9,2,0)
(69,34,0)
(4,34,0)
(17,53,0)
(30,34,0)
(76,50,0)
(64,56,0)
(36,6,0)
(74,56,0)
(68,45,0)
(32,69,0)
(26,68,0)
(34,39,0)
(11,39,0)
(25,69,0)
(79,46,0)
(37,21,0)
(10,30,0)
(36,39,0)
(47,76,0)
(70,12,0)
(78,60,0)
(19,66,0)
(50,76,0)
(12,66,0)
(80,75,0)
(51,12,0)
(42,38,0)
(15,27,0)
(21,75,0)
(64,10,0)
(61,30,0)
(19,77,1)
(43,29,1)
(62,36,1)
(17,3,1)
(42,58,1)
(74,14,1)
(9,11,1)
(78,60,1)
(47,53,1)
(36,6,1)
(58,20,1)
(12,66,1)
(68,44,1)
(64,56,1)
(10,64,1)
(26,19,1)
(51,27,1)
(66,63,1)
(77,1,1)
(14,12,1)
(3,35,1)
(72,50,1)
(79,46,1)
(6,52,1)
(15,45,1)
(76,67,1)
(45,68,1)
(68,66,1)
(50,7,1)
(23,17,1)
(18,11,1)
(53,23,1)
(76,71,1)
(55,43,1)
(73,9,1)
(51,66,1)
(29,5,1)
(37,38,1)
(27,15,1)
(11,78,1)
(73,62,1)
(7,76,1)
(60,55,1)
(17,71,1)
(13,18,1)
(0,13,1)
(6,41,1)
(20,80,1)
(67,47,1)
(27,66,1)
(46,0,1)
(28,53,1)
(35,21,1)
(12,70,1)
(80,72,1)
(16,42,1)
(78,22,1)
(21,37,1)
(42,71,1)
(65,73,1)
(38,42,1)
(3,71,1)
(5,59,1)
(54,62,1)
(24,10,1)
(53,71,1)
(63,28,1)
(71,65,1)
(50,76,1)
(38,16,1)
(44,26,1)
(1,12,1)
(56,74,1)
(57,54,1)
(41,79,1)
(19,66,1)
(19,9,1)
(70,51,1)
(56,9,1)
(9,57,1)
(78,60,2)
(38,42,2)
(41,79,2)
(19,12,2)
(27,66,2)
(68,12,2)
(54,62,2)
(53,71,2)
(45,68,2)
(7,53,2)
(21,53,2)
(51,12,2)
(12,12,2)
(27,12,2)
(50,76,2)
(68,66,2)
(77,12,2)
(6,52,2)
(42,53,2)
(36,6,2)
(47,53,2)
(35,53,2)
(57,62,2)
(45,12,2)
(76,71,2)
(37,53,2)
(9,11,2)
(10,64,2)
(58,53,2)
(64,56,2)
(79,46,2)
(72,53,2)
(11,78,2)
(42,71,2)
(23,53,2)
(44,12,2)
(55,43,2)
(15,12,2)
(76,53,2)
(50,53,2)
(3,53,2)
(16,53,2)
(17,53,2)
(70,12,2)
(20,53,2)
(26,12,2)
(9,62,2)
(56,9,2)
(6,41,2)
(1,12,2)
(53,53,2)
(78,22,2)
(38,53,2)
(3,71,2)
(19,66,2)
(67,53,2)
(12,66,2)
(80,53,2)
(19,9,2)
(60,55,2)
-----------------------------------
(0,twoIntsStruct)
(1,data)
(2,)
(3,i++)
(4,source)
(5,50)
(6,(twoIntsStruct *)
(7,intOne)
(8,if(globalReturnsTrue()
(9,data = dataBadBuffer)
(10,printStructLine(&data[0])
(11,* dataBadBuffer = (twoIntsStruct *)
(12,i < 100)
(13,100)
(14,data)
(15,i)
(16,intTwo)
(17,i)
(18,dataGoodBuffer)
(19,data[i])
(20,source)
(21,source[i].intTwo = 0)
(22,twoIntsStruct *)
(23,100)
(24,RET)
(25,i)
(26,source)
(27,i++)
(28,i)
(29,twoIntsStruct)
(30,)
(31,dataBadBuffer)
(32,for (i = 0; i < 100; i++)
(33,i)
(34,)
(35,i)
(36,* dataGoodBuffer = (twoIntsStruct *)
(37,0)
(38,source[i].intTwo)
(39,)
(40,dataGoodBuffer)
(41,ALLOCA(100*sizeof(twoIntsStruct)
(42,source[i])
(43,sizeof(twoIntsStruct)
(44,i)
(45,data[i] = source[i])
(46,sizeof(twoIntsStruct)
(47,source)
(48,data)
(49,)
(50,source[i].intOne)
(51,i)
(52,twoIntsStruct *)
(53,i < 100)
(54,data)
(55,50*sizeof(twoIntsStruct)
(56,data[0])
(57,dataBadBuffer)
(58,i)
(59,dataBadBuffer)
(60,ALLOCA(50*sizeof(twoIntsStruct)
(61,for (i = 0; i < 100; i++)
(62,globalReturnsTrue()
(63,0)
(64,&data[0])
(65,0)
(66,i = 0)
(67,i)
(68,source[i])
(69,)
(70,100)
(71,i = 0)
(72,0)
(73,i)
(74,0)
(75,)
(76,source[i])
(77,i)
(78,(twoIntsStruct *)
(79,100*sizeof(twoIntsStruct)
(80,source[i].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^