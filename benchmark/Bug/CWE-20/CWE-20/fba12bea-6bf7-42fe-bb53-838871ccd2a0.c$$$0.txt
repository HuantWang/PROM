-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
53,59
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,80,82,87,88,91,94,95,98,104,106,109,111,115,117,121,123
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
75,76
75,77
85,86
85,87
89,90
89,91
92,93
92,94
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05_bad(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05_bad
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
staticTrue
staticTrue
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,6,0)
(0,43,0)
(11,25,0)
(57,43,0)
(45,43,0)
(47,55,0)
(47,37,0)
(44,43,0)
(54,12,0)
(49,44,0)
(28,56,0)
(17,37,0)
(33,43,0)
(40,3,0)
(16,36,0)
(56,4,0)
(23,40,0)
(50,4,0)
(25,36,0)
(59,4,0)
(56,36,0)
(14,39,0)
(39,53,0)
(45,54,0)
(56,53,0)
(39,4,0)
(34,25,0)
(52,35,0)
(36,52,0)
(57,36,0)
(26,18,0)
(5,18,0)
(19,55,0)
(27,42,0)
(18,41,0)
(15,27,0)
(54,45,0)
(38,53,0)
(36,6,0)
(3,40,0)
(3,10,0)
(27,43,0)
(31,4,0)
(41,18,0)
(52,41,0)
(45,37,0)
(29,4,0)
(39,36,0)
(7,45,0)
(58,42,0)
(21,48,0)
(13,47,0)
(37,4,0)
(24,37,0)
(57,53,0)
(20,57,0)
(52,36,0)
(55,47,0)
(30,45,0)
(4,48,0)
(55,4,0)
(42,27,0)
(51,48,0)
(1,5,0)
(53,48,0)
(18,5,0)
(35,52,0)
(41,52,0)
(42,55,0)
(22,57,0)
(57,54,0)
(32,53,0)
(46,42,0)
(20,27,1)
(30,7,1)
(15,44,1)
(37,24,1)
(46,58,1)
(53,32,1)
(45,43,1)
(56,53,1)
(44,49,1)
(47,37,1)
(44,43,1)
(16,9,1)
(8,56,1)
(49,54,1)
(54,45,1)
(34,11,1)
(19,37,1)
(27,42,1)
(9,53,1)
(43,0,1)
(3,40,1)
(41,18,1)
(28,39,1)
(47,13,1)
(45,30,1)
(57,43,1)
(56,28,1)
(40,23,1)
(27,43,1)
(17,9,1)
(22,20,1)
(13,19,1)
(39,36,1)
(56,36,1)
(42,55,1)
(58,15,1)
(7,57,1)
(0,33,1)
(26,16,1)
(39,53,1)
(23,25,1)
(17,25,1)
(5,1,1)
(57,22,1)
(24,17,1)
(42,46,1)
(57,53,1)
(18,5,1)
(33,55,1)
(55,47,1)
(36,52,1)
(52,35,1)
(52,41,1)
(45,37,1)
(25,34,1)
(57,36,1)
(17,3,1)
(1,26,1)
(11,36,1)
(14,27,1)
(39,14,1)
(25,36,1)
(15,43,1)
(32,38,1)
(27,43,2)
(41,18,2)
(41,9,2)
(42,27,2)
(45,37,2)
(34,9,2)
(26,9,2)
(25,9,2)
(15,27,2)
(57,43,2)
(36,52,2)
(45,27,2)
(27,42,2)
(52,41,2)
(39,36,2)
(5,9,2)
(3,25,2)
(23,25,2)
(3,40,2)
(39,53,2)
(47,37,2)
(44,27,2)
(54,45,2)
(55,47,2)
(36,9,2)
(49,27,2)
(56,53,2)
(40,25,2)
(52,9,2)
(58,27,2)
(52,35,2)
(11,9,2)
(54,27,2)
(25,36,2)
(57,27,2)
(44,43,2)
(16,9,2)
(20,27,2)
(57,36,2)
(46,27,2)
(56,36,2)
(57,53,2)
(7,27,2)
(27,27,2)
(42,55,2)
(18,5,2)
(22,27,2)
(30,27,2)
(45,43,2)
(18,9,2)
(1,9,2)
-----------------------------------
(0,0)
(1,wchar_t)
(2,if (data == NULL)
(3,exit(-1)
(4,)
(5,sizeof(wchar_t)
(6,)
(7,source)
(8,RET)
(9,staticTrue)
(10,)
(11,data)
(12,)
(13,source)
(14,data)
(15,i)
(16,data)
(17,source)
(18,10*sizeof(wchar_t)
(19,sourceLen)
(20,data)
(21,if(staticTrue)
(22,i)
(23,1)
(24,SRC_STRING)
(25,data == NULL)
(26,10)
(27,i < sourceLen + 1)
(28,data)
(29,source)
(30,i)
(31,for (i = 0; i < sourceLen + 1; i++)
(32,NULL)
(33,i)
(34,NULL)
(35,wchar_t *)
(36,data = (wchar_t *)
(37,source[10+1] = SRC_STRING)
(38,data)
(39,printWLine(data)
(40,-1)
(41,malloc(10*sizeof(wchar_t)
(42,sourceLen + 1)
(43,i = 0)
(44,i++)
(45,source[i])
(46,1)
(47,wcslen(source)
(48,)
(49,i)
(50,i)
(51,data)
(52,(wchar_t *)
(53,data = NULL)
(54,data[i] = source[i])
(55,sourceLen = wcslen(source)
(56,free(data)
(57,data[i])
(58,sourceLen)
(59,sourceLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^