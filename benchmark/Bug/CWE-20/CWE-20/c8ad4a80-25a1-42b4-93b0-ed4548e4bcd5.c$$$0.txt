-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,52,56,58,61,62,65,69,71,73,79,81,82,85,86,90,92,96,98
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
60,61
60,62
74,75
74,76
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad(){    char * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad
{    char * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,10,0)
(0,15,0)
(20,12,0)
(38,8,0)
(0,2,0)
(1,27,0)
(2,0,0)
(6,15,0)
(15,0,0)
(3,20,0)
(40,22,0)
(44,16,0)
(29,10,0)
(41,8,0)
(12,20,0)
(8,15,0)
(14,0,0)
(6,10,0)
(43,15,0)
(16,22,0)
(13,4,0)
(28,12,0)
(12,27,0)
(39,33,0)
(16,15,0)
(5,3,0)
(42,15,0)
(43,10,0)
(45,23,0)
(7,22,0)
(15,32,0)
(3,5,0)
(0,14,0)
(3,16,0)
(22,33,0)
(9,5,0)
(4,24,0)
(43,22,0)
(26,24,0)
(34,32,0)
(16,27,0)
(16,10,0)
(14,4,0)
(6,22,0)
(21,43,0)
(10,33,0)
(16,3,0)
(24,4,0)
(35,33,0)
(17,20,0)
(45,25,0)
(20,3,0)
(25,45,0)
(19,16,0)
(4,14,0)
(37,25,0)
(36,27,0)
(18,32,0)
(30,6,0)
(44,27,1)
(1,36,1)
(8,15,1)
(17,12,1)
(30,16,1)
(40,7,1)
(3,5,1)
(25,37,1)
(12,27,1)
(43,15,1)
(37,8,1)
(31,43,1)
(43,22,1)
(19,44,1)
(36,34,1)
(3,20,1)
(12,28,1)
(34,8,1)
(0,14,1)
(6,15,1)
(24,26,1)
(22,40,1)
(20,17,1)
(45,25,1)
(42,11,1)
(34,45,1)
(26,13,1)
(0,2,1)
(9,20,1)
(13,42,1)
(4,24,1)
(28,19,1)
(38,41,1)
(20,12,1)
(43,21,1)
(6,30,1)
(8,38,1)
(36,11,1)
(16,15,1)
(15,0,1)
(16,3,1)
(6,22,1)
(41,15,1)
(27,1,1)
(14,4,1)
(21,6,1)
(16,27,1)
(11,22,1)
(16,22,1)
(5,9,1)
(4,24,2)
(15,11,2)
(20,12,2)
(45,8,2)
(3,5,2)
(38,11,2)
(0,2,2)
(6,15,2)
(45,25,2)
(13,11,2)
(16,3,2)
(16,22,2)
(0,14,2)
(14,11,2)
(43,15,2)
(16,15,2)
(34,11,2)
(25,8,2)
(26,11,2)
(16,27,2)
(43,22,2)
(8,11,2)
(15,0,2)
(42,11,2)
(24,11,2)
(14,4,2)
(8,15,2)
(6,22,2)
(3,20,2)
(41,11,2)
(0,11,2)
(4,11,2)
(37,8,2)
(12,27,2)
-----------------------------------
(0,(char *)
(1,SRC_STRING)
(2,char *)
(3,(strlen(source)
(4,10*sizeof(char)
(5,sizeof(char)
(6,printLine(data)
(7,data)
(8,data == NULL)
(9,char)
(10,)
(11,1)
(12,strlen(source)
(13,10)
(14,malloc(10*sizeof(char)
(15,data = (char *)
(16,memcpy(data, source, (strlen(source)
(17,1)
(18,if (data == NULL)
(19,source)
(20,strlen(source)
(21,data)
(22,data = NULL)
(23,)
(24,sizeof(char)
(25,-1)
(26,char)
(27,source[10+1] = SRC_STRING)
(28,source)
(29,source)
(30,data)
(31,RET)
(32,)
(33,)
(34,break;)
(35,while(1)
(36,source)
(37,1)
(38,NULL)
(39,data)
(40,NULL)
(41,data)
(42,data)
(43,free(data)
(44,data)
(45,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^