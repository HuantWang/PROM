-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad()
{
    void * data;
    data = NULL;
    data = badSource(data);
    {
        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
        size_t dataLen = strlen((char *)data);
        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
        if (dest == NULL) {exit(-1);}
        (void)wcscpy(dest, data);
        printLine((char *)dest);
        free(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
38,40
39,40
39,41
41,42
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
57,59
57,60
58,59
60,61
60,62
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
83,85
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,31,33,37,40,42,44,47,49,50,54,56,59,62,63,66,67,71,73,78,80,84,85,88,90,92,96,99,101,103,107,109
-----computeFrom-----
13,14
13,15
19,20
19,21
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad(){    void * data;    data = NULL;    data = badSource(data);    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE135_42_bad
{    void * data;    data = NULL;    data = badSource(data);    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
void * data;
void * data;
void
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void
* dest = (void *)calloc(dataLen+1, sizeof(wchar_t))
*
dest
= (void *)calloc(dataLen+1, sizeof(wchar_t))
(void *)calloc(dataLen+1, sizeof(wchar_t))
void *
void
*
*
calloc(dataLen+1, sizeof(wchar_t))
calloc
calloc
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

if (dest == NULL) {exit(-1);}
dest == NULL
dest
dest
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
free(dest);
free(dest)
free
free
dest
dest
-----joern-----
(1,47,0)
(14,39,0)
(8,34,0)
(22,33,0)
(42,10,0)
(6,7,0)
(46,2,0)
(33,34,0)
(43,7,0)
(47,13,0)
(36,17,0)
(21,12,0)
(0,34,0)
(21,7,0)
(29,34,0)
(4,8,0)
(27,40,0)
(20,17,0)
(24,14,0)
(7,21,0)
(28,17,0)
(18,39,0)
(47,1,0)
(17,7,0)
(23,14,0)
(38,34,0)
(11,34,0)
(33,22,0)
(9,2,0)
(36,34,0)
(5,13,0)
(2,11,0)
(35,42,0)
(19,42,0)
(32,23,0)
(37,6,0)
(41,6,0)
(31,40,0)
(42,22,0)
(40,31,0)
(23,10,0)
(16,14,0)
(10,39,0)
(2,10,0)
(34,39,0)
(11,44,0)
(31,45,0)
(10,23,0)
(7,34,0)
(21,47,0)
(17,28,0)
(25,1,0)
(13,47,0)
(30,13,0)
(44,11,0)
(42,19,0)
(12,21,0)
(47,21,0)
(17,36,0)
(2,7,0)
(3,10,0)
(11,2,0)
(8,7,0)
(13,33,0)
(22,42,0)
(15,33,0)
(21,12,1)
(40,27,1)
(42,35,1)
(42,10,1)
(11,44,1)
(35,15,1)
(2,46,1)
(25,13,1)
(47,1,1)
(42,19,1)
(30,5,1)
(3,14,1)
(43,33,1)
(13,33,1)
(23,14,1)
(27,6,1)
(8,4,1)
(23,32,1)
(1,25,1)
(20,11,1)
(17,28,1)
(10,23,1)
(13,30,1)
(17,20,1)
(24,16,1)
(17,7,1)
(46,9,1)
(36,17,1)
(14,24,1)
(4,36,1)
(9,6,1)
(6,7,1)
(9,31,1)
(15,10,1)
(32,3,1)
(5,43,1)
(2,7,1)
(8,7,1)
(6,41,1)
(11,2,1)
(41,37,1)
(7,21,1)
(31,40,1)
(21,47,1)
(2,10,1)
(33,22,1)
(26,8,1)
(47,13,1)
(22,42,1)
(37,7,1)
(8,7,2)
(21,12,2)
(21,47,2)
(42,10,2)
(13,33,2)
(17,28,2)
(2,10,2)
(7,21,2)
(11,2,2)
(27,6,2)
(22,42,2)
(23,14,2)
(10,23,2)
(31,6,2)
(42,19,2)
(47,1,2)
(11,44,2)
(2,7,2)
(40,6,2)
(6,7,2)
(36,17,2)
(31,40,2)
(47,13,2)
(17,7,2)
(33,22,2)
-----------------------------------
(0,dataLen)
(1,sizeof(wchar_t)
(2,wcscpy(dest, data)
(3,data)
(4,dest)
(5,dataLen)
(6,dest == NULL)
(7,* dest = (void *)
(8,free(dest)
(9,dest)
(10,data = badSource(data)
(11,(void)
(12,void *)
(13,dataLen+1)
(14,data = NULL)
(15,dataLen)
(16,data)
(17,(char *)
(18,data)
(19,char *)
(20,dest)
(21,(void *)
(22,strlen((char *)
(23,badSource(data)
(24,NULL)
(25,wchar_t)
(26,RET)
(27,1)
(28,char *)
(29,dest)
(30,1)
(31,exit(-1)
(32,data)
(33,dataLen = strlen((char *)
(34,)
(35,data)
(36,printLine((char *)
(37,dest)
(38,if (dest == NULL)
(39,)
(40,-1)
(41,NULL)
(42,(char *)
(43,dest)
(44,void)
(45,)
(46,data)
(47,calloc(dataLen+1, sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^