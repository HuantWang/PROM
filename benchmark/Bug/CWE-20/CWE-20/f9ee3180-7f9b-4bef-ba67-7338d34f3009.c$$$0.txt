-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_02_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(1)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
63,64
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
75,76
75,77
77,78
79,80
79,81
80,81
81,82
81,83
82,83
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
99,101
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
106,107
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
116,117
120,121
121,122
121,123
121,124
121,125
122,123
124,125
126,127
128,129
128,130
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
140,141
140,142
141,142
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,62,67,69,74,76,78,83,85,90,91,94,95,98,105,107,108,109,115,117,118,119,123,125,127,129,133,134,138,142,143
-----computeFrom-----
30,31
30,32
54,55
54,56
65,66
65,67
88,89
88,90
92,93
92,94
101,102
101,103
111,112
111,113
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_02_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_02_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_02_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
1
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(36,8,0)
(14,6,0)
(45,39,0)
(45,1,0)
(44,64,0)
(20,65,0)
(7,51,0)
(33,23,0)
(24,52,0)
(6,21,0)
(58,21,0)
(58,64,0)
(55,64,0)
(18,33,0)
(23,15,0)
(28,22,0)
(46,45,0)
(57,30,0)
(38,52,0)
(47,38,0)
(35,58,0)
(1,17,0)
(56,17,0)
(12,1,0)
(7,21,0)
(68,20,0)
(61,25,0)
(5,55,0)
(10,4,0)
(39,53,0)
(42,23,0)
(29,6,0)
(20,58,0)
(19,10,0)
(65,20,0)
(51,55,0)
(63,17,0)
(30,37,0)
(52,25,0)
(42,37,0)
(50,21,0)
(16,1,0)
(4,28,0)
(41,28,0)
(64,60,0)
(3,8,0)
(37,30,0)
(55,51,0)
(2,65,0)
(43,63,0)
(27,8,0)
(4,10,0)
(10,19,0)
(13,17,0)
(62,8,0)
(38,17,0)
(52,38,0)
(22,28,0)
(25,53,0)
(54,13,0)
(15,23,0)
(67,37,0)
(49,19,0)
(51,7,0)
(23,42,0)
(23,33,0)
(64,33,0)
(40,55,0)
(11,10,0)
(1,45,0)
(21,8,0)
(19,8,0)
(58,20,0)
(34,17,0)
(48,39,0)
(10,11,0)
(28,4,0)
(26,64,0)
(33,8,0)
(0,58,0)
(66,22,0)
(31,38,0)
(59,13,0)
(37,42,0)
(13,17,1)
(65,2,1)
(42,37,1)
(10,4,1)
(23,15,1)
(49,33,1)
(16,25,1)
(4,28,1)
(13,59,1)
(67,18,1)
(61,52,1)
(54,17,1)
(66,41,1)
(63,17,1)
(47,13,1)
(48,45,1)
(40,5,1)
(1,17,1)
(10,11,1)
(56,64,1)
(7,51,1)
(55,40,1)
(68,0,1)
(28,22,1)
(33,23,1)
(23,42,1)
(45,46,1)
(41,49,1)
(57,67,1)
(44,26,1)
(51,55,1)
(46,1,1)
(22,66,1)
(52,38,1)
(25,61,1)
(30,57,1)
(20,65,1)
(63,43,1)
(5,58,1)
(52,24,1)
(39,48,1)
(0,35,1)
(58,64,1)
(17,34,1)
(9,19,1)
(58,20,1)
(34,56,1)
(19,10,1)
(43,39,1)
(12,16,1)
(35,13,1)
(56,9,1)
(31,47,1)
(55,64,1)
(38,17,1)
(32,7,1)
(38,31,1)
(1,12,1)
(24,38,1)
(26,9,1)
(45,1,1)
(54,63,1)
(64,33,1)
(2,68,1)
(64,44,1)
(59,54,1)
(37,30,1)
(33,23,2)
(10,4,2)
(1,13,2)
(7,51,2)
(1,17,2)
(28,22,2)
(48,13,2)
(58,64,2)
(31,13,2)
(20,65,2)
(61,13,2)
(59,13,2)
(13,13,2)
(58,20,2)
(47,13,2)
(42,37,2)
(38,13,2)
(24,13,2)
(37,30,2)
(4,28,2)
(55,64,2)
(54,13,2)
(44,9,2)
(52,38,2)
(45,13,2)
(63,13,2)
(38,17,2)
(26,9,2)
(63,17,2)
(16,13,2)
(45,1,2)
(13,17,2)
(23,15,2)
(51,55,2)
(10,11,2)
(46,13,2)
(19,10,2)
(64,33,2)
(12,13,2)
(64,9,2)
(52,13,2)
(25,13,2)
(23,42,2)
(43,13,2)
(39,13,2)
-----------------------------------
(0,source)
(1,source[i])
(2,twoIntsStruct)
(3,data)
(4,ALLOCA(100*sizeof(twoIntsStruct)
(5,data)
(6,)
(7,printStructLine(&data[0])
(8,)
(9,1)
(10,(twoIntsStruct *)
(11,twoIntsStruct *)
(12,i)
(13,i < 100)
(14,i)
(15,twoIntsStruct *)
(16,source)
(17,i = 0)
(18,dataBadBuffer)
(19,* dataGoodBuffer = (twoIntsStruct *)
(20,100*sizeof(twoIntsStruct)
(21,)
(22,sizeof(twoIntsStruct)
(23,(twoIntsStruct *)
(24,intOne)
(25,source[i].intOne = 0)
(26,data)
(27,if(1)
(28,100*sizeof(twoIntsStruct)
(29,for (i = 0; i < 100; i++)
(30,sizeof(twoIntsStruct)
(31,i)
(32,RET)
(33,* dataBadBuffer = (twoIntsStruct *)
(34,0)
(35,data)
(36,dataGoodBuffer)
(37,50*sizeof(twoIntsStruct)
(38,source[i])
(39,source[i].intTwo = 0)
(40,0)
(41,100)
(42,ALLOCA(50*sizeof(twoIntsStruct)
(43,i)
(44,dataBadBuffer)
(45,source[i].intTwo)
(46,intTwo)
(47,source)
(48,0)
(49,dataGoodBuffer)
(50,source)
(51,&data[0])
(52,source[i].intOne)
(53,)
(54,i)
(55,data[0])
(56,i)
(57,twoIntsStruct)
(58,memcpy(data, source, 100*sizeof(twoIntsStruct)
(59,100)
(60,)
(61,0)
(62,dataBadBuffer)
(63,i++)
(64,data = dataBadBuffer)
(65,sizeof(twoIntsStruct)
(66,twoIntsStruct)
(67,50)
(68,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^