-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_wchar_t_34_bad()
{
    wchar_t * data;
    CWE415_Double_Free__malloc_free_wchar_t_34_unionType myUnion;
    /* Initialize data */
    data = NULL;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
73,76
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,65,66,68,72,74,75,79,80,84,86
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_wchar_t_34_bad(){    wchar_t * data;    CWE415_Double_Free__malloc_free_wchar_t_34_unionType myUnion;    /* Initialize data */    data = NULL;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_wchar_t_34_bad()
CWE415_Double_Free__malloc_free_wchar_t_34_bad
{    wchar_t * data;    CWE415_Double_Free__malloc_free_wchar_t_34_unionType myUnion;    /* Initialize data */    data = NULL;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE415_Double_Free__malloc_free_wchar_t_34_unionType myUnion;
CWE415_Double_Free__malloc_free_wchar_t_34_unionType myUnion;
CWE415_Double_Free__malloc_free_wchar_t_34_unionType
CWE415_Double_Free__malloc_free_wchar_t_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
free(data);
free(data)
free
free
data
data
-----joern-----
(6,10,0)
(25,31,0)
(20,25,0)
(23,5,0)
(30,20,0)
(3,30,0)
(31,17,0)
(31,22,0)
(34,16,0)
(21,8,0)
(5,33,0)
(36,33,0)
(9,19,0)
(27,32,0)
(22,21,0)
(17,31,0)
(13,32,0)
(14,32,0)
(10,25,0)
(25,32,0)
(16,25,0)
(11,9,0)
(12,16,0)
(1,30,0)
(7,8,0)
(38,35,0)
(29,27,0)
(37,5,0)
(39,21,0)
(31,25,0)
(5,37,0)
(18,32,0)
(35,5,0)
(10,32,0)
(20,32,0)
(35,33,0)
(2,37,0)
(19,15,0)
(22,31,0)
(33,32,0)
(19,9,0)
(0,27,0)
(28,20,0)
(21,22,0)
(8,21,0)
(24,25,0)
(4,37,0)
(29,0,1)
(26,35,1)
(11,16,1)
(24,27,1)
(16,12,1)
(20,25,1)
(35,5,1)
(3,1,1)
(31,22,1)
(34,25,1)
(4,2,1)
(6,19,1)
(10,6,1)
(6,16,1)
(25,31,1)
(35,38,1)
(9,11,1)
(19,9,1)
(20,28,1)
(23,20,1)
(37,4,1)
(39,24,1)
(38,5,1)
(5,37,1)
(16,25,1)
(12,34,1)
(31,17,1)
(22,21,1)
(21,8,1)
(2,23,1)
(10,25,1)
(7,39,1)
(27,29,1)
(1,10,1)
(8,7,1)
(28,30,1)
(30,3,1)
(19,16,2)
(31,22,2)
(20,25,2)
(9,16,2)
(22,21,2)
(16,25,2)
(35,5,2)
(11,16,2)
(21,8,2)
(5,37,2)
(19,9,2)
(25,31,2)
(10,25,2)
(31,17,2)
-----------------------------------
(0,data)
(1,myUnion)
(2,myUnion)
(3,unionFirst)
(4,unionSecond)
(5,* data = myUnion.unionSecond)
(6,data)
(7,wchar_t)
(8,sizeof(wchar_t)
(9,-1)
(10,free(data)
(11,1)
(12,NULL)
(13,if (data == NULL)
(14,data)
(15,)
(16,data == NULL)
(17,wchar_t *)
(18,myUnion)
(19,exit(-1)
(20,myUnion.unionFirst = data)
(21,100*sizeof(wchar_t)
(22,malloc(100*sizeof(wchar_t)
(23,data)
(24,data)
(25,data = (wchar_t *)
(26,RET)
(27,data = NULL)
(28,data)
(29,NULL)
(30,myUnion.unionFirst)
(31,(wchar_t *)
(32,)
(33,)
(34,data)
(35,free(data)
(36,data)
(37,myUnion.unionSecond)
(38,data)
(39,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^