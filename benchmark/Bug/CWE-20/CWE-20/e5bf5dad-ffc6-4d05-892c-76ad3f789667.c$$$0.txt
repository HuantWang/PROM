-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_char_memcpy_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        memcpy(data, source, 100*sizeof(char));
        /* Ensure the destination buffer is null terminated */
        data[100-1] = '\0';
        printLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
25,26
25,27
25,28
28,29
29,30
29,31
30,31
30,32
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
83,85
83,86
83,87
83,88
83,89
84,85
85,86
85,87
87,88
87,89
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
111,114
111,115
112,113
114,115
116,117
118,119
118,120
120,121
121,122
121,123
124,125
125,126
125,127
126,127
126,128
127,128
129,130
129,131
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,31,33,36,38,41,42,46,48,53,55,59,61,62,64,65,70,72,73,74,78,81,82,86,88,90,94,96,97,99,100,105,107,108,109,113,115,117,119,122,123,128,130,131,132,136,138
-----computeFrom-----
13,14
13,15
37,38
37,39
44,45
44,46
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
79,80
79,81
98,99
98,100
102,103
102,104
106,107
106,108
118,119
118,120
125,126
125,127
129,130
129,131
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_char_memcpy_02_bad(){    char * data;    data = NULL;    if(1)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(char));        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_char_memcpy_02_bad()
CWE124_Buffer_Underwrite__malloc_char_memcpy_02_bad
{    char * data;    data = NULL;    if(1)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(char));        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
1
{        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        memcpy(data, source, 100*sizeof(char));        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(30,27,0)
(19,28,0)
(55,10,0)
(41,3,0)
(35,41,0)
(66,52,0)
(20,24,0)
(62,78,0)
(61,73,0)
(48,52,0)
(7,26,0)
(36,20,0)
(42,46,0)
(26,78,0)
(22,27,0)
(74,73,0)
(47,73,0)
(0,31,0)
(0,17,0)
(3,41,0)
(71,31,0)
(74,46,0)
(1,42,0)
(50,55,0)
(41,42,0)
(4,25,0)
(52,26,0)
(46,74,0)
(9,46,0)
(80,17,0)
(2,78,0)
(59,17,0)
(41,4,0)
(6,43,0)
(14,47,0)
(70,20,0)
(38,33,0)
(43,30,0)
(8,40,0)
(15,17,0)
(43,17,0)
(23,34,0)
(17,78,0)
(43,26,0)
(37,42,0)
(53,64,0)
(27,30,0)
(44,5,0)
(58,41,0)
(73,74,0)
(72,31,0)
(34,18,0)
(43,24,0)
(30,43,0)
(24,20,0)
(69,3,0)
(11,80,0)
(80,26,0)
(40,1,0)
(42,4,0)
(32,33,0)
(29,0,0)
(0,24,0)
(68,24,0)
(67,34,0)
(24,4,0)
(20,42,0)
(18,34,0)
(55,50,0)
(21,4,0)
(56,28,0)
(65,7,0)
(52,33,0)
(28,42,0)
(51,26,0)
(49,40,0)
(46,42,0)
(64,26,0)
(33,52,0)
(80,24,0)
(45,30,0)
(76,43,0)
(0,7,0)
(73,47,0)
(1,40,0)
(1,5,0)
(60,3,0)
(5,4,0)
(31,0,0)
(77,18,0)
(18,64,0)
(46,9,0)
(54,1,0)
(63,50,0)
(16,4,0)
(58,35,1)
(65,0,1)
(66,12,1)
(28,42,1)
(76,64,1)
(48,66,1)
(24,20,1)
(15,59,1)
(33,38,1)
(11,7,1)
(38,32,1)
(36,68,1)
(3,69,1)
(70,36,1)
(20,42,1)
(69,60,1)
(43,24,1)
(44,1,1)
(42,46,1)
(27,22,1)
(67,23,1)
(77,52,1)
(60,58,1)
(41,3,1)
(54,41,1)
(32,48,1)
(6,76,1)
(23,77,1)
(46,9,1)
(40,8,1)
(35,55,1)
(1,40,1)
(55,50,1)
(0,17,1)
(56,19,1)
(7,65,1)
(80,24,1)
(71,29,1)
(61,37,1)
(0,24,1)
(22,45,1)
(63,28,1)
(28,56,1)
(74,73,1)
(13,80,1)
(0,31,1)
(43,17,1)
(46,74,1)
(17,15,1)
(5,44,1)
(73,47,1)
(53,18,1)
(68,5,1)
(37,12,1)
(72,71,1)
(41,42,1)
(50,63,1)
(35,28,1)
(20,70,1)
(1,42,1)
(49,54,1)
(43,30,1)
(12,17,1)
(80,17,1)
(19,42,1)
(66,24,1)
(52,33,1)
(18,34,1)
(47,14,1)
(30,27,1)
(64,53,1)
(45,6,1)
(80,11,1)
(31,72,1)
(8,49,1)
(34,67,1)
(29,43,1)
(14,61,1)
(40,12,2)
(24,12,2)
(61,12,2)
(47,12,2)
(55,50,2)
(19,12,2)
(70,12,2)
(1,42,2)
(58,12,2)
(43,30,2)
(74,12,2)
(50,28,2)
(41,3,2)
(52,33,2)
(41,12,2)
(0,31,2)
(43,24,2)
(18,34,2)
(46,74,2)
(80,24,2)
(49,12,2)
(1,40,2)
(8,12,2)
(36,12,2)
(28,42,2)
(69,12,2)
(14,12,2)
(73,12,2)
(30,27,2)
(55,28,2)
(35,12,2)
(42,12,2)
(46,9,2)
(74,73,2)
(60,12,2)
(44,12,2)
(20,42,2)
(0,17,2)
(46,12,2)
(20,12,2)
(0,24,2)
(41,42,2)
(42,46,2)
(37,12,2)
(63,28,2)
(3,12,2)
(24,20,2)
(28,12,2)
(68,12,2)
(56,12,2)
(73,47,2)
(80,17,2)
(54,12,2)
(1,12,2)
(5,12,2)
(43,17,2)
-----------------------------------
(0,data[100-1])
(1,dataBuffer[100-1])
(2,data)
(3,100-1)
(4,)
(5,dataBuffer[100-1] = \'\\\\0\')
(6,source)
(7,data[100-1] = '\\\\0')
(8,1)
(9,char *)
(10,)
(11,data)
(12,1)
(13,RET)
(14,char)
(15,NULL)
(16,dataBuffer)
(17,data = NULL)
(18,source[100-1])
(19,dataBuffer)
(20,dataBuffer - 8)
(21,if (dataBuffer == NULL)
(22,char)
(23,100)
(24,data = dataBuffer - 8)
(25,)
(26,)
(27,sizeof(char)
(28,dataBuffer == NULL)
(29,data)
(30,100*sizeof(char)
(31,100-1)
(32,100)
(33,100-1)
(34,100-1)
(35,dataBuffer)
(36,dataBuffer)
(37,dataBuffer)
(38,1)
(39,dataBuffer[100-1] = '\\\\0')
(40,100-1)
(41,memset(dataBuffer, \'A\', 100-1)
(42,* dataBuffer = (char *)
(43,memcpy(data, source, 100*sizeof(char)
(44,\'\\\\0\')
(45,100)
(46,(char *)
(47,sizeof(char)
(48,'C')
(49,100)
(50,-1)
(51,source)
(52,memset(source, 'C', 100-1)
(53,'\\\\0')
(54,dataBuffer)
(55,exit(-1)
(56,NULL)
(57,memset(source, \'C\', 100-1)
(58,\'A\')
(59,data)
(60,100)
(61,100)
(62,if(1)
(63,1)
(64,source[100-1] = '\\\\0')
(65,'\\\\0')
(66,source)
(67,1)
(68,data)
(69,1)
(70,8)
(71,100)
(72,1)
(73,100*sizeof(char)
(74,malloc(100*sizeof(char)
(75,'\\\\0')
(76,data)
(77,source)
(78,)
(79,'A')
(80,printLine(data)
(81,memset(dataBuffer, 'A', 100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^