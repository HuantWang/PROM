-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_long_16_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    while(1)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5L;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
53,54
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
60,61
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
72,73
73,74
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
83,84
85,86
88,89
88,90
90,91
90,92
91,92
92,93
92,94
93,94
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,58,63,64,67,68,71,77,79,80,84,86,87,89,94,97,98,99
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
61,62
61,63
65,66
65,67
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_long_16_bad(){    long * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
void
CWE416_Use_After_Free__malloc_free_long_16_bad()
CWE416_Use_After_Free__malloc_free_long_16_bad
{    long * data;    /* Initialize data */    data = NULL;    while(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
1
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);        break;    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5L;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5L;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5L;            }
data[i] = 5L;
data[i] = 5L
data[i]
data
data
i
i
5L
free(data);
free(data)
free
free
data
data
break;
while(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */        break;    }
printLongLine(data[0]);
printLongLine(data[0])
printLongLine
printLongLine
data[0]
data
data
0
break;
-----joern-----
(34,3,0)
(12,16,0)
(22,48,0)
(19,12,0)
(47,17,0)
(15,1,0)
(23,28,0)
(13,7,0)
(0,40,0)
(24,26,0)
(26,13,0)
(14,39,0)
(4,39,0)
(6,7,0)
(44,30,0)
(43,5,0)
(27,4,0)
(40,37,0)
(42,3,0)
(26,4,0)
(48,28,0)
(36,5,0)
(25,33,0)
(38,33,0)
(21,17,0)
(52,39,0)
(10,4,0)
(33,5,0)
(28,48,0)
(53,21,0)
(13,26,0)
(44,51,0)
(45,43,0)
(51,44,0)
(1,17,0)
(32,51,0)
(37,48,0)
(37,40,0)
(43,3,0)
(20,42,0)
(41,39,0)
(3,40,0)
(35,1,0)
(46,21,0)
(2,17,0)
(40,0,0)
(3,5,0)
(21,12,0)
(21,3,0)
(40,3,0)
(9,17,0)
(26,3,0)
(49,26,0)
(18,2,0)
(28,23,0)
(11,5,0)
(50,42,0)
(48,37,0)
(37,48,1)
(31,29,1)
(49,24,1)
(44,51,1)
(19,21,1)
(43,45,1)
(18,12,1)
(22,34,1)
(53,1,1)
(46,53,1)
(45,1,1)
(2,18,1)
(34,8,1)
(1,17,1)
(35,2,1)
(13,26,1)
(26,49,1)
(1,15,1)
(51,32,1)
(28,23,1)
(10,27,1)
(40,37,1)
(35,17,1)
(40,0,1)
(4,10,1)
(9,47,1)
(48,28,1)
(42,50,1)
(26,4,1)
(12,19,1)
(32,42,1)
(42,3,1)
(3,40,1)
(11,43,1)
(21,17,1)
(21,46,1)
(26,3,1)
(50,20,1)
(28,22,1)
(31,6,1)
(2,17,1)
(24,29,1)
(47,44,1)
(43,3,1)
(6,13,1)
(21,3,1)
(29,11,1)
(15,35,1)
(47,42,1)
(20,3,1)
(17,9,1)
(29,8,1)
(8,4,1)
(32,42,2)
(47,8,2)
(35,1,2)
(43,8,2)
(46,1,2)
(1,1,2)
(3,8,2)
(53,1,2)
(9,8,2)
(1,17,2)
(13,26,2)
(48,8,2)
(12,1,2)
(34,8,2)
(22,8,2)
(21,3,2)
(13,29,2)
(35,8,2)
(26,29,2)
(40,8,2)
(15,8,2)
(40,0,2)
(15,1,2)
(21,17,2)
(1,8,2)
(26,3,2)
(28,23,2)
(49,29,2)
(2,17,2)
(26,4,2)
(37,8,2)
(42,8,2)
(37,48,2)
(24,29,2)
(43,3,2)
(17,8,2)
(11,8,2)
(44,51,2)
(18,1,2)
(50,8,2)
(45,8,2)
(40,37,2)
(3,40,2)
(48,28,2)
(44,42,2)
(20,8,2)
(6,29,2)
(21,1,2)
(2,1,2)
(28,8,2)
(42,3,2)
(51,42,2)
(19,1,2)
-----------------------------------
(0,long *)
(1,i < 100)
(2,i++)
(3,data = (long *)
(4,data = NULL)
(5,)
(6,break;)
(7,)
(8,1)
(9,0)
(10,NULL)
(11,break;)
(12,data[i] = 5L)
(13,printLongLine(data[0])
(14,while(1)
(15,100)
(16,)
(17,i = 0)
(18,i)
(19,5L)
(20,data)
(21,data[i])
(22,100)
(23,long)
(24,data)
(25,i)
(26,data[0])
(27,data)
(28,sizeof(long)
(29,1)
(30,)
(31,RET)
(32,1)
(33,)
(34,data)
(35,i)
(36,if (data == NULL)
(37,malloc(100*sizeof(long)
(38,for(i = 0; i < 100; i++)
(39,)
(40,(long *)
(41,data)
(42,data == NULL)
(43,free(data)
(44,exit(-1)
(45,data)
(46,i)
(47,i)
(48,100*sizeof(long)
(49,0)
(50,NULL)
(51,-1)
(52,while(1)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^