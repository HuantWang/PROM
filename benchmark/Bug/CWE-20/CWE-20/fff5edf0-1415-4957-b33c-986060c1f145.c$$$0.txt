-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_02_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(1)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
63,64
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
71,72
72,73
72,74
73,74
75,76
75,77
77,78
79,80
79,81
80,81
81,82
81,83
82,83
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
99,101
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
106,107
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
116,117
120,121
120,122
120,123
121,122
122,123
122,124
123,124
125,126
127,128
127,129
127,130
127,131
128,129
129,130
129,131
130,131
133,134
133,135
134,135
137,138
138,139
140,141
141,142
142,143
142,144
143,144
143,145
144,145
146,147
148,149
148,150
149,150
151,152
153,154
154,155
154,156
155,156
157,158
158,159
158,160
159,160
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,62,67,69,74,76,78,83,85,90,91,94,95,98,105,107,108,109,115,117,118,119,124,126,131,132,135,136,139,145,147,150,152,156,160,161
-----computeFrom-----
30,31
30,32
54,55
54,56
65,66
65,67
88,89
88,90
92,93
92,94
101,102
101,103
111,112
111,113
129,130
129,131
133,134
133,135
142,143
142,144
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_02_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_02_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_02_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(1)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
1
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(1,11,0)
(71,11,0)
(65,76,0)
(62,10,0)
(79,61,0)
(11,77,0)
(58,29,0)
(50,28,0)
(64,80,0)
(48,31,0)
(39,9,0)
(8,33,0)
(46,57,0)
(20,31,0)
(42,31,0)
(55,73,0)
(54,72,0)
(3,77,0)
(19,30,0)
(61,72,0)
(80,22,0)
(2,48,0)
(23,7,0)
(52,33,0)
(32,53,0)
(59,4,0)
(40,7,0)
(7,77,0)
(61,58,0)
(55,60,0)
(63,27,0)
(38,21,0)
(72,61,0)
(73,55,0)
(10,63,0)
(69,33,0)
(36,42,0)
(50,36,0)
(24,33,0)
(49,17,0)
(10,4,0)
(60,55,0)
(11,39,0)
(7,76,0)
(80,21,0)
(68,37,0)
(0,53,0)
(18,30,0)
(14,77,0)
(70,76,0)
(30,18,0)
(76,21,0)
(57,4,0)
(27,29,0)
(37,22,0)
(31,33,0)
(56,77,0)
(69,55,0)
(43,72,0)
(15,27,0)
(66,58,0)
(17,4,0)
(53,77,0)
(39,11,0)
(44,10,0)
(13,63,0)
(60,18,0)
(47,68,0)
(22,80,0)
(55,69,0)
(22,37,0)
(21,80,0)
(18,60,0)
(28,50,0)
(34,48,0)
(28,76,0)
(37,68,0)
(16,56,0)
(26,18,0)
(75,33,0)
(76,12,0)
(51,57,0)
(41,37,0)
(21,33,0)
(80,64,0)
(7,39,0)
(36,50,0)
(67,28,0)
(74,69,0)
(63,10,0)
(25,42,0)
(6,42,0)
(45,4,0)
(5,28,0)
(72,4,0)
(69,55,1)
(79,72,1)
(36,50,1)
(63,10,1)
(44,62,1)
(5,53,1)
(13,10,1)
(11,1,1)
(47,41,1)
(70,65,1)
(80,22,1)
(21,80,1)
(17,49,1)
(72,4,1)
(53,77,1)
(51,17,1)
(71,7,1)
(7,23,1)
(80,64,1)
(15,63,1)
(40,53,1)
(28,67,1)
(49,27,1)
(10,44,1)
(26,74,1)
(32,77,1)
(57,4,1)
(68,47,1)
(41,38,1)
(55,60,1)
(32,56,1)
(28,76,1)
(76,70,1)
(39,11,1)
(35,36,1)
(11,77,1)
(27,15,1)
(30,19,1)
(76,21,1)
(56,77,1)
(46,51,1)
(37,68,1)
(16,39,1)
(19,26,1)
(72,54,1)
(78,69,1)
(50,28,1)
(45,78,1)
(54,43,1)
(23,40,1)
(66,61,1)
(65,78,1)
(61,72,1)
(53,0,1)
(45,76,1)
(43,57,1)
(7,76,1)
(59,45,1)
(4,59,1)
(57,46,1)
(74,21,1)
(17,4,1)
(56,16,1)
(63,13,1)
(77,3,1)
(1,71,1)
(51,4,1)
(10,4,1)
(7,77,1)
(14,57,1)
(18,30,1)
(22,37,1)
(0,32,1)
(3,14,1)
(61,79,1)
(60,18,1)
(67,5,1)
(58,66,1)
(55,73,1)
(62,58,1)
(15,57,2)
(65,78,2)
(46,57,2)
(69,55,2)
(16,53,2)
(7,53,2)
(72,4,2)
(0,53,2)
(32,53,2)
(7,77,2)
(22,37,2)
(10,4,2)
(7,76,2)
(57,4,2)
(57,57,2)
(56,77,2)
(58,57,2)
(79,57,2)
(44,57,2)
(17,4,2)
(72,57,2)
(61,72,2)
(39,53,2)
(51,57,2)
(66,57,2)
(28,76,2)
(76,78,2)
(1,53,2)
(61,57,2)
(60,18,2)
(80,22,2)
(10,57,2)
(13,57,2)
(50,28,2)
(27,57,2)
(17,57,2)
(62,57,2)
(37,68,2)
(11,77,2)
(56,53,2)
(55,60,2)
(55,73,2)
(40,53,2)
(43,57,2)
(54,57,2)
(23,53,2)
(49,57,2)
(71,53,2)
(80,64,2)
(53,53,2)
(63,10,2)
(63,57,2)
(39,11,2)
(53,77,2)
(11,53,2)
(36,50,2)
(76,21,2)
(70,78,2)
(18,30,2)
(21,80,2)
-----------------------------------
(0,100)
(1,i)
(2,i)
(3,0)
(4,i = 0)
(5,data)
(6,i)
(7,data[i])
(8,data)
(9,)
(10,source[i])
(11,source[i])
(12,)
(13,intTwo)
(14,i)
(15,0)
(16,i)
(17,i++)
(18,100*sizeof(twoIntsStruct)
(19,twoIntsStruct)
(20,source)
(21,* dataBadBuffer = (twoIntsStruct *)
(22,ALLOCA(50*sizeof(twoIntsStruct)
(23,i)
(24,dataGoodBuffer)
(25,for (i = 0; i < 100; i++)
(26,100)
(27,source[i].intTwo = 0)
(28,data[0])
(29,)
(30,sizeof(twoIntsStruct)
(31,)
(32,i)
(33,)
(34,for (i = 0; i < 100; i++)
(35,RET)
(36,printStructLine(&data[0])
(37,50*sizeof(twoIntsStruct)
(38,dataBadBuffer)
(39,data[i] = source[i])
(40,data)
(41,50)
(42,)
(43,source)
(44,i)
(45,i)
(46,100)
(47,twoIntsStruct)
(48,)
(49,i)
(50,&data[0])
(51,i)
(52,if(1)
(53,i < 100)
(54,i)
(55,(twoIntsStruct *)
(56,i++)
(57,i < 100)
(58,source[i].intOne = 0)
(59,0)
(60,ALLOCA(100*sizeof(twoIntsStruct)
(61,source[i].intOne)
(62,source)
(63,source[i].intTwo)
(64,twoIntsStruct *)
(65,data)
(66,0)
(67,0)
(68,sizeof(twoIntsStruct)
(69,* dataGoodBuffer = (twoIntsStruct *)
(70,dataBadBuffer)
(71,source)
(72,source[i])
(73,twoIntsStruct *)
(74,dataGoodBuffer)
(75,dataBadBuffer)
(76,data = dataBadBuffer)
(77,i = 0)
(78,1)
(79,intOne)
(80,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^