-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,100,102,106,108
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,40,0)
(31,36,0)
(54,36,0)
(17,3,0)
(36,47,0)
(10,1,0)
(35,0,0)
(38,37,0)
(2,14,0)
(32,33,0)
(45,33,0)
(52,31,0)
(11,0,0)
(4,0,0)
(26,36,0)
(44,55,0)
(0,47,0)
(49,2,0)
(55,39,0)
(3,17,0)
(11,37,0)
(56,16,0)
(40,37,0)
(19,16,0)
(13,3,0)
(39,40,0)
(40,39,0)
(9,41,0)
(31,0,0)
(33,1,0)
(1,57,0)
(7,57,0)
(53,55,0)
(22,23,0)
(29,17,0)
(19,8,0)
(30,23,0)
(6,17,0)
(46,24,0)
(14,24,0)
(55,53,0)
(35,37,0)
(12,11,0)
(15,53,0)
(42,47,0)
(23,37,0)
(40,25,0)
(39,55,0)
(34,47,0)
(1,33,0)
(11,36,0)
(18,2,0)
(17,0,0)
(57,0,0)
(37,40,0)
(16,19,0)
(21,3,0)
(43,14,0)
(48,35,0)
(5,31,0)
(37,24,0)
(31,37,0)
(35,36,0)
(27,41,0)
(2,37,0)
(11,12,1)
(2,18,1)
(49,19,1)
(29,6,1)
(11,36,1)
(10,17,1)
(23,37,1)
(38,41,1)
(43,2,1)
(40,25,1)
(54,26,1)
(20,35,1)
(17,3,1)
(22,30,1)
(33,32,1)
(2,37,1)
(19,16,1)
(3,13,1)
(56,23,1)
(52,57,1)
(39,55,1)
(11,37,1)
(16,56,1)
(35,36,1)
(9,27,1)
(31,36,1)
(6,41,1)
(18,49,1)
(23,22,1)
(35,48,1)
(57,7,1)
(5,52,1)
(41,9,1)
(15,44,1)
(48,11,1)
(44,38,1)
(13,21,1)
(1,33,1)
(49,23,1)
(45,10,1)
(55,53,1)
(14,43,1)
(7,1,1)
(30,37,1)
(21,29,1)
(32,45,1)
(37,40,1)
(36,54,1)
(31,37,1)
(35,37,1)
(27,36,1)
(31,5,1)
(40,39,1)
(12,31,1)
(53,15,1)
(6,14,1)
(11,37,2)
(53,41,2)
(40,39,2)
(39,55,2)
(56,23,2)
(37,40,2)
(35,37,2)
(18,41,2)
(15,41,2)
(23,37,2)
(44,41,2)
(16,23,2)
(38,41,2)
(40,41,2)
(17,3,2)
(37,41,2)
(14,41,2)
(39,41,2)
(55,41,2)
(19,23,2)
(2,41,2)
(35,36,2)
(49,41,2)
(11,36,2)
(23,41,2)
(19,16,2)
(1,33,2)
(22,41,2)
(31,36,2)
(31,37,2)
(2,37,2)
(30,41,2)
(43,41,2)
(40,25,2)
(55,53,2)
-----------------------------------
(0,)
(1,source[100-1])
(2,data[0])
(3,100-1)
(4,source)
(5,source)
(6,source)
(7,'\\\\0')
(8,)
(9,5)
(10,source)
(11,printLine(data)
(12,data)
(13,1)
(14,data[0] = \'\\\\0\')
(15,char)
(16,-1)
(17,memset(source, \'C\', 100-1)
(18,0)
(19,exit(-1)
(20,RET)
(21,100)
(22,NULL)
(23,data == NULL)
(24,)
(25,char *)
(26,data)
(27,staticFive)
(28,memset(source, 'C', 100-1)
(29,'C')
(30,data)
(31,strcpy(data, source)
(32,1)
(33,100-1)
(34,if(staticFive==5)
(35,free(data)
(36,data = NULL)
(37,data = (char *)
(38,data)
(39,malloc(50*sizeof(char)
(40,(char *)
(41,staticFive==5)
(42,data)
(43,'\\\\0')
(44,50)
(45,100)
(46,if (data == NULL)
(47,)
(48,data)
(49,data)
(50,data[0] = '\\\\0')
(51,\'\\\\0\')
(52,data)
(53,sizeof(char)
(54,NULL)
(55,50*sizeof(char)
(56,1)
(57,source[100-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^