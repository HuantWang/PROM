-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char source[10+1] = SRC_STRING;
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            strcpy(data, source);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
75,76
75,77
78,79
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,58,61,63,64,67,71,73,76,77,80,84,86,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad(){    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad
{    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char * dataCopy = data;        char * data = dataCopy;        {            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char source[10+1] = SRC_STRING;            /* POTENTIAL FLAW: data may not have enough space to hold source */            strcpy(data, source);            printLine(data);            free(data);        }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,4,0)
(15,8,0)
(18,16,0)
(13,26,0)
(35,14,0)
(30,8,0)
(6,42,0)
(14,41,0)
(25,24,0)
(1,6,0)
(13,20,0)
(14,8,0)
(33,2,0)
(7,3,0)
(31,8,0)
(23,10,0)
(2,16,0)
(41,2,0)
(27,29,0)
(15,10,0)
(28,41,0)
(29,16,0)
(11,42,0)
(3,7,0)
(26,13,0)
(36,2,0)
(19,15,0)
(42,11,0)
(8,43,0)
(9,24,0)
(3,16,0)
(17,41,0)
(15,41,0)
(42,6,0)
(38,30,0)
(32,10,0)
(43,4,0)
(16,4,0)
(41,43,0)
(40,15,0)
(10,8,0)
(30,41,0)
(3,11,0)
(11,3,0)
(22,26,0)
(21,29,0)
(2,43,0)
(0,4,0)
(39,43,0)
(37,43,0)
(34,42,0)
(5,4,0)
(16,3,0)
(21,27,1)
(30,38,1)
(27,16,1)
(14,35,1)
(22,29,1)
(29,16,1)
(33,13,1)
(16,3,1)
(15,10,1)
(32,41,1)
(23,32,1)
(14,41,1)
(40,19,1)
(2,16,1)
(35,30,1)
(1,34,1)
(2,36,1)
(42,6,1)
(28,2,1)
(6,1,1)
(13,26,1)
(3,11,1)
(18,24,1)
(38,15,1)
(19,10,1)
(30,41,1)
(15,41,1)
(12,14,1)
(10,23,1)
(15,40,1)
(9,25,1)
(41,2,1)
(11,42,1)
(24,9,1)
(34,18,1)
(36,33,1)
(3,7,1)
(26,22,1)
(17,28,1)
(29,21,1)
(33,29,1)
(41,17,1)
(14,41,2)
(2,16,2)
(26,29,2)
(15,41,2)
(15,10,2)
(13,29,2)
(22,29,2)
(16,3,2)
(41,2,2)
(3,11,2)
(11,42,2)
(13,26,2)
(29,16,2)
(30,41,2)
(3,7,2)
(42,6,2)
-----------------------------------
(0,data)
(1,char)
(2,* dataCopy = data)
(3,(char *)
(4,)
(5,if (data == NULL)
(6,sizeof(char)
(7,char *)
(8,)
(9,NULL)
(10,source[10+1] = SRC_STRING)
(11,malloc(10*sizeof(char)
(12,RET)
(13,exit(-1)
(14,free(data)
(15,strcpy(data, source)
(16,data = (char *)
(17,dataCopy)
(18,data)
(19,data)
(20,)
(21,NULL)
(22,1)
(23,SRC_STRING)
(24,data = NULL)
(25,data)
(26,-1)
(27,data)
(28,data)
(29,data == NULL)
(30,printLine(data)
(31,source)
(32,source)
(33,dataCopy)
(34,10)
(35,data)
(36,data)
(37,data)
(38,data)
(39,dataCopy)
(40,source)
(41,* data = dataCopy)
(42,10*sizeof(char)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^