-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,89,91,94,95,100,102,103,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
86,87
86,88
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(49,29,0)
(45,27,0)
(29,45,0)
(23,40,0)
(16,60,0)
(48,43,0)
(17,34,0)
(6,32,0)
(35,36,0)
(29,49,0)
(53,48,0)
(18,46,0)
(51,27,0)
(31,48,0)
(58,4,0)
(44,4,0)
(10,27,0)
(19,59,0)
(24,30,0)
(12,41,0)
(45,46,0)
(26,29,0)
(52,49,0)
(38,59,0)
(57,16,0)
(46,15,0)
(5,53,0)
(45,29,0)
(40,46,0)
(55,8,0)
(13,2,0)
(29,26,0)
(32,6,0)
(30,14,0)
(53,2,0)
(11,15,0)
(60,43,0)
(34,12,0)
(6,0,0)
(9,31,0)
(3,14,0)
(12,34,0)
(27,46,0)
(43,60,0)
(1,12,0)
(43,48,0)
(2,41,0)
(14,46,0)
(12,48,0)
(4,53,0)
(25,36,0)
(42,43,0)
(21,48,0)
(40,48,0)
(28,26,0)
(45,48,0)
(31,46,0)
(59,30,0)
(30,59,0)
(36,48,0)
(61,15,0)
(53,4,0)
(48,15,0)
(43,42,0)
(50,15,0)
(39,7,0)
(16,8,0)
(26,48,0)
(56,7,0)
(54,32,0)
(60,16,0)
(37,34,0)
(22,45,0)
(20,45,0)
(30,27,0)
(47,12,0)
(8,16,0)
(30,59,1)
(52,26,1)
(54,36,1)
(45,27,1)
(12,34,1)
(55,57,1)
(53,4,1)
(6,32,1)
(34,17,1)
(43,60,1)
(44,58,1)
(22,27,1)
(1,7,1)
(19,24,1)
(31,48,1)
(29,26,1)
(8,55,1)
(37,47,1)
(40,23,1)
(45,48,1)
(4,44,1)
(36,48,1)
(29,49,1)
(12,48,1)
(32,54,1)
(38,19,1)
(17,37,1)
(28,20,1)
(36,25,1)
(57,21,1)
(53,48,1)
(16,8,1)
(26,28,1)
(5,12,1)
(56,36,1)
(31,9,1)
(9,40,1)
(27,51,1)
(59,38,1)
(40,48,1)
(33,31,1)
(2,13,1)
(51,10,1)
(47,1,1)
(23,14,1)
(45,29,1)
(20,22,1)
(60,16,1)
(58,5,1)
(43,42,1)
(39,56,1)
(13,53,1)
(56,6,1)
(3,30,1)
(10,2,1)
(49,52,1)
(35,48,1)
(7,39,1)
(48,43,1)
(25,35,1)
(24,45,1)
(30,27,1)
(10,7,1)
(26,48,1)
(14,3,1)
(34,7,2)
(5,7,2)
(29,26,2)
(29,49,2)
(30,59,2)
(43,60,2)
(30,27,2)
(2,7,2)
(43,42,2)
(54,36,2)
(44,7,2)
(45,29,2)
(45,27,2)
(12,34,2)
(53,48,2)
(40,48,2)
(53,7,2)
(60,16,2)
(1,7,2)
(36,48,2)
(32,36,2)
(37,7,2)
(53,4,2)
(16,8,2)
(12,7,2)
(47,7,2)
(12,48,2)
(17,7,2)
(45,48,2)
(4,7,2)
(6,36,2)
(26,48,2)
(31,48,2)
(58,7,2)
(6,32,2)
(13,7,2)
(48,43,2)
-----------------------------------
(0,)
(1,data)
(2,data[100-1] = \\\'\\\\0\\\')
(3,\\\'\\\\0\\\')
(4,100-1)
(5,data)
(6,exit(-1)
(7,STATIC_CONST_FIVE==5)
(8,sizeof(char)
(9,data)
(10,dest)
(11,if (data == NULL)
(12,memset(data, \\\'A\\\', 100-1)
(13,\\\'\\\\0\\\')
(14,dest[50-1] = \\\'\\\\0\\\')
(15,)
(16,100*sizeof(char)
(17,1)
(18,dest)
(19,50)
(20,data)
(21,data)
(22,dest)
(23,data)
(24,dest)
(25,NULL)
(26,strlen(data)
(27,dest[50] = "")
(28,data)
(29,strlen(data)
(30,dest[50-1])
(31,free(data)
(32,-1)
(33,RET)
(34,100-1)
(35,data)
(36,data == NULL)
(37,100)
(38,1)
(39,5)
(40,printLine(data)
(41,)
(42,char *)
(43,(char *)
(44,1)
(45,memmove(dest, data, strlen(data)
(46,)
(47,\\\'A\\\')
(48,data = (char *)
(49,sizeof(char)
(50,if(STATIC_CONST_FIVE==5)
(51,"")
(52,char)
(53,data[100-1])
(54,1)
(55,char)
(56,STATIC_CONST_FIVE)
(57,100)
(58,100)
(59,50-1)
(60,malloc(100*sizeof(char)
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^