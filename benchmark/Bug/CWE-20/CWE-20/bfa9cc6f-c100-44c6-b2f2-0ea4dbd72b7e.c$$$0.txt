-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_bad()
{
    char * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
            strncat(data, source, 100);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
78,80
79,80
82,83
82,84
82,85
82,86
82,87
82,88
83,84
84,85
84,86
86,87
86,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
110,113
110,114
111,112
113,114
115,116
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,66,67,69,73,75,76,80,81,85,87,89,93,95,96,98,99,104,106,107,108,112,114,116,117,121,123,127,129
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
63,64
63,65
97,98
97,99
101,102
101,103
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_bad(){    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strncat(data, source, 100);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_bad
{    char * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strncat(data, source, 100);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strncat(data, source, 100);            printLine(data);            free(data);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */            strncat(data, source, 100);            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncat(data, source, 100);
strncat(data, source, 100)
strncat
strncat
data
data
source
source
100
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,3,0)
(6,3,0)
(38,34,0)
(6,61,0)
(33,41,0)
(23,63,0)
(41,58,0)
(21,6,0)
(36,50,0)
(13,62,0)
(58,32,0)
(1,63,0)
(25,63,0)
(16,8,0)
(7,2,0)
(40,62,0)
(51,11,0)
(14,27,0)
(53,21,0)
(8,3,0)
(32,3,0)
(13,11,0)
(59,58,0)
(21,8,0)
(22,58,0)
(26,41,0)
(62,13,0)
(61,50,0)
(63,23,0)
(23,58,0)
(41,2,0)
(57,23,0)
(56,32,0)
(60,54,0)
(39,10,0)
(15,4,0)
(44,22,0)
(11,58,0)
(10,35,0)
(37,35,0)
(34,38,0)
(28,6,0)
(35,3,0)
(49,27,0)
(24,41,0)
(19,3,0)
(12,21,0)
(4,3,0)
(43,23,0)
(5,0,0)
(2,32,0)
(54,2,0)
(46,42,0)
(50,36,0)
(0,58,0)
(36,42,0)
(35,6,0)
(2,54,0)
(42,36,0)
(30,61,0)
(61,6,0)
(29,36,0)
(22,2,0)
(47,10,0)
(64,62,0)
(0,2,0)
(20,4,0)
(48,3,0)
(17,38,0)
(34,18,0)
(27,6,0)
(61,30,0)
(9,54,0)
(50,61,0)
(45,13,0)
(39,47,1)
(53,34,1)
(12,53,1)
(23,63,1)
(63,25,1)
(4,15,1)
(17,27,1)
(34,38,1)
(54,9,1)
(0,2,1)
(57,2,1)
(62,64,1)
(41,33,1)
(38,17,1)
(6,61,1)
(51,13,1)
(37,10,1)
(22,44,1)
(33,24,1)
(14,49,1)
(24,26,1)
(8,16,1)
(61,30,1)
(21,12,1)
(21,6,1)
(60,7,1)
(40,45,1)
(42,46,1)
(11,51,1)
(28,4,1)
(35,6,1)
(26,11,1)
(50,36,1)
(36,42,1)
(29,28,1)
(9,60,1)
(53,27,1)
(7,35,1)
(2,54,1)
(44,0,1)
(10,39,1)
(52,22,1)
(13,62,1)
(43,57,1)
(45,23,1)
(0,5,1)
(61,50,1)
(25,1,1)
(35,37,1)
(49,6,1)
(27,6,1)
(22,2,1)
(64,40,1)
(1,43,1)
(16,21,1)
(47,8,1)
(27,14,1)
(46,29,1)
(5,41,1)
(15,20,1)
(41,2,1)
(21,6,2)
(35,6,2)
(34,27,2)
(23,63,2)
(17,27,2)
(2,54,2)
(22,2,2)
(34,38,2)
(38,27,2)
(13,62,2)
(41,2,2)
(50,36,2)
(0,2,2)
(27,6,2)
(36,42,2)
(61,30,2)
(6,61,2)
(61,50,2)
-----------------------------------
(0,printLine(data)
(1,100)
(2,* data = myUnion.unionSecond)
(3,)
(4,data = NULL)
(5,data)
(6,data = (char *)
(7,data)
(8,data[0] = '\\\\0')
(9,unionSecond)
(10,myUnion.unionFirst)
(11,source[100-1] = '\\\\0')
(12,0)
(13,source[100-1])
(14,NULL)
(15,NULL)
(16,'\\\\0')
(17,1)
(18,)
(19,data)
(20,data)
(21,data[0])
(22,free(data)
(23,memset(source, \'C\', 100-1)
(24,source)
(25,1)
(26,data)
(27,data == NULL)
(28,data)
(29,50)
(30,char *)
(31,if (data == NULL)
(32,)
(33,100)
(34,exit(-1)
(35,myUnion.unionFirst = data)
(36,50*sizeof(char)
(37,data)
(38,-1)
(39,unionFirst)
(40,100)
(41,strncat(data, source, 100)
(42,sizeof(char)
(43,'C')
(44,data)
(45,source)
(46,char)
(47,myUnion)
(48,myUnion)
(49,data)
(50,malloc(50*sizeof(char)
(51,'\\\\0')
(52,RET)
(53,data)
(54,myUnion.unionSecond)
(55,memset(source, 'C', 100-1)
(56,data)
(57,source)
(58,)
(59,source)
(60,myUnion)
(61,(char *)
(62,100-1)
(63,100-1)
(64,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^