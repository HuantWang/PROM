-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
59,60
59,61
62,63
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,60,61,64,68,70,72,76,78,79,83,85,89,91
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,21,0)
(16,2,0)
(12,20,0)
(39,24,0)
(12,29,0)
(0,25,0)
(27,10,0)
(25,0,0)
(31,26,0)
(19,1,0)
(19,27,0)
(20,29,0)
(12,24,0)
(15,4,0)
(12,1,0)
(28,20,0)
(12,27,0)
(25,21,0)
(21,8,0)
(2,27,0)
(34,40,0)
(29,40,0)
(27,25,0)
(21,25,0)
(14,19,0)
(24,4,0)
(25,27,0)
(23,12,0)
(5,40,0)
(11,1,0)
(18,1,0)
(35,30,0)
(30,27,0)
(9,31,0)
(6,20,0)
(8,7,0)
(3,9,0)
(2,29,0)
(38,10,0)
(36,30,0)
(41,29,0)
(31,9,0)
(4,20,0)
(17,7,0)
(7,8,0)
(19,29,0)
(2,1,0)
(4,24,0)
(32,12,0)
(1,40,0)
(24,12,0)
(33,27,0)
(37,8,0)
(21,8,1)
(17,37,1)
(18,11,1)
(12,27,1)
(13,19,1)
(12,20,1)
(33,22,1)
(2,16,1)
(22,1,1)
(19,27,1)
(12,24,1)
(31,9,1)
(25,0,1)
(32,23,1)
(39,4,1)
(20,6,1)
(28,31,1)
(4,15,1)
(2,27,1)
(25,21,1)
(24,4,1)
(28,22,1)
(37,33,1)
(19,1,1)
(27,25,1)
(4,20,1)
(12,1,1)
(30,27,1)
(6,28,1)
(35,36,1)
(30,35,1)
(16,12,1)
(24,39,1)
(2,1,1)
(36,27,1)
(9,3,1)
(23,20,1)
(28,30,1)
(19,14,1)
(3,30,1)
(14,2,1)
(1,18,1)
(15,32,1)
(7,17,1)
(8,7,1)
(12,1,2)
(2,1,2)
(27,22,2)
(2,27,2)
(36,22,2)
(31,30,2)
(17,22,2)
(25,21,2)
(4,20,2)
(27,25,2)
(35,22,2)
(21,22,2)
(37,22,2)
(24,4,2)
(12,27,2)
(7,22,2)
(8,22,2)
(30,27,2)
(12,20,2)
(21,8,2)
(8,7,2)
(9,30,2)
(30,22,2)
(19,1,2)
(3,30,2)
(25,0,2)
(31,9,2)
(19,27,2)
(25,22,2)
(33,22,2)
(12,24,2)
-----------------------------------
(0,wchar_t *)
(1,data = NULL)
(2,printWLine(data)
(3,1)
(4,wcslen(source)
(5,if(1)
(6,SRC_STRING)
(7,sizeof(wchar_t)
(8,10*sizeof(wchar_t)
(9,-1)
(10,)
(11,data)
(12,wcsncpy(data, source, wcslen(source)
(13,RET)
(14,data)
(15,source)
(16,data)
(17,wchar_t)
(18,NULL)
(19,free(data)
(20,source[10+1] = SRC_STRING)
(21,malloc(10*sizeof(wchar_t)
(22,1)
(23,data)
(24,wcslen(source)
(25,(wchar_t *)
(26,)
(27,data = (wchar_t *)
(28,source)
(29,)
(30,data == NULL)
(31,exit(-1)
(32,source)
(33,data)
(34,data)
(35,NULL)
(36,data)
(37,10)
(38,if (data == NULL)
(39,1)
(40,)
(41,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^