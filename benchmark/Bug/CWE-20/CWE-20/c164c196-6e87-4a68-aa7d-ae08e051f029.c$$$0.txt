-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
85,87
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
92,93
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
114,116
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
126,127
126,128
127,128
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,64,69,71,76,77,80,81,84,91,93,94,95,101,103,104,105,109,111,113,115,119,120,124,128,129,133,135
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
74,75
74,76
78,79
78,80
87,88
87,89
97,98
97,99
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);        free(data);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(37,23,0)
(45,19,0)
(32,7,0)
(35,23,0)
(60,33,0)
(36,67,0)
(37,29,0)
(2,9,0)
(16,35,0)
(41,47,0)
(46,66,0)
(19,0,0)
(40,4,0)
(50,27,0)
(58,11,0)
(58,51,0)
(0,19,0)
(56,38,0)
(54,33,0)
(65,37,0)
(57,39,0)
(48,47,0)
(28,66,0)
(11,58,0)
(29,40,0)
(63,27,0)
(61,46,0)
(7,43,0)
(24,31,0)
(5,56,0)
(62,46,0)
(55,64,0)
(41,42,0)
(64,9,0)
(56,23,0)
(51,58,0)
(47,64,0)
(31,67,0)
(3,46,0)
(33,9,0)
(67,51,0)
(12,38,0)
(52,4,0)
(0,6,0)
(44,61,0)
(10,23,0)
(47,41,0)
(34,60,0)
(26,43,0)
(42,41,0)
(21,7,0)
(51,67,0)
(47,46,0)
(46,58,0)
(58,46,0)
(38,56,0)
(3,64,0)
(22,52,0)
(14,47,0)
(15,3,0)
(59,60,0)
(20,64,0)
(30,37,0)
(27,23,0)
(18,29,0)
(7,64,0)
(49,9,0)
(53,61,0)
(42,33,0)
(43,7,0)
(17,56,0)
(29,37,0)
(39,43,0)
(25,40,0)
(43,39,0)
(38,52,0)
(8,23,0)
(7,46,0)
(7,33,0)
(3,33,0)
(67,31,0)
(19,45,1)
(29,37,1)
(47,48,1)
(18,37,1)
(48,14,1)
(17,5,1)
(50,63,1)
(1,3,1)
(61,53,1)
(56,17,1)
(25,29,1)
(27,50,1)
(8,13,1)
(29,18,1)
(57,26,1)
(64,55,1)
(47,64,1)
(8,61,1)
(62,13,1)
(32,27,1)
(58,11,1)
(63,23,1)
(5,27,1)
(65,52,1)
(37,23,1)
(36,62,1)
(23,10,1)
(12,56,1)
(40,25,1)
(44,46,1)
(24,36,1)
(21,32,1)
(55,20,1)
(51,67,1)
(37,30,1)
(3,64,1)
(43,39,1)
(52,22,1)
(7,64,1)
(61,46,1)
(3,46,1)
(30,65,1)
(8,0,1)
(7,46,1)
(31,24,1)
(0,19,1)
(22,38,1)
(38,56,1)
(67,31,1)
(63,35,1)
(46,58,1)
(42,41,1)
(53,44,1)
(39,57,1)
(3,15,1)
(45,61,1)
(16,40,1)
(26,21,1)
(35,16,1)
(14,7,1)
(47,46,1)
(38,12,1)
(7,43,1)
(56,23,1)
(35,23,1)
(15,42,1)
(27,23,1)
(13,64,1)
(10,8,1)
(41,47,1)
(58,51,1)
(53,13,2)
(16,27,2)
(61,46,2)
(62,13,2)
(42,41,2)
(67,31,2)
(61,13,2)
(43,39,2)
(50,27,2)
(36,13,2)
(51,67,2)
(37,27,2)
(0,61,2)
(58,11,2)
(12,27,2)
(38,56,2)
(56,23,2)
(52,27,2)
(7,64,2)
(46,58,2)
(45,61,2)
(44,13,2)
(35,23,2)
(17,27,2)
(27,27,2)
(18,27,2)
(7,43,2)
(67,13,2)
(25,27,2)
(30,27,2)
(24,13,2)
(0,19,2)
(29,37,2)
(5,27,2)
(3,64,2)
(41,47,2)
(38,27,2)
(47,46,2)
(51,13,2)
(3,46,2)
(22,27,2)
(27,23,2)
(37,23,2)
(19,61,2)
(31,13,2)
(47,64,2)
(40,27,2)
(56,27,2)
(35,27,2)
(29,27,2)
(58,13,2)
(46,13,2)
(7,46,2)
(58,51,2)
(65,27,2)
(63,27,2)
-----------------------------------
(0,exit(-1)
(1,RET)
(2,data)
(3,free(data)
(4,)
(5,source)
(6,)
(7,memcpy(data, source, 100*sizeof(twoIntsStruct)
(8,i)
(9,)
(10,0)
(11,twoIntsStruct *)
(12,intOne)
(13,STATIC_CONST_TRUE)
(14,data)
(15,data)
(16,i)
(17,i)
(18,intTwo)
(19,-1)
(20,data)
(21,source)
(22,0)
(23,i = 0)
(24,twoIntsStruct)
(25,0)
(26,100)
(27,i < 100)
(28,if (data == NULL)
(29,source[i].intTwo)
(30,i)
(31,sizeof(twoIntsStruct)
(32,data)
(33,)
(34,i)
(35,i++)
(36,50)
(37,source[i])
(38,source[i].intOne)
(39,sizeof(twoIntsStruct)
(40,source[i].intTwo = 0)
(41,&data[0])
(42,printStructLine(&data[0])
(43,100*sizeof(twoIntsStruct)
(44,data)
(45,1)
(46,data = (twoIntsStruct *)
(47,data[0])
(48,0)
(49,if(STATIC_CONST_TRUE)
(50,100)
(51,malloc(50*sizeof(twoIntsStruct)
(52,source[i].intOne = 0)
(53,NULL)
(54,source)
(55,NULL)
(56,source[i])
(57,twoIntsStruct)
(58,(twoIntsStruct *)
(59,for (i = 0; i < 100; i++)
(60,)
(61,data == NULL)
(62,data)
(63,i)
(64,data = NULL)
(65,source)
(66,)
(67,50*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^