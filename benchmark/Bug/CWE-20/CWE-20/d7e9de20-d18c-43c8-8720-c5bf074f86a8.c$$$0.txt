-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrue())
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (twoIntsStruct *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        data->intOne = 1;
        data->intTwo = 2;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printStructLine(data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
38,39
39,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
63,65
64,65
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,40,44,46,51,53,58,59,60,65,66,67,71,73,77,79
-----computeFrom-----
14,15
14,16
25,26
25,27
42,43
42,44
55,56
55,57
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
data = (twoIntsStruct *)malloc(sizeof(data));
data = (twoIntsStruct *)malloc(sizeof(data))
data
data
(twoIntsStruct *)malloc(sizeof(data))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 1;
data->intOne = 1
data->intOne
data
data
intOne
1
data->intTwo = 2;
data->intTwo = 2
data->intTwo
data
data
intTwo
2
printStructLine(data);
printStructLine(data)
printStructLine
printStructLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,37,0)
(29,13,0)
(4,7,0)
(1,4,0)
(10,37,0)
(17,1,0)
(24,34,0)
(11,13,0)
(22,24,0)
(28,20,0)
(37,23,0)
(9,23,0)
(16,37,0)
(19,24,0)
(5,20,0)
(25,11,0)
(18,35,0)
(7,4,0)
(35,2,0)
(34,13,0)
(31,32,0)
(8,34,0)
(36,37,0)
(32,11,0)
(26,28,0)
(34,7,0)
(8,23,0)
(14,28,0)
(20,13,0)
(28,34,0)
(32,34,0)
(2,3,0)
(2,35,0)
(21,8,0)
(33,7,0)
(30,23,0)
(10,34,0)
(12,32,0)
(10,23,0)
(6,10,0)
(15,34,0)
(7,33,0)
(4,1,0)
(7,34,0)
(8,37,0)
(20,5,1)
(37,16,1)
(6,20,1)
(24,34,1)
(31,24,1)
(21,10,1)
(19,34,1)
(25,32,1)
(4,1,1)
(6,27,1)
(18,24,1)
(28,34,1)
(5,28,1)
(31,2,1)
(14,11,1)
(8,34,1)
(35,18,1)
(1,17,1)
(12,31,1)
(27,37,1)
(10,37,1)
(34,7,1)
(15,27,1)
(32,34,1)
(17,15,1)
(2,35,1)
(10,34,1)
(16,36,1)
(11,25,1)
(22,19,1)
(10,6,1)
(28,26,1)
(32,12,1)
(7,4,1)
(8,37,1)
(26,14,1)
(24,22,1)
(8,21,1)
(1,37,1)
(0,8,1)
(7,33,1)
(7,33,2)
(20,27,2)
(24,27,2)
(2,35,2)
(5,27,2)
(8,37,2)
(14,27,2)
(24,34,2)
(10,34,2)
(26,27,2)
(18,24,2)
(4,27,2)
(31,27,2)
(1,37,2)
(15,27,2)
(34,27,2)
(7,27,2)
(35,24,2)
(28,34,2)
(1,27,2)
(2,24,2)
(28,27,2)
(22,27,2)
(25,27,2)
(32,27,2)
(34,7,2)
(12,27,2)
(8,34,2)
(32,34,2)
(4,1,2)
(7,4,2)
(11,27,2)
(19,27,2)
(17,27,2)
(10,37,2)
-----------------------------------
(0,RET)
(1,sizeof(data)
(2,exit(-1)
(3,)
(4,malloc(sizeof(data)
(5,2)
(6,data)
(7,(twoIntsStruct *)
(8,free(data)
(9,if(globalReturnsTrue()
(10,printStructLine(data)
(11,data->intOne = 1)
(12,intOne)
(13,)
(14,data)
(15,data)
(16,NULL)
(17,data)
(18,1)
(19,data)
(20,data->intTwo = 2)
(21,data)
(22,NULL)
(23,)
(24,data == NULL)
(25,1)
(26,intTwo)
(27,globalReturnsTrue()
(28,data->intTwo)
(29,if (data == NULL)
(30,data)
(31,data)
(32,data->intOne)
(33,twoIntsStruct *)
(34,data = (twoIntsStruct *)
(35,-1)
(36,data)
(37,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^