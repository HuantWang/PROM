-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_wchar_t_13_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 100-1);
        data[100-1] = L'\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printWLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,77,79,83,84,89,91
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_wchar_t_13_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_wchar_t_13_bad()
CWE416_Use_After_Free__malloc_free_wchar_t_13_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 100-1);        data[100-1] = L'\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printWLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(29,21,0)
(33,18,0)
(32,26,0)
(34,24,0)
(3,23,0)
(6,9,0)
(28,4,0)
(37,19,0)
(19,26,0)
(14,4,0)
(2,18,0)
(26,17,0)
(28,17,0)
(26,19,0)
(24,20,0)
(1,25,0)
(35,4,0)
(4,25,0)
(33,36,0)
(5,6,0)
(17,28,0)
(15,14,0)
(8,9,0)
(30,25,0)
(18,33,0)
(38,14,0)
(12,28,0)
(22,6,0)
(16,35,0)
(17,26,0)
(28,12,0)
(31,4,0)
(7,21,0)
(13,9,0)
(0,23,0)
(24,4,0)
(11,9,0)
(35,25,0)
(4,28,0)
(24,6,0)
(4,28,1)
(35,4,1)
(33,18,1)
(19,37,1)
(26,19,1)
(28,12,1)
(32,31,1)
(24,34,1)
(0,21,1)
(29,6,1)
(14,4,1)
(38,15,1)
(5,22,1)
(7,29,1)
(15,4,1)
(18,2,1)
(27,24,1)
(3,0,1)
(31,21,1)
(37,32,1)
(14,38,1)
(23,3,1)
(21,7,1)
(17,26,1)
(35,16,1)
(27,23,1)
(1,14,1)
(16,1,1)
(24,6,1)
(0,35,1)
(1,33,1)
(2,14,1)
(6,5,1)
(24,4,1)
(28,17,1)
(34,23,1)
(14,21,2)
(2,14,2)
(4,28,2)
(37,21,2)
(17,21,2)
(16,21,2)
(34,23,2)
(19,21,2)
(32,21,2)
(14,4,2)
(31,21,2)
(35,4,2)
(28,12,2)
(26,21,2)
(18,14,2)
(1,21,2)
(24,4,2)
(28,21,2)
(33,18,2)
(24,6,2)
(38,21,2)
(33,14,2)
(4,21,2)
(28,17,2)
(17,26,2)
(15,21,2)
(24,23,2)
(26,19,2)
(35,21,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE)
(1,\'\\\\0\')
(2,1)
(3,5)
(4,data = (wchar_t *)
(5,NULL)
(6,data = NULL)
(7,5)
(8,data)
(9,)
(10,'\\\\0')
(11,if(GLOBAL_CONST_FIVE==5)
(12,wchar_t *)
(13,if(GLOBAL_CONST_FIVE==5)
(14,data == NULL)
(15,data)
(16,data)
(17,malloc(100*sizeof(wchar_t)
(18,-1)
(19,sizeof(wchar_t)
(20,)
(21,GLOBAL_CONST_FIVE==5)
(22,data)
(23,GLOBAL_CONST_FIVE==5)
(24,printWLine(data)
(25,)
(26,100*sizeof(wchar_t)
(27,RET)
(28,(wchar_t *)
(29,GLOBAL_CONST_FIVE)
(30,if (data == NULL)
(31,data)
(32,100)
(33,exit(-1)
(34,data)
(35,free(data)
(36,)
(37,wchar_t)
(38,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^