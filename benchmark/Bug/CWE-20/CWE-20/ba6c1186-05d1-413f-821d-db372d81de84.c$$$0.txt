-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_08_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(staticReturnsTrue())
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
62,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,63,68,70
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_08_bad(){    long * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_08_bad()
CWE415_Double_Free__malloc_free_long_08_bad
{    long * data;    /* Initialize data */    data = NULL;    if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(8,27,0)
(2,22,0)
(0,16,0)
(12,1,0)
(19,24,0)
(27,22,0)
(14,27,0)
(25,29,0)
(0,4,0)
(24,19,0)
(20,29,0)
(21,11,0)
(29,10,0)
(11,29,0)
(19,13,0)
(13,32,0)
(6,10,0)
(15,29,0)
(3,25,0)
(18,13,0)
(32,25,0)
(1,10,0)
(31,4,0)
(29,25,0)
(26,20,0)
(25,32,0)
(20,27,0)
(32,13,0)
(25,3,0)
(20,23,0)
(13,19,0)
(1,29,0)
(4,0,0)
(5,22,0)
(30,22,0)
(7,11,0)
(7,21,1)
(13,19,1)
(1,12,1)
(19,24,1)
(25,3,1)
(0,4,1)
(29,25,1)
(17,28,1)
(18,15,1)
(20,27,1)
(19,18,1)
(15,28,1)
(11,7,1)
(20,29,1)
(31,11,1)
(26,17,1)
(12,11,1)
(12,0,1)
(20,26,1)
(11,29,1)
(14,8,1)
(25,32,1)
(28,27,1)
(32,13,1)
(17,1,1)
(9,20,1)
(1,29,1)
(9,17,1)
(21,29,1)
(27,14,1)
(4,31,1)
(0,4,2)
(20,29,2)
(13,19,2)
(18,28,2)
(4,11,2)
(12,28,2)
(1,29,2)
(21,28,2)
(13,28,2)
(19,28,2)
(29,25,2)
(32,28,2)
(20,27,2)
(29,28,2)
(11,29,2)
(32,13,2)
(31,11,2)
(19,24,2)
(25,32,2)
(1,28,2)
(0,11,2)
(20,17,2)
(25,28,2)
(11,28,2)
(26,17,2)
(15,28,2)
(7,28,2)
(25,3,2)
-----------------------------------
(0,exit(-1)
(1,free(data)
(2,if(staticReturnsTrue()
(3,long *)
(4,-1)
(5,data)
(6,if (data == NULL)
(7,NULL)
(8,data)
(9,RET)
(10,)
(11,data == NULL)
(12,data)
(13,100*sizeof(long)
(14,NULL)
(15,data)
(16,)
(17,staticReturnsTrue()
(18,100)
(19,sizeof(long)
(20,free(data)
(21,data)
(22,)
(23,)
(24,long)
(25,(long *)
(26,data)
(27,data = NULL)
(28,staticReturnsTrue()
(29,data = (long *)
(30,if(staticReturnsTrue()
(31,1)
(32,malloc(100*sizeof(long)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^