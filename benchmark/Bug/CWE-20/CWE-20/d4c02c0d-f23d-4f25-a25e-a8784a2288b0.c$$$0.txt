-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_execlp_04_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(STATIC_CONST_TRUE)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* wexeclp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
121,124
121,125
121,126
121,127
122,123
124,125
126,127
128,129
130,131
132,133
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,123,125,127,129,131,133
-----computeFrom-----
23,24
23,25
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_execlp_04_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* wexeclp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_file_execlp_04_bad()
CWE78_OS_Command_Injection__wchar_t_file_execlp_04_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* wexeclp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(57,7,0)
(35,21,0)
(48,41,0)
(4,11,0)
(11,28,0)
(28,33,0)
(0,21,0)
(34,33,0)
(38,7,0)
(2,19,0)
(49,32,0)
(7,22,0)
(52,23,0)
(15,14,0)
(31,33,0)
(7,43,0)
(57,28,0)
(28,18,0)
(16,17,0)
(55,49,0)
(21,46,0)
(56,44,0)
(44,36,0)
(52,49,0)
(47,28,0)
(9,41,0)
(8,43,0)
(50,30,0)
(60,19,0)
(54,44,0)
(17,41,0)
(58,44,0)
(43,21,0)
(12,57,0)
(43,7,0)
(21,43,0)
(18,33,0)
(49,14,0)
(1,28,0)
(24,46,0)
(10,18,0)
(46,11,0)
(5,19,0)
(41,46,0)
(11,46,0)
(37,19,0)
(53,14,0)
(13,50,0)
(3,57,0)
(20,32,0)
(41,17,0)
(7,57,0)
(57,46,0)
(29,18,0)
(61,52,0)
(25,22,0)
(14,49,0)
(27,49,0)
(46,44,0)
(19,33,0)
(39,27,0)
(22,7,0)
(42,33,0)
(6,19,0)
(40,23,0)
(51,30,0)
(7,49,0)
(43,8,0)
(26,27,0)
(2,27,1)
(52,61,1)
(2,59,1)
(60,5,1)
(7,43,1)
(28,47,1)
(27,49,1)
(2,52,1)
(4,24,1)
(17,16,1)
(22,25,1)
(47,1,1)
(53,55,1)
(41,48,1)
(49,14,1)
(5,2,1)
(7,57,1)
(6,37,1)
(11,28,1)
(57,28,1)
(27,26,1)
(37,60,1)
(29,10,1)
(9,46,1)
(61,51,1)
(51,50,1)
(1,18,1)
(46,11,1)
(18,29,1)
(0,35,1)
(61,22,1)
(21,46,1)
(59,28,1)
(45,19,1)
(19,6,1)
(26,39,1)
(22,7,1)
(21,0,1)
(17,41,1)
(12,27,1)
(41,46,1)
(55,17,1)
(35,57,1)
(57,3,1)
(52,49,1)
(39,49,1)
(7,38,1)
(38,43,1)
(43,21,1)
(15,53,1)
(50,13,1)
(7,49,1)
(43,8,1)
(24,59,1)
(13,22,1)
(48,9,1)
(16,41,1)
(25,7,1)
(11,4,1)
(2,17,1)
(57,46,1)
(14,15,1)
(3,12,1)
(28,18,1)
(49,17,2)
(11,28,2)
(43,8,2)
(53,17,2)
(21,46,2)
(43,21,2)
(21,27,2)
(51,22,2)
(52,27,2)
(27,49,2)
(15,17,2)
(46,11,2)
(35,27,2)
(48,59,2)
(27,17,2)
(17,41,2)
(43,27,2)
(0,27,2)
(41,59,2)
(3,27,2)
(11,59,2)
(16,59,2)
(7,27,2)
(61,27,2)
(49,14,2)
(25,27,2)
(14,17,2)
(52,49,2)
(57,28,2)
(22,7,2)
(46,59,2)
(7,43,2)
(57,27,2)
(39,17,2)
(57,46,2)
(41,46,2)
(24,59,2)
(50,22,2)
(9,59,2)
(7,57,2)
(4,59,2)
(7,49,2)
(26,17,2)
(13,22,2)
(17,59,2)
(22,27,2)
(55,17,2)
(38,27,2)
(28,18,2)
(12,27,2)
-----------------------------------
(0,dataLen)
(1,data)
(2,COMMAND_INT)
(3,dataLen)
(4,data)
(5,COMMAND_INT)
(6,NULL)
(7,fgetws(data+dataLen, (int)
(8,int)
(9,100)
(10,dataBuffer)
(11,wcslen(data)
(12,data)
(13,"fgetws()
(14,fopen(FILENAME, "r")
(15,"r")
(16,1)
(17,100-dataLen > 1)
(18,dataBuffer[100] = COMMAND_ARG2)
(19,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(20,if (pFile != NULL)
(21,100-dataLen)
(22,fgetws(data+dataLen, (int)
(23,)
(24,dataLen)
(25,NULL)
(26,NULL)
(27,pFile != NULL)
(28,data = dataBuffer)
(29,COMMAND_ARG2)
(30,)
(31,data)
(32,)
(33,)
(34,dataBuffer)
(35,100)
(36,)
(37,COMMAND_ARG3)
(38,pFile)
(39,pFile)
(40,if (fgetws(data+dataLen, (int)
(41,100-dataLen)
(42,if(STATIC_CONST_TRUE)
(43,(int)
(44,)
(45,RET)
(46,dataLen = wcslen(data)
(47,dataBuffer)
(48,dataLen)
(49,pFile = fopen(FILENAME, "r")
(50,printLine("fgetws()
(51,\\\'\\\\0\\\')
(52,fclose(pFile)
(53,FILENAME)
(54,if (100-dataLen > 1)
(55,pFile)
(56,dataLen)
(57,data+dataLen)
(58,pFile)
(59,STATIC_CONST_TRUE)
(60,COMMAND_ARG1)
(61,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^