-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,94,96
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(46,41,0)
(23,43,0)
(6,43,0)
(31,3,0)
(32,16,0)
(28,41,0)
(24,23,0)
(7,5,0)
(40,34,0)
(35,47,0)
(36,7,0)
(9,31,0)
(0,23,0)
(14,23,0)
(13,40,0)
(21,47,0)
(23,18,0)
(17,24,0)
(41,9,0)
(20,8,0)
(32,18,0)
(30,16,0)
(16,32,0)
(12,9,0)
(2,31,0)
(24,17,0)
(26,34,0)
(45,34,0)
(21,23,0)
(0,47,0)
(22,40,0)
(15,21,0)
(18,23,0)
(9,41,0)
(1,43,0)
(9,23,0)
(40,23,0)
(18,32,0)
(40,47,0)
(24,3,0)
(44,17,0)
(11,8,0)
(25,36,0)
(16,30,0)
(42,17,0)
(10,0,0)
(38,24,0)
(7,36,0)
(18,29,0)
(34,47,0)
(29,18,0)
(8,23,0)
(33,30,0)
(37,16,0)
(47,43,0)
(4,43,0)
(19,24,0)
(19,27,1)
(41,28,1)
(21,15,1)
(28,46,1)
(36,25,1)
(12,24,1)
(7,36,1)
(31,2,1)
(37,14,1)
(30,33,1)
(25,8,1)
(0,10,1)
(9,41,1)
(32,16,1)
(15,40,1)
(23,18,1)
(24,17,1)
(26,45,1)
(16,30,1)
(27,7,1)
(44,42,1)
(46,12,1)
(40,34,1)
(42,38,1)
(40,13,1)
(34,26,1)
(18,29,1)
(33,37,1)
(10,21,1)
(21,23,1)
(11,23,1)
(13,22,1)
(45,31,1)
(8,20,1)
(40,23,1)
(27,8,1)
(38,19,1)
(45,27,1)
(8,23,1)
(24,23,1)
(17,44,1)
(18,32,1)
(9,23,1)
(20,11,1)
(0,23,1)
(2,9,1)
(22,34,1)
(39,0,1)
(7,8,2)
(42,27,2)
(46,27,2)
(7,36,2)
(40,23,2)
(28,27,2)
(9,41,2)
(18,29,2)
(44,27,2)
(24,23,2)
(12,27,2)
(24,17,2)
(19,27,2)
(18,32,2)
(41,27,2)
(38,27,2)
(40,34,2)
(9,23,2)
(0,23,2)
(16,30,2)
(8,23,2)
(25,8,2)
(2,27,2)
(9,27,2)
(21,23,2)
(32,16,2)
(31,27,2)
(36,8,2)
(17,27,2)
(24,27,2)
(23,18,2)
-----------------------------------
(0,free(data)
(1,if(globalReturnsTrue()
(2,\\\'\\\\0\\\')
(3,)
(4,data)
(5,)
(6,if (data == NULL)
(7,exit(-1)
(8,data == NULL)
(9,data[100-1])
(10,data)
(11,data)
(12,data)
(13,data)
(14,data)
(15,data)
(16,100*sizeof(char)
(17,100-1)
(18,(char *)
(19,data)
(20,NULL)
(21,printLine(data)
(22,dest)
(23,data = (char *)
(24,memset(data, \\\'A\\\', 100-1)
(25,1)
(26,"")
(27,globalReturnsTrue()
(28,1)
(29,char *)
(30,sizeof(char)
(31,data[100-1] = \\\'\\\\0\\\')
(32,malloc(100*sizeof(char)
(33,char)
(34,dest[50] = "")
(35,dest)
(36,-1)
(37,100)
(38,\\\'A\\\')
(39,RET)
(40,strcpy(dest, data)
(41,100-1)
(42,100)
(43,)
(44,1)
(45,dest)
(46,100)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^