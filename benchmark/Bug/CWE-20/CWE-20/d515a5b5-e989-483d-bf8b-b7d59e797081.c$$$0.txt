-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
68,70
70,71
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,67,69,72,73,77,80,81,85,87
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(6,12,0)
(17,24,0)
(31,35,0)
(1,24,0)
(28,33,0)
(17,34,0)
(16,34,0)
(27,21,0)
(2,32,0)
(28,9,0)
(8,18,0)
(11,33,0)
(24,23,0)
(15,33,0)
(9,28,0)
(34,12,0)
(29,30,0)
(39,23,0)
(33,12,0)
(37,24,0)
(9,34,0)
(28,24,0)
(16,24,0)
(30,21,0)
(23,24,0)
(16,14,0)
(0,28,0)
(17,33,0)
(22,37,0)
(26,16,0)
(4,13,0)
(4,18,0)
(14,34,0)
(18,4,0)
(35,23,0)
(24,32,0)
(21,30,0)
(23,39,0)
(3,28,0)
(23,35,0)
(16,30,0)
(5,16,0)
(30,16,0)
(19,34,0)
(7,37,0)
(16,33,0)
(38,12,0)
(36,14,0)
(25,17,0)
(16,33,1)
(16,24,1)
(8,37,1)
(25,9,1)
(16,30,1)
(36,37,1)
(7,24,1)
(37,24,1)
(17,33,1)
(26,5,1)
(36,20,1)
(0,3,1)
(24,23,1)
(28,0,1)
(36,4,1)
(4,18,1)
(33,15,1)
(28,33,1)
(9,28,1)
(17,25,1)
(21,27,1)
(29,26,1)
(3,16,1)
(18,8,1)
(15,11,1)
(10,17,1)
(28,24,1)
(27,29,1)
(16,14,1)
(1,20,1)
(37,22,1)
(14,36,1)
(30,21,1)
(5,14,1)
(35,31,1)
(23,39,1)
(23,35,1)
(20,33,1)
(17,24,1)
(22,7,1)
(31,1,1)
(28,24,2)
(17,24,2)
(17,33,2)
(23,35,2)
(24,23,2)
(1,20,2)
(16,33,2)
(16,14,2)
(28,33,2)
(30,21,2)
(7,20,2)
(23,39,2)
(24,20,2)
(37,24,2)
(16,24,2)
(22,20,2)
(4,37,2)
(9,28,2)
(31,20,2)
(35,20,2)
(8,37,2)
(23,20,2)
(18,37,2)
(4,18,2)
(16,30,2)
(37,20,2)
-----------------------------------
(0,0)
(1,data)
(2,if (data == NULL)
(3,data)
(4,exit(-1)
(5,data)
(6,data)
(7,data)
(8,1)
(9,printIntLine(data[0])
(10,RET)
(11,data)
(12,)
(13,)
(14,source[10] = {0})
(15,NULL)
(16,memmove(data, source, 10*sizeof(int)
(17,free(data)
(18,-1)
(19,source)
(20,staticReturnsTrue()
(21,sizeof(int)
(22,NULL)
(23,(int *)
(24,data = (int *)
(25,data)
(26,source)
(27,int)
(28,data[0])
(29,10)
(30,10*sizeof(int)
(31,10)
(32,)
(33,data = NULL)
(34,)
(35,malloc(10)
(36,source)
(37,data == NULL)
(38,if(staticReturnsTrue()
(39,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^