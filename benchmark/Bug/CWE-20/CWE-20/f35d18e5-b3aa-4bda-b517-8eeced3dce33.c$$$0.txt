-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_11_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrue())
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
81,82
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,76,78,82,87,89
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_11_bad(){    char * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_11_bad()
CWE416_Use_After_Free__malloc_free_char_11_bad
{    char * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(39,1,0)
(14,25,0)
(26,3,0)
(18,33,0)
(30,16,0)
(25,6,0)
(5,25,0)
(3,16,0)
(5,17,0)
(47,6,0)
(5,12,0)
(49,31,0)
(19,48,0)
(10,16,0)
(29,19,0)
(13,35,0)
(0,45,0)
(42,4,0)
(32,43,0)
(7,18,0)
(47,25,0)
(34,31,0)
(3,6,0)
(18,45,0)
(39,4,0)
(48,19,0)
(2,31,0)
(13,43,0)
(46,48,0)
(45,31,0)
(1,6,0)
(25,5,0)
(39,25,0)
(9,47,0)
(4,39,0)
(19,12,0)
(36,6,0)
(40,25,0)
(12,5,0)
(20,45,0)
(23,39,0)
(21,1,0)
(24,4,0)
(3,25,0)
(16,3,0)
(18,25,0)
(12,19,0)
(8,40,0)
(11,3,0)
(44,40,0)
(17,5,0)
(43,13,0)
(11,13,1)
(13,43,1)
(39,25,1)
(32,40,1)
(29,14,1)
(18,7,1)
(21,39,1)
(39,4,1)
(40,25,1)
(16,30,1)
(44,8,1)
(18,45,1)
(9,1,1)
(26,11,1)
(48,46,1)
(8,25,1)
(14,41,1)
(38,47,1)
(5,12,1)
(41,45,1)
(27,18,1)
(3,16,1)
(12,19,1)
(5,17,1)
(3,25,1)
(24,42,1)
(7,38,1)
(42,23,1)
(40,44,1)
(11,40,1)
(47,25,1)
(18,25,1)
(45,20,1)
(1,21,1)
(25,5,1)
(38,41,1)
(46,29,1)
(23,3,1)
(27,38,1)
(19,48,1)
(20,0,1)
(47,9,1)
(30,10,1)
(4,24,1)
(43,32,1)
(10,26,1)
(3,16,2)
(43,40,2)
(16,41,2)
(3,25,2)
(39,4,2)
(40,41,2)
(47,41,2)
(10,41,2)
(24,41,2)
(5,17,2)
(14,41,2)
(9,41,2)
(25,5,2)
(47,25,2)
(12,19,2)
(25,41,2)
(46,41,2)
(18,25,2)
(19,48,2)
(26,41,2)
(13,40,2)
(5,12,2)
(40,25,2)
(30,41,2)
(11,41,2)
(39,25,2)
(19,41,2)
(7,38,2)
(12,41,2)
(29,41,2)
(1,41,2)
(13,43,2)
(21,41,2)
(5,41,2)
(3,41,2)
(18,38,2)
(42,41,2)
(4,41,2)
(8,41,2)
(39,41,2)
(44,41,2)
(18,45,2)
(32,40,2)
(48,41,2)
(23,41,2)
-----------------------------------
(0,data)
(1,data[100-1] = '\\\\0')
(2,if(globalReturnsTrue()
(3,memset(data, 'A', 100-1)
(4,100-1)
(5,(char *)
(6,)
(7,data)
(8,data)
(9,data)
(10,100)
(11,data)
(12,malloc(100*sizeof(char)
(13,exit(-1)
(14,data)
(15,memset(data, \'A\', 100-1)
(16,100-1)
(17,char *)
(18,printLine(data)
(19,100*sizeof(char)
(20,NULL)
(21,'\\\\0')
(22,\'\\\\0\')
(23,data)
(24,1)
(25,data = (char *)
(26,\'A\')
(27,RET)
(28,data[100-1] = \'\\\\0\')
(29,100)
(30,1)
(31,)
(32,1)
(33,)
(34,if(globalReturnsTrue()
(35,)
(36,if (data == NULL)
(37,'A')
(38,globalReturnsTrue()
(39,data[100-1])
(40,data == NULL)
(41,globalReturnsTrue()
(42,100)
(43,-1)
(44,NULL)
(45,data = NULL)
(46,char)
(47,free(data)
(48,sizeof(char)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^