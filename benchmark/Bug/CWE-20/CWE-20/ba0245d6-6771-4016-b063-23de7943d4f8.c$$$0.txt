-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(34,29,0)
(4,7,0)
(2,29,0)
(34,32,0)
(41,46,0)
(36,34,0)
(5,40,0)
(11,26,0)
(13,3,0)
(24,23,0)
(10,11,0)
(29,34,0)
(9,26,0)
(2,11,0)
(32,34,0)
(8,19,0)
(19,26,0)
(28,13,0)
(1,15,0)
(29,27,0)
(18,26,0)
(25,19,0)
(38,2,0)
(33,24,0)
(22,30,0)
(44,13,0)
(3,30,0)
(30,3,0)
(31,25,0)
(40,11,0)
(10,23,0)
(27,29,0)
(10,19,0)
(21,23,0)
(40,23,0)
(13,28,0)
(29,2,0)
(0,10,0)
(45,28,0)
(39,27,0)
(32,25,0)
(43,41,0)
(3,13,0)
(40,19,0)
(12,7,0)
(37,11,0)
(30,22,0)
(23,30,0)
(2,25,0)
(14,11,0)
(6,32,0)
(17,2,0)
(2,19,0)
(35,24,0)
(42,43,0)
(23,15,0)
(30,23,0)
(41,43,0)
(2,23,0)
(16,25,0)
(44,21,1)
(2,25,1)
(7,12,1)
(43,42,1)
(25,16,1)
(31,7,1)
(27,39,1)
(2,29,1)
(16,31,1)
(13,28,1)
(38,17,1)
(3,13,1)
(32,6,1)
(39,34,1)
(42,24,1)
(10,23,1)
(4,11,1)
(40,23,1)
(17,25,1)
(45,44,1)
(6,38,1)
(2,11,1)
(30,22,1)
(34,32,1)
(34,36,1)
(0,2,1)
(2,23,1)
(11,14,1)
(24,23,1)
(24,33,1)
(40,11,1)
(23,30,1)
(40,5,1)
(21,7,1)
(10,11,1)
(33,35,1)
(36,32,1)
(31,24,1)
(29,27,1)
(10,0,1)
(30,3,1)
(12,4,1)
(29,34,1)
(31,41,1)
(14,37,1)
(5,10,1)
(35,23,1)
(32,25,1)
(41,43,1)
(20,40,1)
(28,45,1)
(13,28,2)
(2,25,2)
(28,7,2)
(23,30,2)
(2,23,2)
(21,7,2)
(30,3,2)
(24,7,2)
(41,24,2)
(3,13,2)
(41,43,2)
(13,7,2)
(40,11,2)
(29,27,2)
(2,11,2)
(29,34,2)
(43,24,2)
(35,7,2)
(10,23,2)
(30,22,2)
(2,29,2)
(45,7,2)
(34,32,2)
(10,11,2)
(32,25,2)
(42,24,2)
(40,23,2)
(23,7,2)
(33,7,2)
(24,23,2)
(3,7,2)
(44,7,2)
(30,7,2)
-----------------------------------
(0,data)
(1,if (data == NULL)
(2,memcpy(data, source, (wcslen(source)
(3,malloc(10*sizeof(wchar_t)
(4,STATIC_CONST_FIVE)
(5,data)
(6,source)
(7,STATIC_CONST_FIVE==5)
(8,source)
(9,data)
(10,printWLine(data)
(11,data = NULL)
(12,5)
(13,10*sizeof(wchar_t)
(14,NULL)
(15,)
(16,SRC_STRING)
(17,data)
(18,if(STATIC_CONST_FIVE==5)
(19,)
(20,RET)
(21,data)
(22,wchar_t *)
(23,data = (wchar_t *)
(24,data == NULL)
(25,source[10+1] = SRC_STRING)
(26,)
(27,sizeof(wchar_t)
(28,sizeof(wchar_t)
(29,(wcslen(source)
(30,(wchar_t *)
(31,source)
(32,wcslen(source)
(33,NULL)
(34,wcslen(source)
(35,data)
(36,1)
(37,data)
(38,source)
(39,wchar_t)
(40,free(data)
(41,exit(-1)
(42,1)
(43,-1)
(44,10)
(45,wchar_t)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^