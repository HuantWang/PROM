-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_listen_socket_execlp_04_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(STATIC_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            char *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = strlen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(char)] = '\0';
                /* Eliminate CRLF */
                replace = strchr(data, '\r');
                if (replace)
                {
                    *replace = '\0';
                }
                replace = strchr(data, '\n');
                if (replace)
                {
                    *replace = '\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* execlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
32,41
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
47,48
47,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
81,91
81,92
81,93
81,94
81,95
81,96
81,97
81,98
82,83
83,84
83,85
84,85
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
103,104
104,105
104,106
104,107
104,108
105,106
107,108
108,109
111,112
112,113
113,114
115,116
116,117
116,118
117,118
117,119
118,119
121,122
123,124
124,125
124,126
125,126
125,127
126,127
126,128
127,128
131,132
133,134
134,135
134,136
135,136
135,137
136,137
139,140
139,141
140,141
142,143
144,145
144,146
145,146
145,147
146,147
146,148
146,149
146,150
147,148
149,150
151,152
151,153
152,153
152,154
153,154
155,156
157,158
158,159
160,161
161,162
162,163
164,165
166,167
168,169
168,170
169,170
169,171
170,171
170,172
170,173
171,172
173,174
175,176
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
185,189
186,187
188,189
190,191
192,193
194,195
194,196
195,196
195,197
196,197
198,199
200,201
202,203
203,204
203,205
204,205
206,207
206,208
206,209
206,210
206,211
207,208
209,210
211,212
211,213
212,213
212,214
214,215
216,217
217,218
217,219
218,219
220,221
222,223
222,224
223,224
224,225
224,226
227,228
228,229
228,230
229,230
229,231
231,232
235,236
235,237
236,237
236,238
237,238
237,239
238,239
240,241
242,243
242,244
243,244
246,247
248,249
249,250
249,251
250,251
250,252
251,252
253,254
253,255
254,255
256,257
256,258
257,258
259,260
260,261
260,262
264,265
265,266
265,267
266,267
268,269
268,270
268,271
269,270
271,272
274,275
274,276
275,276
277,278
278,279
279,280
279,281
280,281
281,282
284,285
285,286
285,287
286,287
288,289
288,290
288,291
289,290
291,292
294,295
294,296
295,296
297,298
298,299
299,300
299,301
300,301
301,302
305,306
305,307
306,307
306,308
307,308
309,310
311,312
312,313
313,314
313,315
314,315
316,317
318,319
318,320
319,320
319,321
320,321
322,323
324,325
325,326
326,327
326,328
327,328
329,330
331,332
332,333
332,334
332,335
332,336
332,337
332,338
333,334
335,336
337,338
339,340
341,342
343,344
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,37,41,43,46,48,49,53,55,58,62,64,67,71,73,77,79,85,88,90,92,94,98,100,102,106,109,110,114,119,120,122,128,129,130,132,137,138,141,143,148,150,154,156,159,163,165,167,172,174,176,178,180,184,187,189,191,193,197,199,201,205,208,210,213,215,219,221,225,226,230,232,233,234,239,241,244,245,247,252,255,258,261,262,263,267,270,272,273,276,282,283,287,290,292,293,296,302,303,304,308,310,315,317,321,323,328,330,334,336,338,340,342,344
-----computeFrom-----
23,24
23,25
83,84
83,85
96,97
96,98
116,117
116,118
124,125
124,126
134,135
134,136
145,146
145,147
169,170
169,171
182,183
182,184
195,196
195,197
203,204
203,205
217,218
217,219
222,223
222,224
228,229
228,230
229,230
229,231
236,237
236,238
237,238
237,239
242,243
242,244
249,250
249,251
253,254
253,255
256,257
256,258
265,266
265,267
279,280
279,281
285,286
285,287
299,300
299,301
306,307
306,308
319,320
319,321
-----guardedBy-----
308,317
321,330
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_listen_socket_execlp_04_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_listen_socket_execlp_04_bad()
CWE78_OS_Command_Injection__char_listen_socket_execlp_04_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            char *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = strlen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(char)] = '\0';                /* Eliminate CRLF */                replace = strchr(data, '\r');                if (replace)                {                    *replace = '\0';                }                replace = strchr(data, '\n');                if (replace)                {                    *replace = '\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)                {                    *replace = '\0';                }
replace
replace
{                    *replace = '\0';                }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(96,8,0)
(98,85,0)
(131,175,0)
(199,178,0)
(22,18,0)
(147,50,0)
(35,106,0)
(109,71,0)
(112,188,0)
(158,121,0)
(81,86,0)
(177,164,0)
(72,204,0)
(62,164,0)
(173,33,0)
(93,164,0)
(131,21,0)
(145,204,0)
(103,197,0)
(35,68,0)
(111,68,0)
(202,18,0)
(79,190,0)
(118,83,0)
(8,50,0)
(20,179,0)
(126,67,0)
(188,126,0)
(27,192,0)
(17,120,0)
(74,126,0)
(41,5,0)
(0,103,0)
(117,190,0)
(179,164,0)
(149,121,0)
(97,9,0)
(204,164,0)
(57,141,0)
(145,8,0)
(29,79,0)
(214,68,0)
(40,50,0)
(51,37,0)
(141,57,0)
(86,180,0)
(138,103,0)
(48,178,0)
(15,50,0)
(43,99,0)
(192,12,0)
(183,175,0)
(89,164,0)
(37,188,0)
(27,184,0)
(208,3,0)
(197,50,0)
(124,53,0)
(91,105,0)
(188,179,0)
(65,111,0)
(32,167,0)
(102,19,0)
(132,175,0)
(119,27,0)
(146,164,0)
(130,92,0)
(83,197,0)
(37,76,0)
(82,168,0)
(60,114,0)
(212,167,0)
(126,188,0)
(86,44,0)
(6,204,0)
(111,65,0)
(121,158,0)
(85,111,0)
(187,33,0)
(121,50,0)
(198,55,0)
(92,179,0)
(162,92,0)
(95,50,0)
(68,35,0)
(114,60,0)
(175,67,0)
(48,45,0)
(9,8,0)
(213,174,0)
(185,72,0)
(24,8,0)
(25,180,0)
(125,1,0)
(151,179,0)
(178,79,0)
(126,74,0)
(193,196,0)
(72,181,0)
(94,21,0)
(21,67,0)
(194,141,0)
(169,178,0)
(78,197,0)
(70,24,0)
(58,50,0)
(137,184,0)
(35,151,0)
(65,92,0)
(92,65,0)
(45,48,0)
(217,24,0)
(63,141,0)
(76,50,0)
(141,50,0)
(197,103,0)
(44,50,0)
(163,52,0)
(165,126,0)
(13,164,0)
(60,113,0)
(113,60,0)
(100,4,0)
(151,35,0)
(36,43,0)
(83,19,0)
(154,18,0)
(175,131,0)
(184,27,0)
(23,50,0)
(192,75,0)
(164,207,0)
(134,164,0)
(53,27,0)
(182,50,0)
(10,12,0)
(68,111,0)
(27,197,0)
(180,86,0)
(45,50,0)
(151,178,0)
(61,107,0)
(206,190,0)
(142,57,0)
(11,180,0)
(192,27,0)
(122,154,0)
(16,170,0)
(30,45,0)
(12,192,0)
(111,85,0)
(34,140,0)
(174,50,0)
(133,79,0)
(84,190,0)
(64,113,0)
(115,172,0)
(139,9,0)
(154,77,0)
(136,158,0)
(216,151,0)
(188,37,0)
(26,178,0)
(157,44,0)
(161,164,0)
(90,21,0)
(104,151,0)
(148,26,0)
(107,164,0)
(101,83,0)
(129,68,0)
(68,67,0)
(95,5,0)
(178,190,0)
(105,197,0)
(57,178,0)
(28,48,0)
(59,50,0)
(167,190,0)
(7,145,0)
(27,53,0)
(46,164,0)
(179,26,0)
(67,68,0)
(121,1,0)
(205,164,0)
(200,114,0)
(209,103,0)
(2,164,0)
(37,178,0)
(31,9,0)
(42,63,0)
(5,95,0)
(1,121,0)
(75,192,0)
(168,170,0)
(153,196,0)
(140,197,0)
(9,197,0)
(67,50,0)
(72,8,0)
(33,95,0)
(159,107,0)
(73,204,0)
(154,197,0)
(69,65,0)
(110,210,0)
(144,164,0)
(39,3,0)
(60,55,0)
(127,50,0)
(168,45,0)
(8,9,0)
(105,18,0)
(203,105,0)
(152,145,0)
(170,108,0)
(160,48,0)
(49,57,0)
(80,76,0)
(215,167,0)
(106,35,0)
(3,174,0)
(195,67,0)
(68,8,0)
(135,140,0)
(18,164,0)
(63,43,0)
(196,50,0)
(166,74,0)
(14,167,0)
(21,131,0)
(26,179,0)
(189,201,0)
(19,83,0)
(56,114,0)
(55,60,0)
(191,167,0)
(104,214,1)
(203,163,1)
(88,141,1)
(3,208,1)
(204,73,1)
(214,195,1)
(45,48,1)
(94,175,1)
(96,19,1)
(217,70,1)
(91,203,1)
(186,178,1)
(64,60,1)
(113,64,1)
(191,215,1)
(31,97,1)
(125,149,1)
(72,185,1)
(140,135,1)
(112,51,1)
(63,42,1)
(175,132,1)
(5,41,1)
(136,140,1)
(27,192,1)
(159,61,1)
(183,67,1)
(19,102,1)
(43,36,1)
(72,204,1)
(63,141,1)
(48,160,1)
(154,122,1)
(131,21,1)
(20,204,1)
(0,138,1)
(151,178,1)
(66,145,1)
(160,28,1)
(61,186,1)
(98,35,1)
(30,76,1)
(19,83,1)
(83,197,1)
(184,27,1)
(131,175,1)
(203,189,1)
(105,18,1)
(193,153,1)
(194,123,1)
(173,187,1)
(145,8,1)
(111,65,1)
(145,152,1)
(6,18,1)
(105,197,1)
(73,6,1)
(170,16,1)
(86,180,1)
(141,57,1)
(82,123,1)
(42,88,1)
(168,82,1)
(92,162,1)
(79,133,1)
(60,114,1)
(53,124,1)
(78,196,1)
(83,101,1)
(130,69,1)
(38,88,1)
(121,1,1)
(184,137,1)
(110,131,1)
(21,90,1)
(154,197,1)
(192,75,1)
(27,53,1)
(25,174,1)
(70,8,1)
(145,204,1)
(203,109,1)
(174,213,1)
(8,9,1)
(200,56,1)
(137,27,1)
(187,44,1)
(188,126,1)
(97,139,1)
(212,186,1)
(167,191,1)
(198,114,1)
(216,104,1)
(24,8,1)
(153,113,1)
(28,30,1)
(41,33,1)
(65,92,1)
(74,166,1)
(165,112,1)
(151,179,1)
(86,81,1)
(118,184,1)
(57,178,1)
(10,119,1)
(38,43,1)
(69,85,1)
(48,178,1)
(202,22,1)
(189,24,1)
(72,8,1)
(35,106,1)
(105,91,1)
(87,167,1)
(68,8,1)
(33,173,1)
(1,125,1)
(90,94,1)
(107,159,1)
(115,66,1)
(114,200,1)
(139,96,1)
(51,131,1)
(192,12,1)
(178,79,1)
(68,129,1)
(126,74,1)
(26,148,1)
(18,202,1)
(39,121,1)
(103,0,1)
(44,157,1)
(85,98,1)
(21,67,1)
(162,130,1)
(109,140,1)
(100,113,1)
(49,142,1)
(213,3,1)
(24,217,1)
(22,107,1)
(149,158,1)
(124,192,1)
(180,11,1)
(26,178,1)
(138,209,1)
(142,194,1)
(132,183,1)
(119,95,1)
(68,111,1)
(203,110,1)
(9,197,1)
(215,14,1)
(122,105,1)
(81,180,1)
(92,179,1)
(163,19,1)
(101,118,1)
(11,25,1)
(111,85,1)
(7,154,1)
(212,115,1)
(36,63,1)
(212,66,1)
(195,24,1)
(57,49,1)
(16,168,1)
(169,199,1)
(14,32,1)
(148,20,1)
(17,184,1)
(35,151,1)
(179,26,1)
(140,197,1)
(151,216,1)
(121,158,1)
(203,38,1)
(9,31,1)
(203,100,1)
(37,188,1)
(133,29,1)
(12,10,1)
(55,198,1)
(152,7,1)
(203,17,1)
(68,35,1)
(60,55,1)
(166,165,1)
(37,178,1)
(95,5,1)
(80,37,1)
(7,105,1)
(157,86,1)
(123,45,1)
(32,212,1)
(178,169,1)
(199,79,1)
(196,193,1)
(102,83,1)
(56,38,1)
(158,136,1)
(168,45,1)
(113,60,1)
(185,145,1)
(76,80,1)
(129,111,1)
(209,78,1)
(188,179,1)
(154,18,1)
(66,72,1)
(197,103,1)
(135,34,1)
(67,68,1)
(126,67,1)
(208,39,1)
(34,197,1)
(27,197,1)
(175,67,1)
(194,170,1)
(56,179,1)
(203,186,2)
(24,19,2)
(68,24,2)
(119,140,2)
(192,140,2)
(118,184,2)
(65,24,2)
(110,131,2)
(200,186,2)
(69,24,2)
(55,38,2)
(121,140,2)
(157,140,2)
(187,140,2)
(5,140,2)
(102,184,2)
(109,140,2)
(43,88,2)
(112,131,2)
(208,140,2)
(126,74,2)
(8,9,2)
(41,140,2)
(160,131,2)
(86,140,2)
(57,131,2)
(19,184,2)
(22,186,2)
(122,105,2)
(136,140,2)
(27,53,2)
(72,145,2)
(204,186,2)
(113,38,2)
(170,123,2)
(64,186,2)
(168,45,2)
(20,186,2)
(76,131,2)
(78,113,2)
(18,186,2)
(154,18,2)
(68,8,2)
(114,38,2)
(57,178,2)
(98,24,2)
(135,113,2)
(140,113,2)
(33,140,2)
(121,158,2)
(92,24,2)
(148,186,2)
(83,197,2)
(107,186,2)
(195,24,2)
(178,79,2)
(180,140,2)
(101,184,2)
(142,131,2)
(73,186,2)
(70,19,2)
(74,131,2)
(141,131,2)
(19,83,2)
(185,145,2)
(35,151,2)
(31,19,2)
(111,65,2)
(214,24,2)
(141,57,2)
(132,24,2)
(197,103,2)
(0,113,2)
(189,24,2)
(60,114,2)
(123,131,2)
(91,186,2)
(21,67,2)
(26,186,2)
(175,24,2)
(115,66,2)
(34,113,2)
(56,38,2)
(42,88,2)
(12,140,2)
(88,131,2)
(64,38,2)
(37,131,2)
(152,186,2)
(96,19,2)
(21,175,2)
(37,188,2)
(145,204,2)
(126,67,2)
(209,113,2)
(56,186,2)
(60,186,2)
(124,140,2)
(153,113,2)
(151,179,2)
(60,38,2)
(194,131,2)
(72,204,2)
(95,5,2)
(65,92,2)
(216,24,2)
(192,75,2)
(198,186,2)
(26,178,2)
(67,68,2)
(86,180,2)
(25,140,2)
(139,19,2)
(217,19,2)
(131,24,2)
(83,184,2)
(27,197,2)
(28,131,2)
(179,26,2)
(159,186,2)
(105,18,2)
(154,105,2)
(166,131,2)
(61,186,2)
(130,24,2)
(154,197,2)
(162,24,2)
(192,12,2)
(213,140,2)
(95,140,2)
(36,88,2)
(53,140,2)
(82,123,2)
(145,8,2)
(63,141,2)
(55,186,2)
(151,178,2)
(92,179,2)
(140,197,2)
(81,140,2)
(66,186,2)
(111,85,2)
(97,19,2)
(11,140,2)
(68,35,2)
(165,131,2)
(16,123,2)
(3,140,2)
(105,197,2)
(193,113,2)
(48,131,2)
(149,140,2)
(27,192,2)
(131,175,2)
(85,24,2)
(60,55,2)
(30,131,2)
(137,140,2)
(39,140,2)
(80,131,2)
(175,67,2)
(202,186,2)
(6,186,2)
(38,131,2)
(51,131,2)
(188,126,2)
(72,8,2)
(105,186,2)
(151,24,2)
(35,24,2)
(113,186,2)
(37,178,2)
(200,38,2)
(184,27,2)
(174,140,2)
(104,24,2)
(113,60,2)
(114,186,2)
(188,179,2)
(158,140,2)
(44,140,2)
(1,140,2)
(179,186,2)
(100,113,2)
(198,38,2)
(94,175,2)
(90,175,2)
(168,123,2)
(125,140,2)
(17,184,2)
(45,131,2)
(27,140,2)
(163,19,2)
(67,24,2)
(188,131,2)
(121,1,2)
(145,186,2)
(196,113,2)
(9,19,2)
(126,131,2)
(8,19,2)
(24,8,2)
(131,21,2)
(63,88,2)
(35,106,2)
(111,24,2)
(45,48,2)
(197,113,2)
(103,113,2)
(129,24,2)
(68,111,2)
(183,24,2)
(9,197,2)
(10,140,2)
(173,140,2)
(184,140,2)
(138,113,2)
(48,178,2)
(7,186,2)
(49,131,2)
-----------------------------------
(0,IPPROTO_TCP)
(1,sizeof(service)
(2,listenSocket)
(3,service.sin_family)
(4,)
(5,htons(TCP_PORT)
(6,acceptSocket)
(7,acceptSocket)
(8,acceptSocket = accept(listenSocket, NULL, NULL)
(9,accept(listenSocket, NULL, NULL)
(10,service)
(11,sin_addr)
(12,&service)
(13,if (wsaDataInit)
(14,COMMAND_ARG1)
(15,if (acceptSocket == SOCKET_ERROR)
(16,\'\\\\0\')
(17,break;)
(18,listenSocket = INVALID_SOCKET)
(19,listen(listenSocket, LISTEN_BACKLOG)
(20,dataLen)
(21,recvResult == 0)
(22,listenSocket)
(23,if (WSAStartup(MAKEWORD(2,2)
(24,acceptSocket == SOCKET_ERROR)
(25,service)
(26,strlen(data)
(27,bind(listenSocket, (struct sockaddr*)
(28,data)
(29,dataBuffer)
(30,replace)
(31,NULL)
(32,COMMAND_INT)
(33,service.sin_port)
(34,listenSocket)
(35,(char *)
(36,'\\\\0')
(37,data[dataLen + recvResult / sizeof(char)
(38,0)
(39,service)
(40,if (bind(listenSocket, (struct sockaddr*)
(41,TCP_PORT)
(42,replace)
(43,*replace = '\\\\0')
(44,service.sin_addr.s_addr = INADDR_ANY)
(45,replace = strchr(data, \'\\\\r\')
(46,do)
(47,\'\\\\0\')
(48,strchr(data, \'\\\\r\')
(49,'\\\\n')
(50,)
(51,data)
(52,)
(53,sizeof(service)
(54,\'\\\\n\')
(55,&wsaData)
(56,2)
(57,strchr(data, '\\\\n')
(58,if (replace)
(59,if (listen(listenSocket, LISTEN_BACKLOG)
(60,WSAStartup(MAKEWORD(2,2)
(61,wsaDataInit)
(62,acceptSocket)
(63,*replace)
(64,NO_ERROR)
(65,100 - dataLen - 1)
(66,wsaDataInit)
(67,recvResult = recv(acceptSocket, (char *)
(68,recv(acceptSocket, (char *)
(69,100)
(70,acceptSocket)
(71,)
(72,CLOSE_SOCKET(acceptSocket)
(73,INVALID_SOCKET)
(74,sizeof(char)
(75,struct sockaddr*)
(76,data[dataLen + recvResult / sizeof(char)
(77,)
(78,listenSocket)
(79,dataBuffer[100] = COMMAND_ARG2)
(80,'\\\\0')
(81,s_addr)
(82,replace)
(83,listen(listenSocket, LISTEN_BACKLOG)
(84,dataBuffer)
(85,sizeof(char)
(86,service.sin_addr.s_addr)
(87,RET)
(88,replace)
(89,service)
(90,0)
(91,INVALID_SOCKET)
(92,dataLen - 1)
(93,wsaData)
(94,recvResult)
(95,service.sin_port = htons(TCP_PORT)
(96,acceptSocket)
(97,NULL)
(98,char)
(99,)
(100,break;)
(101,LISTEN_BACKLOG)
(102,SOCKET_ERROR)
(103,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(104,data)
(105,listenSocket != INVALID_SOCKET)
(106,char *)
(107,wsaDataInit = 0)
(108,)
(109,break;)
(110,break;)
(111,sizeof(char)
(112,dataLen)
(113,WSAStartup(MAKEWORD(2,2)
(114,MAKEWORD(2,2)
(115,WSACleanup()
(116,*replace = \'\\\\0\')
(117,if(STATIC_CONST_TRUE)
(118,listenSocket)
(119,listenSocket)
(120,)
(121,memset(&service, 0, sizeof(service)
(122,listenSocket)
(123,replace)
(124,service)
(125,service)
(126,recvResult / sizeof(char)
(127,if (recvResult == SOCKET_ERROR || recvResult == 0)
(128,strchr(data, \'\\\\n\')
(129,0)
(130,dataLen)
(131,recvResult == SOCKET_ERROR || recvResult == 0)
(132,SOCKET_ERROR)
(133,COMMAND_ARG2)
(134,replace)
(135,INVALID_SOCKET)
(136,service)
(137,SOCKET_ERROR)
(138,SOCK_STREAM)
(139,listenSocket)
(140,listenSocket == INVALID_SOCKET)
(141,replace = strchr(data, '\\\\n')
(142,data)
(143,replace = strchr(data, '\\\\r')
(144,if (listenSocket != INVALID_SOCKET)
(145,acceptSocket != INVALID_SOCKET)
(146,dataLen)
(147,if (replace)
(148,data)
(149,0)
(150,'\\\\0')
(151,data + dataLen)
(152,INVALID_SOCKET)
(153,wsaDataInit)
(154,CLOSE_SOCKET(listenSocket)
(155,\'\\\\0\')
(156,strchr(data, '\\\\r')
(157,INADDR_ANY)
(158,&service)
(159,0)
(160,\'\\\\r\')
(161,if (acceptSocket != INVALID_SOCKET)
(162,1)
(163,break;)
(164,)
(165,recvResult)
(166,char)
(167,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(168,*replace)
(169,dataBuffer)
(170,*replace = '\\\\0')
(171,*replace = \'\\\\0\')
(172,)
(173,sin_port)
(174,service.sin_family = AF_INET)
(175,recvResult == SOCKET_ERROR)
(176,replace = strchr(data, \'\\\\n\')
(177,recvResult)
(178,data = dataBuffer)
(179,dataLen = strlen(data)
(180,service.sin_addr)
(181,)
(182,if (listenSocket == INVALID_SOCKET)
(183,recvResult)
(184,bind(listenSocket, (struct sockaddr*)
(185,acceptSocket)
(186,STATIC_CONST_TRUE)
(187,service)
(188,dataLen + recvResult / sizeof(char)
(189,break;)
(190,)
(191,NULL)
(192,(struct sockaddr*)
(193,1)
(194,replace)
(195,recvResult)
(196,wsaDataInit = 1)
(197,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(198,wsaData)
(199,data)
(200,2)
(201,)
(202,INVALID_SOCKET)
(203,listenSocket)
(204,acceptSocket = INVALID_SOCKET)
(205,wsaDataInit)
(206,data)
(207,)
(208,sin_family)
(209,AF_INET)
(210,)
(211,'\\\\r')
(212,COMMAND_INT)
(213,AF_INET)
(214,acceptSocket)
(215,COMMAND_ARG3)
(216,dataLen)
(217,SOCKET_ERROR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^