-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_char_06_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,64,65,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_char_06_bad(){    char * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_char_06_bad()
CWE415_Double_Free__malloc_free_char_06_bad
{    char * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,26,0)
(32,4,0)
(32,15,0)
(3,15,0)
(10,31,0)
(18,12,0)
(23,28,0)
(27,34,0)
(5,32,0)
(25,28,0)
(32,31,0)
(35,31,0)
(30,15,0)
(7,9,0)
(16,33,0)
(31,28,0)
(21,30,0)
(15,9,0)
(0,26,0)
(17,1,0)
(27,29,0)
(34,27,0)
(11,1,0)
(24,12,0)
(33,9,0)
(36,29,0)
(8,30,0)
(19,28,0)
(15,27,0)
(0,6,0)
(22,36,0)
(33,15,0)
(27,15,0)
(26,0,0)
(29,36,0)
(36,20,0)
(2,20,0)
(20,36,0)
(29,27,0)
(10,35,1)
(32,5,1)
(26,14,1)
(32,31,1)
(18,24,1)
(13,12,1)
(5,12,1)
(21,8,1)
(16,30,1)
(33,15,1)
(32,15,1)
(30,15,1)
(29,36,1)
(16,0,1)
(24,33,1)
(0,26,1)
(27,29,1)
(12,18,1)
(27,34,1)
(13,32,1)
(33,16,1)
(22,3,1)
(17,11,1)
(31,10,1)
(36,20,1)
(11,31,1)
(24,1,1)
(30,21,1)
(2,22,1)
(15,27,1)
(3,1,1)
(14,30,1)
(8,15,1)
(1,17,1)
(20,2,1)
(32,31,2)
(36,20,2)
(21,1,2)
(3,1,2)
(2,1,2)
(16,1,2)
(32,12,2)
(14,30,2)
(0,30,2)
(8,1,2)
(15,27,2)
(22,1,2)
(27,1,2)
(33,1,2)
(0,26,2)
(30,15,2)
(29,36,2)
(5,12,2)
(27,34,2)
(36,1,2)
(33,15,2)
(27,29,2)
(29,1,2)
(20,1,2)
(26,30,2)
(30,1,2)
(32,15,2)
(15,1,2)
-----------------------------------
(0,exit(-1)
(1,STATIC_CONST_FIVE==5)
(2,char)
(3,data)
(4,)
(5,data)
(6,)
(7,if (data == NULL)
(8,data)
(9,)
(10,NULL)
(11,STATIC_CONST_FIVE)
(12,STATIC_CONST_FIVE==5)
(13,RET)
(14,1)
(15,data = (char *)
(16,data)
(17,5)
(18,5)
(19,if(STATIC_CONST_FIVE==5)
(20,sizeof(char)
(21,NULL)
(22,100)
(23,data)
(24,STATIC_CONST_FIVE)
(25,if(STATIC_CONST_FIVE==5)
(26,-1)
(27,(char *)
(28,)
(29,malloc(100*sizeof(char)
(30,data == NULL)
(31,data = NULL)
(32,free(data)
(33,free(data)
(34,char *)
(35,data)
(36,100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^