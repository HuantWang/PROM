-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_10_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    if(globalTrue)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
45,47
46,47
46,48
47,48
49,50
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
100,101
100,102
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
107,108
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
117,118
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
129,131
131,132
132,133
132,134
133,134
136,137
137,138
137,139
138,139
140,141
141,142
141,143
142,143
-----nextToken-----
2,4,9,11,12,16,18,19,24,26,29,31,35,36,40,42,43,48,50,53,55,59,60,63,68,70,75,77,79,84,86,91,92,95,96,99,106,108,109,110,116,118,119,120,124,126,128,130,134,135,139,143,144
-----computeFrom-----
30,31
30,32
54,55
54,56
66,67
66,68
89,90
89,91
93,94
93,95
102,103
102,104
112,113
112,114
129,130
129,131
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_10_bad(){    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_10_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_10_bad
{    twoIntsStruct * data;    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    if(globalTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
*
dataBadBuffer
= (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(50*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
*
dataGoodBuffer
= (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if(globalTrue)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
globalTrue
globalTrue
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(9,31,0)
(10,50,0)
(47,33,0)
(50,62,0)
(55,32,0)
(12,64,0)
(41,54,0)
(5,37,0)
(19,24,0)
(49,10,0)
(32,55,0)
(50,10,0)
(44,8,0)
(29,5,0)
(14,5,0)
(13,7,0)
(44,45,0)
(59,25,0)
(57,31,0)
(0,37,0)
(32,53,0)
(42,46,0)
(61,37,0)
(2,16,0)
(53,54,0)
(24,56,0)
(1,21,0)
(15,52,0)
(25,53,0)
(27,18,0)
(8,62,0)
(48,44,0)
(35,16,0)
(27,35,0)
(34,54,0)
(33,55,0)
(21,11,0)
(51,53,0)
(7,64,0)
(33,44,0)
(6,18,0)
(7,37,0)
(52,44,0)
(16,35,0)
(65,66,0)
(64,24,0)
(28,46,0)
(36,11,0)
(20,33,0)
(4,35,0)
(23,44,0)
(46,52,0)
(52,46,0)
(62,38,0)
(18,66,0)
(63,68,0)
(18,6,0)
(21,5,0)
(66,54,0)
(62,8,0)
(11,56,0)
(68,10,0)
(22,54,0)
(10,68,0)
(58,28,0)
(8,54,0)
(3,25,0)
(46,28,0)
(31,37,0)
(66,18,0)
(5,21,0)
(38,62,0)
(64,7,0)
(62,50,0)
(40,7,0)
(18,27,0)
(35,27,0)
(26,8,0)
(43,54,0)
(67,61,0)
(39,37,0)
(30,52,0)
(55,33,0)
(52,53,0)
(16,2,1)
(23,60,1)
(9,57,1)
(14,31,1)
(13,40,1)
(60,66,1)
(67,24,1)
(44,48,1)
(19,64,1)
(64,12,1)
(5,29,1)
(42,30,1)
(35,16,1)
(2,4,1)
(44,8,1)
(24,19,1)
(18,6,1)
(0,44,1)
(39,0,1)
(18,27,1)
(37,39,1)
(33,44,1)
(12,7,1)
(10,68,1)
(31,37,1)
(62,38,1)
(33,47,1)
(61,37,1)
(20,52,1)
(36,21,1)
(31,9,1)
(66,18,1)
(55,33,1)
(49,26,1)
(65,8,1)
(7,13,1)
(0,60,1)
(5,37,1)
(46,28,1)
(4,65,1)
(52,44,1)
(11,36,1)
(28,58,1)
(7,37,1)
(48,23,1)
(21,5,1)
(68,63,1)
(17,32,1)
(29,14,1)
(57,61,1)
(27,35,1)
(32,55,1)
(15,31,1)
(62,50,1)
(63,49,1)
(61,67,1)
(50,10,1)
(8,62,1)
(58,42,1)
(30,15,1)
(52,46,1)
(57,37,1)
(47,20,1)
(64,7,1)
(40,11,1)
(1,5,1)
(21,1,1)
(50,10,2)
(23,60,2)
(67,31,2)
(18,6,2)
(19,31,2)
(14,31,2)
(62,50,2)
(5,37,2)
(35,16,2)
(55,33,2)
(9,31,2)
(5,31,2)
(61,37,2)
(8,62,2)
(40,31,2)
(11,31,2)
(62,38,2)
(31,31,2)
(10,68,2)
(32,55,2)
(7,31,2)
(29,31,2)
(48,60,2)
(36,31,2)
(57,31,2)
(21,5,2)
(12,31,2)
(52,46,2)
(64,7,2)
(44,8,2)
(24,31,2)
(33,44,2)
(46,28,2)
(66,18,2)
(61,31,2)
(21,31,2)
(44,60,2)
(52,44,2)
(7,37,2)
(13,31,2)
(31,37,2)
(27,35,2)
(18,27,2)
(64,31,2)
(1,31,2)
-----------------------------------
(0,i)
(1,intOne)
(2,twoIntsStruct)
(3,for (i = 0; i < 100; i++)
(4,100)
(5,source[i])
(6,twoIntsStruct *)
(7,source[i])
(8,* dataBadBuffer = (twoIntsStruct *)
(9,100)
(10,50*sizeof(twoIntsStruct)
(11,source[i].intOne = 0)
(12,intTwo)
(13,i)
(14,source)
(15,data)
(16,sizeof(twoIntsStruct)
(17,RET)
(18,(twoIntsStruct *)
(19,0)
(20,data)
(21,source[i].intOne)
(22,dataGoodBuffer)
(23,data)
(24,source[i].intTwo = 0)
(25,)
(26,dataBadBuffer)
(27,ALLOCA(100*sizeof(twoIntsStruct)
(28,sizeof(twoIntsStruct)
(29,i)
(30,source)
(31,i < 100)
(32,printStructLine(&data[0])
(33,data[0])
(34,if(globalTrue)
(35,100*sizeof(twoIntsStruct)
(36,0)
(37,i = 0)
(38,twoIntsStruct *)
(39,0)
(40,source)
(41,data)
(42,100)
(43,dataBadBuffer)
(44,data = dataBadBuffer)
(45,)
(46,100*sizeof(twoIntsStruct)
(47,0)
(48,dataBadBuffer)
(49,50)
(50,ALLOCA(50*sizeof(twoIntsStruct)
(51,source)
(52,memcpy(data, source, 100*sizeof(twoIntsStruct)
(53,)
(54,)
(55,&data[0])
(56,)
(57,i)
(58,twoIntsStruct)
(59,i)
(60,globalTrue)
(61,i++)
(62,(twoIntsStruct *)
(63,twoIntsStruct)
(64,source[i].intTwo)
(65,dataGoodBuffer)
(66,* dataGoodBuffer = (twoIntsStruct *)
(67,i)
(68,sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^