-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int_03_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(5==5)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printIntLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,60,65,66,69,70,73,79,81,82,86,88,91,92,97,100,101
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
63,64
63,65
67,68
67,69
76,77
76,78
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int_03_bad(){    int * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int_03_bad()
CWE416_Use_After_Free__malloc_free_int_03_bad
{    int * data;    /* Initialize data */    data = NULL;    if(5==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
5==5
5
5
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5;            }
data[i] = 5;
data[i] = 5
data[i]
data
data
i
i
5
free(data);
free(data)
free
free
data
data
if(5==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
5==5
5
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
-----joern-----
(34,46,0)
(45,6,0)
(9,6,0)
(49,54,0)
(6,45,0)
(16,24,0)
(4,50,0)
(8,21,0)
(11,46,0)
(18,4,0)
(18,39,0)
(22,18,0)
(39,37,0)
(12,24,0)
(25,12,0)
(32,27,0)
(17,39,0)
(41,46,0)
(29,44,0)
(12,55,0)
(15,46,0)
(33,39,0)
(21,8,0)
(53,41,0)
(55,24,0)
(13,18,0)
(47,54,0)
(28,36,0)
(8,45,0)
(51,11,0)
(0,10,0)
(54,24,0)
(29,1,0)
(35,27,0)
(52,37,0)
(10,55,0)
(45,8,0)
(21,55,0)
(30,46,0)
(1,29,0)
(18,55,0)
(40,55,0)
(14,15,0)
(23,21,0)
(42,37,0)
(19,15,0)
(3,1,0)
(55,21,0)
(7,36,0)
(48,10,0)
(26,31,0)
(43,41,0)
(5,45,0)
(4,18,0)
(38,37,0)
(41,55,0)
(21,23,0)
(20,26,0)
(41,26,0)
(22,27,1)
(45,6,1)
(51,26,1)
(0,55,1)
(27,35,1)
(14,19,1)
(4,18,1)
(32,36,1)
(32,12,1)
(10,48,1)
(55,21,1)
(48,0,1)
(29,1,1)
(28,39,1)
(33,17,1)
(35,32,1)
(34,10,1)
(11,51,1)
(18,39,1)
(9,5,1)
(43,53,1)
(15,46,1)
(46,30,1)
(41,43,1)
(3,10,1)
(6,9,1)
(10,55,1)
(39,33,1)
(18,55,1)
(15,14,1)
(21,23,1)
(26,20,1)
(20,41,1)
(11,46,1)
(30,34,1)
(34,29,1)
(12,55,1)
(1,3,1)
(19,46,1)
(18,13,1)
(2,27,1)
(5,40,1)
(7,28,1)
(36,7,1)
(8,45,1)
(12,25,1)
(2,4,1)
(21,8,1)
(53,15,1)
(25,15,1)
(41,46,1)
(19,11,1)
(40,36,1)
(13,22,1)
(41,55,1)
(5,36,2)
(18,39,2)
(51,15,2)
(8,45,2)
(15,36,2)
(30,36,2)
(55,36,2)
(6,36,2)
(41,55,2)
(41,46,2)
(4,27,2)
(25,36,2)
(43,15,2)
(45,36,2)
(19,36,2)
(26,15,2)
(21,36,2)
(20,15,2)
(22,27,2)
(0,36,2)
(12,36,2)
(4,18,2)
(41,15,2)
(29,10,2)
(11,15,2)
(18,55,2)
(14,15,2)
(13,27,2)
(18,27,2)
(8,36,2)
(11,46,2)
(1,10,2)
(34,36,2)
(53,15,2)
(14,36,2)
(21,8,2)
(40,36,2)
(21,23,2)
(12,55,2)
(10,36,2)
(9,36,2)
(55,21,2)
(29,1,2)
(46,36,2)
(15,15,2)
(15,46,2)
(10,55,2)
(48,36,2)
(3,10,2)
(19,15,2)
(45,6,2)
-----------------------------------
(0,data)
(1,-1)
(2,RET)
(3,1)
(4,printIntLine(data[0])
(5,100)
(6,sizeof(int)
(7,5)
(8,malloc(100*sizeof(int)
(9,int)
(10,data == NULL)
(11,i++)
(12,free(data)
(13,0)
(14,100)
(15,i < 100)
(16,if (data == NULL)
(17,data)
(18,data[0])
(19,i)
(20,5)
(21,(int *)
(22,data)
(23,int *)
(24,)
(25,data)
(26,data[i] = 5)
(27,5==5)
(28,5)
(29,exit(-1)
(30,0)
(31,)
(32,5)
(33,NULL)
(34,i)
(35,5)
(36,5==5)
(37,)
(38,if(5==5)
(39,data = NULL)
(40,data)
(41,data[i])
(42,if(5==5)
(43,i)
(44,)
(45,100*sizeof(int)
(46,i = 0)
(47,for(i = 0; i < 100; i++)
(48,NULL)
(49,i)
(50,)
(51,i)
(52,data)
(53,data)
(54,)
(55,data = (int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^