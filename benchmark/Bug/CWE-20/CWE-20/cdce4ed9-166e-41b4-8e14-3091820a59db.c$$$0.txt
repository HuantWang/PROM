-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(5==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,19,20,25,28,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
30,31
30,32
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,6,0)
(8,6,0)
(34,48,0)
(50,29,0)
(31,41,0)
(21,14,0)
(10,23,0)
(6,5,0)
(48,30,0)
(25,7,0)
(42,47,0)
(53,17,0)
(39,40,0)
(28,41,0)
(4,47,0)
(30,7,0)
(35,11,0)
(19,30,0)
(49,19,0)
(47,4,0)
(44,5,0)
(7,30,0)
(41,30,0)
(52,5,0)
(22,36,0)
(36,3,0)
(38,6,0)
(29,1,0)
(33,5,0)
(4,29,0)
(25,3,0)
(15,29,0)
(29,15,0)
(0,3,0)
(9,7,0)
(30,13,0)
(7,9,0)
(51,17,0)
(4,6,0)
(16,2,0)
(24,12,0)
(46,12,0)
(3,25,0)
(3,29,0)
(3,36,0)
(43,2,0)
(26,13,0)
(32,35,0)
(14,10,0)
(17,37,0)
(48,13,0)
(45,4,0)
(19,13,0)
(10,14,0)
(41,13,0)
(12,30,0)
(18,40,0)
(27,30,0)
(7,25,0)
(42,45,1)
(27,4,1)
(39,6,1)
(18,39,1)
(46,24,1)
(43,40,1)
(47,42,1)
(49,48,1)
(50,40,1)
(7,25,1)
(20,19,1)
(29,15,1)
(4,6,1)
(41,28,1)
(6,38,1)
(24,30,1)
(20,35,1)
(31,12,1)
(48,34,1)
(22,0,1)
(7,9,1)
(43,29,1)
(25,3,1)
(38,8,1)
(20,2,1)
(15,50,1)
(3,6,1)
(32,4,1)
(4,29,1)
(21,12,1)
(14,21,1)
(40,18,1)
(36,22,1)
(19,49,1)
(0,27,1)
(10,14,1)
(12,30,1)
(48,30,1)
(34,41,1)
(35,32,1)
(45,2,1)
(2,16,1)
(31,10,1)
(3,36,1)
(12,46,1)
(41,30,1)
(4,47,1)
(30,7,1)
(16,43,1)
(19,30,1)
(3,29,1)
(28,31,1)
(29,15,2)
(7,4,2)
(24,4,2)
(28,4,2)
(10,14,2)
(3,6,2)
(27,4,2)
(4,2,2)
(4,6,2)
(12,30,2)
(19,4,2)
(21,12,2)
(30,4,2)
(4,29,2)
(47,2,2)
(7,25,2)
(12,4,2)
(10,12,2)
(36,4,2)
(31,4,2)
(45,2,2)
(49,4,2)
(22,4,2)
(25,4,2)
(3,29,2)
(29,40,2)
(7,9,2)
(19,30,2)
(30,7,2)
(25,3,2)
(3,4,2)
(46,4,2)
(48,4,2)
(3,36,2)
(0,4,2)
(50,40,2)
(34,4,2)
(35,4,2)
(41,4,2)
(41,30,2)
(42,2,2)
(14,12,2)
(4,47,2)
(32,4,2)
(48,30,2)
(15,40,2)
-----------------------------------
(0,data)
(1,)
(2,5==5)
(3,data*sizeof(char)
(4,data > strlen(HELLO_STRING)
(5,)
(6,data = 0)
(7,(char *)
(8,data)
(9,char *)
(10,exit(-1)
(11,)
(12,myString == NULL)
(13,)
(14,-1)
(15,rand()
(16,5)
(17,)
(18,5)
(19,free(myString)
(20,RET)
(21,1)
(22,char)
(23,)
(24,myString)
(25,malloc(data*sizeof(char)
(26,if (myString == NULL)
(27,myString)
(28,HELLO_STRING)
(29,data = rand()
(30,myString = (char *)
(31,myString)
(32,"Input is less than the length of the source string")
(33,if(5==5)
(34,myString)
(35,printLine("Input is less than the length of the source string")
(36,sizeof(char)
(37,)
(38,0)
(39,5)
(40,5==5)
(41,strcpy(myString, HELLO_STRING)
(42,HELLO_STRING)
(43,5)
(44,if(5==5)
(45,data)
(46,NULL)
(47,strlen(HELLO_STRING)
(48,printLine(myString)
(49,myString)
(50,data)
(51,if (data > strlen(HELLO_STRING)
(52,data)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^