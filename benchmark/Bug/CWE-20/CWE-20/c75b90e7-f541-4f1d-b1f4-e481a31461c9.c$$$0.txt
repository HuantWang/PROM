-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
99,100
100,101
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
120,121
120,122
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,60,62,65,67,69,73,75,76,78,79,84,86,87,88,93,94,97,98,101,107,109,112,114,119,121,122,123,127,129,133,135
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
77,78
77,79
81,82
81,83
85,86
85,87
91,92
91,93
95,96
95,97
104,105
104,106
116,117
116,118
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad(){    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad
{    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,36,0)
(20,14,0)
(63,36,0)
(10,70,0)
(15,4,0)
(55,4,0)
(3,6,0)
(18,53,0)
(47,69,0)
(14,70,0)
(3,68,0)
(19,4,0)
(36,4,0)
(13,1,0)
(29,16,0)
(1,70,0)
(43,60,0)
(71,34,0)
(34,71,0)
(50,53,0)
(32,56,0)
(48,70,0)
(5,34,0)
(9,27,0)
(10,53,0)
(11,27,0)
(35,19,0)
(1,13,0)
(43,31,0)
(49,43,0)
(65,31,0)
(29,17,0)
(23,70,0)
(31,36,0)
(26,36,0)
(54,14,0)
(64,33,0)
(62,60,0)
(56,70,0)
(1,57,0)
(27,11,0)
(28,34,0)
(58,18,0)
(21,11,0)
(59,10,0)
(66,27,0)
(11,36,0)
(45,57,0)
(8,2,0)
(71,2,0)
(6,53,0)
(57,45,0)
(25,53,0)
(37,45,0)
(10,3,0)
(12,10,0)
(67,18,0)
(44,11,0)
(0,56,0)
(42,6,0)
(57,1,0)
(33,4,0)
(40,6,0)
(43,70,0)
(56,33,0)
(7,60,0)
(60,43,0)
(45,52,0)
(23,36,0)
(52,45,0)
(46,70,0)
(17,29,0)
(6,3,0)
(72,48,0)
(69,53,0)
(30,36,0)
(70,4,0)
(48,36,0)
(51,23,0)
(70,1,0)
(41,19,0)
(24,17,0)
(61,52,0)
(39,71,0)
(2,8,1)
(67,58,1)
(37,46,1)
(29,17,1)
(9,21,1)
(56,70,1)
(6,40,1)
(64,56,1)
(32,0,1)
(33,64,1)
(43,60,1)
(0,29,1)
(60,7,1)
(40,42,1)
(25,2,1)
(69,47,1)
(12,18,1)
(17,24,1)
(45,52,1)
(23,70,1)
(48,72,1)
(3,6,1)
(61,37,1)
(14,70,1)
(18,67,1)
(52,61,1)
(58,69,1)
(47,3,1)
(58,53,1)
(31,65,1)
(24,14,1)
(70,1,1)
(69,53,1)
(6,53,1)
(18,53,1)
(7,62,1)
(10,70,1)
(44,33,1)
(1,13,1)
(0,14,1)
(54,70,1)
(27,66,1)
(71,34,1)
(72,31,1)
(20,54,1)
(28,39,1)
(50,25,1)
(39,11,1)
(65,43,1)
(35,41,1)
(1,57,1)
(48,70,1)
(66,9,1)
(19,35,1)
(62,49,1)
(5,28,1)
(22,23,1)
(8,71,1)
(49,18,1)
(10,53,1)
(42,10,1)
(56,32,1)
(43,70,1)
(51,48,1)
(21,44,1)
(23,51,1)
(46,19,1)
(59,12,1)
(11,27,1)
(34,5,1)
(53,50,1)
(57,45,1)
(14,20,1)
(10,59,1)
(43,60,2)
(11,27,2)
(14,70,2)
(6,18,2)
(3,6,2)
(42,18,2)
(48,70,2)
(71,34,2)
(3,18,2)
(58,18,2)
(18,18,2)
(47,18,2)
(45,52,2)
(24,14,2)
(29,14,2)
(70,1,2)
(18,53,2)
(6,53,2)
(57,45,2)
(59,18,2)
(40,18,2)
(43,70,2)
(69,53,2)
(1,13,2)
(10,70,2)
(17,14,2)
(1,57,2)
(23,70,2)
(29,17,2)
(67,18,2)
(69,18,2)
(56,70,2)
(10,18,2)
(10,53,2)
(12,18,2)
-----------------------------------
(0,data)
(1,(char *)
(2,source[100-1] = '\\\\0')
(3,data[i] = source[i])
(4,)
(5,1)
(6,source[i])
(7,1)
(8,'\\\\0')
(9,100)
(10,data[i])
(11,memset(source, \'C\', 100-1)
(12,data)
(13,char *)
(14,data == NULL)
(15,data)
(16,)
(17,-1)
(18,i < 100)
(19,data = NULL)
(20,NULL)
(21,'C')
(22,RET)
(23,free(data)
(24,1)
(25,i)
(26,source)
(27,100-1)
(28,100)
(29,exit(-1)
(30,i)
(31,data[100-1] = '\\\\0')
(32,0)
(33,data[0] = '\\\\0')
(34,100-1)
(35,NULL)
(36,)
(37,50)
(38,memset(source, 'C', 100-1)
(39,source)
(40,i)
(41,data)
(42,source)
(43,data[100-1])
(44,source)
(45,50*sizeof(char)
(46,data)
(47,i)
(48,printLine(data)
(49,data)
(50,0)
(51,data)
(52,sizeof(char)
(53,i = 0)
(54,data)
(55,if (data == NULL)
(56,data[0])
(57,malloc(50*sizeof(char)
(58,i)
(59,i)
(60,100-1)
(61,char)
(62,100)
(63,for (i = 0; i < 100; i++)
(64,'\\\\0')
(65,'\\\\0')
(66,1)
(67,100)
(68,)
(69,i++)
(70,data = (char *)
(71,source[100-1])
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^