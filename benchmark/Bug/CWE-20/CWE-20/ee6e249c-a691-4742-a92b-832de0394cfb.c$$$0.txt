-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(5==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/
        wcscat(dest, data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,94,96
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
55,56
55,57
59,60
59,61
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(5==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/        wcscat(dest, data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcscat(dest, data);
wcscat(dest, data)
wcscat
wcscat
dest
dest
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(14,4,0)
(23,3,0)
(3,23,0)
(23,25,0)
(9,6,0)
(20,4,0)
(34,9,0)
(11,6,0)
(19,13,0)
(9,34,0)
(6,11,0)
(32,21,0)
(13,11,0)
(11,13,0)
(0,35,0)
(21,33,0)
(6,9,0)
(8,13,0)
(1,27,0)
(18,33,0)
(22,27,0)
(17,27,0)
(31,34,0)
(7,13,0)
(29,9,0)
(16,7,0)
(7,33,0)
(5,19,0)
(2,28,0)
(10,21,0)
(11,15,0)
(13,27,0)
(19,33,0)
(33,27,0)
(15,11,0)
(35,13,0)
(21,13,0)
(12,35,0)
(24,3,0)
(19,13,1)
(18,4,1)
(31,29,1)
(11,15,1)
(7,16,1)
(11,6,1)
(2,4,1)
(7,13,1)
(3,24,1)
(20,35,1)
(35,12,1)
(5,7,1)
(29,8,1)
(0,13,1)
(30,19,1)
(16,21,1)
(13,11,1)
(9,34,1)
(21,13,1)
(18,2,1)
(24,35,1)
(19,5,1)
(32,18,1)
(23,3,1)
(21,10,1)
(6,9,1)
(35,13,1)
(10,32,1)
(14,20,1)
(12,0,1)
(20,23,1)
(34,31,1)
(4,14,1)
(19,13,2)
(35,13,2)
(23,35,2)
(24,35,2)
(21,13,2)
(11,6,2)
(2,4,2)
(23,3,2)
(3,35,2)
(6,9,2)
(11,15,2)
(9,34,2)
(13,11,2)
(7,13,2)
-----------------------------------
(0,data)
(1,if(5==5)
(2,\\\'\\\\0\\\')
(3,-1)
(4,5==5)
(5,data)
(6,malloc(100*sizeof(wchar_t)
(7,printWLine(data)
(8,data)
(9,100*sizeof(wchar_t)
(10,data)
(11,(wchar_t *)
(12,NULL)
(13,data = (wchar_t *)
(14,5)
(15,wchar_t *)
(16,data)
(17,data)
(18,"")
(19,free(data)
(20,5)
(21,wcscat(dest, data)
(22,if (data == NULL)
(23,exit(-1)
(24,1)
(25,)
(26,\\'\\\\0\\')
(27,)
(28,)
(29,100)
(30,RET)
(31,wchar_t)
(32,dest)
(33,)
(34,sizeof(wchar_t)
(35,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^