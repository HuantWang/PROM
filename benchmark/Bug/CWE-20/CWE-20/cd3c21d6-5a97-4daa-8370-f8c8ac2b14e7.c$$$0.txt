-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalFive==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,89,91,94,95,100,102,103,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
86,87
86,88
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(46,60,0)
(37,43,0)
(41,19,0)
(44,40,0)
(28,45,0)
(59,24,0)
(43,53,0)
(19,42,0)
(8,37,0)
(27,45,0)
(40,18,0)
(12,40,0)
(12,55,0)
(42,40,0)
(29,53,0)
(52,19,0)
(11,39,0)
(56,40,0)
(16,42,0)
(38,25,0)
(60,18,0)
(39,61,0)
(34,53,0)
(17,25,0)
(55,12,0)
(50,14,0)
(58,43,0)
(11,15,0)
(11,40,0)
(13,44,0)
(40,12,0)
(49,47,0)
(7,60,0)
(25,17,0)
(42,53,0)
(57,7,0)
(7,40,0)
(0,15,0)
(47,40,0)
(19,41,0)
(19,52,0)
(17,55,0)
(42,19,0)
(15,11,0)
(47,61,0)
(54,10,0)
(47,14,0)
(36,11,0)
(53,60,0)
(48,15,0)
(43,37,0)
(6,12,0)
(51,18,0)
(55,17,0)
(42,60,0)
(10,60,0)
(12,6,0)
(21,18,0)
(26,33,0)
(20,44,0)
(59,33,0)
(4,37,0)
(1,47,0)
(32,52,0)
(3,18,0)
(52,40,0)
(2,5,0)
(30,14,0)
(22,17,0)
(9,41,0)
(23,39,0)
(5,40,0)
(33,59,0)
(31,42,0)
(5,60,0)
(14,47,0)
(43,10,0)
(11,40,1)
(28,59,1)
(0,48,1)
(29,39,1)
(31,53,1)
(14,30,1)
(12,55,1)
(58,42,1)
(19,41,1)
(43,37,1)
(33,26,1)
(25,38,1)
(15,0,1)
(23,11,1)
(42,40,1)
(12,6,1)
(4,58,1)
(19,52,1)
(10,54,1)
(41,9,1)
(57,10,1)
(50,49,1)
(2,7,1)
(48,36,1)
(20,13,1)
(47,14,1)
(36,47,1)
(27,28,1)
(39,23,1)
(7,40,1)
(34,29,1)
(1,45,1)
(8,4,1)
(44,40,1)
(42,19,1)
(44,20,1)
(43,53,1)
(7,57,1)
(26,44,1)
(13,40,1)
(53,34,1)
(54,43,1)
(17,25,1)
(22,56,1)
(5,2,1)
(28,44,1)
(55,17,1)
(45,27,1)
(37,8,1)
(35,5,1)
(38,22,1)
(11,15,1)
(47,40,1)
(9,52,1)
(59,33,1)
(29,45,1)
(32,16,1)
(30,50,1)
(16,31,1)
(52,40,1)
(40,12,1)
(42,53,1)
(49,1,1)
(52,32,1)
(5,40,1)
(11,40,2)
(47,40,2)
(19,52,2)
(33,44,2)
(59,44,2)
(55,17,2)
(7,40,2)
(43,53,2)
(14,45,2)
(43,37,2)
(47,14,2)
(47,45,2)
(59,33,2)
(11,45,2)
(36,45,2)
(48,45,2)
(49,45,2)
(30,45,2)
(0,45,2)
(42,53,2)
(17,25,2)
(12,6,2)
(40,12,2)
(42,19,2)
(39,45,2)
(5,40,2)
(52,40,2)
(1,45,2)
(44,40,2)
(11,15,2)
(50,45,2)
(26,44,2)
(23,45,2)
(12,55,2)
(15,45,2)
(42,40,2)
(19,41,2)
-----------------------------------
(0,1)
(1,data)
(2,data)
(3,if (data == NULL)
(4,50)
(5,free(data)
(6,char *)
(7,printLine(data)
(8,1)
(9,char)
(10,dest[50-1] = \\\'\\\\0\\\')
(11,data[100-1])
(12,(char *)
(13,data)
(14,100-1)
(15,100-1)
(16,data)
(17,100*sizeof(char)
(18,)
(19,strlen(data)
(20,NULL)
(21,data)
(22,100)
(23,\\\'\\\\0\\\')
(24,)
(25,sizeof(char)
(26,1)
(27,5)
(28,globalFive)
(29,dest)
(30,1)
(31,dest)
(32,data)
(33,-1)
(34,"")
(35,RET)
(36,data)
(37,50-1)
(38,char)
(39,data[100-1] = \\\'\\\\0\\\')
(40,data = (char *)
(41,sizeof(char)
(42,memmove(dest, data, strlen(data)
(43,dest[50-1])
(44,data == NULL)
(45,globalFive==5)
(46,dest)
(47,memset(data, \\\'A\\\', 100-1)
(48,100)
(49,\\\'A\\\')
(50,100)
(51,if(globalFive==5)
(52,strlen(data)
(53,dest[50] = "")
(54,\\\'\\\\0\\\')
(55,malloc(100*sizeof(char)
(56,data)
(57,data)
(58,dest)
(59,exit(-1)
(60,)
(61,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^