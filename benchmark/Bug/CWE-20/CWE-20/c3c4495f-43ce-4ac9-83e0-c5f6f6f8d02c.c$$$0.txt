-----label-----
1
-----code-----
long * CWE415_Double_Free__malloc_free_long_61b_badSource(long * data)
{
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,51
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
long * CWE415_Double_Free__malloc_free_long_61b_badSource(long * data){    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    return data;}
long
* CWE415_Double_Free__malloc_free_long_61b_badSource(long * data)
*
CWE415_Double_Free__malloc_free_long_61b_badSource
long * data
long
* data
*
data
{    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    return data;}
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
return data;
data
data
-----joern-----
(7,14,0)
(20,19,0)
(8,12,0)
(2,22,0)
(20,15,0)
(16,18,0)
(17,11,0)
(9,14,0)
(11,3,0)
(11,18,0)
(12,23,0)
(12,3,0)
(6,3,0)
(1,5,0)
(14,23,0)
(12,18,0)
(18,23,0)
(22,18,0)
(5,1,0)
(10,5,0)
(11,23,0)
(14,18,0)
(1,22,0)
(4,19,0)
(18,22,0)
(18,3,0)
(0,12,0)
(5,21,0)
(21,5,0)
(19,20,0)
(13,21,0)
(22,1,0)
(21,13,0)
(22,2,0)
(5,21,1)
(14,7,1)
(11,18,1)
(21,13,1)
(20,19,1)
(8,11,1)
(11,23,1)
(21,10,1)
(12,8,1)
(9,18,1)
(4,14,1)
(12,18,1)
(18,22,1)
(17,20,1)
(22,2,1)
(1,5,1)
(22,1,1)
(17,14,1)
(14,23,1)
(10,16,1)
(11,17,1)
(12,23,1)
(0,12,1)
(7,9,1)
(18,23,1)
(19,4,1)
(14,18,1)
(5,21,2)
(18,23,2)
(0,12,2)
(1,5,2)
(14,23,2)
(19,14,2)
(14,18,2)
(11,18,2)
(12,23,2)
(20,19,2)
(11,23,2)
(18,22,2)
(20,14,2)
(22,2,2)
(12,18,2)
(4,14,2)
(22,1,2)
(21,13,2)
-----------------------------------
(0,RET)
(1,malloc(100*sizeof(long)
(2,long *)
(3,)
(4,1)
(5,100*sizeof(long)
(6,if (data == NULL)
(7,NULL)
(8,data)
(9,data)
(10,100)
(11,free(data)
(12,return data;)
(13,long)
(14,data == NULL)
(15,)
(16,data)
(17,data)
(18,data = (long *)
(19,-1)
(20,exit(-1)
(21,sizeof(long)
(22,(long *)
(23,long * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^