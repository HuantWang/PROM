-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad()
{
    int * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
72,74
74,75
75,76
75,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,60,63,67,69,71,73,76,77,81,84,85,89,91
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad(){    int * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad
{    int * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(16,20,0)
(17,36,0)
(36,31,0)
(15,2,0)
(40,36,0)
(39,36,0)
(1,35,0)
(2,38,0)
(41,22,0)
(21,24,0)
(18,24,0)
(6,29,0)
(2,8,0)
(37,35,0)
(19,39,0)
(41,24,0)
(10,41,0)
(23,35,0)
(28,11,0)
(27,12,0)
(14,20,0)
(11,27,0)
(41,36,0)
(41,23,0)
(17,9,0)
(21,23,0)
(25,22,0)
(24,35,0)
(21,36,0)
(8,2,0)
(6,24,0)
(17,8,0)
(42,6,0)
(38,2,0)
(16,41,0)
(8,17,0)
(4,16,0)
(41,16,0)
(36,17,0)
(29,6,0)
(29,23,0)
(13,38,0)
(3,39,0)
(7,23,0)
(26,6,0)
(9,17,0)
(34,31,0)
(30,41,0)
(22,23,0)
(0,24,0)
(6,36,0)
(20,16,0)
(27,11,0)
(5,21,0)
(25,32,1)
(17,9,1)
(28,39,1)
(2,38,1)
(0,18,1)
(41,22,1)
(30,10,1)
(25,39,1)
(5,29,1)
(26,41,1)
(4,30,1)
(42,26,1)
(19,36,1)
(39,3,1)
(21,36,1)
(41,36,1)
(21,5,1)
(15,40,1)
(6,42,1)
(29,6,1)
(6,24,1)
(20,14,1)
(16,20,1)
(24,0,1)
(3,19,1)
(8,2,1)
(10,22,1)
(27,11,1)
(13,15,1)
(41,16,1)
(32,24,1)
(39,36,1)
(22,25,1)
(21,24,1)
(36,17,1)
(14,4,1)
(6,36,1)
(11,28,1)
(33,21,1)
(38,13,1)
(17,8,1)
(40,32,1)
(41,24,1)
(25,27,1)
(11,39,2)
(17,8,2)
(17,9,2)
(40,32,2)
(29,6,2)
(2,32,2)
(41,24,2)
(17,32,2)
(19,32,2)
(2,38,2)
(39,36,2)
(41,22,2)
(3,32,2)
(41,16,2)
(15,32,2)
(6,36,2)
(21,24,2)
(28,39,2)
(39,32,2)
(8,2,2)
(6,24,2)
(36,17,2)
(21,36,2)
(38,32,2)
(36,32,2)
(27,39,2)
(13,32,2)
(16,20,2)
(41,36,2)
(27,11,2)
(8,32,2)
-----------------------------------
(0,NULL)
(1,if(globalTrue)
(2,50*sizeof(int)
(3,NULL)
(4,100)
(5,data)
(6,data[0])
(7,source)
(8,malloc(50*sizeof(int)
(9,int *)
(10,data)
(11,-1)
(12,)
(13,int)
(14,int)
(15,50)
(16,100*sizeof(int)
(17,(int *)
(18,data)
(19,data)
(20,sizeof(int)
(21,free(data)
(22,source[100] = {0})
(23,)
(24,data = NULL)
(25,source)
(26,data)
(27,exit(-1)
(28,1)
(29,printIntLine(data[0])
(30,source)
(31,)
(32,globalTrue)
(33,RET)
(34,if (data == NULL)
(35,)
(36,data = (int *)
(37,data)
(38,sizeof(int)
(39,data == NULL)
(40,data)
(41,memmove(data, source, 100*sizeof(int)
(42,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^