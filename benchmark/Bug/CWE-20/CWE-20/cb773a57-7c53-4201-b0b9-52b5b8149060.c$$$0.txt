-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14_bad()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
67,71
68,69
69,70
69,71
70,71
73,74
73,75
74,75
77,78
78,79
80,81
81,82
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,71,72,75,76,79,85,87,90,92,96,99,100,104,106
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
73,74
73,75
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14_bad(){    int * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14_bad
{    int * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(23,32,0)
(31,29,0)
(3,5,0)
(47,44,0)
(8,12,0)
(22,41,0)
(21,41,0)
(45,8,0)
(34,44,0)
(8,45,0)
(19,44,0)
(17,41,0)
(43,42,0)
(50,4,0)
(25,19,0)
(24,12,0)
(41,5,0)
(14,5,0)
(11,6,0)
(1,43,0)
(46,17,0)
(31,13,0)
(31,36,0)
(52,40,0)
(33,31,0)
(40,17,0)
(9,31,0)
(26,41,0)
(6,36,0)
(16,21,0)
(42,39,0)
(48,20,0)
(10,20,0)
(13,41,0)
(19,29,0)
(49,6,0)
(19,23,0)
(35,41,0)
(4,44,0)
(30,38,0)
(28,37,0)
(36,8,0)
(0,29,0)
(23,40,0)
(21,36,0)
(27,36,0)
(21,29,0)
(40,23,0)
(7,4,0)
(40,44,0)
(42,43,0)
(2,40,0)
(12,8,0)
(8,36,0)
(19,36,0)
(18,29,0)
(36,38,0)
(29,5,0)
(13,31,0)
(15,19,0)
(37,44,0)
(9,33,1)
(17,46,1)
(46,20,1)
(43,1,1)
(19,44,1)
(31,36,1)
(27,20,1)
(16,13,1)
(36,8,1)
(1,6,1)
(2,19,1)
(10,48,1)
(37,44,1)
(31,9,1)
(12,24,1)
(19,29,1)
(34,47,1)
(50,44,1)
(44,34,1)
(46,42,1)
(52,2,1)
(40,52,1)
(37,28,1)
(15,25,1)
(0,18,1)
(50,37,1)
(21,16,1)
(24,27,1)
(21,29,1)
(7,50,1)
(6,11,1)
(46,6,1)
(19,36,1)
(4,44,1)
(8,45,1)
(29,0,1)
(23,40,1)
(11,49,1)
(47,17,1)
(33,4,1)
(40,44,1)
(8,12,1)
(6,36,1)
(25,4,1)
(13,31,1)
(48,29,1)
(40,17,1)
(4,7,1)
(31,29,1)
(42,43,1)
(28,23,1)
(20,10,1)
(49,36,1)
(19,15,1)
(21,36,1)
(51,21,1)
(36,20,2)
(8,20,2)
(24,20,2)
(21,29,2)
(19,44,2)
(42,6,2)
(37,44,2)
(52,4,2)
(42,43,2)
(6,20,2)
(15,4,2)
(6,36,2)
(28,4,2)
(19,29,2)
(25,4,2)
(43,6,2)
(21,36,2)
(1,6,2)
(27,20,2)
(31,29,2)
(2,4,2)
(37,4,2)
(19,4,2)
(11,20,2)
(12,20,2)
(4,4,2)
(7,4,2)
(8,12,2)
(40,44,2)
(49,20,2)
(4,44,2)
(23,40,2)
(23,4,2)
(8,45,2)
(50,4,2)
(36,8,2)
(40,4,2)
(40,17,2)
(31,36,2)
(13,31,2)
(19,36,2)
-----------------------------------
(0,NULL)
(1,1)
(2,source)
(3,data)
(4,i < 10)
(5,)
(6,data == NULL)
(7,10)
(8,(int *)
(9,0)
(10,5)
(11,NULL)
(12,malloc(10)
(13,printIntLine(data[0])
(14,if(globalFive==5)
(15,i)
(16,data)
(17,source[10] = {0})
(18,data)
(19,data[i])
(20,globalFive==5)
(21,free(data)
(22,source)
(23,data[i] = source[i])
(24,10)
(25,data)
(26,for (i = 0; i < 10; i++)
(27,data)
(28,i)
(29,data = NULL)
(30,if (data == NULL)
(31,data[0])
(32,)
(33,data)
(34,0)
(35,i)
(36,data = (int *)
(37,i++)
(38,)
(39,)
(40,source[i])
(41,)
(42,exit(-1)
(43,-1)
(44,i = 0)
(45,int *)
(46,source)
(47,i)
(48,globalFive)
(49,data)
(50,i)
(51,RET)
(52,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^