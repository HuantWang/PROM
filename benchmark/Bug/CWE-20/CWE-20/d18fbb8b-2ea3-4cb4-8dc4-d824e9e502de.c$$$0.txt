-----label-----
1
-----code-----
static void badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
static void
badSink(twoIntsStruct * data)
badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(9,34,0)
(26,20,0)
(5,36,0)
(7,24,0)
(18,40,0)
(32,14,0)
(36,4,0)
(8,33,0)
(33,0,0)
(40,24,0)
(41,15,0)
(11,3,0)
(30,36,0)
(13,0,0)
(39,15,0)
(29,28,0)
(27,18,0)
(4,36,0)
(34,12,0)
(20,0,0)
(17,14,0)
(42,13,0)
(1,32,0)
(4,41,0)
(37,28,0)
(41,4,0)
(38,13,0)
(19,11,0)
(2,12,0)
(14,0,0)
(10,0,0)
(11,15,0)
(33,18,0)
(28,15,0)
(18,33,0)
(6,11,0)
(16,7,0)
(23,0,0)
(21,40,0)
(35,33,0)
(32,7,0)
(12,11,0)
(22,14,0)
(11,12,0)
(12,34,0)
(14,32,0)
(15,25,0)
(36,3,0)
(17,13,1)
(11,3,1)
(6,19,1)
(31,41,1)
(16,32,1)
(9,2,1)
(8,35,1)
(14,0,1)
(35,7,1)
(33,0,1)
(36,3,1)
(30,5,1)
(0,10,1)
(36,30,1)
(38,20,1)
(12,34,1)
(13,0,1)
(33,8,1)
(2,6,1)
(1,14,1)
(34,9,1)
(26,40,1)
(40,21,1)
(32,14,1)
(18,27,1)
(41,4,1)
(7,16,1)
(38,0,1)
(20,0,1)
(20,26,1)
(11,12,1)
(4,36,1)
(5,11,1)
(22,17,1)
(27,33,1)
(21,18,1)
(13,42,1)
(10,23,1)
(32,1,1)
(19,13,1)
(18,33,1)
(14,22,1)
(42,38,1)
(11,12,2)
(20,13,2)
(33,0,2)
(16,13,2)
(40,13,2)
(11,3,2)
(13,13,2)
(4,36,2)
(26,13,2)
(1,13,2)
(38,13,2)
(18,13,2)
(35,13,2)
(22,13,2)
(41,4,2)
(33,13,2)
(17,13,2)
(32,14,2)
(12,34,2)
(14,0,2)
(8,13,2)
(20,0,2)
(21,13,2)
(32,13,2)
(42,13,2)
(14,13,2)
(36,3,2)
(13,0,2)
(18,33,2)
(27,13,2)
(7,13,2)
-----------------------------------
(0,i = 0)
(1,intOne)
(2,100)
(3,twoIntsStruct * data)
(4,&data[0])
(5,data)
(6,source)
(7,source[i].intOne = 0)
(8,i)
(9,twoIntsStruct)
(10,0)
(11,memcpy(data, source, 100*sizeof(twoIntsStruct)
(12,100*sizeof(twoIntsStruct)
(13,i < 100)
(14,source[i])
(15,)
(16,0)
(17,source)
(18,source[i].intTwo)
(19,data)
(20,i++)
(21,0)
(22,i)
(23,i)
(24,)
(25,)
(26,i)
(27,intTwo)
(28,)
(29,i)
(30,0)
(31,RET)
(32,source[i].intOne)
(33,source[i])
(34,sizeof(twoIntsStruct)
(35,source)
(36,data[0])
(37,for (i = 0; i < 100; i++)
(38,i)
(39,source)
(40,source[i].intTwo = 0)
(41,printStructLine(&data[0])
(42,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^