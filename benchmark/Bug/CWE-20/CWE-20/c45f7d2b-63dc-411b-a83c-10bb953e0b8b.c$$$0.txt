-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_31_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    {
        int64_t dataCopy = data;
        int64_t data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
19,20
20,21
20,22
21,22
23,24
23,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,9,11,15,16,22,24,27,31,33,36,41,43,47,49,53,55
-----computeFrom-----
13,14
13,15
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_31_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    {        int64_t dataCopy = data;        int64_t data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_31_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_31_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    {        int64_t dataCopy = data;        int64_t data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
{        int64_t dataCopy = data;        int64_t data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t dataCopy = data;
int64_t dataCopy = data;
int64_t
int64_t
dataCopy = data
dataCopy
= data
data
data
int64_t data = dataCopy;
int64_t data = dataCopy;
int64_t
int64_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(21,18,0)
(18,9,0)
(8,1,0)
(15,9,0)
(2,8,0)
(19,8,0)
(12,19,0)
(9,19,0)
(7,2,0)
(18,11,0)
(11,8,0)
(5,11,0)
(19,2,0)
(0,11,0)
(4,2,0)
(17,9,0)
(20,0,0)
(9,18,0)
(10,1,0)
(16,8,0)
(0,18,0)
(13,1,0)
(14,8,0)
(6,19,0)
(3,0,1)
(0,18,1)
(19,2,1)
(21,19,1)
(7,13,1)
(12,6,1)
(4,7,1)
(18,9,1)
(19,12,1)
(9,19,1)
(9,17,1)
(20,18,1)
(6,2,1)
(0,20,1)
(15,21,1)
(17,15,1)
(2,4,1)
(9,19,2)
(19,2,2)
(0,18,2)
(18,9,2)
-----------------------------------
(0,printLongLongLine(result)
(1,)
(2,dataCopy = data)
(3,RET)
(4,data)
(5,result)
(6,data)
(7,dataCopy)
(8,)
(9,data * data)
(10,data)
(11,)
(12,dataCopy)
(13,L)
(14,data)
(15,data)
(16,dataCopy)
(17,data)
(18,result = data * data)
(19,data = dataCopy)
(20,result)
(21,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^