-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
56,57
56,58
59,60
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
71,72
72,73
72,74
73,74
73,75
74,75
76,77
79,80
80,81
80,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,57,58,61,65,67,69,75,77,78,81,82,86,88,92,94
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
56,57
56,58
70,71
70,72
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad(){    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad
{    char * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,30,0)
(5,40,0)
(3,40,0)
(17,13,0)
(36,12,0)
(24,8,0)
(19,31,0)
(8,3,0)
(21,36,0)
(17,29,0)
(10,7,0)
(35,10,0)
(24,18,0)
(26,32,0)
(0,6,0)
(41,3,0)
(37,18,0)
(30,2,0)
(29,17,0)
(27,5,0)
(3,8,0)
(5,12,0)
(6,40,0)
(12,30,0)
(33,1,0)
(3,6,0)
(28,24,0)
(8,1,0)
(40,32,0)
(3,12,0)
(18,6,0)
(7,10,0)
(18,24,0)
(12,32,0)
(39,40,0)
(2,30,0)
(4,10,0)
(31,32,0)
(38,29,0)
(1,8,0)
(34,6,0)
(16,31,0)
(23,12,0)
(9,35,0)
(8,24,0)
(25,3,0)
(39,12,0)
(15,40,0)
(22,39,0)
(20,32,0)
(11,36,0)
(10,35,0)
(30,7,0)
(30,12,0)
(22,3,1)
(14,5,1)
(36,12,1)
(8,24,1)
(8,1,1)
(24,18,1)
(7,10,1)
(39,22,1)
(11,12,1)
(28,18,1)
(6,34,1)
(18,6,1)
(23,31,1)
(36,21,1)
(3,6,1)
(41,6,1)
(16,19,1)
(24,28,1)
(31,16,1)
(30,7,1)
(18,37,1)
(37,25,1)
(0,36,1)
(30,2,1)
(1,33,1)
(34,0,1)
(25,41,1)
(21,11,1)
(5,27,1)
(3,8,1)
(4,23,1)
(12,30,1)
(38,36,1)
(0,17,1)
(3,12,1)
(35,9,1)
(29,38,1)
(33,24,1)
(9,4,1)
(39,12,1)
(17,29,1)
(10,35,1)
(27,39,1)
(5,12,1)
(36,12,2)
(8,24,2)
(39,12,2)
(10,35,2)
(38,36,2)
(7,10,2)
(29,36,2)
(24,18,2)
(17,36,2)
(3,8,2)
(30,7,2)
(8,1,2)
(3,12,2)
(12,30,2)
(5,12,2)
(17,29,2)
(3,6,2)
(30,2,2)
(18,6,2)
-----------------------------------
(0,source)
(1,sizeof(char)
(2,char *)
(3,memcpy(data, source, (strlen(source)
(4,10)
(5,free(data)
(6,source[10+1] = SRC_STRING)
(7,malloc(10*sizeof(char)
(8,(strlen(source)
(9,char)
(10,10*sizeof(char)
(11,data)
(12,data = (char *)
(13,)
(14,RET)
(15,source)
(16,NULL)
(17,exit(-1)
(18,strlen(source)
(19,data)
(20,data)
(21,NULL)
(22,data)
(23,data)
(24,strlen(source)
(25,source)
(26,if (data == NULL)
(27,data)
(28,1)
(29,-1)
(30,(char *)
(31,data = NULL)
(32,)
(33,char)
(34,SRC_STRING)
(35,sizeof(char)
(36,data == NULL)
(37,source)
(38,1)
(39,printLine(data)
(40,)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^