-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char dest[50] = "";
            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
            strcat(dest, data);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
81,82
81,83
81,84
81,85
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,68,71,74,76,77,80,84,86,88,90,94,96,98,102,104,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcat(dest, data);
strcat(dest, data)
strcat
strcat
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(23,46,0)
(36,32,0)
(9,26,0)
(16,48,0)
(51,29,0)
(21,48,0)
(34,42,0)
(20,32,0)
(4,16,0)
(52,38,0)
(31,53,0)
(32,29,0)
(33,38,0)
(17,9,0)
(17,41,0)
(42,33,0)
(19,9,0)
(18,39,0)
(40,42,0)
(13,19,0)
(37,14,0)
(46,33,0)
(35,30,0)
(38,19,0)
(11,20,0)
(42,32,0)
(19,53,0)
(0,33,0)
(24,33,0)
(39,13,0)
(42,20,0)
(15,53,0)
(44,37,0)
(8,24,0)
(50,13,0)
(13,39,0)
(24,32,0)
(5,20,0)
(12,30,0)
(1,47,0)
(47,41,0)
(30,19,0)
(10,48,0)
(46,32,0)
(6,19,0)
(3,16,0)
(7,41,0)
(48,16,0)
(14,37,0)
(48,53,0)
(33,29,0)
(49,27,0)
(38,29,0)
(29,53,0)
(13,27,0)
(41,47,0)
(45,39,0)
(26,9,0)
(9,17,0)
(14,2,0)
(9,19,0)
(22,38,0)
(27,53,0)
(41,17,0)
(48,19,0)
(43,29,0)
(25,33,0)
(30,35,1)
(3,10,1)
(21,30,1)
(23,24,1)
(48,19,1)
(48,16,1)
(33,38,1)
(13,39,1)
(38,52,1)
(19,9,1)
(10,21,1)
(13,19,1)
(52,22,1)
(16,4,1)
(17,41,1)
(34,20,1)
(37,44,1)
(9,26,1)
(24,8,1)
(44,30,1)
(21,14,1)
(42,33,1)
(4,3,1)
(45,18,1)
(25,0,1)
(7,6,1)
(46,23,1)
(50,48,1)
(20,5,1)
(12,19,1)
(5,11,1)
(35,12,1)
(46,33,1)
(1,7,1)
(30,19,1)
(40,34,1)
(22,27,1)
(41,47,1)
(14,37,1)
(42,20,1)
(28,46,1)
(8,42,1)
(42,40,1)
(0,38,1)
(9,17,1)
(18,50,1)
(49,13,1)
(39,45,1)
(47,1,1)
(27,49,1)
(33,25,1)
(11,33,1)
(38,19,1)
(24,33,1)
(48,16,2)
(46,33,2)
(24,33,2)
(17,41,2)
(42,33,2)
(13,19,2)
(37,30,2)
(44,30,2)
(41,47,2)
(14,37,2)
(38,19,2)
(48,19,2)
(33,38,2)
(9,26,2)
(13,39,2)
(19,9,2)
(9,17,2)
(42,20,2)
(14,30,2)
(30,19,2)
-----------------------------------
(0,data)
(1,char)
(2,)
(3,100)
(4,1)
(5,"")
(6,data)
(7,100)
(8,data)
(9,(char *)
(10,\\\'A\\\')
(11,dest)
(12,data)
(13,data[100-1])
(14,exit(-1)
(15,if (data == NULL)
(16,100-1)
(17,malloc(100*sizeof(char)
(18,100)
(19,data = (char *)
(20,dest[50] = "")
(21,data)
(22,dataCopy)
(23,data)
(24,printLine(data)
(25,dataCopy)
(26,char *)
(27,data[100-1] = \\\'\\\\0\\\')
(28,RET)
(29,)
(30,data == NULL)
(31,data)
(32,)
(33,* data = dataCopy)
(34,dest)
(35,NULL)
(36,dest)
(37,-1)
(38,* dataCopy = data)
(39,100-1)
(40,data)
(41,100*sizeof(char)
(42,strcat(dest, data)
(43,data)
(44,1)
(45,1)
(46,free(data)
(47,sizeof(char)
(48,memset(data, \\\'A\\\', 100-1)
(49,\\\'\\\\0\\\')
(50,data)
(51,dataCopy)
(52,data)
(53,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^