-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
15,18
17,18
18,19
18,20
21,22
22,23
24,25
25,26
25,27
25,28
25,29
26,27
28,29
30,31
32,33
32,34
33,34
34,35
34,36
35,36
35,37
36,37
38,39
41,42
42,43
42,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,14,16,19,20,23,27,29,31,37,39,40,43,44,48,50,54,56
-----computeFrom-----
18,19
18,20
32,33
32,34
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (strlen(source) + 1) * sizeof(char));
memmove(data, source, (strlen(source) + 1) * sizeof(char))
memmove
memmove
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,17,0)
(21,5,0)
(6,8,0)
(18,5,0)
(6,12,0)
(21,1,0)
(5,8,0)
(3,6,0)
(7,1,0)
(6,5,0)
(14,21,0)
(6,17,0)
(4,8,0)
(19,8,0)
(8,11,0)
(2,5,0)
(1,21,0)
(1,12,0)
(13,17,0)
(12,1,0)
(10,13,0)
(0,20,0)
(9,4,0)
(13,8,0)
(12,6,0)
(16,6,0)
(20,12,0)
(12,20,0)
(3,16,1)
(9,6,1)
(13,17,1)
(5,18,1)
(18,2,1)
(21,14,1)
(20,0,1)
(16,5,1)
(12,20,1)
(10,4,1)
(6,12,1)
(6,5,1)
(1,21,1)
(14,3,1)
(6,17,1)
(7,21,1)
(21,5,1)
(0,1,1)
(12,1,1)
(1,7,1)
(4,9,1)
(15,13,1)
(4,17,1)
(13,10,1)
(21,5,2)
(6,17,2)
(6,12,2)
(1,21,2)
(4,17,2)
(6,5,2)
(13,17,2)
(12,20,2)
(12,1,2)
-----------------------------------
(0,char)
(1,strlen(source)
(2,source)
(3,source)
(4,printLine(data)
(5,source[10+1] = SRC_STRING)
(6,memmove(data, source, (strlen(source)
(7,1)
(8,)
(9,data)
(10,data)
(11,)
(12,(strlen(source)
(13,free(data)
(14,source)
(15,RET)
(16,data)
(17,char * data)
(18,SRC_STRING)
(19,source)
(20,sizeof(char)
(21,strlen(source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^