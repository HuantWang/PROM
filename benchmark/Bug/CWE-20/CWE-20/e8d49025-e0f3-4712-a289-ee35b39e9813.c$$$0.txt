-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
61,62
61,63
61,64
63,64
65,66
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,51,54,56,60,62,64,66,70,72,74,78,80,84,86
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    badStatic = 1; /* true */    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    badStatic = 1; /* true */    data = badSource(data);    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,9,0)
(5,22,0)
(21,12,0)
(23,2,0)
(14,23,0)
(27,32,0)
(30,22,0)
(23,22,0)
(3,28,0)
(10,28,0)
(24,11,0)
(12,7,0)
(15,5,0)
(18,32,0)
(14,12,0)
(17,22,0)
(22,26,0)
(29,28,0)
(29,16,0)
(8,16,0)
(29,3,0)
(28,26,0)
(32,27,0)
(36,29,0)
(25,26,0)
(8,28,0)
(11,26,0)
(33,0,0)
(2,23,0)
(17,16,0)
(35,7,0)
(31,3,0)
(16,17,0)
(23,14,0)
(1,17,0)
(4,26,0)
(37,16,0)
(0,16,0)
(7,12,0)
(16,26,0)
(6,3,0)
(0,28,0)
(19,5,0)
(12,14,0)
(20,29,0)
(38,8,0)
(22,23,0)
(34,11,0)
(37,11,1)
(38,29,1)
(5,22,1)
(18,5,1)
(29,20,1)
(1,37,1)
(5,19,1)
(19,15,1)
(35,21,1)
(22,23,1)
(17,22,1)
(36,3,1)
(16,17,1)
(24,5,1)
(13,0,1)
(21,30,1)
(14,12,1)
(6,16,1)
(3,31,1)
(8,16,1)
(34,24,1)
(29,16,1)
(11,34,1)
(27,32,1)
(0,33,1)
(24,27,1)
(15,22,1)
(23,14,1)
(8,38,1)
(31,6,1)
(29,3,1)
(17,1,1)
(20,36,1)
(7,35,1)
(32,18,1)
(23,2,1)
(33,8,1)
(0,16,1)
(12,7,1)
(29,3,2)
(23,14,2)
(0,16,2)
(14,12,2)
(27,5,2)
(18,5,2)
(5,22,2)
(32,5,2)
(16,17,2)
(29,16,2)
(22,23,2)
(23,2,2)
(12,7,2)
(8,16,2)
(17,22,2)
(27,32,2)
-----------------------------------
(0,free(data)
(1,data)
(2,char *)
(3,dest[50] = "")
(4,if (data == NULL)
(5,data == NULL)
(6,dest)
(7,sizeof(char)
(8,printLine(data)
(9,)
(10,dest)
(11,badStatic = 1)
(12,100*sizeof(char)
(13,RET)
(14,malloc(100*sizeof(char)
(15,data)
(16,data = badSource(data)
(17,badSource(data)
(18,1)
(19,NULL)
(20,data)
(21,100)
(22,data = (char *)
(23,(char *)
(24,badStatic)
(25,data)
(26,)
(27,exit(-1)
(28,)
(29,strcpy(dest, data)
(30,data)
(31,"")
(32,-1)
(33,data)
(34,1)
(35,char)
(36,dest)
(37,data)
(38,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^