-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42_bad()
{
    char * data;
    data = NULL;
    data = badSource(data);
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
33,34
35,36
36,37
36,38
36,39
36,40
37,38
39,40
42,43
42,44
45,46
46,47
46,48
47,48
47,49
48,49
50,51
50,52
54,55
55,56
55,57
55,58
56,57
58,59
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,30,32,34,38,40,41,43,44,49,51,52,53,57,59,61,65,67,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
42,43
42,44
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42_bad(){    char * data;    data = NULL;    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42_bad
{    char * data;    data = NULL;    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,15,0)
(5,31,0)
(29,15,0)
(18,9,0)
(23,3,0)
(17,2,0)
(1,5,0)
(10,9,0)
(32,4,0)
(9,2,0)
(16,5,0)
(7,10,0)
(11,12,0)
(21,17,0)
(26,32,0)
(17,5,0)
(24,7,0)
(6,31,0)
(8,16,0)
(3,5,0)
(13,4,0)
(27,2,0)
(16,2,0)
(20,12,0)
(5,32,0)
(28,10,0)
(15,12,0)
(30,4,0)
(10,7,0)
(0,7,0)
(3,2,0)
(2,31,0)
(4,31,0)
(32,5,0)
(25,15,0)
(14,3,0)
(15,2,0)
(21,3,1)
(9,18,1)
(0,28,1)
(3,5,1)
(28,15,1)
(12,11,1)
(20,29,1)
(19,16,1)
(11,20,1)
(29,25,1)
(16,5,1)
(32,26,1)
(18,10,1)
(23,14,1)
(5,32,1)
(26,1,1)
(14,9,1)
(3,23,1)
(30,13,1)
(4,30,1)
(17,21,1)
(16,8,1)
(24,0,1)
(10,7,1)
(8,17,1)
(25,5,1)
(17,5,1)
(32,4,1)
(15,12,1)
(1,4,1)
(7,24,1)
(17,5,2)
(3,5,2)
(10,7,2)
(15,12,2)
(32,4,2)
(5,32,2)
(16,5,2)
-----------------------------------
(0,100)
(1,data)
(2,)
(3,strcpy(data, source)
(4,data = NULL)
(5,data = badSource(data)
(6,data)
(7,100-1)
(8,data)
(9,source[100-1] = '\\\\0')
(10,source[100-1])
(11,1)
(12,100-1)
(13,data)
(14,data)
(15,memset(source, 'C', 100-1)
(16,free(data)
(17,printLine(data)
(18,'\\\\0')
(19,RET)
(20,100)
(21,data)
(22,memset(source, \'C\', 100-1)
(23,source)
(24,1)
(25,source)
(26,data)
(27,source)
(28,source)
(29,'C')
(30,NULL)
(31,)
(32,badSource(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^