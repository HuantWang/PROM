-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_31_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Use a small buffer */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    memset(data, 'A', 50-1); /* fill with 'A's */
    data[50-1] = '\0'; /* null terminate */
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            size_t i, destLen;
            char dest[100];
            memset(dest, 'C', 100-1);
            dest[100-1] = '\0'; /* null terminate */
            destLen = strlen(dest);
            /* POTENTIAL FLAW: using length of the dest where data
             * could be smaller than dest causing buffer overread */
            for (i = 0; i < destLen; i++)
            {
                dest[i] = data[i];
            }
            dest[100-1] = '\0';
            printLine(dest);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
69,70
70,71
70,72
72,73
72,74
72,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
87,88
87,89
87,90
87,91
87,92
87,93
87,94
87,95
87,96
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
99,100
99,101
101,102
103,104
104,105
104,106
104,107
104,108
105,106
107,108
110,111
110,112
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
122,123
123,124
123,125
124,125
126,127
126,128
127,128
129,130
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
143,144
145,146
146,147
147,148
147,149
148,149
148,150
149,150
151,152
153,154
153,155
154,155
156,157
158,159
159,160
159,161
160,161
160,162
161,162
163,164
163,165
167,168
168,169
168,170
169,170
171,172
173,174
174,175
174,176
175,176
177,178
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,57,58,63,65,66,67,71,73,74,77,80,82,83,86,91,93,95,98,100,102,106,108,109,111,112,117,119,120,121,125,128,130,135,136,139,141,144,150,152,155,157,162,164,165,166,170,172,176,178
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
56,57
56,58
60,61
60,62
64,65
64,66
110,111
110,112
114,115
114,116
118,119
118,120
123,124
123,125
133,134
133,135
137,138
137,139
147,148
147,149
159,160
159,161
163,164
163,165
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_31_bad(){    char * data;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
void
CWE126_Buffer_Overread__malloc_char_loop_31_bad()
CWE126_Buffer_Overread__malloc_char_loop_31_bad
{    char * data;    data = NULL;    /* FLAW: Use a small buffer */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    memset(data, 'A', 50-1); /* fill with 'A's */    data[50-1] = '\0'; /* null terminate */    {        char * dataCopy = data;        char * data = dataCopy;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{                dest[i] = data[i];            }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(23,54,0)
(20,1,0)
(2,6,0)
(53,63,0)
(73,4,0)
(2,8,0)
(38,1,0)
(30,95,0)
(89,11,0)
(75,3,0)
(20,52,0)
(57,44,0)
(59,11,0)
(81,17,0)
(46,26,0)
(91,85,0)
(64,7,0)
(61,74,0)
(29,43,0)
(93,12,0)
(65,67,0)
(34,41,0)
(11,4,0)
(32,43,0)
(41,16,0)
(85,91,0)
(70,95,0)
(17,53,0)
(76,91,0)
(55,85,0)
(79,1,0)
(9,2,0)
(58,67,0)
(94,4,0)
(26,8,0)
(71,74,0)
(44,4,0)
(53,8,0)
(7,94,0)
(17,28,0)
(6,2,0)
(62,41,0)
(90,4,0)
(1,67,0)
(82,63,0)
(14,6,0)
(44,43,0)
(21,23,0)
(36,60,0)
(84,95,0)
(5,7,0)
(47,67,0)
(60,4,0)
(7,5,0)
(16,24,0)
(91,76,0)
(83,8,0)
(0,53,0)
(23,21,0)
(51,47,0)
(30,42,0)
(49,6,0)
(45,4,0)
(88,42,0)
(76,63,0)
(27,21,0)
(63,76,0)
(63,82,0)
(47,20,0)
(41,67,0)
(50,8,0)
(0,12,0)
(87,67,0)
(43,12,0)
(80,28,0)
(12,8,0)
(22,65,0)
(35,4,0)
(66,53,0)
(19,0,0)
(11,59,0)
(13,5,0)
(25,30,0)
(2,53,0)
(42,4,0)
(68,16,0)
(37,11,0)
(1,43,0)
(24,16,0)
(33,2,0)
(4,12,0)
(3,53,0)
(86,59,0)
(78,3,0)
(92,94,0)
(1,20,0)
(31,5,0)
(56,24,0)
(63,53,0)
(28,8,0)
(95,30,0)
(17,74,0)
(72,47,0)
(40,26,0)
(18,0,0)
(39,12,0)
(43,0,0)
(69,91,0)
(74,17,0)
(77,59,0)
(16,4,0)
(74,71,1)
(56,68,1)
(91,85,1)
(47,72,1)
(55,69,1)
(70,25,1)
(2,6,1)
(94,92,1)
(67,58,1)
(29,0,1)
(14,49,1)
(69,66,1)
(34,67,1)
(68,42,1)
(5,13,1)
(38,47,1)
(40,46,1)
(7,5,1)
(18,19,1)
(80,17,1)
(33,23,1)
(23,21,1)
(62,34,1)
(19,28,1)
(3,53,1)
(17,53,1)
(84,70,1)
(63,82,1)
(30,95,1)
(77,86,1)
(43,0,1)
(85,55,1)
(0,53,1)
(24,56,1)
(13,31,1)
(42,88,1)
(1,67,1)
(71,61,1)
(81,2,1)
(87,16,1)
(57,60,1)
(86,89,1)
(43,32,1)
(0,18,1)
(41,16,1)
(32,29,1)
(16,24,1)
(26,40,1)
(25,11,1)
(44,57,1)
(41,67,1)
(53,63,1)
(61,81,1)
(75,53,1)
(58,87,1)
(51,41,1)
(21,27,1)
(47,67,1)
(11,59,1)
(1,43,1)
(72,51,1)
(66,26,1)
(89,37,1)
(17,74,1)
(3,78,1)
(49,9,1)
(78,75,1)
(36,94,1)
(65,67,1)
(31,64,1)
(92,7,1)
(60,36,1)
(33,3,1)
(95,84,1)
(41,62,1)
(2,53,1)
(59,77,1)
(9,33,1)
(79,38,1)
(22,20,1)
(64,41,1)
(37,43,1)
(1,79,1)
(10,44,1)
(20,1,1)
(65,22,1)
(34,65,1)
(6,14,1)
(88,30,1)
(76,91,1)
(44,43,1)
(63,76,1)
(28,80,1)
(27,3,1)
(47,67,2)
(17,74,2)
(34,41,2)
(63,76,2)
(23,3,2)
(20,1,2)
(51,41,2)
(72,41,2)
(79,41,2)
(0,53,2)
(7,5,2)
(65,67,2)
(23,21,2)
(2,53,2)
(63,82,2)
(3,53,2)
(41,41,2)
(91,85,2)
(17,53,2)
(38,41,2)
(30,95,2)
(22,41,2)
(27,3,2)
(47,41,2)
(1,41,2)
(21,3,2)
(41,16,2)
(16,24,2)
(65,41,2)
(1,67,2)
(62,41,2)
(41,67,2)
(43,0,2)
(1,43,2)
(20,41,2)
(11,59,2)
(76,91,2)
(44,43,2)
(53,63,2)
(2,6,2)
-----------------------------------
(0,* dataCopy = data)
(1,data[i])
(2,memset(data, 'A', 50-1)
(3,data == NULL)
(4,)
(5,100-1)
(6,50-1)
(7,dest[100-1])
(8,)
(9,'A')
(10,RET)
(11,memset(dest, \'C\', 100-1)
(12,)
(13,1)
(14,1)
(15,memset(dest, 'C', 100-1)
(16,destLen = strlen(dest)
(17,data[50-1])
(18,data)
(19,dataCopy)
(20,dest[i] = data[i])
(21,-1)
(22,i)
(23,exit(-1)
(24,strlen(dest)
(25,dest)
(26,data = NULL)
(27,1)
(28,data[50-1] = '\\\\0')
(29,data)
(30,dest[100-1])
(31,100)
(32,dataCopy)
(33,data)
(34,i)
(35,destLen)
(36,dest)
(37,dest)
(38,data)
(39,data)
(40,NULL)
(41,i < destLen)
(42,dest[100-1] = '\\\\0')
(43,* data = dataCopy)
(44,free(data)
(45,for (i = 0; i < destLen; i++)
(46,data)
(47,dest[i])
(48,memset(data, \'A\', 50-1)
(49,50)
(50,data)
(51,dest)
(52,)
(53,data = (char *)
(54,)
(55,char)
(56,dest)
(57,data)
(58,0)
(59,100-1)
(60,printLine(dest)
(61,50)
(62,destLen)
(63,(char *)
(64,dest)
(65,i++)
(66,data)
(67,i = 0)
(68,destLen)
(69,50)
(70,100)
(71,1)
(72,i)
(73,i)
(74,50-1)
(75,data)
(76,malloc(50*sizeof(char)
(77,1)
(78,NULL)
(79,i)
(80,'\\\\0')
(81,data)
(82,char *)
(83,if (data == NULL)
(84,1)
(85,sizeof(char)
(86,100)
(87,i)
(88,'\\\\0')
(89,'C')
(90,dest)
(91,50*sizeof(char)
(92,'\\\\0')
(93,dataCopy)
(94,dest[100-1] = '\\\\0')
(95,100-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^