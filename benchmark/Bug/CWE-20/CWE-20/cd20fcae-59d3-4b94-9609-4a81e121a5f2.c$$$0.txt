-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        wcsncpy(data, source, 100-1);
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
100,101
101,102
101,103
102,103
102,104
103,104
105,106
105,107
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,99,104,106,107,108,112,114,118,120
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
101,102
101,103
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncpy(data, source, 100-1);
wcsncpy(data, source, 100-1)
wcsncpy
wcsncpy
data
data
source
source
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(19,1,0)
(20,21,0)
(16,36,0)
(34,40,0)
(11,22,0)
(17,36,0)
(2,22,0)
(30,18,0)
(12,7,0)
(16,24,0)
(24,33,0)
(2,40,0)
(25,36,0)
(22,11,0)
(22,24,0)
(40,2,0)
(15,1,0)
(26,24,0)
(42,43,0)
(24,22,0)
(21,40,0)
(41,36,0)
(26,36,0)
(8,24,0)
(10,43,0)
(38,16,0)
(31,13,0)
(3,33,0)
(26,23,0)
(0,12,0)
(5,23,0)
(28,23,0)
(22,2,0)
(9,36,0)
(4,26,0)
(16,23,0)
(23,1,0)
(32,17,0)
(17,24,0)
(35,33,0)
(18,24,0)
(40,21,0)
(37,13,0)
(17,23,0)
(36,1,0)
(39,18,0)
(13,26,0)
(26,13,0)
(14,26,0)
(29,0,0)
(12,0,0)
(31,37,1)
(26,13,1)
(25,3,1)
(34,8,1)
(29,18,1)
(18,39,1)
(13,31,1)
(3,12,1)
(4,14,1)
(28,5,1)
(39,30,1)
(20,34,1)
(18,24,1)
(16,23,1)
(32,16,1)
(42,23,1)
(22,2,1)
(22,11,1)
(17,23,1)
(21,20,1)
(30,24,1)
(27,17,1)
(17,24,1)
(43,10,1)
(26,24,1)
(23,28,1)
(16,38,1)
(2,40,1)
(16,24,1)
(17,32,1)
(8,43,1)
(25,43,1)
(24,22,1)
(37,4,1)
(10,42,1)
(14,25,1)
(38,41,1)
(3,18,1)
(0,29,1)
(26,23,1)
(41,26,1)
(40,21,1)
(12,0,1)
(22,43,2)
(40,43,2)
(24,22,2)
(8,43,2)
(30,43,2)
(16,23,2)
(18,43,2)
(18,24,2)
(0,18,2)
(26,23,2)
(2,43,2)
(29,18,2)
(24,43,2)
(17,24,2)
(22,2,2)
(22,11,2)
(20,43,2)
(39,43,2)
(40,21,2)
(3,43,2)
(26,13,2)
(2,40,2)
(16,24,2)
(17,23,2)
(21,43,2)
(26,24,2)
(12,0,2)
(12,18,2)
(34,43,2)
-----------------------------------
(0,-1)
(1,)
(2,malloc(50*sizeof(wchar_t)
(3,'\\\\0')
(4,source)
(5,data)
(6,\'\\\\0\')
(7,)
(8,data)
(9,source)
(10,5)
(11,wchar_t *)
(12,exit(-1)
(13,100-1)
(14,data)
(15,data)
(16,printWLine(data)
(17,free(data)
(18,data == NULL)
(19,if(globalFive==5)
(20,wchar_t)
(21,sizeof(wchar_t)
(22,(wchar_t *)
(23,data = NULL)
(24,data = (wchar_t *)
(25,'\\\\0')
(26,wcsncpy(data, source, 100-1)
(27,RET)
(28,NULL)
(29,1)
(30,data)
(31,1)
(32,data)
(33,)
(34,50)
(35,if (data == NULL)
(36,)
(37,100)
(38,data)
(39,NULL)
(40,50*sizeof(wchar_t)
(41,'\\\\0')
(42,globalFive)
(43,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^