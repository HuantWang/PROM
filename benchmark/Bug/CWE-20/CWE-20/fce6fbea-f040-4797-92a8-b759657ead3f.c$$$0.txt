-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
26,28
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
45,46
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
55,56
56,57
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
-----nextToken-----
2,4,9,10,16,18,23,24,27,29,31,35,38,40,43,44,48,51,52,54,58,64,65,73,74,77,78,79,80,84,87,89,92,93,97,100,102,105,106
-----computeFrom-----
7,8
7,9
20,21
20,22
60,61
60,62
66,67
66,68
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memmove
memmove
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(30,51,0)
(15,20,0)
(2,8,0)
(15,21,0)
(20,39,0)
(33,32,0)
(23,40,0)
(3,27,0)
(3,32,0)
(43,24,0)
(7,28,0)
(48,8,0)
(44,54,0)
(13,21,0)
(5,27,0)
(2,27,0)
(54,10,0)
(50,0,0)
(35,0,0)
(31,48,0)
(54,44,0)
(9,52,0)
(53,2,0)
(42,39,0)
(39,20,0)
(27,3,0)
(36,26,0)
(17,55,0)
(28,47,0)
(12,40,0)
(47,24,0)
(20,34,0)
(21,41,0)
(55,56,0)
(24,47,0)
(55,17,0)
(34,20,0)
(11,26,0)
(6,54,0)
(0,35,0)
(19,6,0)
(32,21,0)
(8,48,0)
(3,51,0)
(47,21,0)
(51,3,0)
(22,51,0)
(10,21,0)
(17,29,0)
(47,28,0)
(45,17,0)
(20,15,0)
(55,13,0)
(18,17,0)
(6,29,0)
(13,55,0)
(56,55,0)
(29,21,0)
(27,2,0)
(1,39,0)
(38,24,0)
(49,6,0)
(16,21,0)
(26,29,0)
(54,6,0)
(14,48,0)
(37,53,0)
(29,0,0)
(2,53,0)
(25,47,0)
(8,2,0)
(10,54,0)
(0,29,0)
(13,55,1)
(0,50,1)
(39,1,1)
(5,2,1)
(30,47,1)
(49,19,1)
(15,20,1)
(3,27,1)
(1,42,1)
(4,40,1)
(2,53,1)
(6,49,1)
(22,30,1)
(33,3,1)
(36,40,1)
(55,56,1)
(27,5,1)
(12,23,1)
(53,37,1)
(19,29,1)
(54,6,1)
(0,35,1)
(6,29,1)
(47,28,1)
(25,24,1)
(54,44,1)
(40,12,1)
(48,14,1)
(47,24,1)
(28,7,1)
(29,0,1)
(7,25,1)
(26,11,1)
(20,39,1)
(18,15,1)
(24,38,1)
(11,36,1)
(32,33,1)
(8,48,1)
(4,13,1)
(17,45,1)
(27,2,1)
(43,10,1)
(51,22,1)
(31,51,1)
(17,29,1)
(45,18,1)
(50,26,1)
(38,43,1)
(14,31,1)
(37,8,1)
(55,17,1)
(3,51,1)
(42,32,1)
(10,54,1)
(2,8,1)
(20,34,1)
(43,40,2)
(10,40,2)
(15,20,2)
(22,40,2)
(17,29,2)
(6,29,2)
(29,40,2)
(55,56,2)
(47,24,2)
(33,40,2)
(20,34,2)
(48,40,2)
(2,40,2)
(0,35,2)
(2,8,2)
(54,6,2)
(25,40,2)
(10,54,2)
(54,44,2)
(47,40,2)
(27,2,2)
(3,40,2)
(27,40,2)
(20,40,2)
(6,40,2)
(38,40,2)
(8,48,2)
(15,40,2)
(42,40,2)
(14,40,2)
(13,55,2)
(29,0,2)
(8,40,2)
(7,40,2)
(3,27,2)
(17,40,2)
(24,40,2)
(20,39,2)
(31,40,2)
(2,53,2)
(55,40,2)
(13,40,2)
(54,40,2)
(32,40,2)
(3,51,2)
(53,40,2)
(30,40,2)
(49,40,2)
(45,40,2)
(5,40,2)
(55,17,2)
(26,40,2)
(47,28,2)
(19,40,2)
(28,40,2)
(11,40,2)
(37,40,2)
(50,40,2)
(36,40,2)
(1,40,2)
(0,40,2)
(18,40,2)
(39,40,2)
(51,40,2)
-----------------------------------
(0,(void *)
(1,charFirst)
(2,sizeof(structCharVoid.charFirst)
(3,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(4,RET)
(5,1)
(6,structCharVoid.voidSecond)
(7,structCharVoid)
(8,sizeof(structCharVoid.charFirst)
(9,if(GLOBAL_CONST_FIVE==5)
(10,printLine((char *)
(11,voidSecond)
(12,5)
(13,printLine((char *)
(14,charFirst)
(15,printLine((char *)
(16,structCharVoid)
(17,structCharVoid.voidSecond)
(18,structCharVoid)
(19,structCharVoid)
(20,(char *)
(21,)
(22,charFirst)
(23,GLOBAL_CONST_FIVE)
(24,structCharVoid.charFirst)
(25,SRC_STR)
(26,structCharVoid.voidSecond)
(27,(sizeof(structCharVoid.charFirst)
(28,sizeof(structCharVoid)
(29,structCharVoid.voidSecond = (void *)
(30,structCharVoid)
(31,structCharVoid)
(32,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(33,'\\\\0')
(34,char *)
(35,void *)
(36,structCharVoid)
(37,char)
(38,charFirst)
(39,structCharVoid.charFirst)
(40,GLOBAL_CONST_FIVE==5)
(41,)
(42,structCharVoid)
(43,structCharVoid)
(44,char *)
(45,voidSecond)
(46,\'\\\\0\')
(47,memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(48,structCharVoid.charFirst)
(49,voidSecond)
(50,SRC_STR)
(51,structCharVoid.charFirst)
(52,)
(53,sizeof(char)
(54,(char *)
(55,(char *)
(56,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^