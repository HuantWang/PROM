-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_31_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    {
        long * dataCopy = data;
        long * data = dataCopy;
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
56,57
57,58
57,59
59,60
59,61
59,62
62,63
63,64
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,58,60,61,64,67,69,70,73,77,79
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_31_bad(){    long * data;    /* Initialize data */    data = NULL;    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        long * dataCopy = data;        long * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_31_bad()
CWE415_Double_Free__malloc_free_long_31_bad
{    long * data;    /* Initialize data */    data = NULL;    data = (long *)malloc(100*sizeof(long));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        long * dataCopy = data;        long * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
{        long * dataCopy = data;        long * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
long * dataCopy = data;
long * dataCopy = data;
long
* dataCopy = data
*
dataCopy
= data
data
data
long * data = dataCopy;
long * data = dataCopy;
long
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
free(data);
free(data)
free
free
data
data
-----joern-----
(23,9,0)
(19,15,0)
(9,25,0)
(17,35,0)
(6,34,0)
(1,7,0)
(25,9,0)
(18,33,0)
(1,34,0)
(33,7,0)
(11,7,0)
(35,16,0)
(0,1,0)
(10,14,0)
(22,34,0)
(23,26,0)
(9,23,0)
(31,9,0)
(15,19,0)
(25,15,0)
(24,34,0)
(26,23,0)
(8,4,0)
(14,34,0)
(12,4,0)
(2,33,0)
(5,4,0)
(27,28,0)
(14,1,0)
(32,1,0)
(12,7,0)
(24,14,0)
(15,7,0)
(7,15,0)
(16,35,0)
(34,4,0)
(28,4,0)
(15,25,0)
(16,20,0)
(21,28,0)
(13,24,0)
(7,4,0)
(3,12,0)
(30,14,0)
(17,33,1)
(9,23,1)
(10,30,1)
(23,26,1)
(21,27,1)
(3,16,1)
(13,14,1)
(23,31,1)
(33,7,1)
(24,14,1)
(16,35,1)
(1,32,1)
(12,3,1)
(29,24,1)
(28,21,1)
(14,10,1)
(35,17,1)
(12,7,1)
(32,0,1)
(1,7,1)
(0,12,1)
(3,33,1)
(33,18,1)
(15,25,1)
(24,13,1)
(14,1,1)
(7,15,1)
(30,1,1)
(15,19,1)
(31,11,1)
(25,9,1)
(2,7,1)
(11,28,1)
(18,2,1)
(24,14,2)
(16,33,2)
(15,25,2)
(7,15,2)
(14,1,2)
(9,23,2)
(23,26,2)
(15,19,2)
(33,7,2)
(17,33,2)
(25,9,2)
(1,7,2)
(12,7,2)
(16,35,2)
(35,33,2)
-----------------------------------
(0,dataCopy)
(1,* dataCopy = data)
(2,data)
(3,data)
(4,)
(5,data)
(6,data)
(7,data = (long *)
(8,if (data == NULL)
(9,100*sizeof(long)
(10,dataCopy)
(11,data)
(12,free(data)
(13,data)
(14,* data = dataCopy)
(15,(long *)
(16,exit(-1)
(17,1)
(18,NULL)
(19,long *)
(20,)
(21,NULL)
(22,dataCopy)
(23,sizeof(long)
(24,free(data)
(25,malloc(100*sizeof(long)
(26,long)
(27,data)
(28,data = NULL)
(29,RET)
(30,data)
(31,100)
(32,data)
(33,data == NULL)
(34,)
(35,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^