-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17_bad()
{
    int i;
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (twoIntsStruct *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        data->intOne = 1;
        data->intTwo = 2;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printStructLine(data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
15,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
52,53
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
75,76
76,77
76,78
77,78
77,79
78,79
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,8,10,14,16,17,21,23,28,29,32,33,36,41,45,47,50,54,58,60,65,67,72,73,74,79,80,81,85,87,91,93
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
56,57
56,58
69,70
69,71
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17_bad(){    int i;    twoIntsStruct * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17_bad
{    int i;    twoIntsStruct * data;    /* Initialize data */    data = NULL;    for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
int i;
int i;
int
i
i
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
data = (twoIntsStruct *)malloc(sizeof(data));
data = (twoIntsStruct *)malloc(sizeof(data))
data
data
(twoIntsStruct *)malloc(sizeof(data))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 1;
data->intOne = 1
data->intOne
data
data
intOne
1
data->intTwo = 2;
data->intTwo = 2
data->intTwo
data
data
intTwo
2
printStructLine(data);
printStructLine(data)
printStructLine
printStructLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(5,27,0)
(1,37,0)
(32,28,0)
(45,43,0)
(16,29,0)
(17,21,0)
(14,4,0)
(34,37,0)
(25,35,0)
(11,4,0)
(6,39,0)
(12,17,0)
(42,34,0)
(17,24,0)
(34,28,0)
(33,27,0)
(38,22,0)
(31,2,0)
(11,28,0)
(6,28,0)
(0,13,0)
(40,0,0)
(28,36,0)
(39,6,0)
(11,21,0)
(44,13,0)
(7,34,0)
(9,35,0)
(41,36,0)
(20,4,0)
(45,2,0)
(30,23,0)
(24,17,0)
(28,6,0)
(17,28,0)
(22,21,0)
(19,11,0)
(21,4,0)
(6,24,0)
(10,21,0)
(37,36,0)
(2,45,0)
(27,28,0)
(15,21,0)
(22,28,0)
(24,6,0)
(35,13,0)
(8,29,0)
(27,23,0)
(29,28,0)
(22,4,0)
(23,36,0)
(26,13,0)
(18,4,0)
(16,28,1)
(11,19,1)
(5,33,1)
(29,8,1)
(27,28,1)
(32,35,1)
(7,45,1)
(31,29,1)
(40,23,1)
(35,13,1)
(42,7,1)
(17,28,1)
(10,15,1)
(17,21,1)
(22,21,1)
(38,35,1)
(3,11,1)
(7,29,1)
(11,21,1)
(25,13,1)
(13,26,1)
(11,28,1)
(8,16,1)
(22,38,1)
(44,21,1)
(30,27,1)
(45,2,1)
(28,6,1)
(33,37,1)
(19,22,1)
(21,10,1)
(25,0,1)
(0,40,1)
(2,31,1)
(26,44,1)
(9,25,1)
(12,32,1)
(22,28,1)
(6,24,1)
(34,28,1)
(37,1,1)
(24,17,1)
(23,30,1)
(0,13,1)
(29,28,1)
(35,9,1)
(1,34,1)
(17,12,1)
(6,39,1)
(34,42,1)
(27,5,1)
(1,35,2)
(34,28,2)
(23,35,2)
(34,35,2)
(7,35,2)
(29,28,2)
(17,21,2)
(11,28,2)
(37,35,2)
(25,35,2)
(8,35,2)
(17,35,2)
(24,17,2)
(5,35,2)
(35,35,2)
(6,24,2)
(29,35,2)
(30,35,2)
(45,2,2)
(24,35,2)
(11,21,2)
(12,35,2)
(22,28,2)
(22,21,2)
(6,35,2)
(9,35,2)
(17,28,2)
(28,35,2)
(0,35,2)
(33,35,2)
(31,29,2)
(16,35,2)
(32,35,2)
(27,28,2)
(40,35,2)
(27,35,2)
(35,13,2)
(45,29,2)
(42,35,2)
(2,29,2)
(28,6,2)
(6,39,2)
(0,13,2)
-----------------------------------
(0,i++)
(1,1)
(2,-1)
(3,RET)
(4,)
(5,intTwo)
(6,(twoIntsStruct *)
(7,data)
(8,NULL)
(9,1)
(10,NULL)
(11,free(data)
(12,data)
(13,i = 0)
(14,i)
(15,data)
(16,data)
(17,sizeof(data)
(18,for(i = 0; i < 1; i++)
(19,data)
(20,data)
(21,data = NULL)
(22,printStructLine(data)
(23,data->intTwo = 2)
(24,malloc(sizeof(data)
(25,i)
(26,0)
(27,data->intTwo)
(28,data = (twoIntsStruct *)
(29,data == NULL)
(30,2)
(31,1)
(32,data)
(33,data)
(34,data->intOne)
(35,i < 1)
(36,)
(37,data->intOne = 1)
(38,data)
(39,twoIntsStruct *)
(40,i)
(41,if (data == NULL)
(42,intOne)
(43,)
(44,i)
(45,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^