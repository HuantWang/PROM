-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
61,73
61,74
61,75
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
186,191
187,188
189,190
191,192
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
216,217
219,220
220,221
220,222
221,222
223,224
223,225
223,226
223,227
224,225
226,227
228,229
232,233
232,234
233,234
233,235
234,235
236,237
238,239
239,240
240,241
240,242
241,242
243,244
245,246
245,247
246,247
246,248
247,248
249,250
251,252
252,253
253,254
253,255
254,255
256,257
260,261
261,262
261,263
262,263
266,267
266,268
268,269
268,270
268,271
268,272
268,273
268,274
269,270
271,272
271,273
272,273
273,274
273,275
275,276
275,277
278,279
278,280
278,281
279,280
279,281
280,281
282,283
282,284
283,284
285,286
287,288
287,289
287,290
287,291
287,292
288,289
289,290
289,291
290,291
292,293
292,294
293,294
293,295
295,296
297,298
297,299
298,299
300,301
300,302
301,302
303,304
304,305
304,306
307,308
307,309
308,309
308,310
309,310
311,312
313,314
314,315
315,316
315,317
316,317
318,319
320,321
321,322
321,323
321,324
322,323
324,325
326,327
328,329
329,330
329,331
330,331
332,333
334,335
335,336
335,337
336,337
338,339
340,341
341,342
342,343
342,344
343,344
348,349
349,350
349,351
350,351
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,31,33,37,39,42,46,48,51,54,56,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,112,117,118,121,123,128,130,134,136,139,143,145,147,152,154,156,158,160,164,167,169,171,173,177,179,181,185,188,190,192,195,196,197,202,204,207,208,210,215,217,218,222,225,227,229,230,231,235,237,242,244,248,250,255,257,258,259,263,264,265,267,270,274,276,277,281,284,286,291,294,296,299,302,305,306,310,312,317,319,323,325,327,331,333,337,339,344,345,346,347,351,352,353
-----computeFrom-----
13,14
13,15
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
114,115
114,116
125,126
125,127
149,150
149,151
162,163
162,164
175,176
175,177
183,184
183,185
193,194
193,195
199,200
199,201
200,201
200,202
205,206
205,207
212,213
212,214
220,221
220,222
233,234
233,235
246,247
246,248
279,280
279,281
289,290
289,291
300,301
300,302
308,309
308,310
-----guardedBy-----
235,244
248,257
286,327
281,302
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_15_bad
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(151,196,0)
(5,196,0)
(196,194,0)
(71,101,0)
(53,152,0)
(194,126,0)
(97,206,0)
(167,119,0)
(191,7,0)
(87,36,0)
(68,200,0)
(161,36,0)
(180,0,0)
(192,17,0)
(25,68,0)
(132,44,0)
(62,51,0)
(111,105,0)
(129,158,0)
(104,0,0)
(81,209,0)
(159,209,0)
(196,134,0)
(195,0,0)
(39,141,0)
(148,18,0)
(47,36,0)
(177,1,0)
(76,143,0)
(207,7,0)
(106,36,0)
(182,36,0)
(185,60,0)
(100,155,0)
(140,137,0)
(109,162,0)
(7,209,0)
(93,14,0)
(138,141,0)
(126,194,0)
(56,23,0)
(30,0,0)
(75,21,0)
(36,0,0)
(126,44,0)
(99,51,0)
(28,79,0)
(80,36,0)
(198,18,0)
(89,154,0)
(130,204,0)
(27,50,0)
(10,126,0)
(70,135,0)
(154,68,0)
(143,76,0)
(115,194,0)
(91,152,0)
(50,112,0)
(118,92,0)
(21,51,0)
(150,152,0)
(142,48,0)
(174,136,0)
(123,126,0)
(6,204,0)
(75,41,0)
(2,36,0)
(7,23,0)
(163,60,0)
(86,135,0)
(18,76,0)
(146,188,0)
(145,152,0)
(71,209,0)
(175,48,0)
(121,76,0)
(75,91,0)
(105,209,0)
(75,65,0)
(189,76,0)
(3,189,0)
(197,186,0)
(187,155,0)
(37,134,0)
(138,152,0)
(209,152,0)
(205,159,0)
(65,75,0)
(40,101,0)
(133,36,0)
(179,152,0)
(154,209,0)
(171,154,0)
(32,127,0)
(203,173,0)
(201,32,0)
(18,188,0)
(19,71,0)
(202,188,0)
(204,203,0)
(67,154,0)
(143,42,0)
(139,152,0)
(79,194,0)
(42,143,0)
(76,188,0)
(189,188,0)
(4,71,0)
(95,44,0)
(49,66,0)
(113,49,0)
(61,138,0)
(44,152,0)
(49,145,0)
(103,168,0)
(77,92,0)
(158,126,0)
(74,13,0)
(200,68,0)
(37,194,0)
(52,61,0)
(82,142,0)
(178,36,0)
(26,145,0)
(162,91,0)
(186,197,0)
(72,159,0)
(132,119,0)
(107,37,0)
(193,167,0)
(32,21,0)
(45,209,0)
(112,152,0)
(122,44,0)
(55,0,0)
(199,25,0)
(183,65,0)
(114,13,0)
(24,48,0)
(208,36,0)
(105,23,0)
(31,79,0)
(35,132,0)
(181,36,0)
(63,89,0)
(154,89,0)
(90,197,0)
(94,45,0)
(54,138,0)
(29,21,0)
(60,44,0)
(176,152,0)
(83,159,0)
(194,152,0)
(44,60,0)
(153,152,0)
(12,162,0)
(96,57,0)
(170,95,0)
(46,51,0)
(43,152,0)
(13,48,0)
(157,119,0)
(102,48,0)
(38,45,0)
(23,36,0)
(11,167,0)
(127,32,0)
(9,75,0)
(126,158,0)
(169,184,0)
(32,91,0)
(69,67,0)
(131,127,0)
(124,140,0)
(167,44,0)
(85,23,0)
(41,143,0)
(119,36,0)
(79,139,0)
(154,67,0)
(34,176,0)
(68,25,0)
(173,203,0)
(33,22,0)
(147,158,0)
(58,162,0)
(164,55,0)
(22,203,0)
(92,152,0)
(101,71,0)
(98,48,0)
(203,22,0)
(209,159,0)
(128,66,0)
(112,50,0)
(68,154,0)
(20,173,0)
(108,146,0)
(156,60,0)
(105,64,0)
(110,176,0)
(88,91,0)
(155,112,0)
(146,76,0)
(73,119,0)
(134,196,0)
(172,66,0)
(190,184,0)
(8,77,0)
(144,77,0)
(41,75,0)
(141,138,0)
(184,76,0)
(66,49,0)
(60,209,0)
(91,162,0)
(203,204,0)
(78,95,0)
(165,37,0)
(143,41,0)
(117,126,0)
(120,139,0)
(135,36,0)
(160,152,0)
(134,37,0)
(186,59,0)
(138,61,0)
(125,21,0)
(132,166,0)
(155,187,1)
(83,205,1)
(18,148,1)
(146,76,1)
(184,76,1)
(7,209,1)
(6,130,1)
(34,110,1)
(108,189,1)
(204,6,1)
(126,123,1)
(196,5,1)
(67,69,1)
(120,79,1)
(189,76,1)
(52,45,1)
(35,167,1)
(139,120,1)
(101,40,1)
(124,32,1)
(19,4,1)
(134,196,1)
(167,44,1)
(76,143,1)
(127,131,1)
(89,63,1)
(69,68,1)
(205,72,1)
(103,95,1)
(132,119,1)
(116,104,1)
(185,163,1)
(110,173,1)
(132,44,1)
(78,44,1)
(192,101,1)
(95,170,1)
(73,157,1)
(37,165,1)
(186,197,1)
(49,113,1)
(184,169,1)
(68,200,1)
(187,100,1)
(112,50,1)
(203,204,1)
(72,81,1)
(126,158,1)
(22,33,1)
(149,24,1)
(118,77,1)
(45,209,1)
(157,23,1)
(134,37,1)
(119,73,1)
(132,35,1)
(163,156,1)
(156,122,1)
(32,127,1)
(177,45,1)
(158,147,1)
(147,129,1)
(101,71,1)
(38,94,1)
(88,139,1)
(44,60,1)
(8,144,1)
(176,34,1)
(116,180,1)
(24,142,1)
(75,21,1)
(45,38,1)
(77,8,1)
(149,102,1)
(18,76,1)
(148,198,1)
(107,196,1)
(55,164,1)
(84,21,1)
(41,75,1)
(33,204,1)
(5,151,1)
(198,184,1)
(104,16,1)
(207,15,1)
(50,27,1)
(37,194,1)
(173,20,1)
(146,108,1)
(207,177,1)
(12,109,1)
(169,190,1)
(90,184,1)
(130,119,1)
(193,7,1)
(207,103,1)
(145,26,1)
(95,44,1)
(100,145,1)
(151,194,1)
(7,191,1)
(183,9,1)
(105,209,1)
(96,173,1)
(138,141,1)
(94,209,1)
(171,112,1)
(56,135,1)
(140,124,1)
(207,174,1)
(209,159,1)
(198,186,1)
(28,134,1)
(21,29,1)
(130,15,1)
(54,61,1)
(170,78,1)
(162,12,1)
(75,65,1)
(49,66,1)
(102,140,1)
(173,203,1)
(32,21,1)
(154,209,1)
(60,209,1)
(197,90,1)
(164,84,1)
(40,71,1)
(10,115,1)
(71,19,1)
(193,105,1)
(68,25,1)
(75,91,1)
(122,101,1)
(71,209,1)
(26,49,1)
(9,121,1)
(165,107,1)
(102,146,1)
(16,167,1)
(194,126,1)
(143,42,1)
(141,39,1)
(65,183,1)
(113,66,1)
(11,193,1)
(105,111,1)
(39,54,1)
(154,67,1)
(86,84,1)
(27,155,1)
(131,201,1)
(207,97,1)
(123,158,1)
(79,194,1)
(81,176,1)
(172,92,1)
(207,96,1)
(61,52,1)
(167,119,1)
(142,82,1)
(60,185,1)
(4,89,1)
(70,86,1)
(199,171,1)
(66,128,1)
(115,95,1)
(109,58,1)
(111,7,1)
(190,76,1)
(154,68,1)
(126,44,1)
(16,132,1)
(7,23,1)
(63,154,1)
(201,116,1)
(20,203,1)
(138,61,1)
(189,3,1)
(128,172,1)
(203,22,1)
(129,117,1)
(89,154,1)
(104,93,1)
(135,70,1)
(143,41,1)
(121,32,1)
(207,192,1)
(97,134,1)
(32,91,1)
(196,194,1)
(85,56,1)
(3,18,1)
(29,125,1)
(82,116,1)
(191,207,1)
(15,91,1)
(25,199,1)
(117,10,1)
(167,11,1)
(159,83,1)
(144,138,1)
(79,31,1)
(92,118,1)
(91,162,1)
(105,23,1)
(23,85,1)
(174,89,1)
(180,55,1)
(58,88,1)
(31,28,1)
(93,16,1)
(68,200,2)
(148,32,2)
(129,95,2)
(75,21,2)
(145,45,2)
(76,32,2)
(19,89,2)
(105,7,2)
(39,45,2)
(119,84,2)
(186,184,2)
(69,45,2)
(163,101,2)
(82,116,2)
(113,45,2)
(91,162,2)
(124,32,2)
(117,95,2)
(134,37,2)
(100,45,2)
(7,84,2)
(107,196,2)
(154,67,2)
(122,101,2)
(103,95,2)
(68,45,2)
(147,95,2)
(128,45,2)
(180,84,2)
(32,21,2)
(203,204,2)
(78,101,2)
(85,84,2)
(10,95,2)
(126,95,2)
(91,134,2)
(189,32,2)
(191,84,2)
(65,32,2)
(38,173,2)
(71,89,2)
(25,45,2)
(88,134,2)
(184,32,2)
(143,32,2)
(126,158,2)
(68,25,2)
(101,89,2)
(173,15,2)
(132,167,2)
(92,45,2)
(49,45,2)
(3,32,2)
(205,173,2)
(141,45,2)
(203,22,2)
(193,84,2)
(27,45,2)
(127,116,2)
(6,15,2)
(83,173,2)
(126,44,2)
(44,60,2)
(138,61,2)
(11,84,2)
(52,45,2)
(199,45,2)
(154,209,2)
(4,89,2)
(158,95,2)
(207,84,2)
(28,134,2)
(101,71,2)
(132,44,2)
(79,134,2)
(23,84,2)
(155,45,2)
(186,197,2)
(61,45,2)
(37,196,2)
(112,50,2)
(6,84,2)
(123,95,2)
(167,44,2)
(35,167,2)
(16,84,2)
(63,45,2)
(20,15,2)
(41,75,2)
(177,45,2)
(194,95,2)
(143,42,2)
(81,173,2)
(5,95,2)
(90,184,2)
(196,194,2)
(75,65,2)
(22,15,2)
(138,141,2)
(134,196,2)
(194,126,2)
(185,101,2)
(157,84,2)
(154,68,2)
(79,194,2)
(56,84,2)
(34,173,2)
(32,116,2)
(203,15,2)
(7,23,2)
(41,32,2)
(75,91,2)
(135,84,2)
(111,7,2)
(130,15,2)
(33,84,2)
(209,159,2)
(55,84,2)
(130,84,2)
(183,32,2)
(109,134,2)
(146,32,2)
(132,119,2)
(203,84,2)
(94,173,2)
(115,95,2)
(105,209,2)
(95,101,2)
(20,84,2)
(121,32,2)
(31,134,2)
(171,45,2)
(37,194,2)
(184,76,2)
(204,84,2)
(45,173,2)
(18,32,2)
(89,154,2)
(204,15,2)
(167,119,2)
(73,84,2)
(156,101,2)
(93,16,2)
(144,45,2)
(8,45,2)
(102,116,2)
(112,45,2)
(118,45,2)
(86,84,2)
(173,84,2)
(146,76,2)
(174,89,2)
(33,15,2)
(26,45,2)
(89,45,2)
(76,143,2)
(44,101,2)
(151,95,2)
(45,209,2)
(60,101,2)
(198,32,2)
(159,173,2)
(32,127,2)
(165,196,2)
(164,84,2)
(201,116,2)
(50,45,2)
(187,45,2)
(162,134,2)
(77,45,2)
(24,116,2)
(172,45,2)
(67,45,2)
(7,209,2)
(197,184,2)
(15,134,2)
(58,134,2)
(196,95,2)
(167,84,2)
(139,134,2)
(176,173,2)
(110,173,2)
(75,32,2)
(138,45,2)
(192,101,2)
(190,32,2)
(18,76,2)
(97,134,2)
(22,84,2)
(72,173,2)
(12,134,2)
(173,203,2)
(104,84,2)
(154,45,2)
(169,32,2)
(209,173,2)
(9,32,2)
(71,209,2)
(49,66,2)
(66,45,2)
(96,173,2)
(108,32,2)
(170,101,2)
(189,76,2)
(70,84,2)
(40,89,2)
(143,41,2)
(95,44,2)
(134,95,2)
(140,32,2)
(105,23,2)
(54,45,2)
(120,134,2)
(142,116,2)
(131,116,2)
(32,91,2)
(60,209,2)
-----------------------------------
(0,)
(1,)
(2,listenSocket)
(3,myString)
(4,listenSocket)
(5,SOCKET_ERROR)
(6,2)
(7,listenSocket != INVALID_SOCKET)
(8,sin_family)
(9,data)
(10,acceptSocket)
(11,INVALID_SOCKET)
(12,0)
(13,)
(14,)
(15,0)
(16,wsaDataInit)
(17,)
(18,strcpy(myString, HELLO_STRING)
(19,LISTEN_BACKLOG)
(20,NO_ERROR)
(21,data = 0)
(22,&wsaData)
(23,listenSocket = INVALID_SOCKET)
(24,break;)
(25,&service)
(26,INADDR_ANY)
(27,TCP_PORT)
(28,inputBuffer)
(29,0)
(30,case 6:)
(31,recvResult)
(32,data > strlen(HELLO_STRING)
(33,wsaData)
(34,1)
(35,acceptSocket)
(36,)
(37,recvResult == 0)
(38,INVALID_SOCKET)
(39,service)
(40,SOCKET_ERROR)
(41,malloc(data*sizeof(char)
(42,char *)
(43,if (bind(listenSocket, (struct sockaddr*)
(44,acceptSocket = accept(listenSocket, NULL, NULL)
(45,listenSocket == INVALID_SOCKET)
(46,data)
(47,inputBuffer)
(48,)
(49,service.sin_addr.s_addr)
(50,htons(TCP_PORT)
(51,)
(52,service)
(53,if (WSAStartup(MAKEWORD(2,2)
(54,0)
(55,printLine("Benign, fixed string")
(56,listenSocket)
(57,)
(58,inputBuffer)
(59,)
(60,accept(listenSocket, NULL, NULL)
(61,&service)
(62,switch(6)
(63,SOCKET_ERROR)
(64,)
(65,sizeof(char)
(66,service.sin_addr)
(67,sizeof(service)
(68,(struct sockaddr*)
(69,service)
(70,0)
(71,listen(listenSocket, LISTEN_BACKLOG)
(72,AF_INET)
(73,INVALID_SOCKET)
(74,if (data > strlen(HELLO_STRING)
(75,data*sizeof(char)
(76,myString = (char *)
(77,service.sin_family)
(78,acceptSocket)
(79,inputBuffer[recvResult])
(80,if (listenSocket != INVALID_SOCKET)
(81,listenSocket)
(82,"Benign, fixed string")
(83,IPPROTO_TCP)
(84,6)
(85,INVALID_SOCKET)
(86,wsaDataInit)
(87,if (wsaDataInit)
(88,data)
(89,bind(listenSocket, (struct sockaddr*)
(90,1)
(91,data = strtoul(inputBuffer, NULL, 0)
(92,service.sin_family = AF_INET)
(93,WSACleanup()
(94,listenSocket)
(95,acceptSocket == SOCKET_ERROR)
(96,break;)
(97,break;)
(98,case 7:)
(99,switch(7)
(100,service)
(101,listen(listenSocket, LISTEN_BACKLOG)
(102,break;)
(103,break;)
(104,break;)
(105,CLOSE_SOCKET(listenSocket)
(106,do)
(107,recvResult)
(108,myString)
(109,NULL)
(110,wsaDataInit)
(111,listenSocket)
(112,service.sin_port = htons(TCP_PORT)
(113,s_addr)
(114,myString)
(115,recvResult)
(116,7)
(117,inputBuffer)
(118,AF_INET)
(119,acceptSocket = INVALID_SOCKET)
(120,\\\'\\\\0\\\')
(121,myString)
(122,acceptSocket)
(123,0)
(124,"Input is less than the length of the source string")
(125,data)
(126,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(127,strlen(HELLO_STRING)
(128,sin_addr)
(129,CHAR_ARRAY_SIZE)
(130,2)
(131,HELLO_STRING)
(132,CLOSE_SOCKET(acceptSocket)
(133,wsaData)
(134,recvResult == SOCKET_ERROR || recvResult == 0)
(135,wsaDataInit = 0)
(136,)
(137,)
(138,memset(&service, 0, sizeof(service)
(139,inputBuffer[recvResult] = \\\'\\\\0\\\')
(140,printLine("Input is less than the length of the source string")
(141,sizeof(service)
(142,printLine("Benign, fixed string")
(143,(char *)
(144,service)
(145,service.sin_addr.s_addr = INADDR_ANY)
(146,free(myString)
(147,1)
(148,HELLO_STRING)
(149,RET)
(150,if (recvResult == SOCKET_ERROR || recvResult == 0)
(151,recvResult)
(152,)
(153,if (listenSocket == INVALID_SOCKET)
(154,bind(listenSocket, (struct sockaddr*)
(155,service.sin_port)
(156,listenSocket)
(157,acceptSocket)
(158,CHAR_ARRAY_SIZE - 1)
(159,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(160,if (acceptSocket == SOCKET_ERROR)
(161,if (acceptSocket != INVALID_SOCKET)
(162,strtoul(inputBuffer, NULL, 0)
(163,NULL)
(164,"Benign, fixed string")
(165,0)
(166,)
(167,acceptSocket != INVALID_SOCKET)
(168,)
(169,NULL)
(170,SOCKET_ERROR)
(171,listenSocket)
(172,service)
(173,WSAStartup(MAKEWORD(2,2)
(174,break;)
(175,default:)
(176,wsaDataInit = 1)
(177,break;)
(178,service)
(179,if (listen(listenSocket, LISTEN_BACKLOG)
(180,break;)
(181,recvResult)
(182,acceptSocket)
(183,char)
(184,myString == NULL)
(185,NULL)
(186,exit(-1)
(187,sin_port)
(188,)
(189,printLine(myString)
(190,myString)
(191,INVALID_SOCKET)
(192,break;)
(193,acceptSocket)
(194,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(195,default:)
(196,recvResult == SOCKET_ERROR)
(197,-1)
(198,myString)
(199,service)
(200,struct sockaddr*)
(201,data)
(202,if (myString == NULL)
(203,WSAStartup(MAKEWORD(2,2)
(204,MAKEWORD(2,2)
(205,SOCK_STREAM)
(206,)
(207,listenSocket)
(208,wsaDataInit)
(209,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^