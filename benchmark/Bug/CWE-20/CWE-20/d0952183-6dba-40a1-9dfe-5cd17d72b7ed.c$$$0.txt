-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
68,70
70,71
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,39,41,46,48,52,54,56,59,63,65,67,69,72,73,77,80,81,85,87
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(34,17,0)
(6,26,0)
(11,17,0)
(12,15,0)
(4,29,0)
(3,18,0)
(17,41,0)
(18,15,0)
(27,16,0)
(36,1,0)
(38,22,0)
(3,17,0)
(19,18,0)
(7,22,0)
(3,25,0)
(0,3,0)
(29,4,0)
(10,29,0)
(9,26,0)
(32,3,0)
(23,13,0)
(8,16,0)
(17,4,0)
(18,3,0)
(30,34,0)
(15,18,0)
(16,17,0)
(14,5,0)
(21,26,0)
(37,1,0)
(34,25,0)
(24,4,0)
(16,9,0)
(40,25,0)
(28,5,0)
(25,22,0)
(39,41,0)
(1,17,0)
(14,20,0)
(26,22,0)
(34,26,0)
(16,25,0)
(31,25,0)
(9,16,0)
(3,26,0)
(2,13,0)
(4,24,0)
(5,14,0)
(3,21,0)
(35,21,0)
(4,17,0)
(0,32,1)
(34,17,1)
(3,18,1)
(25,40,1)
(36,17,1)
(2,25,1)
(4,24,1)
(28,1,1)
(3,21,1)
(9,16,1)
(1,37,1)
(21,35,1)
(1,17,1)
(18,15,1)
(34,30,1)
(5,28,1)
(16,25,1)
(12,19,1)
(16,8,1)
(30,9,1)
(35,1,1)
(4,29,1)
(11,13,1)
(19,0,1)
(33,34,1)
(37,36,1)
(35,13,1)
(8,27,1)
(32,21,1)
(17,4,1)
(29,10,1)
(34,25,1)
(27,3,1)
(14,5,1)
(10,11,1)
(3,25,1)
(16,17,1)
(23,2,1)
(3,17,1)
(13,23,1)
(40,31,1)
(15,12,1)
(35,14,1)
(9,16,2)
(17,4,2)
(17,13,2)
(37,13,2)
(29,13,2)
(3,17,2)
(5,1,2)
(14,1,2)
(36,13,2)
(3,21,2)
(34,17,2)
(16,17,2)
(1,17,2)
(4,29,2)
(10,13,2)
(11,13,2)
(34,25,2)
(4,13,2)
(28,1,2)
(3,18,2)
(14,5,2)
(3,25,2)
(16,25,2)
(18,15,2)
(4,24,2)
(1,13,2)
-----------------------------------
(0,source)
(1,data == NULL)
(2,5)
(3,memmove(data, source, 10*sizeof(int)
(4,(int *)
(5,-1)
(6,source)
(7,if(5==5)
(8,0)
(9,printIntLine(data[0])
(10,10)
(11,data)
(12,int)
(13,5==5)
(14,exit(-1)
(15,sizeof(int)
(16,data[0])
(17,data = (int *)
(18,10*sizeof(int)
(19,10)
(20,)
(21,source[10] = {0})
(22,)
(23,5)
(24,int *)
(25,data = NULL)
(26,)
(27,data)
(28,1)
(29,malloc(10)
(30,data)
(31,data)
(32,data)
(33,RET)
(34,free(data)
(35,source)
(36,data)
(37,NULL)
(38,data)
(39,if (data == NULL)
(40,NULL)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^