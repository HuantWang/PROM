-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
20,21
20,22
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(13,7,0)
(18,8,0)
(22,24,0)
(7,8,0)
(17,18,0)
(8,18,0)
(16,8,0)
(0,25,0)
(8,21,0)
(12,1,0)
(6,23,0)
(25,1,0)
(24,23,0)
(5,6,0)
(14,1,0)
(2,23,0)
(7,25,0)
(18,11,0)
(24,6,0)
(4,7,0)
(19,25,0)
(15,1,0)
(7,6,0)
(11,18,0)
(18,17,0)
(6,7,0)
(23,9,0)
(8,18,1)
(5,3,1)
(7,8,1)
(3,20,1)
(13,4,1)
(0,19,1)
(22,6,1)
(17,16,1)
(6,7,1)
(10,3,1)
(18,17,1)
(7,13,1)
(10,24,1)
(24,22,1)
(25,0,1)
(7,25,1)
(16,20,1)
(4,5,1)
(24,6,1)
(18,11,1)
(20,25,1)
(3,8,1)
(7,25,2)
(13,3,2)
(16,20,2)
(7,3,2)
(8,18,2)
(18,20,2)
(24,3,2)
(7,8,2)
(5,3,2)
(8,20,2)
(24,6,2)
(4,3,2)
(17,20,2)
(22,3,2)
(6,7,2)
(18,11,2)
(18,17,2)
(6,3,2)
-----------------------------------
(0,0)
(1,)
(2,result)
(3,1)
(4,data)
(5,result)
(6,result = data * data)
(7,data * data)
(8,data = (unsigned int)
(9,)
(10,RET)
(11,unsigned int)
(12,data)
(13,data)
(14,if(1)
(15,if(1)
(16,data)
(17,RAND32()
(18,(unsigned int)
(19,data)
(20,1)
(21,)
(22,result)
(23,)
(24,printUnsignedLine(result)
(25,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^