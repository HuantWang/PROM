-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32spawnl_17_bad()
{
    int i;
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    /* wspawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
62,63
62,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
80,81
81,82
83,84
84,85
84,86
85,86
87,88
87,89
89,90
90,91
90,92
91,92
93,94
95,96
95,97
96,97
96,98
96,99
96,100
96,101
96,102
96,103
96,104
96,105
96,106
96,107
96,108
96,109
96,110
96,111
96,112
96,113
97,98
98,99
98,100
99,100
101,102
101,103
101,104
101,105
102,103
104,105
106,107
108,109
110,111
110,112
111,112
111,113
112,113
114,115
116,117
118,119
119,120
119,121
119,122
119,123
120,121
122,123
123,124
126,127
127,128
128,129
130,131
131,132
131,133
132,133
132,134
133,134
136,137
138,139
139,140
139,141
140,141
140,142
141,142
141,143
142,143
146,147
148,149
149,150
149,151
150,151
150,152
151,152
154,155
154,156
155,156
157,158
159,160
159,161
160,161
160,162
161,162
161,163
161,164
161,165
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
173,174
175,176
176,177
177,178
179,180
181,182
183,184
183,185
184,185
184,186
185,186
185,187
185,188
186,187
188,189
190,191
192,193
194,195
196,197
197,198
197,199
198,199
200,201
200,202
200,203
200,204
201,202
203,204
205,206
207,208
209,210
209,211
210,211
210,212
211,212
213,214
215,216
217,218
218,219
218,220
219,220
221,222
221,223
221,224
221,225
221,226
222,223
224,225
226,227
226,228
227,228
227,229
229,230
231,232
232,233
232,234
233,234
235,236
237,238
237,239
238,239
239,240
239,241
242,243
243,244
243,245
244,245
244,246
246,247
250,251
250,252
251,252
251,253
252,253
252,254
253,254
255,256
257,258
257,259
258,259
261,262
263,264
264,265
264,266
265,266
265,267
266,267
268,269
268,270
269,270
271,272
271,273
272,273
274,275
275,276
275,277
279,280
280,281
280,282
281,282
283,284
283,285
283,286
284,285
286,287
289,290
289,291
290,291
292,293
293,294
294,295
294,296
295,296
296,297
299,300
300,301
300,302
301,302
303,304
303,305
303,306
304,305
306,307
309,310
309,311
310,311
312,313
313,314
314,315
314,316
315,316
316,317
320,321
320,322
321,322
321,323
322,323
324,325
326,327
327,328
328,329
328,330
329,330
331,332
333,334
333,335
334,335
334,336
335,336
337,338
339,340
340,341
341,342
341,343
342,343
344,345
346,347
347,348
347,349
347,350
347,351
347,352
347,353
347,354
348,349
350,351
352,353
354,355
356,357
358,359
360,361
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,56,58,61,63,64,68,70,73,77,79,82,86,88,92,94,100,103,105,107,109,113,115,117,121,124,125,129,134,135,137,143,144,145,147,152,153,156,158,163,165,169,171,174,178,180,182,187,189,191,193,195,199,202,204,206,208,212,214,216,220,223,225,228,230,234,236,240,241,245,247,248,249,254,256,259,260,262,267,270,273,276,277,278,282,285,287,288,291,297,298,302,305,307,308,311,317,318,319,323,325,330,332,336,338,343,345,349,351,353,355,357,359,361
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
98,99
98,100
111,112
111,113
131,132
131,133
139,140
139,141
149,150
149,151
160,161
160,162
184,185
184,186
197,198
197,199
210,211
210,212
218,219
218,220
232,233
232,234
237,238
237,239
243,244
243,245
244,245
244,246
251,252
251,253
252,253
252,254
257,258
257,259
264,265
264,266
268,269
268,270
271,272
271,273
280,281
280,282
294,295
294,296
300,301
300,302
314,315
314,316
321,322
321,323
334,335
334,336
-----guardedBy-----
323,332
336,345
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32spawnl_17_bad(){    int i;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32spawnl_17_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32spawnl_17_bad
{    int i;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnl
_wspawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(91,96,0)
(122,128,0)
(104,78,0)
(95,127,0)
(55,77,0)
(8,119,0)
(176,70,0)
(98,129,0)
(41,99,0)
(121,126,0)
(16,78,0)
(66,1,0)
(117,126,0)
(139,70,0)
(76,126,0)
(118,54,0)
(162,54,0)
(45,156,0)
(187,167,0)
(144,126,0)
(146,17,0)
(93,106,0)
(138,81,0)
(124,54,0)
(140,134,0)
(182,99,0)
(99,0,0)
(181,146,0)
(115,155,0)
(150,45,0)
(44,54,0)
(9,93,0)
(80,78,0)
(77,54,0)
(141,76,0)
(125,2,0)
(17,146,0)
(99,126,0)
(84,126,0)
(136,17,0)
(161,99,0)
(6,141,0)
(61,133,0)
(97,133,0)
(96,76,0)
(145,16,0)
(37,49,0)
(7,129,0)
(123,137,0)
(133,192,0)
(143,22,0)
(81,138,0)
(106,127,0)
(124,19,0)
(83,159,0)
(10,99,0)
(51,162,0)
(119,81,0)
(177,141,0)
(105,106,0)
(57,191,0)
(156,71,0)
(131,54,0)
(58,126,0)
(14,52,0)
(130,52,0)
(109,54,0)
(178,63,0)
(11,41,0)
(26,80,0)
(23,191,0)
(98,30,0)
(52,126,0)
(165,22,0)
(78,126,0)
(49,24,0)
(104,79,0)
(20,70,0)
(193,30,0)
(127,95,0)
(54,174,0)
(45,124,0)
(173,54,0)
(185,54,0)
(94,63,0)
(71,48,0)
(127,108,0)
(25,70,0)
(106,78,0)
(33,12,0)
(86,165,0)
(56,111,0)
(40,12,0)
(63,76,0)
(137,130,0)
(34,13,0)
(48,71,0)
(108,127,0)
(156,45,0)
(129,30,0)
(151,126,0)
(17,141,0)
(134,22,0)
(102,78,0)
(28,77,0)
(153,138,0)
(76,141,0)
(73,24,0)
(43,171,0)
(65,124,0)
(141,71,0)
(183,49,0)
(0,99,0)
(186,88,0)
(191,57,0)
(116,30,0)
(168,126,0)
(180,0,0)
(17,136,0)
(68,134,0)
(103,80,0)
(35,192,0)
(3,90,0)
(152,54,0)
(18,57,0)
(190,98,0)
(155,54,0)
(69,161,0)
(19,98,0)
(141,99,0)
(60,10,0)
(172,73,0)
(157,106,0)
(81,1,0)
(132,114,0)
(39,70,0)
(92,96,0)
(63,91,0)
(64,76,0)
(161,113,0)
(175,45,0)
(2,78,0)
(142,70,0)
(5,19,0)
(67,155,0)
(130,137,0)
(19,124,0)
(112,54,0)
(161,77,0)
(179,96,0)
(62,23,0)
(167,121,0)
(24,126,0)
(146,124,0)
(32,137,0)
(158,30,0)
(107,54,0)
(29,121,0)
(47,48,0)
(189,126,0)
(2,155,0)
(101,54,0)
(106,93,0)
(135,98,0)
(188,41,0)
(192,133,0)
(164,10,0)
(24,73,0)
(133,78,0)
(127,106,0)
(191,23,0)
(75,130,0)
(38,54,0)
(78,80,0)
(1,81,0)
(71,141,0)
(104,155,0)
(72,167,0)
(31,27,0)
(70,30,0)
(41,77,0)
(141,17,0)
(184,80,0)
(91,63,0)
(36,104,0)
(42,54,0)
(170,126,0)
(106,105,0)
(146,98,0)
(4,22,0)
(85,95,0)
(0,78,0)
(96,91,0)
(169,156,0)
(87,2,0)
(15,146,0)
(154,0,0)
(191,126,0)
(53,16,0)
(160,30,0)
(110,105,0)
(50,191,0)
(163,126,0)
(100,1,0)
(12,126,0)
(166,162,0)
(120,129,0)
(71,156,0)
(81,119,0)
(147,0,0)
(23,62,1)
(7,120,1)
(94,178,1)
(138,81,1)
(134,68,1)
(143,4,1)
(146,124,1)
(98,129,1)
(97,61,1)
(45,175,1)
(47,17,1)
(22,143,1)
(87,56,1)
(65,77,1)
(86,43,1)
(49,183,1)
(78,80,1)
(0,154,1)
(87,132,1)
(162,166,1)
(29,167,1)
(180,147,1)
(99,0,1)
(24,73,1)
(57,18,1)
(18,50,1)
(127,95,1)
(156,45,1)
(55,28,1)
(165,86,1)
(41,77,1)
(63,94,1)
(2,155,1)
(53,145,1)
(93,9,1)
(106,127,1)
(149,74,1)
(72,187,1)
(161,99,1)
(140,22,1)
(105,110,1)
(146,181,1)
(115,162,1)
(138,153,1)
(106,78,1)
(60,99,1)
(95,85,1)
(75,137,1)
(167,72,1)
(41,11,1)
(10,99,1)
(19,98,1)
(141,6,1)
(130,75,1)
(139,20,1)
(91,63,1)
(10,164,1)
(4,98,1)
(21,70,1)
(178,96,1)
(83,91,1)
(166,51,1)
(66,124,1)
(2,78,1)
(96,92,1)
(67,115,1)
(70,25,1)
(141,71,1)
(12,33,1)
(150,169,1)
(40,138,1)
(50,23,1)
(74,82,1)
(85,157,1)
(104,78,1)
(110,106,1)
(183,37,1)
(52,14,1)
(71,156,1)
(43,46,1)
(192,133,1)
(161,77,1)
(169,48,1)
(188,104,1)
(48,47,1)
(140,165,1)
(87,34,1)
(41,99,1)
(190,129,1)
(105,106,1)
(175,150,1)
(62,16,1)
(45,124,1)
(87,31,1)
(145,78,1)
(17,146,1)
(98,135,1)
(146,98,1)
(17,136,1)
(3,82,1)
(26,103,1)
(82,58,1)
(147,182,1)
(19,5,1)
(28,155,1)
(154,180,1)
(155,67,1)
(69,41,1)
(187,191,1)
(96,76,1)
(33,40,1)
(119,8,1)
(34,105,1)
(15,177,1)
(71,48,1)
(25,39,1)
(123,121,1)
(142,134,1)
(51,134,1)
(124,19,1)
(103,102,1)
(130,137,1)
(129,7,1)
(149,122,1)
(58,91,1)
(161,69,1)
(91,96,1)
(39,176,1)
(61,105,1)
(86,46,1)
(191,23,1)
(133,97,1)
(157,24,1)
(5,65,1)
(1,100,1)
(6,71,1)
(132,10,1)
(74,3,1)
(35,133,1)
(192,35,1)
(87,186,1)
(32,123,1)
(73,172,1)
(20,142,1)
(37,52,1)
(179,76,1)
(137,32,1)
(186,192,1)
(125,87,1)
(191,57,1)
(8,1,1)
(87,149,1)
(80,184,1)
(188,2,1)
(16,53,1)
(141,99,1)
(176,139,1)
(141,17,1)
(153,81,1)
(16,78,1)
(46,41,1)
(11,188,1)
(127,108,1)
(2,125,1)
(172,49,1)
(66,149,1)
(77,55,1)
(104,155,1)
(0,78,1)
(31,138,1)
(87,83,1)
(14,130,1)
(133,78,1)
(92,179,1)
(102,12,1)
(9,127,1)
(181,15,1)
(184,26,1)
(177,64,1)
(182,192,1)
(81,119,1)
(100,66,1)
(46,161,1)
(104,36,1)
(121,29,1)
(76,141,1)
(63,76,1)
(56,16,1)
(106,93,1)
(134,22,1)
(68,140,1)
(81,1,1)
(64,10,1)
(165,22,1)
(135,190,1)
(122,74,1)
(164,60,1)
(36,2,1)
(41,99,2)
(106,16,2)
(183,16,2)
(100,149,2)
(76,141,2)
(119,149,2)
(141,10,2)
(69,41,2)
(175,10,2)
(145,138,2)
(12,138,2)
(52,16,2)
(2,134,2)
(82,91,2)
(92,10,2)
(53,138,2)
(162,134,2)
(47,10,2)
(34,105,2)
(138,149,2)
(95,16,2)
(66,149,2)
(6,10,2)
(96,76,2)
(104,2,2)
(63,96,2)
(172,16,2)
(110,16,2)
(29,16,2)
(161,99,2)
(87,134,2)
(48,10,2)
(132,10,2)
(56,16,2)
(180,192,2)
(66,134,2)
(49,16,2)
(156,10,2)
(1,134,2)
(91,96,2)
(104,78,2)
(133,105,2)
(133,78,2)
(96,10,2)
(71,48,2)
(146,124,2)
(71,156,2)
(67,134,2)
(58,91,2)
(3,82,2)
(106,127,2)
(103,138,2)
(8,149,2)
(41,134,2)
(19,98,2)
(166,134,2)
(127,95,2)
(2,155,2)
(64,10,2)
(178,96,2)
(134,134,2)
(167,16,2)
(122,74,2)
(78,138,2)
(123,16,2)
(94,96,2)
(32,16,2)
(81,149,2)
(106,78,2)
(40,138,2)
(127,108,2)
(75,16,2)
(45,124,2)
(85,16,2)
(80,138,2)
(68,134,2)
(155,134,2)
(124,134,2)
(157,16,2)
(191,57,2)
(81,1,2)
(11,134,2)
(71,10,2)
(97,105,2)
(15,10,2)
(81,119,2)
(63,76,2)
(50,16,2)
(102,138,2)
(115,134,2)
(147,192,2)
(181,10,2)
(43,46,2)
(105,16,2)
(16,78,2)
(179,10,2)
(169,10,2)
(0,192,2)
(134,22,2)
(192,133,2)
(26,138,2)
(2,78,2)
(121,16,2)
(81,134,2)
(125,134,2)
(9,16,2)
(187,16,2)
(16,138,2)
(61,105,2)
(165,22,2)
(104,155,2)
(31,138,2)
(10,192,2)
(149,91,2)
(130,16,2)
(5,134,2)
(10,99,2)
(62,16,2)
(37,16,2)
(1,149,2)
(86,134,2)
(192,105,2)
(156,45,2)
(17,136,2)
(72,16,2)
(36,2,2)
(127,16,2)
(65,134,2)
(164,192,2)
(99,0,2)
(140,134,2)
(24,73,2)
(46,134,2)
(161,41,2)
(138,134,2)
(105,106,2)
(138,81,2)
(55,134,2)
(182,192,2)
(28,134,2)
(77,134,2)
(74,91,2)
(191,16,2)
(146,98,2)
(35,105,2)
(146,10,2)
(57,16,2)
(78,80,2)
(93,16,2)
(154,192,2)
(17,10,2)
(51,134,2)
(41,77,2)
(186,192,2)
(161,77,2)
(165,134,2)
(153,134,2)
(137,16,2)
(141,71,2)
(91,63,2)
(100,134,2)
(91,10,2)
(153,149,2)
(23,16,2)
(184,138,2)
(130,137,2)
(106,93,2)
(33,138,2)
(73,16,2)
(119,134,2)
(18,16,2)
(177,10,2)
(60,192,2)
(99,192,2)
(188,134,2)
(14,16,2)
(24,16,2)
(17,146,2)
(141,17,2)
(141,99,2)
(19,134,2)
(191,23,2)
(150,10,2)
(76,10,2)
(98,129,2)
(124,19,2)
(8,134,2)
(83,91,2)
(0,78,2)
(45,10,2)
-----------------------------------
(0,accept(listenSocket, NULL, NULL)
(1,MAKEWORD(2,2)
(2,listenSocket != INVALID_SOCKET)
(3,'\\\\0')
(4,i)
(5,data)
(6,0)
(7,COMMAND_ARG2)
(8,wsaData)
(9,service)
(10,acceptSocket == SOCKET_ERROR)
(11,INVALID_SOCKET)
(12,wsaDataInit = 1)
(13,)
(14,INADDR_ANY)
(15,data)
(16,listenSocket == INVALID_SOCKET)
(17,(char *)
(18,service)
(19,wcslen(data)
(20,COMMAND_INT_PATH)
(21,RET)
(22,i = 0)
(23,&service)
(24,service.sin_port = htons(TCP_PORT)
(25,NULL)
(26,SOCK_STREAM)
(27,)
(28,acceptSocket)
(29,AF_INET)
(30,)
(31,break;)
(32,sin_addr)
(33,1)
(34,break;)
(35,SOCKET_ERROR)
(36,listenSocket)
(37,service)
(38,dataLen)
(39,COMMAND_ARG3)
(40,wsaDataInit)
(41,acceptSocket != INVALID_SOCKET)
(42,if (listenSocket != INVALID_SOCKET)
(43,WSACleanup()
(44,wsaDataInit)
(45,dataLen - 1)
(46,wsaDataInit)
(47,wchar_t)
(48,sizeof(wchar_t)
(49,service.sin_port)
(50,0)
(51,wsaDataInit)
(52,service.sin_addr.s_addr = INADDR_ANY)
(53,INVALID_SOCKET)
(54,)
(55,INVALID_SOCKET)
(56,break;)
(57,sizeof(service)
(58,'\\\\0')
(59,\'\\\\0\')
(60,acceptSocket)
(61,listenSocket)
(62,service)
(63,recvResult == 0)
(64,recvResult)
(65,dataLen)
(66,2)
(67,INVALID_SOCKET)
(68,1)
(69,acceptSocket)
(70,_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(71,sizeof(wchar_t)
(72,sin_family)
(73,htons(TCP_PORT)
(74,replace)
(75,s_addr)
(76,recvResult = recv(acceptSocket, (char *)
(77,acceptSocket = INVALID_SOCKET)
(78,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(79,)
(80,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(81,WSAStartup(MAKEWORD(2,2)
(82,replace)
(83,break;)
(84,if (replace)
(85,service)
(86,i)
(87,listenSocket)
(88,)
(89,\'\\\\0\')
(90,)
(91,recvResult == SOCKET_ERROR || recvResult == 0)
(92,SOCKET_ERROR)
(93,sizeof(service)
(94,0)
(95,&service)
(96,recvResult == SOCKET_ERROR)
(97,LISTEN_BACKLOG)
(98,data = dataBuffer)
(99,acceptSocket = accept(listenSocket, NULL, NULL)
(100,2)
(101,do)
(102,listenSocket)
(103,AF_INET)
(104,CLOSE_SOCKET(listenSocket)
(105,bind(listenSocket, (struct sockaddr*)
(106,bind(listenSocket, (struct sockaddr*)
(107,replace)
(108,struct sockaddr*)
(109,service)
(110,SOCKET_ERROR)
(111,)
(112,if (wsaDataInit)
(113,)
(114,)
(115,listenSocket)
(116,data)
(117,if (acceptSocket == SOCKET_ERROR)
(118,wsaData)
(119,&wsaData)
(120,dataBuffer)
(121,service.sin_family = AF_INET)
(122,\'\\\\0\')
(123,service)
(124,dataLen = wcslen(data)
(125,INVALID_SOCKET)
(126,)
(127,(struct sockaddr*)
(128,)
(129,dataBuffer[100] = COMMAND_ARG2)
(130,service.sin_addr.s_addr)
(131,recvResult)
(132,break;)
(133,listen(listenSocket, LISTEN_BACKLOG)
(134,i < 1)
(135,dataBuffer)
(136,char *)
(137,service.sin_addr)
(138,WSAStartup(MAKEWORD(2,2)
(139,COMMAND_INT_PATH)
(140,i)
(141,recv(acceptSocket, (char *)
(142,_P_WAIT)
(143,0)
(144,if (WSAStartup(MAKEWORD(2,2)
(145,listenSocket)
(146,data + dataLen)
(147,listenSocket)
(148,'\\\\0')
(149,0)
(150,dataLen)
(151,if (replace)
(152,listenSocket)
(153,NO_ERROR)
(154,NULL)
(155,listenSocket = INVALID_SOCKET)
(156,100 - dataLen - 1)
(157,listenSocket)
(158,i)
(159,)
(160,for(i = 0; i < 1; i++)
(161,CLOSE_SOCKET(acceptSocket)
(162,wsaDataInit = 0)
(163,if (listen(listenSocket, LISTEN_BACKLOG)
(164,SOCKET_ERROR)
(165,i++)
(166,0)
(167,service.sin_family)
(168,if (recvResult == SOCKET_ERROR || recvResult == 0)
(169,100)
(170,if (bind(listenSocket, (struct sockaddr*)
(171,)
(172,TCP_PORT)
(173,if (acceptSocket != INVALID_SOCKET)
(174,)
(175,1)
(176,COMMAND_ARG1)
(177,acceptSocket)
(178,recvResult)
(179,recvResult)
(180,NULL)
(181,dataLen)
(182,acceptSocket)
(183,sin_port)
(184,IPPROTO_TCP)
(185,acceptSocket)
(186,break;)
(187,service)
(188,acceptSocket)
(189,if (listenSocket == INVALID_SOCKET)
(190,data)
(191,memset(&service, 0, sizeof(service)
(192,listen(listenSocket, LISTEN_BACKLOG)
(193,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^