-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    else
    {
        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        size_t i, dataLen;
        dataLen = strlen(data);
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        for (i = 0; i < dataLen; i++)
        {
            dest[i] = data[i];
        }
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
87,89
87,90
87,91
87,92
87,93
87,94
88,89
89,90
89,91
91,92
91,93
91,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
106,107
106,108
107,108
109,110
109,111
110,111
112,113
114,115
114,116
114,117
114,118
115,116
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
126,127
128,129
129,130
130,131
130,132
131,132
131,133
132,133
134,135
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
146,147
146,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,71,73,74,76,77,82,84,85,86,90,92,94,96,100,102,104,108,111,113,118,119,122,124,127,133,135,138,140,145,147,148,149,153,155,159,161
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
75,76
75,77
79,80
79,81
83,84
83,85
106,107
106,108
116,117
116,118
120,121
120,122
130,131
130,132
142,143
142,144
146,147
146,148
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char dest[50] = "";        size_t i, dataLen;        dataLen = strlen(data);        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
size_t i, dataLen;
size_t i, dataLen;
size_t
size_t
i
i
dataLen
dataLen
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
for (i = 0; i < dataLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < dataLen
i
i
dataLen
dataLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,15,0)
(61,35,0)
(19,18,0)
(6,46,0)
(19,31,0)
(25,12,0)
(29,58,0)
(34,47,0)
(37,27,0)
(38,86,0)
(50,61,0)
(70,12,0)
(68,61,0)
(29,85,0)
(73,86,0)
(56,19,0)
(1,54,0)
(42,31,0)
(74,46,0)
(84,2,0)
(82,35,0)
(84,16,0)
(81,12,0)
(3,27,0)
(58,15,0)
(35,61,0)
(79,31,0)
(63,56,0)
(41,31,0)
(6,23,0)
(86,15,0)
(28,75,0)
(14,49,0)
(21,6,0)
(84,31,0)
(40,75,0)
(83,37,0)
(87,81,0)
(37,15,0)
(20,12,0)
(64,12,0)
(59,20,0)
(65,49,0)
(86,20,0)
(62,76,0)
(12,75,0)
(53,58,0)
(49,65,0)
(51,23,0)
(10,8,0)
(72,82,0)
(71,23,0)
(48,24,0)
(4,56,0)
(31,75,0)
(24,20,0)
(80,52,0)
(57,48,0)
(24,48,0)
(45,58,0)
(67,84,0)
(82,72,0)
(23,6,0)
(58,31,0)
(27,12,0)
(7,2,0)
(26,19,0)
(79,27,0)
(44,19,0)
(43,24,0)
(1,52,0)
(69,84,0)
(88,75,0)
(22,12,0)
(52,1,0)
(11,50,0)
(86,29,0)
(39,65,0)
(31,82,0)
(82,31,0)
(9,37,0)
(6,31,0)
(78,25,0)
(27,79,0)
(81,31,0)
(55,15,0)
(0,49,0)
(46,18,0)
(47,12,0)
(5,2,0)
(30,41,0)
(66,15,0)
(2,84,0)
(19,56,0)
(24,47,0)
(58,29,0)
(65,31,0)
(61,50,0)
(35,82,0)
(65,76,0)
(25,31,0)
(60,79,0)
(77,41,0)
(36,20,0)
(17,12,0)
(76,16,0)
(32,48,0)
(5,69,1)
(13,81,1)
(21,19,1)
(14,39,1)
(10,29,1)
(58,31,1)
(36,46,1)
(2,7,1)
(33,41,1)
(23,71,1)
(45,53,1)
(86,38,1)
(78,47,1)
(9,8,1)
(50,11,1)
(11,68,1)
(86,15,1)
(81,31,1)
(41,77,1)
(65,49,1)
(58,15,1)
(57,43,1)
(86,20,1)
(58,45,1)
(44,26,1)
(51,21,1)
(9,15,1)
(6,31,1)
(27,79,1)
(25,78,1)
(47,34,1)
(82,35,1)
(37,83,1)
(20,59,1)
(8,15,1)
(1,52,1)
(25,31,1)
(67,33,1)
(24,48,1)
(43,37,1)
(65,31,1)
(59,36,1)
(87,25,1)
(29,58,1)
(74,6,1)
(15,55,1)
(82,72,1)
(81,87,1)
(33,1,1)
(49,0,1)
(34,24,1)
(80,41,1)
(4,44,1)
(38,73,1)
(66,27,1)
(48,32,1)
(53,86,1)
(26,33,1)
(73,37,1)
(84,31,1)
(37,15,1)
(60,3,1)
(7,5,1)
(76,62,1)
(6,23,1)
(35,61,1)
(63,4,1)
(69,67,1)
(0,14,1)
(41,31,1)
(79,31,1)
(84,2,1)
(55,66,1)
(83,9,1)
(46,74,1)
(32,57,1)
(39,84,1)
(37,27,1)
(77,30,1)
(71,51,1)
(56,63,1)
(31,82,1)
(3,20,1)
(79,60,1)
(52,80,1)
(30,31,1)
(36,76,1)
(68,42,1)
(62,65,1)
(8,10,1)
(19,31,1)
(61,50,1)
(24,20,1)
(19,56,1)
(26,33,2)
(61,50,2)
(37,27,2)
(2,33,2)
(5,33,2)
(1,52,2)
(39,33,2)
(58,15,2)
(37,37,2)
(84,33,2)
(49,33,2)
(58,37,2)
(19,56,2)
(69,33,2)
(51,33,2)
(71,33,2)
(81,31,2)
(4,33,2)
(6,23,2)
(56,33,2)
(58,31,2)
(24,20,2)
(65,33,2)
(53,37,2)
(21,33,2)
(14,33,2)
(73,37,2)
(19,31,2)
(67,33,2)
(41,31,2)
(29,37,2)
(1,41,2)
(86,37,2)
(8,15,2)
(35,61,2)
(31,82,2)
(29,58,2)
(8,37,2)
(45,37,2)
(86,20,2)
(86,15,2)
(76,33,2)
(79,31,2)
(84,2,2)
(37,15,2)
(82,35,2)
(9,37,2)
(25,31,2)
(10,37,2)
(63,33,2)
(65,49,2)
(6,33,2)
(7,33,2)
(6,31,2)
(23,33,2)
(83,37,2)
(38,37,2)
(74,33,2)
(27,79,2)
(62,33,2)
(44,33,2)
(52,41,2)
(80,41,2)
(0,33,2)
(82,72,2)
(65,31,2)
(84,31,2)
(46,33,2)
(19,33,2)
(24,48,2)
-----------------------------------
(0,1)
(1,exit(-1)
(2,50-1)
(3,dataLen)
(4,100)
(5,50)
(6,data[100-1])
(7,1)
(8,i++)
(9,i)
(10,i)
(11,char)
(12,)
(13,RET)
(14,50)
(15,i = 0)
(16,)
(17,dest)
(18,)
(19,memset(data, \\\'A\\\', 100-1)
(20,dest[50] = "")
(21,data)
(22,i)
(23,100-1)
(24,dest[50-1])
(25,printLine(data)
(26,data)
(27,dataLen = strlen(data)
(28,if(globalReturnsTrueOrFalse()
(29,dest[i] = data[i])
(30,data)
(31,data = (char *)
(32,1)
(33,globalReturnsTrueOrFalse()
(34,\\\'\\\\0\\\')
(35,malloc(100*sizeof(char)
(36,dest)
(37,i < dataLen)
(38,i)
(39,data)
(40,if (data == NULL)
(41,data == NULL)
(42,data)
(43,dest)
(44,\\\'A\\\')
(45,i)
(46,data[100-1] = \\\'\\\\0\\\')
(47,dest[50-1] = \\\'\\\\0\\\')
(48,50-1)
(49,50-1)
(50,sizeof(char)
(51,100)
(52,-1)
(53,data)
(54,)
(55,0)
(56,100-1)
(57,50)
(58,data[i])
(59,"")
(60,data)
(61,100*sizeof(char)
(62,\\\'\\\\0\\\')
(63,1)
(64,for (i = 0; i < dataLen; i++)
(65,data[50-1])
(66,i)
(67,data)
(68,100)
(69,\\\'A\\\')
(70,dataLen)
(71,1)
(72,char *)
(73,dest)
(74,\\\'\\\\0\\\')
(75,)
(76,data[50-1] = \\\'\\\\0\\\')
(77,NULL)
(78,data)
(79,strlen(data)
(80,1)
(81,free(data)
(82,(char *)
(83,dataLen)
(84,memset(data, \\\'A\\\', 50-1)
(85,)
(86,dest[i])
(87,data)
(88,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^