-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_54_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_54_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink
data
data
-----joern-----
(68,12,0)
(27,61,0)
(42,70,0)
(11,53,0)
(19,45,0)
(33,19,0)
(8,22,0)
(34,70,0)
(37,57,0)
(12,39,0)
(39,59,0)
(31,70,0)
(42,64,0)
(57,63,0)
(9,42,0)
(10,14,0)
(15,22,0)
(50,59,0)
(59,41,0)
(26,57,0)
(45,19,0)
(17,45,0)
(30,39,0)
(63,39,0)
(18,60,0)
(13,6,0)
(55,11,0)
(39,41,0)
(64,35,0)
(7,34,0)
(0,25,0)
(30,25,0)
(66,2,0)
(16,64,0)
(54,2,0)
(21,63,0)
(19,27,0)
(45,39,0)
(3,70,0)
(4,39,0)
(46,42,0)
(5,52,0)
(42,39,0)
(70,6,0)
(24,53,0)
(12,41,0)
(57,25,0)
(63,57,0)
(67,39,0)
(14,19,0)
(53,11,0)
(22,70,0)
(29,51,0)
(49,45,0)
(23,41,0)
(70,3,0)
(45,70,0)
(60,22,0)
(2,25,0)
(62,30,0)
(11,39,0)
(65,38,0)
(27,34,0)
(43,6,0)
(53,25,0)
(25,30,0)
(27,19,0)
(32,5,0)
(34,27,0)
(25,48,0)
(22,60,0)
(61,27,0)
(3,39,0)
(47,59,0)
(40,3,0)
(28,53,0)
(38,11,0)
(11,38,0)
(44,34,0)
(56,41,0)
(38,65,0)
(58,38,0)
(2,65,0)
(19,14,0)
(1,20,0)
(69,48,0)
(63,5,0)
(65,2,0)
(20,35,0)
(6,41,0)
(11,39,1)
(68,64,1)
(60,18,1)
(60,22,1)
(57,25,1)
(12,68,1)
(16,42,1)
(11,53,1)
(22,70,1)
(10,19,1)
(38,11,1)
(42,70,1)
(31,39,1)
(50,47,1)
(39,4,1)
(9,46,1)
(19,33,1)
(19,45,1)
(65,38,1)
(20,1,1)
(28,55,1)
(68,60,1)
(45,49,1)
(1,14,1)
(46,20,1)
(32,63,1)
(44,45,1)
(18,22,1)
(63,39,1)
(8,15,1)
(19,27,1)
(15,70,1)
(63,57,1)
(68,5,1)
(68,65,1)
(33,27,1)
(27,34,1)
(21,65,1)
(42,39,1)
(0,14,1)
(30,39,1)
(3,39,1)
(66,54,1)
(34,70,1)
(14,10,1)
(37,21,1)
(53,24,1)
(14,19,1)
(70,3,1)
(45,39,1)
(67,59,1)
(65,2,1)
(22,8,1)
(40,31,1)
(2,25,1)
(24,28,1)
(2,66,1)
(12,39,1)
(57,26,1)
(4,67,1)
(62,0,1)
(36,12,1)
(58,11,1)
(64,16,1)
(59,50,1)
(34,7,1)
(53,25,1)
(7,44,1)
(38,58,1)
(25,30,1)
(55,2,1)
(17,60,1)
(3,40,1)
(26,37,1)
(39,59,1)
(30,62,1)
(42,9,1)
(54,25,1)
(45,70,1)
(49,17,1)
(27,61,1)
(5,32,1)
(21,65,2)
(70,3,2)
(37,65,2)
(27,61,2)
(45,70,2)
(9,14,2)
(11,2,2)
(42,39,2)
(2,14,2)
(46,14,2)
(17,60,2)
(65,2,2)
(12,39,2)
(30,39,2)
(42,14,2)
(65,38,2)
(63,39,2)
(20,14,2)
(14,60,2)
(39,59,2)
(11,53,2)
(42,70,2)
(57,65,2)
(45,60,2)
(19,45,2)
(33,60,2)
(62,14,2)
(45,39,2)
(57,25,2)
(1,14,2)
(58,2,2)
(30,14,2)
(27,34,2)
(28,2,2)
(24,2,2)
(34,60,2)
(63,57,2)
(53,2,2)
(32,65,2)
(14,19,2)
(26,65,2)
(55,2,2)
(54,14,2)
(3,39,2)
(60,22,2)
(38,2,2)
(66,14,2)
(38,11,2)
(22,70,2)
(65,14,2)
(63,65,2)
(2,25,2)
(5,65,2)
(11,39,2)
(44,60,2)
(49,60,2)
(10,60,2)
(0,14,2)
(34,70,2)
(27,60,2)
(19,27,2)
(19,60,2)
(25,14,2)
(25,30,2)
(64,14,2)
(16,14,2)
(53,25,2)
(7,60,2)
-----------------------------------
(0,dataLen)
(1,"fgets()
(2,dataLen > 0)
(3,strlen(data)
(4,dataBuffer)
(5,data[dataLen-1] = \\\'\\\\0\\\')
(6,)
(7,dataLen)
(8,dataLen)
(9,dataLen)
(10,NULL)
(11,data[dataLen-1])
(12,CWE78_OS_Command_Injection__char_console_w32_spawnlp_54b_badSink(data)
(13,dataLen)
(14,fgets(data+dataLen, (int)
(15,100)
(16,\\\'\\\\0\\\')
(17,data)
(18,1)
(19,fgets(data+dataLen, (int)
(20,printLine("fgets()
(21,data)
(22,100-dataLen)
(23,data)
(24,1)
(25,dataLen = strlen(data)
(26,1)
(27,(int)
(28,dataLen)
(29,if (fgets(data+dataLen, (int)
(30,strlen(data)
(31,dataLen)
(32,\\\'\\\\0\\\')
(33,stdin)
(34,100-dataLen)
(35,)
(36,RET)
(37,dataLen)
(38,data[dataLen-1] == \\\'\\\\n\\\')
(39,data = dataBuffer)
(40,data)
(41,)
(42,data[dataLen])
(43,if (100-dataLen > 1)
(44,100)
(45,data+dataLen)
(46,data)
(47,dataBuffer)
(48,)
(49,dataLen)
(50,COMMAND_ARG2)
(51,)
(52,)
(53,dataLen-1)
(54,dataLen)
(55,data)
(56,dataBuffer)
(57,dataLen-1)
(58,\\\'\\\\n\\\')
(59,dataBuffer[100] = COMMAND_ARG2)
(60,100-dataLen > 1)
(61,int)
(62,data)
(63,data[dataLen-1])
(64,data[dataLen] = \\\'\\\\0\\\')
(65,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(66,0)
(67,data)
(68,data)
(69,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(70,dataLen = strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^