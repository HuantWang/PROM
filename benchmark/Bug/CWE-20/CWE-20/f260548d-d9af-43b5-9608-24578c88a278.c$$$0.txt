-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        SNPRINTF(data, 100, "%s", source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
89,93
89,94
90,91
92,93
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,94,95,97,101,103,107,109
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        SNPRINTF(data, 100, "%s", source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
SNPRINTF(data, 100, "%s", source);
SNPRINTF(data, 100, "%s", source)
SNPRINTF
SNPRINTF
data
data
100
"%s"
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(5,13,0)
(24,13,0)
(38,28,0)
(12,14,0)
(30,40,0)
(48,15,0)
(37,38,0)
(42,37,0)
(24,40,0)
(15,46,0)
(33,51,0)
(37,13,0)
(16,14,0)
(18,38,0)
(51,13,0)
(14,16,0)
(23,38,0)
(43,37,0)
(7,23,0)
(4,14,0)
(18,40,0)
(32,28,0)
(47,15,0)
(1,13,0)
(31,39,0)
(6,39,0)
(6,23,0)
(54,28,0)
(36,37,0)
(20,52,0)
(15,38,0)
(39,6,0)
(21,52,0)
(46,15,0)
(53,19,0)
(0,21,0)
(37,40,0)
(27,39,0)
(45,9,0)
(11,38,0)
(2,37,0)
(24,38,0)
(17,24,0)
(1,16,0)
(19,49,0)
(13,1,0)
(19,53,0)
(10,46,0)
(34,1,0)
(8,12,0)
(1,34,0)
(25,9,0)
(29,53,0)
(35,6,0)
(16,1,0)
(40,28,0)
(26,46,0)
(18,13,0)
(9,13,0)
(13,52,0)
(51,21,0)
(22,51,0)
(41,18,0)
(44,40,0)
(14,12,0)
(15,46,1)
(30,44,1)
(19,53,1)
(18,40,1)
(29,9,1)
(37,13,1)
(33,19,1)
(37,40,1)
(9,25,1)
(35,15,1)
(24,40,1)
(16,14,1)
(46,26,1)
(50,40,1)
(1,16,1)
(31,27,1)
(53,29,1)
(6,39,1)
(51,22,1)
(14,12,1)
(12,8,1)
(1,34,1)
(18,13,1)
(21,0,1)
(5,50,1)
(42,43,1)
(45,13,1)
(40,30,1)
(43,36,1)
(22,33,1)
(2,23,1)
(4,5,1)
(25,45,1)
(26,10,1)
(33,9,1)
(41,37,1)
(23,7,1)
(51,13,1)
(36,2,1)
(0,51,1)
(8,4,1)
(13,1,1)
(10,47,1)
(9,13,1)
(47,48,1)
(27,35,1)
(48,21,1)
(18,41,1)
(24,17,1)
(48,50,1)
(37,42,1)
(3,24,1)
(17,18,1)
(7,6,1)
(39,31,1)
(24,13,1)
(13,1,2)
(25,50,2)
(45,50,2)
(1,16,2)
(19,53,2)
(18,40,2)
(22,50,2)
(53,9,2)
(16,14,2)
(24,13,2)
(8,50,2)
(18,13,2)
(21,50,2)
(15,46,2)
(9,13,2)
(37,13,2)
(29,9,2)
(24,40,2)
(5,50,2)
(0,50,2)
(16,50,2)
(19,9,2)
(6,39,2)
(13,50,2)
(4,50,2)
(14,50,2)
(1,34,2)
(51,13,2)
(9,50,2)
(1,50,2)
(51,50,2)
(33,50,2)
(37,40,2)
(12,50,2)
(14,12,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,(char *)
(2,data)
(3,RET)
(4,50)
(5,data)
(6,source[100-1])
(7,\\\'\\\\0\\\')
(8,char)
(9,data == NULL)
(10,100)
(11,source)
(12,sizeof(char)
(13,data = (char *)
(14,50*sizeof(char)
(15,memset(source, \\\'C\\\', 100-1)
(16,malloc(50*sizeof(char)
(17,data)
(18,printLine(data)
(19,exit(-1)
(20,if (data == NULL)
(21,data[0] = \\\'\\\\0\\\')
(22,0)
(23,source[100-1] = \\\'\\\\0\\\')
(24,free(data)
(25,NULL)
(26,1)
(27,100)
(28,)
(29,1)
(30,NULL)
(31,1)
(32,if(globalReturnsTrue()
(33,data)
(34,char *)
(35,source)
(36,100)
(37,SNPRINTF(data, 100, "%s", source)
(38,)
(39,100-1)
(40,data = NULL)
(41,data)
(42,source)
(43,"%s")
(44,data)
(45,data)
(46,100-1)
(47,\\\'C\\\')
(48,source)
(49,)
(50,globalReturnsTrue()
(51,data[0])
(52,)
(53,-1)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^