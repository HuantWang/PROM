-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        wcscat(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,100,102,106,108
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscat(data, source);
wcscat(data, source)
wcscat
wcscat
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,29,0)
(27,0,0)
(11,32,0)
(17,5,0)
(31,24,0)
(18,33,0)
(22,28,0)
(30,19,0)
(19,33,0)
(16,30,0)
(14,24,0)
(23,0,0)
(26,35,0)
(24,14,0)
(35,24,0)
(15,8,0)
(36,14,0)
(34,5,0)
(36,19,0)
(20,19,0)
(6,4,0)
(34,19,0)
(1,36,0)
(13,33,0)
(32,19,0)
(14,36,0)
(32,4,0)
(9,34,0)
(24,35,0)
(29,4,0)
(36,1,0)
(34,4,0)
(4,28,0)
(19,36,0)
(10,5,0)
(29,19,0)
(8,15,0)
(12,28,0)
(25,15,0)
(3,30,0)
(37,32,0)
(5,28,0)
(8,7,0)
(32,5,0)
(39,4,0)
(29,5,0)
(36,1,1)
(18,8,1)
(32,37,1)
(19,36,1)
(10,0,1)
(32,19,1)
(29,19,1)
(16,19,1)
(34,19,1)
(36,14,1)
(6,39,1)
(24,35,1)
(37,11,1)
(34,4,1)
(8,15,1)
(4,6,1)
(29,4,1)
(27,4,1)
(30,3,1)
(10,18,1)
(0,23,1)
(14,24,1)
(11,10,1)
(34,9,1)
(21,34,1)
(2,32,1)
(15,25,1)
(18,30,1)
(32,4,1)
(20,0,1)
(29,2,1)
(26,31,1)
(9,29,1)
(31,20,1)
(35,26,1)
(30,19,1)
(25,30,1)
(3,16,1)
(23,27,1)
(29,4,2)
(30,19,2)
(15,30,2)
(18,0,2)
(34,19,2)
(29,19,2)
(36,1,2)
(34,4,2)
(19,0,2)
(3,0,2)
(8,15,2)
(36,14,2)
(30,0,2)
(19,36,2)
(35,0,2)
(32,19,2)
(24,35,2)
(25,30,2)
(14,0,2)
(24,0,2)
(36,0,2)
(31,0,2)
(16,0,2)
(32,4,2)
(20,0,2)
(26,0,2)
(8,30,2)
(14,24,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE==5)
(1,wchar_t *)
(2,data)
(3,NULL)
(4,data = NULL)
(5,)
(6,NULL)
(7,)
(8,exit(-1)
(9,data)
(10,'\\\\0')
(11,data)
(12,if(GLOBAL_CONST_FIVE==5)
(13,if (data == NULL)
(14,malloc(50*sizeof(wchar_t)
(15,-1)
(16,data)
(17,source)
(18,'\\\\0')
(19,data = (wchar_t *)
(20,data)
(21,RET)
(22,data)
(23,5)
(24,50*sizeof(wchar_t)
(25,1)
(26,wchar_t)
(27,GLOBAL_CONST_FIVE)
(28,)
(29,printWLine(data)
(30,data == NULL)
(31,50)
(32,wcscat(data, source)
(33,)
(34,free(data)
(35,sizeof(wchar_t)
(36,(wchar_t *)
(37,source)
(38,\'\\\\0\')
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^