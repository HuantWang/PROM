-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54e_badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
12,16
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,65,67,69,71,75,76,80,84,85
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54e_badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54e_badSink(twoIntsStruct * data)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54e_badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(42,39,0)
(7,13,0)
(39,11,0)
(21,32,0)
(4,11,0)
(28,22,0)
(25,6,0)
(4,32,0)
(10,6,0)
(3,40,0)
(6,25,0)
(41,26,0)
(6,22,0)
(16,24,0)
(4,24,0)
(8,13,0)
(36,22,0)
(39,27,0)
(32,14,0)
(5,4,0)
(40,23,0)
(38,25,0)
(24,29,0)
(0,22,0)
(23,17,0)
(37,2,0)
(31,4,0)
(27,21,0)
(30,22,0)
(19,28,0)
(21,27,0)
(13,32,0)
(2,17,0)
(25,2,0)
(12,28,0)
(20,32,0)
(35,23,0)
(15,39,0)
(26,22,0)
(18,30,0)
(30,40,0)
(33,30,0)
(34,29,0)
(40,30,0)
(9,6,0)
(24,4,0)
(29,24,0)
(27,39,0)
(18,28,1)
(12,26,1)
(9,23,1)
(4,11,1)
(25,38,1)
(26,41,1)
(37,25,1)
(28,22,1)
(5,31,1)
(1,21,1)
(31,28,1)
(6,10,1)
(24,29,1)
(28,19,1)
(16,5,1)
(0,36,1)
(19,12,1)
(34,16,1)
(40,30,1)
(33,18,1)
(30,33,1)
(42,4,1)
(2,37,1)
(39,11,1)
(40,3,1)
(22,0,1)
(39,15,1)
(29,34,1)
(30,22,1)
(6,22,1)
(41,2,1)
(10,9,1)
(25,6,1)
(3,30,1)
(12,22,1)
(15,42,1)
(38,6,1)
(21,27,1)
(23,35,1)
(4,24,1)
(35,40,1)
(27,39,1)
(26,22,1)
(2,28,2)
(37,28,2)
(6,22,2)
(18,28,2)
(4,11,2)
(3,28,2)
(35,28,2)
(28,28,2)
(19,28,2)
(25,28,2)
(24,29,2)
(33,28,2)
(26,28,2)
(30,28,2)
(21,27,2)
(26,22,2)
(6,28,2)
(25,6,2)
(28,22,2)
(38,28,2)
(39,11,2)
(9,28,2)
(4,24,2)
(30,22,2)
(10,28,2)
(40,30,2)
(27,39,2)
(41,28,2)
(12,28,2)
(40,28,2)
(23,28,2)
-----------------------------------
(0,0)
(1,RET)
(2,source[i].intTwo = 0)
(3,intOne)
(4,memmove(data, source, 100*sizeof(twoIntsStruct)
(5,source)
(6,source[i])
(7,for (i = 0; i < 100; i++)
(8,i)
(9,source)
(10,i)
(11,twoIntsStruct * data)
(12,i)
(13,)
(14,)
(15,0)
(16,100)
(17,)
(18,source)
(19,100)
(20,source)
(21,printStructLine(&data[0])
(22,i = 0)
(23,source[i].intOne = 0)
(24,100*sizeof(twoIntsStruct)
(25,source[i].intTwo)
(26,i++)
(27,&data[0])
(28,i < 100)
(29,sizeof(twoIntsStruct)
(30,source[i])
(31,data)
(32,)
(33,i)
(34,twoIntsStruct)
(35,0)
(36,i)
(37,0)
(38,intTwo)
(39,data[0])
(40,source[i].intOne)
(41,i)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^