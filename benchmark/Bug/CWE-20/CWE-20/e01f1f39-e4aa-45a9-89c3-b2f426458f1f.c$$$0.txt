-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnlp_05_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(staticTrue)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* spawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
121,124
121,125
121,126
121,127
121,128
122,123
124,125
126,127
128,129
130,131
132,133
134,135
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,123,125,127,129,131,133,135
-----computeFrom-----
23,24
23,25
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnlp_05_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_file_w32_spawnlp_05_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnlp_05_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticTrue)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
staticTrue
staticTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnlp
_spawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(65,1,0)
(39,57,0)
(8,63,0)
(25,12,0)
(65,43,0)
(8,14,0)
(61,29,0)
(43,0,0)
(45,0,0)
(62,58,0)
(33,61,0)
(1,65,0)
(12,39,0)
(42,15,0)
(19,7,0)
(0,14,0)
(18,48,0)
(13,39,0)
(51,22,0)
(27,62,0)
(6,8,0)
(39,12,0)
(48,39,0)
(22,14,0)
(9,38,0)
(37,57,0)
(64,28,0)
(65,38,0)
(23,63,0)
(38,65,0)
(47,0,0)
(66,8,0)
(56,15,0)
(4,59,0)
(49,59,0)
(38,15,0)
(14,22,0)
(46,65,0)
(63,58,0)
(15,28,0)
(20,61,0)
(22,15,0)
(11,1,0)
(3,14,0)
(35,64,0)
(0,43,0)
(60,3,0)
(40,14,0)
(26,52,0)
(30,64,0)
(5,13,0)
(43,65,0)
(31,38,0)
(54,28,0)
(43,24,0)
(41,59,0)
(2,39,0)
(50,13,0)
(21,28,0)
(65,39,0)
(32,61,0)
(44,59,0)
(38,14,0)
(15,64,0)
(17,3,0)
(34,59,0)
(55,12,0)
(24,43,0)
(10,59,0)
(59,28,0)
(3,52,0)
(8,15,0)
(52,3,0)
(48,7,0)
(53,28,0)
(14,61,0)
(23,8,1)
(14,22,1)
(38,9,1)
(48,18,1)
(2,52,1)
(43,0,1)
(18,1,1)
(36,15,1)
(18,63,1)
(52,26,1)
(26,3,1)
(46,43,1)
(12,25,1)
(49,10,1)
(5,39,1)
(60,14,1)
(66,62,1)
(63,23,1)
(10,52,1)
(11,65,1)
(65,46,1)
(10,36,1)
(41,44,1)
(38,15,1)
(40,36,1)
(3,14,1)
(38,14,1)
(17,60,1)
(59,34,1)
(42,56,1)
(48,39,1)
(8,6,1)
(65,38,1)
(52,3,1)
(1,65,1)
(31,13,1)
(10,13,1)
(8,15,1)
(65,39,1)
(10,48,1)
(3,17,1)
(25,55,1)
(51,40,1)
(47,38,1)
(39,12,1)
(55,2,1)
(50,5,1)
(64,30,1)
(45,47,1)
(22,15,1)
(13,50,1)
(8,14,1)
(13,39,1)
(43,24,1)
(6,66,1)
(4,49,1)
(16,59,1)
(15,64,1)
(1,11,1)
(22,51,1)
(0,45,1)
(15,42,1)
(56,64,1)
(44,4,1)
(27,1,1)
(62,27,1)
(9,31,1)
(34,41,1)
(0,14,1)
(30,35,1)
(65,43,1)
(17,36,2)
(46,13,2)
(65,39,2)
(43,13,2)
(3,36,2)
(52,3,2)
(65,38,2)
(0,14,2)
(50,52,2)
(39,12,2)
(12,52,2)
(38,15,2)
(52,36,2)
(8,15,2)
(1,13,2)
(9,13,2)
(3,14,2)
(60,36,2)
(45,13,2)
(1,65,2)
(0,13,2)
(13,39,2)
(48,13,2)
(2,52,2)
(65,43,2)
(63,1,2)
(22,15,2)
(55,52,2)
(40,36,2)
(27,1,2)
(22,36,2)
(62,1,2)
(43,0,2)
(65,13,2)
(8,14,2)
(14,22,2)
(23,1,2)
(39,52,2)
(6,1,2)
(38,13,2)
(47,13,2)
(5,52,2)
(31,13,2)
(48,39,2)
(43,24,2)
(25,52,2)
(11,13,2)
(38,14,2)
(14,36,2)
(51,36,2)
(8,1,2)
(18,13,2)
(13,52,2)
(26,36,2)
(66,1,2)
(15,64,2)
-----------------------------------
(0,100-dataLen)
(1,fgets(data+dataLen, (int)
(2,pFile)
(3,100-dataLen)
(4,COMMAND_INT)
(5,pFile)
(6,dataLen)
(7,)
(8,data[dataLen])
(9,dataLen)
(10,_P_WAIT)
(11,NULL)
(12,fopen(FILENAME, "r")
(13,pFile != NULL)
(14,dataLen = strlen(data)
(15,data = dataBuffer)
(16,RET)
(17,dataLen)
(18,pFile)
(19,if (fgets(data+dataLen, (int)
(20,if (100-dataLen > 1)
(21,if(staticTrue)
(22,strlen(data)
(23,\\\'\\\\0\\\')
(24,int)
(25,"r")
(26,1)
(27,"fgets()
(28,)
(29,)
(30,COMMAND_ARG2)
(31,data)
(32,dataLen)
(33,pFile)
(34,NULL)
(35,dataBuffer)
(36,staticTrue)
(37,if (pFile != NULL)
(38,data+dataLen)
(39,pFile = fopen(FILENAME, "r")
(40,dataLen)
(41,COMMAND_ARG3)
(42,dataBuffer)
(43,(int)
(44,COMMAND_ARG1)
(45,dataLen)
(46,pFile)
(47,100)
(48,fclose(pFile)
(49,COMMAND_INT)
(50,NULL)
(51,data)
(52,100-dataLen > 1)
(53,data)
(54,dataBuffer)
(55,FILENAME)
(56,data)
(57,)
(58,)
(59,_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(60,100)
(61,)
(62,printLine("fgets()
(63,data[dataLen] = \\\'\\\\0\\\')
(64,dataBuffer[100] = COMMAND_ARG2)
(65,fgets(data+dataLen, (int)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^