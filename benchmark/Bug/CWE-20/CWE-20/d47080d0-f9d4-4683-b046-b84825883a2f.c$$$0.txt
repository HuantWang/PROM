-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_07_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,64,65,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_07_bad(){    long * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_07_bad()
CWE415_Double_Free__malloc_free_long_07_bad
{    long * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(3,22,0)
(16,13,0)
(14,8,0)
(0,11,0)
(27,28,0)
(18,34,0)
(20,6,0)
(9,14,0)
(10,16,0)
(21,15,0)
(30,22,0)
(3,35,0)
(11,22,0)
(7,17,0)
(1,23,0)
(22,23,0)
(5,17,0)
(4,24,0)
(26,8,0)
(24,6,0)
(11,36,0)
(2,8,0)
(6,20,0)
(24,4,0)
(3,4,0)
(35,3,0)
(12,24,0)
(19,14,0)
(4,3,0)
(22,3,0)
(16,10,0)
(29,8,0)
(11,14,0)
(17,22,0)
(32,28,0)
(33,15,0)
(25,10,0)
(6,24,0)
(34,23,0)
(34,22,0)
(27,32,1)
(30,15,1)
(28,27,1)
(21,33,1)
(31,28,1)
(7,22,1)
(12,30,1)
(32,34,1)
(22,3,1)
(11,14,1)
(17,22,1)
(11,22,1)
(10,25,1)
(25,17,1)
(0,28,1)
(33,14,1)
(32,15,1)
(34,18,1)
(9,19,1)
(4,24,1)
(6,12,1)
(18,16,1)
(3,4,1)
(17,5,1)
(15,21,1)
(6,20,1)
(31,11,1)
(24,6,1)
(3,35,1)
(34,22,1)
(5,7,1)
(14,9,1)
(18,17,1)
(16,10,1)
(11,0,1)
(22,3,2)
(17,15,2)
(18,15,2)
(3,4,2)
(34,15,2)
(22,15,2)
(7,15,2)
(6,20,2)
(3,35,2)
(24,6,2)
(4,15,2)
(11,22,2)
(24,15,2)
(30,15,2)
(11,14,2)
(10,17,2)
(5,15,2)
(4,24,2)
(0,28,2)
(16,17,2)
(34,22,2)
(3,15,2)
(17,22,2)
(11,28,2)
(12,15,2)
(25,17,2)
(16,10,2)
(6,15,2)
-----------------------------------
(0,data)
(1,if (data == NULL)
(2,data)
(3,(long *)
(4,malloc(100*sizeof(long)
(5,NULL)
(6,sizeof(long)
(7,data)
(8,)
(9,NULL)
(10,-1)
(11,free(data)
(12,100)
(13,)
(14,data = NULL)
(15,staticFive==5)
(16,exit(-1)
(17,data == NULL)
(18,data)
(19,data)
(20,long)
(21,5)
(22,data = (long *)
(23,)
(24,100*sizeof(long)
(25,1)
(26,if(staticFive==5)
(27,5)
(28,staticFive==5)
(29,if(staticFive==5)
(30,data)
(31,RET)
(32,staticFive)
(33,staticFive)
(34,free(data)
(35,long *)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^