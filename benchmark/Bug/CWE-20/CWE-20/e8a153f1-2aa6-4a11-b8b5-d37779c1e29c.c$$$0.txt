-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (wchar_t *)malloc(10*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        {
            wchar_t source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
49,52
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
75,76
75,77
78,79
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
89,91
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,58,61,63,64,67,71,73,76,77,80,84,86,88,94,96,97,100,101,105,107,111,113
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
75,76
75,77
89,90
89,91
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad(){    wchar_t * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad
{    wchar_t * data;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(29,45,0)
(9,1,0)
(35,19,0)
(39,19,0)
(42,28,0)
(26,19,0)
(46,7,0)
(24,40,0)
(15,26,0)
(33,28,0)
(1,9,0)
(49,25,0)
(26,0,0)
(22,27,0)
(23,16,0)
(0,19,0)
(48,42,0)
(18,7,0)
(15,34,0)
(17,47,0)
(3,27,0)
(19,40,0)
(13,47,0)
(12,11,0)
(31,3,0)
(28,34,0)
(9,27,0)
(50,3,0)
(27,40,0)
(43,23,0)
(44,12,0)
(20,0,0)
(47,26,0)
(27,9,0)
(45,6,0)
(9,29,0)
(6,45,0)
(32,26,0)
(38,26,0)
(42,36,0)
(47,11,0)
(7,40,0)
(0,27,0)
(30,40,0)
(25,26,0)
(5,36,0)
(21,15,0)
(11,36,0)
(45,29,0)
(2,28,0)
(10,6,0)
(47,28,0)
(37,43,0)
(4,34,0)
(36,42,0)
(36,11,0)
(25,34,0)
(41,45,0)
(47,34,0)
(11,12,0)
(8,0,0)
(11,47,0)
(29,9,0)
(34,19,0)
(23,43,0)
(15,21,1)
(6,10,1)
(42,28,1)
(28,2,1)
(36,42,1)
(5,42,1)
(25,49,1)
(33,26,1)
(47,26,1)
(43,37,1)
(21,25,1)
(18,46,1)
(42,48,1)
(38,0,1)
(11,12,1)
(12,44,1)
(50,31,1)
(26,0,1)
(7,18,1)
(47,11,1)
(27,9,1)
(49,47,1)
(23,43,1)
(20,3,1)
(14,15,1)
(44,36,1)
(20,23,1)
(2,33,1)
(47,28,1)
(3,50,1)
(8,20,1)
(13,17,1)
(25,26,1)
(0,8,1)
(32,38,1)
(15,26,1)
(41,22,1)
(26,32,1)
(29,45,1)
(48,13,1)
(11,36,1)
(9,29,1)
(45,6,1)
(3,27,1)
(9,1,1)
(37,3,1)
(31,27,1)
(17,28,1)
(22,7,1)
(36,5,1)
(10,41,1)
(0,27,1)
(23,3,2)
(23,43,2)
(47,26,2)
(42,28,2)
(47,11,2)
(27,9,2)
(43,3,2)
(26,0,2)
(9,29,2)
(3,27,2)
(15,26,2)
(0,27,2)
(9,1,2)
(45,6,2)
(25,26,2)
(47,28,2)
(36,42,2)
(11,36,2)
(37,3,2)
(11,12,2)
(29,45,2)
-----------------------------------
(0,* dataCopy = data)
(1,wchar_t *)
(2,SRC_STRING)
(3,data == NULL)
(4,source)
(5,1)
(6,sizeof(wchar_t)
(7,data = NULL)
(8,data)
(9,(wchar_t *)
(10,wchar_t)
(11,(wcslen(source)
(12,sizeof(wchar_t)
(13,source)
(14,RET)
(15,free(data)
(16,)
(17,data)
(18,NULL)
(19,)
(20,dataCopy)
(21,data)
(22,data)
(23,exit(-1)
(24,if (data == NULL)
(25,printWLine(data)
(26,* data = dataCopy)
(27,data = (wchar_t *)
(28,source[10+1] = SRC_STRING)
(29,malloc(10*sizeof(wchar_t)
(30,data)
(31,data)
(32,dataCopy)
(33,source)
(34,)
(35,dataCopy)
(36,wcslen(source)
(37,1)
(38,data)
(39,data)
(40,)
(41,10)
(42,wcslen(source)
(43,-1)
(44,wchar_t)
(45,10*sizeof(wchar_t)
(46,data)
(47,memcpy(data, source, (wcslen(source)
(48,source)
(49,data)
(50,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^