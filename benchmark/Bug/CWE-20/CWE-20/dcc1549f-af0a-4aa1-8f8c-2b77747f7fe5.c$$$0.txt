-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_system_01_bad()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
119,120
121,122
124,125
124,126
125,126
126,127
126,128
127,128
130,131
131,132
131,133
132,133
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,120,122,123,128,129,133,134
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
117,118
117,119
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_system_01_bad(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__wchar_t_file_system_01_bad()
CWE78_OS_Command_Injection__wchar_t_file_system_01_bad
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(9,40,0)
(1,31,0)
(60,40,0)
(47,49,0)
(15,62,0)
(39,41,0)
(14,31,0)
(57,2,0)
(25,36,0)
(45,61,0)
(32,0,0)
(4,38,0)
(38,36,0)
(35,40,0)
(55,38,0)
(52,36,0)
(54,62,0)
(37,1,0)
(56,23,0)
(41,39,0)
(40,35,0)
(17,33,0)
(23,36,0)
(29,22,0)
(19,39,0)
(31,41,0)
(27,6,0)
(13,31,0)
(60,25,0)
(40,3,0)
(35,62,0)
(42,3,0)
(16,10,0)
(30,48,0)
(25,23,0)
(12,60,0)
(61,10,0)
(59,11,0)
(62,41,0)
(39,25,0)
(33,0,0)
(22,48,0)
(21,36,0)
(53,25,0)
(46,35,0)
(51,2,0)
(18,36,0)
(41,38,0)
(40,48,0)
(58,50,0)
(33,25,0)
(20,38,0)
(49,43,0)
(48,2,0)
(34,30,0)
(40,60,0)
(24,25,0)
(2,48,0)
(62,35,0)
(30,6,0)
(28,23,0)
(31,1,0)
(5,60,0)
(35,46,0)
(60,41,0)
(3,40,0)
(44,22,0)
(8,48,0)
(26,41,0)
(0,33,0)
(48,11,0)
(50,43,0)
(3,40,1)
(53,24,1)
(7,0,1)
(19,26,1)
(32,33,1)
(15,54,1)
(47,0,1)
(22,48,1)
(13,14,1)
(42,40,1)
(23,56,1)
(35,46,1)
(7,50,1)
(17,30,1)
(60,41,1)
(16,61,1)
(14,41,1)
(39,25,1)
(0,33,1)
(31,13,1)
(40,60,1)
(40,48,1)
(33,17,1)
(48,2,1)
(3,42,1)
(54,60,1)
(0,32,1)
(40,9,1)
(40,35,1)
(45,3,1)
(29,44,1)
(31,41,1)
(33,25,1)
(62,41,1)
(37,31,1)
(34,3,1)
(34,16,1)
(17,22,1)
(30,48,1)
(12,5,1)
(1,31,1)
(9,35,1)
(17,1,1)
(39,19,1)
(57,8,1)
(24,23,1)
(62,15,1)
(41,39,1)
(26,25,1)
(51,57,1)
(49,47,1)
(50,58,1)
(25,23,1)
(61,45,1)
(8,1,1)
(35,62,1)
(22,29,1)
(30,34,1)
(60,12,1)
(60,25,1)
(58,49,1)
(56,28,1)
(2,51,1)
(5,22,1)
(25,53,1)
(1,37,1)
(44,48,1)
(51,1,2)
(31,41,2)
(50,0,2)
(35,22,2)
(3,22,2)
(15,22,2)
(40,35,2)
(35,46,2)
(40,48,2)
(61,3,2)
(49,0,2)
(12,22,2)
(29,1,2)
(22,48,2)
(60,25,2)
(22,1,2)
(58,0,2)
(48,2,2)
(3,40,2)
(30,48,2)
(25,23,2)
(41,39,2)
(9,22,2)
(2,1,2)
(62,41,2)
(33,25,2)
(48,1,2)
(40,22,2)
(34,22,2)
(1,31,2)
(45,3,2)
(35,62,2)
(57,1,2)
(16,3,2)
(42,22,2)
(5,22,2)
(44,1,2)
(8,1,2)
(39,25,2)
(60,22,2)
(60,41,2)
(40,60,2)
(47,0,2)
(62,22,2)
(30,22,2)
(54,22,2)
(0,33,2)
-----------------------------------
(0,SYSTEM(data)
(1,100-dataLen > 1)
(2,fopen(FILENAME, "r")
(3,fgetws(data+dataLen, (int)
(4,dataLen)
(5,data)
(6,)
(7,RET)
(8,pFile)
(9,pFile)
(10,)
(11,)
(12,dataLen)
(13,dataLen)
(14,100)
(15,dataLen)
(16,\\\'\\\\0\\\')
(17,data)
(18,if (SYSTEM(data)
(19,data)
(20,if (100-dataLen > 1)
(21,data_buf)
(22,pFile != NULL)
(23,data_buf[100] = FULL_COMMAND)
(24,data)
(25,data = data_buf)
(26,dataLen)
(27,if (fgetws(data+dataLen, (int)
(28,data_buf)
(29,NULL)
(30,fclose(pFile)
(31,100-dataLen)
(32,0)
(33,SYSTEM(data)
(34,pFile)
(35,(int)
(36,)
(37,1)
(38,)
(39,wcslen(data)
(40,fgetws(data+dataLen, (int)
(41,dataLen = wcslen(data)
(42,NULL)
(43,)
(44,pFile)
(45,"fgetws()
(46,int)
(47,"command execution failed!")
(48,pFile = fopen(FILENAME, "r")
(49,printLine("command execution failed!")
(50,exit(1)
(51,"r")
(52,data)
(53,data_buf)
(54,100)
(55,pFile)
(56,FULL_COMMAND)
(57,FILENAME)
(58,1)
(59,if (pFile != NULL)
(60,data+dataLen)
(61,printLine("fgetws()
(62,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^