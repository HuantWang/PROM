-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
69,71
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,68,70,73,74,78,81,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(12,21,0)
(14,25,0)
(11,30,0)
(32,22,0)
(30,26,0)
(41,27,0)
(5,30,0)
(29,14,0)
(23,4,0)
(18,40,0)
(25,40,0)
(34,35,0)
(20,0,0)
(38,10,0)
(27,29,0)
(9,39,0)
(7,41,0)
(22,35,0)
(6,5,0)
(30,5,0)
(1,29,0)
(8,26,0)
(2,40,0)
(20,3,0)
(29,26,0)
(30,11,0)
(21,35,0)
(27,41,0)
(16,22,0)
(21,25,0)
(4,26,0)
(21,26,0)
(35,40,0)
(0,20,0)
(19,29,0)
(15,4,0)
(33,39,0)
(36,35,0)
(37,27,0)
(17,25,0)
(22,26,0)
(29,27,0)
(31,0,0)
(28,14,0)
(26,10,0)
(29,35,0)
(13,22,0)
(29,25,0)
(32,25,0)
(22,32,0)
(26,30,0)
(22,26,1)
(28,20,1)
(6,8,1)
(9,33,1)
(30,11,1)
(4,26,1)
(29,14,1)
(26,30,1)
(28,4,1)
(1,14,1)
(29,26,1)
(19,1,1)
(15,26,1)
(28,39,1)
(35,36,1)
(31,4,1)
(39,9,1)
(27,41,1)
(13,16,1)
(33,35,1)
(22,35,1)
(29,27,1)
(21,35,1)
(12,32,1)
(5,6,1)
(36,34,1)
(21,12,1)
(7,37,1)
(37,19,1)
(22,13,1)
(21,26,1)
(30,5,1)
(29,35,1)
(24,21,1)
(20,0,1)
(4,23,1)
(32,22,1)
(0,31,1)
(8,39,1)
(41,7,1)
(23,15,1)
(16,29,1)
(14,28,1)
(32,22,2)
(0,4,2)
(4,26,2)
(26,39,2)
(15,39,2)
(20,0,2)
(26,30,2)
(31,4,2)
(30,39,2)
(21,35,2)
(27,41,2)
(29,27,2)
(29,14,2)
(5,39,2)
(20,4,2)
(6,39,2)
(4,39,2)
(30,5,2)
(22,35,2)
(23,39,2)
(30,11,2)
(29,35,2)
(21,26,2)
(22,26,2)
(29,26,2)
(8,39,2)
-----------------------------------
(0,-1)
(1,data)
(2,data)
(3,)
(4,data == NULL)
(5,malloc(10)
(6,10)
(7,int)
(8,data)
(9,5)
(10,)
(11,int *)
(12,data)
(13,0)
(14,source[10] = {0})
(15,data)
(16,data)
(17,source)
(18,if(staticFive==5)
(19,source)
(20,exit(-1)
(21,free(data)
(22,data[0])
(23,NULL)
(24,RET)
(25,)
(26,data = (int *)
(27,10*sizeof(int)
(28,source)
(29,memcpy(data, source, 10*sizeof(int)
(30,(int *)
(31,1)
(32,printIntLine(data[0])
(33,staticFive)
(34,data)
(35,data = NULL)
(36,NULL)
(37,10)
(38,if (data == NULL)
(39,staticFive==5)
(40,)
(41,sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^