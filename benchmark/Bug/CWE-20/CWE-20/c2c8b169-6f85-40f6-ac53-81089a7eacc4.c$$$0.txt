-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41_badSink(wchar_t * data)
{
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
18,19
18,20
21,22
22,23
24,25
25,26
25,27
25,28
26,27
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
50,52
51,52
54,55
55,56
57,58
58,59
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,6,8,9,14,16,19,20,23,27,29,31,35,38,40,45,46,49,52,53,56,62,64,67,69,73,75,79,81
-----computeFrom-----
18,19
18,20
33,34
33,35
43,44
43,45
47,48
47,49
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41_badSink(wchar_t * data){    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41_badSink(wchar_t * data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41_badSink
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(35,4,0)
(13,20,0)
(28,14,0)
(21,27,0)
(19,24,0)
(15,20,0)
(4,5,0)
(35,7,0)
(22,15,0)
(16,7,0)
(1,11,0)
(34,11,0)
(31,4,0)
(8,27,0)
(32,27,0)
(15,21,0)
(23,5,0)
(27,21,0)
(17,11,0)
(6,14,0)
(15,14,0)
(12,20,0)
(27,24,0)
(27,14,0)
(2,24,0)
(33,15,0)
(4,11,0)
(36,13,0)
(18,28,0)
(11,9,0)
(5,24,0)
(29,35,0)
(7,35,0)
(30,35,0)
(25,14,0)
(24,11,0)
(7,14,0)
(21,3,0)
(10,11,0)
(12,11,0)
(13,11,0)
(0,12,0)
(5,4,0)
(16,14,1)
(29,16,1)
(8,32,1)
(27,24,1)
(22,7,1)
(30,29,1)
(15,20,1)
(24,2,1)
(5,23,1)
(12,0,1)
(13,20,1)
(6,4,1)
(0,13,1)
(7,35,1)
(13,36,1)
(14,25,1)
(33,22,1)
(27,8,1)
(28,14,1)
(36,7,1)
(18,21,1)
(31,24,1)
(15,33,1)
(23,31,1)
(12,20,1)
(4,5,1)
(15,14,1)
(21,27,1)
(7,14,1)
(35,4,1)
(28,18,1)
(32,15,1)
(25,6,1)
(35,30,1)
(27,14,1)
(26,12,1)
(2,19,1)
(16,28,1)
(5,24,1)
(5,24,2)
(15,20,2)
(13,20,2)
(28,7,2)
(32,7,2)
(35,4,2)
(35,7,2)
(27,24,2)
(21,27,2)
(21,7,2)
(27,7,2)
(28,14,2)
(33,7,2)
(12,20,2)
(18,7,2)
(7,35,2)
(8,7,2)
(15,14,2)
(7,14,2)
(30,7,2)
(29,7,2)
(22,7,2)
(27,14,2)
(4,5,2)
(15,7,2)
(16,7,2)
(7,7,2)
-----------------------------------
(0,data)
(1,sourceLen)
(2,SRC_STRING)
(3,)
(4,sourceLen = wcslen(source)
(5,wcslen(source)
(6,i)
(7,i < sourceLen + 1)
(8,i)
(9,)
(10,i)
(11,)
(12,free(data)
(13,printWLine(data)
(14,i = 0)
(15,data[i])
(16,i)
(17,source)
(18,i)
(19,source)
(20,wchar_t * data)
(21,data[i] = source[i])
(22,data)
(23,source)
(24,source[10+1] = SRC_STRING)
(25,0)
(26,RET)
(27,source[i])
(28,i++)
(29,sourceLen)
(30,1)
(31,sourceLen)
(32,source)
(33,i)
(34,for (i = 0; i < sourceLen + 1; i++)
(35,sourceLen + 1)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^