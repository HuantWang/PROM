-----label-----
1
-----code-----
static void badSink(size_t data)
{
    if(badStatic)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,7,9,13,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(size_t data){    if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
badSink(size_t data)
badSink
size_t data
size_t
size_t
data
data
{    if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
if(badStatic)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
badStatic
badStatic
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(10,12,0)
(28,24,0)
(0,12,0)
(12,36,0)
(15,33,0)
(20,32,0)
(7,12,0)
(18,12,0)
(2,19,0)
(21,33,0)
(27,26,0)
(6,12,0)
(0,36,0)
(8,36,0)
(18,36,0)
(10,9,0)
(4,17,0)
(5,19,0)
(19,5,0)
(32,33,0)
(33,16,0)
(15,10,0)
(39,24,0)
(6,36,0)
(9,10,0)
(10,15,0)
(24,12,0)
(22,1,0)
(23,6,0)
(11,0,0)
(29,34,0)
(17,16,0)
(30,18,0)
(25,26,0)
(31,18,0)
(5,13,0)
(17,4,0)
(40,29,0)
(33,32,0)
(3,4,0)
(33,15,0)
(12,10,0)
(37,17,0)
(26,35,0)
(18,31,1)
(14,6,1)
(19,2,1)
(4,3,1)
(31,30,1)
(0,11,1)
(11,18,1)
(0,12,1)
(33,16,1)
(32,20,1)
(5,19,1)
(40,17,1)
(18,12,1)
(30,5,1)
(33,32,1)
(2,24,1)
(17,4,1)
(12,10,1)
(28,12,1)
(30,24,1)
(10,15,1)
(20,21,1)
(37,38,1)
(10,9,1)
(39,28,1)
(17,16,1)
(14,38,1)
(24,12,1)
(6,12,1)
(29,40,1)
(23,0,1)
(14,29,1)
(7,17,1)
(24,39,1)
(15,33,1)
(21,7,1)
(3,37,1)
(6,23,1)
(15,17,2)
(11,17,2)
(10,9,2)
(18,12,2)
(24,17,2)
(2,24,2)
(20,17,2)
(0,12,2)
(17,38,2)
(10,15,2)
(19,24,2)
(21,17,2)
(6,17,2)
(18,17,2)
(23,17,2)
(31,17,2)
(33,16,2)
(30,17,2)
(37,38,2)
(12,10,2)
(24,12,2)
(5,19,2)
(29,17,2)
(3,38,2)
(17,4,2)
(6,12,2)
(33,17,2)
(5,24,2)
(7,17,2)
(39,17,2)
(17,16,2)
(40,17,2)
(28,17,2)
(4,38,2)
(33,32,2)
(32,17,2)
(12,17,2)
(10,17,2)
(0,17,2)
(15,33,2)
-----------------------------------
(0,printLine(myString)
(1,)
(2,1)
(3,HELLO_STRING)
(4,strlen(HELLO_STRING)
(5,exit(-1)
(6,free(myString)
(7,myString)
(8,if (myString == NULL)
(9,char *)
(10,(char *)
(11,myString)
(12,myString = (char *)
(13,)
(14,RET)
(15,malloc(data*sizeof(char)
(16,size_t data)
(17,data > strlen(HELLO_STRING)
(18,strcpy(myString, HELLO_STRING)
(19,-1)
(20,char)
(21,data)
(22,if(badStatic)
(23,myString)
(24,myString == NULL)
(25,if (data > strlen(HELLO_STRING)
(26,)
(27,myString)
(28,myString)
(29,printLine("Input is less than the length of the source string")
(30,myString)
(31,HELLO_STRING)
(32,sizeof(char)
(33,data*sizeof(char)
(34,)
(35,)
(36,)
(37,data)
(38,badStatic)
(39,NULL)
(40,"Input is less than the length of the source string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^