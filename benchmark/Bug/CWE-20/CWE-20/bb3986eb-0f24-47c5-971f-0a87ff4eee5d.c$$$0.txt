-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_bad()
{
    int64_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printLongLongLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
65,66
67,68
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
107,109
108,109
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,62,64,66,69,74,76,81,82,85,86,89,95,97,100,102,106,109,110,114,116
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
79,80
79,81
83,84
83,85
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_bad(){    int64_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06_bad
{    int64_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(13,31,0)
(21,56,0)
(1,35,0)
(44,41,0)
(18,2,0)
(51,24,0)
(48,45,0)
(35,30,0)
(43,2,0)
(10,25,0)
(47,25,0)
(42,38,0)
(16,53,0)
(50,6,0)
(31,52,0)
(7,43,0)
(42,26,0)
(40,34,0)
(55,52,0)
(35,49,0)
(1,8,0)
(17,45,0)
(4,53,0)
(3,53,0)
(49,43,0)
(56,45,0)
(47,9,0)
(31,1,0)
(2,43,0)
(31,24,0)
(46,56,0)
(34,24,0)
(11,16,0)
(49,35,0)
(32,34,0)
(16,1,0)
(14,54,0)
(39,41,0)
(34,4,0)
(26,42,0)
(19,24,0)
(27,21,0)
(35,1,0)
(53,56,0)
(26,52,0)
(15,8,0)
(25,47,0)
(23,26,0)
(5,1,0)
(54,52,0)
(6,1,0)
(28,31,0)
(20,53,0)
(24,45,0)
(34,1,0)
(12,55,0)
(36,54,0)
(30,35,0)
(16,24,0)
(43,49,0)
(26,21,0)
(0,52,0)
(29,52,0)
(22,6,0)
(4,34,0)
(31,42,0)
(37,26,0)
(26,21,1)
(31,1,1)
(54,36,1)
(22,50,1)
(6,1,1)
(33,16,1)
(25,10,1)
(35,49,1)
(11,4,1)
(18,7,1)
(13,28,1)
(21,27,1)
(36,14,1)
(27,41,1)
(50,1,1)
(14,55,1)
(4,34,1)
(1,35,1)
(37,31,1)
(27,6,1)
(23,37,1)
(0,21,1)
(12,42,1)
(34,1,1)
(29,0,1)
(5,41,1)
(35,30,1)
(26,23,1)
(14,52,1)
(32,54,1)
(31,52,1)
(55,52,1)
(26,52,1)
(24,51,1)
(31,13,1)
(28,54,1)
(54,52,1)
(27,47,1)
(40,32,1)
(55,12,1)
(49,43,1)
(10,6,1)
(2,18,1)
(39,44,1)
(51,19,1)
(7,5,1)
(16,24,1)
(44,24,1)
(34,24,1)
(31,24,1)
(42,26,1)
(41,39,1)
(16,1,1)
(52,29,1)
(6,22,1)
(47,25,1)
(43,2,1)
(34,40,1)
(16,11,1)
(13,54,2)
(54,54,2)
(26,54,2)
(12,54,2)
(31,24,2)
(4,34,2)
(35,49,2)
(23,54,2)
(55,52,2)
(2,41,2)
(31,52,2)
(6,41,2)
(36,54,2)
(42,54,2)
(50,41,2)
(42,26,2)
(1,41,2)
(26,52,2)
(28,54,2)
(54,52,2)
(31,1,2)
(1,35,2)
(26,21,2)
(55,54,2)
(43,41,2)
(16,24,2)
(47,25,2)
(47,6,2)
(43,2,2)
(37,54,2)
(22,41,2)
(25,6,2)
(49,41,2)
(31,54,2)
(14,54,2)
(5,41,2)
(6,1,2)
(49,43,2)
(35,41,2)
(18,41,2)
(10,6,2)
(7,41,2)
(34,1,2)
(16,1,2)
(34,24,2)
(35,30,2)
-----------------------------------
(0,i)
(1,data = (int64_t *)
(2,sizeof(int64_t)
(3,for (i = 0; i < 100; i++)
(4,printLongLongLine(data[0])
(5,data)
(6,data == NULL)
(7,50)
(8,)
(9,)
(10,1)
(11,data)
(12,i)
(13,i)
(14,i)
(15,if (data == NULL)
(16,free(data)
(17,if(STATIC_CONST_FIVE==5)
(18,int64_t)
(19,data)
(20,i)
(21,source[100] = {0})
(22,NULL)
(23,i)
(24,data = NULL)
(25,-1)
(26,source[i])
(27,source)
(28,data)
(29,0)
(30,int64_t *)
(31,data[i])
(32,data)
(33,RET)
(34,data[0])
(35,(int64_t *)
(36,100)
(37,source)
(38,)
(39,5)
(40,0)
(41,STATIC_CONST_FIVE==5)
(42,data[i] = source[i])
(43,50*sizeof(int64_t)
(44,STATIC_CONST_FIVE)
(45,)
(46,source)
(47,exit(-1)
(48,data)
(49,malloc(50*sizeof(int64_t)
(50,data)
(51,NULL)
(52,i = 0)
(53,)
(54,i < 100)
(55,i++)
(56,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^