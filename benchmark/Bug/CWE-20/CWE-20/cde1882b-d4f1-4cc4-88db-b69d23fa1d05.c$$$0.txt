-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
69,71
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,68,70,73,74,78,81,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(35,3,0)
(32,6,0)
(7,32,0)
(33,37,0)
(7,13,0)
(5,18,0)
(21,13,0)
(30,12,0)
(41,7,0)
(33,23,0)
(2,6,0)
(12,9,0)
(22,6,0)
(9,14,0)
(34,33,0)
(4,21,0)
(0,13,0)
(33,13,0)
(16,21,0)
(1,12,0)
(11,24,0)
(28,11,0)
(37,33,0)
(17,29,0)
(31,3,0)
(38,21,0)
(25,14,0)
(19,36,0)
(37,36,0)
(29,5,0)
(7,9,0)
(39,32,0)
(23,32,0)
(5,9,0)
(21,9,0)
(9,5,0)
(36,37,0)
(40,23,0)
(33,9,0)
(18,5,0)
(13,6,0)
(5,29,0)
(26,33,0)
(15,37,0)
(16,32,0)
(33,32,0)
(21,16,0)
(27,13,0)
(10,9,0)
(11,28,0)
(8,28,0)
(40,3,1)
(21,9,1)
(38,33,1)
(7,41,1)
(3,31,1)
(26,34,1)
(15,26,1)
(41,16,1)
(23,40,1)
(0,27,1)
(30,1,1)
(31,35,1)
(1,9,1)
(10,3,1)
(7,9,1)
(29,17,1)
(33,23,1)
(37,36,1)
(40,11,1)
(19,15,1)
(5,18,1)
(17,10,1)
(7,13,1)
(5,29,1)
(12,9,1)
(34,23,1)
(16,21,1)
(11,28,1)
(13,0,1)
(8,12,1)
(21,13,1)
(33,13,1)
(33,9,1)
(12,30,1)
(20,7,1)
(21,4,1)
(4,38,1)
(33,37,1)
(35,13,1)
(28,8,1)
(9,5,1)
(40,12,1)
(36,19,1)
(30,3,2)
(17,3,2)
(29,3,2)
(16,21,2)
(7,13,2)
(28,12,2)
(37,36,2)
(21,13,2)
(7,9,2)
(5,18,2)
(11,28,2)
(8,12,2)
(5,29,2)
(12,3,2)
(11,12,2)
(21,9,2)
(12,9,2)
(33,37,2)
(9,3,2)
(33,9,2)
(33,23,2)
(5,3,2)
(33,13,2)
(10,3,2)
(1,3,2)
(9,5,2)
-----------------------------------
(0,NULL)
(1,data)
(2,data)
(3,staticFive==5)
(4,0)
(5,(int *)
(6,)
(7,free(data)
(8,1)
(9,data = (int *)
(10,data)
(11,exit(-1)
(12,data == NULL)
(13,data = NULL)
(14,)
(15,10)
(16,printIntLine(data[0])
(17,10)
(18,int *)
(19,int)
(20,RET)
(21,data[0])
(22,if(staticFive==5)
(23,source[10] = {0})
(24,)
(25,if (data == NULL)
(26,source)
(27,data)
(28,-1)
(29,malloc(10)
(30,NULL)
(31,5)
(32,)
(33,memmove(data, source, 10*sizeof(int)
(34,data)
(35,staticFive)
(36,sizeof(int)
(37,10*sizeof(int)
(38,data)
(39,source)
(40,source)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^