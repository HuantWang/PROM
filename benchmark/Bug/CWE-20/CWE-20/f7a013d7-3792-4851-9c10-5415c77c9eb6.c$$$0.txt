-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_06_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_06_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_06_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_06_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(20,24,0)
(8,25,0)
(2,18,0)
(16,27,0)
(24,4,0)
(6,2,0)
(11,19,0)
(23,14,0)
(9,19,0)
(17,26,0)
(4,24,0)
(13,19,0)
(24,2,0)
(3,2,0)
(4,16,0)
(15,5,0)
(14,16,0)
(26,19,0)
(0,4,0)
(22,26,0)
(14,4,0)
(24,26,0)
(10,25,0)
(7,5,0)
(12,16,0)
(1,24,0)
(24,26,1)
(1,20,1)
(4,24,1)
(7,15,1)
(3,6,1)
(26,17,1)
(24,2,1)
(6,5,1)
(10,2,1)
(2,3,1)
(0,25,1)
(24,1,1)
(23,4,1)
(21,25,1)
(15,26,1)
(5,7,1)
(10,5,1)
(8,10,1)
(17,22,1)
(25,8,1)
(14,23,1)
(14,4,1)
(21,14,1)
(20,0,1)
(23,25,2)
(4,25,2)
(1,25,2)
(20,25,2)
(4,24,2)
(24,25,2)
(14,4,2)
(3,5,2)
(0,25,2)
(2,5,2)
(24,2,2)
(24,26,2)
(6,5,2)
(14,25,2)
-----------------------------------
(0,result)
(1,data)
(2,data = UINT_MAX)
(3,UINT_MAX)
(4,result = data * data)
(5,STATIC_CONST_FIVE==5)
(6,data)
(7,5)
(8,5)
(9,if(STATIC_CONST_FIVE==5)
(10,STATIC_CONST_FIVE)
(11,if(STATIC_CONST_FIVE==5)
(12,result)
(13,data)
(14,printUnsignedLine(result)
(15,STATIC_CONST_FIVE)
(16,)
(17,0)
(18,)
(19,)
(20,data)
(21,RET)
(22,data)
(23,result)
(24,data * data)
(25,STATIC_CONST_FIVE==5)
(26,data = 0)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^