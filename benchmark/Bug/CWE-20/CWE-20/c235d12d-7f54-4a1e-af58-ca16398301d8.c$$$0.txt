-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03_bad()
{
    if(5==5)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printWLine((wchar_t *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid->charFirst);
            printWLine((wchar_t *)structCharVoid->voidSecond);
            free(structCharVoid);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
53,54
53,55
54,55
54,56
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
73,74
74,75
74,76
74,77
74,78
75,76
77,78
77,79
78,79
81,82
83,84
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
97,98
97,99
98,99
99,100
100,101
100,102
101,102
104,105
105,106
105,107
110,111
111,112
111,113
112,113
114,115
114,116
115,116
115,117
117,118
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
127,129
128,129
128,130
130,131
132,133
132,134
133,134
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,9,15,17,18,23,25,28,32,33,37,39,44,46,51,52,55,57,59,63,66,68,71,72,76,79,80,82,87,93,94,102,103,106,107,108,109,113,116,118,121,122,126,129,131,134,135,139,141
-----computeFrom-----
7,8
7,9
35,36
35,37
48,49
48,50
89,90
89,91
95,96
95,97
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03_bad(){    if(5==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03_bad
{    if(5==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }}
if(5==5)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
5==5
5
5
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printWLine((wchar_t *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid->charFirst);            printWLine((wchar_t *)structCharVoid->voidSecond);            free(structCharVoid);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memcpy
memcpy
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid->charFirst)/sizeof(wchar_t))
sizeof(structCharVoid->charFirst)/sizeof(wchar_t)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid->charFirst);
printWLine((wchar_t *)structCharVoid->charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid->charFirst
wchar_t *
wchar_t
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid->voidSecond);
printWLine((wchar_t *)structCharVoid->voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid->voidSecond
wchar_t *
wchar_t
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
free(structCharVoid);
free(structCharVoid)
free
free
structCharVoid
structCharVoid
-----joern-----
(40,36,0)
(15,28,0)
(7,42,0)
(0,28,0)
(53,18,0)
(23,20,0)
(1,20,0)
(5,7,0)
(46,3,0)
(4,16,0)
(7,5,0)
(57,3,0)
(50,35,0)
(59,51,0)
(5,39,0)
(6,51,0)
(5,41,0)
(19,41,0)
(8,42,0)
(37,28,0)
(41,5,0)
(15,2,0)
(49,28,0)
(16,31,0)
(43,15,0)
(27,0,0)
(4,2,0)
(13,42,0)
(23,8,0)
(38,15,0)
(36,42,0)
(33,22,0)
(49,2,0)
(26,0,0)
(35,44,0)
(60,28,0)
(31,16,0)
(8,0,0)
(4,28,0)
(55,4,0)
(9,49,0)
(52,57,0)
(3,46,0)
(31,42,0)
(2,30,0)
(58,53,0)
(56,60,0)
(30,2,0)
(45,16,0)
(3,57,0)
(42,24,0)
(44,35,0)
(57,52,0)
(41,28,0)
(15,53,0)
(14,42,0)
(28,3,0)
(11,52,0)
(20,28,0)
(3,28,0)
(48,42,0)
(17,41,0)
(18,53,0)
(25,49,0)
(0,8,0)
(44,21,0)
(16,4,0)
(32,60,0)
(16,45,0)
(10,8,0)
(53,58,0)
(28,42,0)
(36,28,0)
(18,42,0)
(34,30,0)
(47,4,0)
(20,23,0)
(30,12,0)
(2,42,0)
(8,23,0)
(12,30,0)
(53,15,0)
(39,5,0)
(56,28,1)
(4,2,1)
(26,31,1)
(5,39,1)
(4,28,1)
(16,45,1)
(20,28,1)
(23,20,1)
(9,25,1)
(34,49,1)
(2,30,1)
(8,23,1)
(13,8,1)
(50,60,1)
(17,13,1)
(29,51,1)
(27,26,1)
(60,28,1)
(5,41,1)
(43,38,1)
(0,27,1)
(37,51,1)
(30,12,1)
(44,35,1)
(4,47,1)
(20,1,1)
(25,44,1)
(0,28,1)
(11,37,1)
(18,53,1)
(36,40,1)
(49,28,1)
(15,2,1)
(29,36,1)
(31,16,1)
(15,43,1)
(10,0,1)
(51,6,1)
(3,57,1)
(47,55,1)
(30,34,1)
(6,59,1)
(53,15,1)
(32,56,1)
(41,28,1)
(1,10,1)
(49,9,1)
(3,46,1)
(41,19,1)
(8,0,1)
(7,5,1)
(38,7,1)
(28,3,1)
(53,58,1)
(16,4,1)
(36,28,1)
(15,28,1)
(25,60,1)
(35,50,1)
(60,32,1)
(19,17,1)
(40,18,1)
(52,11,1)
(57,52,1)
(55,2,1)
(30,51,2)
(23,20,2)
(49,28,2)
(31,16,2)
(7,5,2)
(47,51,2)
(50,60,2)
(4,2,2)
(2,51,2)
(20,28,2)
(57,51,2)
(13,51,2)
(57,52,2)
(5,41,2)
(23,51,2)
(32,51,2)
(0,28,2)
(5,39,2)
(18,53,2)
(1,51,2)
(15,2,2)
(3,46,2)
(53,15,2)
(25,51,2)
(15,51,2)
(60,51,2)
(41,51,2)
(17,51,2)
(37,51,2)
(31,51,2)
(55,51,2)
(8,51,2)
(9,51,2)
(5,51,2)
(43,51,2)
(10,51,2)
(56,51,2)
(8,23,2)
(16,51,2)
(53,51,2)
(20,51,2)
(2,30,2)
(11,51,2)
(8,0,2)
(16,45,2)
(28,51,2)
(4,51,2)
(60,28,2)
(35,60,2)
(52,51,2)
(40,51,2)
(16,4,2)
(30,12,2)
(41,28,2)
(18,51,2)
(3,57,2)
(36,51,2)
(4,28,2)
(19,51,2)
(34,51,2)
(26,51,2)
(3,51,2)
(44,60,2)
(28,3,2)
(53,58,2)
(36,28,2)
(7,51,2)
(49,51,2)
(15,28,2)
(44,35,2)
(27,51,2)
(38,51,2)
(0,51,2)
-----------------------------------
(0,structCharVoid->charFirst)
(1,structCharVoid)
(2,structCharVoid->voidSecond = (void *)
(3,(charVoid *)
(4,structCharVoid->voidSecond)
(5,(wchar_t *)
(6,5)
(7,printWLine((wchar_t *)
(8,memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(9,voidSecond)
(10,SRC_STR)
(11,charVoid)
(12,void *)
(13,'\\\\0')
(14,structCharVoid)
(15,structCharVoid->voidSecond)
(16,(wchar_t *)
(17,structCharVoid)
(18,printWLine((wchar_t *)
(19,charFirst)
(20,*structCharVoid)
(21,)
(22,)
(23,sizeof(*structCharVoid)
(24,)
(25,structCharVoid)
(26,structCharVoid)
(27,charFirst)
(28,* structCharVoid = (charVoid *)
(29,RET)
(30,(void *)
(31,printWLine((wchar_t *)
(32,NULL)
(33,if(5==5)
(34,SRC_STR)
(35,-1)
(36,free(structCharVoid)
(37,structCharVoid)
(38,structCharVoid)
(39,wchar_t *)
(40,structCharVoid)
(41,structCharVoid->charFirst)
(42,)
(43,voidSecond)
(44,exit(-1)
(45,wchar_t *)
(46,charVoid *)
(47,voidSecond)
(48,if (structCharVoid == NULL)
(49,structCharVoid->voidSecond)
(50,1)
(51,5==5)
(52,sizeof(charVoid)
(53,(wchar_t *)
(54,\'\\\\0\')
(55,structCharVoid)
(56,structCharVoid)
(57,malloc(sizeof(charVoid)
(58,wchar_t *)
(59,5)
(60,structCharVoid == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^