-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
        strcat(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,93,95
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strcat(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcat(dest, data);
strcat(dest, data)
strcat
strcat
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(42,45,0)
(12,45,0)
(47,35,0)
(43,3,0)
(1,28,0)
(3,43,0)
(24,3,0)
(26,43,0)
(3,9,0)
(44,45,0)
(46,44,0)
(22,36,0)
(38,15,0)
(1,32,0)
(35,11,0)
(10,32,0)
(1,39,0)
(7,33,0)
(6,32,0)
(19,21,0)
(32,17,0)
(25,42,0)
(15,32,0)
(0,17,0)
(33,36,0)
(42,32,0)
(19,32,0)
(4,23,0)
(30,10,0)
(12,32,0)
(39,1,0)
(2,39,0)
(32,19,0)
(5,33,0)
(23,28,0)
(18,45,0)
(27,39,0)
(9,3,0)
(41,10,0)
(36,32,0)
(36,23,0)
(21,19,0)
(40,17,0)
(9,19,0)
(11,35,0)
(11,8,0)
(42,44,0)
(34,1,0)
(16,44,0)
(36,33,0)
(15,45,0)
(37,17,0)
(20,1,0)
(45,17,0)
(29,12,0)
(31,42,0)
(19,9,0)
(14,11,1)
(4,36,1)
(34,14,1)
(46,14,1)
(36,33,1)
(24,6,1)
(47,10,1)
(27,2,1)
(36,32,1)
(31,44,1)
(30,41,1)
(44,16,1)
(2,20,1)
(39,27,1)
(46,23,1)
(12,29,1)
(20,34,1)
(32,19,1)
(9,3,1)
(1,32,1)
(5,7,1)
(42,44,1)
(43,26,1)
(15,32,1)
(12,32,1)
(7,22,1)
(42,32,1)
(23,4,1)
(35,47,1)
(38,12,1)
(25,31,1)
(16,46,1)
(13,15,1)
(33,5,1)
(11,35,1)
(15,38,1)
(41,32,1)
(19,21,1)
(1,39,1)
(10,30,1)
(3,43,1)
(19,9,1)
(22,1,1)
(10,32,1)
(42,25,1)
(29,42,1)
(14,10,1)
(26,24,1)
(42,32,2)
(35,10,2)
(22,14,2)
(2,14,2)
(39,14,2)
(20,14,2)
(11,35,2)
(36,33,2)
(36,32,2)
(23,14,2)
(19,21,2)
(5,14,2)
(36,14,2)
(47,10,2)
(1,14,2)
(12,32,2)
(33,14,2)
(3,43,2)
(9,3,2)
(34,14,2)
(32,19,2)
(11,10,2)
(27,14,2)
(7,14,2)
(19,9,2)
(1,39,2)
(10,32,2)
(15,32,2)
(1,32,2)
(42,44,2)
(4,14,2)
-----------------------------------
(0,if (data == NULL)
(1,memset(data, \\\'A\\\', 100-1)
(2,100)
(3,100*sizeof(char)
(4,\\\'\\\\0\\\')
(5,1)
(6,data)
(7,100)
(8,)
(9,malloc(100*sizeof(char)
(10,data == NULL)
(11,exit(-1)
(12,printLine(data)
(13,RET)
(14,staticTrue)
(15,free(data)
(16,"")
(17,)
(18,dest)
(19,(char *)
(20,\\\'A\\\')
(21,char *)
(22,data)
(23,data[100-1] = \\\'\\\\0\\\')
(24,100)
(25,data)
(26,char)
(27,1)
(28,)
(29,data)
(30,NULL)
(31,dest)
(32,data = (char *)
(33,100-1)
(34,data)
(35,-1)
(36,data[100-1])
(37,if(staticTrue)
(38,data)
(39,100-1)
(40,data)
(41,data)
(42,strcat(dest, data)
(43,sizeof(char)
(44,dest[50] = "")
(45,)
(46,dest)
(47,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^