-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char * data = *dataPtr1;
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char dest[50] = "";
            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
            strcat(dest, data);
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
39,40
39,41
41,42
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
83,84
83,85
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
117,118
117,119
117,120
119,120
121,122
123,124
124,125
124,126
124,127
125,126
127,128
129,130
131,132
132,133
132,134
133,134
135,136
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,40,42,45,47,50,51,55,57,62,64,68,70,71,75,79,81,82,84,85,90,92,93,94,99,101,105,107,108,112,116,118,120,122,126,128,130,134,136,140,142
-----computeFrom-----
35,36
35,37
46,47
46,48
53,54
53,55
83,84
83,85
87,88
87,89
91,92
91,93
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    {        char * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char * data = *dataPtr1;        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char dest[50] = "";            /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/            strcat(dest, data);            printLine(data);            free(data);        }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcat(dest, data);
strcat(dest, data)
strcat
strcat
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(41,2,0)
(24,0,0)
(13,51,0)
(38,47,0)
(42,53,0)
(40,20,0)
(4,5,0)
(21,14,0)
(7,65,0)
(12,48,0)
(60,44,0)
(10,45,0)
(20,65,0)
(37,59,0)
(17,8,0)
(35,47,0)
(65,7,0)
(25,14,0)
(36,44,0)
(35,65,0)
(15,45,0)
(0,10,0)
(7,4,0)
(8,59,0)
(51,22,0)
(31,5,0)
(70,56,0)
(53,42,0)
(10,0,0)
(60,10,0)
(11,59,0)
(65,47,0)
(49,45,0)
(6,44,0)
(14,25,0)
(23,38,0)
(48,41,0)
(53,65,0)
(58,45,0)
(22,2,0)
(16,10,0)
(53,38,0)
(67,28,0)
(44,60,0)
(18,36,0)
(41,48,0)
(25,69,0)
(43,56,0)
(30,46,0)
(56,8,0)
(46,35,0)
(66,65,0)
(47,45,0)
(68,42,0)
(20,47,0)
(59,49,0)
(2,22,0)
(52,2,0)
(26,60,0)
(55,45,0)
(63,47,0)
(34,35,0)
(28,48,0)
(3,4,0)
(57,45,0)
(32,53,0)
(56,44,0)
(33,46,0)
(2,52,0)
(54,51,0)
(62,19,0)
(39,49,0)
(44,49,0)
(22,45,0)
(48,28,0)
(5,4,0)
(9,22,0)
(1,8,0)
(61,11,0)
(2,41,0)
(35,46,0)
(19,20,0)
(11,44,0)
(50,42,0)
(64,35,0)
(19,4,0)
(36,59,0)
(4,45,0)
(27,7,0)
(56,59,0)
(53,65,1)
(17,1,1)
(38,23,1)
(2,41,1)
(25,14,1)
(64,65,1)
(16,4,1)
(40,19,1)
(2,52,1)
(65,7,1)
(61,36,1)
(29,11,1)
(35,46,1)
(4,5,1)
(36,18,1)
(19,4,1)
(27,66,1)
(44,60,1)
(70,43,1)
(66,25,1)
(33,30,1)
(62,38,1)
(6,20,1)
(67,12,1)
(31,3,1)
(19,62,1)
(50,32,1)
(7,27,1)
(5,31,1)
(42,68,1)
(34,64,1)
(56,70,1)
(32,35,1)
(54,13,1)
(24,16,1)
(11,44,1)
(21,51,1)
(43,8,1)
(8,17,1)
(35,65,1)
(20,65,1)
(36,44,1)
(18,56,1)
(48,28,1)
(0,24,1)
(30,34,1)
(20,40,1)
(1,44,1)
(51,54,1)
(53,42,1)
(68,50,1)
(14,21,1)
(41,48,1)
(51,22,1)
(12,9,1)
(22,2,1)
(28,67,1)
(66,51,1)
(60,10,1)
(60,26,1)
(26,6,1)
(10,0,1)
(46,33,1)
(11,61,1)
(7,4,1)
(56,8,1)
(56,44,1)
(13,22,1)
(23,53,1)
(9,10,1)
(10,0,2)
(35,65,2)
(25,14,2)
(14,51,2)
(48,28,2)
(35,46,2)
(53,65,2)
(60,10,2)
(19,4,2)
(51,22,2)
(44,60,2)
(4,5,2)
(11,44,2)
(56,44,2)
(22,2,2)
(2,41,2)
(36,44,2)
(21,51,2)
(20,65,2)
(53,42,2)
(7,4,2)
(2,52,2)
(25,51,2)
(56,8,2)
(65,7,2)
(41,48,2)
-----------------------------------
(0,&data)
(1,dest)
(2,(char *)
(3,dataPtr1)
(4,* *dataPtr1 = &data)
(5,&data)
(6,data)
(7,*dataPtr1)
(8,dest[50] = "")
(9,data)
(10,* *dataPtr2 = &data)
(11,free(data)
(12,100)
(13,data)
(14,-1)
(15,data)
(16,dataPtr2)
(17,"")
(18,data)
(19,*dataPtr1)
(20,*dataPtr1 = data)
(21,1)
(22,data = (char *)
(23,\\\'\\\\0\\\')
(24,data)
(25,exit(-1)
(26,dataPtr2)
(27,dataPtr1)
(28,sizeof(char)
(29,RET)
(30,100)
(31,data)
(32,data)
(33,1)
(34,\\\'A\\\')
(35,memset(data, \\\'A\\\', 100-1)
(36,printLine(data)
(37,dest)
(38,data[100-1] = \\\'\\\\0\\\')
(39,data)
(40,data)
(41,malloc(100*sizeof(char)
(42,100-1)
(43,dest)
(44,* data = *dataPtr2)
(45,)
(46,100-1)
(47,)
(48,100*sizeof(char)
(49,)
(50,100)
(51,data == NULL)
(52,char *)
(53,data[100-1])
(54,NULL)
(55,dataPtr1)
(56,strcat(dest, data)
(57,dataPtr2)
(58,if (data == NULL)
(59,)
(60,*dataPtr2)
(61,data)
(62,dataPtr1)
(63,data)
(64,data)
(65,* data = *dataPtr1)
(66,data)
(67,char)
(68,1)
(69,)
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^