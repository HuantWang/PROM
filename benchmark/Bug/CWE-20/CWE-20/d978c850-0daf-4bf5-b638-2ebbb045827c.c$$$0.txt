-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    goto source;
source:
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
45,46
45,47
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,46,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,93,95
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    goto source;source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
goto source;
source
source:    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1);
source
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(36,46,0)
(38,44,0)
(13,20,0)
(26,43,0)
(6,14,0)
(14,7,0)
(14,43,0)
(1,21,0)
(10,43,0)
(28,31,0)
(22,43,0)
(1,15,0)
(30,35,0)
(37,35,0)
(21,1,0)
(25,15,0)
(9,18,0)
(43,35,0)
(4,10,0)
(7,35,0)
(21,22,0)
(5,35,0)
(15,1,0)
(3,7,0)
(44,7,0)
(39,44,0)
(19,7,0)
(32,2,0)
(11,3,0)
(42,46,0)
(27,35,0)
(24,31,0)
(23,9,0)
(22,21,0)
(2,20,0)
(20,2,0)
(2,43,0)
(33,42,0)
(45,20,0)
(18,9,0)
(34,35,0)
(3,43,0)
(12,2,0)
(46,5,0)
(18,17,0)
(2,35,0)
(16,1,0)
(29,10,0)
(44,31,0)
(46,43,0)
(46,42,0)
(0,42,0)
(43,22,0)
(31,7,0)
(8,5,0)
(44,43,0)
(40,22,0)
(22,40,0)
(32,12,1)
(33,0,1)
(34,18,1)
(4,43,1)
(44,38,1)
(21,1,1)
(5,8,1)
(9,23,1)
(2,20,1)
(41,3,1)
(31,24,1)
(6,44,1)
(22,40,1)
(16,26,1)
(42,33,1)
(24,28,1)
(1,15,1)
(12,34,1)
(0,36,1)
(39,31,1)
(14,43,1)
(34,10,1)
(38,39,1)
(2,43,1)
(29,4,1)
(10,43,1)
(23,10,1)
(8,46,1)
(15,25,1)
(3,43,1)
(3,11,1)
(46,43,1)
(45,13,1)
(22,21,1)
(44,43,1)
(44,31,1)
(18,9,1)
(36,2,1)
(46,42,1)
(10,29,1)
(43,22,1)
(13,32,1)
(14,6,1)
(28,5,1)
(20,45,1)
(25,16,1)
(11,14,1)
(9,10,2)
(2,43,2)
(46,42,2)
(22,40,2)
(18,10,2)
(18,9,2)
(46,43,2)
(1,15,2)
(23,10,2)
(22,21,2)
(44,31,2)
(14,43,2)
(43,22,2)
(21,1,2)
(3,43,2)
(44,43,2)
(10,43,2)
(2,20,2)
-----------------------------------
(0,100)
(1,100*sizeof(char)
(2,memset(data, \\\'A\\\', 100-1)
(3,free(data)
(4,data)
(5,data[100-1] = \\\'\\\\0\\\')
(6,data)
(7,)
(8,\\\'\\\\0\\\')
(9,-1)
(10,data == NULL)
(11,data)
(12,data)
(13,100)
(14,printLine(data)
(15,sizeof(char)
(16,100)
(17,)
(18,exit(-1)
(19,dest)
(20,100-1)
(21,malloc(100*sizeof(char)
(22,(char *)
(23,1)
(24,"")
(25,char)
(26,data)
(27,if (data == NULL)
(28,dest)
(29,NULL)
(30,data)
(31,dest[50] = "")
(32,\\\'A\\\')
(33,1)
(34,goto source;)
(35,)
(36,data)
(37,source:)
(38,data)
(39,dest)
(40,char *)
(41,RET)
(42,100-1)
(43,data = (char *)
(44,strcpy(dest, data)
(45,1)
(46,data[100-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^