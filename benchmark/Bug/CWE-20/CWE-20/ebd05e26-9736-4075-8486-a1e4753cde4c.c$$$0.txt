-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strcat(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,98,100,104,106
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(48,21,0)
(20,30,0)
(36,48,0)
(49,7,0)
(14,34,0)
(7,49,0)
(49,19,0)
(39,27,0)
(23,31,0)
(15,4,0)
(30,20,0)
(40,4,0)
(12,34,0)
(13,17,0)
(22,34,0)
(33,4,0)
(21,42,0)
(48,45,0)
(18,0,0)
(20,11,0)
(34,22,0)
(24,42,0)
(1,45,0)
(26,27,0)
(25,35,0)
(9,26,0)
(11,20,0)
(51,20,0)
(23,30,0)
(22,17,0)
(3,35,0)
(52,26,0)
(0,4,0)
(55,21,0)
(44,11,0)
(30,23,0)
(33,35,0)
(4,27,0)
(0,21,0)
(6,33,0)
(3,21,0)
(23,4,0)
(35,42,0)
(28,3,0)
(3,4,0)
(16,22,0)
(0,35,0)
(43,15,0)
(32,15,0)
(4,23,0)
(46,7,0)
(8,52,0)
(10,52,0)
(52,4,0)
(31,23,0)
(33,21,0)
(38,35,0)
(2,0,0)
(17,21,0)
(29,48,0)
(37,42,0)
(45,48,0)
(41,45,0)
(15,32,1)
(15,4,1)
(45,41,1)
(13,22,1)
(3,28,1)
(0,4,1)
(20,11,1)
(9,52,1)
(1,36,1)
(7,46,1)
(22,34,1)
(17,13,1)
(51,40,1)
(10,49,1)
(33,4,1)
(11,44,1)
(36,29,1)
(46,15,1)
(32,43,1)
(25,38,1)
(23,31,1)
(35,25,1)
(12,16,1)
(52,4,1)
(49,7,1)
(43,4,1)
(29,5,1)
(8,10,1)
(0,35,1)
(30,20,1)
(40,5,1)
(14,12,1)
(29,26,1)
(3,35,1)
(18,2,1)
(6,0,1)
(41,1,1)
(26,9,1)
(3,4,1)
(54,3,1)
(33,6,1)
(48,45,1)
(16,48,1)
(44,51,1)
(2,17,1)
(28,33,1)
(52,8,1)
(0,18,1)
(10,15,1)
(5,35,1)
(4,23,1)
(33,35,1)
(34,14,1)
(23,30,1)
(23,5,2)
(40,5,2)
(33,4,2)
(15,5,2)
(48,45,2)
(51,5,2)
(44,5,2)
(9,5,2)
(52,5,2)
(43,5,2)
(8,5,2)
(3,35,2)
(46,15,2)
(30,20,2)
(10,5,2)
(3,4,2)
(33,35,2)
(15,4,2)
(52,4,2)
(20,5,2)
(4,5,2)
(7,15,2)
(20,11,2)
(23,30,2)
(49,7,2)
(11,5,2)
(22,34,2)
(32,5,2)
(30,5,2)
(23,31,2)
(26,5,2)
(0,35,2)
(0,4,2)
(4,23,2)
(49,15,2)
-----------------------------------
(0,strcat(data, source)
(1,100)
(2,data)
(3,free(data)
(4,data = (char *)
(5,STATIC_CONST_TRUE)
(6,data)
(7,-1)
(8,0)
(9,\'\\\\0\')
(10,data)
(11,sizeof(char)
(12,100)
(13,'\\\\0')
(14,1)
(15,data == NULL)
(16,source)
(17,source[100-1] = '\\\\0')
(18,source)
(19,)
(20,50*sizeof(char)
(21,)
(22,source[100-1])
(23,(char *)
(24,data)
(25,NULL)
(26,data[0] = '\\\\0')
(27,)
(28,data)
(29,source)
(30,malloc(50*sizeof(char)
(31,char *)
(32,NULL)
(33,printLine(data)
(34,100-1)
(35,data = NULL)
(36,'C')
(37,if(STATIC_CONST_TRUE)
(38,data)
(39,if (data == NULL)
(40,data)
(41,1)
(42,)
(43,data)
(44,char)
(45,100-1)
(46,1)
(47,data[0] = \'\\\\0\')
(48,memset(source, \'C\', 100-1)
(49,exit(-1)
(50,memset(source, 'C', 100-1)
(51,50)
(52,data[0])
(53,'\\\\0')
(54,RET)
(55,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^