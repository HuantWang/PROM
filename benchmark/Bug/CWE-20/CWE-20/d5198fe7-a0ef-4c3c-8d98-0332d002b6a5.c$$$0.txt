-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int_31_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    {
        int * dataCopy = data;
        int * data = dataCopy;
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
56,57
57,58
57,59
59,60
59,61
59,62
62,63
63,64
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,58,60,61,64,67,69,70,73,77,79
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int_31_bad(){    int * data;    /* Initialize data */    data = NULL;    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int_31_bad()
CWE415_Double_Free__malloc_free_int_31_bad
{    int * data;    /* Initialize data */    data = NULL;    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
{        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
int * dataCopy = data;
int * dataCopy = data;
int
* dataCopy = data
*
dataCopy
= data
data
data
int * data = dataCopy;
int * data = dataCopy;
int
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
free(data);
free(data)
free
free
data
data
-----joern-----
(9,22,0)
(2,5,0)
(18,29,0)
(18,4,0)
(8,11,0)
(0,28,0)
(12,13,0)
(13,32,0)
(31,28,0)
(23,12,0)
(5,11,0)
(6,17,0)
(20,5,0)
(14,8,0)
(29,18,0)
(32,28,0)
(1,21,0)
(22,12,0)
(27,28,0)
(13,12,0)
(32,13,0)
(3,32,0)
(8,28,0)
(21,5,0)
(16,0,0)
(10,29,0)
(35,11,0)
(2,0,0)
(17,11,0)
(19,5,0)
(24,0,0)
(28,11,0)
(0,5,0)
(30,2,0)
(21,2,0)
(15,17,0)
(28,32,0)
(26,31,0)
(25,11,0)
(32,3,0)
(34,31,0)
(33,2,0)
(12,22,0)
(14,18,1)
(33,0,1)
(17,15,1)
(9,23,1)
(0,28,1)
(32,3,1)
(15,6,1)
(1,2,1)
(16,24,1)
(0,16,1)
(31,34,1)
(27,17,1)
(18,29,1)
(32,13,1)
(21,2,1)
(29,10,1)
(14,31,1)
(13,12,1)
(30,33,1)
(12,22,1)
(7,21,1)
(24,8,1)
(34,26,1)
(2,30,1)
(23,27,1)
(22,9,1)
(28,32,1)
(2,0,1)
(31,28,1)
(26,28,1)
(10,31,1)
(8,14,1)
(21,1,1)
(8,28,1)
(29,31,2)
(28,32,2)
(2,0,2)
(31,28,2)
(12,22,2)
(18,29,2)
(10,31,2)
(18,31,2)
(13,12,2)
(32,13,2)
(0,28,2)
(32,3,2)
(21,2,2)
(8,28,2)
-----------------------------------
(0,* dataCopy = data)
(1,data)
(2,* data = dataCopy)
(3,int *)
(4,)
(5,)
(6,data)
(7,RET)
(8,free(data)
(9,int)
(10,1)
(11,)
(12,100*sizeof(int)
(13,malloc(100*sizeof(int)
(14,data)
(15,NULL)
(16,data)
(17,data = NULL)
(18,exit(-1)
(19,data)
(20,dataCopy)
(21,free(data)
(22,sizeof(int)
(23,100)
(24,dataCopy)
(25,data)
(26,data)
(27,data)
(28,data = (int *)
(29,-1)
(30,dataCopy)
(31,data == NULL)
(32,(int *)
(33,data)
(34,NULL)
(35,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^