-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
56,57
56,58
56,59
57,58
58,59
58,60
59,60
61,62
61,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
85,87
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
92,93
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
119,120
119,121
120,121
123,124
124,125
126,127
127,128
128,129
128,130
129,130
129,131
130,131
132,133
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
144,145
144,146
145,146
148,149
149,150
149,151
150,151
152,153
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,55,60,62,64,69,71,76,77,80,81,84,91,93,94,95,101,103,104,105,110,112,117,118,121,122,125,131,133,136,138,142,146,147,151,153
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
74,75
74,76
78,79
78,80
87,88
87,89
97,98
97,99
115,116
115,117
119,120
119,121
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        break;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        break;    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(42,39,0)
(71,67,0)
(69,32,0)
(59,12,0)
(54,55,0)
(11,77,0)
(65,1,0)
(73,63,0)
(61,16,0)
(1,60,0)
(13,75,0)
(9,15,0)
(28,1,0)
(65,67,0)
(75,68,0)
(34,68,0)
(48,76,0)
(64,13,0)
(32,69,0)
(37,80,0)
(7,20,0)
(18,52,0)
(19,14,0)
(65,12,0)
(39,67,0)
(17,60,0)
(31,57,0)
(63,1,0)
(49,57,0)
(36,69,0)
(23,70,0)
(65,49,0)
(44,12,0)
(57,67,0)
(52,1,0)
(50,14,0)
(61,56,0)
(21,68,0)
(46,55,0)
(45,65,0)
(22,15,0)
(63,80,0)
(47,75,0)
(63,12,0)
(3,10,0)
(58,60,0)
(79,52,0)
(55,20,0)
(1,77,0)
(33,20,0)
(29,69,0)
(8,62,0)
(57,49,0)
(77,1,0)
(74,67,0)
(76,20,0)
(26,62,0)
(80,63,0)
(49,40,0)
(66,10,0)
(15,20,0)
(80,37,0)
(77,11,0)
(56,61,0)
(27,57,0)
(2,26,0)
(15,26,0)
(41,43,0)
(77,29,0)
(30,39,0)
(12,68,0)
(38,51,0)
(26,15,0)
(14,20,0)
(5,63,0)
(62,78,0)
(59,13,0)
(0,12,0)
(72,56,0)
(29,77,0)
(14,43,0)
(53,65,0)
(43,70,0)
(37,13,0)
(6,32,0)
(51,67,0)
(4,59,0)
(69,29,0)
(25,13,0)
(59,1,0)
(10,75,0)
(43,14,0)
(70,78,0)
(67,74,1)
(63,1,1)
(74,71,1)
(12,0,1)
(15,20,1)
(2,15,1)
(57,67,1)
(65,67,1)
(77,29,1)
(35,59,1)
(73,5,1)
(56,72,1)
(54,46,1)
(4,37,1)
(38,49,1)
(77,11,1)
(70,23,1)
(14,20,1)
(30,67,1)
(76,20,1)
(26,15,1)
(18,1,1)
(15,9,1)
(55,20,1)
(7,58,1)
(43,41,1)
(62,8,1)
(51,67,1)
(14,50,1)
(65,1,1)
(49,57,1)
(30,51,1)
(28,24,1)
(80,63,1)
(51,38,1)
(41,14,1)
(63,73,1)
(36,28,1)
(59,12,1)
(45,39,1)
(76,48,1)
(48,62,1)
(8,26,1)
(27,31,1)
(20,33,1)
(26,2,1)
(57,27,1)
(23,43,1)
(42,30,1)
(58,61,1)
(58,52,1)
(61,56,1)
(43,14,1)
(39,42,1)
(39,67,1)
(65,12,1)
(9,22,1)
(79,18,1)
(31,65,1)
(33,7,1)
(52,1,1)
(59,1,1)
(63,12,1)
(37,80,1)
(71,55,1)
(0,44,1)
(55,54,1)
(72,52,1)
(24,12,1)
(5,39,1)
(53,45,1)
(50,19,1)
(69,32,1)
(46,76,1)
(52,79,1)
(59,4,1)
(32,6,1)
(7,24,1)
(29,69,1)
(19,55,1)
(65,53,1)
(22,70,1)
(46,20,1)
(6,36,1)
(1,77,1)
(22,55,2)
(69,24,2)
(59,12,2)
(28,24,2)
(41,55,2)
(77,29,2)
(32,24,2)
(48,55,2)
(51,39,2)
(29,69,2)
(52,1,2)
(1,24,2)
(61,52,2)
(43,55,2)
(26,55,2)
(18,24,2)
(39,67,2)
(57,67,2)
(63,12,2)
(76,55,2)
(2,55,2)
(76,20,2)
(72,52,2)
(57,39,2)
(65,67,2)
(38,39,2)
(49,39,2)
(59,1,2)
(9,55,2)
(26,15,2)
(65,39,2)
(45,39,2)
(46,55,2)
(52,24,2)
(30,39,2)
(27,39,2)
(1,77,2)
(62,55,2)
(6,24,2)
(15,20,2)
(19,55,2)
(23,55,2)
(42,39,2)
(65,1,2)
(39,39,2)
(14,20,2)
(29,24,2)
(77,11,2)
(54,55,2)
(43,14,2)
(8,55,2)
(53,39,2)
(51,67,2)
(37,80,2)
(77,24,2)
(80,63,2)
(65,12,2)
(36,24,2)
(79,24,2)
(70,55,2)
(50,55,2)
(31,39,2)
(14,55,2)
(69,32,2)
(55,55,2)
(49,57,2)
(58,24,2)
(63,1,2)
(55,20,2)
(61,56,2)
(15,55,2)
(56,52,2)
-----------------------------------
(0,NULL)
(1,data = (twoIntsStruct *)
(2,intTwo)
(3,for (i = 0; i < 100; i++)
(4,data)
(5,data)
(6,twoIntsStruct)
(7,i)
(8,0)
(9,i)
(10,)
(11,twoIntsStruct *)
(12,data = NULL)
(13,)
(14,source[i])
(15,source[i])
(16,)
(17,if (data == NULL)
(18,data)
(19,source)
(20,i = 0)
(21,data)
(22,source)
(23,0)
(24,1)
(25,i)
(26,source[i].intTwo)
(27,i)
(28,data)
(29,malloc(50*sizeof(twoIntsStruct)
(30,i)
(31,source)
(32,sizeof(twoIntsStruct)
(33,0)
(34,while(1)
(35,RET)
(36,50)
(37,printStructLine(&data[0])
(38,i)
(39,i < 100)
(40,)
(41,intOne)
(42,100)
(43,source[i].intOne)
(44,data)
(45,data)
(46,i)
(47,source)
(48,i)
(49,data[i] = source[i])
(50,i)
(51,i++)
(52,data == NULL)
(53,i)
(54,100)
(55,i < 100)
(56,-1)
(57,source[i])
(58,break;)
(59,free(data)
(60,)
(61,exit(-1)
(62,source[i].intTwo = 0)
(63,data[0])
(64,for (i = 0; i < 100; i++)
(65,data[i])
(66,i)
(67,i = 0)
(68,)
(69,50*sizeof(twoIntsStruct)
(70,source[i].intOne = 0)
(71,i)
(72,1)
(73,0)
(74,0)
(75,)
(76,i++)
(77,(twoIntsStruct *)
(78,)
(79,NULL)
(80,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^