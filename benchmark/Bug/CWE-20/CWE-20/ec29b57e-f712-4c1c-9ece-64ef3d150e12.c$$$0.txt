-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
62,63
62,64
62,65
62,66
63,64
64,65
64,66
66,67
66,68
66,69
68,69
69,70
69,71
72,73
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
81,82
83,84
83,85
84,85
85,86
85,87
86,87
86,88
87,88
89,90
92,93
93,94
93,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,54,55,59,60,61,65,67,70,71,74,78,80,82,88,90,91,94,95,99,101,105,107
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
69,70
69,71
83,84
83,85
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (strlen(source) + 1) * sizeof(char));
memmove(data, source, (strlen(source) + 1) * sizeof(char))
memmove
memmove
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(33,15,0)
(19,17,0)
(15,36,0)
(6,45,0)
(45,6,0)
(22,7,0)
(43,47,0)
(8,18,0)
(39,50,0)
(42,47,0)
(21,11,0)
(26,42,0)
(19,47,0)
(25,43,0)
(20,41,0)
(43,41,0)
(50,39,0)
(27,19,0)
(43,15,0)
(47,45,0)
(19,15,0)
(48,17,0)
(41,17,0)
(17,36,0)
(47,11,0)
(10,1,0)
(32,18,0)
(32,43,0)
(5,41,0)
(6,7,0)
(43,32,0)
(2,11,0)
(39,3,0)
(16,20,0)
(32,37,0)
(23,45,0)
(42,17,0)
(35,11,0)
(30,22,0)
(34,1,0)
(18,20,0)
(0,11,0)
(14,41,0)
(45,47,0)
(1,47,0)
(29,35,0)
(7,6,0)
(13,7,0)
(46,36,0)
(43,17,0)
(9,50,0)
(45,23,0)
(31,36,0)
(12,47,0)
(37,32,0)
(18,32,0)
(40,15,0)
(38,11,0)
(7,22,0)
(20,18,0)
(42,15,0)
(28,37,0)
(24,43,0)
(49,11,0)
(37,28,1)
(15,33,1)
(25,24,1)
(16,25,1)
(49,1,1)
(28,18,1)
(4,42,1)
(8,20,1)
(43,15,1)
(34,47,1)
(50,9,1)
(43,41,1)
(14,0,1)
(47,45,1)
(7,22,1)
(19,15,1)
(10,34,1)
(43,47,1)
(29,44,1)
(27,43,1)
(13,12,1)
(32,18,1)
(22,30,1)
(1,47,1)
(41,5,1)
(0,35,1)
(42,15,1)
(45,6,1)
(39,50,1)
(24,41,1)
(32,37,1)
(18,8,1)
(12,44,1)
(35,29,1)
(5,14,1)
(44,15,1)
(42,26,1)
(19,27,1)
(26,19,1)
(9,1,1)
(43,32,1)
(1,10,1)
(49,39,1)
(33,40,1)
(20,16,1)
(30,13,1)
(18,20,1)
(6,7,1)
(19,47,1)
(14,49,1)
(20,41,1)
(45,23,1)
(42,47,1)
(22,44,2)
(19,47,2)
(39,1,2)
(42,15,2)
(43,32,2)
(32,18,2)
(6,7,2)
(10,44,2)
(12,44,2)
(7,44,2)
(1,47,2)
(19,15,2)
(42,47,2)
(49,44,2)
(1,44,2)
(45,23,2)
(7,22,2)
(43,41,2)
(13,44,2)
(32,37,2)
(20,41,2)
(0,44,2)
(43,47,2)
(45,6,2)
(45,44,2)
(9,1,2)
(39,50,2)
(6,44,2)
(47,45,2)
(29,44,2)
(35,44,2)
(18,20,2)
(50,1,2)
(34,44,2)
(30,44,2)
(47,44,2)
(43,15,2)
-----------------------------------
(0,break;)
(1,data == NULL)
(2,case 6:)
(3,)
(4,RET)
(5,SRC_STRING)
(6,malloc(10*sizeof(char)
(7,10*sizeof(char)
(8,1)
(9,1)
(10,NULL)
(11,)
(12,data)
(13,10)
(14,source)
(15,data = NULL)
(16,source)
(17,)
(18,strlen(source)
(19,printLine(data)
(20,strlen(source)
(21,if (data == NULL)
(22,sizeof(char)
(23,char *)
(24,data)
(25,source)
(26,data)
(27,data)
(28,char)
(29,"Benign, fixed string")
(30,char)
(31,data)
(32,(strlen(source)
(33,NULL)
(34,data)
(35,printLine("Benign, fixed string")
(36,)
(37,sizeof(char)
(38,default:)
(39,exit(-1)
(40,data)
(41,source[10+1] = SRC_STRING)
(42,free(data)
(43,memmove(data, source, (strlen(source)
(44,6)
(45,(char *)
(46,switch(6)
(47,data = (char *)
(48,source)
(49,break;)
(50,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^