-----label-----
1
-----code-----
static void badSink(char * data)
{
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
26,28
29,30
30,31
30,32
31,32
31,33
32,33
34,35
34,36
38,39
39,40
39,41
39,42
39,43
40,41
42,43
44,45
46,47
46,48
48,49
49,50
49,51
52,53
53,54
53,55
54,55
54,56
55,56
57,58
57,59
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,6,8,9,14,16,18,22,24,25,27,28,33,35,36,37,41,43,45,47,50,51,56,58,59,60,64,66,70,72
-----computeFrom-----
26,27
26,28
30,31
30,32
34,35
34,36
46,47
46,48
53,54
53,55
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(16,20,0)
(5,2,0)
(23,26,0)
(24,20,0)
(16,11,0)
(35,3,0)
(18,19,0)
(29,3,0)
(27,19,0)
(21,10,0)
(34,2,0)
(33,36,0)
(0,11,0)
(0,3,0)
(20,16,0)
(36,3,0)
(30,4,0)
(0,26,0)
(2,3,0)
(29,11,0)
(15,20,0)
(32,35,0)
(35,11,0)
(18,36,0)
(26,10,0)
(10,26,0)
(12,3,0)
(4,3,0)
(13,6,0)
(14,0,0)
(28,18,0)
(26,0,0)
(2,6,0)
(7,16,0)
(25,19,0)
(9,29,0)
(17,0,0)
(16,4,0)
(6,2,0)
(3,31,0)
(8,6,0)
(19,18,0)
(8,13,1)
(2,6,1)
(36,33,1)
(25,27,1)
(16,11,1)
(19,25,1)
(30,16,1)
(0,26,1)
(29,9,1)
(21,23,1)
(4,30,1)
(34,5,1)
(15,24,1)
(32,29,1)
(35,11,1)
(0,11,1)
(6,8,1)
(9,4,1)
(13,34,1)
(18,19,1)
(26,10,1)
(17,36,1)
(7,0,1)
(23,14,1)
(29,11,1)
(10,21,1)
(27,28,1)
(28,2,1)
(35,32,1)
(20,15,1)
(1,35,1)
(16,20,1)
(33,18,1)
(14,17,1)
(24,7,1)
(2,6,2)
(18,19,2)
(0,11,2)
(29,11,2)
(0,26,2)
(16,11,2)
(16,20,2)
(35,11,2)
(26,10,2)
-----------------------------------
(0,memcpy(data, source, 100*sizeof(char)
(1,RET)
(2,memset(source, \'C\', 100-1)
(3,)
(4,data[100-1] = '\\\\0')
(5,source)
(6,100-1)
(7,data)
(8,1)
(9,data)
(10,sizeof(char)
(11,char * data)
(12,source)
(13,100)
(14,source)
(15,1)
(16,data[100-1])
(17,data)
(18,source[100-1])
(19,100-1)
(20,100-1)
(21,char)
(22,memset(source, 'C', 100-1)
(23,100)
(24,100)
(25,1)
(26,100*sizeof(char)
(27,100)
(28,source)
(29,printLine(data)
(30,'\\\\0')
(31,)
(32,data)
(33,'\\\\0')
(34,'C')
(35,free(data)
(36,source[100-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^