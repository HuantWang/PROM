-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_18_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    goto source;
source:
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,32,36,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,92,94,96,98,102,103,107,111,112
-----computeFrom-----
34,35
34,36
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_18_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_18_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_18_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
goto source;
source
source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;
source
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(39,25,0)
(19,48,0)
(16,48,0)
(43,37,0)
(31,21,0)
(24,18,0)
(2,18,0)
(1,48,0)
(14,1,0)
(34,18,0)
(44,18,0)
(9,16,0)
(33,6,0)
(32,21,0)
(30,19,0)
(35,11,0)
(42,40,0)
(17,20,0)
(8,11,0)
(11,20,0)
(31,48,0)
(7,39,0)
(4,24,0)
(10,37,0)
(40,5,0)
(11,45,0)
(29,24,0)
(15,43,0)
(46,45,0)
(37,6,0)
(40,1,0)
(43,24,0)
(20,17,0)
(13,4,0)
(3,48,0)
(12,45,0)
(38,31,0)
(37,43,0)
(21,31,0)
(41,31,0)
(45,18,0)
(17,24,0)
(36,43,0)
(5,25,0)
(20,11,0)
(22,4,0)
(23,48,0)
(28,1,0)
(1,40,0)
(49,5,0)
(43,45,0)
(47,18,0)
(21,39,0)
(26,18,0)
(0,16,0)
(6,37,0)
(9,0,1)
(20,11,1)
(0,48,1)
(31,41,1)
(38,5,1)
(7,21,1)
(45,46,1)
(11,45,1)
(37,6,1)
(19,30,1)
(40,42,1)
(8,35,1)
(31,48,1)
(28,16,1)
(21,32,1)
(46,12,1)
(11,8,1)
(40,1,1)
(36,15,1)
(1,48,1)
(43,45,1)
(12,47,1)
(15,16,1)
(0,19,1)
(10,36,1)
(14,28,1)
(32,31,1)
(41,38,1)
(23,45,1)
(42,1,1)
(27,17,1)
(48,3,1)
(3,23,1)
(43,37,1)
(1,14,1)
(39,7,1)
(19,48,1)
(49,40,1)
(30,39,1)
(17,20,1)
(21,31,1)
(5,49,1)
(6,33,1)
(33,10,1)
(16,48,1)
(16,9,1)
(35,43,1)
(16,16,2)
(30,16,2)
(40,16,2)
(31,16,2)
(40,1,2)
(49,16,2)
(17,20,2)
(39,16,2)
(7,16,2)
(14,16,2)
(32,16,2)
(41,16,2)
(5,16,2)
(42,16,2)
(11,45,2)
(21,16,2)
(19,16,2)
(9,16,2)
(31,48,2)
(20,11,2)
(19,48,2)
(21,31,2)
(37,6,2)
(38,16,2)
(1,48,2)
(43,45,2)
(1,16,2)
(16,48,2)
(0,16,2)
(28,16,2)
(43,37,2)
-----------------------------------
(0,i)
(1,source[i])
(2,source:)
(3,0)
(4,)
(5,source[i].intOne = 0)
(6,sizeof(twoIntsStruct)
(7,0)
(8,0)
(9,100)
(10,100)
(11,data[0])
(12,data)
(13,i)
(14,i)
(15,data)
(16,i < 100)
(17,printStructLine(&data[0])
(18,)
(19,i++)
(20,&data[0])
(21,source[i].intTwo)
(22,for (i = 0; i < 100; i++)
(23,i)
(24,)
(25,)
(26,dataGoodBuffer)
(27,RET)
(28,source)
(29,source)
(30,i)
(31,source[i])
(32,intTwo)
(33,twoIntsStruct)
(34,dataBadBuffer)
(35,data)
(36,source)
(37,100*sizeof(twoIntsStruct)
(38,source)
(39,source[i].intTwo = 0)
(40,source[i].intOne)
(41,i)
(42,intOne)
(43,memcpy(data, source, 100*sizeof(twoIntsStruct)
(44,data)
(45,data = dataBadBuffer)
(46,dataBadBuffer)
(47,goto source;)
(48,i = 0)
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^