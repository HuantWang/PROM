-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(5==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
46,49
49,50
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
58,60
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
92,93
92,94
93,94
93,95
94,95
96,97
99,100
99,101
99,102
100,101
100,102
101,102
104,105
104,106
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
119,120
119,121
120,121
123,124
124,125
126,127
127,128
128,129
128,130
129,130
131,132
131,133
132,133
134,135
136,137
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
146,147
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,28,31,34,35,40,42,45,47,48,52,54,57,59,62,63,67,69,74,76,81,82,85,86,89,95,97,98,102,103,109,111,112,117,118,121,122,125,130,133,135,140,141,145,147
-----computeFrom-----
12,13
12,14
18,19
18,20
33,34
33,35
58,59
58,60
65,66
65,67
79,80
79,81
83,84
83,85
92,93
92,94
100,101
100,102
106,107
106,108
115,116
115,117
119,120
119,121
-----guardedBy-----
102,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad(){    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03_bad
{    int data;    /* Initialize data */    data = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(5==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
5==5
5
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(82,42,0)
(2,59,0)
(68,65,0)
(39,53,0)
(40,63,0)
(70,5,0)
(13,18,0)
(32,65,0)
(51,45,0)
(6,7,0)
(16,65,0)
(64,56,0)
(58,2,0)
(45,18,0)
(73,76,0)
(39,65,0)
(1,18,0)
(62,56,0)
(33,13,0)
(77,0,0)
(22,35,0)
(79,28,0)
(3,61,0)
(4,5,0)
(7,76,0)
(57,12,0)
(71,77,0)
(53,39,0)
(65,56,0)
(30,66,0)
(76,73,0)
(75,74,0)
(55,15,0)
(15,2,0)
(56,24,0)
(41,35,0)
(39,73,0)
(23,0,0)
(46,15,0)
(72,20,0)
(49,43,0)
(68,56,0)
(9,56,0)
(34,56,0)
(18,5,0)
(60,63,0)
(85,61,0)
(63,60,0)
(27,57,0)
(14,41,0)
(83,16,0)
(80,35,0)
(50,84,0)
(36,12,0)
(28,67,0)
(45,65,0)
(48,35,0)
(16,35,0)
(81,76,0)
(54,41,0)
(43,28,0)
(18,13,0)
(78,8,0)
(65,39,0)
(76,7,0)
(20,31,0)
(19,0,0)
(38,68,0)
(73,39,0)
(11,45,0)
(52,84,0)
(10,42,0)
(44,80,0)
(43,18,0)
(61,65,0)
(25,5,0)
(21,56,0)
(17,28,0)
(42,18,0)
(15,75,0)
(15,65,0)
(15,0,0)
(60,69,0)
(26,8,0)
(66,0,0)
(47,66,0)
(37,16,0)
(16,2,0)
(45,57,0)
(28,43,0)
(75,15,0)
(26,78,1)
(78,28,1)
(83,41,1)
(16,37,1)
(7,6,1)
(84,50,1)
(75,15,1)
(55,46,1)
(28,43,1)
(42,10,1)
(60,63,1)
(80,35,1)
(50,52,1)
(45,11,1)
(29,8,1)
(43,49,1)
(51,42,1)
(14,54,1)
(22,60,1)
(15,0,1)
(13,33,1)
(40,61,1)
(44,2,1)
(15,65,1)
(0,23,1)
(2,58,1)
(32,8,1)
(27,45,1)
(81,32,1)
(85,3,1)
(73,76,1)
(52,18,1)
(33,1,1)
(45,18,1)
(77,71,1)
(39,53,1)
(23,19,1)
(61,85,1)
(17,84,1)
(72,42,1)
(19,57,1)
(79,17,1)
(66,30,1)
(41,14,1)
(65,39,1)
(47,77,1)
(63,40,1)
(78,84,1)
(22,61,1)
(58,16,1)
(76,7,1)
(37,83,1)
(38,66,1)
(46,66,1)
(29,68,1)
(49,79,1)
(39,73,1)
(11,51,1)
(3,65,1)
(35,48,1)
(54,35,1)
(66,0,1)
(30,47,1)
(41,35,1)
(80,44,1)
(20,72,1)
(10,82,1)
(61,65,1)
(82,41,1)
(71,75,1)
(16,35,1)
(18,13,1)
(57,27,1)
(68,38,1)
(68,65,1)
(38,20,1)
(42,18,1)
(45,65,1)
(16,65,1)
(6,81,1)
(15,2,1)
(54,80,1)
(15,55,1)
(77,0,1)
(48,22,1)
(47,0,1)
(8,26,1)
(43,18,1)
(42,18,2)
(54,41,2)
(65,39,2)
(51,42,2)
(61,8,2)
(16,35,2)
(37,41,2)
(32,8,2)
(39,8,2)
(68,65,2)
(55,66,2)
(68,8,2)
(11,42,2)
(66,66,2)
(20,42,2)
(82,8,2)
(30,42,2)
(72,42,2)
(39,73,2)
(17,84,2)
(41,8,2)
(77,66,2)
(43,18,2)
(75,15,2)
(85,8,2)
(6,8,2)
(30,66,2)
(14,41,2)
(48,8,2)
(14,8,2)
(58,41,2)
(28,84,2)
(10,8,2)
(40,61,2)
(79,84,2)
(15,66,2)
(18,13,2)
(39,53,2)
(7,8,2)
(47,42,2)
(83,41,2)
(63,61,2)
(28,43,2)
(46,66,2)
(65,8,2)
(2,41,2)
(71,66,2)
(47,66,2)
(23,42,2)
(45,42,2)
(16,65,2)
(15,0,2)
(41,35,2)
(60,63,2)
(73,8,2)
(76,7,2)
(15,2,2)
(66,42,2)
(60,61,2)
(76,8,2)
(42,8,2)
(27,42,2)
(54,8,2)
(0,42,2)
(19,42,2)
(81,8,2)
(80,41,2)
(3,8,2)
(45,65,2)
(57,42,2)
(43,84,2)
(66,0,2)
(38,8,2)
(44,41,2)
(16,41,2)
(80,35,2)
(41,41,2)
(22,8,2)
(15,65,2)
(49,84,2)
(77,0,2)
(61,65,2)
(35,8,2)
(73,76,2)
(75,66,2)
(45,18,2)
-----------------------------------
(0,i = 0)
(1,data)
(2,buffer[i] = 0)
(3,buffer)
(4,if(5==5)
(5,)
(6,int)
(7,sizeof(int)
(8,5==5)
(9,if (data >= 0)
(10,0)
(11,data)
(12,)
(13,-1)
(14,10)
(15,buffer[i])
(16,buffer[i])
(17,stdin)
(18,data = -1)
(19,i)
(20,printLine("ERROR: Array index is negative.")
(21,if (buffer == NULL)
(22,i)
(23,0)
(24,)
(25,if(5==5)
(26,5)
(27,1)
(28,fscanf(stdin, "%d", &data)
(29,RET)
(30,10)
(31,)
(32,buffer)
(33,1)
(34,buffer)
(35,i = 0)
(36,for(i = 0; i < 10; i++)
(37,i)
(38,buffer)
(39,(int *)
(40,1)
(41,i < 10)
(42,data >= 0)
(43,&data)
(44,i)
(45,buffer[data])
(46,buffer)
(47,i)
(48,0)
(49,data)
(50,5)
(51,buffer)
(52,5)
(53,int *)
(54,i)
(55,i)
(56,)
(57,buffer[data] = 1)
(58,0)
(59,)
(60,exit(-1)
(61,buffer == NULL)
(62,i)
(63,-1)
(64,for (i = 0; i < 10; i++)
(65,* buffer = (int *)
(66,i < 10)
(67,)
(68,free(buffer)
(69,)
(70,data)
(71,i)
(72,"ERROR: Array index is negative.")
(73,malloc(10 * sizeof(int)
(74,)
(75,printIntLine(buffer[i])
(76,10 * sizeof(int)
(77,i++)
(78,5)
(79,"%d")
(80,i++)
(81,10)
(82,data)
(83,buffer)
(84,5==5)
(85,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^