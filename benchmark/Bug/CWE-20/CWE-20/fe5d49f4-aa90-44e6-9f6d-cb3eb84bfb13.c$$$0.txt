-----label-----
1
-----code-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource(char * data)
{
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,45
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource(char * data){    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
char
* CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource(char * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b_badSource
char * data
char
* data
*
data
{    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(16,20,0)
(8,4,0)
(14,2,0)
(2,19,0)
(17,0,0)
(2,8,0)
(18,14,0)
(11,20,0)
(1,2,0)
(13,19,0)
(8,15,0)
(14,12,0)
(9,2,0)
(1,19,0)
(20,15,0)
(6,1,0)
(20,11,0)
(21,14,0)
(8,2,0)
(1,12,0)
(4,8,0)
(10,11,0)
(2,12,0)
(17,5,0)
(5,17,0)
(15,20,0)
(3,1,0)
(15,8,0)
(7,5,0)
(2,12,1)
(10,16,1)
(5,7,1)
(18,21,1)
(1,12,1)
(14,12,1)
(2,8,1)
(17,5,1)
(16,9,1)
(15,20,1)
(1,2,1)
(11,10,1)
(3,17,1)
(7,14,1)
(20,11,1)
(6,1,1)
(8,4,1)
(1,3,1)
(14,18,1)
(3,14,1)
(14,2,1)
(21,2,1)
(8,15,1)
(2,12,2)
(1,12,2)
(17,5,2)
(8,15,2)
(14,12,2)
(15,20,2)
(6,1,2)
(17,14,2)
(8,4,2)
(2,8,2)
(20,11,2)
(7,14,2)
(14,2,2)
(1,2,2)
(5,14,2)
-----------------------------------
(0,)
(1,return data;)
(2,data = (char *)
(3,data)
(4,char *)
(5,-1)
(6,RET)
(7,1)
(8,(char *)
(9,data)
(10,char)
(11,sizeof(char)
(12,char * data)
(13,if (data == NULL)
(14,data == NULL)
(15,malloc(10*sizeof(char)
(16,10)
(17,exit(-1)
(18,NULL)
(19,)
(20,10*sizeof(char)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^