-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strcat(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
61,65
61,66
61,67
62,63
63,64
63,65
65,66
65,67
67,68
69,70
70,71
70,72
70,73
70,74
71,72
73,74
76,77
76,78
79,80
80,81
80,82
81,82
81,83
82,83
84,85
84,86
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,66,68,72,74,75,77,78,83,85,86,87,91,93,95,99,101,105,107
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
76,77
76,78
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
5==5
5
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strcat(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcat(data, source);
strcat(data, source)
strcat
strcat
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(33,22,0)
(11,52,0)
(23,11,0)
(1,57,0)
(15,24,0)
(50,11,0)
(51,29,0)
(9,24,0)
(14,11,0)
(23,54,0)
(20,39,0)
(8,13,0)
(50,43,0)
(13,15,0)
(10,30,0)
(2,33,0)
(4,23,0)
(5,30,0)
(18,1,0)
(36,43,0)
(28,43,0)
(53,50,0)
(35,1,0)
(17,54,0)
(6,27,0)
(14,43,0)
(0,27,0)
(19,52,0)
(20,3,0)
(36,11,0)
(41,36,0)
(33,12,0)
(54,23,0)
(36,15,0)
(50,15,0)
(56,23,0)
(39,20,0)
(1,18,0)
(21,24,0)
(57,51,0)
(51,15,0)
(48,22,0)
(37,15,0)
(15,51,0)
(40,13,0)
(49,43,0)
(34,12,0)
(32,12,0)
(55,11,0)
(30,9,0)
(57,1,0)
(47,36,0)
(26,52,0)
(43,52,0)
(12,33,0)
(16,39,0)
(51,57,0)
(22,11,0)
(31,54,0)
(30,15,0)
(29,51,0)
(38,9,0)
(25,14,0)
(44,18,0)
(14,15,0)
(47,41,1)
(14,25,1)
(56,4,1)
(36,15,1)
(36,43,1)
(50,15,1)
(1,18,1)
(13,40,1)
(4,27,1)
(33,12,1)
(7,50,1)
(5,13,1)
(10,5,1)
(0,6,1)
(14,43,1)
(18,44,1)
(28,49,1)
(30,15,1)
(16,13,1)
(53,14,1)
(4,9,1)
(40,8,1)
(38,30,1)
(51,29,1)
(27,0,1)
(12,34,1)
(32,2,1)
(23,54,1)
(6,43,1)
(30,10,1)
(54,31,1)
(36,47,1)
(2,23,1)
(31,17,1)
(48,33,1)
(44,35,1)
(50,43,1)
(43,28,1)
(9,38,1)
(25,36,1)
(41,22,1)
(35,37,1)
(13,15,1)
(8,15,1)
(14,15,1)
(37,27,1)
(22,48,1)
(20,39,1)
(39,16,1)
(34,32,1)
(51,57,1)
(5,20,1)
(15,51,1)
(57,1,1)
(50,53,1)
(17,56,1)
(44,27,2)
(35,27,2)
(38,27,2)
(16,13,2)
(23,54,2)
(1,18,2)
(57,1,2)
(30,27,2)
(8,27,2)
(15,27,2)
(5,27,2)
(33,12,2)
(51,57,2)
(50,15,2)
(39,13,2)
(20,13,2)
(15,51,2)
(13,15,2)
(9,27,2)
(50,43,2)
(57,27,2)
(36,43,2)
(36,15,2)
(18,27,2)
(20,39,2)
(13,27,2)
(14,43,2)
(40,27,2)
(51,29,2)
(51,27,2)
(10,27,2)
(30,15,2)
(1,27,2)
(37,27,2)
(14,15,2)
-----------------------------------
(0,5)
(1,50*sizeof(char)
(2,source)
(3,)
(4,source)
(5,data)
(6,5)
(7,RET)
(8,data)
(9,data[0] = \'\\\\0\')
(10,0)
(11,)
(12,100-1)
(13,data == NULL)
(14,printLine(data)
(15,data = (char *)
(16,1)
(17,100)
(18,sizeof(char)
(19,if(5==5)
(20,exit(-1)
(21,if (data == NULL)
(22,source[100-1] = '\\\\0')
(23,memset(source, \'C\', 100-1)
(24,)
(25,data)
(26,data)
(27,5==5)
(28,NULL)
(29,char *)
(30,data[0])
(31,1)
(32,100)
(33,source[100-1])
(34,1)
(35,50)
(36,strcat(data, source)
(37,data)
(38,\'\\\\0\')
(39,-1)
(40,NULL)
(41,data)
(42,data[0] = '\\\\0')
(43,data = NULL)
(44,char)
(45,'\\\\0')
(46,memset(source, 'C', 100-1)
(47,source)
(48,'\\\\0')
(49,data)
(50,free(data)
(51,(char *)
(52,)
(53,data)
(54,100-1)
(55,source)
(56,'C')
(57,malloc(50*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^