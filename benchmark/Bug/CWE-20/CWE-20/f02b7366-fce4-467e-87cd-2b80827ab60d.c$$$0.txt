-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            data++;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_12_bad()
CWE190_Integer_Overflow__short_rand_postinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(33,14,0)
(9,8,0)
(41,0,0)
(18,21,0)
(30,8,0)
(35,32,0)
(45,30,0)
(0,36,0)
(10,41,0)
(31,41,0)
(1,0,0)
(46,29,0)
(25,0,0)
(16,9,0)
(1,8,0)
(8,39,0)
(24,8,0)
(18,37,0)
(34,19,0)
(22,30,0)
(29,41,0)
(12,6,0)
(26,1,0)
(15,22,0)
(41,17,0)
(25,17,0)
(23,19,0)
(21,18,0)
(7,1,0)
(38,30,0)
(3,17,0)
(13,6,0)
(9,0,0)
(44,25,0)
(8,18,0)
(22,33,0)
(40,0,0)
(11,33,0)
(37,18,0)
(9,33,0)
(2,0,0)
(4,42,0)
(30,33,0)
(27,6,0)
(41,8,0)
(25,8,0)
(18,8,0)
(42,5,0)
(29,17,0)
(19,6,0)
(30,0,0)
(9,0,1)
(9,16,1)
(43,8,1)
(20,19,1)
(41,31,1)
(42,4,1)
(7,43,1)
(29,46,1)
(29,41,1)
(4,1,1)
(34,23,1)
(31,10,1)
(22,15,1)
(37,24,1)
(18,37,1)
(45,9,1)
(25,0,1)
(2,40,1)
(41,0,1)
(30,0,1)
(25,44,1)
(26,7,1)
(38,45,1)
(43,0,1)
(41,8,1)
(40,20,1)
(9,8,1)
(28,22,1)
(44,1,1)
(28,42,1)
(19,34,1)
(22,30,1)
(1,0,1)
(25,8,1)
(1,26,1)
(15,30,1)
(28,29,1)
(8,18,1)
(24,20,1)
(30,8,1)
(1,8,1)
(10,25,1)
(46,41,1)
(0,2,1)
(18,21,1)
(16,43,1)
(30,38,1)
(2,20,2)
(41,0,2)
(9,0,2)
(1,43,2)
(9,8,2)
(40,20,2)
(26,43,2)
(42,1,2)
(25,8,2)
(30,0,2)
(29,1,2)
(22,43,2)
(8,20,2)
(22,30,2)
(8,18,2)
(0,20,2)
(18,37,2)
(31,1,2)
(45,43,2)
(25,1,2)
(38,43,2)
(44,1,2)
(1,8,2)
(7,43,2)
(9,43,2)
(10,1,2)
(41,8,2)
(37,20,2)
(25,0,2)
(46,1,2)
(16,43,2)
(4,1,2)
(41,1,2)
(29,41,2)
(15,43,2)
(24,20,2)
(1,0,2)
(30,43,2)
(18,21,2)
(18,20,2)
(30,8,2)
-----------------------------------
(0,data = 2)
(1,data < SHRT_MAX)
(2,2)
(3,result)
(4,"data value is too large to perform arithmetic safely.")
(5,)
(6,)
(7,data)
(8,data = (short)
(9,data++)
(10,result)
(11,result)
(12,if(globalReturnsTrueOrFalse()
(13,data)
(14,)
(15,result)
(16,data)
(17,)
(18,(short)
(19,data = 0)
(20,globalReturnsTrueOrFalse()
(21,short)
(22,printIntLine(result)
(23,data)
(24,data)
(25,data++)
(26,SHRT_MAX)
(27,if(globalReturnsTrueOrFalse()
(28,RET)
(29,printIntLine(result)
(30,result = data)
(31,data)
(32,)
(33,)
(34,0)
(35,if (data < SHRT_MAX)
(36,)
(37,RAND32()
(38,data)
(39,)
(40,data)
(41,result = data)
(42,printLine("data value is too large to perform arithmetic safely.")
(43,globalReturnsTrueOrFalse()
(44,data)
(45,result)
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^