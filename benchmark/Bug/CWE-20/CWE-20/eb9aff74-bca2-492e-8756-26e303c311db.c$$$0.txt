-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_bad()
{
    twoIntsStruct * data;
    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType myUnion;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(twoIntsStruct));
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
67,68
67,69
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
91,93
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
98,99
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
108,109
112,113
113,114
113,115
113,116
113,117
114,115
116,117
118,119
120,121
120,122
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
132,133
132,134
133,134
-----nextToken-----
2,4,9,11,12,16,18,22,24,26,30,32,34,38,40,45,46,48,53,55,56,60,61,66,68,70,75,77,82,83,86,87,90,97,99,100,101,107,109,110,111,115,117,119,121,125,126,130,134,135
-----computeFrom-----
36,37
36,38
42,43
42,44
80,81
80,82
84,85
84,86
93,94
93,95
103,104
103,105
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_bad(){    twoIntsStruct * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType myUnion;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_bad
{    twoIntsStruct * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType myUnion;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34_unionType
myUnion
myUnion
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(41,43,0)
(7,9,0)
(58,18,0)
(41,59,0)
(28,2,0)
(13,28,0)
(2,28,0)
(6,31,0)
(37,18,0)
(47,30,0)
(48,27,0)
(50,30,0)
(33,47,0)
(49,7,0)
(26,27,0)
(9,17,0)
(21,9,0)
(25,48,0)
(59,41,0)
(10,31,0)
(14,49,0)
(15,57,0)
(56,38,0)
(0,9,0)
(29,7,0)
(59,6,0)
(55,20,0)
(54,18,0)
(39,27,0)
(28,20,0)
(9,7,0)
(53,20,0)
(43,17,0)
(9,6,0)
(47,20,0)
(11,59,0)
(44,59,0)
(27,18,0)
(24,18,0)
(22,6,0)
(8,25,0)
(23,17,0)
(45,20,0)
(3,60,0)
(35,22,0)
(46,47,0)
(31,18,0)
(34,48,0)
(5,57,0)
(1,22,0)
(60,38,0)
(43,41,0)
(30,47,0)
(51,20,0)
(17,31,0)
(6,22,0)
(7,49,0)
(2,56,0)
(30,60,0)
(19,2,0)
(12,51,0)
(52,6,0)
(48,18,0)
(36,45,0)
(32,28,0)
(57,17,0)
(42,56,0)
(40,51,0)
(16,25,0)
(48,34,1)
(43,41,1)
(40,12,1)
(35,1,1)
(14,29,1)
(51,40,1)
(48,27,1)
(55,53,1)
(13,60,1)
(26,39,1)
(8,16,1)
(36,56,1)
(9,7,1)
(28,32,1)
(28,20,1)
(42,2,1)
(20,55,1)
(33,46,1)
(21,51,1)
(0,21,1)
(51,20,1)
(34,25,1)
(59,6,1)
(19,28,1)
(2,28,1)
(3,30,1)
(1,52,1)
(46,51,1)
(45,20,1)
(4,43,1)
(52,48,1)
(59,11,1)
(56,42,1)
(30,47,1)
(60,3,1)
(30,50,1)
(22,35,1)
(50,47,1)
(9,6,1)
(11,44,1)
(16,27,1)
(45,36,1)
(7,49,1)
(53,6,1)
(29,0,1)
(41,59,1)
(6,22,1)
(32,13,1)
(27,26,1)
(44,9,1)
(47,33,1)
(12,45,1)
(25,8,1)
(47,20,1)
(2,19,1)
(49,14,1)
(12,20,1)
(9,6,2)
(2,51,2)
(48,27,2)
(32,51,2)
(60,51,2)
(59,6,2)
(9,7,2)
(43,41,2)
(12,51,2)
(41,59,2)
(45,51,2)
(42,51,2)
(51,51,2)
(36,51,2)
(40,51,2)
(47,51,2)
(50,51,2)
(30,51,2)
(33,51,2)
(2,28,2)
(13,51,2)
(3,51,2)
(51,20,2)
(19,51,2)
(28,20,2)
(28,51,2)
(30,47,2)
(47,20,2)
(7,49,2)
(45,20,2)
(56,51,2)
(6,22,2)
(46,51,2)
-----------------------------------
(0,source)
(1,myUnion)
(2,source[i].intTwo)
(3,0)
(4,RET)
(5,i)
(6,* data = myUnion.unionSecond)
(7,100*sizeof(twoIntsStruct)
(8,unionFirst)
(9,memmove(data, source, 100*sizeof(twoIntsStruct)
(10,data)
(11,0)
(12,i)
(13,source)
(14,twoIntsStruct)
(15,for (i = 0; i < 100; i++)
(16,myUnion)
(17,)
(18,)
(19,intTwo)
(20,i = 0)
(21,data)
(22,myUnion.unionSecond)
(23,source)
(24,dataGoodBuffer)
(25,myUnion.unionFirst)
(26,dataBadBuffer)
(27,data = dataBadBuffer)
(28,source[i])
(29,100)
(30,source[i].intOne)
(31,)
(32,i)
(33,i)
(34,data)
(35,unionSecond)
(36,i)
(37,dataBadBuffer)
(38,)
(39,data)
(40,100)
(41,&data[0])
(42,0)
(43,printStructLine(&data[0])
(44,data)
(45,i++)
(46,source)
(47,source[i])
(48,myUnion.unionFirst = data)
(49,sizeof(twoIntsStruct)
(50,intOne)
(51,i < 100)
(52,data)
(53,i)
(54,data)
(55,0)
(56,source[i].intTwo = 0)
(57,)
(58,myUnion)
(59,data[0])
(60,source[i].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^