-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
15,17
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
-----nextToken-----
2,4,5,7,9,10,14,19,22,24,27,29,32,33,37,39,44,46,49
-----computeFrom-----
17,18
17,19
28,29
28,30
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    return data;}
if(badStatic)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
badStatic
badStatic
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(1,0,0)
(0,1,0)
(15,9,0)
(0,16,0)
(19,5,0)
(16,13,0)
(9,10,0)
(2,19,0)
(10,9,0)
(24,22,0)
(23,11,0)
(10,21,0)
(12,0,0)
(22,16,0)
(6,22,0)
(22,11,0)
(16,0,0)
(0,12,0)
(16,11,0)
(7,5,0)
(4,23,0)
(8,13,0)
(5,1,0)
(14,17,0)
(23,16,0)
(22,17,0)
(20,23,0)
(18,16,0)
(1,5,0)
(5,19,0)
(5,19,1)
(20,4,1)
(1,5,1)
(15,23,1)
(9,15,1)
(16,0,1)
(18,3,1)
(24,22,1)
(6,3,1)
(19,2,1)
(4,16,1)
(6,10,1)
(16,11,1)
(22,11,1)
(6,23,1)
(23,20,1)
(7,18,1)
(0,12,1)
(0,1,1)
(10,9,1)
(2,7,1)
(22,6,1)
(23,11,1)
(22,16,1)
(23,16,1)
(23,11,2)
(22,11,2)
(15,23,2)
(4,3,2)
(18,3,2)
(10,23,2)
(5,19,2)
(16,0,2)
(0,12,2)
(5,3,2)
(19,3,2)
(10,9,2)
(20,3,2)
(2,3,2)
(0,1,2)
(1,3,2)
(23,16,2)
(16,11,2)
(9,23,2)
(23,3,2)
(16,3,2)
(1,5,2)
(24,22,2)
(22,16,2)
(7,3,2)
(0,3,2)
-----------------------------------
(0,(char *)
(1,malloc(10*sizeof(char)
(2,char)
(3,badStatic)
(4,data)
(5,10*sizeof(char)
(6,data)
(7,10)
(8,if (data == NULL)
(9,-1)
(10,exit(-1)
(11,char * data)
(12,char *)
(13,)
(14,if(badStatic)
(15,1)
(16,data = (char *)
(17,)
(18,data)
(19,sizeof(char)
(20,NULL)
(21,)
(22,return data;)
(23,data == NULL)
(24,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^