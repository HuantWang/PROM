-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrue())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
67,70
67,71
67,72
68,69
69,70
69,71
71,72
71,73
71,74
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
92,93
92,94
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,70,72,74,76,80,82,84,88,90,93,94,99,101,102,103,107,109,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
85,86
85,87
96,97
96,98
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrue())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(57,45,0)
(10,56,0)
(0,5,0)
(41,25,0)
(18,49,0)
(32,25,0)
(47,44,0)
(51,6,0)
(24,12,0)
(39,5,0)
(56,10,0)
(56,49,0)
(29,12,0)
(25,5,0)
(52,5,0)
(22,8,0)
(27,20,0)
(12,58,0)
(52,15,0)
(36,58,0)
(1,56,0)
(16,54,0)
(8,59,0)
(53,50,0)
(33,32,0)
(50,42,0)
(42,50,0)
(23,15,0)
(15,45,0)
(19,42,0)
(7,42,0)
(6,30,0)
(56,5,0)
(11,15,0)
(30,28,0)
(59,54,0)
(48,32,0)
(12,46,0)
(20,46,0)
(44,46,0)
(55,7,0)
(17,56,0)
(37,8,0)
(30,6,0)
(34,52,0)
(31,45,0)
(4,39,0)
(46,44,0)
(44,5,0)
(3,10,0)
(12,5,0)
(25,32,0)
(11,5,0)
(59,58,0)
(46,20,0)
(21,11,0)
(46,12,0)
(9,45,0)
(5,45,0)
(5,55,0)
(54,15,0)
(55,5,0)
(14,59,0)
(59,8,0)
(58,15,0)
(42,7,0)
(55,13,0)
(35,10,0)
(13,55,0)
(40,58,0)
(38,39,0)
(7,55,0)
(25,18,0)
(12,15,0)
(2,18,0)
(12,58,1)
(58,36,1)
(53,19,1)
(12,5,1)
(11,5,1)
(46,44,1)
(40,26,1)
(41,56,1)
(55,13,1)
(19,0,1)
(38,5,1)
(3,1,1)
(6,51,1)
(27,44,1)
(20,27,1)
(40,18,1)
(21,52,1)
(4,38,1)
(35,3,1)
(26,39,1)
(54,16,1)
(11,21,1)
(30,6,1)
(17,26,1)
(50,53,1)
(8,37,1)
(51,39,1)
(59,8,1)
(25,5,1)
(29,24,1)
(1,17,1)
(34,54,1)
(43,11,1)
(2,25,1)
(22,14,1)
(26,30,1)
(39,5,1)
(44,47,1)
(33,48,1)
(46,20,1)
(25,32,1)
(48,41,1)
(24,58,1)
(36,40,1)
(52,5,1)
(47,29,1)
(44,5,1)
(56,5,1)
(42,50,1)
(5,55,1)
(7,42,1)
(59,58,1)
(39,4,1)
(18,2,1)
(16,59,1)
(10,35,1)
(56,10,1)
(14,12,1)
(37,22,1)
(32,33,1)
(55,7,1)
(52,34,1)
(12,46,1)
(2,26,2)
(42,50,2)
(7,42,2)
(25,32,2)
(1,26,2)
(56,26,2)
(12,46,2)
(18,26,2)
(5,55,2)
(30,6,2)
(3,26,2)
(55,7,2)
(44,5,2)
(25,5,2)
(55,13,2)
(6,39,2)
(10,26,2)
(59,8,2)
(48,26,2)
(25,26,2)
(30,39,2)
(56,5,2)
(46,20,2)
(59,58,2)
(12,58,2)
(33,26,2)
(11,5,2)
(17,26,2)
(41,26,2)
(32,26,2)
(46,44,2)
(56,10,2)
(39,5,2)
(12,5,2)
(52,5,2)
(51,39,2)
(35,26,2)
-----------------------------------
(0,data)
(1,\\\'A\\\')
(2,\\\'\\\\0\\\')
(3,100)
(4,NULL)
(5,data = (char *)
(6,-1)
(7,malloc(100*sizeof(char)
(8,50-1)
(9,if (data == NULL)
(10,100-1)
(11,free(data)
(12,memmove(dest, data, strlen(data)
(13,char *)
(14,dest)
(15,)
(16,\\\'\\\\0\\\')
(17,data)
(18,data[100-1] = \\\'\\\\0\\\')
(19,100)
(20,sizeof(char)
(21,data)
(22,50)
(23,dest)
(24,dest)
(25,data[100-1])
(26,globalReturnsTrue()
(27,char)
(28,)
(29,data)
(30,exit(-1)
(31,data)
(32,100-1)
(33,1)
(34,data)
(35,1)
(36,"")
(37,1)
(38,data)
(39,data == NULL)
(40,dest)
(41,data)
(42,100*sizeof(char)
(43,RET)
(44,strlen(data)
(45,)
(46,strlen(data)
(47,data)
(48,100)
(49,)
(50,sizeof(char)
(51,1)
(52,printLine(data)
(53,char)
(54,dest[50-1] = \\\'\\\\0\\\')
(55,(char *)
(56,memset(data, \\\'A\\\', 100-1)
(57,if(globalReturnsTrue()
(58,dest[50] = "")
(59,dest[50-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^