-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad(){    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad
{    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));
source
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(55,56,0)
(63,51,0)
(39,27,0)
(40,8,0)
(14,35,0)
(53,26,0)
(5,43,0)
(27,16,0)
(10,26,0)
(52,39,0)
(43,16,0)
(5,60,0)
(16,26,0)
(37,42,0)
(19,35,0)
(31,61,0)
(18,5,0)
(47,26,0)
(17,57,0)
(63,61,0)
(39,31,0)
(6,16,0)
(23,6,0)
(51,48,0)
(1,27,0)
(15,61,0)
(21,4,0)
(48,51,0)
(9,43,0)
(54,31,0)
(22,46,0)
(57,0,0)
(11,54,0)
(7,56,0)
(31,26,0)
(29,36,0)
(0,57,0)
(50,29,0)
(42,26,0)
(6,31,0)
(2,54,0)
(8,16,0)
(25,31,0)
(51,63,0)
(57,12,0)
(43,5,0)
(36,38,0)
(13,46,0)
(35,16,0)
(20,43,0)
(61,15,0)
(3,52,0)
(32,26,0)
(34,16,0)
(54,42,0)
(58,0,0)
(61,31,0)
(35,46,0)
(4,26,0)
(62,51,0)
(12,16,0)
(30,60,0)
(24,4,0)
(45,12,0)
(49,52,0)
(36,29,0)
(46,35,0)
(44,39,0)
(39,52,0)
(28,0,0)
(60,5,0)
(43,31,0)
(41,48,0)
(56,31,0)
(8,31,0)
(61,63,0)
(56,55,1)
(19,42,1)
(52,3,1)
(58,17,1)
(9,20,1)
(13,14,1)
(10,4,1)
(22,13,1)
(50,56,1)
(1,39,1)
(5,60,1)
(20,12,1)
(12,45,1)
(43,31,1)
(46,22,1)
(30,18,1)
(31,61,1)
(57,0,1)
(23,8,1)
(62,25,1)
(8,40,1)
(48,41,1)
(14,19,1)
(17,35,1)
(40,27,1)
(60,30,1)
(39,52,1)
(3,49,1)
(37,54,1)
(18,9,1)
(33,6,1)
(36,29,1)
(35,46,1)
(8,31,1)
(45,57,1)
(28,58,1)
(61,63,1)
(6,23,1)
(4,24,1)
(2,36,1)
(43,5,1)
(63,51,1)
(2,56,1)
(42,37,1)
(0,28,1)
(24,21,1)
(27,1,1)
(61,15,1)
(6,31,1)
(54,11,1)
(7,31,1)
(51,48,1)
(44,43,1)
(56,31,1)
(29,50,1)
(54,31,1)
(11,2,1)
(49,44,1)
(55,7,1)
(39,31,1)
(25,10,1)
(41,62,1)
(54,31,2)
(6,31,2)
(43,31,2)
(5,60,2)
(36,56,2)
(61,15,2)
(8,31,2)
(61,63,2)
(56,31,2)
(57,0,2)
(39,52,2)
(29,56,2)
(35,46,2)
(51,48,2)
(39,31,2)
(36,29,2)
(63,51,2)
(31,61,2)
(43,5,2)
(50,56,2)
-----------------------------------
(0,100-1)
(1,'\\\\0')
(2,data)
(3,1)
(4,data = NULL)
(5,100*sizeof(char)
(6,free(data)
(7,data)
(8,printLine(data)
(9,source)
(10,goto source;)
(11,0)
(12,source[100-1] = '\\\\0')
(13,100)
(14,'C')
(15,char *)
(16,)
(17,source)
(18,100)
(19,source)
(20,data)
(21,data)
(22,1)
(23,data)
(24,NULL)
(25,data)
(26,)
(27,data[100-1] = '\\\\0')
(28,1)
(29,-1)
(30,char)
(31,data = (char *)
(32,source:)
(33,RET)
(34,source)
(35,memset(source, 'C', 100-1)
(36,exit(-1)
(37,'\\\\0')
(38,)
(39,data[100-1])
(40,data)
(41,char)
(42,data[0] = '\\\\0')
(43,memmove(data, source, 100*sizeof(char)
(44,data)
(45,'\\\\0')
(46,100-1)
(47,data)
(48,sizeof(char)
(49,100)
(50,1)
(51,50*sizeof(char)
(52,100-1)
(53,if (data == NULL)
(54,data[0])
(55,NULL)
(56,data == NULL)
(57,source[100-1])
(58,100)
(59,memset(source, \'C\', 100-1)
(60,sizeof(char)
(61,(char *)
(62,50)
(63,malloc(50*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^