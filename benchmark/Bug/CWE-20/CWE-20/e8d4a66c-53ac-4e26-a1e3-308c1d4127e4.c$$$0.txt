-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_15_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    switch(6)
    {
    case 6:
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
62,63
63,64
63,65
64,65
68,69
68,70
70,71
70,72
70,73
70,74
70,75
70,76
71,72
73,74
74,75
74,76
75,76
77,78
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,61,65,66,67,69,72,76,78,79,80,84,85,86
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_15_bad(){    long * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE415_Double_Free__malloc_free_long_15_bad()
CWE415_Double_Free__malloc_free_long_15_bad
{    long * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,21,0)
(4,44,0)
(14,21,0)
(17,20,0)
(37,4,0)
(5,26,0)
(42,3,0)
(19,15,0)
(34,22,0)
(1,21,0)
(40,22,0)
(22,21,0)
(29,34,0)
(19,0,0)
(27,20,0)
(10,4,0)
(30,20,0)
(26,43,0)
(2,38,0)
(42,7,0)
(15,19,0)
(32,21,0)
(9,20,0)
(28,30,0)
(3,42,0)
(38,20,0)
(39,15,0)
(7,5,0)
(24,44,0)
(6,21,0)
(26,22,0)
(5,7,0)
(33,21,0)
(7,42,0)
(11,14,0)
(38,4,0)
(36,44,0)
(25,6,0)
(8,21,0)
(38,22,0)
(6,22,0)
(26,5,0)
(23,34,0)
(43,26,0)
(41,7,0)
(16,44,0)
(22,26,0)
(31,20,0)
(13,17,1)
(6,25,1)
(39,34,1)
(35,4,1)
(14,11,1)
(12,33,1)
(11,35,1)
(34,22,1)
(33,6,1)
(38,2,1)
(19,15,1)
(13,27,1)
(30,28,1)
(42,3,1)
(41,40,1)
(42,41,1)
(4,37,1)
(40,35,1)
(34,23,1)
(23,29,1)
(7,42,1)
(25,34,1)
(2,12,1)
(28,12,1)
(32,14,1)
(38,22,1)
(12,32,1)
(26,43,1)
(25,19,1)
(38,4,1)
(29,22,1)
(17,38,1)
(26,5,1)
(37,10,1)
(15,39,1)
(6,22,1)
(27,30,1)
(5,7,1)
(22,26,1)
(17,12,2)
(32,35,2)
(39,34,2)
(5,35,2)
(38,22,2)
(23,35,2)
(26,35,2)
(34,22,2)
(22,26,2)
(38,12,2)
(28,12,2)
(38,4,2)
(26,5,2)
(14,35,2)
(22,35,2)
(27,12,2)
(33,35,2)
(26,43,2)
(7,35,2)
(42,35,2)
(6,22,2)
(19,15,2)
(34,35,2)
(19,34,2)
(41,35,2)
(25,35,2)
(11,35,2)
(7,42,2)
(6,35,2)
(5,7,2)
(42,3,2)
(29,35,2)
(40,35,2)
(30,12,2)
(2,12,2)
(15,34,2)
-----------------------------------
(0,)
(1,if (data == NULL)
(2,data)
(3,long)
(4,data = NULL)
(5,malloc(100*sizeof(long)
(6,free(data)
(7,100*sizeof(long)
(8,default:)
(9,default:)
(10,data)
(11,"Benign, fixed string")
(12,7)
(13,RET)
(14,printLine("Benign, fixed string")
(15,-1)
(16,switch(6)
(17,break;)
(18,case 6:)
(19,exit(-1)
(20,)
(21,)
(22,data = (long *)
(23,NULL)
(24,switch(7)
(25,data)
(26,(long *)
(27,break;)
(28,"Benign, fixed string")
(29,data)
(30,printLine("Benign, fixed string")
(31,case 7:)
(32,break;)
(33,break;)
(34,data == NULL)
(35,6)
(36,data)
(37,NULL)
(38,free(data)
(39,1)
(40,data)
(41,100)
(42,sizeof(long)
(43,long *)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^