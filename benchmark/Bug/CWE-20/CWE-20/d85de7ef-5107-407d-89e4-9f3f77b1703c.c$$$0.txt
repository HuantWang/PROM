-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,49,52,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
54,95
49,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_13_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(31,9,0)
(55,21,0)
(23,47,0)
(51,33,0)
(49,8,0)
(32,19,0)
(46,47,0)
(19,32,0)
(35,41,0)
(39,8,0)
(16,42,0)
(34,26,0)
(32,17,0)
(13,19,0)
(37,10,0)
(15,27,0)
(40,10,0)
(36,44,0)
(30,51,0)
(25,29,0)
(50,26,0)
(21,26,0)
(21,38,0)
(18,25,0)
(48,19,0)
(20,15,0)
(5,38,0)
(7,17,0)
(19,4,0)
(24,41,0)
(17,8,0)
(12,32,0)
(53,1,0)
(27,15,0)
(6,9,0)
(26,38,0)
(47,23,0)
(52,35,0)
(3,51,0)
(26,36,0)
(11,21,0)
(10,26,0)
(27,36,0)
(1,15,0)
(35,17,0)
(45,17,0)
(43,42,0)
(34,38,0)
(15,1,0)
(0,38,0)
(15,17,0)
(23,54,0)
(36,27,0)
(0,26,0)
(28,8,0)
(44,36,0)
(14,34,0)
(41,35,0)
(36,26,0)
(22,0,0)
(26,36,1)
(16,43,1)
(22,21,1)
(18,35,1)
(13,48,1)
(2,34,1)
(43,17,1)
(42,16,1)
(6,42,1)
(0,22,1)
(24,52,1)
(20,50,1)
(53,20,1)
(25,18,1)
(23,47,1)
(46,10,1)
(48,42,1)
(34,26,1)
(15,17,1)
(10,37,1)
(47,46,1)
(37,40,1)
(11,55,1)
(36,44,1)
(14,0,1)
(15,1,1)
(10,26,1)
(19,32,1)
(17,45,1)
(21,11,1)
(32,12,1)
(40,26,1)
(34,14,1)
(31,6,1)
(52,9,1)
(27,15,1)
(55,23,1)
(2,9,1)
(21,26,1)
(9,31,1)
(12,13,1)
(35,17,1)
(6,19,1)
(1,53,1)
(55,10,1)
(45,7,1)
(50,35,1)
(36,27,1)
(32,17,1)
(35,41,1)
(0,26,1)
(41,24,1)
(2,25,1)
(23,10,2)
(24,9,2)
(19,42,2)
(34,35,2)
(47,10,2)
(22,35,2)
(32,17,2)
(50,35,2)
(36,27,2)
(35,9,2)
(10,35,2)
(27,35,2)
(20,35,2)
(36,44,2)
(35,41,2)
(13,42,2)
(21,26,2)
(14,35,2)
(37,35,2)
(18,35,2)
(35,17,2)
(46,10,2)
(21,35,2)
(41,9,2)
(11,35,2)
(25,35,2)
(48,42,2)
(40,35,2)
(10,26,2)
(34,26,2)
(1,35,2)
(53,35,2)
(12,42,2)
(15,17,2)
(26,35,2)
(15,1,2)
(55,35,2)
(26,36,2)
(23,47,2)
(0,35,2)
(52,9,2)
(19,32,2)
(15,35,2)
(27,15,2)
(32,42,2)
(0,26,2)
(36,35,2)
-----------------------------------
(0,printWLine(myString)
(1,sizeof(wchar_t)
(2,RET)
(3,if (data > wcslen(HELLO_STRING)
(4,)
(5,if (myString == NULL)
(6,GLOBAL_CONST_FIVE)
(7,data)
(8,)
(9,GLOBAL_CONST_FIVE==5)
(10,myString == NULL)
(11,HELLO_STRING)
(12,data)
(13,"%zu")
(14,myString)
(15,data*sizeof(wchar_t)
(16,5)
(17,data = 0)
(18,"Input is less than the length of the source string")
(19,fscanf(stdin, "%zu", &data)
(20,data)
(21,wcscpy(myString, HELLO_STRING)
(22,myString)
(23,exit(-1)
(24,HELLO_STRING)
(25,printLine("Input is less than the length of the source string")
(26,myString = (wchar_t *)
(27,malloc(data*sizeof(wchar_t)
(28,if(GLOBAL_CONST_FIVE==5)
(29,)
(30,myString)
(31,5)
(32,&data)
(33,)
(34,free(myString)
(35,data > wcslen(HELLO_STRING)
(36,(wchar_t *)
(37,NULL)
(38,)
(39,if(GLOBAL_CONST_FIVE==5)
(40,myString)
(41,wcslen(HELLO_STRING)
(42,GLOBAL_CONST_FIVE==5)
(43,GLOBAL_CONST_FIVE)
(44,wchar_t *)
(45,0)
(46,1)
(47,-1)
(48,stdin)
(49,data)
(50,myString)
(51,)
(52,data)
(53,wchar_t)
(54,)
(55,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^