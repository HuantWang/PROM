-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad()
{
    size_t data;
    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    myUnion.unionFirst = data;
    {
        size_t data = myUnion.unionSecond;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
57,58
57,59
57,60
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,9,11,15,17,21,22,26,29,34,35,37,42,44,48,49,53,55,56,60,63,65,70,73,75,78,81,84,85,89,91,96,98,102,104,106,110,112,116,118,123,124
-----computeFrom-----
19,20
19,21
24,25
24,26
31,32
31,33
58,59
58,60
68,69
68,70
79,80
79,81
87,88
87,89
-----guardedBy-----
65,106
60,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad(){    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_bad
{    size_t data;    CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    myUnion.unionFirst = data;    {        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType myUnion;
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        size_t data = myUnion.unionSecond;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = myUnion.unionSecond;
size_t data = myUnion.unionSecond;
size_t
size_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(45,33,0)
(34,29,0)
(20,38,0)
(25,11,0)
(19,45,0)
(17,24,0)
(56,41,0)
(24,25,0)
(37,54,0)
(23,0,0)
(27,43,0)
(11,25,0)
(40,30,0)
(10,31,0)
(50,49,0)
(22,50,0)
(17,45,0)
(46,17,0)
(36,11,0)
(12,13,0)
(15,38,0)
(44,30,0)
(51,28,0)
(4,1,0)
(30,28,0)
(48,14,0)
(0,45,0)
(47,33,0)
(41,39,0)
(16,13,0)
(28,43,0)
(41,56,0)
(29,33,0)
(49,31,0)
(8,33,0)
(26,43,0)
(1,16,0)
(29,45,0)
(38,45,0)
(43,26,0)
(25,24,0)
(53,31,0)
(55,49,0)
(14,50,0)
(9,37,0)
(32,12,0)
(35,25,0)
(21,1,0)
(49,16,0)
(18,16,0)
(28,13,0)
(45,17,0)
(0,33,0)
(8,45,0)
(6,8,0)
(5,56,0)
(24,17,0)
(3,13,0)
(43,13,0)
(17,46,0)
(42,12,0)
(2,13,0)
(50,14,0)
(7,0,0)
(31,49,0)
(25,49,0)
(43,26,1)
(29,45,1)
(56,5,1)
(8,45,1)
(28,43,1)
(30,40,1)
(37,9,1)
(35,19,1)
(29,34,1)
(0,7,1)
(22,49,1)
(24,25,1)
(50,14,1)
(36,35,1)
(55,28,1)
(11,36,1)
(7,23,1)
(38,15,1)
(5,38,1)
(34,0,1)
(41,56,1)
(17,24,1)
(9,50,1)
(23,38,1)
(0,45,1)
(25,11,1)
(49,31,1)
(12,32,1)
(45,17,1)
(6,29,1)
(8,6,1)
(20,45,1)
(26,27,1)
(27,12,1)
(52,37,1)
(44,43,1)
(25,49,1)
(19,50,1)
(10,55,1)
(14,48,1)
(15,20,1)
(51,30,1)
(52,8,1)
(23,41,1)
(38,45,1)
(28,51,1)
(32,42,1)
(48,22,1)
(31,53,1)
(40,44,1)
(17,46,1)
(50,49,1)
(53,10,1)
(25,49,2)
(15,50,2)
(17,50,2)
(29,45,2)
(50,49,2)
(11,50,2)
(0,45,2)
(28,43,2)
(37,50,2)
(6,50,2)
(17,46,2)
(20,50,2)
(35,50,2)
(38,45,2)
(45,50,2)
(25,11,2)
(17,24,2)
(41,56,2)
(56,38,2)
(36,50,2)
(9,50,2)
(0,50,2)
(29,50,2)
(8,50,2)
(19,50,2)
(25,50,2)
(49,31,2)
(34,50,2)
(50,14,2)
(45,17,2)
(23,50,2)
(38,50,2)
(24,50,2)
(24,25,2)
(8,45,2)
(5,38,2)
(41,38,2)
(43,26,2)
(7,50,2)
-----------------------------------
(0,strcpy(myString, HELLO_STRING)
(1,)
(2,myUnion)
(3,data)
(4,if (data > strlen(HELLO_STRING)
(5,1)
(6,myString)
(7,HELLO_STRING)
(8,free(myString)
(9,"Input is less than the length of the source string")
(10,myUnion)
(11,sizeof(char)
(12,data = 0)
(13,)
(14,strlen(HELLO_STRING)
(15,NULL)
(16,)
(17,(char *)
(18,data)
(19,myString)
(20,myString)
(21,myString)
(22,data)
(23,myString)
(24,malloc(data*sizeof(char)
(25,data*sizeof(char)
(26,rand()
(27,data)
(28,myUnion.unionFirst = data)
(29,printLine(myString)
(30,myUnion.unionFirst)
(31,myUnion.unionSecond)
(32,0)
(33,)
(34,myString)
(35,data)
(36,char)
(37,printLine("Input is less than the length of the source string")
(38,myString == NULL)
(39,)
(40,unionFirst)
(41,exit(-1)
(42,data)
(43,data = rand()
(44,myUnion)
(45,myString = (char *)
(46,char *)
(47,if (myString == NULL)
(48,HELLO_STRING)
(49,data = myUnion.unionSecond)
(50,data > strlen(HELLO_STRING)
(51,data)
(52,RET)
(53,unionSecond)
(54,)
(55,data)
(56,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^