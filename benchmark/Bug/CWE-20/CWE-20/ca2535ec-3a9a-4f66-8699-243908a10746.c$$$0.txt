-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_postinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_max_postinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(34,21,0)
(18,39,0)
(39,38,0)
(22,37,0)
(4,27,0)
(22,38,0)
(36,22,0)
(41,15,0)
(29,22,0)
(15,32,0)
(3,25,0)
(14,32,0)
(26,22,0)
(19,32,0)
(0,32,0)
(22,32,0)
(31,34,0)
(39,32,0)
(9,27,0)
(44,14,0)
(7,37,0)
(0,38,0)
(14,34,0)
(11,32,0)
(5,23,0)
(24,0,0)
(38,33,0)
(13,5,0)
(20,38,0)
(24,34,0)
(14,38,0)
(1,27,0)
(35,38,0)
(40,24,0)
(6,39,0)
(28,36,0)
(10,25,0)
(32,8,0)
(25,27,0)
(15,37,0)
(0,34,0)
(16,0,0)
(15,38,0)
(42,12,0)
(36,37,0)
(17,0,0)
(35,43,1)
(11,19,1)
(40,0,1)
(20,35,1)
(25,3,1)
(30,38,1)
(39,32,1)
(32,11,1)
(14,38,1)
(2,36,1)
(0,32,1)
(0,38,1)
(16,17,1)
(38,20,1)
(19,43,1)
(15,38,1)
(28,22,1)
(2,5,1)
(5,13,1)
(3,10,1)
(2,24,1)
(15,41,1)
(30,32,1)
(39,38,1)
(24,40,1)
(43,25,1)
(0,16,1)
(22,38,1)
(13,39,1)
(18,6,1)
(14,44,1)
(26,15,1)
(17,14,1)
(15,32,1)
(44,30,1)
(24,0,1)
(36,22,1)
(14,32,1)
(29,26,1)
(36,28,1)
(6,30,1)
(22,32,1)
(22,29,1)
(41,39,1)
(39,18,1)
(24,0,2)
(15,32,2)
(38,43,2)
(40,30,2)
(35,43,2)
(39,38,2)
(26,39,2)
(22,32,2)
(44,30,2)
(15,38,2)
(14,30,2)
(36,39,2)
(39,30,2)
(32,43,2)
(22,38,2)
(13,39,2)
(16,30,2)
(17,30,2)
(24,30,2)
(6,30,2)
(0,38,2)
(22,39,2)
(5,39,2)
(18,30,2)
(41,39,2)
(15,39,2)
(29,39,2)
(0,32,2)
(0,30,2)
(20,43,2)
(36,22,2)
(11,43,2)
(39,32,2)
(14,38,2)
(28,39,2)
(14,32,2)
(19,43,2)
-----------------------------------
(0,result = data)
(1,if(globalReturnsTrueOrFalse()
(2,RET)
(3,0)
(4,if(globalReturnsTrueOrFalse()
(5,printLine("data value is too large to perform arithmetic safely.")
(6,data)
(7,result)
(8,)
(9,data)
(10,data)
(11,UINT_MAX)
(12,)
(13,"data value is too large to perform arithmetic safely.")
(14,data++)
(15,data++)
(16,data)
(17,result)
(18,UINT_MAX)
(19,data)
(20,2)
(21,)
(22,result = data)
(23,)
(24,printUnsignedLine(result)
(25,data = 0)
(26,result)
(27,)
(28,result)
(29,data)
(30,globalReturnsTrueOrFalse()
(31,result)
(32,data = UINT_MAX)
(33,)
(34,)
(35,data)
(36,printUnsignedLine(result)
(37,)
(38,data = 2)
(39,data < UINT_MAX)
(40,result)
(41,data)
(42,if (data < UINT_MAX)
(43,globalReturnsTrueOrFalse()
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^