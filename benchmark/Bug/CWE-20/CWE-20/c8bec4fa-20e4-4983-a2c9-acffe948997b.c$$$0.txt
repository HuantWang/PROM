-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
84,85
84,86
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,29,0)
(40,3,0)
(7,57,0)
(37,41,0)
(55,34,0)
(58,4,0)
(56,41,0)
(58,49,0)
(4,23,0)
(34,26,0)
(12,57,0)
(49,13,0)
(3,40,0)
(58,12,0)
(22,42,0)
(58,42,0)
(14,4,0)
(50,42,0)
(0,33,0)
(45,34,0)
(30,58,0)
(23,4,0)
(52,58,0)
(23,55,0)
(6,57,0)
(21,12,0)
(34,55,0)
(49,10,0)
(31,9,0)
(2,9,0)
(41,36,0)
(4,57,0)
(53,23,0)
(15,26,0)
(27,33,0)
(49,58,0)
(10,49,0)
(43,31,0)
(26,34,0)
(39,9,0)
(29,4,0)
(38,10,0)
(55,23,0)
(1,12,0)
(10,4,0)
(54,4,0)
(29,44,0)
(51,24,0)
(29,33,0)
(13,49,0)
(14,12,0)
(36,44,0)
(40,59,0)
(25,3,0)
(5,36,0)
(11,56,0)
(16,29,0)
(17,57,0)
(41,4,0)
(41,56,0)
(35,24,0)
(31,18,0)
(48,1,0)
(47,13,0)
(20,18,0)
(24,4,0)
(31,42,0)
(23,53,0)
(33,29,0)
(1,4,0)
(19,14,0)
(18,12,0)
(42,12,0)
(9,31,0)
(32,56,0)
(52,42,1)
(35,4,1)
(30,52,1)
(28,24,1)
(14,4,1)
(32,37,1)
(41,56,1)
(29,4,1)
(39,2,1)
(43,58,1)
(13,47,1)
(58,42,1)
(5,41,1)
(1,4,1)
(3,25,1)
(58,4,1)
(22,50,1)
(14,19,1)
(50,28,1)
(51,35,1)
(16,28,1)
(28,40,1)
(27,0,1)
(58,49,1)
(10,4,1)
(46,1,1)
(15,45,1)
(41,4,1)
(11,32,1)
(34,26,1)
(23,55,1)
(31,9,1)
(37,29,1)
(4,23,1)
(0,8,1)
(18,20,1)
(26,15,1)
(31,42,1)
(55,34,1)
(40,3,1)
(20,31,1)
(23,53,1)
(24,51,1)
(56,11,1)
(49,13,1)
(45,54,1)
(47,10,1)
(25,24,1)
(10,38,1)
(19,18,1)
(48,14,1)
(38,30,1)
(1,48,1)
(50,36,1)
(2,43,1)
(36,5,1)
(9,39,1)
(8,16,1)
(24,4,1)
(42,22,1)
(33,27,1)
(49,10,1)
(29,33,1)
(33,28,2)
(29,28,2)
(41,28,2)
(49,13,2)
(58,42,2)
(40,3,2)
(29,4,2)
(25,24,2)
(49,10,2)
(10,4,2)
(41,56,2)
(36,28,2)
(32,28,2)
(8,28,2)
(31,9,2)
(40,24,2)
(3,24,2)
(4,23,2)
(14,4,2)
(58,49,2)
(16,28,2)
(23,53,2)
(29,33,2)
(37,28,2)
(24,4,2)
(1,4,2)
(56,28,2)
(55,34,2)
(5,28,2)
(58,4,2)
(31,42,2)
(11,28,2)
(23,55,2)
(34,26,2)
(0,28,2)
(27,28,2)
(41,4,2)
-----------------------------------
(0,100)
(1,free(data)
(2,50)
(3,-1)
(4,data = (char *)
(5,\\\'\\\\0\\\')
(6,if (data == NULL)
(7,data)
(8,\\\'A\\\')
(9,50-1)
(10,strlen(data)
(11,1)
(12,)
(13,sizeof(char)
(14,printLine(data)
(15,char)
(16,data)
(17,if(GLOBAL_CONST_TRUE)
(18,dest[50-1] = \\\'\\\\0\\\')
(19,data)
(20,\\\'\\\\0\\\')
(21,dest)
(22,"")
(23,(char *)
(24,data == NULL)
(25,1)
(26,sizeof(char)
(27,1)
(28,GLOBAL_CONST_TRUE)
(29,memset(data, \\\'A\\\', 100-1)
(30,data)
(31,dest[50-1])
(32,100)
(33,100-1)
(34,100*sizeof(char)
(35,data)
(36,data[100-1] = \\\'\\\\0\\\')
(37,data)
(38,data)
(39,1)
(40,exit(-1)
(41,data[100-1])
(42,dest[50] = "")
(43,dest)
(44,)
(45,100)
(46,RET)
(47,char)
(48,data)
(49,strlen(data)
(50,dest)
(51,NULL)
(52,dest)
(53,char *)
(54,data)
(55,malloc(100*sizeof(char)
(56,100-1)
(57,)
(58,memcpy(dest, data, strlen(data)
(59,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^