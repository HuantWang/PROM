-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    else
    {
        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, strlen(data), "%s", data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
87,89
87,90
87,91
88,89
89,90
89,91
91,92
91,93
91,94
93,94
95,96
97,98
98,99
98,100
98,101
98,102
98,103
99,100
101,102
103,104
103,105
104,105
106,107
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,71,73,74,76,77,82,84,85,86,90,92,94,96,100,102,105,107,108,110,114,116,120,122
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
SNPRINTF(dest, strlen(data), "%s", data);
SNPRINTF(dest, strlen(data), "%s", data)
SNPRINTF
SNPRINTF
dest
dest
strlen(data)
strlen
strlen
data
data
"%s"
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(6,32,0)
(14,37,0)
(53,18,0)
(61,30,0)
(21,47,0)
(43,52,0)
(49,8,0)
(14,21,0)
(32,6,0)
(4,36,0)
(30,46,0)
(52,28,0)
(6,47,0)
(55,63,0)
(6,12,0)
(17,54,0)
(64,39,0)
(51,12,0)
(64,48,0)
(38,18,0)
(20,37,0)
(63,47,0)
(16,57,0)
(7,43,0)
(54,47,0)
(60,32,0)
(9,47,0)
(29,11,0)
(2,46,0)
(62,37,0)
(31,18,0)
(63,56,0)
(64,47,0)
(42,46,0)
(41,32,0)
(56,63,0)
(9,30,0)
(3,46,0)
(45,8,0)
(63,30,0)
(23,53,0)
(53,44,0)
(21,14,0)
(12,39,0)
(47,21,0)
(35,64,0)
(25,56,0)
(57,47,0)
(53,47,0)
(26,53,0)
(0,21,0)
(19,63,0)
(13,36,0)
(33,48,0)
(24,62,0)
(40,8,0)
(21,0,0)
(10,9,0)
(50,63,0)
(1,64,0)
(52,43,0)
(47,46,0)
(59,57,0)
(37,62,0)
(8,49,0)
(15,49,0)
(48,64,0)
(63,36,0)
(11,44,0)
(54,30,0)
(22,47,0)
(58,48,0)
(27,6,0)
(49,11,0)
(36,30,0)
(37,14,0)
(18,53,0)
(56,47,0)
(49,47,0)
(64,48,1)
(53,47,1)
(10,54,1)
(64,47,1)
(53,18,1)
(62,24,1)
(19,55,1)
(45,40,1)
(12,51,1)
(57,16,1)
(40,15,1)
(63,56,1)
(8,45,1)
(13,12,1)
(59,47,1)
(6,32,1)
(52,43,1)
(36,4,1)
(20,22,1)
(4,13,1)
(25,50,1)
(54,17,1)
(34,9,1)
(26,23,1)
(51,6,1)
(48,58,1)
(9,10,1)
(14,37,1)
(18,31,1)
(15,53,1)
(47,21,1)
(63,19,1)
(24,20,1)
(29,49,1)
(37,62,1)
(49,8,1)
(58,33,1)
(17,63,1)
(21,0,1)
(32,41,1)
(41,60,1)
(35,5,1)
(16,59,1)
(21,14,1)
(13,11,1)
(9,47,1)
(49,47,1)
(23,5,1)
(54,47,1)
(5,52,1)
(33,1,1)
(43,7,1)
(56,25,1)
(38,26,1)
(1,35,1)
(7,57,1)
(60,27,1)
(63,36,1)
(5,57,1)
(6,47,1)
(31,38,1)
(57,47,1)
(50,36,1)
(11,29,1)
(56,47,1)
(27,64,1)
(63,47,1)
(55,56,1)
(1,5,2)
(58,5,2)
(64,48,2)
(26,5,2)
(49,5,2)
(53,47,2)
(43,57,2)
(6,5,2)
(21,0,2)
(23,5,2)
(47,21,2)
(63,47,2)
(21,14,2)
(57,47,2)
(15,5,2)
(35,5,2)
(7,57,2)
(53,18,2)
(60,5,2)
(51,5,2)
(32,5,2)
(6,47,2)
(52,43,2)
(49,47,2)
(6,32,2)
(40,5,2)
(29,5,2)
(38,5,2)
(63,36,2)
(37,62,2)
(64,5,2)
(41,5,2)
(27,5,2)
(63,56,2)
(52,57,2)
(11,5,2)
(31,5,2)
(8,5,2)
(45,5,2)
(18,5,2)
(53,5,2)
(64,47,2)
(12,5,2)
(33,5,2)
(9,47,2)
(48,5,2)
(14,37,2)
(56,47,2)
(54,47,2)
(49,8,2)
-----------------------------------
(0,char *)
(1,\\\'A\\\')
(2,data)
(3,if (data == NULL)
(4,"")
(5,globalReturnsTrueOrFalse()
(6,data[50-1])
(7,1)
(8,100-1)
(9,free(data)
(10,data)
(11,data[100-1] = \\\'\\\\0\\\')
(12,data[50-1] = \\\'\\\\0\\\')
(13,dest)
(14,malloc(100*sizeof(char)
(15,data)
(16,NULL)
(17,data)
(18,100-1)
(19,data)
(20,100)
(21,(char *)
(22,data)
(23,data)
(24,char)
(25,data)
(26,\\\'A\\\')
(27,data)
(28,)
(29,\\\'\\\\0\\\')
(30,)
(31,1)
(32,50-1)
(33,50)
(34,RET)
(35,data)
(36,dest[50] = "")
(37,100*sizeof(char)
(38,100)
(39,)
(40,100)
(41,1)
(42,if(globalReturnsTrueOrFalse()
(43,-1)
(44,)
(45,1)
(46,)
(47,data = (char *)
(48,50-1)
(49,data[100-1])
(50,dest)
(51,\\\'\\\\0\\\')
(52,exit(-1)
(53,memset(data, \\\'A\\\', 100-1)
(54,printLine(data)
(55,"%s")
(56,strlen(data)
(57,data == NULL)
(58,1)
(59,data)
(60,50)
(61,dest)
(62,sizeof(char)
(63,SNPRINTF(dest, strlen(data)
(64,memset(data, \\\'A\\\', 50-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^