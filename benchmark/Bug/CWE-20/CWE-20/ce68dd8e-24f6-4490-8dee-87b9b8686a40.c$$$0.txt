-----label-----
1
-----code-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_18_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    goto source;
source:
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    goto sink;
sink:
    {
        wchar_t dest[100] = L"";
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        SNPRINTF(dest, 100-1, data);
        printWLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
29,30
29,31
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
119,120
121,122
121,123
123,124
123,125
123,126
124,125
125,126
125,127
127,128
127,129
127,130
129,130
131,132
133,134
134,135
134,136
134,137
134,138
135,136
137,138
139,140
139,141
142,143
144,145
145,146
145,147
146,147
148,149
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,28,30,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,120,122,126,128,130,132,136,138,140,141,143,147,149
-----computeFrom-----
22,23
22,24
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
139,140
139,141
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_18_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    goto source;source:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    goto sink;sink:    {        wchar_t dest[100] = L"";        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        SNPRINTF(dest, 100-1, data);        printWLine(dest);    }}
void
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_18_bad()
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_18_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    goto source;source:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    goto sink;sink:    {        wchar_t dest[100] = L"";        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        SNPRINTF(dest, 100-1, data);        printWLine(dest);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
source
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
goto sink;
sink
sink:    {        wchar_t dest[100] = L"";        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        SNPRINTF(dest, 100-1, data);        printWLine(dest);    }
sink
{        wchar_t dest[100] = L"";        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        SNPRINTF(dest, 100-1, data);        printWLine(dest);    }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(23,10,0)
(61,51,0)
(58,0,0)
(24,10,0)
(50,28,0)
(47,10,0)
(40,12,0)
(0,43,0)
(38,47,0)
(35,13,0)
(8,54,0)
(17,5,0)
(0,40,0)
(1,28,0)
(29,13,0)
(29,53,0)
(16,47,0)
(59,28,0)
(31,5,0)
(53,28,0)
(47,40,0)
(27,10,0)
(11,38,0)
(33,23,0)
(40,0,0)
(27,45,0)
(32,28,0)
(9,28,0)
(5,28,0)
(13,29,0)
(14,49,0)
(55,5,0)
(30,29,0)
(10,63,0)
(54,43,0)
(62,53,0)
(48,27,0)
(47,38,0)
(37,32,0)
(2,32,0)
(42,38,0)
(15,54,0)
(47,49,0)
(41,28,0)
(44,54,0)
(36,29,0)
(29,32,0)
(52,22,0)
(21,13,0)
(34,6,0)
(60,28,0)
(18,15,0)
(43,5,0)
(54,15,0)
(46,43,0)
(38,32,0)
(39,24,0)
(56,53,0)
(43,6,0)
(3,62,0)
(10,24,0)
(38,43,0)
(49,47,0)
(12,40,0)
(51,22,0)
(20,45,0)
(26,0,0)
(6,43,0)
(4,24,0)
(40,47,0)
(6,32,0)
(25,10,0)
(19,63,0)
(57,23,0)
(60,23,1)
(62,3,1)
(47,10,1)
(25,15,1)
(60,15,1)
(48,49,1)
(44,43,1)
(11,42,1)
(54,43,1)
(40,0,1)
(37,2,1)
(15,54,1)
(26,38,1)
(29,13,1)
(14,47,1)
(40,12,1)
(29,30,1)
(15,18,1)
(60,27,1)
(27,10,1)
(38,43,1)
(46,9,1)
(7,62,1)
(10,24,1)
(56,60,1)
(43,6,1)
(39,25,1)
(30,13,1)
(49,47,1)
(47,38,1)
(47,16,1)
(6,34,1)
(36,56,1)
(33,10,1)
(57,33,1)
(3,29,1)
(61,49,1)
(34,46,1)
(9,32,1)
(23,10,1)
(47,40,1)
(18,54,1)
(27,48,1)
(48,52,1)
(51,61,1)
(24,4,1)
(0,43,1)
(38,11,1)
(58,26,1)
(23,57,1)
(29,32,1)
(32,37,1)
(54,8,1)
(8,44,1)
(16,40,1)
(6,32,1)
(2,1,1)
(38,32,1)
(4,39,1)
(49,14,1)
(42,23,1)
(0,58,1)
(13,35,1)
(21,36,1)
(35,21,1)
(52,51,1)
(38,32,2)
(10,24,2)
(40,23,2)
(4,15,2)
(16,23,2)
(47,38,2)
(33,15,2)
(10,15,2)
(54,43,2)
(40,12,2)
(0,43,2)
(38,23,2)
(25,15,2)
(15,54,2)
(11,23,2)
(61,49,2)
(43,6,2)
(14,23,2)
(39,15,2)
(42,23,2)
(57,15,2)
(27,10,2)
(52,49,2)
(29,32,2)
(27,23,2)
(23,15,2)
(49,47,2)
(38,43,2)
(24,15,2)
(0,23,2)
(58,23,2)
(40,0,2)
(47,40,2)
(6,32,2)
(48,23,2)
(49,23,2)
(47,23,2)
(29,13,2)
(51,49,2)
(26,23,2)
(47,10,2)
(23,10,2)
-----------------------------------
(0,100-dataLen)
(1,"")
(2,data)
(3,dest)
(4,"r")
(5,)
(6,wcslen(data)
(7,RET)
(8,dataLen)
(9,goto source;)
(10,pFile = fopen(FILENAME, "r")
(11,dataLen)
(12,int)
(13,100-1)
(14,NULL)
(15,100-dataLen > 1)
(16,pFile)
(17,if (100-dataLen > 1)
(18,1)
(19,if (pFile != NULL)
(20,if (fgetws(data+dataLen, (int)
(21,100)
(22,)
(23,pFile != NULL)
(24,fopen(FILENAME, "r")
(25,pFile)
(26,100)
(27,fclose(pFile)
(28,)
(29,SNPRINTF(dest, 100-1, data)
(30,data)
(31,pFile)
(32,data = dataBuffer)
(33,pFile)
(34,data)
(35,1)
(36,dest)
(37,dataBuffer)
(38,data+dataLen)
(39,FILENAME)
(40,(int)
(41,source:)
(42,data)
(43,dataLen = wcslen(data)
(44,100)
(45,)
(46,dataLen)
(47,fgetws(data+dataLen, (int)
(48,pFile)
(49,fgetws(data+dataLen, (int)
(50,data)
(51,printLine("fgetws()
(52,\\\'\\\\0\\\')
(53,)
(54,100-dataLen)
(55,dataLen)
(56,"")
(57,NULL)
(58,dataLen)
(59,sink:)
(60,goto sink;)
(61,"fgetws()
(62,printWLine(dest)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^