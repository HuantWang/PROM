-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad()
{
    int i;
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
69,70
69,71
72,73
73,74
73,75
74,75
74,76
75,76
77,78
77,79
81,82
81,83
81,84
81,85
81,86
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
106,107
106,108
109,110
110,111
110,112
111,112
111,113
112,113
114,115
114,116
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,28,30,33,34,38,40,45,47,52,53,56,57,60,65,67,68,70,71,76,78,79,80,84,86,88,90,94,96,98,102,104,107,108,113,115,116,117,121,123,127,129
-----computeFrom-----
18,19
18,20
29,30
29,31
36,37
36,38
50,51
50,52
54,55
54,56
69,70
69,71
73,74
73,75
77,78
77,79
99,100
99,101
110,111
110,112
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad(){    int i;    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad
{    int i;    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for(i = 0; i < 1; i++)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(67,41,0)
(13,57,0)
(37,44,0)
(52,3,0)
(46,42,0)
(63,16,0)
(37,65,0)
(16,57,0)
(14,57,0)
(44,37,0)
(15,57,0)
(58,41,0)
(6,13,0)
(10,16,0)
(16,9,0)
(65,37,0)
(16,5,0)
(51,14,0)
(29,57,0)
(40,18,0)
(18,3,0)
(59,20,0)
(18,45,0)
(67,46,0)
(31,51,0)
(55,51,0)
(48,14,0)
(46,36,0)
(35,53,0)
(61,28,0)
(47,46,0)
(33,45,0)
(27,53,0)
(39,66,0)
(2,42,0)
(15,36,0)
(5,16,0)
(41,67,0)
(14,20,0)
(3,36,0)
(7,53,0)
(44,4,0)
(50,7,0)
(57,37,0)
(12,13,0)
(34,46,0)
(36,66,0)
(30,15,0)
(0,27,0)
(1,66,0)
(25,5,0)
(32,62,0)
(26,61,0)
(45,18,0)
(8,42,0)
(23,36,0)
(28,64,0)
(14,51,0)
(67,17,0)
(54,27,0)
(18,42,0)
(24,53,0)
(37,57,0)
(21,36,0)
(57,66,0)
(4,62,0)
(17,67,0)
(4,44,0)
(62,4,0)
(21,57,0)
(20,9,0)
(60,5,0)
(28,61,0)
(42,36,0)
(49,4,0)
(46,57,0)
(19,17,0)
(46,67,0)
(11,66,0)
(43,66,0)
(17,57,0)
(38,45,0)
(22,21,0)
(67,17,1)
(0,7,1)
(33,38,1)
(24,28,1)
(24,13,1)
(45,33,1)
(27,54,1)
(48,16,1)
(16,5,1)
(46,42,1)
(21,22,1)
(67,41,1)
(63,27,1)
(17,57,1)
(37,44,1)
(47,34,1)
(18,42,1)
(21,57,1)
(46,67,1)
(2,8,1)
(44,4,1)
(55,31,1)
(14,57,1)
(20,59,1)
(49,29,1)
(32,49,1)
(50,20,1)
(27,53,1)
(13,57,1)
(28,61,1)
(15,57,1)
(25,10,1)
(58,17,1)
(18,45,1)
(42,2,1)
(51,55,1)
(61,26,1)
(54,0,1)
(19,47,1)
(34,42,1)
(12,57,1)
(10,63,1)
(26,13,1)
(30,3,1)
(62,32,1)
(7,50,1)
(8,27,1)
(46,57,1)
(22,15,1)
(35,24,1)
(31,48,1)
(17,19,1)
(40,46,1)
(16,57,1)
(3,52,1)
(0,53,1)
(41,58,1)
(5,60,1)
(59,14,1)
(14,51,1)
(6,12,1)
(37,65,1)
(38,40,1)
(56,21,1)
(4,62,1)
(57,37,1)
(13,6,1)
(53,35,1)
(7,53,1)
(15,30,1)
(60,25,1)
(52,18,1)
(55,27,2)
(60,27,2)
(14,51,2)
(13,57,2)
(18,45,2)
(16,27,2)
(59,27,2)
(10,27,2)
(67,17,2)
(15,57,2)
(7,53,2)
(63,27,2)
(5,27,2)
(27,27,2)
(26,13,2)
(17,57,2)
(27,53,2)
(48,27,2)
(21,57,2)
(16,5,2)
(7,27,2)
(37,65,2)
(16,57,2)
(61,13,2)
(51,27,2)
(44,4,2)
(14,57,2)
(54,27,2)
(14,27,2)
(46,57,2)
(28,13,2)
(37,44,2)
(20,27,2)
(67,41,2)
(18,42,2)
(46,42,2)
(28,61,2)
(0,27,2)
(31,27,2)
(57,37,2)
(4,62,2)
(25,27,2)
(46,67,2)
(50,27,2)
-----------------------------------
(0,i)
(1,for(i = 0; i < 1; i++)
(2,"")
(3,dest[50-1] = \\\'\\\\0\\\')
(4,100*sizeof(char)
(5,100-1)
(6,NULL)
(7,i++)
(8,dest)
(9,)
(10,\\\'A\\\')
(11,if (data == NULL)
(12,data)
(13,data == NULL)
(14,data[100-1])
(15,printLine(data)
(16,memset(data, \\\'A\\\', 100-1)
(17,strlen(data)
(18,dest[50-1])
(19,data)
(20,data[100-1] = \\\'\\\\0\\\')
(21,free(data)
(22,data)
(23,dest)
(24,i)
(25,100)
(26,1)
(27,i < 1)
(28,exit(-1)
(29,data)
(30,data)
(31,100)
(32,char)
(33,1)
(34,dest)
(35,0)
(36,)
(37,(char *)
(38,50)
(39,i)
(40,dest)
(41,sizeof(char)
(42,dest[50] = "")
(43,data)
(44,malloc(100*sizeof(char)
(45,50-1)
(46,memcpy(dest, data, strlen(data)
(47,data)
(48,data)
(49,100)
(50,i)
(51,100-1)
(52,\\\'\\\\0\\\')
(53,i = 0)
(54,1)
(55,1)
(56,RET)
(57,data = (char *)
(58,char)
(59,\\\'\\\\0\\\')
(60,1)
(61,-1)
(62,sizeof(char)
(63,data)
(64,)
(65,char *)
(66,)
(67,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^