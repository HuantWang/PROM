-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
56,57
57,58
57,59
58,59
60,61
60,62
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
81,82
82,83
84,85
84,86
85,86
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
101,102
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
110,111
112,113
112,114
112,115
112,116
113,114
114,115
114,116
115,116
118,119
118,120
119,120
122,123
123,124
125,126
126,127
127,128
127,129
128,129
128,130
129,130
131,132
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,61,63,68,70,75,76,79,80,83,90,92,93,94,100,102,103,104,109,111,116,117,120,121,124,130,132,135,137,141,145,146,150,152
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
73,74
73,75
77,78
77,79
86,87
86,88
96,97
96,98
114,115
114,116
118,119
118,120
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(54,76,0)
(11,12,0)
(66,69,0)
(42,13,0)
(42,9,0)
(73,60,0)
(56,25,0)
(21,79,0)
(24,18,0)
(13,51,0)
(72,57,0)
(46,9,0)
(79,29,0)
(17,70,0)
(12,75,0)
(35,25,0)
(60,33,0)
(69,19,0)
(30,12,0)
(78,33,0)
(7,13,0)
(26,36,0)
(40,31,0)
(17,73,0)
(56,51,0)
(70,9,0)
(21,43,0)
(76,75,0)
(67,29,0)
(58,75,0)
(61,32,0)
(40,75,0)
(53,67,0)
(25,56,0)
(6,67,0)
(71,33,0)
(19,52,0)
(51,56,0)
(73,17,0)
(62,73,0)
(76,54,0)
(8,40,0)
(3,75,0)
(63,29,0)
(79,21,0)
(16,60,0)
(57,13,0)
(5,79,0)
(25,32,0)
(67,60,0)
(64,39,0)
(74,57,0)
(49,54,0)
(2,76,0)
(51,45,0)
(59,75,0)
(55,31,0)
(31,15,0)
(65,40,0)
(47,50,0)
(19,69,0)
(23,73,0)
(4,76,0)
(20,42,0)
(15,37,0)
(36,29,0)
(48,58,0)
(1,29,0)
(77,9,0)
(73,13,0)
(22,50,0)
(34,37,0)
(51,13,0)
(45,51,0)
(41,15,0)
(10,47,0)
(13,18,0)
(27,34,0)
(54,34,0)
(67,13,0)
(50,33,0)
(9,50,0)
(67,21,0)
(39,29,0)
(32,25,0)
(44,60,0)
(28,39,0)
(42,60,0)
(14,47,0)
(70,17,0)
(31,40,0)
(38,79,0)
(67,6,1)
(28,64,1)
(12,75,1)
(23,39,1)
(0,42,1)
(49,76,1)
(48,34,1)
(53,39,1)
(36,29,1)
(4,2,1)
(79,29,1)
(65,12,1)
(61,35,1)
(19,69,1)
(29,63,1)
(55,40,1)
(63,1,1)
(73,13,1)
(27,54,1)
(34,27,1)
(54,49,1)
(76,75,1)
(57,13,1)
(42,20,1)
(36,26,1)
(38,5,1)
(17,73,1)
(51,56,1)
(32,61,1)
(59,68,1)
(58,48,1)
(59,19,1)
(59,57,1)
(42,13,1)
(39,28,1)
(30,75,1)
(64,29,1)
(76,4,1)
(73,62,1)
(79,38,1)
(1,12,1)
(13,51,1)
(2,15,1)
(8,65,1)
(67,13,1)
(56,25,1)
(16,44,1)
(74,13,1)
(30,58,1)
(31,40,1)
(73,60,1)
(31,55,1)
(11,30,1)
(57,72,1)
(72,74,1)
(64,36,1)
(58,75,1)
(41,31,1)
(6,53,1)
(69,66,1)
(70,17,1)
(39,29,1)
(25,32,1)
(26,21,1)
(54,76,1)
(75,3,1)
(42,60,1)
(67,60,1)
(21,79,1)
(5,67,1)
(7,68,1)
(12,11,1)
(67,29,1)
(66,57,1)
(3,59,1)
(15,41,1)
(40,8,1)
(68,60,1)
(60,16,1)
(40,75,1)
(51,45,1)
(35,7,1)
(20,70,1)
(62,23,1)
(48,12,2)
(5,39,2)
(61,68,2)
(51,68,2)
(49,12,2)
(19,57,2)
(4,12,2)
(74,68,2)
(53,39,2)
(57,68,2)
(30,12,2)
(41,12,2)
(65,12,2)
(12,12,2)
(35,68,2)
(27,12,2)
(40,75,2)
(57,13,2)
(25,68,2)
(13,51,2)
(42,60,2)
(25,32,2)
(76,12,2)
(73,60,2)
(70,17,2)
(31,12,2)
(42,13,2)
(40,12,2)
(21,39,2)
(51,45,2)
(67,13,2)
(56,68,2)
(51,56,2)
(2,12,2)
(32,68,2)
(72,68,2)
(67,60,2)
(56,25,2)
(21,79,2)
(34,12,2)
(19,69,2)
(64,39,2)
(11,12,2)
(58,12,2)
(79,29,2)
(6,39,2)
(26,39,2)
(8,12,2)
(39,29,2)
(76,75,2)
(69,57,2)
(58,75,2)
(17,73,2)
(79,39,2)
(66,57,2)
(67,29,2)
(38,39,2)
(54,76,2)
(7,68,2)
(13,68,2)
(28,39,2)
(39,39,2)
(36,39,2)
(54,12,2)
(36,29,2)
(73,13,2)
(31,40,2)
(15,12,2)
(67,39,2)
(12,75,2)
(55,12,2)
-----------------------------------
(0,RET)
(1,i)
(2,source)
(3,0)
(4,i)
(5,source)
(6,i)
(7,data)
(8,i)
(9,)
(10,i)
(11,100)
(12,i < 100)
(13,data = (twoIntsStruct *)
(14,for (i = 0; i < 100; i++)
(15,source[i].intOne = 0)
(16,NULL)
(17,&data[0])
(18,)
(19,exit(-1)
(20,data)
(21,data[i] = source[i])
(22,source)
(23,data)
(24,if (data == NULL)
(25,50*sizeof(twoIntsStruct)
(26,i)
(27,0)
(28,100)
(29,i = 0)
(30,i)
(31,source[i].intOne)
(32,sizeof(twoIntsStruct)
(33,)
(34,source[i].intTwo = 0)
(35,50)
(36,i++)
(37,)
(38,i)
(39,i < 100)
(40,source[i])
(41,0)
(42,free(data)
(43,)
(44,data)
(45,twoIntsStruct *)
(46,for (i = 0; i < 100; i++)
(47,)
(48,i)
(49,intTwo)
(50,)
(51,(twoIntsStruct *)
(52,)
(53,data)
(54,source[i].intTwo)
(55,intOne)
(56,malloc(50*sizeof(twoIntsStruct)
(57,data == NULL)
(58,i++)
(59,i)
(60,data = NULL)
(61,twoIntsStruct)
(62,0)
(63,0)
(64,i)
(65,source)
(66,1)
(67,data[i])
(68,1)
(69,-1)
(70,printStructLine(&data[0])
(71,if(1)
(72,NULL)
(73,data[0])
(74,data)
(75,i = 0)
(76,source[i])
(77,i)
(78,data)
(79,source[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^