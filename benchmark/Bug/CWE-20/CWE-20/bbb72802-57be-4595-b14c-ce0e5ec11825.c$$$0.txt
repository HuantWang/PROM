-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_struct_13_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,61,63,67,68,73,75
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_struct_13_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_struct_13_bad()
CWE415_Double_Free__malloc_free_struct_13_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,35,0)
(35,20,0)
(28,7,0)
(1,34,0)
(20,23,0)
(17,1,0)
(21,15,0)
(15,16,0)
(20,35,0)
(26,14,0)
(24,5,0)
(30,20,0)
(36,29,0)
(6,1,0)
(32,35,0)
(15,23,0)
(27,34,0)
(23,20,0)
(19,26,0)
(12,35,0)
(2,12,0)
(20,30,0)
(3,10,0)
(12,13,0)
(31,7,0)
(26,19,0)
(8,13,0)
(22,19,0)
(33,34,0)
(11,5,0)
(23,15,0)
(29,1,0)
(16,15,0)
(35,13,0)
(29,35,0)
(4,10,0)
(25,34,0)
(29,18,0)
(0,16,0)
(5,11,1)
(12,35,1)
(7,31,1)
(31,28,1)
(10,3,1)
(9,10,1)
(35,20,1)
(20,30,1)
(11,24,1)
(29,1,1)
(7,35,1)
(16,0,1)
(2,26,1)
(20,23,1)
(3,4,1)
(15,16,1)
(9,29,1)
(1,6,1)
(32,5,1)
(36,10,1)
(2,7,1)
(29,36,1)
(0,21,1)
(28,35,1)
(19,22,1)
(4,5,1)
(29,35,1)
(4,12,1)
(12,2,1)
(23,15,1)
(24,1,1)
(22,7,1)
(6,17,1)
(21,32,1)
(26,19,1)
(28,5,2)
(12,35,2)
(16,5,2)
(35,20,2)
(32,5,2)
(31,5,2)
(29,35,2)
(29,10,2)
(12,5,2)
(20,5,2)
(23,15,2)
(7,35,2)
(26,7,2)
(15,5,2)
(35,5,2)
(20,30,2)
(15,16,2)
(26,19,2)
(2,5,2)
(29,1,2)
(22,7,2)
(23,5,2)
(36,10,2)
(21,5,2)
(7,5,2)
(20,23,2)
(19,7,2)
(0,5,2)
-----------------------------------
(0,twoIntsStruct)
(1,data = NULL)
(2,data)
(3,5)
(4,GLOBAL_CONST_FIVE)
(5,GLOBAL_CONST_FIVE==5)
(6,NULL)
(7,data == NULL)
(8,if (data == NULL)
(9,RET)
(10,GLOBAL_CONST_FIVE==5)
(11,5)
(12,free(data)
(13,)
(14,)
(15,100*sizeof(twoIntsStruct)
(16,sizeof(twoIntsStruct)
(17,data)
(18,)
(19,-1)
(20,(twoIntsStruct *)
(21,100)
(22,1)
(23,malloc(100*sizeof(twoIntsStruct)
(24,GLOBAL_CONST_FIVE)
(25,if(GLOBAL_CONST_FIVE==5)
(26,exit(-1)
(27,data)
(28,data)
(29,free(data)
(30,twoIntsStruct *)
(31,NULL)
(32,data)
(33,if(GLOBAL_CONST_FIVE==5)
(34,)
(35,data = (twoIntsStruct *)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^