-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcsncpy(data, source, wcslen(source) + 1);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,81,82,86,88,92,94
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcsncpy(data, source, wcslen(source) + 1);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcsncpy(data, source, wcslen(source) + 1);
wcsncpy(data, source, wcslen(source) + 1)
wcsncpy
wcsncpy
data
data
source
source
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,23,0)
(32,16,0)
(22,35,0)
(4,38,0)
(36,13,0)
(7,16,0)
(31,7,0)
(12,23,0)
(19,36,0)
(14,24,0)
(7,36,0)
(23,24,0)
(29,34,0)
(32,36,0)
(8,12,0)
(27,28,0)
(40,19,0)
(28,25,0)
(2,27,0)
(5,32,0)
(16,26,0)
(7,34,0)
(7,24,0)
(6,24,0)
(39,7,0)
(26,16,0)
(11,16,0)
(33,38,0)
(23,12,0)
(18,26,0)
(16,20,0)
(30,36,0)
(34,13,0)
(26,25,0)
(19,34,0)
(9,20,0)
(7,12,0)
(15,13,0)
(4,10,0)
(28,27,0)
(12,7,0)
(17,11,0)
(21,11,0)
(3,16,0)
(24,34,0)
(43,13,0)
(25,28,0)
(37,36,0)
(25,26,0)
(32,34,0)
(0,35,0)
(19,16,0)
(42,28,0)
(38,4,0)
(26,18,0)
(11,17,1)
(39,31,1)
(12,8,1)
(23,1,1)
(28,27,1)
(24,6,1)
(5,7,1)
(35,0,1)
(3,35,1)
(11,16,1)
(40,32,1)
(14,11,1)
(26,25,1)
(7,24,1)
(30,37,1)
(32,5,1)
(8,23,1)
(38,33,1)
(25,28,1)
(31,24,1)
(7,12,1)
(12,23,1)
(16,26,1)
(4,38,1)
(32,16,1)
(27,2,1)
(19,36,1)
(7,16,1)
(1,39,1)
(2,42,1)
(7,36,1)
(41,19,1)
(14,35,1)
(6,14,1)
(19,16,1)
(26,18,1)
(19,40,1)
(22,36,1)
(33,11,1)
(42,3,1)
(36,30,1)
(23,24,1)
(14,4,1)
(32,36,1)
(0,22,1)
(17,21,1)
(21,16,1)
(7,24,2)
(32,36,2)
(21,35,2)
(38,11,2)
(4,38,2)
(7,16,2)
(28,35,2)
(25,35,2)
(7,36,2)
(16,26,2)
(26,35,2)
(3,35,2)
(33,11,2)
(7,12,2)
(28,27,2)
(2,35,2)
(12,23,2)
(11,16,2)
(27,35,2)
(42,35,2)
(25,28,2)
(26,25,2)
(4,11,2)
(26,18,2)
(16,35,2)
(19,36,2)
(19,16,2)
(23,24,2)
(11,35,2)
(17,35,2)
(32,16,2)
-----------------------------------
(0,5)
(1,source)
(2,wchar_t)
(3,data)
(4,exit(-1)
(5,data)
(6,SRC_STRING)
(7,wcsncpy(data, source, wcslen(source)
(8,1)
(9,if (data == NULL)
(10,)
(11,data == NULL)
(12,wcslen(source)
(13,)
(14,source)
(15,data)
(16,data = (wchar_t *)
(17,NULL)
(18,wchar_t *)
(19,free(data)
(20,)
(21,data)
(22,STATIC_CONST_FIVE)
(23,wcslen(source)
(24,source[10+1] = SRC_STRING)
(25,malloc(10*sizeof(wchar_t)
(26,(wchar_t *)
(27,sizeof(wchar_t)
(28,10*sizeof(wchar_t)
(29,source)
(30,NULL)
(31,data)
(32,printWLine(data)
(33,1)
(34,)
(35,STATIC_CONST_FIVE==5)
(36,data = NULL)
(37,data)
(38,-1)
(39,source)
(40,data)
(41,RET)
(42,10)
(43,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^