-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_listen_socket_execl_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
43,51
43,52
44,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
58,59
58,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
85,86
86,87
86,88
87,88
89,90
91,92
91,93
92,93
92,94
92,95
92,96
92,97
92,98
92,99
92,100
92,101
92,102
92,103
92,104
92,105
92,106
92,107
92,108
92,109
93,94
94,95
94,96
95,96
97,98
97,99
97,100
97,101
98,99
100,101
102,103
104,105
106,107
106,108
107,108
107,109
108,109
110,111
112,113
114,115
115,116
115,117
115,118
115,119
116,117
118,119
119,120
122,123
123,124
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
134,135
135,136
135,137
136,137
136,138
137,138
137,139
138,139
142,143
144,145
145,146
145,147
146,147
146,148
147,148
150,151
150,152
151,152
153,154
155,156
155,157
156,157
156,158
157,158
157,159
157,160
157,161
158,159
160,161
162,163
162,164
163,164
163,165
164,165
166,167
168,169
169,170
171,172
172,173
173,174
175,176
177,178
179,180
179,181
180,181
180,182
181,182
181,183
181,184
182,183
184,185
186,187
188,189
190,191
192,193
193,194
193,195
194,195
196,197
196,198
196,199
196,200
197,198
199,200
201,202
203,204
205,206
205,207
206,207
206,208
207,208
209,210
211,212
213,214
214,215
214,216
215,216
217,218
217,219
217,220
217,221
217,222
218,219
220,221
222,223
222,224
223,224
223,225
225,226
227,228
228,229
228,230
229,230
231,232
233,234
233,235
234,235
235,236
235,237
238,239
239,240
239,241
240,241
240,242
242,243
246,247
246,248
247,248
247,249
248,249
248,250
249,250
251,252
253,254
253,255
254,255
257,258
259,260
260,261
260,262
261,262
261,263
262,263
264,265
264,266
265,266
267,268
267,269
268,269
270,271
271,272
271,273
275,276
276,277
276,278
277,278
279,280
279,281
279,282
280,281
282,283
285,286
285,287
286,287
288,289
289,290
290,291
290,292
291,292
292,293
295,296
296,297
296,298
297,298
299,300
299,301
299,302
300,301
302,303
305,306
305,307
306,307
308,309
309,310
310,311
310,312
311,312
312,313
316,317
316,318
317,318
317,319
318,319
320,321
322,323
323,324
324,325
324,326
325,326
327,328
329,330
329,331
330,331
330,332
331,332
333,334
335,336
336,337
337,338
337,339
338,339
340,341
342,343
343,344
343,345
344,345
346,347
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,36,40,42,46,48,52,54,57,59,60,64,66,69,73,75,78,82,84,88,90,96,99,101,103,105,109,111,113,117,120,121,125,130,131,133,139,140,141,143,148,149,152,154,159,161,165,167,170,174,176,178,183,185,187,189,191,195,198,200,202,204,208,210,212,216,219,221,224,226,230,232,236,237,241,243,244,245,250,252,255,256,258,263,266,269,272,273,274,278,281,283,284,287,293,294,298,301,303,304,307,313,314,315,319,321,326,328,332,334,339,341,345,347
-----computeFrom-----
38,39
38,40
94,95
94,96
107,108
107,109
127,128
127,129
135,136
135,137
145,146
145,147
156,157
156,158
180,181
180,182
193,194
193,195
206,207
206,208
214,215
214,216
228,229
228,230
233,234
233,235
239,240
239,241
240,241
240,242
247,248
247,249
248,249
248,250
253,254
253,255
260,261
260,262
264,265
264,266
267,268
267,269
276,277
276,278
290,291
290,292
296,297
296,298
310,311
310,312
317,318
317,319
330,331
330,332
-----guardedBy-----
319,328
332,341
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_listen_socket_execl_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE78_OS_Command_Injection__char_listen_socket_execl_44_bad()
CWE78_OS_Command_Injection__char_listen_socket_execl_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(22,172,0)
(27,106,0)
(18,29,0)
(99,73,0)
(129,43,0)
(137,48,0)
(179,172,0)
(169,48,0)
(195,30,0)
(39,122,0)
(68,123,0)
(106,77,0)
(96,209,0)
(104,77,0)
(91,58,0)
(206,82,0)
(136,122,0)
(0,131,0)
(70,106,0)
(40,119,0)
(26,25,0)
(171,186,0)
(154,155,0)
(87,114,0)
(89,40,0)
(119,40,0)
(6,154,0)
(36,69,0)
(155,109,0)
(83,166,0)
(213,12,0)
(142,12,0)
(106,70,0)
(118,88,0)
(58,3,0)
(150,172,0)
(77,106,0)
(99,44,0)
(69,122,0)
(37,136,0)
(38,94,0)
(168,186,0)
(107,93,0)
(42,53,0)
(167,133,0)
(196,12,0)
(31,205,0)
(208,27,0)
(114,46,0)
(25,127,0)
(155,122,0)
(131,213,0)
(58,53,0)
(201,172,0)
(54,85,0)
(81,116,0)
(62,209,0)
(45,53,0)
(73,99,0)
(207,40,0)
(122,12,0)
(211,68,0)
(51,29,0)
(33,133,0)
(46,209,0)
(45,3,0)
(56,70,0)
(100,12,0)
(106,27,0)
(166,56,0)
(126,114,0)
(23,70,0)
(190,60,0)
(35,83,0)
(176,12,0)
(202,172,0)
(155,154,0)
(194,209,0)
(59,172,0)
(180,172,0)
(43,181,0)
(44,99,0)
(141,155,0)
(2,71,0)
(17,181,0)
(181,43,0)
(134,210,0)
(7,46,0)
(204,56,0)
(48,209,0)
(88,5,0)
(15,136,0)
(60,99,0)
(158,164,0)
(35,46,0)
(167,46,0)
(211,5,0)
(105,83,0)
(70,56,0)
(148,127,0)
(34,12,0)
(173,19,0)
(5,12,0)
(161,88,0)
(77,50,0)
(189,70,0)
(81,164,0)
(46,94,0)
(153,73,0)
(97,173,0)
(133,172,0)
(53,172,0)
(188,166,0)
(14,39,0)
(35,71,0)
(61,5,0)
(108,12,0)
(164,172,0)
(85,172,0)
(47,114,0)
(81,122,0)
(166,188,0)
(3,30,0)
(110,43,0)
(13,127,0)
(184,166,0)
(213,4,0)
(56,12,0)
(199,46,0)
(140,15,0)
(145,109,0)
(162,154,0)
(192,45,0)
(94,209,0)
(119,204,0)
(101,204,0)
(111,121,0)
(117,34,0)
(174,13,0)
(30,122,0)
(20,167,0)
(98,12,0)
(21,93,0)
(182,50,0)
(127,25,0)
(86,172,0)
(19,112,0)
(8,94,0)
(165,138,0)
(93,21,0)
(21,79,0)
(72,32,0)
(45,177,0)
(71,12,0)
(120,30,0)
(186,164,0)
(49,82,0)
(166,83,0)
(181,12,0)
(128,93,0)
(90,6,0)
(149,164,0)
(62,46,0)
(154,162,0)
(114,133,0)
(75,21,0)
(43,46,0)
(126,146,0)
(125,53,0)
(41,12,0)
(193,35,0)
(143,172,0)
(133,167,0)
(136,15,0)
(212,131,0)
(173,181,0)
(50,77,0)
(113,155,0)
(127,12,0)
(3,12,0)
(197,209,0)
(203,211,0)
(155,113,0)
(5,88,0)
(92,172,0)
(127,13,0)
(50,133,0)
(83,35,0)
(79,12,0)
(124,39,0)
(198,69,0)
(159,30,0)
(99,60,0)
(55,44,0)
(83,133,0)
(95,172,0)
(63,39,0)
(80,62,0)
(65,3,0)
(82,34,0)
(70,126,0)
(16,160,0)
(9,50,0)
(163,113,0)
(109,155,0)
(200,84,0)
(30,3,0)
(122,39,0)
(70,3,0)
(10,68,0)
(11,19,0)
(178,56,0)
(4,213,0)
(40,56,0)
(29,3,0)
(204,119,0)
(172,209,0)
(114,126,0)
(126,70,0)
(28,204,0)
(78,85,0)
(1,12,0)
(76,44,0)
(88,46,0)
(67,172,0)
(139,122,0)
(74,4,0)
(185,188,0)
(156,79,0)
(103,81,0)
(144,175,0)
(175,12,0)
(186,122,0)
(146,126,0)
(154,6,0)
(102,58,0)
(66,136,0)
(57,175,0)
(153,99,1)
(175,144,1)
(127,25,1)
(133,167,1)
(173,97,1)
(54,78,1)
(134,69,1)
(182,9,1)
(70,126,1)
(18,3,1)
(70,189,1)
(62,80,1)
(46,94,1)
(166,56,1)
(81,103,1)
(156,21,1)
(154,162,1)
(4,74,1)
(99,60,1)
(26,148,1)
(34,117,1)
(61,71,1)
(76,133,1)
(189,106,1)
(88,46,1)
(44,55,1)
(72,29,1)
(58,53,1)
(40,56,1)
(97,64,1)
(211,203,1)
(192,58,1)
(195,120,1)
(35,46,1)
(79,156,1)
(8,48,1)
(85,54,1)
(164,158,1)
(193,119,1)
(131,0,1)
(5,88,1)
(69,198,1)
(163,154,1)
(167,20,1)
(178,29,1)
(77,50,1)
(63,139,1)
(87,23,1)
(9,104,1)
(170,45,1)
(186,164,1)
(159,65,1)
(50,133,1)
(81,164,1)
(127,13,1)
(89,56,1)
(75,93,1)
(188,185,1)
(78,46,1)
(171,187,1)
(212,79,1)
(45,3,1)
(165,15,1)
(107,128,1)
(141,213,1)
(181,43,1)
(28,40,1)
(114,133,1)
(111,119,1)
(122,39,1)
(106,27,1)
(2,35,1)
(161,61,1)
(118,161,1)
(19,11,1)
(106,77,1)
(204,101,1)
(13,174,1)
(140,136,1)
(129,110,1)
(51,18,1)
(30,122,1)
(206,127,1)
(154,6,1)
(187,64,1)
(76,187,1)
(139,175,1)
(11,173,1)
(114,47,1)
(43,46,1)
(27,208,1)
(33,53,1)
(66,37,1)
(49,206,1)
(190,44,1)
(7,199,1)
(117,82,1)
(68,10,1)
(56,70,1)
(48,169,1)
(10,211,1)
(52,5,1)
(38,8,1)
(126,114,1)
(58,3,1)
(50,182,1)
(46,7,1)
(114,46,1)
(103,186,1)
(174,69,1)
(45,53,1)
(43,129,1)
(186,168,1)
(57,73,1)
(169,137,1)
(171,200,1)
(60,190,1)
(88,118,1)
(166,188,1)
(170,58,1)
(29,3,1)
(93,107,1)
(158,149,1)
(102,186,1)
(167,46,1)
(83,166,1)
(14,124,1)
(105,193,1)
(30,195,1)
(47,87,1)
(73,99,1)
(0,212,1)
(16,170,1)
(104,27,1)
(109,145,1)
(29,51,1)
(148,13,1)
(15,136,1)
(17,68,1)
(136,122,1)
(125,164,1)
(94,38,1)
(155,122,1)
(168,171,1)
(171,72,1)
(73,153,1)
(99,44,1)
(69,122,1)
(198,36,1)
(25,26,1)
(21,75,1)
(101,28,1)
(171,111,1)
(81,122,1)
(155,154,1)
(102,81,1)
(207,89,1)
(82,49,1)
(15,140,1)
(126,146,1)
(65,15,1)
(21,93,1)
(213,4,1)
(149,85,1)
(110,17,1)
(20,33,1)
(186,122,1)
(113,163,1)
(80,16,1)
(211,5,1)
(200,109,1)
(145,155,1)
(64,181,1)
(3,30,1)
(155,113,1)
(185,184,1)
(199,94,1)
(144,57,1)
(136,66,1)
(173,181,1)
(6,90,1)
(171,31,1)
(53,42,1)
(157,62,1)
(55,76,1)
(35,83,1)
(128,34,1)
(58,91,1)
(37,109,1)
(119,204,1)
(119,40,1)
(39,14,1)
(74,131,1)
(208,126,1)
(124,63,1)
(91,102,1)
(40,207,1)
(36,122,1)
(80,170,1)
(187,19,1)
(70,3,1)
(71,2,1)
(120,159,1)
(23,178,1)
(204,56,1)
(171,165,1)
(83,133,1)
(62,46,1)
(70,106,1)
(17,52,1)
(203,52,1)
(45,192,1)
(109,155,1)
(31,73,1)
(184,105,1)
(42,125,1)
(90,141,1)
(171,134,1)
(3,30,2)
(81,164,2)
(105,119,2)
(154,162,2)
(73,187,2)
(88,46,2)
(89,29,2)
(16,170,2)
(175,73,2)
(99,60,2)
(211,5,2)
(178,29,2)
(83,119,2)
(31,73,2)
(140,109,2)
(136,109,2)
(75,69,2)
(127,25,2)
(61,119,2)
(44,187,2)
(190,187,2)
(15,109,2)
(63,73,2)
(34,69,2)
(79,69,2)
(73,99,2)
(26,69,2)
(163,69,2)
(211,52,2)
(154,69,2)
(166,56,2)
(83,133,2)
(52,119,2)
(119,204,2)
(154,6,2)
(40,29,2)
(145,69,2)
(69,73,2)
(120,15,2)
(174,69,2)
(203,52,2)
(62,46,2)
(0,69,2)
(206,69,2)
(51,15,2)
(2,119,2)
(37,109,2)
(155,69,2)
(212,69,2)
(114,133,2)
(184,119,2)
(117,69,2)
(68,52,2)
(133,167,2)
(134,69,2)
(126,29,2)
(11,64,2)
(70,29,2)
(166,188,2)
(23,29,2)
(50,29,2)
(107,69,2)
(111,119,2)
(83,166,2)
(25,69,2)
(166,119,2)
(30,15,2)
(9,29,2)
(103,186,2)
(101,40,2)
(188,119,2)
(4,69,2)
(58,3,2)
(36,73,2)
(148,69,2)
(82,69,2)
(18,15,2)
(72,29,2)
(35,46,2)
(35,83,2)
(187,119,2)
(186,164,2)
(167,46,2)
(141,69,2)
(90,69,2)
(40,56,2)
(155,122,2)
(47,29,2)
(139,73,2)
(173,64,2)
(106,29,2)
(70,106,2)
(182,29,2)
(93,69,2)
(49,69,2)
(57,73,2)
(81,186,2)
(129,119,2)
(181,119,2)
(110,119,2)
(118,119,2)
(208,29,2)
(119,29,2)
(109,69,2)
(155,154,2)
(181,43,2)
(17,119,2)
(127,69,2)
(29,3,2)
(58,53,2)
(198,73,2)
(70,3,2)
(204,40,2)
(21,93,2)
(97,64,2)
(113,69,2)
(46,94,2)
(5,119,2)
(43,119,2)
(14,73,2)
(99,44,2)
(28,40,2)
(136,122,2)
(6,69,2)
(60,187,2)
(144,73,2)
(77,29,2)
(74,69,2)
(153,187,2)
(13,69,2)
(65,15,2)
(159,15,2)
(56,70,2)
(27,29,2)
(50,133,2)
(45,53,2)
(55,187,2)
(87,29,2)
(109,155,2)
(88,119,2)
(106,27,2)
(156,69,2)
(76,187,2)
(126,114,2)
(35,119,2)
(114,29,2)
(15,136,2)
(165,15,2)
(56,29,2)
(200,109,2)
(64,119,2)
(5,88,2)
(71,119,2)
(104,29,2)
(70,126,2)
(30,122,2)
(128,69,2)
(29,15,2)
(45,3,2)
(192,58,2)
(195,15,2)
(185,119,2)
(193,119,2)
(186,122,2)
(122,73,2)
(119,40,2)
(77,50,2)
(124,73,2)
(99,187,2)
(126,146,2)
(189,29,2)
(204,56,2)
(81,122,2)
(114,46,2)
(207,29,2)
(45,58,2)
(10,52,2)
(21,69,2)
(66,109,2)
(173,181,2)
(122,39,2)
(213,4,2)
(106,77,2)
(127,13,2)
(43,46,2)
(19,64,2)
(39,73,2)
(69,122,2)
(131,69,2)
(161,119,2)
(213,69,2)
(3,15,2)
(155,113,2)
-----------------------------------
(0,sin_port)
(1,if (bind(listenSocket, (struct sockaddr*)
(2,\'\\\\0\')
(3,acceptSocket = accept(listenSocket, NULL, NULL)
(4,htons(TCP_PORT)
(5,replace = strchr(data, '\\\\r')
(6,&service)
(7,dataBuffer)
(8,dataBuffer)
(9,dataLen)
(10,'\\\\0')
(11,'\\\\0')
(12,)
(13,&service)
(14,IPPROTO_TCP)
(15,listen(listenSocket, LISTEN_BACKLOG)
(16,WSACleanup()
(17,replace)
(18,acceptSocket)
(19,*replace = \'\\\\0\')
(20,data)
(21,service.sin_addr.s_addr)
(22,service)
(23,acceptSocket)
(24,\'\\\\0\')
(25,sizeof(service)
(26,service)
(27,sizeof(char)
(28,recvResult)
(29,acceptSocket == SOCKET_ERROR)
(30,accept(listenSocket, NULL, NULL)
(31,break;)
(32,)
(33,dataLen)
(34,service.sin_family = AF_INET)
(35,data[dataLen + recvResult / sizeof(char)
(36,listenSocket)
(37,listenSocket)
(38,COMMAND_ARG2)
(39,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(40,recvResult == SOCKET_ERROR)
(41,if (recvResult == SOCKET_ERROR || recvResult == 0)
(42,INVALID_SOCKET)
(43,strchr(data, '\\\\n')
(44,MAKEWORD(2,2)
(45,CLOSE_SOCKET(acceptSocket)
(46,data = dataBuffer)
(47,dataLen)
(48,(*funcPtr)
(49,sin_family)
(50,dataLen - 1)
(51,SOCKET_ERROR)
(52,replace)
(53,acceptSocket = INVALID_SOCKET)
(54,0)
(55,2)
(56,recvResult = recv(acceptSocket, (char *)
(57,wsaDataInit)
(58,acceptSocket != INVALID_SOCKET)
(59,if (acceptSocket != INVALID_SOCKET)
(60,&wsaData)
(61,replace)
(62,funcPtr(data)
(63,AF_INET)
(64,replace)
(65,acceptSocket)
(66,LISTEN_BACKLOG)
(67,dataLen)
(68,*replace = \'\\\\0\')
(69,listenSocket == INVALID_SOCKET)
(70,recv(acceptSocket, (char *)
(71,data[dataLen + recvResult / sizeof(char)
(72,break;)
(73,WSAStartup(MAKEWORD(2,2)
(74,TCP_PORT)
(75,s_addr)
(76,2)
(77,100 - dataLen - 1)
(78,wsaDataInit)
(79,service.sin_addr.s_addr = INADDR_ANY)
(80,data)
(81,CLOSE_SOCKET(listenSocket)
(82,service.sin_family)
(83,dataLen + recvResult / sizeof(char)
(84,)
(85,wsaDataInit = 0)
(86,wsaData)
(87,data)
(88,strchr(data, '\\\\r')
(89,recvResult)
(90,service)
(91,INVALID_SOCKET)
(92,wsaDataInit)
(93,service.sin_addr)
(94,dataBuffer[100] = COMMAND_ARG2)
(95,if (listenSocket != INVALID_SOCKET)
(96,funcPtr)
(97,replace)
(98,if (replace)
(99,WSAStartup(MAKEWORD(2,2)
(100,if (listen(listenSocket, LISTEN_BACKLOG)
(101,0)
(102,acceptSocket)
(103,listenSocket)
(104,100)
(105,dataLen)
(106,sizeof(char)
(107,sin_addr)
(108,if (replace)
(109,bind(listenSocket, (struct sockaddr*)
(110,data)
(111,break;)
(112,)
(113,sizeof(service)
(114,data + dataLen)
(115,*replace = '\\\\0')
(116,)
(117,AF_INET)
(118,\'\\\\r\')
(119,recvResult == SOCKET_ERROR || recvResult == 0)
(120,NULL)
(121,)
(122,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(123,)
(124,SOCK_STREAM)
(125,acceptSocket)
(126,(char *)
(127,memset(&service, 0, sizeof(service)
(128,service)
(129,\'\\\\n\')
(130,strchr(data, \'\\\\n\')
(131,service.sin_port)
(132,'\\\\0')
(133,dataLen = strlen(data)
(134,break;)
(135,*replace = '\\\\0')
(136,listen(listenSocket, LISTEN_BACKLOG)
(137,funcPtr)
(138,)
(139,listenSocket)
(140,SOCKET_ERROR)
(141,listenSocket)
(142,if (listenSocket == INVALID_SOCKET)
(143,listenSocket)
(144,1)
(145,SOCKET_ERROR)
(146,char *)
(147,\'\\\\0\')
(148,0)
(149,listenSocket)
(150,if (wsaDataInit)
(151,replace = strchr(data, \'\\\\r\')
(152,strchr(data, \'\\\\r\')
(153,NO_ERROR)
(154,(struct sockaddr*)
(155,bind(listenSocket, (struct sockaddr*)
(156,INADDR_ANY)
(157,RET)
(158,INVALID_SOCKET)
(159,listenSocket)
(160,)
(161,data)
(162,struct sockaddr*)
(163,service)
(164,listenSocket = INVALID_SOCKET)
(165,break;)
(166,recvResult / sizeof(char)
(167,strlen(data)
(168,INVALID_SOCKET)
(169,badSink)
(170,wsaDataInit)
(171,listenSocket)
(172,)
(173,*replace)
(174,service)
(175,wsaDataInit = 1)
(176,if (acceptSocket == SOCKET_ERROR)
(177,)
(178,recvResult)
(179,acceptSocket)
(180,do)
(181,replace = strchr(data, \'\\\\n\')
(182,1)
(183,'\\\\r')
(184,recvResult)
(185,char)
(186,listenSocket != INVALID_SOCKET)
(187,0)
(188,sizeof(char)
(189,0)
(190,wsaData)
(191,replace = strchr(data, '\\\\n')
(192,acceptSocket)
(193,data)
(194,data)
(195,NULL)
(196,if (WSAStartup(MAKEWORD(2,2)
(197,dataBuffer)
(198,INVALID_SOCKET)
(199,data)
(200,break;)
(201,recvResult)
(202,replace)
(203,replace)
(204,recvResult == 0)
(205,)
(206,service)
(207,SOCKET_ERROR)
(208,char)
(209,)
(210,)
(211,*replace)
(212,service)
(213,service.sin_port = htons(TCP_PORT)
(214,'\\\\n')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^