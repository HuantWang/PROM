-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,32,0)
(67,60,0)
(61,50,0)
(52,18,0)
(49,36,0)
(2,32,0)
(55,17,0)
(42,32,0)
(33,38,0)
(11,22,0)
(33,32,0)
(6,2,0)
(0,4,0)
(11,38,0)
(35,33,0)
(24,38,0)
(18,52,0)
(37,66,0)
(34,27,0)
(51,33,0)
(52,16,0)
(60,32,0)
(33,3,0)
(29,24,0)
(36,12,0)
(19,18,0)
(38,25,0)
(23,4,0)
(32,28,0)
(12,36,0)
(68,27,0)
(34,3,0)
(26,32,0)
(2,38,0)
(25,38,0)
(66,38,0)
(1,25,0)
(47,38,0)
(4,50,0)
(64,9,0)
(22,17,0)
(31,11,0)
(9,14,0)
(63,28,0)
(59,5,0)
(44,3,0)
(66,32,0)
(30,11,0)
(9,64,0)
(15,35,0)
(43,33,0)
(10,34,0)
(48,9,0)
(25,1,0)
(50,4,0)
(14,9,0)
(54,64,0)
(25,14,0)
(20,5,0)
(57,50,0)
(34,60,0)
(14,25,0)
(65,42,0)
(46,3,0)
(35,15,0)
(33,35,0)
(3,28,0)
(66,3,0)
(13,15,0)
(40,12,0)
(2,3,0)
(7,28,0)
(53,24,0)
(27,34,0)
(21,22,0)
(34,38,0)
(38,17,0)
(12,42,0)
(62,27,0)
(45,35,0)
(8,36,0)
(49,40,1)
(38,25,1)
(2,3,1)
(50,61,1)
(3,46,1)
(31,24,1)
(31,52,1)
(9,64,1)
(53,29,1)
(39,2,1)
(34,3,1)
(30,31,1)
(34,27,1)
(54,48,1)
(60,67,1)
(35,15,1)
(66,3,1)
(23,0,1)
(46,44,1)
(15,13,1)
(43,42,1)
(51,43,1)
(47,5,1)
(19,24,1)
(48,47,1)
(33,38,1)
(45,51,1)
(12,36,1)
(29,38,1)
(8,49,1)
(34,38,1)
(0,22,1)
(68,10,1)
(36,8,1)
(21,11,1)
(57,23,1)
(37,60,1)
(2,6,1)
(5,59,1)
(33,35,1)
(40,4,1)
(0,5,1)
(66,37,1)
(65,12,1)
(22,21,1)
(24,38,1)
(61,57,1)
(62,68,1)
(27,62,1)
(64,54,1)
(52,18,1)
(42,65,1)
(6,66,1)
(66,38,1)
(10,33,1)
(18,19,1)
(11,30,1)
(4,50,1)
(13,45,1)
(25,14,1)
(20,3,1)
(33,3,1)
(2,38,1)
(24,53,1)
(11,38,1)
(14,9,1)
(67,34,1)
(25,1,1)
(59,20,1)
(34,27,2)
(33,35,2)
(33,3,2)
(29,5,2)
(64,5,2)
(34,38,2)
(66,3,2)
(4,50,2)
(18,24,2)
(53,5,2)
(24,5,2)
(25,1,2)
(19,24,2)
(52,24,2)
(22,5,2)
(2,38,2)
(25,5,2)
(47,5,2)
(24,38,2)
(11,5,2)
(38,5,2)
(12,36,2)
(14,5,2)
(30,5,2)
(11,38,2)
(66,38,2)
(25,14,2)
(48,5,2)
(9,64,2)
(54,5,2)
(34,3,2)
(14,9,2)
(9,5,2)
(52,18,2)
(31,5,2)
(33,38,2)
(35,15,2)
(38,25,2)
(2,3,2)
(21,5,2)
-----------------------------------
(0,source)
(1,char *)
(2,free(data)
(3,data = NULL)
(4,memset(source, \'C\', 100-1)
(5,staticFive==5)
(6,data)
(7,if(staticFive==5)
(8,1)
(9,50*sizeof(char)
(10,data)
(11,data[0])
(12,source[100-1])
(13,char)
(14,malloc(50*sizeof(char)
(15,sizeof(char)
(16,)
(17,)
(18,-1)
(19,1)
(20,staticFive)
(21,'\\\\0')
(22,data[0] = \'\\\\0\')
(23,'C')
(24,data == NULL)
(25,(char *)
(26,source)
(27,100-1)
(28,)
(29,data)
(30,0)
(31,data)
(32,)
(33,memcpy(data, source, 100*sizeof(char)
(34,data[100-1])
(35,100*sizeof(char)
(36,100-1)
(37,data)
(38,data = (char *)
(39,RET)
(40,source)
(41,data[0] = '\\\\0')
(42,source[100-1] = '\\\\0')
(43,data)
(44,data)
(45,100)
(46,NULL)
(47,data)
(48,50)
(49,100)
(50,100-1)
(51,source)
(52,exit(-1)
(53,NULL)
(54,char)
(55,if (data == NULL)
(56,\'\\\\0\')
(57,100)
(58,memset(source, 'C', 100-1)
(59,5)
(60,data[100-1] = '\\\\0')
(61,1)
(62,1)
(63,data)
(64,sizeof(char)
(65,'\\\\0')
(66,printLine(data)
(67,'\\\\0')
(68,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^