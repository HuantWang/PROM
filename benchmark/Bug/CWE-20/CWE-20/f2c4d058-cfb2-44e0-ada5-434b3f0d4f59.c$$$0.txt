-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(3,10,0)
(4,42,0)
(35,5,0)
(16,48,0)
(60,46,0)
(33,50,0)
(25,11,0)
(42,2,0)
(11,55,0)
(22,2,0)
(14,22,0)
(18,55,0)
(54,11,0)
(57,19,0)
(19,57,0)
(36,58,0)
(24,38,0)
(44,13,0)
(40,37,0)
(5,32,0)
(51,15,0)
(11,57,0)
(20,15,0)
(53,7,0)
(7,62,0)
(29,18,0)
(7,20,0)
(10,28,0)
(0,55,0)
(41,7,0)
(63,36,0)
(46,2,0)
(26,58,0)
(43,36,0)
(18,13,0)
(46,45,0)
(52,42,0)
(9,6,0)
(15,2,0)
(59,45,0)
(62,7,0)
(62,10,0)
(36,55,0)
(8,18,0)
(55,22,0)
(37,32,0)
(45,46,0)
(62,2,0)
(56,16,0)
(39,16,0)
(57,11,0)
(48,16,0)
(17,46,0)
(61,27,0)
(12,60,0)
(48,45,0)
(21,37,0)
(47,62,0)
(13,18,0)
(38,1,0)
(58,36,0)
(34,19,0)
(49,5,0)
(50,1,0)
(15,20,0)
(55,5,0)
(37,2,0)
(16,20,0)
(31,57,0)
(60,20,0)
(57,58,0)
(42,38,0)
(42,55,0)
(20,27,0)
(58,57,0)
(46,60,0)
(11,2,0)
(23,20,0)
(45,48,0)
(58,26,0)
(22,55,0)
(30,60,0)
(47,48,1)
(43,63,1)
(50,33,1)
(40,48,1)
(12,17,1)
(40,38,1)
(57,58,1)
(36,43,1)
(55,22,1)
(7,20,1)
(42,2,1)
(16,56,1)
(22,2,1)
(42,55,1)
(15,2,1)
(10,3,1)
(62,7,1)
(8,29,1)
(16,20,1)
(11,55,1)
(31,58,1)
(53,47,1)
(13,44,1)
(4,50,1)
(52,4,1)
(18,55,1)
(37,2,1)
(29,55,1)
(57,31,1)
(11,2,1)
(13,18,1)
(25,54,1)
(41,53,1)
(58,26,1)
(17,16,1)
(63,11,1)
(11,25,1)
(30,12,1)
(60,20,1)
(40,10,1)
(39,20,1)
(33,19,1)
(44,18,1)
(23,19,1)
(34,57,1)
(46,60,1)
(54,13,1)
(14,0,1)
(37,40,1)
(51,23,1)
(46,2,1)
(15,51,1)
(48,45,1)
(56,39,1)
(45,46,1)
(21,37,1)
(18,8,1)
(24,42,1)
(7,41,1)
(40,13,1)
(19,57,1)
(38,24,1)
(36,55,1)
(58,36,1)
(42,52,1)
(19,34,1)
(3,62,1)
(48,16,1)
(57,11,1)
(60,30,1)
(59,46,1)
(62,2,1)
(45,59,1)
(22,14,1)
(20,15,1)
(57,11,2)
(48,45,2)
(43,13,2)
(51,19,2)
(23,19,2)
(56,19,2)
(45,16,2)
(20,15,2)
(58,13,2)
(58,36,2)
(60,20,2)
(57,58,2)
(17,16,2)
(36,55,2)
(37,2,2)
(34,13,2)
(11,13,2)
(52,19,2)
(42,55,2)
(48,16,2)
(62,7,2)
(38,19,2)
(46,60,2)
(22,2,2)
(53,48,2)
(7,48,2)
(42,2,2)
(48,19,2)
(4,19,2)
(47,48,2)
(3,48,2)
(58,26,2)
(11,55,2)
(63,13,2)
(18,55,2)
(39,19,2)
(46,2,2)
(30,16,2)
(16,19,2)
(46,16,2)
(45,46,2)
(54,13,2)
(42,19,2)
(19,57,2)
(62,2,2)
(21,37,2)
(7,20,2)
(24,19,2)
(19,13,2)
(36,13,2)
(11,2,2)
(31,13,2)
(33,19,2)
(10,48,2)
(13,18,2)
(60,16,2)
(50,19,2)
(15,2,2)
(41,48,2)
(25,13,2)
(12,16,2)
(57,13,2)
(15,19,2)
(55,22,2)
(62,48,2)
(59,16,2)
(20,19,2)
(16,20,2)
-----------------------------------
(0,dataLen)
(1,)
(2,char * data)
(3,\\\'\\\\0\\\')
(4,data)
(5,)
(6,)
(7,dataLen-1)
(8,dataLen)
(9,if (fgets(data+dataLen, (int)
(10,data[dataLen-1] = \\\'\\\\0\\\')
(11,data+dataLen)
(12,dataLen)
(13,100-dataLen > 1)
(14,data)
(15,strlen(data)
(16,dataLen > 0)
(17,data)
(18,100-dataLen)
(19,fgets(data+dataLen, (int)
(20,dataLen = strlen(data)
(21,RET)
(22,strlen(data)
(23,dataLen)
(24,\\\'\\\\0\\\')
(25,dataLen)
(26,int)
(27,)
(28,)
(29,100)
(30,1)
(31,stdin)
(32,)
(33,"fgets()
(34,NULL)
(35,if (100-dataLen > 1)
(36,100-dataLen)
(37,return data;)
(38,data[dataLen] = \\\'\\\\0\\\')
(39,dataLen)
(40,data)
(41,1)
(42,data[dataLen])
(43,dataLen)
(44,1)
(45,data[dataLen-1] == \\\'\\\\n\\\')
(46,data[dataLen-1])
(47,data)
(48,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,dataLen)
(50,printLine("fgets()
(51,data)
(52,dataLen)
(53,dataLen)
(54,data)
(55,dataLen = strlen(data)
(56,0)
(57,fgets(data+dataLen, (int)
(58,(int)
(59,\\\'\\\\n\\\')
(60,dataLen-1)
(61,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(62,data[dataLen-1])
(63,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^