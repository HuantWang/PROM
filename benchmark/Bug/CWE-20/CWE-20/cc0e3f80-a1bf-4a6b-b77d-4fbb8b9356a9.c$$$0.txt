-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_07_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
62,63
62,64
65,66
66,67
66,68
67,68
67,69
68,69
70,71
70,72
74,75
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,63,64,69,71,72,73,77,79,83,84,89,91
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
66,67
66,68
70,71
70,72
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_07_bad(){    char * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_07_bad()
CWE416_Use_After_Free__malloc_free_char_07_bad
{    char * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(43,40,0)
(18,7,0)
(24,12,0)
(20,9,0)
(48,40,0)
(18,40,0)
(42,35,0)
(42,33,0)
(1,45,0)
(40,9,0)
(35,42,0)
(22,4,0)
(45,1,0)
(27,8,0)
(3,12,0)
(38,46,0)
(49,42,0)
(8,18,0)
(39,40,0)
(17,48,0)
(25,38,0)
(14,51,0)
(2,7,0)
(32,13,0)
(33,42,0)
(37,12,0)
(41,13,0)
(4,40,0)
(0,12,0)
(13,40,0)
(48,9,0)
(21,50,0)
(53,43,0)
(28,23,0)
(11,25,0)
(38,25,0)
(45,33,0)
(44,23,0)
(5,35,0)
(29,8,0)
(43,3,0)
(19,3,0)
(40,45,0)
(4,23,0)
(31,18,0)
(30,4,0)
(6,3,0)
(26,50,0)
(33,45,0)
(45,40,0)
(23,4,0)
(10,51,0)
(7,9,0)
(4,9,0)
(18,8,0)
(43,16,0)
(14,10,1)
(2,18,1)
(32,40,1)
(48,40,1)
(29,31,1)
(18,8,1)
(38,25,1)
(40,45,1)
(25,11,1)
(43,40,1)
(42,35,1)
(36,51,1)
(41,32,1)
(50,21,1)
(11,13,1)
(53,51,1)
(35,5,1)
(3,19,1)
(22,38,1)
(17,7,1)
(8,27,1)
(45,1,1)
(49,39,1)
(10,50,1)
(22,13,1)
(4,40,1)
(33,42,1)
(45,33,1)
(10,48,1)
(13,40,1)
(13,41,1)
(43,53,1)
(4,23,1)
(18,40,1)
(5,49,1)
(44,28,1)
(43,3,1)
(36,43,1)
(27,29,1)
(31,4,1)
(48,17,1)
(51,14,1)
(30,22,1)
(39,50,1)
(7,2,1)
(26,3,1)
(19,6,1)
(28,30,1)
(21,26,1)
(23,44,1)
(31,50,2)
(48,50,2)
(18,50,2)
(4,23,2)
(41,50,2)
(40,50,2)
(25,13,2)
(45,33,2)
(8,50,2)
(13,40,2)
(17,50,2)
(28,50,2)
(29,50,2)
(39,50,2)
(2,50,2)
(38,13,2)
(42,50,2)
(43,3,2)
(18,8,2)
(42,35,2)
(18,40,2)
(48,40,2)
(43,40,2)
(4,40,2)
(5,50,2)
(53,51,2)
(11,13,2)
(45,1,2)
(7,50,2)
(40,45,2)
(45,50,2)
(43,51,2)
(30,50,2)
(49,50,2)
(35,50,2)
(23,50,2)
(27,50,2)
(4,50,2)
(22,50,2)
(33,50,2)
(13,50,2)
(33,42,2)
(32,50,2)
(38,25,2)
(44,50,2)
-----------------------------------
(0,data)
(1,char *)
(2,\'\\\\0\')
(3,data = NULL)
(4,memset(data, 'A', 100-1)
(5,char)
(6,data)
(7,data[100-1] = '\\\\0')
(8,100-1)
(9,)
(10,staticFive)
(11,1)
(12,)
(13,data == NULL)
(14,5)
(15,data[100-1] = \'\\\\0\')
(16,)
(17,data)
(18,data[100-1])
(19,NULL)
(20,if (data == NULL)
(21,5)
(22,data)
(23,100-1)
(24,if(staticFive==5)
(25,-1)
(26,staticFive)
(27,1)
(28,100)
(29,100)
(30,\'A\')
(31,data)
(32,data)
(33,malloc(100*sizeof(char)
(34,'\\\\0')
(35,sizeof(char)
(36,RET)
(37,if(staticFive==5)
(38,exit(-1)
(39,data)
(40,data = (char *)
(41,NULL)
(42,100*sizeof(char)
(43,printLine(data)
(44,1)
(45,(char *)
(46,)
(47,'A')
(48,free(data)
(49,100)
(50,staticFive==5)
(51,staticFive==5)
(52,memset(data, \'A\', 100-1)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^