-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            size_t i;
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
92,93
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
107,113
107,114
107,115
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
117,118
117,119
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
128,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
140,141
140,142
140,143
140,144
141,142
142,143
142,144
143,144
146,147
146,148
147,148
150,151
151,152
153,154
154,155
155,156
155,157
156,157
156,158
157,158
159,160
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
168,170
169,170
171,172
171,173
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,87,88,93,95,99,101,102,106,111,113,116,118,120,124,126,127,129,130,135,137,138,139,144,145,148,149,152,158,160,163,165,170,172,173,174,178,180,184,186
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
90,91
90,92
128,129
128,130
132,133
132,134
136,137
136,138
142,143
142,144
146,147
146,148
155,156
155,157
167,168
167,169
171,172
171,173
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            size_t i;            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,45,0)
(46,96,0)
(21,26,0)
(44,6,0)
(15,19,0)
(36,71,0)
(63,10,0)
(53,68,0)
(40,14,0)
(52,20,0)
(35,41,0)
(27,18,0)
(20,52,0)
(75,41,0)
(97,7,0)
(16,83,0)
(95,52,0)
(91,83,0)
(84,31,0)
(14,56,0)
(38,85,0)
(3,20,0)
(31,19,0)
(22,27,0)
(51,52,0)
(73,10,0)
(12,75,0)
(6,48,0)
(4,77,0)
(80,30,0)
(98,58,0)
(37,22,0)
(81,31,0)
(41,18,0)
(92,83,0)
(70,66,0)
(41,75,0)
(79,12,0)
(94,19,0)
(76,47,0)
(27,22,0)
(61,6,0)
(34,68,0)
(45,19,0)
(0,90,0)
(78,47,0)
(13,56,0)
(75,45,0)
(23,48,0)
(68,45,0)
(66,56,0)
(56,19,0)
(9,46,0)
(79,6,0)
(17,72,0)
(60,77,0)
(89,12,0)
(82,24,0)
(97,46,0)
(33,74,0)
(48,6,0)
(88,45,0)
(20,83,0)
(90,83,0)
(55,83,0)
(87,54,0)
(38,24,0)
(25,53,0)
(69,58,0)
(49,58,0)
(93,45,0)
(96,19,0)
(74,58,0)
(67,75,0)
(77,72,0)
(5,9,0)
(9,10,0)
(86,46,0)
(26,61,0)
(72,77,0)
(7,42,0)
(74,7,0)
(56,66,0)
(59,98,0)
(14,46,0)
(18,27,0)
(53,75,0)
(2,71,0)
(6,19,0)
(12,45,0)
(18,41,0)
(9,90,0)
(97,58,0)
(7,74,0)
(29,97,0)
(8,16,0)
(11,74,0)
(32,53,0)
(30,83,0)
(16,46,0)
(41,35,0)
(28,96,0)
(1,61,0)
(24,38,0)
(57,20,0)
(43,27,0)
(72,54,0)
(47,75,0)
(50,79,0)
(54,83,0)
(65,19,0)
(64,97,0)
(83,96,0)
(10,9,0)
(61,26,0)
(71,58,0)
(46,14,0)
(30,46,0)
(86,12,1)
(38,24,1)
(67,26,1)
(47,76,1)
(16,46,1)
(7,74,1)
(41,35,1)
(32,25,1)
(73,63,1)
(66,70,1)
(74,58,1)
(95,57,1)
(48,23,1)
(70,13,1)
(82,47,1)
(75,41,1)
(61,6,1)
(36,98,1)
(2,36,1)
(53,75,1)
(98,58,1)
(81,56,1)
(11,33,1)
(26,61,1)
(3,46,1)
(51,95,1)
(6,48,1)
(25,47,1)
(64,71,1)
(13,6,1)
(57,3,1)
(46,14,1)
(41,18,1)
(61,1,1)
(23,44,1)
(71,2,1)
(87,72,1)
(97,29,1)
(47,75,1)
(72,77,1)
(68,34,1)
(59,7,1)
(80,90,1)
(53,32,1)
(97,46,1)
(90,0,1)
(30,46,1)
(0,9,1)
(14,40,1)
(16,8,1)
(58,49,1)
(76,78,1)
(29,64,1)
(5,71,1)
(1,21,1)
(52,51,1)
(8,30,1)
(74,11,1)
(22,37,1)
(79,6,1)
(78,75,1)
(10,73,1)
(43,67,1)
(4,60,1)
(27,22,1)
(56,66,1)
(79,50,1)
(33,97,1)
(77,4,1)
(34,53,1)
(71,58,1)
(98,59,1)
(37,43,1)
(69,54,1)
(9,10,1)
(14,56,1)
(49,69,1)
(12,75,1)
(63,5,1)
(50,68,1)
(84,81,1)
(36,58,1)
(9,46,1)
(60,17,1)
(21,31,1)
(31,84,1)
(54,87,1)
(62,16,1)
(17,20,1)
(18,27,1)
(89,79,1)
(12,89,1)
(30,80,1)
(97,58,1)
(25,38,1)
(20,52,1)
(24,82,1)
(40,86,1)
(26,61,2)
(97,71,2)
(71,58,2)
(29,71,2)
(98,58,2)
(97,58,2)
(20,52,2)
(33,71,2)
(12,75,2)
(72,77,2)
(71,71,2)
(9,46,2)
(38,47,2)
(53,75,2)
(46,14,2)
(79,6,2)
(6,48,2)
(16,46,2)
(18,27,2)
(30,46,2)
(56,66,2)
(74,71,2)
(9,10,2)
(7,71,2)
(82,47,2)
(41,18,2)
(61,6,2)
(11,71,2)
(74,58,2)
(59,71,2)
(47,75,2)
(27,22,2)
(98,71,2)
(2,71,2)
(36,71,2)
(41,35,2)
(75,41,2)
(24,47,2)
(97,46,2)
(7,74,2)
(38,24,2)
(64,71,2)
(14,56,2)
-----------------------------------
(0,'\\\\0')
(1,dataPtr1)
(2,100)
(3,source)
(4,1)
(5,data)
(6,* *dataPtr1 = &data)
(7,data[i] = source[i])
(8,data)
(9,data[100-1])
(10,100-1)
(11,i)
(12,*dataPtr1 = data)
(13,dataPtr2)
(14,*dataPtr2)
(15,data)
(16,free(data)
(17,source)
(18,malloc(50*sizeof(char)
(19,)
(20,memset(source, \'C\', 100-1)
(21,data)
(22,sizeof(char)
(23,data)
(24,-1)
(25,data)
(26,* data = *dataPtr1)
(27,50*sizeof(char)
(28,data)
(29,i)
(30,printLine(data)
(31,data = NULL)
(32,0)
(33,source)
(34,'\\\\0')
(35,char *)
(36,i)
(37,char)
(38,exit(-1)
(39,memset(source, 'C', 100-1)
(40,dataPtr2)
(41,(char *)
(42,)
(43,50)
(44,dataPtr1)
(45,)
(46,* data = *dataPtr2)
(47,data == NULL)
(48,&data)
(49,0)
(50,dataPtr1)
(51,1)
(52,100-1)
(53,data[0])
(54,source[100-1] = '\\\\0')
(55,i)
(56,* *dataPtr2 = &data)
(57,'C')
(58,i = 0)
(59,i)
(60,100)
(61,*dataPtr1)
(62,RET)
(63,100)
(64,data)
(65,dataPtr2)
(66,&data)
(67,data)
(68,data[0] = '\\\\0')
(69,i)
(70,data)
(71,i < 100)
(72,source[100-1])
(73,1)
(74,source[i])
(75,data = (char *)
(76,NULL)
(77,100-1)
(78,data)
(79,*dataPtr1)
(80,data)
(81,data)
(82,1)
(83,)
(84,NULL)
(85,)
(86,data)
(87,'\\\\0')
(88,data)
(89,data)
(90,data[100-1] = '\\\\0')
(91,source)
(92,for (i = 0; i < 100; i++)
(93,if (data == NULL)
(94,dataPtr1)
(95,100)
(96,)
(97,data[i])
(98,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^