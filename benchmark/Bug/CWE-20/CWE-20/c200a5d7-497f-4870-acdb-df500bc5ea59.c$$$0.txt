-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (strlen(source) + 1) * sizeof(char));
memcpy(data, source, (strlen(source) + 1) * sizeof(char))
memcpy
memcpy
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,1,0)
(7,27,0)
(23,25,0)
(3,2,0)
(10,25,0)
(11,45,0)
(38,28,0)
(16,1,0)
(11,33,0)
(1,26,0)
(29,12,0)
(27,16,0)
(28,38,0)
(14,17,0)
(42,29,0)
(13,38,0)
(16,27,0)
(37,32,0)
(44,12,0)
(8,31,0)
(27,18,0)
(32,34,0)
(25,12,0)
(36,18,0)
(12,17,0)
(44,34,0)
(8,32,0)
(18,27,0)
(21,31,0)
(34,17,0)
(29,34,0)
(20,34,0)
(26,0,0)
(6,32,0)
(32,26,0)
(44,26,0)
(43,28,0)
(1,15,0)
(32,25,0)
(35,17,0)
(24,0,0)
(39,9,0)
(31,8,0)
(5,34,0)
(45,11,0)
(19,45,0)
(8,38,0)
(38,8,0)
(30,44,0)
(40,2,0)
(1,16,0)
(9,26,0)
(28,25,0)
(32,12,0)
(32,8,0)
(4,26,0)
(46,12,0)
(26,1,0)
(29,26,0)
(22,9,0)
(43,6,1)
(1,15,1)
(38,28,1)
(2,40,1)
(36,7,1)
(40,3,1)
(4,2,1)
(32,8,1)
(32,26,1)
(21,38,1)
(44,30,1)
(41,29,1)
(42,44,1)
(5,20,1)
(10,9,1)
(37,25,1)
(7,4,1)
(1,16,1)
(9,26,1)
(22,26,1)
(3,34,1)
(11,45,1)
(31,21,1)
(38,13,1)
(44,34,1)
(32,25,1)
(29,34,1)
(29,42,1)
(8,31,1)
(32,34,1)
(34,5,1)
(18,36,1)
(10,11,1)
(23,10,1)
(39,22,1)
(13,28,1)
(30,32,1)
(6,37,1)
(28,25,1)
(16,27,1)
(29,26,1)
(9,39,1)
(19,9,1)
(45,19,1)
(44,26,1)
(27,18,1)
(10,2,1)
(28,43,1)
(25,23,1)
(8,38,1)
(26,1,1)
(16,2,2)
(29,26,2)
(32,8,2)
(11,45,2)
(16,27,2)
(32,25,2)
(39,2,2)
(26,1,2)
(32,26,2)
(4,2,2)
(45,9,2)
(9,26,2)
(1,2,2)
(27,2,2)
(38,28,2)
(27,18,2)
(19,9,2)
(32,34,2)
(9,2,2)
(26,2,2)
(8,38,2)
(28,25,2)
(44,34,2)
(44,26,2)
(22,2,2)
(36,2,2)
(29,34,2)
(1,15,2)
(7,2,2)
(11,9,2)
(18,2,2)
(8,31,2)
(1,16,2)
-----------------------------------
(0,)
(1,(char *)
(2,GLOBAL_CONST_FIVE==5)
(3,GLOBAL_CONST_FIVE)
(4,data)
(5,NULL)
(6,source)
(7,10)
(8,(strlen(source)
(9,data == NULL)
(10,source)
(11,exit(-1)
(12,)
(13,1)
(14,if(GLOBAL_CONST_FIVE==5)
(15,char *)
(16,malloc(10*sizeof(char)
(17,)
(18,sizeof(char)
(19,1)
(20,data)
(21,char)
(22,data)
(23,SRC_STRING)
(24,if (data == NULL)
(25,source[10+1] = SRC_STRING)
(26,data = (char *)
(27,10*sizeof(char)
(28,strlen(source)
(29,free(data)
(30,data)
(31,sizeof(char)
(32,memcpy(data, source, (strlen(source)
(33,)
(34,data = NULL)
(35,data)
(36,char)
(37,data)
(38,strlen(source)
(39,NULL)
(40,5)
(41,RET)
(42,data)
(43,source)
(44,printLine(data)
(45,-1)
(46,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^