-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_18_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    goto source;
source:
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
75,76
79,80
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,30,32,36,38,43,45,47,52,54,59,60,63,64,67,74,76,77,78,84,86,87,88,92,94,96,98,102,103,107,111,112
-----computeFrom-----
34,35
34,36
57,58
57,59
61,62
61,63
70,71
70,72
80,81
80,82
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_18_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_18_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_18_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    goto source;source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
goto source;
source
source:    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;
source
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(16,39,0)
(42,26,0)
(40,39,0)
(37,39,0)
(21,1,0)
(31,5,0)
(26,39,0)
(8,13,0)
(34,33,0)
(13,45,0)
(41,1,0)
(43,42,0)
(12,18,0)
(17,48,0)
(0,26,0)
(24,26,0)
(27,19,0)
(42,5,0)
(25,23,0)
(5,39,0)
(28,13,0)
(2,24,0)
(19,45,0)
(33,13,0)
(32,36,0)
(30,44,0)
(1,21,0)
(18,5,0)
(48,17,0)
(14,42,0)
(1,42,0)
(44,36,0)
(22,38,0)
(9,32,0)
(49,39,0)
(23,25,0)
(35,18,0)
(7,21,0)
(17,32,0)
(11,45,0)
(15,5,0)
(13,33,0)
(48,45,0)
(42,1,0)
(38,45,0)
(23,26,0)
(47,19,0)
(46,48,0)
(29,39,0)
(3,45,0)
(33,44,0)
(6,17,0)
(4,24,0)
(18,25,0)
(25,18,0)
(20,48,0)
(42,5,1)
(17,48,1)
(30,33,1)
(18,5,1)
(32,9,1)
(33,34,1)
(19,47,1)
(11,5,1)
(35,12,1)
(22,44,1)
(12,42,1)
(34,13,1)
(9,17,1)
(33,13,1)
(10,23,1)
(18,35,1)
(46,19,1)
(27,38,1)
(15,31,1)
(41,43,1)
(17,6,1)
(47,27,1)
(1,21,1)
(48,45,1)
(38,22,1)
(23,25,1)
(19,45,1)
(14,19,1)
(5,15,1)
(45,3,1)
(20,46,1)
(8,32,1)
(6,48,1)
(25,18,1)
(13,28,1)
(13,45,1)
(42,1,1)
(3,11,1)
(48,20,1)
(7,41,1)
(21,7,1)
(44,30,1)
(43,14,1)
(31,29,1)
(27,45,1)
(28,8,1)
(38,45,1)
(33,19,2)
(38,19,2)
(42,5,2)
(13,19,2)
(20,19,2)
(44,19,2)
(19,19,2)
(38,45,2)
(42,1,2)
(6,19,2)
(19,45,2)
(22,19,2)
(30,19,2)
(48,45,2)
(28,19,2)
(17,19,2)
(48,19,2)
(9,19,2)
(25,18,2)
(32,19,2)
(13,45,2)
(23,25,2)
(17,48,2)
(34,19,2)
(1,21,2)
(27,19,2)
(8,19,2)
(47,19,2)
(46,19,2)
(18,5,2)
(33,13,2)
-----------------------------------
(0,source)
(1,100*sizeof(twoIntsStruct)
(2,for (i = 0; i < 100; i++)
(3,0)
(4,i)
(5,data = dataBadBuffer)
(6,intOne)
(7,twoIntsStruct)
(8,source)
(9,0)
(10,RET)
(11,i)
(12,data)
(13,source[i])
(14,data)
(15,dataBadBuffer)
(16,dataBadBuffer)
(17,source[i].intOne)
(18,data[0])
(19,i < 100)
(20,i)
(21,sizeof(twoIntsStruct)
(22,i)
(23,printStructLine(&data[0])
(24,)
(25,&data[0])
(26,)
(27,i)
(28,i)
(29,goto source;)
(30,0)
(31,data)
(32,source[i].intOne = 0)
(33,source[i].intTwo)
(34,intTwo)
(35,0)
(36,)
(37,dataGoodBuffer)
(38,i++)
(39,)
(40,source:)
(41,100)
(42,memmove(data, source, 100*sizeof(twoIntsStruct)
(43,source)
(44,source[i].intTwo = 0)
(45,i = 0)
(46,source)
(47,100)
(48,source[i])
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^