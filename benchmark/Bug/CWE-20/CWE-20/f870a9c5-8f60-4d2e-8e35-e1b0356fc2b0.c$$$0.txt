-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
62,66
63,64
64,65
64,66
66,67
66,68
66,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,69,71,75,77,79,83,85,89,91
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,5,0)
(19,35,0)
(7,26,0)
(29,17,0)
(6,14,0)
(37,34,0)
(1,29,0)
(13,0,0)
(5,17,0)
(3,14,0)
(34,37,0)
(37,42,0)
(5,35,0)
(36,34,0)
(31,17,0)
(16,31,0)
(4,12,0)
(2,17,0)
(21,5,0)
(44,3,0)
(15,0,0)
(35,19,0)
(16,5,0)
(10,31,0)
(13,31,0)
(23,3,0)
(38,1,0)
(33,30,0)
(26,5,0)
(1,12,0)
(33,25,0)
(8,13,0)
(14,3,0)
(40,21,0)
(14,5,0)
(27,21,0)
(43,16,0)
(11,12,0)
(35,5,0)
(32,17,0)
(18,29,0)
(14,17,0)
(30,33,0)
(42,35,0)
(9,30,0)
(0,31,0)
(26,31,0)
(1,5,0)
(22,5,0)
(35,42,0)
(12,1,0)
(39,37,0)
(24,14,0)
(20,0,0)
(28,13,0)
(42,37,0)
(34,36,1)
(3,23,1)
(40,5,1)
(23,44,1)
(43,26,1)
(33,30,1)
(8,0,1)
(44,6,1)
(35,19,1)
(16,43,1)
(12,11,1)
(41,16,1)
(36,39,1)
(9,21,1)
(29,18,1)
(26,5,1)
(13,28,1)
(1,12,1)
(20,29,1)
(15,20,1)
(16,5,1)
(18,1,1)
(13,5,1)
(37,34,1)
(24,21,1)
(42,37,1)
(13,0,1)
(14,5,1)
(21,27,1)
(7,13,1)
(0,15,1)
(30,9,1)
(14,3,1)
(11,4,1)
(4,38,1)
(35,42,1)
(28,8,1)
(24,33,1)
(38,14,1)
(1,5,1)
(5,35,1)
(39,22,1)
(6,24,1)
(26,7,1)
(21,5,1)
(27,40,1)
(42,37,2)
(35,42,2)
(33,21,2)
(14,5,2)
(33,30,2)
(37,34,2)
(9,21,2)
(35,19,2)
(13,5,2)
(1,5,2)
(30,21,2)
(26,5,2)
(5,35,2)
(14,3,2)
(13,0,2)
(1,12,2)
(16,5,2)
(21,5,2)
-----------------------------------
(0,dest[50] = "")
(1,data[100-1])
(2,if (data == NULL)
(3,100-1)
(4,100)
(5,data = (char *)
(6,\\\'A\\\')
(7,data)
(8,dest)
(9,1)
(10,dest)
(11,1)
(12,100-1)
(13,strcpy(dest, data)
(14,memset(data, \\\'A\\\', 100-1)
(15,"")
(16,free(data)
(17,)
(18,\\\'\\\\0\\\')
(19,char *)
(20,dest)
(21,data == NULL)
(22,data)
(23,1)
(24,data)
(25,)
(26,printLine(data)
(27,NULL)
(28,data)
(29,data[100-1] = \\\'\\\\0\\\')
(30,-1)
(31,)
(32,data)
(33,exit(-1)
(34,sizeof(char)
(35,(char *)
(36,char)
(37,100*sizeof(char)
(38,data)
(39,100)
(40,data)
(41,RET)
(42,malloc(100*sizeof(char)
(43,data)
(44,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^