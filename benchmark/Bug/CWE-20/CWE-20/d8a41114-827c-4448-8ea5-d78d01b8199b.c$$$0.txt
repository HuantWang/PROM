-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        char *replace;
        SOCKET connectSocket = INVALID_SOCKET;
        size_t dataLen = strlen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* Abort on error or the connection was closed */
            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(char)] = '\0';
            /* Eliminate CRLF */
            replace = strchr(data, '\r');
            if (replace)
            {
                *replace = '\0';
            }
            replace = strchr(data, '\n');
            if (replace)
            {
                *replace = '\0';
            }
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
52,64
52,65
52,66
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
151,153
152,153
152,154
154,155
156,157
157,158
157,159
158,159
160,161
162,163
162,164
163,164
164,165
164,166
167,168
168,169
168,170
169,170
169,171
171,172
175,176
175,177
176,177
176,178
177,178
177,179
178,179
180,181
182,183
182,184
183,184
186,187
188,189
189,190
189,191
190,191
190,192
191,192
193,194
193,195
194,195
196,197
196,198
197,198
199,200
200,201
200,202
204,205
205,206
205,207
206,207
208,209
208,210
208,211
209,210
211,212
214,215
214,216
215,216
217,218
218,219
219,220
219,221
220,221
221,222
224,225
225,226
225,227
226,227
228,229
228,230
228,231
229,230
231,232
234,235
234,236
235,236
237,238
238,239
239,240
239,241
240,241
241,242
245,246
245,247
246,247
246,248
247,248
249,250
251,252
252,253
253,254
253,255
254,255
256,257
258,259
259,260
-----nextToken-----
2,4,5,7,9,10,15,17,21,23,26,28,29,33,35,38,42,44,48,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,153,155,159,161,165,166,170,172,173,174,179,181,184,185,187,192,195,198,201,202,203,207,210,212,213,216,222,223,227,230,232,233,236,242,243,244,248,250,255,257,260
-----computeFrom-----
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
157,158
157,159
162,163
162,164
168,169
168,170
169,170
169,171
176,177
176,178
177,178
177,179
182,183
182,184
189,190
189,191
193,194
193,195
196,197
196,198
205,206
205,207
219,220
219,221
225,226
225,227
239,240
239,241
246,247
246,248
-----guardedBy-----
248,257
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    return data;}
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        char *replace;        SOCKET connectSocket = INVALID_SOCKET;        size_t dataLen = strlen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
char *replace;
char *replace;
char
*replace
*
replace
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            /* Abort on error or the connection was closed */            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(char)] = '\0';            /* Eliminate CRLF */            replace = strchr(data, '\r');            if (replace)            {                *replace = '\0';            }            replace = strchr(data, '\n');            if (replace)            {                *replace = '\0';            }        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);
recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0)
recv
recv
connectSocket
connectSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(char) * (100 - dataLen - 1)
sizeof(char)
char
char

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(char)] = '\0';
data[dataLen + recvResult / sizeof(char)] = '\0'
data[dataLen + recvResult / sizeof(char)]
data
data
dataLen + recvResult / sizeof(char)
dataLen
dataLen
recvResult / sizeof(char)
recvResult
recvResult
sizeof(char)
char
char

'\0'
replace = strchr(data, '\r');
replace = strchr(data, '\r')
replace
replace
strchr(data, '\r')
strchr
strchr
data
data
'\r'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
replace = strchr(data, '\n');
replace = strchr(data, '\n')
replace
replace
strchr(data, '\n')
strchr
strchr
data
data
'\n'
if (replace)            {                *replace = '\0';            }
replace
replace
{                *replace = '\0';            }
*replace = '\0';
*replace = '\0'
*replace
replace
replace
'\0'
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
return data;
data
data
-----joern-----
(148,81,0)
(13,162,0)
(120,59,0)
(160,44,0)
(23,155,0)
(15,173,0)
(112,31,0)
(47,85,0)
(70,162,0)
(58,162,0)
(1,155,0)
(151,162,0)
(76,7,0)
(101,22,0)
(64,5,0)
(18,70,0)
(12,34,0)
(68,11,0)
(2,75,0)
(145,32,0)
(152,162,0)
(44,160,0)
(38,78,0)
(72,170,0)
(81,22,0)
(172,32,0)
(31,7,0)
(39,16,0)
(132,21,0)
(44,141,0)
(49,161,0)
(129,32,0)
(79,66,0)
(5,53,0)
(25,102,0)
(117,7,0)
(43,62,0)
(133,170,0)
(90,15,0)
(122,32,0)
(127,162,0)
(41,168,0)
(5,155,0)
(158,162,0)
(12,87,0)
(132,161,0)
(21,154,0)
(16,158,0)
(168,92,0)
(63,135,0)
(110,38,0)
(109,73,0)
(55,32,0)
(38,1,0)
(118,173,0)
(24,61,0)
(159,58,0)
(143,106,0)
(54,162,0)
(18,24,0)
(10,102,0)
(69,152,0)
(113,162,0)
(169,152,0)
(87,12,0)
(140,32,0)
(97,5,0)
(139,32,0)
(1,17,0)
(116,94,0)
(17,1,0)
(144,0,0)
(173,162,0)
(99,163,0)
(130,66,0)
(71,70,0)
(14,38,0)
(168,158,0)
(157,170,0)
(82,32,0)
(150,32,0)
(109,78,0)
(135,78,0)
(6,13,0)
(65,32,0)
(35,6,0)
(160,125,0)
(42,18,0)
(38,158,0)
(19,159,0)
(13,6,0)
(114,137,0)
(121,78,0)
(59,125,0)
(16,82,0)
(11,128,0)
(86,162,0)
(160,53,0)
(50,136,0)
(170,158,0)
(31,13,0)
(51,82,0)
(168,82,0)
(106,132,0)
(26,125,0)
(155,5,0)
(161,132,0)
(53,32,0)
(153,53,0)
(115,17,0)
(135,63,0)
(63,66,0)
(1,38,0)
(26,0,0)
(62,53,0)
(22,162,0)
(88,135,0)
(52,160,0)
(37,118,0)
(66,78,0)
(44,38,0)
(126,109,0)
(40,162,0)
(108,58,0)
(96,127,0)
(91,71,0)
(75,11,0)
(22,81,0)
(30,32,0)
(107,70,0)
(93,58,0)
(138,150,0)
(149,82,0)
(66,63,0)
(46,81,0)
(67,150,0)
(0,26,0)
(70,71,0)
(173,15,0)
(102,158,0)
(85,12,0)
(109,0,0)
(171,59,0)
(147,146,0)
(58,108,0)
(0,53,0)
(131,160,0)
(56,33,0)
(154,21,0)
(33,127,0)
(34,12,0)
(59,100,0)
(119,73,0)
(132,106,0)
(8,108,0)
(45,162,0)
(4,87,0)
(7,31,0)
(83,118,0)
(21,94,0)
(78,38,0)
(141,44,0)
(62,125,0)
(155,1,0)
(103,34,0)
(142,34,0)
(12,85,0)
(111,28,0)
(78,162,0)
(74,24,0)
(53,62,0)
(132,158,0)
(167,33,0)
(94,21,0)
(156,16,0)
(75,22,0)
(73,109,0)
(27,32,0)
(166,132,0)
(80,26,0)
(21,132,0)
(158,170,0)
(38,44,0)
(57,71,0)
(134,158,0)
(32,100,0)
(81,125,0)
(20,135,0)
(71,125,0)
(123,162,0)
(0,109,0)
(26,151,0)
(58,159,0)
(9,151,0)
(104,3,1)
(3,70,1)
(74,18,1)
(167,58,1)
(23,17,1)
(142,53,1)
(117,127,1)
(132,21,1)
(37,13,1)
(88,20,1)
(46,148,1)
(159,19,1)
(14,121,1)
(156,104,1)
(135,88,1)
(64,23,1)
(133,134,1)
(70,71,1)
(85,47,1)
(69,85,1)
(173,15,1)
(12,87,1)
(16,82,1)
(26,0,1)
(171,59,1)
(22,81,1)
(134,152,1)
(20,66,1)
(75,2,1)
(0,109,1)
(155,5,1)
(166,173,1)
(101,151,1)
(104,24,1)
(114,105,1)
(151,9,1)
(105,16,1)
(91,107,1)
(38,1,1)
(42,3,1)
(81,46,1)
(156,111,1)
(11,68,1)
(119,126,1)
(19,102,1)
(156,50,1)
(63,66,1)
(59,125,1)
(6,35,1)
(66,78,1)
(156,99,1)
(25,10,1)
(106,143,1)
(115,44,1)
(157,72,1)
(1,155,1)
(149,51,1)
(2,165,1)
(170,157,1)
(5,97,1)
(62,125,1)
(148,101,1)
(38,44,1)
(99,63,1)
(158,170,1)
(168,158,1)
(7,76,1)
(152,169,1)
(132,158,1)
(16,39,1)
(120,114,1)
(57,91,1)
(53,62,1)
(80,63,1)
(112,7,1)
(31,112,1)
(35,31,1)
(73,119,1)
(8,93,1)
(102,25,1)
(49,132,1)
(33,56,1)
(160,52,1)
(118,83,1)
(15,90,1)
(39,156,1)
(62,43,1)
(103,142,1)
(120,105,1)
(76,117,1)
(169,69,1)
(160,53,1)
(116,166,1)
(109,73,1)
(38,110,1)
(111,161,1)
(79,130,1)
(127,96,1)
(144,80,1)
(63,135,1)
(43,153,1)
(51,150,1)
(16,158,1)
(87,4,1)
(31,7,1)
(24,74,1)
(72,133,1)
(17,115,1)
(4,34,1)
(82,149,1)
(107,165,1)
(132,106,1)
(34,103,1)
(153,82,1)
(135,78,1)
(85,12,1)
(44,141,1)
(81,125,1)
(66,79,1)
(126,144,1)
(90,118,1)
(18,42,1)
(105,168,1)
(52,131,1)
(142,104,1)
(56,167,1)
(75,22,1)
(21,154,1)
(5,53,1)
(26,125,1)
(58,108,1)
(130,78,1)
(102,158,1)
(83,37,1)
(44,160,1)
(13,6,1)
(131,14,1)
(41,16,1)
(138,67,1)
(165,22,1)
(97,64,1)
(38,158,1)
(110,1,1)
(0,53,1)
(68,75,1)
(94,116,1)
(59,120,1)
(12,34,1)
(96,33,1)
(161,49,1)
(18,70,1)
(160,125,1)
(50,85,1)
(143,21,1)
(108,8,1)
(156,147,1)
(109,78,1)
(21,94,1)
(147,102,1)
(78,38,1)
(168,41,1)
(1,17,1)
(121,161,1)
(10,158,1)
(93,159,1)
(71,57,1)
(71,125,1)
(161,132,1)
(150,138,1)
(168,82,1)
(47,12,1)
(9,26,1)
(107,11,1)
(58,159,1)
(33,102,2)
(168,82,2)
(44,141,2)
(63,135,2)
(93,102,2)
(16,82,2)
(147,102,2)
(38,161,2)
(166,102,2)
(160,125,2)
(26,125,2)
(58,159,2)
(72,85,2)
(108,102,2)
(173,15,2)
(135,78,2)
(151,63,2)
(74,3,2)
(68,165,2)
(97,161,2)
(81,125,2)
(111,161,2)
(22,63,2)
(38,158,2)
(38,1,2)
(44,161,2)
(3,63,2)
(16,158,2)
(5,53,2)
(107,63,2)
(17,161,2)
(132,102,2)
(58,102,2)
(57,63,2)
(173,102,2)
(71,63,2)
(135,66,2)
(49,102,2)
(160,161,2)
(110,161,2)
(56,102,2)
(21,94,2)
(148,63,2)
(99,63,2)
(20,66,2)
(118,102,2)
(63,161,2)
(112,102,2)
(158,170,2)
(21,154,2)
(85,12,2)
(102,85,2)
(161,102,2)
(132,21,2)
(50,85,2)
(18,70,2)
(35,102,2)
(58,108,2)
(121,161,2)
(76,102,2)
(0,63,2)
(6,102,2)
(69,85,2)
(85,104,2)
(2,165,2)
(117,102,2)
(78,38,2)
(78,161,2)
(25,85,2)
(83,102,2)
(73,63,2)
(75,165,2)
(41,16,2)
(13,102,2)
(0,109,2)
(7,102,2)
(64,161,2)
(22,81,2)
(91,63,2)
(24,3,2)
(115,161,2)
(14,161,2)
(1,17,2)
(13,6,2)
(169,85,2)
(155,161,2)
(104,63,2)
(155,5,2)
(42,3,2)
(18,3,2)
(131,161,2)
(34,104,2)
(12,104,2)
(143,102,2)
(168,16,2)
(109,78,2)
(1,155,2)
(19,102,2)
(161,132,2)
(38,44,2)
(159,102,2)
(71,125,2)
(79,161,2)
(53,62,2)
(44,160,2)
(119,63,2)
(12,34,2)
(47,104,2)
(10,85,2)
(37,102,2)
(103,104,2)
(160,53,2)
(62,125,2)
(102,158,2)
(88,66,2)
(81,63,2)
(26,0,2)
(26,63,2)
(5,161,2)
(134,85,2)
(66,161,2)
(106,102,2)
(23,161,2)
(109,63,2)
(167,102,2)
(158,85,2)
(9,63,2)
(70,63,2)
(152,85,2)
(31,102,2)
(101,63,2)
(130,161,2)
(4,104,2)
(168,158,2)
(11,165,2)
(1,161,2)
(0,53,2)
(142,104,2)
(132,158,2)
(116,102,2)
(87,104,2)
(66,78,2)
(75,22,2)
(96,102,2)
(31,7,2)
(165,63,2)
(127,102,2)
(94,102,2)
(46,63,2)
(132,106,2)
(133,85,2)
(109,73,2)
(114,105,2)
(126,63,2)
(170,85,2)
(59,125,2)
(90,102,2)
(157,85,2)
(70,71,2)
(144,63,2)
(52,161,2)
(15,102,2)
(63,66,2)
(21,102,2)
(12,87,2)
(80,63,2)
(8,102,2)
(171,59,2)
-----------------------------------
(0,dataLen + recvResult / sizeof(char)
(1,sizeof(char)
(2,replace)
(3,replace)
(4,wsaData)
(5,dataLen - 1)
(6,inet_addr(IP_ADDRESS)
(7,service.sin_addr)
(8,service)
(9,\'\\\\0\')
(10,connectSocket)
(11,*replace = '\\\\0')
(12,WSAStartup(MAKEWORD(2,2)
(13,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(14,connectSocket)
(15,htons(TCP_PORT)
(16,connectSocket != INVALID_SOCKET)
(17,sizeof(char)
(18,*replace)
(19,service)
(20,recvResult)
(21,(struct sockaddr*)
(22,replace = strchr(data, \'\\\\r\')
(23,100)
(24,*replace = '\\\\0')
(25,INVALID_SOCKET)
(26,data[dataLen + recvResult / sizeof(char)
(27,wsaData)
(28,)
(29,*replace = \'\\\\0\')
(30,service)
(31,service.sin_addr.s_addr)
(32,)
(33,service.sin_family)
(34,MAKEWORD(2,2)
(35,IP_ADDRESS)
(36,replace = strchr(data, '\\\\r')
(37,service)
(38,recv(connectSocket, (char *)
(39,INVALID_SOCKET)
(40,if (connect(connectSocket, (struct sockaddr*)
(41,connectSocket)
(42,replace)
(43,data)
(44,(char *)
(45,if (replace)
(46,'\\\\r')
(47,NO_ERROR)
(48,'\\\\0')
(49,SOCKET_ERROR)
(50,break;)
(51,connectSocket)
(52,dataLen)
(53,dataLen = strlen(data)
(54,if (recvResult == SOCKET_ERROR || recvResult == 0)
(55,if (connectSocket != INVALID_SOCKET)
(56,sin_family)
(57,'\\\\n')
(58,memset(&service, 0, sizeof(service)
(59,return data;)
(60,\'\\\\n\')
(61,)
(62,strlen(data)
(63,recvResult == SOCKET_ERROR || recvResult == 0)
(64,dataLen)
(65,if (wsaDataInit)
(66,recvResult == SOCKET_ERROR)
(67,wsaDataInit)
(68,'\\\\0')
(69,wsaDataInit)
(70,replace = strchr(data, '\\\\n')
(71,strchr(data, '\\\\n')
(72,SOCK_STREAM)
(73,sizeof(char)
(74,'\\\\0')
(75,*replace)
(76,sin_addr)
(77,replace = strchr(data, \'\\\\n\')
(78,recvResult = recv(connectSocket, (char *)
(79,SOCKET_ERROR)
(80,data)
(81,strchr(data, '\\\\r')
(82,connectSocket = INVALID_SOCKET)
(83,sin_port)
(84,\'\\\\0\')
(85,WSAStartup(MAKEWORD(2,2)
(86,if (WSAStartup(MAKEWORD(2,2)
(87,&wsaData)
(88,0)
(89,\'\\\\0\')
(90,TCP_PORT)
(91,data)
(92,)
(93,0)
(94,&service)
(95,*replace = \'\\\\0\')
(96,AF_INET)
(97,1)
(98,strchr(data, \'\\\\r\')
(99,break;)
(100,)
(101,replace)
(102,connectSocket == INVALID_SOCKET)
(103,2)
(104,0)
(105,wsaDataInit)
(106,sizeof(service)
(107,replace)
(108,sizeof(service)
(109,recvResult / sizeof(char)
(110,0)
(111,break;)
(112,s_addr)
(113,if (replace)
(114,WSACleanup()
(115,char)
(116,service)
(117,service)
(118,service.sin_port)
(119,char)
(120,data)
(121,recvResult)
(122,do)
(123,if (connectSocket == INVALID_SOCKET)
(124,strchr(data, \'\\\\n\')
(125,char * data)
(126,recvResult)
(127,service.sin_family = AF_INET)
(128,)
(129,recvResult)
(130,recvResult)
(131,data)
(132,connect(connectSocket, (struct sockaddr*)
(133,AF_INET)
(134,connectSocket)
(135,recvResult == 0)
(136,)
(137,)
(138,0)
(139,wsaDataInit)
(140,replace)
(141,char *)
(142,2)
(143,service)
(144,dataLen)
(145,dataLen)
(146,)
(147,break;)
(148,data)
(149,INVALID_SOCKET)
(150,wsaDataInit = 0)
(151,data[dataLen + recvResult / sizeof(char)
(152,wsaDataInit = 1)
(153,dataLen)
(154,struct sockaddr*)
(155,100 - dataLen - 1)
(156,connectSocket)
(157,IPPROTO_TCP)
(158,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(159,&service)
(160,data + dataLen)
(161,connect(connectSocket, (struct sockaddr*)
(162,)
(163,)
(164,\'\\\\r\')
(165,replace)
(166,connectSocket)
(167,service)
(168,CLOSE_SOCKET(connectSocket)
(169,1)
(170,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(171,RET)
(172,connectSocket)
(173,service.sin_port = htons(TCP_PORT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^