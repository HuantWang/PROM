-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_11_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrue())
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
62,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,63,68,70
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_11_bad(){    long * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_11_bad()
CWE415_Double_Free__malloc_free_long_11_bad
{    long * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(4,6,0)
(18,1,0)
(19,11,0)
(29,5,0)
(22,17,0)
(14,22,0)
(2,0,0)
(0,3,0)
(11,6,0)
(9,14,0)
(17,19,0)
(28,0,0)
(16,14,0)
(7,1,0)
(11,19,0)
(17,22,0)
(22,5,0)
(19,17,0)
(12,3,0)
(1,7,0)
(17,20,0)
(8,28,0)
(6,4,0)
(25,22,0)
(31,11,0)
(20,17,0)
(28,22,0)
(30,3,0)
(10,25,0)
(6,11,0)
(25,5,0)
(7,13,0)
(28,26,0)
(15,0,0)
(27,22,0)
(23,3,0)
(2,15,1)
(21,28,1)
(1,18,1)
(21,32,1)
(25,10,1)
(10,7,1)
(11,6,1)
(17,20,1)
(28,22,1)
(28,8,1)
(14,22,1)
(6,31,1)
(18,14,1)
(28,0,1)
(22,17,1)
(8,32,1)
(19,11,1)
(25,22,1)
(17,19,1)
(31,27,1)
(14,9,1)
(27,24,1)
(10,14,1)
(32,24,1)
(16,22,1)
(32,25,1)
(0,2,1)
(24,0,1)
(9,16,1)
(7,1,1)
(6,4,1)
(22,17,2)
(28,22,2)
(17,20,2)
(25,24,2)
(14,22,2)
(9,24,2)
(10,24,2)
(11,24,2)
(31,24,2)
(8,32,2)
(6,24,2)
(17,24,2)
(27,24,2)
(17,19,2)
(19,24,2)
(14,24,2)
(6,4,2)
(1,14,2)
(28,0,2)
(28,32,2)
(16,24,2)
(7,14,2)
(25,22,2)
(19,11,2)
(11,6,2)
(22,24,2)
(18,14,2)
(7,1,2)
-----------------------------------
(0,data = NULL)
(1,-1)
(2,NULL)
(3,)
(4,long)
(5,)
(6,sizeof(long)
(7,exit(-1)
(8,data)
(9,NULL)
(10,data)
(11,100*sizeof(long)
(12,data)
(13,)
(14,data == NULL)
(15,data)
(16,data)
(17,(long *)
(18,1)
(19,malloc(100*sizeof(long)
(20,long *)
(21,RET)
(22,data = (long *)
(23,if(globalReturnsTrue()
(24,globalReturnsTrue()
(25,free(data)
(26,)
(27,data)
(28,free(data)
(29,if (data == NULL)
(30,if(globalReturnsTrue()
(31,100)
(32,globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^