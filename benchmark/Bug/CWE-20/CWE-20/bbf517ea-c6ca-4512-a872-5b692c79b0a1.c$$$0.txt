-----label-----
1
-----code-----
static void badSink(void * data)
{
    {
        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
        size_t dataLen = strlen((char *)data);
        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
        if (dest == NULL) {exit(-1);}
        (void)wcscpy(dest, data);
        printLine((char *)dest);
        free(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
37,38
37,39
39,40
41,42
41,43
41,44
42,43
44,45
44,46
45,46
48,49
49,50
49,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
84,85
86,87
88,89
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,6,8,9,15,17,21,24,26,28,31,33,34,38,40,43,46,47,50,51,55,57,62,64,68,69,72,74,76,80,83,85,87,91,93
-----computeFrom-----
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(void * data){    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
static void
badSink(void * data)
badSink
void * data
void
* data
*
data
{    {        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }}
{        /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */        size_t dataLen = strlen((char *)data);        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));        if (dest == NULL) {exit(-1);}        (void)wcscpy(dest, data);        printLine((char *)dest);        free(dest);    }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void
* dest = (void *)calloc(dataLen+1, sizeof(wchar_t))
*
dest
= (void *)calloc(dataLen+1, sizeof(wchar_t))
(void *)calloc(dataLen+1, sizeof(wchar_t))
void *
void
*
*
calloc(dataLen+1, sizeof(wchar_t))
calloc
calloc
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

if (dest == NULL) {exit(-1);}
dest == NULL
dest
dest
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
free(dest);
free(dest)
free
free
dest
dest
-----joern-----
(30,40,0)
(24,0,0)
(15,38,0)
(13,36,0)
(31,33,0)
(11,12,0)
(30,12,0)
(34,29,0)
(40,2,0)
(11,39,0)
(13,32,0)
(4,10,0)
(12,0,0)
(35,38,0)
(21,13,0)
(12,38,0)
(5,30,0)
(24,33,0)
(24,3,0)
(2,40,0)
(25,38,0)
(19,13,0)
(17,29,0)
(9,12,0)
(13,19,0)
(23,11,0)
(16,33,0)
(0,12,0)
(14,12,0)
(33,10,0)
(8,38,0)
(38,18,0)
(40,30,0)
(29,34,0)
(3,24,0)
(1,3,0)
(40,38,0)
(0,7,0)
(0,24,0)
(11,15,0)
(20,9,0)
(30,36,0)
(34,27,0)
(22,14,0)
(9,38,0)
(10,19,0)
(19,10,0)
(7,0,0)
(39,11,0)
(28,12,0)
(10,38,0)
(15,11,0)
(37,30,0)
(6,14,0)
(33,24,0)
(32,13,0)
(15,11,1)
(13,36,1)
(23,40,1)
(5,14,1)
(30,36,1)
(24,33,1)
(11,23,1)
(0,24,1)
(14,12,1)
(13,21,1)
(6,12,1)
(37,5,1)
(34,29,1)
(29,17,1)
(26,9,1)
(1,33,1)
(20,15,1)
(12,0,1)
(11,39,1)
(28,10,1)
(16,28,1)
(10,19,1)
(17,14,1)
(40,30,1)
(3,1,1)
(5,34,1)
(31,16,1)
(33,31,1)
(19,13,1)
(30,12,1)
(30,37,1)
(40,2,1)
(33,10,1)
(22,6,1)
(14,22,1)
(24,3,1)
(9,20,1)
(9,12,1)
(11,12,1)
(13,32,1)
(0,7,1)
(21,4,1)
(17,14,2)
(30,36,2)
(0,24,2)
(19,13,2)
(12,0,2)
(34,29,2)
(40,2,2)
(11,12,2)
(24,33,2)
(15,11,2)
(11,39,2)
(34,14,2)
(13,32,2)
(33,10,2)
(10,19,2)
(0,7,2)
(40,30,2)
(30,12,2)
(24,3,2)
(13,36,2)
(29,14,2)
(9,12,2)
(14,12,2)
-----------------------------------
(0,(void *)
(1,wchar_t)
(2,void)
(3,sizeof(wchar_t)
(4,dataLen)
(5,dest)
(6,dest)
(7,void *)
(8,dest)
(9,free(dest)
(10,dataLen = strlen((char *)
(11,(char *)
(12,* dest = (void *)
(13,(char *)
(14,dest == NULL)
(15,printLine((char *)
(16,dataLen)
(17,1)
(18,)
(19,strlen((char *)
(20,dest)
(21,data)
(22,NULL)
(23,dest)
(24,calloc(dataLen+1, sizeof(wchar_t)
(25,if (dest == NULL)
(26,RET)
(27,)
(28,dest)
(29,-1)
(30,wcscpy(dest, data)
(31,1)
(32,char *)
(33,dataLen+1)
(34,exit(-1)
(35,dataLen)
(36,void * data)
(37,data)
(38,)
(39,char *)
(40,(void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^