-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (dataBuffer == NULL) {exit(-1);}
        wmemset(dataBuffer, L'A', 100-1);
        dataBuffer[100-1] = L'\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with 'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        wcsncpy(data, source, 100-1);
        /* Ensure the destination buffer is null terminated */
        data[100-1] = L'\0';
        printWLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
34,35
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
65,66
65,67
68,69
69,70
69,71
70,71
70,72
71,72
73,74
73,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
87,88
88,89
88,90
89,90
93,94
93,95
93,96
93,97
93,98
93,99
94,95
95,96
95,97
97,98
97,99
99,100
101,102
102,103
102,104
102,105
102,106
103,104
105,106
108,109
108,110
111,112
112,113
112,114
113,114
113,115
114,115
116,117
116,118
120,121
121,122
121,123
121,124
121,125
122,123
124,125
126,127
128,129
128,130
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,33,35,38,40,43,44,48,50,55,57,61,63,64,66,67,72,74,75,76,80,83,84,85,86,90,91,92,96,98,100,104,106,107,109,110,115,117,118,119,123,125,127,129,130,135,137,138,139,143,145
-----computeFrom-----
13,14
13,15
39,40
39,41
46,47
46,48
65,66
65,67
69,70
69,71
73,74
73,75
78,79
78,80
81,82
81,83
108,109
108,110
112,113
112,114
116,117
116,118
128,129
128,130
132,133
132,134
136,137
136,138
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        wcsncpy(data, source, 100-1);        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_15_bad()
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        wcsncpy(data, source, 100-1);        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));        if (dataBuffer == NULL) {exit(-1);}        wmemset(dataBuffer, L'A', 100-1);        dataBuffer[100-1] = L'\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with 'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        wcsncpy(data, source, 100-1);        /* Ensure the destination buffer is null terminated */        data[100-1] = L'\0';        printWLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncpy(data, source, 100-1);
wcsncpy(data, source, 100-1)
wcsncpy
wcsncpy
data
data
source
source
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(15,16,0)
(9,51,0)
(48,37,0)
(14,37,0)
(32,41,0)
(28,32,0)
(19,20,0)
(14,5,0)
(20,31,0)
(41,32,0)
(40,34,0)
(51,0,0)
(24,35,0)
(46,25,0)
(25,31,0)
(32,28,0)
(1,17,0)
(8,16,0)
(20,35,0)
(25,41,0)
(21,6,0)
(29,45,0)
(50,35,0)
(32,7,0)
(27,0,0)
(36,17,0)
(35,6,0)
(30,31,0)
(31,16,0)
(22,42,0)
(4,34,0)
(2,35,0)
(20,34,0)
(7,32,0)
(17,41,0)
(18,49,0)
(50,31,0)
(12,25,0)
(37,14,0)
(50,42,0)
(42,6,0)
(16,49,0)
(28,0,0)
(13,6,0)
(31,25,0)
(41,16,0)
(26,42,0)
(34,20,0)
(33,49,0)
(0,28,0)
(0,51,0)
(39,49,0)
(43,50,0)
(23,16,0)
(45,49,0)
(44,41,0)
(38,49,0)
(47,35,0)
(10,20,0)
(20,42,0)
(44,11,1)
(2,38,1)
(8,14,1)
(22,26,1)
(28,0,1)
(9,27,1)
(18,31,1)
(2,18,1)
(0,51,1)
(45,29,1)
(27,44,1)
(38,45,1)
(50,42,1)
(50,31,1)
(20,31,1)
(14,37,1)
(34,4,1)
(8,17,1)
(3,50,1)
(46,30,1)
(43,24,1)
(31,25,1)
(42,22,1)
(32,28,1)
(4,40,1)
(24,20,1)
(11,42,1)
(20,42,1)
(37,48,1)
(40,10,1)
(41,32,1)
(25,41,1)
(17,36,1)
(50,43,1)
(32,7,1)
(20,34,1)
(36,1,1)
(10,19,1)
(19,2,1)
(48,17,1)
(51,9,1)
(29,11,1)
(12,46,1)
(25,12,1)
(30,8,1)
(1,41,1)
(17,41,1)
(30,11,2)
(29,11,2)
(20,42,2)
(17,41,2)
(31,11,2)
(12,11,2)
(31,25,2)
(32,11,2)
(50,31,2)
(38,11,2)
(20,31,2)
(25,11,2)
(14,37,2)
(50,42,2)
(51,11,2)
(0,51,2)
(0,11,2)
(41,11,2)
(25,41,2)
(46,11,2)
(28,0,2)
(32,7,2)
(32,28,2)
(37,17,2)
(14,17,2)
(18,11,2)
(36,11,2)
(1,11,2)
(20,34,2)
(48,17,2)
(41,32,2)
(17,11,2)
(27,11,2)
(45,11,2)
(28,11,2)
(44,11,2)
(9,11,2)
(8,11,2)
-----------------------------------
(0,100*sizeof(wchar_t)
(1,dataBuffer)
(2,\\\'\\\\0\\\')
(3,RET)
(4,1)
(5,)
(6,)
(7,wchar_t *)
(8,\\\'\\\\0\\\')
(9,wchar_t)
(10,source)
(11,6)
(12,8)
(13,switch(6)
(14,exit(-1)
(15,dataBuffer)
(16,)
(17,dataBuffer == NULL)
(18,break;)
(19,data)
(20,wcsncpy(data, source, 100-1)
(21,data)
(22,NULL)
(23,if (dataBuffer == NULL)
(24,\\\'\\\\0\\\')
(25,dataBuffer - 8)
(26,data)
(27,100)
(28,malloc(100*sizeof(wchar_t)
(29,"Benign, fixed string")
(30,data)
(31,data = dataBuffer - 8)
(32,(wchar_t *)
(33,default:)
(34,100-1)
(35,)
(36,NULL)
(37,-1)
(38,break;)
(39,case 6:)
(40,100)
(41,* dataBuffer = (wchar_t *)
(42,data = NULL)
(43,data)
(44,dataBuffer)
(45,printLine("Benign, fixed string")
(46,dataBuffer)
(47,source)
(48,1)
(49,)
(50,printWLine(data)
(51,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^