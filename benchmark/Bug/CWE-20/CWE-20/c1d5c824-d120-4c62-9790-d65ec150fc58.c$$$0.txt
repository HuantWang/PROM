-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = wcslen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
55,61
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
94,96
95,96
98,99
99,100
101,102
102,103
103,104
103,105
104,105
104,106
105,106
107,108
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,82,84,89,90,93,96,97,100,106,108,111,113,117,119,123,125
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
77,78
77,79
87,88
87,89
91,92
91,93
94,95
94,96
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = wcslen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = wcslen(source);
sourceLen = wcslen(source)
sourceLen
sourceLen
wcslen(source)
wcslen
wcslen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(21,10,0)
(48,49,0)
(38,17,0)
(29,56,0)
(28,56,0)
(28,18,0)
(58,51,0)
(40,2,0)
(50,11,0)
(21,49,0)
(54,40,0)
(1,56,0)
(36,10,0)
(13,45,0)
(29,58,0)
(11,50,0)
(7,49,0)
(21,37,0)
(14,18,0)
(17,49,0)
(22,15,0)
(24,17,0)
(17,24,0)
(0,21,0)
(26,21,0)
(53,58,0)
(9,33,0)
(10,34,0)
(61,27,0)
(31,28,0)
(46,30,0)
(36,18,0)
(51,50,0)
(6,37,0)
(20,24,0)
(10,21,0)
(51,16,0)
(43,42,0)
(3,37,0)
(32,11,0)
(24,30,0)
(2,47,0)
(28,58,0)
(50,51,0)
(55,37,0)
(23,55,0)
(18,15,0)
(35,33,0)
(30,55,0)
(57,56,0)
(12,29,0)
(56,15,0)
(36,58,0)
(60,36,0)
(41,7,0)
(8,56,0)
(55,30,0)
(58,27,0)
(51,58,0)
(16,51,0)
(30,56,0)
(11,45,0)
(19,42,0)
(2,40,0)
(44,36,0)
(42,58,0)
(36,49,0)
(4,18,0)
(5,15,0)
(45,11,0)
(59,56,0)
(52,24,0)
(39,49,0)
(37,56,0)
(29,18,0)
(29,12,1)
(52,38,1)
(7,49,1)
(21,49,1)
(17,24,1)
(19,58,1)
(4,14,1)
(35,18,1)
(32,53,1)
(48,39,1)
(55,37,1)
(44,60,1)
(6,2,1)
(54,42,1)
(33,9,1)
(11,45,1)
(51,16,1)
(26,0,1)
(42,43,1)
(3,6,1)
(10,21,1)
(38,7,1)
(60,17,1)
(50,11,1)
(42,58,1)
(20,52,1)
(51,50,1)
(28,18,1)
(29,18,1)
(36,18,1)
(58,51,1)
(36,44,1)
(30,55,1)
(43,19,1)
(31,29,1)
(13,32,1)
(29,58,1)
(9,35,1)
(41,10,1)
(49,48,1)
(38,49,1)
(53,33,1)
(6,42,1)
(24,30,1)
(17,49,1)
(46,37,1)
(21,37,1)
(7,41,1)
(55,23,1)
(28,31,1)
(2,40,1)
(12,17,1)
(23,46,1)
(0,36,1)
(28,58,1)
(36,58,1)
(36,49,1)
(39,30,1)
(45,13,1)
(24,20,1)
(40,54,1)
(6,33,1)
(25,28,1)
(37,3,1)
(21,26,1)
(18,4,1)
(2,42,2)
(13,33,2)
(50,11,2)
(55,37,2)
(19,33,2)
(58,33,2)
(10,17,2)
(11,45,2)
(28,18,2)
(24,17,2)
(0,17,2)
(52,17,2)
(21,37,2)
(30,55,2)
(60,17,2)
(20,17,2)
(38,17,2)
(7,49,2)
(10,21,2)
(41,17,2)
(36,49,2)
(51,50,2)
(53,33,2)
(29,58,2)
(21,17,2)
(43,33,2)
(2,40,2)
(50,33,2)
(17,24,2)
(29,18,2)
(42,33,2)
(44,17,2)
(36,17,2)
(7,17,2)
(32,33,2)
(24,30,2)
(28,58,2)
(26,17,2)
(11,33,2)
(45,33,2)
(17,17,2)
(42,58,2)
(36,18,2)
(51,16,2)
(54,42,2)
(40,42,2)
(51,33,2)
(21,49,2)
(17,49,2)
(58,51,2)
(36,58,2)
-----------------------------------
(0,source)
(1,source)
(2,exit(-1)
(3,SRC_STRING)
(4,NULL)
(5,data)
(6,source)
(7,i++)
(8,sourceLen)
(9,5)
(10,data[i] = source[i])
(11,10*sizeof(wchar_t)
(12,data)
(13,wchar_t)
(14,data)
(15,)
(16,wchar_t *)
(17,i < sourceLen + 1)
(18,data = NULL)
(19,data)
(20,1)
(21,source[i])
(22,if(GLOBAL_CONST_FIVE==5)
(23,source)
(24,sourceLen + 1)
(25,RET)
(26,i)
(27,)
(28,free(data)
(29,printWLine(data)
(30,sourceLen = wcslen(source)
(31,data)
(32,10)
(33,GLOBAL_CONST_FIVE==5)
(34,)
(35,GLOBAL_CONST_FIVE)
(36,data[i])
(37,source[10+1] = SRC_STRING)
(38,i)
(39,i)
(40,-1)
(41,i)
(42,data == NULL)
(43,NULL)
(44,i)
(45,sizeof(wchar_t)
(46,sourceLen)
(47,)
(48,0)
(49,i = 0)
(50,malloc(10*sizeof(wchar_t)
(51,(wchar_t *)
(52,sourceLen)
(53,data)
(54,1)
(55,wcslen(source)
(56,)
(57,i)
(58,data = (wchar_t *)
(59,for (i = 0; i < sourceLen + 1; i++)
(60,data)
(61,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^