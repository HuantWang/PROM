-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use an invalid index */
        data = 10;
    }
    for(j = 0; j < 1; j++)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
59,60
59,61
61,62
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
70,72
71,72
71,73
73,74
75,76
75,77
76,77
78,79
78,80
80,81
81,82
81,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
113,115
114,115
116,117
119,120
119,121
119,122
120,121
120,122
121,122
124,125
124,126
125,126
126,127
126,128
127,128
127,129
128,129
130,131
133,134
133,135
133,136
133,137
134,135
135,136
135,137
136,137
139,140
139,141
140,141
143,144
144,145
146,147
147,148
148,149
148,150
149,150
151,152
151,153
152,153
154,155
156,157
157,158
158,159
158,160
159,160
162,163
163,164
163,165
164,165
166,167
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,42,47,48,51,52,55,60,62,65,67,68,72,74,77,79,82,83,87,89,94,96,101,102,105,106,109,115,117,118,122,123,129,131,132,137,138,141,142,145,150,153,155,160,161,165,167
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
78,79
78,80
85,86
85,87
99,100
99,101
103,104
103,105
112,113
112,114
120,121
120,122
126,127
126,128
135,136
135,137
139,140
139,141
-----guardedBy-----
122,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad(){    int i,j;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17_bad
{    int i,j;    int data;    /* Initialize data */    data = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }    for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use an invalid index */        data = 10;    }
data = 10;
data = 10
data
data
10
for(j = 0; j < 1; j++)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(9,90,0)
(58,56,0)
(23,26,0)
(61,65,0)
(10,9,0)
(47,29,0)
(56,26,0)
(3,93,0)
(43,53,0)
(15,51,0)
(89,44,0)
(93,84,0)
(5,38,0)
(79,25,0)
(48,32,0)
(63,86,0)
(13,29,0)
(77,73,0)
(68,24,0)
(32,76,0)
(21,82,0)
(75,39,0)
(20,6,0)
(4,68,0)
(55,51,0)
(81,66,0)
(88,39,0)
(25,84,0)
(91,64,0)
(50,76,0)
(70,44,0)
(80,77,0)
(76,32,0)
(86,90,0)
(37,68,0)
(46,39,0)
(60,19,0)
(15,64,0)
(2,64,0)
(25,79,0)
(8,30,0)
(22,64,0)
(87,38,0)
(53,32,0)
(41,79,0)
(92,24,0)
(65,26,0)
(35,78,0)
(7,84,0)
(79,78,0)
(15,81,0)
(31,56,0)
(59,15,0)
(86,93,0)
(39,17,0)
(6,64,0)
(40,21,0)
(68,32,0)
(81,15,0)
(57,39,0)
(11,44,0)
(51,69,0)
(28,13,0)
(67,44,0)
(73,45,0)
(83,26,0)
(53,12,0)
(68,12,0)
(86,51,0)
(93,39,0)
(42,12,0)
(84,25,0)
(14,15,0)
(49,44,0)
(16,12,0)
(19,90,0)
(71,91,0)
(72,13,0)
(36,29,0)
(78,79,0)
(0,3,0)
(38,93,0)
(52,86,0)
(3,39,0)
(85,93,0)
(33,47,0)
(62,39,0)
(84,93,0)
(74,29,0)
(32,44,0)
(95,90,0)
(24,30,0)
(15,93,0)
(12,18,0)
(54,53,0)
(1,9,0)
(68,93,0)
(73,77,0)
(84,7,0)
(94,90,0)
(34,6,0)
(58,31,1)
(68,32,1)
(38,93,1)
(76,50,1)
(93,84,1)
(34,20,1)
(13,29,1)
(22,2,1)
(21,40,1)
(27,13,1)
(63,9,1)
(38,87,1)
(68,37,1)
(28,72,1)
(85,13,1)
(56,58,1)
(64,22,1)
(43,54,1)
(80,38,1)
(1,19,1)
(73,77,1)
(94,73,1)
(13,28,1)
(65,61,1)
(65,26,1)
(53,12,1)
(5,93,1)
(81,15,1)
(90,95,1)
(51,55,1)
(84,7,1)
(87,5,1)
(14,59,1)
(52,63,1)
(15,64,1)
(41,85,1)
(79,78,1)
(9,10,1)
(19,60,1)
(23,83,1)
(72,47,1)
(32,76,1)
(68,12,1)
(95,94,1)
(55,86,1)
(36,74,1)
(60,51,1)
(74,56,1)
(71,81,1)
(0,6,1)
(59,6,1)
(20,91,1)
(42,16,1)
(16,56,1)
(91,71,1)
(4,53,1)
(29,36,1)
(3,93,1)
(10,1,1)
(6,64,1)
(24,92,1)
(86,93,1)
(19,90,1)
(56,26,1)
(72,29,1)
(20,64,1)
(0,21,1)
(53,43,1)
(47,33,1)
(61,12,1)
(15,51,1)
(2,24,1)
(1,90,1)
(15,14,1)
(83,32,1)
(86,90,1)
(78,35,1)
(25,79,1)
(54,9,1)
(37,4,1)
(47,29,1)
(6,34,1)
(9,90,1)
(12,42,1)
(91,64,1)
(86,52,1)
(3,0,1)
(53,32,1)
(84,25,1)
(77,80,1)
(33,3,1)
(94,38,1)
(68,93,1)
(35,41,1)
(40,53,1)
(15,93,1)
(92,68,1)
(31,65,1)
(50,48,1)
(31,26,1)
(26,23,1)
(53,32,2)
(1,9,2)
(13,29,2)
(52,9,2)
(15,64,2)
(68,12,2)
(68,32,2)
(87,13,2)
(15,6,2)
(4,53,2)
(9,9,2)
(3,13,2)
(33,13,2)
(43,13,2)
(78,13,2)
(54,13,2)
(3,93,2)
(93,84,2)
(79,13,2)
(25,79,2)
(91,6,2)
(5,13,2)
(21,53,2)
(91,64,2)
(13,13,2)
(63,9,2)
(38,93,2)
(92,53,2)
(53,13,2)
(19,90,2)
(25,13,2)
(58,56,2)
(53,12,2)
(55,9,2)
(20,53,2)
(94,13,2)
(42,56,2)
(32,76,2)
(93,13,2)
(71,6,2)
(38,13,2)
(0,13,2)
(10,13,2)
(64,53,2)
(90,13,2)
(47,13,2)
(65,26,2)
(56,26,2)
(35,13,2)
(73,77,2)
(77,38,2)
(15,93,2)
(79,78,2)
(84,7,2)
(31,56,2)
(85,13,2)
(1,13,2)
(84,13,2)
(65,56,2)
(84,25,2)
(61,56,2)
(6,53,2)
(15,51,2)
(81,15,2)
(60,9,2)
(40,53,2)
(95,13,2)
(16,56,2)
(14,6,2)
(9,90,2)
(6,6,2)
(12,56,2)
(41,13,2)
(22,53,2)
(86,9,2)
(37,53,2)
(28,13,2)
(19,9,2)
(72,13,2)
(81,6,2)
(73,38,2)
(86,93,2)
(34,6,2)
(51,9,2)
(80,38,2)
(20,6,2)
(6,64,2)
(24,53,2)
(86,90,2)
(59,6,2)
(9,13,2)
(2,53,2)
(56,56,2)
(34,53,2)
(68,53,2)
(10,9,2)
(47,29,2)
(68,93,2)
-----------------------------------
(0,buffer)
(1,i)
(2,i)
(3,free(buffer)
(4,buffer)
(5,buffer)
(6,i < 10)
(7,int *)
(8,for(i = 0; i < 10; i++)
(9,i < 10)
(10,10)
(11,for(i = 0; i < 1; i++)
(12,data = 10)
(13,j < 1)
(14,i)
(15,buffer[i])
(16,data)
(17,)
(18,)
(19,i++)
(20,i)
(21,printLine("ERROR: Array index is negative.")
(22,0)
(23,0)
(24,buffer[data] = 1)
(25,malloc(10 * sizeof(int)
(26,i = 0)
(27,RET)
(28,1)
(29,j = 0)
(30,)
(31,i)
(32,data = -1)
(33,j)
(34,10)
(35,int)
(36,0)
(37,data)
(38,buffer == NULL)
(39,)
(40,"ERROR: Array index is negative.")
(41,10)
(42,10)
(43,0)
(44,)
(45,)
(46,i)
(47,j++)
(48,data)
(49,i)
(50,1)
(51,buffer[i] = 0)
(52,i)
(53,data >= 0)
(54,data)
(55,0)
(56,i < 1)
(57,buffer)
(58,1)
(59,buffer)
(60,i)
(61,i)
(62,if (buffer == NULL)
(63,buffer)
(64,i = 0)
(65,i++)
(66,)
(67,j)
(68,buffer[data])
(69,)
(70,data)
(71,i)
(72,j)
(73,exit(-1)
(74,j)
(75,for (i = 0; i < 10; i++)
(76,-1)
(77,-1)
(78,sizeof(int)
(79,10 * sizeof(int)
(80,1)
(81,printIntLine(buffer[i])
(82,)
(83,i)
(84,(int *)
(85,buffer)
(86,buffer[i])
(87,NULL)
(88,if (data >= 0)
(89,for(j = 0; j < 1; j++)
(90,i = 0)
(91,i++)
(92,1)
(93,* buffer = (int *)
(94,i)
(95,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^