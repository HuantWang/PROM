-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink()
{
    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
15,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
67,68
68,69
69,70
69,71
70,71
70,72
71,72
73,74
76,77
76,78
76,79
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,13,17,19,22,24,25,29,31,34,36,39,40,44,46,51,53,58,59,62,63,66,72,74,75,79,80,86,88,89,94,95,98,99,102,107,110,112,117,118,122,124
-----computeFrom-----
35,36
35,37
42,43
42,44
56,57
56,58
60,61
60,62
69,70
69,71
77,78
77,79
83,84
83,85
92,93
92,94
96,97
96,98
-----guardedBy-----
79,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink(){    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b_badSink
{    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;
int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData;
int
data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData
data
= CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(30,2,0)
(47,59,0)
(13,48,0)
(19,38,0)
(51,65,0)
(43,69,0)
(3,52,0)
(10,69,0)
(16,1,0)
(53,65,0)
(7,50,0)
(31,8,0)
(40,25,0)
(20,8,0)
(52,65,0)
(48,7,0)
(45,59,0)
(27,17,0)
(57,25,0)
(39,51,0)
(52,59,0)
(41,30,0)
(36,46,0)
(21,43,0)
(8,59,0)
(68,63,0)
(35,42,0)
(34,54,0)
(63,17,0)
(4,69,0)
(28,67,0)
(54,26,0)
(46,64,0)
(55,7,0)
(1,64,0)
(38,7,0)
(32,51,0)
(51,64,0)
(61,69,0)
(29,35,0)
(51,63,0)
(17,9,0)
(51,32,0)
(38,63,0)
(17,63,0)
(58,67,0)
(0,47,0)
(9,17,0)
(56,51,0)
(18,50,0)
(49,26,0)
(52,63,0)
(17,27,0)
(63,69,0)
(65,24,0)
(54,27,0)
(38,57,0)
(37,64,0)
(62,7,0)
(42,66,0)
(32,22,0)
(14,52,0)
(44,48,0)
(5,59,0)
(27,54,0)
(33,69,0)
(11,69,0)
(12,64,0)
(15,1,0)
(69,50,0)
(26,54,0)
(42,35,0)
(60,38,0)
(43,63,0)
(67,63,0)
(23,57,0)
(28,58,1)
(55,62,1)
(51,56,1)
(30,41,1)
(35,29,1)
(16,46,1)
(48,7,1)
(26,49,1)
(53,52,1)
(43,21,1)
(63,17,1)
(39,1,1)
(32,51,1)
(41,48,1)
(45,42,1)
(15,16,1)
(34,68,1)
(67,28,1)
(1,64,1)
(60,48,1)
(38,63,1)
(47,59,1)
(49,34,1)
(52,63,1)
(23,38,1)
(38,19,1)
(6,43,1)
(0,65,1)
(45,67,1)
(17,9,1)
(20,31,1)
(52,14,1)
(7,55,1)
(17,27,1)
(16,64,1)
(59,5,1)
(14,3,1)
(67,63,1)
(31,59,1)
(8,59,1)
(21,30,1)
(1,15,1)
(65,53,1)
(8,20,1)
(46,36,1)
(51,65,1)
(44,8,1)
(54,26,1)
(46,64,1)
(19,60,1)
(51,64,1)
(38,7,1)
(58,63,1)
(3,8,1)
(21,1,1)
(56,39,1)
(68,7,1)
(12,37,1)
(42,35,1)
(37,57,1)
(52,59,1)
(36,32,1)
(51,63,1)
(13,44,1)
(27,54,1)
(57,23,1)
(31,47,1)
(5,45,1)
(64,12,1)
(29,67,1)
(48,13,1)
(43,63,1)
(47,0,1)
(39,1,2)
(30,48,2)
(32,1,2)
(46,64,2)
(54,26,2)
(47,8,2)
(17,27,2)
(60,48,2)
(48,7,2)
(46,1,2)
(3,8,2)
(14,8,2)
(51,65,2)
(8,8,2)
(41,48,2)
(1,48,2)
(16,48,2)
(16,1,2)
(51,63,2)
(36,1,2)
(17,9,2)
(8,59,2)
(29,67,2)
(38,48,2)
(47,59,2)
(52,8,2)
(37,48,2)
(19,48,2)
(53,8,2)
(42,67,2)
(1,64,2)
(56,1,2)
(52,63,2)
(43,63,2)
(64,48,2)
(52,59,2)
(38,7,2)
(51,1,2)
(32,51,2)
(67,63,2)
(35,67,2)
(31,8,2)
(0,8,2)
(63,17,2)
(15,48,2)
(23,48,2)
(1,1,2)
(20,8,2)
(65,8,2)
(15,1,2)
(42,35,2)
(12,48,2)
(27,54,2)
(51,64,2)
(38,63,2)
(57,48,2)
-----------------------------------
(0,i)
(1,i < 10)
(2,)
(3,buffer)
(4,if (data >= 0)
(5,0)
(6,RET)
(7,data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData)
(8,i < 10)
(9,int *)
(10,if (buffer == NULL)
(11,buffer)
(12,0)
(13,0)
(14,i)
(15,10)
(16,i)
(17,(int *)
(18,data)
(19,data)
(20,10)
(21,buffer)
(22,)
(23,1)
(24,)
(25,)
(26,sizeof(int)
(27,malloc(10 * sizeof(int)
(28,NULL)
(29,1)
(30,printLine("ERROR: Array index is negative.")
(31,i)
(32,printIntLine(buffer[i])
(33,for (i = 0; i < 10; i++)
(34,10)
(35,-1)
(36,i)
(37,i)
(38,buffer[data])
(39,buffer)
(40,for(i = 0; i < 10; i++)
(41,"ERROR: Array index is negative.")
(42,exit(-1)
(43,free(buffer)
(44,data)
(45,i)
(46,i++)
(47,i++)
(48,data >= 0)
(49,int)
(50,)
(51,buffer[i])
(52,buffer[i])
(53,0)
(54,10 * sizeof(int)
(55,CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68_badData)
(56,i)
(57,buffer[data] = 1)
(58,buffer)
(59,i = 0)
(60,buffer)
(61,i)
(62,data)
(63,* buffer = (int *)
(64,i = 0)
(65,buffer[i] = 0)
(66,)
(67,buffer == NULL)
(68,buffer)
(69,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^