-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    }
    while(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,30,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108,109
-----computeFrom-----
13,14
13,15
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_16_bad
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }    while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
while(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(30,10,0)
(25,7,0)
(20,28,0)
(47,4,0)
(52,28,0)
(2,3,0)
(4,8,0)
(11,47,0)
(35,12,0)
(43,42,0)
(45,24,0)
(14,30,0)
(36,3,0)
(8,4,0)
(8,16,0)
(40,8,0)
(27,38,0)
(37,18,0)
(14,42,0)
(16,7,0)
(26,17,0)
(22,2,0)
(21,30,0)
(16,8,0)
(1,30,0)
(53,47,0)
(15,14,0)
(7,16,0)
(24,7,0)
(19,31,0)
(17,38,0)
(29,0,0)
(38,42,0)
(9,28,0)
(39,10,0)
(8,40,0)
(6,5,0)
(42,28,0)
(12,6,0)
(49,0,0)
(4,3,0)
(23,18,0)
(36,4,0)
(2,4,0)
(31,33,0)
(41,36,0)
(46,3,0)
(6,12,0)
(30,14,0)
(7,42,0)
(38,17,0)
(34,4,0)
(51,42,0)
(0,4,0)
(13,48,0)
(7,24,0)
(18,48,0)
(0,3,0)
(35,47,1)
(50,32,1)
(6,12,1)
(13,31,1)
(31,19,1)
(38,42,1)
(0,4,1)
(12,35,1)
(43,51,1)
(29,6,1)
(0,49,1)
(32,42,1)
(44,13,1)
(24,45,1)
(49,29,1)
(36,4,1)
(11,4,1)
(30,14,1)
(13,36,1)
(22,0,1)
(7,42,1)
(25,34,1)
(47,4,1)
(47,53,1)
(50,39,1)
(14,15,1)
(8,16,1)
(27,50,1)
(2,4,1)
(44,50,1)
(29,47,1)
(2,22,1)
(17,26,1)
(34,38,1)
(4,8,1)
(53,11,1)
(14,42,1)
(36,41,1)
(39,30,1)
(21,1,1)
(26,27,1)
(15,21,1)
(19,38,1)
(41,2,1)
(8,40,1)
(16,7,1)
(7,24,1)
(45,25,1)
(1,32,1)
(38,17,1)
(42,43,1)
(14,32,2)
(14,42,2)
(6,47,2)
(13,50,2)
(36,38,2)
(0,4,2)
(39,32,2)
(2,38,2)
(41,38,2)
(25,38,2)
(8,38,2)
(27,50,2)
(49,38,2)
(6,12,2)
(35,47,2)
(16,38,2)
(8,40,2)
(38,17,2)
(36,4,2)
(15,32,2)
(11,38,2)
(47,4,2)
(34,38,2)
(22,38,2)
(30,14,2)
(38,42,2)
(24,38,2)
(12,47,2)
(2,4,2)
(7,42,2)
(4,8,2)
(53,38,2)
(0,38,2)
(29,38,2)
(21,32,2)
(31,38,2)
(8,16,2)
(45,38,2)
(16,7,2)
(38,50,2)
(30,32,2)
(7,38,2)
(7,24,2)
(19,38,2)
(26,50,2)
(17,50,2)
(4,38,2)
(1,32,2)
(47,38,2)
-----------------------------------
(0,strcpy(myString, HELLO_STRING)
(1,stdin)
(2,printLine(myString)
(3,)
(4,myString = (char *)
(5,)
(6,exit(-1)
(7,data*sizeof(char)
(8,(char *)
(9,while(1)
(10,)
(11,myString)
(12,-1)
(13,break;)
(14,&data)
(15,data)
(16,malloc(data*sizeof(char)
(17,strlen(HELLO_STRING)
(18,)
(19,"Input is less than the length of the source string")
(20,while(1)
(21,"%zu")
(22,myString)
(23,if (data > strlen(HELLO_STRING)
(24,sizeof(char)
(25,data)
(26,HELLO_STRING)
(27,data)
(28,)
(29,myString)
(30,fscanf(stdin, "%zu", &data)
(31,printLine("Input is less than the length of the source string")
(32,1)
(33,)
(34,myString)
(35,1)
(36,free(myString)
(37,myString)
(38,data > strlen(HELLO_STRING)
(39,break;)
(40,char *)
(41,myString)
(42,data = 0)
(43,0)
(44,RET)
(45,char)
(46,if (myString == NULL)
(47,myString == NULL)
(48,)
(49,HELLO_STRING)
(50,1)
(51,data)
(52,data)
(53,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^