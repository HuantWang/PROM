-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(9,23,0)
(19,0,0)
(25,14,0)
(16,22,0)
(28,13,0)
(4,22,0)
(14,5,0)
(8,27,0)
(18,2,0)
(14,13,0)
(13,2,0)
(14,0,0)
(2,18,0)
(0,14,0)
(6,14,0)
(19,27,0)
(5,24,0)
(20,5,0)
(1,0,0)
(2,7,0)
(11,24,0)
(12,19,0)
(2,13,0)
(7,2,0)
(26,24,0)
(27,15,0)
(10,24,0)
(21,23,0)
(13,17,0)
(29,5,0)
(0,27,0)
(14,13,1)
(14,25,1)
(2,7,1)
(12,0,1)
(25,6,1)
(7,28,1)
(16,5,1)
(9,22,1)
(19,0,1)
(2,18,1)
(4,16,1)
(23,21,1)
(22,4,1)
(28,22,1)
(5,29,1)
(14,5,1)
(29,20,1)
(13,2,1)
(9,13,1)
(0,14,1)
(21,9,1)
(6,1,1)
(3,19,1)
(1,23,1)
(3,23,1)
(19,12,1)
(6,23,2)
(13,22,2)
(19,0,2)
(28,22,2)
(25,23,2)
(2,18,2)
(14,13,2)
(2,22,2)
(0,23,2)
(2,7,2)
(1,23,2)
(13,2,2)
(14,5,2)
(12,23,2)
(14,23,2)
(7,22,2)
(19,23,2)
(0,14,2)
-----------------------------------
(0,result = data * data)
(1,result)
(2,(unsigned int)
(3,RET)
(4,5)
(5,data = 0)
(6,data)
(7,RAND32()
(8,result)
(9,5)
(10,data)
(11,if(5==5)
(12,result)
(13,data = (unsigned int)
(14,data * data)
(15,)
(16,5)
(17,)
(18,unsigned int)
(19,printUnsignedLine(result)
(20,data)
(21,5)
(22,5==5)
(23,5==5)
(24,)
(25,data)
(26,if(5==5)
(27,)
(28,data)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^