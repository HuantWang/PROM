-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
29,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
77,80
77,81
77,82
77,83
77,84
77,85
77,86
77,87
77,88
77,89
77,90
77,91
77,92
77,93
77,94
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
104,105
107,108
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
138,139
140,141
140,142
141,142
141,143
142,143
142,144
142,145
142,146
143,144
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
154,155
156,157
157,158
158,159
160,161
162,163
164,165
164,166
165,166
165,167
166,167
166,168
166,169
167,168
169,170
171,172
173,174
175,176
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
202,206
202,207
203,204
205,206
207,208
207,209
208,209
208,210
210,211
212,213
213,214
213,215
214,215
216,217
218,219
218,220
219,220
220,221
220,222
223,224
224,225
224,226
225,226
225,227
227,228
231,232
231,233
232,233
232,234
233,234
233,235
234,235
236,237
238,239
238,240
239,240
242,243
244,245
245,246
245,247
246,247
246,248
247,248
249,250
249,251
250,251
252,253
252,254
253,254
255,256
256,257
256,258
260,261
261,262
261,263
262,263
264,265
264,266
264,267
265,266
267,268
270,271
270,272
271,272
273,274
274,275
275,276
275,277
276,277
277,278
280,281
281,282
281,283
282,283
284,285
284,286
284,287
285,286
287,288
290,291
290,292
291,292
293,294
294,295
295,296
295,297
296,297
297,298
301,302
301,303
302,303
302,304
303,304
305,306
307,308
308,309
309,310
309,311
310,311
312,313
314,315
314,316
315,316
315,317
316,317
318,319
320,321
321,322
322,323
322,324
323,324
325,326
327,328
328,329
328,330
329,330
331,332
333,334
334,335
335,336
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,37,39,42,44,45,49,51,54,58,60,63,67,69,73,75,81,84,86,88,90,94,96,98,102,105,106,110,115,116,118,124,125,126,128,133,134,137,139,144,146,150,152,155,159,161,163,168,170,172,174,176,180,183,185,187,189,193,195,197,201,204,206,209,211,215,217,221,222,226,228,229,230,235,237,240,241,243,248,251,254,257,258,259,263,266,268,269,272,278,279,283,286,288,289,292,298,299,300,304,306,311,313,317,319,324,326,330,332,336
-----computeFrom-----
23,24
23,25
79,80
79,81
92,93
92,94
112,113
112,114
120,121
120,122
130,131
130,132
141,142
141,143
165,166
165,167
178,179
178,180
191,192
191,193
199,200
199,201
213,214
213,215
218,219
218,220
224,225
224,226
225,226
225,227
232,233
232,234
233,234
233,235
238,239
238,240
245,246
245,247
249,250
249,251
252,253
252,254
261,262
261,263
275,276
275,277
281,282
281,283
295,296
295,297
302,303
302,304
315,316
315,317
328,329
328,330
-----guardedBy-----
304,313
317,326
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data;    badSink();}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data;
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(163,136,0)
(52,104,0)
(40,7,0)
(130,116,0)
(55,167,0)
(104,167,0)
(148,159,0)
(115,104,0)
(154,0,0)
(21,95,0)
(115,124,0)
(15,38,0)
(86,32,0)
(56,155,0)
(22,85,0)
(65,85,0)
(5,120,0)
(117,82,0)
(146,177,0)
(20,103,0)
(140,32,0)
(64,50,0)
(128,116,0)
(44,178,0)
(97,29,0)
(174,130,0)
(33,82,0)
(122,125,0)
(123,8,0)
(43,108,0)
(29,167,0)
(104,95,0)
(64,66,0)
(48,52,0)
(130,123,0)
(138,88,0)
(150,164,0)
(135,110,0)
(162,32,0)
(23,136,0)
(16,66,0)
(110,147,0)
(7,40,0)
(42,138,0)
(175,60,0)
(45,52,0)
(124,115,0)
(129,85,0)
(73,82,0)
(177,32,0)
(85,129,0)
(8,123,0)
(60,167,0)
(13,108,0)
(6,97,0)
(134,77,0)
(152,77,0)
(32,82,0)
(68,155,0)
(27,68,0)
(71,22,0)
(0,82,0)
(74,177,0)
(130,14,0)
(147,58,0)
(123,130,0)
(14,82,0)
(132,163,0)
(159,64,0)
(113,7,0)
(61,50,0)
(118,50,0)
(64,159,0)
(136,167,0)
(63,68,0)
(176,32,0)
(51,124,0)
(129,120,0)
(62,167,0)
(80,32,0)
(89,22,0)
(83,99,0)
(14,0,0)
(161,36,0)
(26,167,0)
(25,172,0)
(79,95,0)
(105,104,0)
(22,116,0)
(108,167,0)
(106,167,0)
(170,25,0)
(40,12,0)
(90,1,0)
(36,104,0)
(108,43,0)
(46,81,0)
(4,14,0)
(105,145,0)
(129,163,0)
(75,32,0)
(142,32,0)
(39,158,0)
(120,129,0)
(151,32,0)
(119,110,0)
(127,115,0)
(101,144,0)
(163,123,0)
(25,176,0)
(172,167,0)
(58,147,0)
(76,178,0)
(163,129,0)
(54,88,0)
(149,167,0)
(143,105,0)
(94,58,0)
(37,13,0)
(103,172,0)
(111,36,0)
(100,77,0)
(126,58,0)
(153,76,0)
(66,64,0)
(95,104,0)
(36,172,0)
(88,138,0)
(116,128,0)
(178,32,0)
(155,167,0)
(99,82,0)
(59,167,0)
(40,115,0)
(72,32,0)
(93,138,0)
(35,41,0)
(160,13,0)
(147,110,0)
(84,103,0)
(76,104,0)
(49,163,0)
(53,32,0)
(50,64,0)
(137,130,0)
(103,176,0)
(144,172,0)
(98,36,0)
(31,47,0)
(77,104,0)
(116,32,0)
(109,29,0)
(30,167,0)
(24,32,0)
(28,139,0)
(157,176,0)
(179,116,0)
(87,100,0)
(112,172,0)
(9,167,0)
(138,42,0)
(105,178,0)
(114,128,0)
(70,107,0)
(19,104,0)
(1,97,0)
(171,167,0)
(99,14,0)
(11,0,0)
(3,42,0)
(102,76,0)
(34,95,0)
(25,2,0)
(128,14,0)
(163,172,0)
(12,40,0)
(85,22,0)
(10,1,0)
(136,163,0)
(92,176,0)
(115,158,0)
(141,43,0)
(91,32,0)
(172,36,0)
(123,163,0)
(138,167,0)
(57,78,0)
(97,1,0)
(169,60,0)
(165,144,0)
(115,40,0)
(110,136,0)
(58,136,0)
(173,32,0)
(17,14,0)
(158,115,0)
(168,99,0)
(77,100,0)
(67,178,0)
(179,176,1)
(127,108,1)
(166,70,1)
(27,138,1)
(97,6,1)
(146,14,1)
(7,113,1)
(66,64,1)
(61,121,1)
(138,42,1)
(44,177,1)
(163,123,1)
(129,85,1)
(85,22,1)
(165,101,1)
(135,119,1)
(29,109,1)
(102,46,1)
(10,155,1)
(63,27,1)
(126,110,1)
(109,97,1)
(5,123,1)
(118,61,1)
(115,124,1)
(56,68,1)
(18,30,1)
(25,176,1)
(101,172,1)
(71,89,1)
(155,56,1)
(141,13,1)
(16,64,1)
(94,126,1)
(76,104,1)
(105,143,1)
(30,147,1)
(103,172,1)
(102,150,1)
(178,67,1)
(123,130,1)
(148,50,1)
(58,136,1)
(131,25,1)
(158,39,1)
(25,170,1)
(147,58,1)
(102,57,1)
(172,36,1)
(31,144,1)
(93,88,1)
(61,116,1)
(175,169,1)
(90,10,1)
(89,65,1)
(64,50,1)
(102,122,1)
(143,76,1)
(11,154,1)
(169,66,1)
(42,3,1)
(150,66,1)
(67,44,1)
(116,128,1)
(129,120,1)
(84,105,1)
(40,12,1)
(122,147,1)
(110,136,1)
(25,172,1)
(132,23,1)
(43,141,1)
(97,1,1)
(121,35,1)
(115,104,1)
(36,98,1)
(138,88,1)
(35,166,1)
(60,175,1)
(99,83,1)
(163,172,1)
(74,146,1)
(95,21,1)
(20,84,1)
(50,118,1)
(166,18,1)
(45,104,1)
(136,163,1)
(105,178,1)
(174,132,1)
(117,99,1)
(102,31,1)
(121,166,1)
(68,63,1)
(84,76,1)
(124,51,1)
(22,71,1)
(168,15,1)
(22,116,1)
(112,100,1)
(57,158,1)
(64,159,1)
(13,37,1)
(40,7,1)
(46,100,1)
(102,121,1)
(119,136,1)
(157,92,1)
(177,74,1)
(130,14,1)
(23,144,1)
(34,79,1)
(54,52,1)
(76,178,1)
(1,90,1)
(17,0,1)
(36,104,1)
(147,110,1)
(137,174,1)
(65,120,1)
(163,49,1)
(103,20,1)
(92,178,1)
(37,160,1)
(161,112,1)
(102,28,1)
(144,165,1)
(159,148,1)
(108,43,1)
(120,5,1)
(111,161,1)
(113,127,1)
(114,179,1)
(88,54,1)
(21,34,1)
(100,87,1)
(158,115,1)
(77,104,1)
(134,152,1)
(48,45,1)
(105,104,1)
(70,18,1)
(98,111,1)
(51,40,1)
(128,14,1)
(66,16,1)
(83,168,1)
(58,94,1)
(28,52,1)
(99,14,1)
(3,93,1)
(144,172,1)
(4,17,1)
(131,103,1)
(168,131,1)
(110,135,1)
(14,0,1)
(128,114,1)
(39,115,1)
(79,19,1)
(152,158,1)
(130,137,1)
(52,48,1)
(100,77,1)
(49,129,1)
(69,117,1)
(104,95,1)
(87,77,1)
(6,1,1)
(0,11,1)
(123,8,1)
(176,157,1)
(19,60,1)
(153,102,1)
(14,4,1)
(115,40,1)
(76,153,1)
(52,104,1)
(163,129,1)
(130,116,1)
(103,176,1)
(77,134,1)
(160,29,1)
(170,103,1)
(15,131,1)
(115,52,2)
(36,100,2)
(163,123,2)
(18,147,2)
(64,159,2)
(63,52,2)
(49,144,2)
(1,52,2)
(110,144,2)
(138,88,2)
(13,52,2)
(46,100,2)
(123,144,2)
(22,116,2)
(64,50,2)
(58,110,2)
(126,110,2)
(97,52,2)
(165,100,2)
(89,144,2)
(132,144,2)
(101,100,2)
(43,52,2)
(22,144,2)
(16,121,2)
(115,104,2)
(116,128,2)
(158,52,2)
(129,144,2)
(10,52,2)
(143,76,2)
(130,14,2)
(128,14,2)
(19,66,2)
(163,172,2)
(115,40,2)
(105,104,2)
(25,172,2)
(115,124,2)
(34,66,2)
(6,52,2)
(85,144,2)
(5,144,2)
(77,158,2)
(169,66,2)
(14,0,2)
(121,147,2)
(76,104,2)
(109,52,2)
(79,66,2)
(174,144,2)
(93,52,2)
(100,158,2)
(45,66,2)
(29,52,2)
(39,52,2)
(130,116,2)
(138,42,2)
(147,110,2)
(87,158,2)
(111,100,2)
(172,100,2)
(36,104,2)
(27,52,2)
(104,66,2)
(66,64,2)
(130,144,2)
(158,115,2)
(85,22,2)
(147,58,2)
(105,178,2)
(172,36,2)
(152,158,2)
(25,103,2)
(97,1,2)
(113,52,2)
(159,121,2)
(3,52,2)
(30,147,2)
(100,77,2)
(161,100,2)
(61,121,2)
(58,136,2)
(108,43,2)
(88,52,2)
(95,66,2)
(42,52,2)
(144,100,2)
(127,52,2)
(123,8,2)
(105,76,2)
(120,144,2)
(175,66,2)
(136,144,2)
(65,144,2)
(122,147,2)
(129,120,2)
(40,7,2)
(37,52,2)
(129,85,2)
(134,158,2)
(98,100,2)
(21,66,2)
(124,52,2)
(15,131,2)
(60,66,2)
(28,52,2)
(155,52,2)
(137,144,2)
(90,52,2)
(119,144,2)
(52,66,2)
(51,52,2)
(76,178,2)
(118,121,2)
(23,144,2)
(104,95,2)
(150,66,2)
(141,52,2)
(77,104,2)
(40,12,2)
(52,104,2)
(112,100,2)
(110,136,2)
(103,176,2)
(56,52,2)
(50,121,2)
(148,121,2)
(68,52,2)
(70,18,2)
(48,66,2)
(136,163,2)
(108,52,2)
(94,110,2)
(71,144,2)
(163,129,2)
(7,52,2)
(103,172,2)
(170,103,2)
(35,166,2)
(64,121,2)
(166,147,2)
(66,121,2)
(144,172,2)
(138,52,2)
(57,158,2)
(147,144,2)
(31,144,2)
(135,144,2)
(99,14,2)
(160,52,2)
(123,130,2)
(25,176,2)
(163,144,2)
(54,52,2)
(40,52,2)
-----------------------------------
(0,dataBuffer[100] = COMMAND_ARG2)
(1,service.sin_addr)
(2,)
(3,service)
(4,dataBuffer)
(5,wchar_t)
(6,s_addr)
(7,&service)
(8,char *)
(9,if (replace)
(10,service)
(11,COMMAND_ARG2)
(12,struct sockaddr*)
(13,service.sin_port)
(14,data = dataBuffer)
(15,WSACleanup()
(16,NO_ERROR)
(17,data)
(18,replace)
(19,listenSocket)
(20,INVALID_SOCKET)
(21,IPPROTO_TCP)
(22,dataLen - 1)
(23,recvResult)
(24,wsaDataInit)
(25,CLOSE_SOCKET(acceptSocket)
(26,if (bind(listenSocket, (struct sockaddr*)
(27,service)
(28,break;)
(29,service.sin_addr.s_addr = INADDR_ANY)
(30,\'\\\\0\')
(31,break;)
(32,)
(33,dataBuffer)
(34,SOCK_STREAM)
(35,'\\\\0')
(36,accept(listenSocket, NULL, NULL)
(37,sin_port)
(38,)
(39,SOCKET_ERROR)
(40,(struct sockaddr*)
(41,)
(42,sizeof(service)
(43,htons(TCP_PORT)
(44,listenSocket)
(45,listenSocket)
(46,break;)
(47,)
(48,INVALID_SOCKET)
(49,0)
(50,MAKEWORD(2,2)
(51,service)
(52,listenSocket == INVALID_SOCKET)
(53,listenSocket)
(54,service)
(55,if (WSAStartup(MAKEWORD(2,2)
(56,AF_INET)
(57,break;)
(58,recvResult == 0)
(59,if (recvResult == SOCKET_ERROR || recvResult == 0)
(60,wsaDataInit = 1)
(61,2)
(62,if (listen(listenSocket, LISTEN_BACKLOG)
(63,sin_family)
(64,WSAStartup(MAKEWORD(2,2)
(65,100)
(66,WSAStartup(MAKEWORD(2,2)
(67,INVALID_SOCKET)
(68,service.sin_family)
(69,RET)
(70,'\\\\0')
(71,1)
(72,if (listenSocket != INVALID_SOCKET)
(73,data)
(74,0)
(75,acceptSocket)
(76,listenSocket != INVALID_SOCKET)
(77,listen(listenSocket, LISTEN_BACKLOG)
(78,)
(79,AF_INET)
(80,do)
(81,)
(82,)
(83,data)
(84,acceptSocket)
(85,100 - dataLen - 1)
(86,service)
(87,SOCKET_ERROR)
(88,&service)
(89,dataLen)
(90,sin_addr)
(91,recvResult)
(92,acceptSocket)
(93,0)
(94,0)
(95,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(96,'\\\\0')
(97,service.sin_addr.s_addr)
(98,NULL)
(99,CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData = data)
(100,listen(listenSocket, LISTEN_BACKLOG)
(101,acceptSocket)
(102,listenSocket)
(103,acceptSocket != INVALID_SOCKET)
(104,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(105,CLOSE_SOCKET(listenSocket)
(106,if (listenSocket == INVALID_SOCKET)
(107,)
(108,service.sin_port = htons(TCP_PORT)
(109,INADDR_ANY)
(110,recvResult == SOCKET_ERROR)
(111,NULL)
(112,acceptSocket)
(113,service)
(114,data)
(115,bind(listenSocket, (struct sockaddr*)
(116,dataLen = wcslen(data)
(117,badSink()
(118,2)
(119,recvResult)
(120,sizeof(wchar_t)
(121,0)
(122,break;)
(123,(char *)
(124,sizeof(service)
(125,)
(126,recvResult)
(127,listenSocket)
(128,wcslen(data)
(129,sizeof(wchar_t)
(130,data + dataLen)
(131,wsaDataInit)
(132,acceptSocket)
(133,\'\\\\0\')
(134,LISTEN_BACKLOG)
(135,SOCKET_ERROR)
(136,recvResult = recv(acceptSocket, (char *)
(137,dataLen)
(138,memset(&service, 0, sizeof(service)
(139,)
(140,if (acceptSocket != INVALID_SOCKET)
(141,TCP_PORT)
(142,if (wsaDataInit)
(143,listenSocket)
(144,acceptSocket == SOCKET_ERROR)
(145,)
(146,wsaDataInit)
(147,recvResult == SOCKET_ERROR || recvResult == 0)
(148,wsaData)
(149,if (replace)
(150,break;)
(151,dataLen)
(152,listenSocket)
(153,INVALID_SOCKET)
(154,dataBuffer)
(155,service.sin_family = AF_INET)
(156,\'\\\\0\')
(157,INVALID_SOCKET)
(158,bind(listenSocket, (struct sockaddr*)
(159,&wsaData)
(160,service)
(161,listenSocket)
(162,wsaData)
(163,recv(acceptSocket, (char *)
(164,)
(165,SOCKET_ERROR)
(166,replace)
(167,)
(168,CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execvp_45_badData)
(169,wsaDataInit)
(170,acceptSocket)
(171,if (acceptSocket == SOCKET_ERROR)
(172,acceptSocket = accept(listenSocket, NULL, NULL)
(173,replace)
(174,data)
(175,1)
(176,acceptSocket = INVALID_SOCKET)
(177,wsaDataInit = 0)
(178,listenSocket = INVALID_SOCKET)
(179,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^