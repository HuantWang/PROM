-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_31_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printStructLine(&data[0]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
56,57
56,58
56,59
57,58
58,59
58,60
59,60
61,62
61,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
85,87
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
92,93
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
106,107
106,108
106,109
107,108
108,109
108,110
109,110
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
119,120
119,121
120,121
123,124
124,125
126,127
127,128
128,129
128,130
129,130
129,131
130,131
132,133
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
144,145
144,146
145,146
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,32,34,39,41,42,45,49,51,52,55,60,62,64,69,71,76,77,80,81,84,91,93,94,95,101,103,104,105,110,112,117,118,121,122,125,131,133,136,138,142,146,147
-----computeFrom-----
30,31
30,32
74,75
74,76
78,79
78,80
87,88
87,89
97,98
97,99
115,116
115,117
119,120
119,121
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_31_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_31_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_31_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    data[i] = source[i];                }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(9,32,0)
(16,68,0)
(54,49,0)
(28,49,0)
(3,2,0)
(26,22,0)
(30,31,0)
(47,15,0)
(34,9,0)
(20,22,0)
(15,47,0)
(9,17,0)
(55,47,0)
(61,5,0)
(25,29,0)
(2,3,0)
(52,17,0)
(10,58,0)
(63,44,0)
(48,21,0)
(58,24,0)
(0,21,0)
(40,32,0)
(17,11,0)
(12,47,0)
(18,53,0)
(13,24,0)
(47,49,0)
(17,9,0)
(51,24,0)
(39,41,0)
(2,51,0)
(41,32,0)
(4,32,0)
(35,68,0)
(15,31,0)
(21,53,0)
(44,1,0)
(68,42,0)
(56,27,0)
(66,22,0)
(33,44,0)
(21,66,0)
(1,44,0)
(67,42,0)
(1,56,0)
(29,49,0)
(7,51,0)
(19,28,0)
(45,56,0)
(52,32,0)
(31,27,0)
(44,49,0)
(52,42,0)
(60,1,0)
(50,29,0)
(36,52,0)
(65,52,0)
(6,5,0)
(68,3,0)
(5,32,0)
(14,53,0)
(46,58,0)
(62,9,0)
(57,66,0)
(3,68,0)
(59,15,0)
(43,42,0)
(24,66,0)
(23,49,0)
(8,22,0)
(42,66,0)
(37,51,0)
(42,21,0)
(64,66,0)
(53,22,0)
(44,49,1)
(65,5,1)
(52,36,1)
(55,29,1)
(3,68,1)
(41,32,1)
(2,3,1)
(56,45,1)
(28,19,1)
(54,42,1)
(29,49,1)
(50,28,1)
(47,12,1)
(50,49,1)
(1,44,1)
(15,59,1)
(6,41,1)
(45,1,1)
(52,42,1)
(12,55,1)
(6,32,1)
(53,18,1)
(5,32,1)
(42,21,1)
(9,32,1)
(9,62,1)
(48,0,1)
(68,42,1)
(32,40,1)
(35,16,1)
(21,53,1)
(1,60,1)
(34,52,1)
(52,32,1)
(28,49,1)
(67,21,1)
(39,17,1)
(49,23,1)
(61,6,1)
(23,54,1)
(4,29,1)
(62,34,1)
(59,47,1)
(30,15,1)
(33,63,1)
(68,35,1)
(44,33,1)
(17,9,1)
(38,2,1)
(15,47,1)
(63,31,1)
(31,30,1)
(29,25,1)
(40,4,1)
(18,14,1)
(36,65,1)
(42,43,1)
(41,39,1)
(60,44,1)
(25,50,1)
(5,61,1)
(43,67,1)
(0,53,1)
(47,49,1)
(16,5,1)
(19,56,1)
(21,48,1)
(44,29,2)
(1,29,2)
(15,29,2)
(12,29,2)
(55,29,2)
(33,29,2)
(31,29,2)
(52,5,2)
(29,29,2)
(63,29,2)
(1,44,2)
(47,49,2)
(2,3,2)
(50,29,2)
(39,5,2)
(65,5,2)
(5,32,2)
(52,42,2)
(28,29,2)
(42,21,2)
(25,29,2)
(28,49,2)
(61,5,2)
(19,29,2)
(52,32,2)
(9,5,2)
(41,32,2)
(21,53,2)
(59,29,2)
(15,47,2)
(29,49,2)
(36,5,2)
(62,5,2)
(3,68,2)
(17,9,2)
(44,49,2)
(47,29,2)
(60,29,2)
(56,29,2)
(68,42,2)
(9,32,2)
(17,5,2)
(6,5,2)
(41,5,2)
(30,29,2)
(45,29,2)
(34,5,2)
(5,5,2)
-----------------------------------
(0,dataCopy)
(1,source[i].intTwo)
(2,printStructLine(&data[0])
(3,&data[0])
(4,i)
(5,i < 100)
(6,i)
(7,i)
(8,dataBadBuffer)
(9,source[i])
(10,i)
(11,)
(12,i)
(13,source)
(14,data)
(15,source[i].intOne)
(16,data)
(17,data[i] = source[i])
(18,dataBadBuffer)
(19,i)
(20,dataGoodBuffer)
(21,* dataCopy = data)
(22,)
(23,0)
(24,)
(25,100)
(26,data)
(27,)
(28,i++)
(29,i < 100)
(30,0)
(31,source[i].intOne = 0)
(32,i = 0)
(33,i)
(34,source)
(35,0)
(36,i)
(37,for (i = 0; i < 100; i++)
(38,RET)
(39,i)
(40,0)
(41,i++)
(42,* data = dataCopy)
(43,dataCopy)
(44,source[i])
(45,0)
(46,for (i = 0; i < 100; i++)
(47,source[i])
(48,data)
(49,i = 0)
(50,i)
(51,)
(52,data[i])
(53,data = dataBadBuffer)
(54,i)
(55,source)
(56,source[i].intTwo = 0)
(57,data)
(58,)
(59,intOne)
(60,intTwo)
(61,100)
(62,i)
(63,source)
(64,dataCopy)
(65,data)
(66,)
(67,data)
(68,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^