-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
60,61
63,64
64,65
64,66
64,67
65,66
65,67
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
78,79
79,80
79,81
81,82
83,84
85,86
87,88
87,89
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
119,120
123,124
123,125
124,125
125,126
125,127
126,127
129,130
130,131
130,132
131,132
131,133
132,133
134,135
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,36,40,42,47,49,53,55,59,61,62,68,71,73,76,77,80,82,84,86,91,94,96,101,102,106,109,110,111,117,120,121,122,127,128,133,135,136,140,142
-----computeFrom-----
38,39
38,40
57,58
57,59
58,59
58,60
65,66
65,67
69,70
69,71
79,80
79,81
89,90
89,91
98,99
98,100
99,100
99,101
103,104
103,105
107,108
107,109
114,115
114,116
118,119
118,120
130,131
130,132
-----guardedBy-----
61,135
71,117
82,120
106,117
109,120
-----guardedByNegation-----
71,133
82,135
-----lastLexicalUse-----
71,133
82,135
-----jump-----
71,133
82,135
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE78_OS_Command_Injection__char_console_system_44_bad()
CWE78_OS_Command_Injection__char_console_system_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(54,25,0)
(41,18,0)
(39,30,0)
(71,28,0)
(29,5,0)
(35,59,0)
(22,73,0)
(25,30,0)
(47,3,0)
(34,43,0)
(51,8,0)
(36,25,0)
(69,30,0)
(51,30,0)
(25,36,0)
(30,14,0)
(7,14,0)
(25,3,0)
(28,5,0)
(59,53,0)
(65,60,0)
(13,6,0)
(38,6,0)
(50,63,0)
(41,3,0)
(6,11,0)
(34,30,0)
(4,5,0)
(6,8,0)
(18,56,0)
(53,2,0)
(32,15,0)
(46,50,0)
(49,43,0)
(45,56,0)
(50,46,0)
(52,67,0)
(20,41,0)
(55,5,0)
(12,16,0)
(57,23,0)
(67,64,0)
(1,36,0)
(70,51,0)
(16,5,0)
(61,4,0)
(53,59,0)
(10,8,0)
(58,43,0)
(21,2,0)
(0,18,0)
(11,6,0)
(48,63,0)
(26,45,0)
(41,30,0)
(62,64,0)
(8,51,0)
(19,11,0)
(60,36,0)
(42,14,0)
(2,8,0)
(36,60,0)
(67,3,0)
(43,8,0)
(17,25,0)
(37,5,0)
(11,30,0)
(30,5,0)
(2,53,0)
(33,4,0)
(43,34,0)
(40,28,0)
(27,63,0)
(3,4,0)
(16,30,0)
(64,67,0)
(72,34,0)
(59,11,0)
(74,3,0)
(66,2,0)
(63,3,0)
(73,24,0)
(74,30,0)
(3,74,0)
(50,36,0)
(31,67,0)
(68,74,0)
(11,59,0)
(9,41,0)
(8,23,0)
(34,73,0)
(63,50,0)
(14,5,0)
(36,50,0)
(40,71,1)
(21,8,1)
(59,35,1)
(12,73,1)
(19,2,1)
(27,25,1)
(41,20,1)
(22,34,1)
(20,9,1)
(12,18,1)
(50,63,1)
(38,13,1)
(1,50,1)
(9,45,1)
(60,36,1)
(3,74,1)
(12,53,1)
(64,62,1)
(7,42,1)
(66,21,1)
(39,14,1)
(28,40,1)
(41,3,1)
(25,30,1)
(49,72,1)
(67,52,1)
(0,41,1)
(36,1,1)
(74,68,1)
(16,12,1)
(45,26,1)
(69,39,1)
(68,47,1)
(73,22,1)
(25,3,1)
(53,59,1)
(6,8,1)
(74,30,1)
(60,65,1)
(72,53,1)
(12,64,1)
(36,50,1)
(53,2,1)
(34,43,1)
(14,7,1)
(17,54,1)
(44,16,1)
(30,14,1)
(31,3,1)
(16,30,1)
(54,64,1)
(48,27,1)
(6,38,1)
(35,11,1)
(70,10,1)
(63,3,1)
(2,8,1)
(63,48,1)
(51,70,1)
(34,30,1)
(41,30,1)
(43,58,1)
(64,67,1)
(25,17,1)
(30,69,1)
(2,66,1)
(36,25,1)
(67,3,1)
(8,51,1)
(11,30,1)
(42,28,1)
(18,0,1)
(62,67,1)
(26,60,1)
(10,60,1)
(47,30,1)
(11,6,1)
(51,30,1)
(43,8,1)
(52,31,1)
(65,36,1)
(58,49,1)
(59,11,1)
(13,19,1)
(50,46,1)
(50,64,2)
(36,50,2)
(60,36,2)
(25,30,2)
(74,30,2)
(26,60,2)
(22,53,2)
(70,60,2)
(41,60,2)
(9,60,2)
(34,53,2)
(43,8,2)
(48,64,2)
(63,3,2)
(0,60,2)
(59,11,2)
(43,53,2)
(6,8,2)
(34,43,2)
(13,2,2)
(65,64,2)
(63,64,2)
(49,53,2)
(36,25,2)
(1,64,2)
(73,53,2)
(41,30,2)
(58,53,2)
(54,64,2)
(50,63,2)
(20,60,2)
(41,3,2)
(25,64,2)
(50,46,2)
(51,60,2)
(60,64,2)
(11,30,2)
(34,30,2)
(8,51,2)
(19,2,2)
(59,2,2)
(66,60,2)
(10,60,2)
(38,2,2)
(25,3,2)
(27,64,2)
(2,60,2)
(51,30,2)
(36,64,2)
(16,30,2)
(30,14,2)
(3,74,2)
(11,6,2)
(53,59,2)
(8,60,2)
(11,2,2)
(17,64,2)
(64,67,2)
(18,60,2)
(53,60,2)
(72,53,2)
(67,3,2)
(45,60,2)
(6,2,2)
(35,2,2)
(21,60,2)
(2,8,2)
(53,2,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,stdin)
(2,dataLen > 0)
(3,dataLen = strlen(data)
(4,)
(5,)
(6,dataLen-1)
(7,FULL_COMMAND)
(8,dataLen = strlen(data)
(9,data)
(10,dataLen)
(11,data[dataLen-1])
(12,data)
(13,dataLen)
(14,data_buf[100] = FULL_COMMAND)
(15,)
(16,funcPtr(data)
(17,dataLen)
(18,data[dataLen] = \\\'\\\\0\\\')
(19,data)
(20,dataLen)
(21,dataLen)
(22,\\\'\\\\0\\\')
(23,)
(24,)
(25,data+dataLen)
(26,"fgets()
(27,100)
(28,(*funcPtr)
(29,funcPtr)
(30,data = data_buf)
(31,100)
(32,if (fgets(data+dataLen, (int)
(33,dataLen)
(34,data[dataLen-1])
(35,\\\'\\\\n\\\')
(36,fgets(data+dataLen, (int)
(37,data_buf)
(38,1)
(39,data)
(40,badSink)
(41,data[dataLen])
(42,data_buf)
(43,dataLen-1)
(44,RET)
(45,printLine("fgets()
(46,int)
(47,dataLen)
(48,dataLen)
(49,dataLen)
(50,(int)
(51,strlen(data)
(52,dataLen)
(53,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data)
(55,data)
(56,)
(57,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(58,1)
(59,data[dataLen-1] == \\\'\\\\n\\\')
(60,fgets(data+dataLen, (int)
(61,if (100-dataLen > 1)
(62,1)
(63,100-dataLen)
(64,100-dataLen > 1)
(65,NULL)
(66,0)
(67,100-dataLen)
(68,data)
(69,data_buf)
(70,data)
(71,funcPtr)
(72,data)
(73,data[dataLen-1] = \\\'\\\\0\\\')
(74,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^