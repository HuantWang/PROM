-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with L'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            memmove(data, source, 100*sizeof(wchar_t));
            data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
92,93
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
107,113
107,114
108,109
109,110
109,111
111,112
111,113
113,114
115,116
116,117
116,118
116,119
116,120
117,118
119,120
122,123
122,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
130,132
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
142,144
144,145
145,146
145,147
148,149
149,150
149,151
150,151
150,152
151,152
153,154
153,155
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,87,88,93,95,99,101,102,106,110,112,114,118,120,121,123,124,129,131,132,133,137,139,141,143,146,147,152,154,155,156,160,162,166,168
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
90,91
90,92
122,123
122,124
126,127
126,128
130,131
130,132
142,143
142,144
149,150
149,151
153,154
153,155
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(wchar_t));            data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(wchar_t));            data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(wchar_t));            data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            memmove(data, source, 100*sizeof(wchar_t));            data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */            printWLine(data);            free(data);        }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
memmove(data, source, 100*sizeof(wchar_t));
memmove(data, source, 100*sizeof(wchar_t))
memmove
memmove
data
data
source
source
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(42,58,0)
(44,52,0)
(11,15,0)
(60,63,0)
(62,25,0)
(19,15,0)
(58,2,0)
(3,44,0)
(60,41,0)
(27,48,0)
(56,46,0)
(52,57,0)
(3,41,0)
(55,38,0)
(51,55,0)
(24,3,0)
(14,37,0)
(47,57,0)
(42,15,0)
(25,48,0)
(49,30,0)
(58,8,0)
(35,41,0)
(15,2,0)
(63,30,0)
(39,45,0)
(45,57,0)
(31,60,0)
(8,45,0)
(7,8,0)
(61,47,0)
(21,41,0)
(4,55,0)
(43,38,0)
(8,58,0)
(52,10,0)
(59,42,0)
(46,52,0)
(5,44,0)
(6,57,0)
(34,58,0)
(53,63,0)
(23,63,0)
(32,37,0)
(44,3,0)
(34,15,0)
(64,45,0)
(10,52,0)
(1,15,0)
(22,23,0)
(46,60,0)
(25,11,0)
(11,25,0)
(55,4,0)
(30,63,0)
(54,52,0)
(37,32,0)
(29,23,0)
(30,49,0)
(26,41,0)
(41,57,0)
(18,57,0)
(36,47,0)
(11,58,0)
(38,55,0)
(48,25,0)
(50,2,0)
(20,34,0)
(45,39,0)
(17,11,0)
(30,4,0)
(33,58,0)
(2,57,0)
(12,15,0)
(9,11,0)
(40,39,0)
(63,41,0)
(28,10,0)
(16,57,0)
(4,30,0)
(32,0,0)
(53,3,1)
(7,33,1)
(47,61,1)
(56,21,1)
(28,54,1)
(8,45,1)
(48,27,1)
(60,31,1)
(9,19,1)
(55,38,1)
(63,30,1)
(60,63,1)
(17,9,1)
(45,39,1)
(5,24,1)
(37,14,1)
(29,63,1)
(46,52,1)
(58,8,1)
(24,47,1)
(64,52,1)
(21,32,1)
(51,53,1)
(20,42,1)
(10,28,1)
(59,12,1)
(43,51,1)
(42,58,1)
(11,25,1)
(34,58,1)
(42,59,1)
(40,64,1)
(44,5,1)
(39,40,1)
(8,7,1)
(32,37,1)
(61,36,1)
(22,29,1)
(52,10,1)
(11,58,1)
(44,52,1)
(38,43,1)
(62,17,1)
(23,63,1)
(46,56,1)
(3,44,1)
(36,45,1)
(19,58,1)
(14,23,1)
(4,55,1)
(23,22,1)
(31,46,1)
(25,48,1)
(34,20,1)
(30,49,1)
(33,60,1)
(21,23,1)
(13,34,1)
(30,4,1)
(12,11,1)
(27,62,1)
(25,48,2)
(55,38,2)
(52,10,2)
(23,63,2)
(30,49,2)
(3,44,2)
(14,23,2)
(4,55,2)
(44,52,2)
(34,58,2)
(58,8,2)
(32,37,2)
(30,4,2)
(11,25,2)
(45,39,2)
(42,58,2)
(46,52,2)
(11,58,2)
(32,23,2)
(60,63,2)
(8,45,2)
(37,23,2)
(63,30,2)
-----------------------------------
(0,)
(1,source)
(2,)
(3,* data = *dataPtr1)
(4,malloc(50*sizeof(wchar_t)
(5,dataPtr1)
(6,dataPtr1)
(7,dataPtr2)
(8,*dataPtr2)
(9,data)
(10,&data)
(11,memmove(data, source, 100*sizeof(wchar_t)
(12,'\\\\0')
(13,RET)
(14,1)
(15,)
(16,dataPtr2)
(17,source)
(18,data)
(19,'\\\\0')
(20,data)
(21,'\\\\0')
(22,NULL)
(23,data == NULL)
(24,data)
(25,100*sizeof(wchar_t)
(26,if (data == NULL)
(27,wchar_t)
(28,data)
(29,data)
(30,(wchar_t *)
(31,data)
(32,exit(-1)
(33,data)
(34,free(data)
(35,data)
(36,data)
(37,-1)
(38,sizeof(wchar_t)
(39,&data)
(40,data)
(41,)
(42,printWLine(data)
(43,wchar_t)
(44,*dataPtr1)
(45,* *dataPtr2 = &data)
(46,*dataPtr1)
(47,data = NULL)
(48,sizeof(wchar_t)
(49,wchar_t *)
(50,data)
(51,50)
(52,* *dataPtr1 = &data)
(53,data)
(54,dataPtr1)
(55,50*sizeof(wchar_t)
(56,dataPtr1)
(57,)
(58,* data = *dataPtr2)
(59,data)
(60,*dataPtr1 = data)
(61,NULL)
(62,100)
(63,data = (wchar_t *)
(64,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^