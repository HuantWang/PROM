-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_preinc_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
54,55
54,56
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
55,67
55,68
55,69
56,57
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
82,83
85,86
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
142,144
143,144
143,145
144,145
144,146
144,147
145,146
147,148
149,150
151,152
153,154
155,156
156,157
156,158
157,158
159,160
159,161
159,162
159,163
160,161
162,163
164,165
166,167
168,169
168,170
169,170
169,171
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
180,183
180,184
180,185
181,182
183,184
185,186
187,188
187,189
188,189
192,193
192,194
193,194
193,195
194,195
194,196
195,196
197,198
199,200
199,201
200,201
203,204
205,206
206,207
206,208
207,208
207,209
208,209
210,211
213,214
214,215
214,216
215,216
217,218
217,219
218,219
220,221
223,224
223,225
224,225
224,226
225,226
227,228
229,230
230,231
231,232
231,233
232,233
234,235
236,237
236,238
237,238
237,239
238,239
240,241
242,243
243,244
244,245
244,246
245,246
247,248
249,250
249,251
249,252
250,251
251,252
251,253
253,254
253,255
255,256
256,257
258,259
259,260
259,261
261,262
261,263
263,264
264,265
266,267
266,268
266,269
267,268
268,269
269,270
271,272
272,273
272,274
274,275
274,276
276,277
277,278
279,280
280,281
280,282
281,282
283,284
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,31,33,36,40,42,45,48,50,53,59,62,64,66,68,72,74,76,80,83,84,88,93,94,96,102,103,104,106,111,112,115,117,122,124,128,130,133,137,139,141,146,148,150,152,154,158,161,163,165,167,171,173,175,179,182,184,186,189,190,191,196,198,201,202,204,209,211,212,216,219,221,222,226,228,233,235,239,241,246,248,252,254,257,260,262,265,270,273,275,278,282,284
-----computeFrom-----
12,13
12,14
57,58
57,59
70,71
70,72
90,91
90,92
98,99
98,100
108,109
108,110
119,120
119,121
143,144
143,145
156,157
156,158
169,170
169,171
177,178
177,179
187,188
187,189
193,194
193,195
194,195
194,196
199,200
199,201
206,207
206,208
214,215
214,216
224,225
224,226
237,238
237,239
-----guardedBy-----
226,235
239,248
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_preinc_31_bad(){    int data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_preinc_31_bad()
CWE190_Integer_Overflow__int_listen_socket_preinc_31_bad
{    int data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(50,97,0)
(31,170,0)
(113,11,0)
(155,60,0)
(73,127,0)
(1,122,0)
(52,20,0)
(57,122,0)
(142,70,0)
(71,33,0)
(103,144,0)
(122,144,0)
(136,169,0)
(21,118,0)
(165,150,0)
(46,103,0)
(134,12,0)
(67,17,0)
(5,7,0)
(100,140,0)
(63,93,0)
(157,143,0)
(147,170,0)
(20,52,0)
(64,60,0)
(20,12,0)
(116,117,0)
(156,12,0)
(27,95,0)
(152,169,0)
(0,51,0)
(130,119,0)
(152,140,0)
(121,103,0)
(9,47,0)
(159,12,0)
(6,119,0)
(92,146,0)
(60,119,0)
(145,57,0)
(112,147,0)
(139,60,0)
(8,4,0)
(141,87,0)
(38,112,0)
(132,154,0)
(87,118,0)
(6,88,0)
(107,88,0)
(46,50,0)
(165,6,0)
(16,155,0)
(170,147,0)
(163,37,0)
(54,118,0)
(69,143,0)
(86,155,0)
(84,56,0)
(22,18,0)
(124,12,0)
(94,10,0)
(138,137,0)
(53,146,0)
(125,6,0)
(129,16,0)
(44,37,0)
(23,165,0)
(102,111,0)
(171,12,0)
(104,120,0)
(11,119,0)
(119,51,0)
(48,118,0)
(35,118,0)
(45,12,0)
(119,12,0)
(72,46,0)
(16,40,0)
(60,155,0)
(151,118,0)
(76,99,0)
(51,119,0)
(24,122,0)
(162,12,0)
(16,154,0)
(93,18,0)
(71,1,0)
(18,171,0)
(46,122,0)
(155,12,0)
(32,1,0)
(114,118,0)
(117,47,0)
(15,171,0)
(39,86,0)
(89,126,0)
(19,117,0)
(126,20,0)
(137,147,0)
(91,12,0)
(75,97,0)
(32,57,0)
(79,118,0)
(161,117,0)
(70,142,0)
(147,112,0)
(152,12,0)
(108,1,0)
(109,103,0)
(2,56,0)
(82,32,0)
(18,93,0)
(110,142,0)
(99,119,0)
(96,76,0)
(57,46,0)
(70,37,0)
(166,170,0)
(81,93,0)
(147,137,0)
(169,152,0)
(37,70,0)
(117,161,0)
(6,125,0)
(80,10,0)
(98,126,0)
(13,57,0)
(43,119,0)
(118,144,0)
(95,161,0)
(36,144,0)
(128,155,0)
(160,51,0)
(173,118,0)
(140,152,0)
(47,117,0)
(61,95,0)
(142,161,0)
(56,119,0)
(66,142,0)
(101,47,0)
(115,58,0)
(4,12,0)
(86,154,0)
(168,46,0)
(123,11,0)
(78,161,0)
(148,87,0)
(29,86,0)
(34,118,0)
(10,124,0)
(41,6,0)
(153,33,0)
(143,12,0)
(90,118,0)
(99,76,0)
(88,6,0)
(59,50,0)
(105,60,0)
(43,49,0)
(6,165,0)
(43,87,0)
(83,43,0)
(26,117,0)
(158,99,0)
(14,118,0)
(74,125,0)
(131,62,0)
(97,50,0)
(167,51,0)
(95,4,0)
(150,165,0)
(154,118,0)
(28,154,0)
(172,99,0)
(161,12,0)
(3,34,0)
(146,155,0)
(33,57,0)
(68,124,0)
(174,71,0)
(50,12,0)
(65,152,0)
(165,23,0)
(106,34,0)
(117,155,0)
(133,52,0)
(135,118,0)
(33,1,0)
(25,122,0)
(37,161,0)
(56,87,0)
(85,150,0)
(42,33,0)
(138,147,1)
(77,50,1)
(80,152,1)
(43,83,1)
(56,87,1)
(84,77,1)
(68,10,1)
(2,84,1)
(174,33,1)
(137,138,1)
(124,68,1)
(64,128,1)
(37,44,1)
(102,70,1)
(164,16,1)
(72,164,1)
(63,81,1)
(47,9,1)
(160,130,1)
(113,119,1)
(93,63,1)
(34,106,1)
(37,161,1)
(61,27,1)
(65,169,1)
(46,168,1)
(117,155,1)
(78,146,1)
(59,4,1)
(148,34,1)
(125,74,1)
(16,129,1)
(146,53,1)
(29,39,1)
(117,116,1)
(158,125,1)
(92,155,1)
(8,95,1)
(71,174,1)
(11,119,1)
(168,72,1)
(52,133,1)
(152,169,1)
(15,18,1)
(143,157,1)
(9,101,1)
(137,147,1)
(115,137,1)
(99,172,1)
(51,0,1)
(84,5,1)
(157,69,1)
(10,94,1)
(116,47,1)
(163,161,1)
(70,37,1)
(85,41,1)
(95,161,1)
(103,121,1)
(26,19,1)
(147,112,1)
(74,6,1)
(167,160,1)
(83,56,1)
(44,163,1)
(6,165,1)
(16,154,1)
(84,73,1)
(6,119,1)
(119,51,1)
(147,170,1)
(6,88,1)
(19,78,1)
(75,59,1)
(100,65,1)
(69,137,1)
(18,93,1)
(96,99,1)
(27,70,1)
(123,113,1)
(66,110,1)
(153,42,1)
(76,99,1)
(126,98,1)
(142,66,1)
(41,20,1)
(56,2,1)
(99,119,1)
(170,31,1)
(53,92,1)
(154,28,1)
(128,76,1)
(106,3,1)
(146,155,1)
(88,107,1)
(131,146,1)
(20,52,1)
(39,43,1)
(117,47,1)
(73,76,1)
(132,87,1)
(171,15,1)
(165,23,1)
(71,33,1)
(164,86,1)
(150,85,1)
(30,71,1)
(67,164,1)
(87,141,1)
(42,32,1)
(43,87,1)
(97,75,1)
(112,38,1)
(57,46,1)
(133,126,1)
(43,119,1)
(33,57,1)
(57,13,1)
(60,139,1)
(72,67,1)
(136,11,1)
(39,56,1)
(32,57,1)
(22,93,1)
(60,119,1)
(46,50,1)
(145,46,1)
(76,96,1)
(31,166,1)
(101,26,1)
(152,140,1)
(38,170,1)
(94,80,1)
(13,145,1)
(81,124,1)
(16,155,1)
(125,6,1)
(82,57,1)
(95,61,1)
(129,86,1)
(28,132,1)
(33,153,1)
(98,89,1)
(84,102,1)
(84,104,1)
(18,22,1)
(86,154,1)
(107,165,1)
(142,161,1)
(161,117,1)
(166,154,1)
(5,125,1)
(84,115,1)
(56,119,1)
(89,171,1)
(84,131,1)
(139,105,1)
(3,103,1)
(110,37,1)
(4,8,1)
(32,82,1)
(166,77,1)
(46,103,1)
(86,29,1)
(172,158,1)
(165,150,1)
(0,167,1)
(130,143,1)
(105,64,1)
(121,109,1)
(155,60,1)
(70,142,1)
(140,100,1)
(169,136,1)
(141,148,1)
(104,11,1)
(50,97,1)
(11,123,1)
(86,155,1)
(155,76,2)
(165,150,2)
(61,70,2)
(119,51,2)
(44,146,2)
(92,76,2)
(152,140,2)
(86,155,2)
(6,119,2)
(172,125,2)
(56,87,2)
(32,57,2)
(86,154,2)
(47,146,2)
(152,11,2)
(100,11,2)
(163,146,2)
(169,11,2)
(16,86,2)
(46,50,2)
(160,137,2)
(68,11,2)
(70,146,2)
(6,165,2)
(170,77,2)
(63,11,2)
(146,76,2)
(113,137,2)
(110,37,2)
(4,70,2)
(107,11,2)
(97,70,2)
(119,137,2)
(67,164,2)
(10,11,2)
(157,137,2)
(155,60,2)
(130,137,2)
(78,146,2)
(65,11,2)
(89,11,2)
(77,70,2)
(20,52,2)
(161,117,2)
(76,99,2)
(70,142,2)
(112,77,2)
(60,119,2)
(137,77,2)
(37,161,2)
(165,23,2)
(117,47,2)
(46,103,2)
(15,11,2)
(123,137,2)
(11,137,2)
(8,70,2)
(0,137,2)
(50,70,2)
(105,76,2)
(16,155,2)
(76,125,2)
(50,97,2)
(95,161,2)
(93,11,2)
(129,86,2)
(95,70,2)
(57,46,2)
(165,11,2)
(125,11,2)
(150,11,2)
(115,137,2)
(43,87,2)
(138,77,2)
(85,11,2)
(18,11,2)
(158,125,2)
(143,137,2)
(101,146,2)
(38,77,2)
(6,88,2)
(27,70,2)
(64,76,2)
(99,125,2)
(94,11,2)
(128,76,2)
(147,77,2)
(11,119,2)
(73,76,2)
(20,11,2)
(147,170,2)
(167,137,2)
(69,137,2)
(9,146,2)
(133,11,2)
(80,11,2)
(131,146,2)
(74,11,2)
(70,37,2)
(126,11,2)
(99,119,2)
(43,56,2)
(136,11,2)
(60,76,2)
(117,155,2)
(142,161,2)
(19,146,2)
(22,11,2)
(98,11,2)
(147,112,2)
(18,93,2)
(5,125,2)
(171,11,2)
(152,169,2)
(6,11,2)
(137,147,2)
(146,155,2)
(33,57,2)
(75,70,2)
(102,70,2)
(161,146,2)
(142,37,2)
(53,76,2)
(16,154,2)
(166,77,2)
(31,77,2)
(41,11,2)
(125,6,2)
(81,11,2)
(96,125,2)
(43,119,2)
(104,11,2)
(56,119,2)
(140,11,2)
(59,70,2)
(139,76,2)
(117,146,2)
(71,33,2)
(26,146,2)
(83,56,2)
(66,37,2)
(124,11,2)
(37,146,2)
(51,137,2)
(88,11,2)
(116,146,2)
(52,11,2)
-----------------------------------
(0,IPPROTO_TCP)
(1,)
(2,INVALID_SOCKET)
(3,wsaDataInit)
(4,inputBuffer[recvResult] = \'\\\\0\')
(5,break;)
(6,bind(listenSocket, (struct sockaddr*)
(7,)
(8,'\\\\0')
(9,1)
(10,service.sin_family)
(11,listenSocket == INVALID_SOCKET)
(12,)
(13,dataCopy)
(14,if (acceptSocket != INVALID_SOCKET)
(15,INADDR_ANY)
(16,CLOSE_SOCKET(acceptSocket)
(17,)
(18,service.sin_addr.s_addr)
(19,acceptSocket)
(20,service.sin_port = htons(TCP_PORT)
(21,wsaDataInit)
(22,s_addr)
(23,struct sockaddr*)
(24,data)
(25,dataCopy)
(26,inputBuffer)
(27,inputBuffer)
(28,INVALID_SOCKET)
(29,INVALID_SOCKET)
(30,RET)
(31,2)
(32,++data)
(33,result = data)
(34,wsaDataInit = 0)
(35,service)
(36,data)
(37,recvResult == SOCKET_ERROR)
(38,wsaData)
(39,acceptSocket)
(40,)
(41,listenSocket)
(42,result)
(43,CLOSE_SOCKET(listenSocket)
(44,SOCKET_ERROR)
(45,if (listenSocket == INVALID_SOCKET)
(46,dataCopy = data)
(47,CHAR_ARRAY_SIZE - 1)
(48,recvResult)
(49,)
(50,data = atoi(inputBuffer)
(51,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(52,htons(TCP_PORT)
(53,SOCKET_ERROR)
(54,if (listenSocket != INVALID_SOCKET)
(55,inputBuffer[recvResult] = '\\\\0')
(56,listenSocket != INVALID_SOCKET)
(57,data = dataCopy)
(58,)
(59,data)
(60,accept(listenSocket, NULL, NULL)
(61,recvResult)
(62,)
(63,sin_addr)
(64,listenSocket)
(65,0)
(66,0)
(67,WSACleanup()
(68,AF_INET)
(69,wsaDataInit)
(70,recvResult == SOCKET_ERROR || recvResult == 0)
(71,printIntLine(result)
(72,dataCopy)
(73,break;)
(74,SOCKET_ERROR)
(75,inputBuffer)
(76,listen(listenSocket, LISTEN_BACKLOG)
(77,0)
(78,recvResult)
(79,inputBuffer)
(80,service)
(81,service)
(82,data)
(83,listenSocket)
(84,listenSocket)
(85,service)
(86,acceptSocket != INVALID_SOCKET)
(87,listenSocket = INVALID_SOCKET)
(88,sizeof(service)
(89,service)
(90,wsaData)
(91,if (acceptSocket == SOCKET_ERROR)
(92,acceptSocket)
(93,service.sin_addr)
(94,sin_family)
(95,inputBuffer[recvResult])
(96,SOCKET_ERROR)
(97,atoi(inputBuffer)
(98,sin_port)
(99,listen(listenSocket, LISTEN_BACKLOG)
(100,service)
(101,CHAR_ARRAY_SIZE)
(102,break;)
(103,data = 0)
(104,break;)
(105,NULL)
(106,0)
(107,service)
(108,result)
(109,data)
(110,recvResult)
(111,)
(112,&wsaData)
(113,listenSocket)
(114,do)
(115,break;)
(116,0)
(117,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(118,)
(119,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(120,)
(121,0)
(122,)
(123,INVALID_SOCKET)
(124,service.sin_family = AF_INET)
(125,bind(listenSocket, (struct sockaddr*)
(126,service.sin_port)
(127,)
(128,acceptSocket)
(129,acceptSocket)
(130,listenSocket)
(131,break;)
(132,acceptSocket)
(133,TCP_PORT)
(134,if (recvResult == SOCKET_ERROR || recvResult == 0)
(135,listenSocket)
(136,service)
(137,WSAStartup(MAKEWORD(2,2)
(138,NO_ERROR)
(139,NULL)
(140,sizeof(service)
(141,INVALID_SOCKET)
(142,recvResult == 0)
(143,wsaDataInit = 1)
(144,)
(145,data)
(146,acceptSocket == SOCKET_ERROR)
(147,WSAStartup(MAKEWORD(2,2)
(148,listenSocket)
(149,\'\\\\0\')
(150,&service)
(151,if (wsaDataInit)
(152,memset(&service, 0, sizeof(service)
(153,data)
(154,acceptSocket = INVALID_SOCKET)
(155,acceptSocket = accept(listenSocket, NULL, NULL)
(156,if (bind(listenSocket, (struct sockaddr*)
(157,1)
(158,listenSocket)
(159,if (WSAStartup(MAKEWORD(2,2)
(160,AF_INET)
(161,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(162,if (listen(listenSocket, LISTEN_BACKLOG)
(163,recvResult)
(164,wsaDataInit)
(165,(struct sockaddr*)
(166,2)
(167,SOCK_STREAM)
(168,data)
(169,&service)
(170,MAKEWORD(2,2)
(171,service.sin_addr.s_addr = INADDR_ANY)
(172,LISTEN_BACKLOG)
(173,acceptSocket)
(174,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^