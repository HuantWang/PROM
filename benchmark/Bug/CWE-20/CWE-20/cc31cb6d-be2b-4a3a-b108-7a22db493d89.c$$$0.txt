-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
    memset(data, 'A', 100-1); /* fill with 'A's */
    data[100-1] = '\0'; /* null terminate */
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
44,48
45,46
47,48
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
58,59
58,60
62,63
62,64
62,65
62,66
62,67
63,64
64,65
64,66
66,67
66,68
66,69
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
95,96
95,97
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,48,49,51,52,57,59,60,61,65,67,69,71,75,77,79,83,85,88,89,94,96,97,98,102,104,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
50,51
50,52
54,55
54,56
58,59
58,60
80,81
80,82
91,92
91,93
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */    memset(data, 'A', 100-1); /* fill with 'A's */    data[100-1] = '\0'; /* null terminate */    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memmove(dest, data, strlen(data)*sizeof(char));
memmove(dest, data, strlen(data)*sizeof(char))
memmove
memmove
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(53,52,0)
(48,15,0)
(38,9,0)
(50,36,0)
(12,24,0)
(20,9,0)
(44,55,0)
(50,34,0)
(4,54,0)
(52,33,0)
(35,38,0)
(39,8,0)
(26,34,0)
(2,9,0)
(28,10,0)
(43,53,0)
(10,21,0)
(37,28,0)
(19,23,0)
(55,33,0)
(15,28,0)
(8,52,0)
(10,28,0)
(37,54,0)
(50,53,0)
(11,53,0)
(21,14,0)
(24,33,0)
(16,56,0)
(13,14,0)
(46,7,0)
(22,15,0)
(32,33,0)
(3,54,0)
(27,37,0)
(31,10,0)
(18,8,0)
(14,21,0)
(35,28,0)
(36,28,0)
(23,35,0)
(6,38,0)
(45,52,0)
(53,33,0)
(14,56,0)
(34,50,0)
(30,36,0)
(1,37,0)
(49,23,0)
(32,28,0)
(37,9,0)
(24,28,0)
(35,23,0)
(56,14,0)
(7,46,0)
(8,39,0)
(53,28,0)
(28,9,0)
(54,37,0)
(41,7,0)
(40,35,0)
(46,29,0)
(53,50,0)
(42,32,0)
(47,33,0)
(36,50,0)
(21,10,0)
(25,28,0)
(8,55,0)
(33,9,0)
(5,52,0)
(10,31,0)
(51,39,0)
(0,39,0)
(42,24,1)
(38,6,1)
(12,55,1)
(34,26,1)
(11,52,1)
(43,11,1)
(24,28,1)
(4,1,1)
(21,14,1)
(8,39,1)
(41,15,1)
(3,4,1)
(48,22,1)
(53,28,1)
(30,43,1)
(18,53,1)
(53,50,1)
(51,0,1)
(22,28,1)
(56,16,1)
(49,19,1)
(39,51,1)
(17,32,1)
(7,41,1)
(46,7,1)
(19,40,1)
(1,27,1)
(36,30,1)
(36,28,1)
(8,52,1)
(37,28,1)
(15,28,1)
(10,31,1)
(37,54,1)
(44,8,1)
(45,38,1)
(55,44,1)
(54,3,1)
(10,21,1)
(35,28,1)
(5,45,1)
(50,34,1)
(15,48,1)
(14,56,1)
(13,25,1)
(23,49,1)
(32,42,1)
(24,12,1)
(32,28,1)
(27,15,1)
(52,5,1)
(6,35,1)
(28,10,1)
(0,18,1)
(35,23,1)
(40,37,1)
(50,36,1)
(26,36,1)
(53,52,1)
(16,13,1)
(27,46,1)
(15,28,2)
(37,54,2)
(14,56,2)
(8,52,2)
(21,14,2)
(32,28,2)
(35,23,2)
(53,28,2)
(50,36,2)
(24,28,2)
(37,28,2)
(36,28,2)
(46,7,2)
(53,52,2)
(50,34,2)
(53,50,2)
(41,15,2)
(46,15,2)
(35,28,2)
(10,21,2)
(10,31,2)
(28,10,2)
(8,39,2)
(7,15,2)
-----------------------------------
(0,50)
(1,\\\'A\\\')
(2,if (data == NULL)
(3,1)
(4,100)
(5,"")
(6,\\\'\\\\0\\\')
(7,-1)
(8,dest[50-1])
(9,)
(10,(char *)
(11,dest)
(12,data)
(13,100)
(14,100*sizeof(char)
(15,data == NULL)
(16,char)
(17,RET)
(18,dest)
(19,100)
(20,data)
(21,malloc(100*sizeof(char)
(22,data)
(23,100-1)
(24,printLine(data)
(25,data)
(26,char)
(27,data)
(28,data = (char *)
(29,)
(30,data)
(31,char *)
(32,free(data)
(33,)
(34,sizeof(char)
(35,data[100-1])
(36,strlen(data)
(37,memset(data, \\\'A\\\', 100-1)
(38,data[100-1] = \\\'\\\\0\\\')
(39,50-1)
(40,data)
(41,1)
(42,data)
(43,data)
(44,\\\'\\\\0\\\')
(45,dest)
(46,exit(-1)
(47,dest)
(48,NULL)
(49,1)
(50,strlen(data)
(51,1)
(52,dest[50] = "")
(53,memmove(dest, data, strlen(data)
(54,100-1)
(55,dest[50-1] = \\\'\\\\0\\\')
(56,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^