-----label-----
1
-----code-----
static void badSink()
{
    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
15,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
67,68
68,69
69,70
69,71
70,71
70,72
71,72
73,74
76,77
76,78
76,79
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,13,17,19,22,24,25,29,31,34,36,39,40,44,46,51,53,58,59,62,63,66,72,74,75,79,80,86,88,89,94,95,98,99,102,107,110,112,117,118,122,124
-----computeFrom-----
35,36
35,37
42,43
42,44
56,57
56,58
60,61
60,62
69,70
69,71
77,78
77,79
83,84
83,85
92,93
92,94
96,97
96,98
-----guardedBy-----
79,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
static void
badSink()
badSink
{    int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;
int data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData;
int
data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData
data
= CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(18,46,0)
(28,10,0)
(37,21,0)
(52,66,0)
(66,4,0)
(26,43,0)
(9,66,0)
(60,0,0)
(55,59,0)
(2,31,0)
(35,50,0)
(4,69,0)
(6,53,0)
(33,46,0)
(51,46,0)
(25,59,0)
(29,69,0)
(50,21,0)
(58,14,0)
(64,15,0)
(65,6,0)
(56,37,0)
(48,9,0)
(5,8,0)
(68,69,0)
(9,50,0)
(30,9,0)
(27,6,0)
(6,37,0)
(1,21,0)
(32,63,0)
(34,50,0)
(66,52,0)
(31,5,0)
(11,62,0)
(13,48,0)
(17,48,0)
(3,63,0)
(69,4,0)
(63,3,0)
(48,11,0)
(40,7,0)
(24,53,0)
(15,43,0)
(42,33,0)
(47,11,0)
(66,9,0)
(53,10,0)
(20,51,0)
(16,29,0)
(39,0,0)
(12,63,0)
(3,38,0)
(14,50,0)
(67,50,0)
(69,29,0)
(36,43,0)
(6,9,0)
(14,9,0)
(63,46,0)
(22,33,0)
(48,43,0)
(57,43,0)
(0,37,0)
(54,40,0)
(59,9,0)
(63,11,0)
(63,9,0)
(23,50,0)
(45,15,0)
(41,50,0)
(44,26,0)
(4,66,0)
(19,46,0)
(49,37,0)
(5,31,0)
(20,3,1)
(60,39,1)
(0,60,1)
(64,26,1)
(24,6,1)
(18,53,1)
(31,2,1)
(61,14,1)
(39,15,1)
(53,24,1)
(48,43,1)
(15,45,1)
(22,42,1)
(63,9,1)
(3,63,1)
(33,22,1)
(42,51,1)
(69,29,1)
(51,46,1)
(36,57,1)
(6,37,1)
(51,20,1)
(15,43,1)
(65,0,1)
(25,55,1)
(56,49,1)
(66,4,1)
(32,33,1)
(43,36,1)
(6,27,1)
(19,18,1)
(46,19,1)
(2,59,1)
(30,37,1)
(58,33,1)
(29,16,1)
(14,58,1)
(5,31,1)
(63,12,1)
(12,32,1)
(47,48,1)
(26,44,1)
(63,11,1)
(45,64,1)
(27,65,1)
(48,9,1)
(54,0,1)
(6,9,1)
(13,15,1)
(37,56,1)
(4,69,1)
(58,40,1)
(44,11,1)
(59,25,1)
(17,13,1)
(14,9,1)
(59,9,1)
(33,46,1)
(42,46,1)
(63,46,1)
(57,5,1)
(57,59,1)
(64,43,1)
(66,52,1)
(0,37,1)
(68,30,1)
(48,17,1)
(40,54,1)
(16,68,1)
(55,9,1)
(9,66,1)
(26,43,1)
(11,47,1)
(66,4,2)
(26,43,2)
(64,15,2)
(46,0,2)
(18,0,2)
(54,0,2)
(59,9,2)
(22,33,2)
(33,0,2)
(48,15,2)
(26,15,2)
(53,0,2)
(27,0,2)
(3,63,2)
(15,15,2)
(24,0,2)
(4,69,2)
(5,31,2)
(65,0,2)
(0,37,2)
(11,15,2)
(32,33,2)
(6,9,2)
(15,43,2)
(69,29,2)
(42,0,2)
(33,33,2)
(3,33,2)
(19,0,2)
(2,59,2)
(5,59,2)
(66,52,2)
(31,59,2)
(13,15,2)
(40,0,2)
(42,33,2)
(48,43,2)
(63,33,2)
(22,0,2)
(51,33,2)
(6,37,2)
(12,33,2)
(47,15,2)
(33,46,2)
(9,66,2)
(20,33,2)
(63,11,2)
(51,46,2)
(14,9,2)
(6,0,2)
(17,15,2)
(48,9,2)
(45,15,2)
(63,46,2)
(63,9,2)
(44,15,2)
-----------------------------------
(0,data >= 0)
(1,data)
(2,1)
(3,printIntLine(buffer[i])
(4,malloc(10 * sizeof(int)
(5,exit(-1)
(6,buffer[data])
(7,)
(8,)
(9,* buffer = (int *)
(10,)
(11,buffer[i] = 0)
(12,i)
(13,buffer)
(14,free(buffer)
(15,i < 10)
(16,int)
(17,i)
(18,i)
(19,0)
(20,i)
(21,)
(22,10)
(23,buffer)
(24,1)
(25,NULL)
(26,i++)
(27,data)
(28,for(i = 0; i < 10; i++)
(29,sizeof(int)
(30,buffer)
(31,-1)
(32,buffer)
(33,i < 10)
(34,for (i = 0; i < 10; i++)
(35,if (data >= 0)
(36,0)
(37,data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData)
(38,)
(39,data)
(40,printLine("ERROR: Array index is negative.")
(41,i)
(42,i)
(43,i = 0)
(44,i)
(45,10)
(46,i = 0)
(47,0)
(48,buffer[i])
(49,data)
(50,)
(51,i++)
(52,int *)
(53,buffer[data] = 1)
(54,"ERROR: Array index is negative.")
(55,buffer)
(56,CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData)
(57,i)
(58,buffer)
(59,buffer == NULL)
(60,0)
(61,RET)
(62,)
(63,buffer[i])
(64,i)
(65,buffer)
(66,(int *)
(67,if (buffer == NULL)
(68,10)
(69,10 * sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^