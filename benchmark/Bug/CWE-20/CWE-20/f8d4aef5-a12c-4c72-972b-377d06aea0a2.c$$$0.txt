-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (int *)malloc(50*sizeof(int));
    if (data == NULL) {exit(-1);}
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
62,63
64,65
64,66
64,67
64,68
65,66
66,67
66,68
67,68
69,70
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
81,82
82,83
84,85
85,86
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,56,58,60,63,68,70,75,76,79,80,83,89,91,94,96,100,103,104,108,110
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
73,74
73,75
77,78
77,79
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18_bad(){    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18_bad
{    int * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));
source
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(13,30,0)
(12,44,0)
(4,43,0)
(9,43,0)
(28,51,0)
(29,10,0)
(5,45,0)
(13,15,0)
(39,51,0)
(25,51,0)
(4,51,0)
(18,15,0)
(35,10,0)
(47,36,0)
(15,47,0)
(14,12,0)
(24,30,0)
(1,23,0)
(30,13,0)
(21,26,0)
(23,31,0)
(9,51,0)
(42,10,0)
(17,14,0)
(53,30,0)
(43,6,0)
(50,12,0)
(32,35,0)
(3,4,0)
(0,9,0)
(2,39,0)
(45,36,0)
(16,36,0)
(4,48,0)
(11,42,0)
(7,36,0)
(35,44,0)
(46,10,0)
(35,32,0)
(19,4,0)
(52,45,0)
(44,35,0)
(12,14,0)
(29,15,0)
(43,4,0)
(49,36,0)
(38,36,0)
(27,42,0)
(30,10,0)
(9,10,0)
(34,9,0)
(8,29,0)
(37,48,0)
(23,1,0)
(40,39,0)
(26,51,0)
(22,15,0)
(44,12,0)
(10,36,0)
(10,35,0)
(48,47,0)
(20,1,0)
(33,47,0)
(11,27,1)
(42,11,1)
(4,51,1)
(44,12,1)
(13,30,1)
(9,0,1)
(35,44,1)
(39,51,1)
(21,43,1)
(50,46,1)
(0,34,1)
(27,10,1)
(2,26,1)
(53,39,1)
(37,42,1)
(24,53,1)
(34,39,1)
(19,9,1)
(2,51,1)
(43,4,1)
(12,14,1)
(46,7,1)
(1,20,1)
(28,48,1)
(17,50,1)
(30,10,1)
(7,45,1)
(14,17,1)
(48,37,1)
(39,40,1)
(52,5,1)
(4,48,1)
(26,51,1)
(26,21,1)
(25,28,1)
(29,10,1)
(8,13,1)
(40,2,1)
(37,23,1)
(41,29,1)
(23,1,1)
(4,3,1)
(20,42,1)
(9,10,1)
(45,52,1)
(42,10,1)
(3,19,1)
(30,24,1)
(35,32,1)
(51,25,1)
(10,35,1)
(29,8,1)
(9,51,1)
(39,39,2)
(12,14,2)
(23,1,2)
(34,39,2)
(4,39,2)
(39,51,2)
(2,39,2)
(23,42,2)
(40,39,2)
(0,39,2)
(3,39,2)
(10,35,2)
(29,10,2)
(35,44,2)
(43,39,2)
(9,10,2)
(20,42,2)
(44,12,2)
(4,51,2)
(43,4,2)
(21,39,2)
(42,10,2)
(9,51,2)
(13,30,2)
(1,42,2)
(26,51,2)
(19,39,2)
(30,10,2)
(26,39,2)
(35,32,2)
(4,48,2)
(9,39,2)
-----------------------------------
(0,i)
(1,-1)
(2,i)
(3,i)
(4,source[i])
(5,data)
(6,)
(7,goto source;)
(8,data)
(9,data[i])
(10,data = (int *)
(11,NULL)
(12,50*sizeof(int)
(13,printIntLine(data[0])
(14,sizeof(int)
(15,)
(16,if (data == NULL)
(17,int)
(18,for (i = 0; i < 100; i++)
(19,source)
(20,1)
(21,i)
(22,i)
(23,exit(-1)
(24,0)
(25,0)
(26,i++)
(27,data)
(28,i)
(29,free(data)
(30,data[0])
(31,)
(32,int *)
(33,source)
(34,data)
(35,(int *)
(36,)
(37,source)
(38,data)
(39,i < 100)
(40,100)
(41,RET)
(42,data == NULL)
(43,data[i] = source[i])
(44,malloc(50*sizeof(int)
(45,data = NULL)
(46,data)
(47,)
(48,source[100] = {0})
(49,source:)
(50,50)
(51,i = 0)
(52,NULL)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^