-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad()
{
    int i;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
36,38
36,39
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
75,76
75,77
75,78
75,79
75,80
75,81
76,77
77,78
77,79
79,80
79,81
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,13,15,16,20,22,27,28,31,32,35,40,43,45,48,50,53,54,58,60,65,67,72,73,74,78,80,82,86,88,89,91,92,97,99,100,101,105,107,109,113,115,119,121
-----computeFrom-----
18,19
18,20
25,26
25,27
29,30
29,31
38,39
38,40
49,50
49,51
56,57
56,58
69,70
69,71
90,91
90,92
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad(){    int i;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad
{    int i;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(60,52,0)
(1,40,0)
(17,47,0)
(18,52,0)
(13,50,0)
(0,10,0)
(28,9,0)
(49,36,0)
(34,35,0)
(5,34,0)
(7,59,0)
(14,10,0)
(25,45,0)
(8,22,0)
(28,55,0)
(21,9,0)
(57,22,0)
(48,33,0)
(59,41,0)
(55,47,0)
(11,15,0)
(54,28,0)
(35,55,0)
(4,55,0)
(45,48,0)
(51,5,0)
(57,55,0)
(37,28,0)
(32,57,0)
(34,5,0)
(27,60,0)
(22,11,0)
(16,5,0)
(39,59,0)
(19,30,0)
(11,22,0)
(41,59,0)
(38,40,0)
(58,50,0)
(50,55,0)
(43,35,0)
(4,22,0)
(15,11,0)
(4,36,0)
(48,45,0)
(50,36,0)
(12,4,0)
(20,30,0)
(10,20,0)
(31,36,0)
(26,52,0)
(40,22,0)
(29,39,0)
(44,47,0)
(62,47,0)
(41,11,0)
(2,26,0)
(11,41,0)
(10,22,0)
(57,36,0)
(9,28,0)
(6,52,0)
(36,47,0)
(50,22,0)
(23,20,0)
(59,39,0)
(63,34,0)
(22,30,0)
(46,9,0)
(24,60,0)
(42,55,0)
(27,52,1)
(50,13,1)
(13,58,1)
(57,32,1)
(43,34,1)
(59,39,1)
(50,36,1)
(29,7,1)
(6,18,1)
(4,12,1)
(24,27,1)
(22,11,1)
(18,36,1)
(58,35,1)
(54,60,1)
(38,1,1)
(35,43,1)
(63,28,1)
(48,45,1)
(32,50,1)
(11,41,1)
(14,40,1)
(10,0,1)
(21,46,1)
(60,24,1)
(46,37,1)
(4,22,1)
(27,26,1)
(23,10,1)
(50,22,1)
(45,25,1)
(12,57,1)
(16,51,1)
(20,23,1)
(14,48,1)
(34,5,1)
(7,8,1)
(57,22,1)
(26,2,1)
(52,6,1)
(25,40,1)
(31,49,1)
(40,22,1)
(0,14,1)
(8,60,1)
(3,4,1)
(1,22,1)
(36,31,1)
(10,22,1)
(37,54,1)
(26,52,1)
(28,9,1)
(51,63,1)
(60,52,1)
(40,38,1)
(2,20,1)
(57,36,1)
(39,29,1)
(11,15,1)
(5,16,1)
(4,36,1)
(41,59,1)
(9,21,1)
(40,60,2)
(20,60,2)
(45,40,2)
(11,60,2)
(27,60,2)
(11,15,2)
(57,22,2)
(60,52,2)
(41,59,2)
(25,40,2)
(41,60,2)
(26,52,2)
(50,36,2)
(14,60,2)
(4,22,2)
(22,60,2)
(26,60,2)
(29,60,2)
(59,60,2)
(39,60,2)
(48,45,2)
(40,22,2)
(48,40,2)
(4,36,2)
(38,60,2)
(10,22,2)
(0,60,2)
(50,22,2)
(7,60,2)
(59,39,2)
(57,36,2)
(28,9,2)
(1,60,2)
(34,5,2)
(60,60,2)
(11,41,2)
(22,11,2)
(2,60,2)
(23,60,2)
(24,60,2)
(10,60,2)
(8,60,2)
-----------------------------------
(0,0)
(1,data)
(2,i)
(3,RET)
(4,free(data)
(5,100-1)
(6,0)
(7,50)
(8,data)
(9,100-1)
(10,data[0])
(11,(char *)
(12,data)
(13,source)
(14,data)
(15,char *)
(16,1)
(17,data)
(18,i)
(19,if (data == NULL)
(20,data[0] = \'\\\\0\')
(21,1)
(22,data = (char *)
(23,'\\\\0')
(24,1)
(25,1)
(26,i++)
(27,i)
(28,memset(source, 'C', 100-1)
(29,char)
(30,)
(31,NULL)
(32,data)
(33,)
(34,source[100-1])
(35,source[100-1] = '\\\\0')
(36,data = NULL)
(37,'C')
(38,NULL)
(39,sizeof(char)
(40,data == NULL)
(41,malloc(50*sizeof(char)
(42,source)
(43,'\\\\0')
(44,for(i = 0; i < 1; i++)
(45,-1)
(46,100)
(47,)
(48,exit(-1)
(49,data)
(50,strcpy(data, source)
(51,100)
(52,i = 0)
(53,\'\\\\0\')
(54,source)
(55,)
(56,data[0] = '\\\\0')
(57,printLine(data)
(58,data)
(59,50*sizeof(char)
(60,i < 1)
(61,memset(source, \'C\', 100-1)
(62,i)
(63,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^