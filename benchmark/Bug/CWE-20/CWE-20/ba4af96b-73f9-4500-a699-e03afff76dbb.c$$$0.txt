-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_63_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink
&data
data
data
-----joern-----
(66,28,0)
(60,17,0)
(41,70,0)
(33,39,0)
(3,33,0)
(38,0,0)
(0,30,0)
(52,33,0)
(69,45,0)
(42,66,0)
(35,47,0)
(1,0,0)
(13,25,0)
(0,25,0)
(34,47,0)
(50,31,0)
(11,16,0)
(70,30,0)
(48,28,0)
(56,28,0)
(56,57,0)
(7,24,0)
(53,28,0)
(66,30,0)
(46,48,0)
(58,18,0)
(65,70,0)
(47,18,0)
(48,64,0)
(16,71,0)
(0,28,0)
(29,45,0)
(44,18,0)
(4,30,0)
(58,57,0)
(37,58,0)
(55,26,0)
(14,3,0)
(45,30,0)
(18,47,0)
(28,71,0)
(36,28,0)
(25,40,0)
(28,17,0)
(70,41,0)
(23,20,0)
(21,71,0)
(53,61,0)
(22,5,0)
(63,41,0)
(30,16,0)
(31,53,0)
(33,66,0)
(62,28,0)
(64,71,0)
(8,59,0)
(9,31,0)
(18,58,0)
(24,57,0)
(12,56,0)
(5,40,0)
(57,56,0)
(51,24,0)
(59,30,0)
(53,31,0)
(49,70,0)
(3,45,0)
(24,35,0)
(2,71,0)
(45,3,0)
(57,26,0)
(18,28,0)
(17,71,0)
(47,35,0)
(15,53,0)
(39,33,0)
(67,61,0)
(3,14,0)
(30,59,0)
(32,39,0)
(59,28,0)
(61,43,0)
(6,16,0)
(10,17,0)
(33,3,0)
(31,57,0)
(54,58,0)
(64,48,0)
(35,24,0)
(19,57,0)
(27,66,0)
(66,33,0)
(66,28,1)
(65,49,1)
(35,47,1)
(59,8,1)
(46,61,1)
(38,5,1)
(69,29,1)
(60,10,1)
(44,24,1)
(0,30,1)
(53,31,1)
(62,36,1)
(46,35,1)
(64,48,1)
(58,57,1)
(46,41,1)
(15,35,1)
(47,34,1)
(45,30,1)
(61,67,1)
(70,30,1)
(4,28,1)
(33,3,1)
(35,24,1)
(29,66,1)
(51,57,1)
(5,22,1)
(57,56,1)
(48,46,1)
(47,18,1)
(56,12,1)
(0,1,1)
(24,7,1)
(13,0,1)
(3,14,1)
(53,28,1)
(19,39,1)
(7,51,1)
(30,59,1)
(31,50,1)
(24,57,1)
(66,30,1)
(28,17,1)
(18,28,1)
(68,64,1)
(28,62,1)
(48,28,1)
(66,42,1)
(41,70,1)
(34,18,1)
(67,53,1)
(22,39,1)
(31,57,1)
(54,37,1)
(25,13,1)
(45,69,1)
(17,60,1)
(56,28,1)
(63,70,1)
(46,25,1)
(8,4,1)
(18,58,1)
(50,9,1)
(39,33,1)
(70,65,1)
(33,52,1)
(49,30,1)
(32,33,1)
(37,44,1)
(0,28,1)
(42,27,1)
(58,54,1)
(33,66,1)
(27,41,1)
(12,19,1)
(9,15,1)
(41,63,1)
(1,38,1)
(52,3,1)
(39,32,1)
(36,17,1)
(59,28,1)
(3,45,1)
(56,28,2)
(28,17,2)
(13,39,2)
(32,41,2)
(69,41,2)
(0,30,2)
(44,24,2)
(53,31,2)
(58,57,2)
(3,45,2)
(57,56,2)
(33,41,2)
(7,39,2)
(67,35,2)
(29,41,2)
(33,3,2)
(31,57,2)
(9,35,2)
(53,28,2)
(18,58,2)
(34,24,2)
(19,39,2)
(18,28,2)
(5,39,2)
(3,14,2)
(39,41,2)
(0,28,2)
(42,41,2)
(12,39,2)
(45,30,2)
(61,35,2)
(66,41,2)
(18,24,2)
(24,39,2)
(25,39,2)
(39,33,2)
(1,39,2)
(56,39,2)
(0,39,2)
(27,41,2)
(52,41,2)
(50,35,2)
(22,39,2)
(51,39,2)
(35,39,2)
(48,28,2)
(37,24,2)
(57,39,2)
(15,35,2)
(66,30,2)
(66,28,2)
(30,59,2)
(58,24,2)
(33,66,2)
(54,24,2)
(59,28,2)
(41,70,2)
(45,41,2)
(64,48,2)
(47,24,2)
(35,24,2)
(38,39,2)
(35,47,2)
(70,30,2)
(47,18,2)
(53,35,2)
(3,41,2)
(24,57,2)
(31,35,2)
-----------------------------------
(0,data[dataLen])
(1,dataLen)
(2,dataBuffer)
(3,(int)
(4,dataLen)
(5,printLine("fgets()
(6,if (100-dataLen > 1)
(7,0)
(8,data)
(9,dataLen)
(10,dataBuffer)
(11,dataLen)
(12,data)
(13,\\\'\\\\0\\\')
(14,int)
(15,data)
(16,)
(17,dataBuffer[100] = COMMAND_ARG2)
(18,data[dataLen-1])
(19,dataLen)
(20,)
(21,data)
(22,"fgets()
(23,if (fgets(data+dataLen, (int)
(24,dataLen > 0)
(25,data[dataLen] = \\\'\\\\0\\\')
(26,)
(27,data)
(28,data = dataBuffer)
(29,100)
(30,dataLen = strlen(data)
(31,dataLen-1)
(32,NULL)
(33,fgets(data+dataLen, (int)
(34,\\\'\\\\n\\\')
(35,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,data)
(37,dataLen)
(38,data)
(39,fgets(data+dataLen, (int)
(40,)
(41,100-dataLen > 1)
(42,dataLen)
(43,)
(44,data)
(45,100-dataLen)
(46,data)
(47,data[dataLen-1] == \\\'\\\\n\\\')
(48,&data)
(49,100)
(50,1)
(51,dataLen)
(52,stdin)
(53,data[dataLen-1])
(54,1)
(55,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(56,strlen(data)
(57,dataLen = strlen(data)
(58,dataLen-1)
(59,strlen(data)
(60,COMMAND_ARG2)
(61,data[dataLen-1] = \\\'\\\\0\\\')
(62,dataBuffer)
(63,1)
(64,CWE78_OS_Command_Injection__char_console_w32_execvp_63b_badSink(&data)
(65,dataLen)
(66,data+dataLen)
(67,\\\'\\\\0\\\')
(68,RET)
(69,dataLen)
(70,100-dataLen)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^