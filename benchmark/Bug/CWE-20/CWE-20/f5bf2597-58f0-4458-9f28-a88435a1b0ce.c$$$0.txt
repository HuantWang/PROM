-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    if(badStatic)
    {
        {
            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (dataBuffer == NULL) {exit(-1);}
            wmemset(dataBuffer, L'A', 100-1);
            dataBuffer[100-1] = L'\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
58,59
58,60
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
-----nextToken-----
2,4,5,7,9,10,14,19,21,22,26,28,31,33,36,37,41,43,48,50,54,56,57,59,60,65,67,68,69,73,76,77,80
-----computeFrom-----
32,33
32,34
39,40
39,41
58,59
58,60
62,63
62,64
66,67
66,68
71,72
71,73
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    if(badStatic)    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
if(badStatic)    {        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
badStatic
badStatic
{        {            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));            if (dataBuffer == NULL) {exit(-1);}            wmemset(dataBuffer, L'A', 100-1);            dataBuffer[100-1] = L'\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t))
*
dataBuffer
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBuffer, L'A', 100-1);
wmemset(dataBuffer, L'A', 100-1)
wmemset
wmemset
dataBuffer
dataBuffer
L'A'
100-1
100
1
dataBuffer[100-1] = L'\0';
dataBuffer[100-1] = L'\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
L'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
return data;
data
data
-----joern-----
(29,17,0)
(1,8,0)
(5,16,0)
(1,13,0)
(19,11,0)
(24,0,0)
(33,29,0)
(14,12,0)
(4,27,0)
(23,18,0)
(6,1,0)
(27,0,0)
(12,13,0)
(2,8,0)
(10,17,0)
(21,11,0)
(26,28,0)
(29,12,0)
(23,16,0)
(7,29,0)
(3,17,0)
(12,29,0)
(22,17,0)
(27,26,0)
(8,1,0)
(26,17,0)
(27,28,0)
(30,7,0)
(12,14,0)
(16,23,0)
(32,27,0)
(13,1,0)
(11,29,0)
(11,26,0)
(26,11,0)
(15,7,0)
(17,25,0)
(9,26,0)
(13,12,0)
(32,26,1)
(23,16,1)
(11,29,1)
(10,7,1)
(27,32,1)
(6,33,1)
(9,10,1)
(5,7,1)
(26,11,1)
(30,15,1)
(8,2,1)
(12,14,1)
(11,21,1)
(29,12,1)
(1,8,1)
(7,30,1)
(21,19,1)
(33,20,1)
(26,28,1)
(10,23,1)
(12,13,1)
(15,29,1)
(7,29,1)
(27,28,1)
(27,26,1)
(16,5,1)
(2,6,1)
(13,1,1)
(32,20,1)
(19,9,1)
(4,27,1)
(12,14,2)
(9,20,2)
(4,27,2)
(19,20,2)
(5,7,2)
(8,20,2)
(26,28,2)
(7,29,2)
(13,1,2)
(27,28,2)
(12,20,2)
(23,16,2)
(26,20,2)
(23,7,2)
(30,20,2)
(2,20,2)
(16,7,2)
(10,20,2)
(29,20,2)
(26,11,2)
(1,20,2)
(15,20,2)
(11,20,2)
(13,20,2)
(6,20,2)
(7,20,2)
(1,8,2)
(29,12,2)
(27,26,2)
(12,13,2)
(33,20,2)
(11,29,2)
(21,20,2)
-----------------------------------
(0,)
(1,100*sizeof(wchar_t)
(2,wchar_t)
(3,if (dataBuffer == NULL)
(4,RET)
(5,1)
(6,100)
(7,dataBuffer == NULL)
(8,sizeof(wchar_t)
(9,data)
(10,'\\\\0')
(11,dataBuffer - 8)
(12,(wchar_t *)
(13,malloc(100*sizeof(wchar_t)
(14,wchar_t *)
(15,dataBuffer)
(16,-1)
(17,)
(18,)
(19,dataBuffer)
(20,badStatic)
(21,8)
(22,dataBuffer)
(23,exit(-1)
(24,if(badStatic)
(25,)
(26,data = dataBuffer - 8)
(27,return data;)
(28,wchar_t * data)
(29,* dataBuffer = (wchar_t *)
(30,NULL)
(31,\'\\\\0\')
(32,data)
(33,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^