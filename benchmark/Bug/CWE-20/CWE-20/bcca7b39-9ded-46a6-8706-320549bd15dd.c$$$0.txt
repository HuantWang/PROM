-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(globalFive==5)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memmove(dest, data, wcslen(data)*sizeof(wchar_t));
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
50,53
50,54
51,52
53,54
56,57
56,58
59,60
60,61
60,62
61,62
61,63
62,63
64,65
64,66
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,47,52,54,55,57,58,63,65,66,67,71,73,75,77,81,83,85,89,91,94,95,100,102,103,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
56,57
56,58
60,61
60,62
64,65
64,66
86,87
86,88
97,98
97,99
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalFive==5)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memmove(dest, data, wcslen(data)*sizeof(wchar_t));        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
memmove(dest, data, wcslen(data)*sizeof(wchar_t));
memmove(dest, data, wcslen(data)*sizeof(wchar_t))
memmove
memmove
dest
dest
data
data
wcslen(data)*sizeof(wchar_t)
wcslen(data)
wcslen
wcslen
data
data
sizeof(wchar_t)
wchar_t
wchar_t

dest[50-1] = L'\0';
dest[50-1] = L'\0'
dest[50-1]
dest
dest
50-1
50
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,15,0)
(9,29,0)
(19,20,0)
(13,39,0)
(18,11,0)
(39,20,0)
(23,11,0)
(20,19,0)
(0,4,0)
(1,16,0)
(12,32,0)
(7,5,0)
(30,26,0)
(37,2,0)
(5,0,0)
(38,5,0)
(26,35,0)
(17,5,0)
(24,38,0)
(31,0,0)
(0,5,0)
(34,17,0)
(19,5,0)
(40,19,0)
(21,7,0)
(20,15,0)
(6,30,0)
(14,2,0)
(28,29,0)
(15,20,0)
(7,29,0)
(5,2,0)
(19,29,0)
(36,32,0)
(4,0,0)
(36,4,0)
(20,39,0)
(4,36,0)
(41,5,0)
(0,31,0)
(32,36,0)
(10,38,0)
(17,29,0)
(26,30,0)
(25,19,0)
(8,2,0)
(39,5,0)
(33,36,0)
(29,2,0)
(18,23,1)
(24,10,1)
(10,5,1)
(19,5,1)
(15,3,1)
(0,31,1)
(32,12,1)
(28,11,1)
(0,4,1)
(38,5,1)
(40,28,1)
(25,40,1)
(23,26,1)
(30,6,1)
(3,39,1)
(17,34,1)
(4,36,1)
(21,9,1)
(20,39,1)
(36,32,1)
(26,30,1)
(7,5,1)
(27,17,1)
(12,33,1)
(34,7,1)
(39,13,1)
(11,18,1)
(1,11,1)
(20,15,1)
(7,21,1)
(13,25,1)
(33,41,1)
(28,1,1)
(9,19,1)
(39,5,1)
(5,0,1)
(6,38,1)
(19,20,1)
(38,24,1)
(17,5,1)
(23,38,1)
(20,15,2)
(39,5,2)
(5,0,2)
(0,4,2)
(7,5,2)
(1,11,2)
(4,36,2)
(36,32,2)
(0,31,2)
(30,38,2)
(38,5,2)
(19,20,2)
(19,5,2)
(26,38,2)
(17,5,2)
(20,39,2)
(26,30,2)
(6,38,2)
-----------------------------------
(0,(wchar_t *)
(1,\\\'\\\\0\\\')
(2,)
(3,wchar_t)
(4,malloc(100*sizeof(wchar_t)
(5,data = (wchar_t *)
(6,1)
(7,printWLine(data)
(8,if (data == NULL)
(9,\\\'\\\\0\\\')
(10,data)
(11,globalFive==5)
(12,wchar_t)
(13,data)
(14,if(globalFive==5)
(15,sizeof(wchar_t)
(16,)
(17,free(data)
(18,5)
(19,memmove(dest, data, wcslen(data)
(20,wcslen(data)
(21,data)
(22,\\'\\\\0\\')
(23,globalFive)
(24,NULL)
(25,data)
(26,exit(-1)
(27,RET)
(28,"")
(29,)
(30,-1)
(31,wchar_t *)
(32,sizeof(wchar_t)
(33,100)
(34,data)
(35,)
(36,100*sizeof(wchar_t)
(37,data)
(38,data == NULL)
(39,wcslen(data)
(40,dest)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^