-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_rand_square_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,9,11,15,17,21,22,26,30,31,34,39,40,42,47,49,53,54,59,61,65,67,71,73
-----computeFrom-----
19,20
19,21
24,25
24,26
36,37
36,38
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_square_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_34_bad()
CWE190_Integer_Overflow__int64_t_rand_square_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_square_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_square_34_unionType
CWE190_Integer_Overflow__int64_t_rand_square_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(10,27,0)
(7,14,0)
(9,2,0)
(30,5,0)
(13,5,0)
(23,14,0)
(1,15,0)
(27,1,0)
(9,15,0)
(4,21,0)
(14,7,0)
(25,15,0)
(24,11,0)
(19,21,0)
(5,30,0)
(27,7,0)
(5,13,0)
(7,1,0)
(16,14,0)
(0,24,0)
(18,7,0)
(11,30,0)
(12,9,0)
(17,1,0)
(5,29,0)
(15,21,0)
(14,9,0)
(11,21,0)
(29,5,0)
(3,2,0)
(26,11,0)
(6,21,0)
(8,30,0)
(2,9,0)
(22,24,0)
(30,21,0)
(28,2,0)
(2,3,1)
(14,16,1)
(0,22,1)
(10,7,1)
(28,12,1)
(24,0,1)
(26,24,1)
(8,4,1)
(3,28,1)
(14,9,1)
(16,23,1)
(5,29,1)
(7,14,1)
(27,10,1)
(29,8,1)
(27,7,1)
(30,5,1)
(11,26,1)
(9,2,1)
(22,30,1)
(11,30,1)
(18,9,1)
(5,13,1)
(23,18,1)
(12,11,1)
(20,27,1)
(30,5,2)
(14,9,2)
(9,2,2)
(27,7,2)
(5,13,2)
(7,14,2)
(5,29,2)
(11,30,2)
-----------------------------------
(0,unionFirst)
(1,)
(2,myUnion.unionSecond)
(3,unionSecond)
(4,L)
(5,(int64_t)
(6,data)
(7,result = data * data)
(8,data)
(9,data = myUnion.unionSecond)
(10,result)
(11,myUnion.unionFirst = data)
(12,data)
(13,int64_t)
(14,data * data)
(15,)
(16,data)
(17,result)
(18,result)
(19,myUnion)
(20,RET)
(21,)
(22,myUnion)
(23,data)
(24,myUnion.unionFirst)
(25,data)
(26,data)
(27,printLongLongLine(result)
(28,myUnion)
(29,RAND64()
(30,data = (int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^