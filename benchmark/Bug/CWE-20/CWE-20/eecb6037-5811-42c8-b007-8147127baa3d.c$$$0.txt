-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strncat(data, source, 100);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,95,99,101,105,107
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18_bad(){    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18_bad
{    char * data;    data = NULL;    goto source;source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));
source
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncat(data, source, 100);
strncat(data, source, 100)
strncat
strncat
data
data
source
source
100
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(43,31,0)
(32,10,0)
(23,47,0)
(5,47,0)
(45,50,0)
(12,10,0)
(17,0,0)
(14,28,0)
(25,2,0)
(5,36,0)
(34,30,0)
(18,28,0)
(21,4,0)
(22,5,0)
(50,47,0)
(38,31,0)
(2,51,0)
(44,1,0)
(42,7,0)
(24,11,0)
(32,4,0)
(42,6,0)
(46,30,0)
(26,19,0)
(36,31,0)
(52,4,0)
(2,25,0)
(1,19,0)
(9,23,0)
(13,10,0)
(39,5,0)
(6,42,0)
(48,31,0)
(19,0,0)
(2,47,0)
(15,36,0)
(28,14,0)
(47,2,0)
(8,1,0)
(11,47,0)
(21,47,0)
(30,31,0)
(11,4,0)
(28,25,0)
(37,14,0)
(25,28,0)
(3,23,0)
(10,32,0)
(20,32,0)
(53,47,0)
(35,32,0)
(33,11,0)
(4,31,0)
(50,4,0)
(51,2,0)
(49,11,0)
(0,4,0)
(19,1,0)
(16,31,0)
(47,31,0)
(29,21,0)
(27,6,0)
(18,53,1)
(14,37,1)
(30,34,1)
(21,47,1)
(17,19,1)
(47,2,1)
(35,20,1)
(50,45,1)
(13,12,1)
(5,22,1)
(8,26,1)
(19,1,1)
(33,0,1)
(29,50,1)
(21,29,1)
(6,27,1)
(27,23,1)
(23,3,1)
(24,49,1)
(5,47,1)
(15,5,1)
(12,35,1)
(32,10,1)
(49,33,1)
(44,8,1)
(37,18,1)
(10,13,1)
(40,21,1)
(23,47,1)
(53,48,1)
(20,36,1)
(2,51,1)
(28,14,1)
(11,24,1)
(45,11,1)
(22,39,1)
(26,32,1)
(11,47,1)
(48,30,1)
(0,17,1)
(9,47,1)
(39,23,1)
(36,15,1)
(1,44,1)
(42,6,1)
(34,46,1)
(2,25,1)
(3,9,1)
(50,47,1)
(25,28,1)
(39,42,1)
(42,6,2)
(11,47,2)
(2,51,2)
(2,25,2)
(42,23,2)
(5,47,2)
(6,23,2)
(50,47,2)
(32,10,2)
(27,23,2)
(47,2,2)
(25,28,2)
(19,1,2)
(21,47,2)
(28,14,2)
(23,47,2)
-----------------------------------
(0,source[100-1] = '\\\\0')
(1,100-1)
(2,(char *)
(3,NULL)
(4,)
(5,data[0])
(6,-1)
(7,)
(8,100)
(9,data)
(10,100-1)
(11,strncat(data, source, 100)
(12,100)
(13,1)
(14,sizeof(char)
(15,'\\\\0')
(16,if (data == NULL)
(17,'\\\\0')
(18,50)
(19,source[100-1])
(20,source)
(21,free(data)
(22,0)
(23,data == NULL)
(24,100)
(25,malloc(50*sizeof(char)
(26,source)
(27,1)
(28,50*sizeof(char)
(29,data)
(30,data = NULL)
(31,)
(32,memset(source, \'C\', 100-1)
(33,data)
(34,NULL)
(35,'C')
(36,data[0] = '\\\\0')
(37,char)
(38,data)
(39,data)
(40,RET)
(41,memset(source, 'C', 100-1)
(42,exit(-1)
(43,source:)
(44,1)
(45,data)
(46,data)
(47,data = (char *)
(48,goto source;)
(49,source)
(50,printLine(data)
(51,char *)
(52,source)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^