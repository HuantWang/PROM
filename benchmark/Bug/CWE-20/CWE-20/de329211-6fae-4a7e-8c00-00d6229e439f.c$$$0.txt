-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strncpy(data, source, strlen(source) + 1);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
59,60
59,61
62,63
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
73,75
74,75
74,76
75,76
77,78
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,60,61,64,68,70,72,76,78,79,83,85,89,91
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02_bad(){    char * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02_bad
{    char * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        strncpy(data, source, strlen(source) + 1);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strncpy(data, source, strlen(source) + 1);
strncpy(data, source, strlen(source) + 1)
strncpy
strncpy
data
data
source
source
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(30,34,0)
(11,16,0)
(13,29,0)
(0,19,0)
(28,29,0)
(8,16,0)
(12,19,0)
(19,0,0)
(5,34,0)
(38,4,0)
(16,4,0)
(25,2,0)
(23,0,0)
(19,12,0)
(35,34,0)
(2,20,0)
(10,40,0)
(18,40,0)
(17,21,0)
(18,17,0)
(31,35,0)
(32,21,0)
(36,18,0)
(41,0,0)
(17,34,0)
(17,28,0)
(35,28,0)
(37,41,0)
(16,12,0)
(3,21,0)
(26,25,0)
(40,21,0)
(34,29,0)
(15,12,0)
(12,15,0)
(2,25,0)
(21,28,0)
(8,34,0)
(6,8,0)
(14,22,0)
(40,18,0)
(39,22,0)
(17,18,0)
(33,29,0)
(8,28,0)
(7,17,0)
(22,16,0)
(35,16,0)
(12,16,0)
(0,41,0)
(9,17,0)
(27,28,0)
(17,16,0)
(35,16,1)
(23,11,1)
(25,26,1)
(17,16,1)
(26,22,1)
(17,34,1)
(17,18,1)
(11,24,1)
(32,2,1)
(35,31,1)
(7,21,1)
(10,9,1)
(1,8,1)
(8,34,1)
(14,39,1)
(8,6,1)
(12,19,1)
(40,21,1)
(35,34,1)
(8,16,1)
(16,12,1)
(12,15,1)
(39,16,1)
(19,0,1)
(22,14,1)
(32,22,1)
(21,3,1)
(18,40,1)
(3,32,1)
(18,36,1)
(34,5,1)
(22,16,1)
(36,40,1)
(24,34,1)
(41,37,1)
(9,7,1)
(37,23,1)
(40,10,1)
(32,24,1)
(5,30,1)
(2,25,1)
(17,21,1)
(0,41,1)
(31,17,1)
(6,35,1)
(39,24,2)
(12,24,2)
(17,21,2)
(22,24,2)
(19,0,2)
(17,34,2)
(35,34,2)
(18,40,2)
(2,25,2)
(17,16,2)
(35,16,2)
(0,24,2)
(8,16,2)
(26,22,2)
(14,24,2)
(23,24,2)
(37,24,2)
(22,16,2)
(12,19,2)
(17,18,2)
(25,22,2)
(40,21,2)
(16,24,2)
(16,12,2)
(12,15,2)
(2,22,2)
(8,34,2)
(41,24,2)
(19,24,2)
(11,24,2)
(0,41,2)
-----------------------------------
(0,10*sizeof(char)
(1,RET)
(2,exit(-1)
(3,SRC_STRING)
(4,)
(5,NULL)
(6,data)
(7,data)
(8,free(data)
(9,source)
(10,source)
(11,data)
(12,(char *)
(13,data)
(14,NULL)
(15,char *)
(16,data = (char *)
(17,strncpy(data, source, strlen(source)
(18,strlen(source)
(19,malloc(10*sizeof(char)
(20,)
(21,source[10+1] = SRC_STRING)
(22,data == NULL)
(23,10)
(24,1)
(25,-1)
(26,1)
(27,source)
(28,)
(29,)
(30,data)
(31,data)
(32,source)
(33,if(1)
(34,data = NULL)
(35,printLine(data)
(36,1)
(37,char)
(38,if (data == NULL)
(39,data)
(40,strlen(source)
(41,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^