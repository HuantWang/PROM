-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42_bad()
{
    int * data;
    data = NULL;
    data = badSource(data);
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
31,34
33,34
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
60,61
60,62
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,30,32,34,37,42,44,49,50,53,54,57,63,65,68,70,74,77,78,82,84
-----computeFrom-----
13,14
13,15
19,20
19,21
47,48
47,49
51,52
51,53
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42_bad(){    int * data;    data = NULL;    data = badSource(data);    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42_bad
{    int * data;    data = NULL;    data = badSource(data);    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(15,23,0)
(7,25,0)
(34,38,0)
(20,27,0)
(8,32,0)
(14,38,0)
(8,27,0)
(5,13,0)
(11,15,0)
(37,3,0)
(0,25,0)
(9,30,0)
(33,19,0)
(38,2,0)
(22,30,0)
(25,15,0)
(29,27,0)
(31,30,0)
(1,31,0)
(35,38,0)
(32,8,0)
(14,7,0)
(25,7,0)
(3,2,0)
(13,38,0)
(38,13,0)
(24,25,0)
(28,3,0)
(12,32,0)
(7,10,0)
(4,34,0)
(19,30,0)
(27,23,0)
(34,27,0)
(26,19,0)
(14,30,0)
(21,32,0)
(36,23,0)
(23,2,0)
(32,38,0)
(13,3,0)
(16,2,0)
(18,14,0)
(25,30,0)
(6,14,0)
(11,38,1)
(24,0,1)
(19,30,1)
(33,30,1)
(14,30,1)
(5,35,1)
(3,37,1)
(14,38,1)
(14,6,1)
(13,5,1)
(33,31,1)
(9,22,1)
(31,30,1)
(35,3,1)
(38,13,1)
(37,28,1)
(21,19,1)
(8,32,1)
(1,7,1)
(34,38,1)
(12,21,1)
(13,3,1)
(18,19,1)
(22,15,1)
(6,18,1)
(31,1,1)
(30,9,1)
(32,12,1)
(34,4,1)
(0,14,1)
(25,30,1)
(7,25,1)
(19,26,1)
(32,38,1)
(17,34,1)
(25,15,1)
(25,24,1)
(15,11,1)
(4,8,1)
(26,33,1)
(33,19,2)
(38,13,2)
(14,38,2)
(14,19,2)
(19,19,2)
(1,19,2)
(25,15,2)
(24,19,2)
(31,30,2)
(26,19,2)
(18,19,2)
(14,30,2)
(25,19,2)
(25,30,2)
(34,38,2)
(7,25,2)
(0,19,2)
(31,19,2)
(32,38,2)
(19,30,2)
(6,19,2)
(8,32,2)
(13,3,2)
(7,19,2)
-----------------------------------
(0,source)
(1,i)
(2,)
(3,data = NULL)
(4,data)
(5,data)
(6,i)
(7,data[i] = source[i])
(8,printIntLine(data[0])
(9,0)
(10,)
(11,source)
(12,0)
(13,badSource(data)
(14,data[i])
(15,source[100] = {0})
(16,data)
(17,RET)
(18,data)
(19,i < 100)
(20,for (i = 0; i < 100; i++)
(21,data)
(22,i)
(23,)
(24,i)
(25,source[i])
(26,100)
(27,)
(28,data)
(29,i)
(30,i = 0)
(31,i++)
(32,data[0])
(33,i)
(34,free(data)
(35,data)
(36,source)
(37,NULL)
(38,data = badSource(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^