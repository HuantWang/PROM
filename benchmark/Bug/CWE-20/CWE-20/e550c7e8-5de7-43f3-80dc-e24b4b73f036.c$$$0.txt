-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad()
{
    int64_t data;
    data = 0LL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
26,28
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,9,11,15,16,19,24,29,30,35,37,41,42,46,48
-----computeFrom-----
13,14
13,15
27,28
27,29
39,40
39,41
-----guardedBy-----
29,41
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ProblemStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad(){    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_10_bad
{    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(17,18,0)
(5,18,0)
(10,6,0)
(21,18,0)
(0,4,0)
(4,3,0)
(2,3,0)
(4,9,0)
(7,1,0)
(6,9,0)
(15,20,0)
(12,18,0)
(9,3,0)
(11,1,0)
(16,9,0)
(9,6,0)
(8,6,0)
(8,10,1)
(4,0,1)
(16,1,1)
(7,11,1)
(19,13,1)
(1,7,1)
(10,16,1)
(13,14,1)
(19,4,1)
(19,1,1)
(9,6,1)
(14,21,1)
(0,9,1)
(4,9,1)
(11,13,1)
(6,8,1)
(4,9,2)
(10,1,2)
(7,13,2)
(16,1,2)
(9,1,2)
(6,1,2)
(11,13,2)
(1,13,2)
(9,6,2)
(0,1,2)
(4,1,2)
(8,1,2)
-----------------------------------
(0,result)
(1,data > 0)
(2,result)
(3,)
(4,printLongLongLine(result)
(5,if(globalTrue)
(6,data * 2)
(7,0)
(8,2)
(9,result = data * 2)
(10,data)
(11,data)
(12,data)
(13,globalTrue)
(14,globalTrue)
(15,if(data > 0)
(16,result)
(17,if(globalTrue)
(18,)
(19,RET)
(20,)
(21,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^