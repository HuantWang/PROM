-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate space for a null terminator */
        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
69,70
69,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
93,94
93,95
93,96
95,96
96,97
96,98
99,100
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
110,112
111,112
112,113
112,114
113,114
113,115
114,115
116,117
119,120
120,121
120,122
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,61,63,66,70,71,74,75,79,81,86,88,92,94,97,98,101,105,107,109,115,117,118,121,122,126,128,132,134
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
56,57
56,58
67,68
67,69
69,70
69,71
77,78
77,79
96,97
96,98
110,111
110,112
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate space for a null terminator */        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));
data = (wchar_t *)malloc((10+1)*sizeof(wchar_t))
data
data
(wchar_t *)malloc((10+1)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc((10+1)*sizeof(wchar_t))
malloc
malloc
(10+1)*sizeof(wchar_t)
(10+1)
10+1
10
1
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,10,0)
(8,53,0)
(54,8,0)
(45,7,0)
(23,53,0)
(64,52,0)
(31,22,0)
(2,4,0)
(4,15,0)
(62,33,0)
(60,48,0)
(26,62,0)
(3,31,0)
(38,7,0)
(55,6,0)
(39,55,0)
(59,53,0)
(1,35,0)
(33,32,0)
(32,28,0)
(28,36,0)
(8,22,0)
(57,38,0)
(17,62,0)
(7,28,0)
(47,23,0)
(50,6,0)
(28,32,0)
(35,1,0)
(21,4,0)
(49,6,0)
(27,18,0)
(12,33,0)
(11,40,0)
(23,56,0)
(56,23,0)
(41,15,0)
(25,8,0)
(43,40,0)
(13,8,0)
(36,28,0)
(32,33,0)
(28,7,0)
(14,2,0)
(52,22,0)
(42,16,0)
(53,55,0)
(58,41,0)
(0,52,0)
(18,27,0)
(13,56,0)
(18,29,0)
(33,62,0)
(10,13,0)
(31,55,0)
(30,12,0)
(34,53,0)
(24,56,0)
(33,12,0)
(8,7,0)
(56,13,0)
(61,51,0)
(4,2,0)
(7,51,0)
(38,55,0)
(37,1,0)
(31,7,0)
(15,41,0)
(15,4,0)
(22,16,0)
(8,13,0)
(5,22,0)
(40,7,0)
(44,10,0)
(38,22,0)
(9,48,0)
(35,20,0)
(41,58,0)
(41,22,0)
(46,27,0)
(8,55,0)
(22,41,0)
(48,6,0)
(40,7,1)
(57,8,1)
(23,47,1)
(12,30,1)
(15,4,1)
(52,22,1)
(54,25,1)
(33,12,1)
(62,26,1)
(35,1,1)
(22,41,1)
(25,53,1)
(34,40,1)
(34,52,1)
(28,36,1)
(38,22,1)
(13,10,1)
(48,9,1)
(64,0,1)
(56,23,1)
(34,18,1)
(38,7,1)
(11,7,1)
(32,33,1)
(45,19,1)
(8,22,1)
(0,22,1)
(37,40,1)
(43,11,1)
(59,34,1)
(44,56,1)
(26,17,1)
(10,44,1)
(52,64,1)
(34,35,1)
(47,54,1)
(21,5,1)
(27,46,1)
(40,43,1)
(2,14,1)
(18,27,1)
(1,37,1)
(30,62,1)
(3,38,1)
(41,15,1)
(9,60,1)
(24,23,1)
(31,3,1)
(33,62,1)
(53,59,1)
(31,22,1)
(8,13,1)
(38,57,1)
(41,58,1)
(4,2,1)
(46,52,1)
(63,31,1)
(17,45,1)
(13,56,1)
(28,32,1)
(56,24,1)
(19,48,1)
(5,19,1)
(7,28,1)
(23,53,1)
(31,7,1)
(8,53,1)
(14,21,1)
(8,7,1)
(28,32,2)
(15,4,2)
(38,22,2)
(37,40,2)
(13,56,2)
(8,53,2)
(33,12,2)
(27,52,2)
(21,19,2)
(17,19,2)
(0,19,2)
(18,27,2)
(30,19,2)
(40,7,2)
(33,19,2)
(56,23,2)
(28,36,2)
(41,19,2)
(41,58,2)
(45,19,2)
(1,40,2)
(46,52,2)
(7,19,2)
(38,7,2)
(52,22,2)
(18,52,2)
(31,22,2)
(13,10,2)
(15,19,2)
(12,19,2)
(35,1,2)
(28,19,2)
(4,2,2)
(43,19,2)
(62,19,2)
(5,19,2)
(14,19,2)
(11,19,2)
(35,40,2)
(31,7,2)
(8,13,2)
(4,19,2)
(41,15,2)
(64,19,2)
(32,33,2)
(22,41,2)
(2,19,2)
(8,7,2)
(22,19,2)
(26,19,2)
(32,19,2)
(23,53,2)
(7,28,2)
(33,62,2)
(40,19,2)
(52,19,2)
(8,22,2)
-----------------------------------
(0,data)
(1,-1)
(2,sizeof(wchar_t)
(3,data)
(4,10*sizeof(wchar_t)
(5,data)
(6,)
(7,data = (wchar_t *)
(8,memcpy(data, source, (wcslen(source)
(9,NULL)
(10,sizeof(wchar_t)
(11,data)
(12,sizeof(wchar_t)
(13,(wcslen(source)
(14,wchar_t)
(15,malloc(10*sizeof(wchar_t)
(16,)
(17,10)
(18,exit(-1)
(19,globalReturnsTrueOrFalse()
(20,)
(21,10)
(22,data = (wchar_t *)
(23,wcslen(source)
(24,1)
(25,data)
(26,1)
(27,-1)
(28,(wchar_t *)
(29,)
(30,wchar_t)
(31,free(data)
(32,malloc((10+1)
(33,(10+1)
(34,source)
(35,exit(-1)
(36,wchar_t *)
(37,1)
(38,printWLine(data)
(39,source)
(40,data == NULL)
(41,(wchar_t *)
(42,if (data == NULL)
(43,NULL)
(44,wchar_t)
(45,data)
(46,1)
(47,source)
(48,data = NULL)
(49,if(globalReturnsTrueOrFalse()
(50,data)
(51,)
(52,data == NULL)
(53,source[10+1] = SRC_STRING)
(54,source)
(55,)
(56,wcslen(source)
(57,data)
(58,wchar_t *)
(59,SRC_STRING)
(60,data)
(61,if (data == NULL)
(62,10+1)
(63,RET)
(64,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^