-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        size_t i, destLen;
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        destLen = strlen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
75,76
76,77
76,78
77,78
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
82,83
83,84
83,85
83,86
84,85
86,87
88,89
90,91
91,92
91,93
93,94
93,95
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
104,106
107,108
108,109
108,110
109,110
109,111
110,111
112,113
112,114
116,117
117,118
117,119
118,119
120,121
120,122
121,122
123,124
125,126
125,127
125,128
125,129
126,127
127,128
127,129
128,129
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
141,143
142,143
142,144
143,144
145,146
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
154,156
155,156
157,158
157,159
161,162
162,163
162,164
163,164
165,166
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,73,74,78,79,80,85,87,89,92,94,96,100,102,103,105,106,111,113,114,115,119,122,124,129,130,133,135,138,144,146,149,151,156,158,159,160,164,166,170,172
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
104,105
104,106
108,109
108,110
112,113
112,114
117,118
117,119
127,128
127,129
131,132
131,133
141,142
141,143
153,154
153,155
157,158
157,159
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_loop_15_bad()
CWE126_Buffer_Overread__malloc_char_loop_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(23,5,0)
(8,5,0)
(59,25,0)
(71,66,0)
(67,24,0)
(43,5,0)
(71,53,0)
(56,33,0)
(73,24,0)
(31,58,0)
(47,42,0)
(68,66,0)
(2,50,0)
(5,46,0)
(3,87,0)
(1,38,0)
(55,38,0)
(45,83,0)
(66,71,0)
(7,0,0)
(60,58,0)
(58,21,0)
(49,5,0)
(20,5,0)
(35,42,0)
(34,40,0)
(40,89,0)
(87,53,0)
(0,43,0)
(28,71,0)
(44,25,0)
(91,59,0)
(30,61,0)
(55,39,0)
(32,30,0)
(60,53,0)
(69,40,0)
(4,25,0)
(75,46,0)
(14,89,0)
(39,55,0)
(40,25,0)
(11,55,0)
(12,53,0)
(63,25,0)
(6,60,0)
(89,40,0)
(50,53,0)
(33,62,0)
(62,5,0)
(43,0,0)
(64,19,0)
(18,48,0)
(26,43,0)
(84,39,0)
(65,31,0)
(86,18,0)
(27,25,0)
(40,53,0)
(85,31,0)
(70,72,0)
(53,25,0)
(1,80,0)
(74,18,0)
(78,61,0)
(48,5,0)
(10,25,0)
(80,1,0)
(45,41,0)
(60,24,0)
(93,74,0)
(42,46,0)
(82,60,0)
(1,53,0)
(9,41,0)
(79,43,0)
(53,1,0)
(38,1,0)
(71,59,0)
(33,24,0)
(76,46,0)
(16,67,0)
(87,42,0)
(13,89,0)
(36,5,0)
(61,23,0)
(57,5,0)
(54,30,0)
(52,66,0)
(37,50,0)
(88,20,0)
(15,74,0)
(81,23,0)
(72,25,0)
(58,60,0)
(61,30,0)
(31,24,0)
(62,19,0)
(92,24,0)
(60,42,0)
(90,62,0)
(41,45,0)
(18,74,0)
(38,55,0)
(87,5,0)
(17,0,0)
(51,33,0)
(22,48,0)
(19,62,0)
(17,7,1)
(65,85,1)
(71,53,1)
(31,65,1)
(51,56,1)
(37,2,1)
(18,74,1)
(26,27,1)
(81,61,1)
(91,71,1)
(11,12,1)
(69,34,1)
(56,24,1)
(66,52,1)
(93,86,1)
(67,16,1)
(42,35,1)
(64,90,1)
(23,81,1)
(40,89,1)
(32,54,1)
(0,17,1)
(70,29,1)
(72,70,1)
(26,63,1)
(89,13,1)
(87,42,1)
(39,84,1)
(6,31,1)
(33,24,1)
(87,53,1)
(40,53,1)
(33,51,1)
(78,43,1)
(31,24,1)
(67,24,1)
(92,73,1)
(34,50,1)
(33,62,1)
(79,26,1)
(82,6,1)
(63,59,1)
(54,78,1)
(28,40,1)
(56,67,1)
(15,93,1)
(19,64,1)
(1,38,1)
(22,18,1)
(74,15,1)
(43,0,1)
(55,39,1)
(90,23,1)
(14,69,1)
(20,88,1)
(50,37,1)
(13,14,1)
(58,60,1)
(60,24,1)
(87,3,1)
(29,42,1)
(84,11,1)
(7,79,1)
(68,28,1)
(27,72,1)
(88,48,1)
(12,29,1)
(77,87,1)
(2,53,1)
(35,47,1)
(71,66,1)
(53,1,1)
(86,33,1)
(34,45,1)
(48,22,1)
(52,68,1)
(60,42,1)
(24,92,1)
(9,50,1)
(38,55,1)
(1,80,1)
(62,19,1)
(61,30,1)
(85,33,1)
(41,9,1)
(16,58,1)
(60,82,1)
(73,62,1)
(60,53,1)
(45,41,1)
(3,20,1)
(50,53,1)
(30,32,1)
(59,91,1)
(67,33,2)
(58,60,2)
(37,29,2)
(62,19,2)
(65,33,2)
(63,29,2)
(87,53,2)
(33,24,2)
(41,50,2)
(55,29,2)
(61,30,2)
(14,29,2)
(87,42,2)
(1,80,2)
(45,50,2)
(18,74,2)
(56,33,2)
(33,62,2)
(59,29,2)
(50,29,2)
(6,33,2)
(66,29,2)
(60,53,2)
(31,33,2)
(70,29,2)
(85,33,2)
(72,29,2)
(40,53,2)
(71,53,2)
(13,29,2)
(58,33,2)
(31,24,2)
(60,42,2)
(69,29,2)
(40,89,2)
(12,29,2)
(33,33,2)
(53,29,2)
(39,29,2)
(55,39,2)
(1,38,2)
(28,29,2)
(53,1,2)
(50,53,2)
(45,41,2)
(9,50,2)
(38,55,2)
(38,29,2)
(34,29,2)
(11,29,2)
(84,29,2)
(71,29,2)
(60,33,2)
(43,0,2)
(27,29,2)
(40,29,2)
(89,29,2)
(68,29,2)
(60,24,2)
(52,29,2)
(71,66,2)
(16,33,2)
(91,29,2)
(67,24,2)
(1,29,2)
(2,29,2)
(82,33,2)
(51,33,2)
-----------------------------------
(0,100-1)
(1,(char *)
(2,data)
(3,data)
(4,case 6:)
(5,)
(6,data)
(7,100)
(8,destLen)
(9,1)
(10,if (data == NULL)
(11,50)
(12,data)
(13,1)
(14,50)
(15,1)
(16,i)
(17,1)
(18,dest[100-1])
(19,strlen(dest)
(20,printLine(dest)
(21,)
(22,\\\'\\\\0\\\')
(23,dest[100-1] = \\\'\\\\0\\\')
(24,i = 0)
(25,)
(26,dest)
(27,break;)
(28,data)
(29,6)
(30,100-1)
(31,dest[i])
(32,1)
(33,i < destLen)
(34,data)
(35,NULL)
(36,dest)
(37,NULL)
(38,malloc(50*sizeof(char)
(39,sizeof(char)
(40,memset(data, \\\'A\\\', 50-1)
(41,-1)
(42,data = NULL)
(43,memset(dest, \\\'C\\\', 100-1)
(44,default:)
(45,exit(-1)
(46,)
(47,data)
(48,dest[100-1] = \\\'\\\\0\\\')
(49,i)
(50,data == NULL)
(51,destLen)
(52,1)
(53,data = (char *)
(54,100)
(55,50*sizeof(char)
(56,i)
(57,for (i = 0; i < destLen; i++)
(58,dest[i] = data[i])
(59,data[50-1] = \\\'\\\\0\\\')
(60,data[i])
(61,dest[100-1])
(62,destLen = strlen(dest)
(63,break;)
(64,dest)
(65,i)
(66,50-1)
(67,i++)
(68,50)
(69,\\\'A\\\')
(70,"Benign, fixed string")
(71,data[50-1])
(72,printLine("Benign, fixed string")
(73,i)
(74,100-1)
(75,switch(6)
(76,data)
(77,RET)
(78,dest)
(79,\\\'C\\\')
(80,char *)
(81,\\\'\\\\0\\\')
(82,i)
(83,)
(84,char)
(85,dest)
(86,dest)
(87,free(data)
(88,dest)
(89,50-1)
(90,destLen)
(91,\\\'\\\\0\\\')
(92,0)
(93,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^