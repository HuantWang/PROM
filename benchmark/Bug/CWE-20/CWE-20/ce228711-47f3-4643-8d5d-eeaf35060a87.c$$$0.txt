-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(68,48,0)
(18,44,0)
(39,28,0)
(54,60,0)
(40,25,0)
(53,27,0)
(43,54,0)
(20,39,0)
(50,71,0)
(8,67,0)
(31,54,0)
(48,25,0)
(66,71,0)
(54,37,0)
(46,49,0)
(2,36,0)
(63,34,0)
(39,36,0)
(48,37,0)
(68,37,0)
(41,37,0)
(38,37,0)
(22,9,0)
(1,53,0)
(17,1,0)
(43,36,0)
(71,38,0)
(63,28,0)
(19,28,0)
(0,43,0)
(52,61,0)
(47,67,0)
(45,70,0)
(69,49,0)
(14,36,0)
(25,40,0)
(55,9,0)
(61,54,0)
(28,54,0)
(34,63,0)
(58,15,0)
(29,68,0)
(63,44,0)
(53,1,0)
(35,58,0)
(16,3,0)
(59,25,0)
(30,3,0)
(13,39,0)
(3,48,0)
(14,48,0)
(5,18,0)
(28,63,0)
(25,59,0)
(21,60,0)
(32,22,0)
(11,18,0)
(49,48,0)
(28,39,0)
(33,63,0)
(24,61,0)
(71,54,0)
(65,9,0)
(34,10,0)
(56,9,0)
(59,61,0)
(69,58,0)
(6,14,0)
(12,43,0)
(42,22,0)
(23,38,0)
(71,48,0)
(4,36,0)
(64,48,0)
(51,14,0)
(61,59,0)
(49,37,0)
(7,9,0)
(25,48,0)
(60,54,0)
(70,36,0)
(14,34,0)
(26,37,0)
(60,44,0)
(67,9,0)
(28,39,1)
(59,61,1)
(61,54,1)
(5,22,1)
(43,36,1)
(30,16,1)
(71,54,1)
(54,60,1)
(52,24,1)
(2,53,1)
(48,25,1)
(25,40,1)
(69,49,1)
(14,48,1)
(13,19,1)
(28,54,1)
(17,3,1)
(64,54,1)
(6,51,1)
(71,48,1)
(60,21,1)
(43,54,1)
(43,12,1)
(31,18,1)
(1,17,1)
(34,63,1)
(70,45,1)
(20,13,1)
(42,32,1)
(51,43,1)
(33,14,1)
(11,5,1)
(69,58,1)
(32,67,1)
(25,59,1)
(0,36,1)
(3,30,1)
(58,35,1)
(39,36,1)
(53,1,1)
(23,71,1)
(61,52,1)
(49,46,1)
(63,28,1)
(46,68,1)
(66,50,1)
(71,66,1)
(14,36,1)
(16,48,1)
(14,6,1)
(22,42,1)
(21,31,1)
(45,34,1)
(39,20,1)
(68,48,1)
(0,70,1)
(29,38,1)
(2,3,1)
(12,0,1)
(8,47,1)
(67,8,1)
(38,23,1)
(63,44,1)
(50,43,1)
(49,48,1)
(18,44,1)
(4,2,1)
(18,11,1)
(3,48,1)
(60,44,1)
(68,29,1)
(24,64,1)
(35,18,1)
(70,36,1)
(36,4,1)
(19,33,1)
(35,18,2)
(46,18,2)
(17,3,2)
(53,3,2)
(63,28,2)
(51,43,2)
(23,18,2)
(25,40,2)
(49,48,2)
(34,63,2)
(0,18,2)
(71,18,2)
(68,48,2)
(12,43,2)
(43,18,2)
(34,43,2)
(71,54,2)
(14,48,2)
(48,25,2)
(69,58,2)
(43,36,2)
(13,43,2)
(20,43,2)
(18,44,2)
(54,60,2)
(50,18,2)
(63,43,2)
(4,18,2)
(14,43,2)
(21,18,2)
(25,18,2)
(33,43,2)
(6,43,2)
(48,18,2)
(39,43,2)
(59,61,2)
(60,18,2)
(2,18,2)
(3,48,2)
(49,18,2)
(16,18,2)
(36,18,2)
(30,18,2)
(28,43,2)
(63,44,2)
(25,59,2)
(70,43,2)
(64,18,2)
(54,18,2)
(39,36,2)
(61,18,2)
(14,36,2)
(52,18,2)
(45,43,2)
(12,18,2)
(58,18,2)
(68,18,2)
(53,1,2)
(28,54,2)
(31,18,2)
(29,18,2)
(69,49,2)
(43,54,2)
(61,54,2)
(66,18,2)
(38,18,2)
(0,43,2)
(71,48,2)
(70,36,2)
(24,18,2)
(60,44,2)
(59,18,2)
(1,3,2)
(19,43,2)
(28,39,2)
(43,43,2)
(3,18,2)
-----------------------------------
(0,j)
(1,-1)
(2,j)
(3,reversedString == NULL)
(4,0)
(5,aString)
(6,j)
(7,i)
(8,0)
(9,)
(10,)
(11,NULL)
(12,i)
(13,j)
(14,reversedString[j])
(15,)
(16,reversedString)
(17,1)
(18,aString != NULL)
(19,i)
(20,1)
(21,aString)
(22,* reversedString = NULL)
(23,\'\\\\0\')
(24,i)
(25,(char *)
(26,if (reversedString == NULL)
(27,)
(28,i-j-1)
(29,reversedString)
(30,NULL)
(31,i)
(32,reversedString)
(33,aString)
(34,reversedString[j] = aString[i-j-1])
(35,NULL)
(36,j = 0)
(37,)
(38,reversedString[i] = '\\\\0')
(39,j-1)
(40,char *)
(41,for (j = 0; j < i; j++)
(42,NULL)
(43,j < i)
(44,char * aString)
(45,j)
(46,reversedString)
(47,i)
(48,reversedString = (char *)
(49,return reversedString;)
(50,reversedString)
(51,reversedString)
(52,1)
(53,exit(-1)
(54,i = strlen(aString)
(55,if (aString != NULL)
(56,j)
(57,reversedString[i] = \'\\\\0\')
(58,return NULL;)
(59,malloc(i+1)
(60,strlen(aString)
(61,i+1)
(62,'\\\\0')
(63,aString[i-j-1])
(64,reversedString)
(65,reversedString)
(66,i)
(67,i = 0)
(68,free(reversedString)
(69,RET)
(70,j++)
(71,reversedString[i])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^