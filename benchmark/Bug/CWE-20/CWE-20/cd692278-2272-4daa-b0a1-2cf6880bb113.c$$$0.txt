-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad()
{
    void * data;
    data = NULL;
    while(1)
    {
        {
            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
            if (dataBadBuffer == NULL) {exit(-1);}
            wmemset(dataBadBuffer, L'A', 50-1);
            dataBadBuffer[50-1] = L'\0';
            /* POTENTIAL FLAW: Set data to point to a wide string */
            data = (void *)dataBadBuffer;
        }
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
            size_t dataLen = strlen((char *)data);
            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
            if (dest == NULL) {exit(-1);}
            (void)wcscpy(dest, data);
            printLine((char *)dest);
            free(dest);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
25,26
25,27
25,28
28,29
29,30
29,31
30,31
30,32
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
63,64
63,65
66,67
67,68
67,69
68,69
68,70
69,70
71,72
71,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
82,83
84,85
87,88
87,89
89,90
89,91
90,91
90,92
90,93
90,94
90,95
90,96
91,92
92,93
92,94
93,94
95,96
95,97
97,98
98,99
98,100
99,100
101,102
101,103
102,103
102,104
104,105
106,107
108,109
109,110
109,111
111,112
111,113
111,114
114,115
115,116
115,117
116,117
116,118
118,119
120,121
120,122
120,123
121,122
123,124
123,125
124,125
127,128
128,129
128,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
139,140
139,141
140,141
142,143
144,145
145,146
145,147
146,147
146,148
149,150
149,151
149,152
150,151
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
161,162
161,163
163,164
165,166
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,31,33,36,38,41,42,46,48,53,55,59,61,62,64,65,70,72,73,74,78,81,83,85,86,88,94,96,100,103,105,107,110,112,113,117,119,122,125,126,129,130,134,136,141,143,147,148,151,153,155,159,162,164,166,170,172,173
-----computeFrom-----
13,14
13,15
37,38
37,39
44,45
44,46
63,64
63,65
67,68
67,69
71,72
71,73
76,77
76,78
123,124
123,125
132,133
132,134
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad(){    void * data;    data = NULL;    while(1)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }        break;    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE135_16_bad
{    void * data;    data = NULL;    while(1)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }        break;    }}
void * data;
void * data;
void
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }        break;    }
1
{        {            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }        break;    }
{            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));            if (dataBadBuffer == NULL) {exit(-1);}            wmemset(dataBadBuffer, L'A', 50-1);            dataBadBuffer[50-1] = L'\0';            /* POTENTIAL FLAW: Set data to point to a wide string */            data = (void *)dataBadBuffer;        }
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)malloc(50*sizeof(wchar_t))
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (dataBadBuffer == NULL) {exit(-1);}
dataBadBuffer == NULL
dataBadBuffer
dataBadBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(dataBadBuffer, L'A', 50-1);
wmemset(dataBadBuffer, L'A', 50-1)
wmemset
wmemset
dataBadBuffer
dataBadBuffer
L'A'
50-1
50
1
dataBadBuffer[50-1] = L'\0';
dataBadBuffer[50-1] = L'\0'
dataBadBuffer[50-1]
dataBadBuffer
dataBadBuffer
50-1
50
1
L'\0'
data = (void *)dataBadBuffer;
data = (void *)dataBadBuffer
data
data
(void *)dataBadBuffer
void *
void
*
*
dataBadBuffer
dataBadBuffer
break;
while(1)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }        break;    }
1
{        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }        break;    }
{            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));            if (dest == NULL) {exit(-1);}            (void)wcscpy(dest, data);            printLine((char *)dest);            free(dest);        }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
void
* dest = (void *)calloc(dataLen+1, sizeof(wchar_t))
*
dest
= (void *)calloc(dataLen+1, sizeof(wchar_t))
(void *)calloc(dataLen+1, sizeof(wchar_t))
void *
void
*
*
calloc(dataLen+1, sizeof(wchar_t))
calloc
calloc
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

if (dest == NULL) {exit(-1);}
dest == NULL
dest
dest
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
free(dest);
free(dest)
free
free
dest
dest
break;
-----joern-----
(55,48,0)
(43,66,0)
(12,48,0)
(50,22,0)
(47,50,0)
(36,52,0)
(49,17,0)
(21,41,0)
(11,6,0)
(70,11,0)
(14,21,0)
(10,54,0)
(67,30,0)
(54,10,0)
(30,44,0)
(17,49,0)
(35,40,0)
(54,65,0)
(6,26,0)
(44,42,0)
(20,51,0)
(30,10,0)
(5,51,0)
(37,56,0)
(61,39,0)
(64,8,0)
(59,26,0)
(39,37,0)
(63,59,0)
(50,47,0)
(0,51,0)
(38,13,0)
(26,59,0)
(28,48,0)
(24,5,0)
(17,36,0)
(77,39,0)
(3,58,0)
(48,12,0)
(18,77,0)
(31,77,0)
(59,63,0)
(15,6,0)
(53,30,0)
(51,58,0)
(41,46,0)
(16,76,0)
(69,10,0)
(52,40,0)
(75,47,0)
(39,77,0)
(44,30,0)
(72,26,0)
(10,51,0)
(48,55,0)
(40,52,0)
(54,5,0)
(8,6,0)
(68,23,0)
(77,10,0)
(8,37,0)
(45,66,0)
(27,37,0)
(63,42,0)
(60,42,0)
(2,63,0)
(39,61,0)
(66,5,0)
(6,37,0)
(1,23,0)
(30,13,0)
(33,63,0)
(73,52,0)
(26,6,0)
(48,6,0)
(36,17,0)
(4,54,0)
(57,56,0)
(77,6,0)
(55,37,0)
(17,5,0)
(42,37,0)
(71,23,0)
(13,23,0)
(76,59,0)
(65,54,0)
(26,72,0)
(30,67,0)
(74,11,0)
(25,51,0)
(41,21,0)
(7,37,0)
(34,37,0)
(5,17,0)
(32,13,0)
(77,13,0)
(59,76,0)
(42,44,0)
(52,36,0)
(44,30,1)
(64,55,1)
(48,12,1)
(59,76,1)
(17,49,1)
(69,20,1)
(8,64,1)
(63,42,1)
(9,13,1)
(60,62,1)
(18,50,1)
(59,63,1)
(11,6,1)
(4,69,1)
(14,66,1)
(35,73,1)
(28,39,1)
(21,14,1)
(39,77,1)
(19,62,1)
(74,6,1)
(70,74,1)
(15,42,1)
(26,72,1)
(10,54,1)
(31,18,1)
(20,66,1)
(13,38,1)
(52,40,1)
(57,8,1)
(26,59,1)
(77,10,1)
(45,43,1)
(17,36,1)
(30,67,1)
(76,16,1)
(24,9,1)
(63,33,1)
(20,41,1)
(8,6,1)
(47,75,1)
(30,10,1)
(48,6,1)
(66,45,1)
(36,52,1)
(50,47,1)
(30,53,1)
(19,57,1)
(30,13,1)
(48,28,1)
(18,11,1)
(53,60,1)
(3,10,1)
(41,21,1)
(16,63,1)
(62,3,1)
(62,9,1)
(5,17,1)
(55,48,1)
(66,5,1)
(77,13,1)
(6,26,1)
(75,11,1)
(77,31,1)
(54,65,1)
(54,4,1)
(77,6,1)
(38,32,1)
(33,2,1)
(40,35,1)
(73,24,1)
(11,70,1)
(2,15,1)
(43,5,1)
(54,5,1)
(42,44,1)
(39,61,1)
(30,10,2)
(40,9,2)
(60,62,2)
(26,72,2)
(15,62,2)
(44,62,2)
(3,9,2)
(6,26,2)
(28,62,2)
(30,13,2)
(36,52,2)
(66,9,2)
(42,44,2)
(36,9,2)
(44,30,2)
(66,5,2)
(64,62,2)
(77,62,2)
(18,62,2)
(75,11,2)
(50,11,2)
(17,9,2)
(8,62,2)
(2,62,2)
(5,17,2)
(26,62,2)
(59,76,2)
(5,9,2)
(52,9,2)
(70,62,2)
(20,9,2)
(11,6,2)
(30,67,2)
(48,6,2)
(30,62,2)
(39,77,2)
(42,62,2)
(26,59,2)
(74,62,2)
(53,62,2)
(59,63,2)
(17,49,2)
(11,62,2)
(43,9,2)
(69,9,2)
(77,13,2)
(14,66,2)
(47,11,2)
(6,62,2)
(45,9,2)
(8,6,2)
(48,12,2)
(73,9,2)
(35,9,2)
(55,62,2)
(21,66,2)
(77,6,2)
(54,9,2)
(54,65,2)
(31,62,2)
(4,9,2)
(59,62,2)
(33,62,2)
(39,62,2)
(16,62,2)
(55,48,2)
(52,40,2)
(10,9,2)
(48,62,2)
(63,62,2)
(57,62,2)
(63,42,2)
(77,10,2)
(50,47,2)
(10,54,2)
(24,9,2)
(41,21,2)
(39,61,2)
(76,62,2)
(54,5,2)
(17,36,2)
(41,66,2)
-----------------------------------
(0,if (dataBadBuffer == NULL)
(1,while(1)
(2,dataLen)
(3,break;)
(4,dataBadBuffer)
(5,* dataBadBuffer = (wchar_t *)
(6,* dest = (void *)
(7,if (dest == NULL)
(8,free(dest)
(9,1)
(10,data = (void *)
(11,dest == NULL)
(12,char *)
(13,data = NULL)
(14,1)
(15,dest)
(16,wchar_t)
(17,(wchar_t *)
(18,dest)
(19,RET)
(20,\'\\\\0\')
(21,-1)
(22,)
(23,)
(24,dataBadBuffer)
(25,dataBadBuffer)
(26,(void *)
(27,dataLen)
(28,dest)
(29,'\\\\0')
(30,(char *)
(31,data)
(32,data)
(33,1)
(34,dest)
(35,wchar_t)
(36,malloc(50*sizeof(wchar_t)
(37,)
(38,NULL)
(39,(void)
(40,sizeof(wchar_t)
(41,exit(-1)
(42,dataLen = strlen((char *)
(43,dataBadBuffer)
(44,strlen((char *)
(45,NULL)
(46,)
(47,-1)
(48,(char *)
(49,wchar_t *)
(50,exit(-1)
(51,)
(52,50*sizeof(wchar_t)
(53,data)
(54,(void *)
(55,printLine((char *)
(56,)
(57,break;)
(58,)
(59,calloc(dataLen+1, sizeof(wchar_t)
(60,dataLen)
(61,void)
(62,1)
(63,dataLen+1)
(64,dest)
(65,void *)
(66,dataBadBuffer == NULL)
(67,char *)
(68,while(1)
(69,data)
(70,NULL)
(71,data)
(72,void *)
(73,50)
(74,dest)
(75,1)
(76,sizeof(wchar_t)
(77,wcscpy(dest, data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^