-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_32_bad()
{
    int64_t * data;
    int64_t * *dataPtr1 = &data;
    int64_t * *dataPtr2 = &data;
    /* Initialize data */
    data = NULL;
    {
        int64_t * data = *dataPtr1;
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
        *dataPtr1 = data;
    }
    {
        int64_t * data = *dataPtr2;
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
106,107
106,108
106,109
109,110
110,111
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,91,93,98,100,105,107,108,112,116,118
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_32_bad(){    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    /* Initialize data */    data = NULL;    {        int64_t * data = *dataPtr1;        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_32_bad()
CWE415_Double_Free__malloc_free_int64_t_32_bad
{    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    /* Initialize data */    data = NULL;    {        int64_t * data = *dataPtr1;        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
int64_t * *dataPtr1 = &data;
int64_t * *dataPtr1 = &data;
int64_t
int64_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int64_t * *dataPtr2 = &data;
int64_t * *dataPtr2 = &data;
int64_t
int64_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int64_t * data = *dataPtr1;        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        *dataPtr1 = data;    }
int64_t * data = *dataPtr1;
int64_t * data = *dataPtr1;
int64_t
int64_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
int64_t * data = *dataPtr2;
int64_t * data = *dataPtr2;
int64_t
int64_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
free(data);
free(data)
free
free
data
data
-----joern-----
(6,30,0)
(0,23,0)
(10,20,0)
(48,36,0)
(24,31,0)
(42,0,0)
(14,18,0)
(26,4,0)
(49,5,0)
(46,7,0)
(33,0,0)
(33,1,0)
(19,14,0)
(6,35,0)
(12,7,0)
(52,17,0)
(18,17,0)
(37,46,0)
(27,17,0)
(34,18,0)
(5,7,0)
(4,27,0)
(45,17,0)
(31,17,0)
(51,2,0)
(32,14,0)
(7,15,0)
(50,14,0)
(40,11,0)
(50,18,0)
(38,46,0)
(36,23,0)
(46,37,0)
(28,31,0)
(22,27,0)
(36,27,0)
(19,20,0)
(39,2,0)
(20,17,0)
(20,11,0)
(35,6,0)
(25,1,0)
(4,23,0)
(21,47,0)
(23,0,0)
(7,17,0)
(37,27,0)
(29,23,0)
(3,19,0)
(1,33,0)
(0,33,0)
(2,23,0)
(44,27,0)
(11,20,0)
(9,15,0)
(16,50,0)
(8,35,0)
(13,37,0)
(23,27,0)
(0,42,0)
(41,17,0)
(15,7,0)
(5,36,0)
(47,1,0)
(14,19,0)
(1,47,0)
(19,20,1)
(0,42,1)
(2,23,1)
(4,26,1)
(28,24,1)
(8,2,1)
(13,31,1)
(51,23,1)
(0,33,1)
(25,29,1)
(50,14,1)
(11,40,1)
(50,16,1)
(15,9,1)
(20,11,1)
(23,0,1)
(7,15,1)
(43,50,1)
(49,4,1)
(31,28,1)
(26,2,1)
(37,46,1)
(21,25,1)
(29,37,1)
(26,6,1)
(4,23,1)
(6,35,1)
(5,7,1)
(16,14,1)
(10,7,1)
(32,36,1)
(36,23,1)
(2,39,1)
(46,7,1)
(38,13,1)
(40,10,1)
(14,19,1)
(48,5,1)
(47,21,1)
(39,51,1)
(9,12,1)
(33,1,1)
(24,20,1)
(46,38,1)
(5,49,1)
(35,8,1)
(3,32,1)
(36,48,1)
(1,47,1)
(19,3,1)
(19,20,2)
(0,33,2)
(2,23,2)
(37,46,2)
(33,1,2)
(5,7,2)
(20,11,2)
(7,15,2)
(23,0,2)
(36,23,2)
(46,7,2)
(6,2,2)
(50,14,2)
(8,2,2)
(6,35,2)
(0,42,2)
(4,23,2)
(1,47,2)
(14,19,2)
(35,2,2)
-----------------------------------
(0,(int64_t *)
(1,100*sizeof(int64_t)
(2,data == NULL)
(3,dataPtr2)
(4,free(data)
(5,*dataPtr1)
(6,exit(-1)
(7,* *dataPtr1 = &data)
(8,1)
(9,data)
(10,dataPtr2)
(11,&data)
(12,dataPtr1)
(13,data)
(14,* data = *dataPtr2)
(15,&data)
(16,data)
(17,)
(18,)
(19,*dataPtr2)
(20,* *dataPtr2 = &data)
(21,int64_t)
(22,data)
(23,data = (int64_t *)
(24,data)
(25,100)
(26,data)
(27,)
(28,NULL)
(29,data)
(30,)
(31,data = NULL)
(32,data)
(33,malloc(100*sizeof(int64_t)
(34,data)
(35,-1)
(36,*dataPtr1 = data)
(37,* data = *dataPtr1)
(38,dataPtr1)
(39,NULL)
(40,data)
(41,dataPtr1)
(42,int64_t *)
(43,RET)
(44,if (data == NULL)
(45,data)
(46,*dataPtr1)
(47,sizeof(int64_t)
(48,data)
(49,dataPtr1)
(50,free(data)
(51,data)
(52,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^