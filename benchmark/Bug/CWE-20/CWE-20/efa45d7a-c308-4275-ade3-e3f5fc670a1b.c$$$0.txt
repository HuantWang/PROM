-----label-----
1
-----code-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_execl_61b_badSource(wchar_t * data)
{
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_execl_61b_badSource(wchar_t * data){    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    return data;}
wchar_t
* CWE78_OS_Command_Injection__wchar_t_console_execl_61b_badSource(wchar_t * data)
*
CWE78_OS_Command_Injection__wchar_t_console_execl_61b_badSource
wchar_t * data
wchar_t
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
return data;
data
data
-----joern-----
(18,21,0)
(24,11,0)
(11,33,0)
(8,4,0)
(25,28,0)
(1,39,0)
(12,31,0)
(30,5,0)
(11,20,0)
(31,40,0)
(5,35,0)
(40,39,0)
(3,6,0)
(29,4,0)
(2,36,0)
(9,3,0)
(26,11,0)
(27,21,0)
(20,5,0)
(17,15,0)
(38,39,0)
(14,22,0)
(28,22,0)
(40,31,0)
(41,18,0)
(10,19,0)
(7,19,0)
(37,36,0)
(21,35,0)
(19,7,0)
(32,19,0)
(16,40,0)
(5,20,0)
(13,7,0)
(39,40,0)
(21,18,0)
(18,6,0)
(40,7,0)
(4,35,0)
(34,20,0)
(20,36,0)
(19,20,0)
(7,40,0)
(36,0,0)
(4,0,0)
(33,11,0)
(39,35,0)
(39,20,0)
(7,13,0)
(23,33,0)
(40,16,1)
(33,11,1)
(25,31,1)
(40,39,1)
(21,35,1)
(39,35,1)
(10,32,1)
(27,41,1)
(38,1,1)
(4,8,1)
(20,5,1)
(8,9,1)
(5,35,1)
(28,25,1)
(5,30,1)
(30,34,1)
(11,20,1)
(18,21,1)
(26,24,1)
(16,7,1)
(41,31,1)
(21,27,1)
(39,20,1)
(1,33,1)
(33,23,1)
(40,7,1)
(19,10,1)
(14,28,1)
(8,33,1)
(7,19,1)
(4,35,1)
(7,13,1)
(23,11,1)
(11,26,1)
(31,40,1)
(29,4,1)
(32,39,1)
(24,20,1)
(9,18,1)
(8,14,1)
(19,20,1)
(31,12,1)
(39,38,1)
(12,40,1)
(29,4,2)
(18,31,2)
(16,33,2)
(31,40,2)
(33,11,2)
(32,33,2)
(41,31,2)
(4,35,2)
(11,20,2)
(7,33,2)
(40,39,2)
(40,7,2)
(7,13,2)
(5,35,2)
(21,31,2)
(31,33,2)
(38,33,2)
(39,33,2)
(25,31,2)
(14,31,2)
(12,33,2)
(39,35,2)
(27,31,2)
(28,31,2)
(21,35,2)
(10,33,2)
(40,33,2)
(9,31,2)
(7,19,2)
(20,5,2)
(18,21,2)
(39,20,2)
(19,33,2)
(19,20,2)
(1,33,2)
-----------------------------------
(0,)
(1,data)
(2,if (100-dataLen > 1)
(3,)
(4,return data;)
(5,wcslen(data)
(6,)
(7,(int)
(8,data)
(9,\\\'\\\\0\\\')
(10,dataLen)
(11,100-dataLen)
(12,NULL)
(13,int)
(14,\\\'\\\\0\\\')
(15,)
(16,stdin)
(17,if (fgetws(data+dataLen, (int)
(18,dataLen = wcslen(data)
(19,100-dataLen)
(20,dataLen = wcslen(data)
(21,wcslen(data)
(22,)
(23,1)
(24,100)
(25,"fgetws()
(26,dataLen)
(27,data)
(28,printLine("fgetws()
(29,RET)
(30,data)
(31,fgetws(data+dataLen, (int)
(32,100)
(33,100-dataLen > 1)
(34,dataLen)
(35,wchar_t * data)
(36,)
(37,dataLen)
(38,dataLen)
(39,data+dataLen)
(40,fgetws(data+dataLen, (int)
(41,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^