-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11_bad()
{
    if(globalReturnsTrue())
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
25,27
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
52,53
54,55
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
87,88
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
-----nextToken-----
2,4,9,15,17,22,23,26,28,30,34,37,39,42,43,47,50,51,53,57,63,64,72,73,76,77,78,79,83,86,88,91,92,96,99,101,104,105
-----computeFrom-----
19,20
19,21
59,60
59,61
65,66
65,67
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11_bad(){    if(globalReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11_bad
{    if(globalReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
if(globalReturnsTrue())    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(30,32,0)
(17,2,0)
(30,24,0)
(27,12,0)
(8,13,0)
(32,1,0)
(24,29,0)
(3,7,0)
(40,27,0)
(4,26,0)
(13,32,0)
(37,34,0)
(25,2,0)
(31,5,0)
(5,18,0)
(22,12,0)
(28,8,0)
(34,36,0)
(12,27,0)
(23,32,0)
(34,2,0)
(7,30,0)
(20,22,0)
(21,22,0)
(0,32,0)
(2,30,0)
(29,24,0)
(6,7,0)
(34,37,0)
(2,34,0)
(24,30,0)
(15,11,0)
(18,5,0)
(7,8,0)
(5,31,0)
(33,12,0)
(8,28,0)
(26,30,0)
(11,5,0)
(36,34,0)
(12,22,0)
(36,32,0)
(12,32,0)
(8,7,0)
(35,38,0)
(14,26,0)
(16,24,0)
(5,11,0)
(18,32,0)
(13,8,0)
(39,11,0)
(34,37,1)
(18,5,1)
(25,17,1)
(39,15,1)
(8,28,1)
(7,30,1)
(24,16,1)
(3,30,1)
(14,19,1)
(12,22,1)
(24,29,1)
(8,7,1)
(9,19,1)
(0,12,1)
(9,36,1)
(6,3,1)
(27,40,1)
(22,20,1)
(7,6,1)
(21,13,1)
(17,18,1)
(4,14,1)
(5,11,1)
(2,30,1)
(13,8,1)
(36,34,1)
(26,4,1)
(2,25,1)
(15,0,1)
(34,2,1)
(12,27,1)
(30,24,1)
(33,22,1)
(11,39,1)
(5,31,1)
(16,26,1)
(20,21,1)
(40,33,1)
(12,19,2)
(20,19,2)
(34,37,2)
(8,7,2)
(34,19,2)
(8,28,2)
(33,19,2)
(14,19,2)
(39,19,2)
(26,19,2)
(0,19,2)
(5,19,2)
(4,19,2)
(40,19,2)
(18,5,2)
(24,19,2)
(13,8,2)
(2,30,2)
(13,19,2)
(16,19,2)
(12,27,2)
(6,19,2)
(3,19,2)
(34,2,2)
(24,29,2)
(11,19,2)
(7,30,2)
(8,19,2)
(2,19,2)
(7,19,2)
(18,19,2)
(30,19,2)
(5,11,2)
(27,19,2)
(12,22,2)
(17,19,2)
(21,19,2)
(5,31,2)
(30,24,2)
(22,19,2)
(36,34,2)
(25,19,2)
(36,19,2)
(15,19,2)
-----------------------------------
(0,'\\\\0')
(1,)
(2,structCharVoid.voidSecond)
(3,structCharVoid)
(4,voidSecond)
(5,(wchar_t *)
(6,voidSecond)
(7,structCharVoid.voidSecond)
(8,(wchar_t *)
(9,RET)
(10,\'\\\\0\')
(11,structCharVoid.charFirst)
(12,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(13,printWLine((wchar_t *)
(14,structCharVoid)
(15,structCharVoid)
(16,SRC_STR)
(17,structCharVoid)
(18,printWLine((wchar_t *)
(19,globalReturnsTrue()
(20,charFirst)
(21,structCharVoid)
(22,structCharVoid.charFirst)
(23,structCharVoid)
(24,(void *)
(25,voidSecond)
(26,structCharVoid.voidSecond)
(27,sizeof(structCharVoid)
(28,wchar_t *)
(29,void *)
(30,structCharVoid.voidSecond = (void *)
(31,wchar_t *)
(32,)
(33,SRC_STR)
(34,(wchar_t *)
(35,if(globalReturnsTrue()
(36,printWLine((wchar_t *)
(37,wchar_t *)
(38,)
(39,charFirst)
(40,structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^