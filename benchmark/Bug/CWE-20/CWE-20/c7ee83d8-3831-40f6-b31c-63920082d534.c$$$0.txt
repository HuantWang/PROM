-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,71,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
63,64
63,65
75,76
75,77
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_14_bad()
CWE190_Integer_Overflow__int_fgets_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(27,29,0)
(4,34,0)
(24,30,0)
(20,35,0)
(29,32,0)
(21,6,0)
(35,25,0)
(12,19,0)
(0,24,0)
(32,29,0)
(29,38,0)
(15,16,0)
(39,40,0)
(34,37,0)
(28,38,0)
(18,40,0)
(13,31,0)
(32,16,0)
(44,14,0)
(26,31,0)
(16,22,0)
(4,6,0)
(11,38,0)
(5,32,0)
(25,6,0)
(8,5,0)
(29,34,0)
(5,16,0)
(40,3,0)
(33,14,0)
(9,32,0)
(1,25,0)
(41,34,0)
(38,14,0)
(7,14,0)
(10,19,0)
(42,25,0)
(6,40,0)
(17,6,0)
(2,25,0)
(36,4,0)
(25,35,0)
(34,4,0)
(23,29,0)
(12,31,1)
(5,8,1)
(29,34,1)
(29,23,1)
(21,17,1)
(36,41,1)
(43,5,1)
(6,21,1)
(35,25,1)
(4,6,1)
(1,42,1)
(19,10,1)
(31,13,1)
(17,31,1)
(34,4,1)
(32,29,1)
(24,0,1)
(38,28,1)
(26,38,1)
(27,9,1)
(23,27,1)
(13,26,1)
(35,20,1)
(12,34,1)
(8,32,1)
(20,25,1)
(29,38,1)
(0,35,1)
(2,6,1)
(5,32,1)
(28,11,1)
(9,19,1)
(42,2,1)
(43,19,1)
(25,6,1)
(12,24,1)
(41,35,1)
(4,36,1)
(10,12,1)
(25,1,1)
(29,19,2)
(29,34,2)
(9,19,2)
(36,35,2)
(42,31,2)
(2,31,2)
(8,19,2)
(5,19,2)
(35,31,2)
(35,25,2)
(32,29,2)
(20,31,2)
(23,19,2)
(25,6,2)
(41,35,2)
(29,38,2)
(32,19,2)
(17,31,2)
(34,35,2)
(5,32,2)
(6,31,2)
(34,4,2)
(0,35,2)
(1,31,2)
(4,35,2)
(25,31,2)
(21,31,2)
(27,19,2)
(24,35,2)
(4,6,2)
-----------------------------------
(0,"fgets()
(1,stdin)
(2,inputBuffer)
(3,)
(4,atoi(inputBuffer)
(5,printIntLine(result)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,data)
(8,result)
(9,result)
(10,5)
(11,data)
(12,globalFive)
(13,5)
(14,)
(15,result)
(16,)
(17,inputBuffer)
(18,inputBuffer)
(19,globalFive==5)
(20,NULL)
(21,"")
(22,)
(23,data)
(24,printLine("fgets()
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,globalFive)
(27,data)
(28,0)
(29,data * data)
(30,)
(31,globalFive==5)
(32,result = data * data)
(33,if(globalFive==5)
(34,data = atoi(inputBuffer)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,inputBuffer)
(37,)
(38,data = 0)
(39,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,)
(41,data)
(42,CHAR_ARRAY_SIZE)
(43,RET)
(44,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^