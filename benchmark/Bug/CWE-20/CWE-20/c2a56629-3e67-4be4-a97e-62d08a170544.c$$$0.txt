-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wexecv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            EXECV(COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
62,63
63,64
63,65
65,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
76,77
76,78
79,80
80,81
80,82
81,82
83,84
83,85
85,86
86,87
88,89
89,90
89,91
90,91
92,93
92,94
94,95
95,96
97,98
98,99
98,100
99,100
101,102
101,103
103,104
104,105
104,106
105,106
107,108
109,110
109,111
110,111
110,112
110,113
110,114
110,115
110,116
110,117
110,118
110,119
110,120
110,121
110,122
110,123
110,124
110,125
110,126
110,127
111,112
112,113
112,114
113,114
115,116
115,117
115,118
115,119
116,117
118,119
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
132,133
133,134
133,135
133,136
133,137
134,135
136,137
137,138
140,141
141,142
142,143
144,145
145,146
145,147
146,147
146,148
147,148
150,151
152,153
153,154
153,155
154,155
154,156
155,156
155,157
156,157
160,161
162,163
163,164
163,165
164,165
164,166
165,166
168,169
168,170
169,170
171,172
173,174
173,175
174,175
174,176
175,176
175,177
175,178
175,179
176,177
178,179
180,181
180,182
181,182
181,183
182,183
184,185
186,187
187,188
189,190
190,191
191,192
193,194
195,196
197,198
197,199
198,199
198,200
199,200
199,201
199,202
200,201
202,203
204,205
206,207
208,209
210,211
211,212
211,213
212,213
214,215
214,216
214,217
214,218
215,216
217,218
219,220
221,222
223,224
223,225
224,225
224,226
225,226
227,228
229,230
231,232
232,233
232,234
233,234
235,236
235,237
235,238
235,239
235,240
236,237
238,239
240,241
240,242
241,242
241,243
243,244
245,246
246,247
246,248
247,248
249,250
251,252
251,253
252,253
253,254
253,255
256,257
257,258
257,259
258,259
258,260
260,261
264,265
264,266
265,266
265,267
266,267
266,268
267,268
269,270
271,272
271,273
272,273
275,276
277,278
278,279
278,280
279,280
279,281
280,281
282,283
282,284
283,284
285,286
285,287
286,287
288,289
289,290
289,291
293,294
294,295
294,296
295,296
297,298
297,299
297,300
298,299
300,301
303,304
303,305
304,305
306,307
307,308
308,309
308,310
309,310
310,311
313,314
314,315
314,316
315,316
317,318
317,319
317,320
318,319
320,321
323,324
323,325
324,325
326,327
327,328
328,329
328,330
329,330
330,331
334,335
334,336
335,336
335,337
336,337
338,339
340,341
341,342
342,343
342,344
343,344
345,346
347,348
347,349
348,349
348,350
349,350
351,352
353,354
354,355
355,356
355,357
356,357
358,359
360,361
361,362
361,363
362,363
363,364
365,366
367,368
367,369
368,369
369,370
369,371
371,372
371,373
371,374
374,375
375,376
376,377
378,379
378,380
379,380
380,381
380,382
382,383
382,384
382,385
382,386
386,387
387,388
387,389
387,390
387,391
388,389
390,391
392,393
394,395
396,397
397,398
397,399
397,400
398,399
400,401
402,403
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,70,72,75,77,78,82,84,87,91,93,96,100,102,106,108,114,117,119,121,123,127,129,131,135,138,139,143,148,149,151,157,158,159,161,166,167,170,172,177,179,183,185,188,192,194,196,201,203,205,207,209,213,216,218,220,222,226,228,230,234,237,239,242,244,248,250,254,255,259,261,262,263,268,270,273,274,276,281,284,287,290,291,292,296,299,301,302,305,311,312,316,319,321,322,325,331,332,333,337,339,344,346,350,352,357,359,364,366,370,372,373,377,381,383,384,385,389,391,393,395,399,401,403
-----computeFrom-----
45,46
45,47
112,113
112,114
125,126
125,127
145,146
145,147
153,154
153,155
163,164
163,165
174,175
174,176
198,199
198,200
211,212
211,213
224,225
224,226
232,233
232,234
246,247
246,248
251,252
251,253
257,258
257,259
258,259
258,260
265,266
265,267
266,267
266,268
271,272
271,273
278,279
278,280
282,283
282,284
285,286
285,287
294,295
294,296
308,309
308,310
314,315
314,316
328,329
328,330
335,336
335,337
348,349
348,350
361,362
361,363
-----guardedBy-----
337,346
350,359
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_32_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_execv_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(69,77,0)
(50,137,0)
(173,53,0)
(18,162,0)
(122,43,0)
(118,69,0)
(79,30,0)
(75,67,0)
(201,62,0)
(197,172,0)
(114,11,0)
(123,152,0)
(81,30,0)
(142,110,0)
(6,24,0)
(100,22,0)
(200,198,0)
(125,134,0)
(38,149,0)
(71,97,0)
(29,200,0)
(28,24,0)
(172,70,0)
(174,127,0)
(5,62,0)
(58,22,0)
(88,109,0)
(11,24,0)
(153,127,0)
(84,75,0)
(109,77,0)
(86,160,0)
(15,127,0)
(156,72,0)
(0,119,0)
(111,175,0)
(161,109,0)
(112,178,0)
(103,70,0)
(47,109,0)
(2,134,0)
(149,121,0)
(189,50,0)
(124,152,0)
(132,127,0)
(49,127,0)
(70,172,0)
(190,58,0)
(73,142,0)
(80,67,0)
(99,184,0)
(43,202,0)
(127,97,0)
(21,188,0)
(152,61,0)
(32,24,0)
(202,43,0)
(135,24,0)
(3,110,0)
(164,137,0)
(167,171,0)
(7,99,0)
(170,83,0)
(20,99,0)
(51,62,0)
(142,149,0)
(70,91,0)
(185,171,0)
(37,99,0)
(109,88,0)
(138,198,0)
(203,124,0)
(193,42,0)
(120,13,0)
(175,134,0)
(11,114,0)
(154,184,0)
(77,180,0)
(208,127,0)
(183,171,0)
(130,56,0)
(97,62,0)
(52,65,0)
(195,116,0)
(167,134,0)
(35,20,0)
(10,86,0)
(160,200,0)
(46,110,0)
(162,62,0)
(3,149,0)
(65,119,0)
(177,133,0)
(121,53,0)
(201,157,0)
(63,56,0)
(157,201,0)
(26,158,0)
(202,3,0)
(177,201,0)
(181,91,0)
(144,158,0)
(140,162,0)
(98,62,0)
(131,127,0)
(58,134,0)
(137,50,0)
(70,24,0)
(27,66,0)
(186,202,0)
(104,208,0)
(147,178,0)
(43,198,0)
(43,31,0)
(77,69,0)
(194,7,0)
(152,124,0)
(198,24,0)
(134,158,0)
(33,191,0)
(50,31,0)
(151,28,0)
(187,157,0)
(59,127,0)
(139,208,0)
(207,173,0)
(184,62,0)
(87,133,0)
(30,127,0)
(204,24,0)
(17,24,0)
(137,110,0)
(141,191,0)
(206,106,0)
(9,178,0)
(67,75,0)
(67,56,0)
(22,58,0)
(160,86,0)
(110,127,0)
(53,62,0)
(19,158,0)
(79,119,0)
(48,2,0)
(92,28,0)
(178,134,0)
(200,160,0)
(196,149,0)
(145,137,0)
(126,177,0)
(136,43,0)
(158,134,0)
(60,90,0)
(64,0,0)
(45,66,0)
(56,67,0)
(134,24,0)
(102,24,0)
(16,119,0)
(166,3,0)
(4,0,0)
(44,88,0)
(31,50,0)
(76,121,0)
(155,86,0)
(82,62,0)
(20,7,0)
(133,184,0)
(108,127,0)
(159,27,0)
(167,101,0)
(107,24,0)
(65,30,0)
(115,114,0)
(66,24,0)
(148,175,0)
(109,134,0)
(180,77,0)
(150,24,0)
(178,119,0)
(93,61,0)
(133,177,0)
(119,24,0)
(179,58,0)
(86,198,0)
(36,127,0)
(110,142,0)
(173,196,0)
(3,202,0)
(205,127,0)
(113,127,0)
(196,97,0)
(119,178,0)
(182,20,0)
(54,161,0)
(74,3,0)
(1,41,0)
(8,53,0)
(162,191,0)
(128,80,0)
(149,97,0)
(91,70,0)
(53,72,0)
(77,109,0)
(95,30,0)
(191,62,0)
(163,41,0)
(202,186,0)
(61,24,0)
(68,201,0)
(198,43,0)
(176,65,0)
(94,2,0)
(39,167,0)
(31,106,0)
(41,11,0)
(34,124,0)
(79,165,0)
(129,168,0)
(169,127,0)
(96,192,0)
(85,79,0)
(40,27,0)
(55,117,0)
(146,24,0)
(171,127,0)
(67,80,0)
(23,200,0)
(106,31,0)
(121,149,0)
(2,171,0)
(31,43,0)
(109,161,0)
(43,119,0)
(89,196,0)
(72,53,0)
(118,47,1)
(167,134,1)
(70,172,1)
(65,119,1)
(143,17,1)
(177,201,1)
(170,143,1)
(7,194,1)
(43,202,1)
(21,80,1)
(80,67,1)
(53,72,1)
(194,133,1)
(67,75,1)
(73,46,1)
(39,2,1)
(55,175,1)
(163,1,1)
(178,134,1)
(134,158,1)
(23,86,1)
(159,40,1)
(124,203,1)
(31,50,1)
(22,100,1)
(20,182,1)
(65,176,1)
(10,198,1)
(78,170,1)
(9,112,1)
(47,11,1)
(29,23,1)
(79,85,1)
(112,16,1)
(145,189,1)
(202,186,1)
(189,106,1)
(12,79,1)
(63,14,1)
(191,141,1)
(125,28,1)
(178,147,1)
(81,171,1)
(138,0,1)
(2,94,1)
(196,89,1)
(155,10,1)
(171,183,1)
(200,29,1)
(20,7,1)
(86,198,1)
(162,191,1)
(77,69,1)
(140,191,1)
(17,160,1)
(157,187,1)
(129,0,1)
(19,125,1)
(48,14,1)
(141,33,1)
(88,44,1)
(103,172,1)
(196,149,1)
(67,56,1)
(198,43,1)
(89,173,1)
(200,198,1)
(142,73,1)
(208,104,1)
(133,177,1)
(95,81,1)
(122,31,1)
(79,30,1)
(79,119,1)
(142,149,1)
(58,190,1)
(110,142,1)
(144,26,1)
(11,114,1)
(48,120,1)
(173,53,1)
(14,78,1)
(61,93,1)
(161,109,1)
(176,52,1)
(121,76,1)
(109,88,1)
(46,30,1)
(4,64,1)
(177,126,1)
(48,193,1)
(66,45,1)
(34,66,1)
(2,171,1)
(65,30,1)
(185,208,1)
(16,22,1)
(92,80,1)
(0,119,1)
(76,38,1)
(160,86,1)
(75,84,1)
(120,22,1)
(30,95,1)
(195,160,1)
(128,67,1)
(0,4,1)
(121,53,1)
(91,181,1)
(74,166,1)
(77,180,1)
(80,128,1)
(164,145,1)
(149,121,1)
(147,9,1)
(57,20,1)
(43,119,1)
(63,110,1)
(68,53,1)
(137,110,1)
(114,115,1)
(28,151,1)
(152,123,1)
(173,207,1)
(33,201,1)
(54,109,1)
(175,148,1)
(152,124,1)
(40,70,1)
(119,178,1)
(94,48,1)
(50,137,1)
(43,31,1)
(58,134,1)
(48,195,1)
(78,143,1)
(86,155,1)
(162,18,1)
(156,8,1)
(172,197,1)
(137,164,1)
(175,134,1)
(56,130,1)
(104,139,1)
(166,136,1)
(1,61,1)
(193,161,1)
(139,149,1)
(12,65,1)
(207,60,1)
(126,87,1)
(100,58,1)
(52,2,1)
(2,134,1)
(167,171,1)
(203,34,1)
(151,92,1)
(167,39,1)
(201,157,1)
(35,7,1)
(18,140,1)
(44,77,1)
(48,129,1)
(52,167,1)
(197,175,1)
(130,63,1)
(48,21,1)
(3,74,1)
(3,149,1)
(93,152,1)
(202,3,1)
(14,96,1)
(123,124,1)
(72,156,1)
(70,91,1)
(158,144,1)
(48,55,1)
(60,12,1)
(3,110,1)
(183,185,1)
(69,118,1)
(148,111,1)
(27,159,1)
(85,65,1)
(96,78,1)
(207,12,1)
(190,179,1)
(111,134,1)
(109,77,1)
(115,41,1)
(45,27,1)
(182,35,1)
(84,56,1)
(26,19,1)
(64,119,1)
(109,134,1)
(179,161,1)
(41,163,1)
(22,58,1)
(38,162,1)
(31,106,1)
(136,138,1)
(160,200,1)
(106,206,1)
(87,196,1)
(43,122,1)
(187,68,1)
(206,202,1)
(161,54,1)
(181,103,1)
(63,14,2)
(125,80,2)
(118,175,2)
(155,0,2)
(3,149,2)
(201,157,2)
(69,175,2)
(119,22,2)
(85,65,2)
(75,14,2)
(50,137,2)
(77,69,2)
(65,30,2)
(45,175,2)
(178,22,2)
(138,0,2)
(79,119,2)
(3,0,2)
(50,0,2)
(181,175,2)
(158,80,2)
(31,106,2)
(11,175,2)
(67,14,2)
(61,175,2)
(206,0,2)
(77,180,2)
(43,202,2)
(106,0,2)
(175,80,2)
(166,0,2)
(179,161,2)
(86,198,2)
(28,80,2)
(93,175,2)
(41,175,2)
(162,191,2)
(178,134,2)
(195,160,2)
(112,22,2)
(144,80,2)
(31,0,2)
(143,160,2)
(2,171,2)
(22,161,2)
(136,0,2)
(134,80,2)
(114,175,2)
(14,160,2)
(56,14,2)
(122,0,2)
(189,0,2)
(11,114,2)
(152,124,2)
(64,22,2)
(160,200,2)
(148,80,2)
(160,86,2)
(163,175,2)
(70,172,2)
(58,161,2)
(160,0,2)
(86,0,2)
(123,175,2)
(54,175,2)
(0,119,2)
(202,3,2)
(197,175,2)
(161,175,2)
(177,201,2)
(79,65,2)
(198,43,2)
(65,119,2)
(44,175,2)
(173,53,2)
(137,0,2)
(16,22,2)
(4,22,2)
(129,0,2)
(31,50,2)
(34,175,2)
(9,22,2)
(167,171,2)
(55,175,2)
(10,0,2)
(3,110,2)
(193,161,2)
(91,175,2)
(0,22,2)
(79,30,2)
(80,14,2)
(20,7,2)
(17,160,2)
(172,175,2)
(1,175,2)
(96,78,2)
(115,175,2)
(200,198,2)
(111,80,2)
(47,175,2)
(130,14,2)
(80,67,2)
(70,91,2)
(175,134,2)
(43,0,2)
(67,56,2)
(100,161,2)
(167,2,2)
(43,31,2)
(161,109,2)
(110,142,2)
(53,72,2)
(124,175,2)
(198,0,2)
(78,160,2)
(66,175,2)
(77,175,2)
(137,110,2)
(202,0,2)
(164,0,2)
(74,0,2)
(203,175,2)
(109,134,2)
(152,175,2)
(142,149,2)
(39,2,2)
(21,80,2)
(88,175,2)
(145,0,2)
(196,149,2)
(109,88,2)
(109,77,2)
(92,80,2)
(202,186,2)
(43,119,2)
(167,134,2)
(67,75,2)
(159,175,2)
(103,175,2)
(26,80,2)
(120,22,2)
(60,12,2)
(200,86,2)
(84,14,2)
(19,80,2)
(190,161,2)
(23,86,2)
(128,14,2)
(109,175,2)
(151,80,2)
(170,143,2)
(2,134,2)
(22,58,2)
(119,178,2)
(58,134,2)
(147,22,2)
(133,177,2)
(149,121,2)
(121,53,2)
(134,158,2)
(70,175,2)
(27,175,2)
(29,86,2)
(40,175,2)
-----------------------------------
(0,acceptSocket == SOCKET_ERROR)
(1,service)
(2,listenSocket != INVALID_SOCKET)
(3,data + dataLen)
(4,SOCKET_ERROR)
(5,data)
(6,if (listenSocket == INVALID_SOCKET)
(7,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(8,dataPtr1)
(9,NULL)
(10,recvResult)
(11,service.sin_port = htons(TCP_PORT)
(12,wsaDataInit)
(13,)
(14,0)
(15,replace)
(16,acceptSocket)
(17,'\\\\0')
(18,dataBuffer)
(19,AF_INET)
(20,EXECV(COMMAND_INT_PATH, args)
(21,break;)
(22,listen(listenSocket, LISTEN_BACKLOG)
(23,recvResult)
(24,)
(25,\'\\\\0\')
(26,SOCK_STREAM)
(27,service.sin_family)
(28,wsaDataInit = 1)
(29,0)
(30,acceptSocket = INVALID_SOCKET)
(31,sizeof(wchar_t)
(32,if (listen(listenSocket, LISTEN_BACKLOG)
(33,dataBuffer)
(34,service)
(35,COMMAND_INT_PATH)
(36,dataLen)
(37,args)
(38,data)
(39,listenSocket)
(40,service)
(41,service.sin_port)
(42,)
(43,recv(acceptSocket, (char *)
(44,service)
(45,AF_INET)
(46,dataLen)
(47,listenSocket)
(48,listenSocket)
(49,do)
(50,100 - dataLen - 1)
(51,dataBuffer)
(52,acceptSocket)
(53,* *dataPtr1 = &data)
(54,SOCKET_ERROR)
(55,break;)
(56,MAKEWORD(2,2)
(57,RET)
(58,listen(listenSocket, LISTEN_BACKLOG)
(59,wsaData)
(60,WSACleanup()
(61,service.sin_addr.s_addr = INADDR_ANY)
(62,)
(63,2)
(64,acceptSocket)
(65,acceptSocket != INVALID_SOCKET)
(66,service.sin_family = AF_INET)
(67,WSAStartup(MAKEWORD(2,2)
(68,dataPtr2)
(69,&service)
(70,memset(&service, 0, sizeof(service)
(71,data)
(72,&data)
(73,data)
(74,dataLen)
(75,&wsaData)
(76,dataPtr1)
(77,(struct sockaddr*)
(78,replace)
(79,CLOSE_SOCKET(acceptSocket)
(80,WSAStartup(MAKEWORD(2,2)
(81,acceptSocket)
(82,dataPtr1)
(83,)
(84,wsaData)
(85,acceptSocket)
(86,recvResult == SOCKET_ERROR)
(87,data)
(88,sizeof(service)
(89,data)
(90,)
(91,sizeof(service)
(92,wsaDataInit)
(93,INADDR_ANY)
(94,INVALID_SOCKET)
(95,INVALID_SOCKET)
(96,\'\\\\0\')
(97,)
(98,dataPtr2)
(99,)
(100,SOCKET_ERROR)
(101,)
(102,if (replace)
(103,0)
(104,0)
(105,'\\\\0')
(106,sizeof(wchar_t)
(107,if (replace)
(108,listenSocket)
(109,bind(listenSocket, (struct sockaddr*)
(110,dataLen = wcslen(data)
(111,listenSocket)
(112,listenSocket)
(113,recvResult)
(114,htons(TCP_PORT)
(115,TCP_PORT)
(116,)
(117,)
(118,service)
(119,acceptSocket = accept(listenSocket, NULL, NULL)
(120,break;)
(121,*dataPtr1)
(122,0)
(123,s_addr)
(124,service.sin_addr)
(125,listenSocket)
(126,dataPtr2)
(127,)
(128,NO_ERROR)
(129,break;)
(130,2)
(131,if (wsaDataInit)
(132,service)
(133,* data = *dataPtr2)
(134,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(135,if (bind(listenSocket, (struct sockaddr*)
(136,acceptSocket)
(137,dataLen - 1)
(138,recvResult)
(139,wsaDataInit)
(140,data)
(141,COMMAND_ARG2)
(142,wcslen(data)
(143,replace)
(144,IPPROTO_TCP)
(145,dataLen)
(146,if (recvResult == SOCKET_ERROR || recvResult == 0)
(147,NULL)
(148,INVALID_SOCKET)
(149,* data = *dataPtr1)
(150,if (WSAStartup(MAKEWORD(2,2)
(151,1)
(152,service.sin_addr.s_addr)
(153,acceptSocket)
(154,data)
(155,SOCKET_ERROR)
(156,data)
(157,&data)
(158,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(159,sin_family)
(160,recvResult == SOCKET_ERROR || recvResult == 0)
(161,bind(listenSocket, (struct sockaddr*)
(162,data = dataBuffer)
(163,sin_port)
(164,1)
(165,)
(166,data)
(167,CLOSE_SOCKET(listenSocket)
(168,)
(169,wsaDataInit)
(170,\'\\\\0\')
(171,listenSocket = INVALID_SOCKET)
(172,&service)
(173,*dataPtr1)
(174,if (listenSocket != INVALID_SOCKET)
(175,listenSocket == INVALID_SOCKET)
(176,INVALID_SOCKET)
(177,*dataPtr2)
(178,accept(listenSocket, NULL, NULL)
(179,listenSocket)
(180,struct sockaddr*)
(181,service)
(182,args)
(183,INVALID_SOCKET)
(184,)
(185,listenSocket)
(186,char *)
(187,data)
(188,)
(189,100)
(190,LISTEN_BACKLOG)
(191,dataBuffer[100] = COMMAND_ARG2)
(192,)
(193,break;)
(194,args)
(195,break;)
(196,*dataPtr1 = data)
(197,service)
(198,recvResult = recv(acceptSocket, (char *)
(199,'\\\\0')
(200,recvResult == 0)
(201,* *dataPtr2 = &data)
(202,(char *)
(203,sin_addr)
(204,if (acceptSocket == SOCKET_ERROR)
(205,if (acceptSocket != INVALID_SOCKET)
(206,wchar_t)
(207,dataPtr1)
(208,wsaDataInit = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^