-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21_bad()
{
    char * data;
    data = NULL;
    badStatic = 1; /* true */
    data = badSource(data);
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
41,44
41,45
42,43
44,45
47,48
47,49
50,51
51,52
51,53
52,53
52,54
53,54
55,56
55,57
59,60
60,61
60,62
60,63
61,62
63,64
65,66
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,26,29,31,35,37,39,43,45,46,48,49,54,56,57,58,62,64,66,70,72,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
47,48
47,49
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21_bad(){    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21_bad
{    char * data;    data = NULL;    badStatic = 1; /* true */    data = badSource(data);    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strcpy(data, source);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(28,25,0)
(29,8,0)
(24,23,0)
(34,2,0)
(0,9,0)
(7,3,0)
(8,9,0)
(30,2,0)
(7,23,0)
(15,22,0)
(2,9,0)
(18,8,0)
(1,25,0)
(12,7,0)
(22,8,0)
(33,3,0)
(31,3,0)
(6,23,0)
(23,9,0)
(4,7,0)
(22,23,0)
(5,8,0)
(25,23,0)
(3,7,0)
(21,14,0)
(19,17,0)
(8,29,0)
(1,17,0)
(16,22,0)
(20,1,0)
(6,8,0)
(29,2,0)
(26,17,0)
(32,18,0)
(14,9,0)
(18,23,0)
(35,6,0)
(17,1,0)
(10,29,0)
(27,14,0)
(21,2,1)
(4,12,1)
(29,10,1)
(32,6,1)
(6,35,1)
(13,18,1)
(6,8,1)
(19,26,1)
(29,2,1)
(20,7,1)
(33,31,1)
(22,8,1)
(25,28,1)
(7,3,1)
(3,33,1)
(12,8,1)
(35,22,1)
(31,4,1)
(14,27,1)
(16,25,1)
(22,15,1)
(34,30,1)
(17,19,1)
(1,17,1)
(8,29,1)
(2,34,1)
(10,5,1)
(28,1,1)
(18,8,1)
(27,21,1)
(18,32,1)
(5,14,1)
(15,16,1)
(26,20,1)
(7,3,2)
(29,2,2)
(8,29,2)
(18,8,2)
(1,17,2)
(6,8,2)
(22,8,2)
-----------------------------------
(0,data)
(1,source[100-1])
(2,data = NULL)
(3,100-1)
(4,'C')
(5,data)
(6,printLine(data)
(7,memset(source, 'C', 100-1)
(8,data = badSource(data)
(9,)
(10,data)
(11,memset(source, \'C\', 100-1)
(12,source)
(13,RET)
(14,badStatic = 1)
(15,source)
(16,data)
(17,100-1)
(18,free(data)
(19,1)
(20,source)
(21,badStatic)
(22,strcpy(data, source)
(23,)
(24,source)
(25,source[100-1] = '\\\\0')
(26,100)
(27,1)
(28,'\\\\0')
(29,badSource(data)
(30,data)
(31,100)
(32,data)
(33,1)
(34,NULL)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^