-----label-----
1
-----code-----
static char * helperBad(char * aString)
{
    size_t i = 0;
    size_t j;
    char * reversedString = NULL;
    if (aString != NULL)
    {
        i = strlen(aString);
        reversedString = (char *) malloc(i+1);
        if (reversedString == NULL) {exit(-1);}
        for (j = 0; j < i; j++)
        {
            reversedString[j] = aString[i-j-1];
        }
        reversedString[i] = '\0';
        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */
        free(reversedString);
        return reversedString;
    }
    else
    {
        return NULL;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
91,92
92,93
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
105,107
106,107
106,108
107,108
109,110
112,113
113,114
113,115
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
124,125
126,127
127,128
129,130
130,131
131,132
-----nextToken-----
2,4,5,7,9,10,15,17,19,23,25,28,30,31,34,38,40,45,48,50,54,57,59,62,65,66,70,72,77,79,84,85,88,90,93,99,101,104,108,110,111,116,118,119,123,125,128,132
-----computeFrom-----
36,37
36,38
43,44
43,45
52,53
52,54
63,64
63,65
68,69
68,70
82,83
82,84
86,87
86,88
96,97
96,98
105,106
105,107
106,107
106,108
113,114
113,115
-----guardedBy-----
40,72
38,104
-----guardedByNegation-----
40,132
-----lastLexicalUse-----
40,132
-----jump-----
40,132
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * helperBad(char * aString){    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
static char
* helperBad(char * aString)
*
helperBad
char * aString
char
* aString
*
aString
{    size_t i = 0;    size_t j;    char * reversedString = NULL;    if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }}
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
size_t j;
size_t j;
size_t
size_t
j
j
char * reversedString = NULL;
char * reversedString = NULL;
char
* reversedString = NULL
*
reversedString
= NULL
NULL
NULL
if (aString != NULL)    {        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }    else    {        return NULL;    }
aString != NULL
aString
aString
NULL
NULL
{        i = strlen(aString);        reversedString = (char *) malloc(i+1);        if (reversedString == NULL) {exit(-1);}        for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }        reversedString[i] = '\0';        /* FLAW: Freeing a memory block and then returning a pointer to the freed memory */        free(reversedString);        return reversedString;    }
i = strlen(aString);
i = strlen(aString)
i
i
strlen(aString)
strlen
strlen
aString
aString
reversedString = (char *) malloc(i+1);
reversedString = (char *) malloc(i+1)
reversedString
reversedString
(char *) malloc(i+1)
char *
char
*
*
malloc(i+1)
malloc
malloc
i+1
i
i
1
if (reversedString == NULL) {exit(-1);}
reversedString == NULL
reversedString
reversedString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (j = 0; j < i; j++)        {            reversedString[j] = aString[i-j-1];        }
j = 0;
j = 0
j
j
0
j < i
j
j
i
i
j++
j
j
{            reversedString[j] = aString[i-j-1];        }
reversedString[j] = aString[i-j-1];
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
reversedString
j
j
aString[i-j-1]
aString
aString
i-j-1
i-j
i
i
j
j
1
reversedString[i] = '\0';
reversedString[i] = '\0'
reversedString[i]
reversedString
reversedString
i
i
'\0'
free(reversedString);
free(reversedString)
free
free
reversedString
reversedString
return reversedString;
reversedString
reversedString
{        return NULL;    }
return NULL;
NULL
NULL
-----joern-----
(40,3,0)
(0,54,0)
(27,4,0)
(58,7,0)
(58,20,0)
(56,47,0)
(57,3,0)
(30,45,0)
(21,63,0)
(47,60,0)
(50,20,0)
(13,36,0)
(16,68,0)
(2,37,0)
(39,60,0)
(24,19,0)
(64,34,0)
(14,16,0)
(9,3,0)
(37,15,0)
(51,17,0)
(28,11,0)
(19,3,0)
(37,2,0)
(28,52,0)
(26,71,0)
(20,58,0)
(65,41,0)
(7,58,0)
(17,71,0)
(62,71,0)
(20,57,0)
(13,2,0)
(46,36,0)
(43,47,0)
(44,54,0)
(23,36,0)
(69,12,0)
(67,17,0)
(54,68,0)
(41,30,0)
(17,37,0)
(31,52,0)
(36,71,0)
(1,63,0)
(5,12,0)
(35,2,0)
(70,11,0)
(12,38,0)
(16,38,0)
(52,57,0)
(63,57,0)
(68,16,0)
(59,4,0)
(33,55,0)
(13,68,0)
(4,60,0)
(19,57,0)
(52,3,0)
(34,71,0)
(25,7,0)
(55,71,0)
(29,68,0)
(17,57,0)
(2,13,0)
(49,13,0)
(2,38,0)
(36,13,0)
(57,20,0)
(18,60,0)
(8,3,0)
(68,3,0)
(11,32,0)
(6,60,0)
(10,34,0)
(53,60,0)
(54,57,0)
(7,68,0)
(42,40,0)
(34,68,0)
(22,7,0)
(61,57,0)
(20,50,0)
(54,40,0)
(30,41,0)
(13,36,1)
(49,35,1)
(36,23,1)
(51,34,1)
(54,68,1)
(52,31,1)
(17,67,1)
(30,41,1)
(4,59,1)
(26,62,1)
(21,57,1)
(61,68,1)
(58,7,1)
(43,56,1)
(71,26,1)
(54,57,1)
(34,10,1)
(1,21,1)
(20,58,1)
(10,64,1)
(59,27,1)
(2,13,1)
(17,71,1)
(28,11,1)
(7,68,1)
(69,5,1)
(67,51,1)
(0,34,1)
(42,54,1)
(34,68,1)
(55,33,1)
(19,24,1)
(40,42,1)
(2,38,1)
(52,57,1)
(54,44,1)
(64,55,1)
(44,0,1)
(7,25,1)
(41,65,1)
(12,69,1)
(56,4,1)
(13,68,1)
(14,29,1)
(16,14,1)
(28,52,1)
(46,49,1)
(29,12,1)
(24,40,1)
(37,2,1)
(20,50,1)
(47,43,1)
(64,71,1)
(16,38,1)
(62,30,1)
(36,71,1)
(31,19,1)
(63,1,1)
(11,70,1)
(62,63,1)
(5,47,1)
(55,71,1)
(12,38,1)
(70,12,1)
(22,61,1)
(25,22,1)
(57,20,1)
(34,71,1)
(33,37,1)
(23,46,1)
(19,57,1)
(35,17,1)
(65,63,1)
(68,16,1)
(63,57,1)
(17,57,1)
(23,34,2)
(1,12,2)
(57,20,2)
(51,34,2)
(34,34,2)
(17,34,2)
(40,12,2)
(19,12,2)
(68,16,2)
(13,34,2)
(29,12,2)
(7,12,2)
(52,57,2)
(30,63,2)
(34,71,2)
(34,68,2)
(55,34,2)
(42,12,2)
(17,71,2)
(52,12,2)
(37,2,2)
(64,12,2)
(0,12,2)
(22,12,2)
(31,12,2)
(54,68,2)
(21,12,2)
(7,68,2)
(65,63,2)
(57,12,2)
(16,12,2)
(24,12,2)
(17,57,2)
(61,12,2)
(13,68,2)
(54,12,2)
(36,71,2)
(2,13,2)
(20,12,2)
(62,12,2)
(71,12,2)
(68,12,2)
(41,63,2)
(55,71,2)
(28,11,2)
(28,52,2)
(44,12,2)
(70,12,2)
(13,36,2)
(63,12,2)
(26,12,2)
(25,12,2)
(67,34,2)
(35,34,2)
(12,38,2)
(63,57,2)
(58,12,2)
(58,7,2)
(49,34,2)
(2,34,2)
(36,34,2)
(64,34,2)
(33,34,2)
(11,12,2)
(37,34,2)
(10,12,2)
(14,12,2)
(30,41,2)
(34,12,2)
(10,34,2)
(16,38,2)
(2,38,2)
(20,58,2)
(46,34,2)
(54,57,2)
(20,50,2)
(19,57,2)
-----------------------------------
(0,reversedString)
(1,NULL)
(2,aString[i-j-1])
(3,)
(4,i = 0)
(5,aString)
(6,i)
(7,i+1)
(8,if (reversedString == NULL)
(9,for (j = 0; j < i; j++)
(10,i)
(11,return NULL;)
(12,aString != NULL)
(13,i-j-1)
(14,aString)
(15,)
(16,strlen(aString)
(17,reversedString[j])
(18,reversedString)
(19,free(reversedString)
(20,(char *)
(21,reversedString)
(22,i)
(23,1)
(24,reversedString)
(25,1)
(26,0)
(27,i)
(28,RET)
(29,i)
(30,exit(-1)
(31,reversedString)
(32,)
(33,j)
(34,j < i)
(35,aString)
(36,j-1)
(37,reversedString[j] = aString[i-j-1])
(38,char * aString)
(39,j)
(40,reversedString[i] = '\\\\0')
(41,-1)
(42,'\\\\0')
(43,NULL)
(44,i)
(45,)
(46,j)
(47,* reversedString = NULL)
(48,reversedString[i] = \'\\\\0\')
(49,i)
(50,char *)
(51,reversedString)
(52,return reversedString;)
(53,if (aString != NULL)
(54,reversedString[i])
(55,j++)
(56,reversedString)
(57,reversedString = (char *)
(58,malloc(i+1)
(59,0)
(60,)
(61,reversedString)
(62,j)
(63,reversedString == NULL)
(64,j)
(65,1)
(66,\'\\\\0\')
(67,j)
(68,i = strlen(aString)
(69,NULL)
(70,NULL)
(71,j = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^