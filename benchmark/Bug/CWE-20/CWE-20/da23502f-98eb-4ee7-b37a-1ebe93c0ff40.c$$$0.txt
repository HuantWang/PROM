-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * * dataPtr = (char * *)dataVoidPtr;
    /* dereference dataPtr into data */
    char * data = (*dataPtr);
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
42,46
46,47
47,48
47,49
47,50
47,51
48,49
50,51
52,53
54,55
56,57
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,41,43,44,45,49,51,53,55,59,61,63,65
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_64b_badSink(void * dataVoidPtr)
CWE78_OS_Command_Injection__char_connect_socket_w32_spawnv_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * * dataPtr = (char * *)dataVoidPtr;
char * * dataPtr = (char * *)dataVoidPtr;
char
* * dataPtr = (char * *)dataVoidPtr
*
*
dataPtr
= (char * *)dataVoidPtr
(char * *)dataVoidPtr
char * *
char
* *
*
*
dataVoidPtr
dataVoidPtr
char * data = (*dataPtr);
char * data = (*dataPtr);
char
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(14,20,0)
(2,9,0)
(21,9,0)
(20,17,0)
(17,7,0)
(2,8,0)
(0,13,0)
(10,20,0)
(0,5,0)
(13,0,0)
(4,0,0)
(15,6,0)
(12,20,0)
(18,9,0)
(0,6,0)
(1,2,0)
(20,7,0)
(6,9,0)
(7,9,0)
(11,7,0)
(6,0,0)
(8,2,0)
(8,6,0)
(16,8,0)
(3,17,0)
(4,15,1)
(1,6,1)
(0,13,1)
(17,3,1)
(14,12,1)
(6,0,1)
(12,17,1)
(19,20,1)
(2,8,1)
(8,6,1)
(0,4,1)
(8,16,1)
(20,17,1)
(3,2,1)
(10,14,1)
(20,10,1)
(16,1,1)
(0,5,1)
(0,5,2)
(8,6,2)
(6,0,2)
(2,8,2)
(0,13,2)
(20,17,2)
-----------------------------------
(0,(char * *)
(1,data)
(2,* data = (*dataPtr)
(3,args)
(4,dataVoidPtr)
(5,void * dataVoidPtr)
(6,* * dataPtr = (char * *)
(7,)
(8,*dataPtr)
(9,)
(10,args)
(11,args)
(12,_P_WAIT)
(13,char * *)
(14,COMMAND_INT_PATH)
(15,dataPtr)
(16,dataPtr)
(17,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(18,data)
(19,RET)
(20,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(21,dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^