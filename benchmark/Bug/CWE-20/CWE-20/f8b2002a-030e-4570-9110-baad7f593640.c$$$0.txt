-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
22,23
24,25
24,26
24,27
25,26
26,27
26,28
27,28
29,30
29,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
50,51
50,52
50,53
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,9,11,15,16,20,23,28,30,33,37,39,42,46,48,49,53,56,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
13,14
13,15
18,19
18,20
51,52
51,53
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
58,99
53,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad(){    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_31_bad
{    size_t data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = rand();
data = rand()
data
data
rand()
rand
rand
{        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(44,15,0)
(33,51,0)
(31,12,0)
(44,21,0)
(26,51,0)
(17,26,0)
(45,28,0)
(2,17,0)
(30,8,0)
(12,4,0)
(11,9,0)
(41,26,0)
(48,0,0)
(17,8,0)
(19,3,0)
(24,21,0)
(52,31,0)
(9,49,0)
(9,17,0)
(16,21,0)
(13,44,0)
(29,36,0)
(34,11,0)
(49,38,0)
(39,8,0)
(42,36,0)
(3,14,0)
(43,5,0)
(49,9,0)
(27,14,0)
(32,44,0)
(12,31,0)
(38,49,0)
(0,10,0)
(14,17,0)
(5,21,0)
(35,24,0)
(8,10,0)
(22,7,0)
(51,10,0)
(20,15,0)
(50,9,0)
(5,15,0)
(40,26,0)
(47,0,0)
(26,8,0)
(51,46,0)
(38,6,0)
(21,38,0)
(38,21,0)
(9,11,0)
(37,10,0)
(28,21,0)
(46,51,0)
(14,3,0)
(36,8,0)
(6,38,0)
(21,15,0)
(24,15,0)
(18,28,0)
(25,17,0)
(7,1,0)
(24,21,1)
(5,43,1)
(45,18,1)
(3,19,1)
(32,28,1)
(44,13,1)
(5,21,1)
(9,17,1)
(18,21,1)
(33,0,1)
(11,34,1)
(13,32,1)
(24,35,1)
(32,12,1)
(28,21,1)
(12,31,1)
(52,28,1)
(25,26,1)
(17,26,1)
(23,7,1)
(44,21,1)
(22,14,1)
(26,40,1)
(9,11,1)
(38,6,1)
(50,16,1)
(14,3,1)
(46,33,1)
(34,50,1)
(41,51,1)
(14,17,1)
(27,17,1)
(49,9,1)
(16,14,1)
(38,49,1)
(0,48,1)
(17,2,1)
(2,25,1)
(19,27,1)
(48,47,1)
(21,38,1)
(23,5,1)
(43,24,1)
(28,45,1)
(26,51,1)
(51,46,1)
(40,41,1)
(7,22,1)
(35,44,1)
(31,52,1)
(44,14,2)
(7,14,2)
(49,9,2)
(32,14,2)
(5,21,2)
(14,17,2)
(35,14,2)
(38,14,2)
(9,11,2)
(24,14,2)
(26,51,2)
(18,14,2)
(38,6,2)
(45,14,2)
(11,14,2)
(17,26,2)
(49,14,2)
(21,38,2)
(38,49,2)
(51,46,2)
(9,17,2)
(44,21,2)
(22,14,2)
(9,14,2)
(24,21,2)
(12,28,2)
(13,14,2)
(43,14,2)
(16,14,2)
(21,14,2)
(31,28,2)
(14,3,2)
(28,21,2)
(12,31,2)
(34,14,2)
(5,14,2)
(50,14,2)
(52,28,2)
(28,14,2)
-----------------------------------
(0,data = 0)
(1,)
(2,dataCopy)
(3,strlen(HELLO_STRING)
(4,)
(5,free(myString)
(6,char *)
(7,printLine("Input is less than the length of the source string")
(8,)
(9,data*sizeof(char)
(10,)
(11,sizeof(char)
(12,exit(-1)
(13,HELLO_STRING)
(14,data > strlen(HELLO_STRING)
(15,)
(16,myString)
(17,data = dataCopy)
(18,myString)
(19,HELLO_STRING)
(20,if (myString == NULL)
(21,myString = (char *)
(22,"Input is less than the length of the source string")
(23,RET)
(24,printLine(myString)
(25,data)
(26,dataCopy = data)
(27,data)
(28,myString == NULL)
(29,myString)
(30,data)
(31,-1)
(32,myString)
(33,data)
(34,char)
(35,myString)
(36,)
(37,data)
(38,(char *)
(39,dataCopy)
(40,data)
(41,dataCopy)
(42,if (data > strlen(HELLO_STRING)
(43,myString)
(44,strcpy(myString, HELLO_STRING)
(45,NULL)
(46,rand()
(47,data)
(48,0)
(49,malloc(data*sizeof(char)
(50,data)
(51,data = rand()
(52,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^