-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_06_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
    }
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(twoIntsStruct));
        printStructLine(&data[0]);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
46,47
46,48
48,49
50,51
50,52
51,52
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
67,68
68,69
70,71
70,72
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
87,88
91,92
92,93
92,94
92,95
92,96
93,94
95,96
97,98
99,100
99,101
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,32,33,38,40,45,47,49,54,56,61,62,65,66,69,76,78,79,80,86,88,89,90,94,96,98,100,104,105,109,113,114
-----computeFrom-----
30,31
30,32
36,37
36,38
59,60
59,61
63,64
63,65
72,73
72,74
82,83
82,84
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_06_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_06_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_06_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(twoIntsStruct));        printStructLine(&data[0]);    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memcpy(data, source, 100*sizeof(twoIntsStruct));
memcpy(data, source, 100*sizeof(twoIntsStruct))
memcpy
memcpy
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(44,11,0)
(3,51,0)
(38,3,0)
(21,19,0)
(34,45,0)
(26,40,0)
(11,40,0)
(13,19,0)
(17,42,0)
(5,11,0)
(41,37,0)
(0,51,0)
(50,20,0)
(1,49,0)
(51,49,0)
(32,6,0)
(20,50,0)
(7,26,0)
(30,26,0)
(28,20,0)
(37,35,0)
(33,5,0)
(23,19,0)
(28,49,0)
(8,45,0)
(51,3,0)
(51,35,0)
(18,6,0)
(30,23,0)
(42,3,0)
(20,28,0)
(31,33,0)
(23,30,0)
(15,35,0)
(46,25,0)
(50,35,0)
(14,43,0)
(10,5,0)
(36,23,0)
(27,28,0)
(3,42,0)
(39,23,0)
(52,45,0)
(16,37,0)
(43,19,0)
(48,25,0)
(29,51,0)
(33,19,0)
(5,33,0)
(6,19,0)
(35,45,0)
(2,30,0)
(9,49,0)
(49,12,0)
(4,28,0)
(24,45,0)
(47,33,0)
(10,33,1)
(29,6,1)
(28,49,1)
(33,47,1)
(23,19,1)
(30,23,1)
(25,46,1)
(0,29,1)
(7,30,1)
(38,0,1)
(44,5,1)
(20,28,1)
(19,21,1)
(13,25,1)
(18,32,1)
(13,49,1)
(3,42,1)
(46,48,1)
(32,43,1)
(5,33,1)
(23,39,1)
(27,51,1)
(22,50,1)
(21,13,1)
(49,9,1)
(50,20,1)
(51,49,1)
(28,4,1)
(43,19,1)
(39,36,1)
(9,1,1)
(43,14,1)
(1,25,1)
(30,2,1)
(31,6,1)
(33,19,1)
(5,10,1)
(42,17,1)
(2,23,1)
(4,27,1)
(26,7,1)
(17,38,1)
(36,11,1)
(51,3,1)
(11,44,1)
(32,19,1)
(14,26,1)
(47,31,1)
(6,18,1)
(6,19,1)
(44,6,2)
(3,42,2)
(33,19,2)
(7,6,2)
(2,6,2)
(23,6,2)
(33,6,2)
(11,6,2)
(10,6,2)
(23,19,2)
(5,6,2)
(6,6,2)
(6,19,2)
(47,6,2)
(51,3,2)
(39,6,2)
(51,49,2)
(43,6,2)
(31,6,2)
(49,25,2)
(30,23,2)
(30,6,2)
(9,25,2)
(43,19,2)
(20,28,2)
(14,6,2)
(32,6,2)
(26,6,2)
(36,6,2)
(50,20,2)
(5,33,2)
(1,25,2)
(28,49,2)
(18,6,2)
-----------------------------------
(0,source)
(1,data)
(2,intTwo)
(3,100*sizeof(twoIntsStruct)
(4,0)
(5,source[i].intOne)
(6,i < 100)
(7,0)
(8,data)
(9,dataBadBuffer)
(10,intOne)
(11,source[i].intOne = 0)
(12,)
(13,i)
(14,i)
(15,source)
(16,i)
(17,twoIntsStruct)
(18,100)
(19,i = 0)
(20,&data[0])
(21,0)
(22,RET)
(23,source[i])
(24,dataGoodBuffer)
(25,STATIC_CONST_FIVE==5)
(26,source[i].intTwo = 0)
(27,data)
(28,data[0])
(29,data)
(30,source[i].intTwo)
(31,source)
(32,i)
(33,source[i])
(34,if(STATIC_CONST_FIVE==5)
(35,)
(36,source)
(37,)
(38,100)
(39,i)
(40,)
(41,for (i = 0; i < 100; i++)
(42,sizeof(twoIntsStruct)
(43,i++)
(44,0)
(45,)
(46,5)
(47,i)
(48,STATIC_CONST_FIVE)
(49,data = dataBadBuffer)
(50,printStructLine(&data[0])
(51,memcpy(data, source, 100*sizeof(twoIntsStruct)
(52,dataBadBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^