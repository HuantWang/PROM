-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
62,63
62,64
62,65
62,66
63,64
64,65
64,66
66,67
66,68
66,69
68,69
70,71
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
81,83
83,84
84,85
84,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,54,55,59,60,61,65,67,69,72,76,78,80,82,85,86,90,93,94,98,100
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(23,43,0)
(28,46,0)
(31,6,0)
(17,1,0)
(38,25,0)
(0,14,0)
(34,46,0)
(48,0,0)
(4,31,0)
(11,39,0)
(43,23,0)
(24,39,0)
(6,31,0)
(13,7,0)
(47,46,0)
(6,1,0)
(10,25,0)
(41,12,0)
(37,14,0)
(15,39,0)
(14,12,0)
(35,39,0)
(40,14,0)
(0,26,0)
(12,41,0)
(44,40,0)
(29,39,0)
(21,0,0)
(42,12,0)
(1,14,0)
(12,42,0)
(42,10,0)
(40,7,0)
(0,47,0)
(25,10,0)
(2,10,0)
(40,47,0)
(7,46,0)
(26,7,0)
(33,13,0)
(8,19,0)
(3,7,0)
(1,7,0)
(45,47,0)
(1,6,0)
(26,0,0)
(18,6,0)
(20,19,0)
(12,14,0)
(22,39,0)
(1,47,0)
(14,39,0)
(19,14,0)
(9,24,0)
(10,42,0)
(43,5,0)
(1,13,0)
(16,1,0)
(36,23,0)
(32,47,0)
(15,19,1)
(43,23,1)
(19,8,1)
(1,14,1)
(16,13,1)
(1,47,1)
(12,42,1)
(47,32,1)
(14,12,1)
(27,47,1)
(25,38,1)
(33,15,1)
(8,20,1)
(26,0,1)
(18,17,1)
(9,27,1)
(37,27,1)
(6,31,1)
(1,6,1)
(15,43,1)
(38,2,1)
(4,18,1)
(31,4,1)
(35,24,1)
(33,35,1)
(10,25,1)
(32,45,1)
(24,9,1)
(12,41,1)
(13,33,1)
(2,37,1)
(42,10,1)
(0,47,1)
(40,44,1)
(0,14,1)
(40,14,1)
(48,21,1)
(23,36,1)
(30,40,1)
(1,13,1)
(36,19,1)
(0,48,1)
(40,47,1)
(19,14,1)
(17,16,1)
(21,1,1)
(44,26,1)
(20,14,1)
(8,27,2)
(12,41,2)
(15,27,2)
(1,14,2)
(14,12,2)
(35,27,2)
(19,27,2)
(40,47,2)
(40,14,2)
(0,47,2)
(19,14,2)
(43,23,2)
(10,25,2)
(0,14,2)
(23,19,2)
(43,19,2)
(1,13,2)
(25,27,2)
(37,27,2)
(42,10,2)
(1,47,2)
(1,6,2)
(9,27,2)
(36,19,2)
(24,27,2)
(6,31,2)
(10,27,2)
(26,0,2)
(2,27,2)
(20,27,2)
(12,27,2)
(14,27,2)
(42,27,2)
(38,27,2)
(12,42,2)
-----------------------------------
(0,data[0])
(1,memmove(data, source, 100*sizeof(int)
(2,50)
(3,source)
(4,int)
(5,)
(6,100*sizeof(int)
(7,)
(8,NULL)
(9,"Benign, fixed string")
(10,50*sizeof(int)
(11,default:)
(12,(int *)
(13,source[100] = {0})
(14,data = (int *)
(15,break;)
(16,data)
(17,source)
(18,100)
(19,data == NULL)
(20,data)
(21,data)
(22,if (data == NULL)
(23,-1)
(24,printLine("Benign, fixed string")
(25,sizeof(int)
(26,printIntLine(data[0])
(27,6)
(28,data)
(29,case 6:)
(30,RET)
(31,sizeof(int)
(32,NULL)
(33,source)
(34,switch(6)
(35,break;)
(36,1)
(37,data)
(38,int)
(39,)
(40,free(data)
(41,int *)
(42,malloc(50*sizeof(int)
(43,exit(-1)
(44,data)
(45,data)
(46,)
(47,data = NULL)
(48,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^