-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_long_02_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        data = (long *)malloc(100*sizeof(long));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
58,60
60,61
61,62
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,59,64,66
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_long_02_bad(){    long * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_long_02_bad()
CWE415_Double_Free__malloc_free_long_02_bad
{    long * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
long * data;
long * data;
long
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
1
{        data = (long *)malloc(100*sizeof(long));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (long *)malloc(100*sizeof(long));
data = (long *)malloc(100*sizeof(long))
data
data
(long *)malloc(100*sizeof(long))
long *
long
*
*
malloc(100*sizeof(long))
malloc
malloc
100*sizeof(long)
100
sizeof(long)
long
long

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(1)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
1
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(32,29,0)
(31,6,0)
(32,7,0)
(7,32,0)
(1,25,0)
(23,9,0)
(12,14,0)
(8,32,0)
(6,7,0)
(26,7,0)
(2,13,0)
(4,13,0)
(3,25,0)
(25,29,0)
(19,13,0)
(20,0,0)
(18,7,0)
(27,26,0)
(32,8,0)
(7,14,0)
(12,7,0)
(0,11,0)
(9,13,0)
(29,32,0)
(28,26,0)
(17,3,0)
(0,20,0)
(30,20,0)
(5,12,0)
(6,22,0)
(3,17,0)
(10,14,0)
(25,3,0)
(29,25,0)
(24,9,0)
(6,9,0)
(27,7,1)
(3,17,1)
(31,16,1)
(5,26,1)
(5,0,1)
(6,7,1)
(15,6,1)
(20,30,1)
(6,31,1)
(16,12,1)
(32,8,1)
(18,21,1)
(12,5,1)
(12,7,1)
(24,23,1)
(3,1,1)
(25,3,1)
(7,32,1)
(21,9,1)
(6,9,1)
(26,7,1)
(9,24,1)
(32,29,1)
(16,21,1)
(29,25,1)
(26,28,1)
(0,20,1)
(28,27,1)
(30,26,1)
(15,16,1)
(1,18,1)
(7,21,2)
(0,26,2)
(6,7,2)
(29,21,2)
(3,21,2)
(1,21,2)
(3,17,2)
(5,21,2)
(25,21,2)
(32,8,2)
(25,3,2)
(32,21,2)
(31,16,2)
(20,26,2)
(26,21,2)
(30,26,2)
(18,21,2)
(7,32,2)
(26,7,2)
(6,9,2)
(28,21,2)
(27,21,2)
(29,25,2)
(12,7,2)
(6,16,2)
(12,21,2)
(0,20,2)
(32,29,2)
-----------------------------------
(0,exit(-1)
(1,100)
(2,if(1)
(3,sizeof(long)
(4,if(1)
(5,data)
(6,free(data)
(7,data = (long *)
(8,long *)
(9,data = NULL)
(10,if (data == NULL)
(11,)
(12,free(data)
(13,)
(14,)
(15,RET)
(16,1)
(17,long)
(18,data)
(19,data)
(20,-1)
(21,1)
(22,)
(23,data)
(24,NULL)
(25,100*sizeof(long)
(26,data == NULL)
(27,data)
(28,NULL)
(29,malloc(100*sizeof(long)
(30,1)
(31,data)
(32,(long *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^