-----label-----
1
-----code-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b_badSource(char * data)
{
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,52
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b_badSource(char * data){    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    return data;}
char
* CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b_badSource(char * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b_badSource
char * data
char
* data
*
data
{    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    return data;}
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(4,2,0)
(22,10,0)
(2,26,0)
(23,5,0)
(16,25,0)
(16,22,0)
(7,6,0)
(17,25,0)
(22,25,0)
(12,2,0)
(14,6,0)
(6,13,0)
(26,2,0)
(20,11,0)
(8,18,0)
(8,11,0)
(9,10,0)
(5,23,0)
(16,10,0)
(6,25,0)
(17,22,0)
(11,8,0)
(23,12,0)
(15,17,0)
(3,26,0)
(1,13,0)
(6,22,0)
(0,16,0)
(19,17,0)
(2,12,0)
(13,10,0)
(24,22,0)
(22,23,0)
(12,23,0)
(23,22,0)
(21,16,0)
(22,25,1)
(13,1,1)
(2,26,1)
(8,11,1)
(6,22,1)
(16,0,1)
(21,16,1)
(7,17,1)
(12,2,1)
(17,25,1)
(22,23,1)
(26,3,1)
(17,22,1)
(3,4,1)
(16,25,1)
(4,24,1)
(23,5,1)
(16,22,1)
(20,17,1)
(15,22,1)
(23,12,1)
(6,14,1)
(0,13,1)
(14,7,1)
(1,6,1)
(7,8,1)
(6,25,1)
(11,20,1)
(19,15,1)
(17,19,1)
(16,25,2)
(16,22,2)
(21,16,2)
(8,11,2)
(23,5,2)
(12,2,2)
(22,23,2)
(2,26,2)
(17,22,2)
(23,12,2)
(22,25,2)
(6,25,2)
(8,17,2)
(11,17,2)
(20,17,2)
(6,22,2)
(17,25,2)
-----------------------------------
(0,data)
(1,'\\\\0')
(2,50*sizeof(char)
(3,char)
(4,50)
(5,char *)
(6,data[0])
(7,data)
(8,exit(-1)
(9,if (data == NULL)
(10,)
(11,-1)
(12,malloc(50*sizeof(char)
(13,data[0] = '\\\\0')
(14,0)
(15,data)
(16,return data;)
(17,data == NULL)
(18,)
(19,NULL)
(20,1)
(21,RET)
(22,data = (char *)
(23,(char *)
(24,data)
(25,char * data)
(26,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^