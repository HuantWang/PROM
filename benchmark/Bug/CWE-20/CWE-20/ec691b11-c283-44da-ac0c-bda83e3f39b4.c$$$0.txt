-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
42,43
42,44
42,45
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
57,58
57,59
59,60
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
104,105
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,15,16,19,24,26,27,30,33,38,40,41,45,48,50,55,58,60,63,66,69,70,74,76,81,83,87,89,91,95,97,101,103,108,109
-----computeFrom-----
13,14
13,15
43,44
43,45
53,54
53,55
64,65
64,66
72,73
72,74
-----guardedBy-----
50,91
45,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_05_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(31,4,0)
(17,25,0)
(50,32,0)
(25,2,0)
(11,24,0)
(33,8,0)
(4,12,0)
(23,51,0)
(18,0,0)
(35,2,0)
(14,13,0)
(49,20,0)
(39,40,0)
(40,27,0)
(22,39,0)
(42,32,0)
(2,27,0)
(48,41,0)
(27,2,0)
(37,7,0)
(19,18,0)
(41,10,0)
(36,35,0)
(27,40,0)
(13,6,0)
(2,20,0)
(9,0,0)
(25,20,0)
(43,8,0)
(1,22,0)
(33,18,0)
(27,38,0)
(26,0,0)
(28,24,0)
(7,20,0)
(29,2,0)
(8,33,0)
(30,0,0)
(3,33,0)
(51,4,0)
(7,2,0)
(44,25,0)
(46,4,0)
(51,18,0)
(4,51,0)
(39,22,0)
(5,13,0)
(35,20,0)
(38,27,0)
(40,39,0)
(50,34,0)
(32,50,0)
(39,18,0)
(16,39,0)
(47,18,0)
(24,2,0)
(32,42,1)
(2,27,1)
(19,47,1)
(8,43,1)
(7,2,1)
(35,36,1)
(48,33,1)
(7,37,1)
(37,25,1)
(43,3,1)
(51,18,1)
(18,19,1)
(21,4,1)
(24,2,1)
(44,50,1)
(46,31,1)
(27,38,1)
(39,22,1)
(15,21,1)
(22,1,1)
(23,46,1)
(3,21,1)
(50,32,1)
(1,16,1)
(28,2,1)
(40,39,1)
(24,11,1)
(16,29,1)
(27,40,1)
(35,2,1)
(29,33,1)
(41,48,1)
(17,44,1)
(15,35,1)
(42,24,1)
(21,45,1)
(51,23,1)
(11,28,1)
(44,24,1)
(31,45,1)
(25,17,1)
(45,18,1)
(33,18,1)
(15,41,1)
(39,18,1)
(36,7,1)
(25,2,1)
(4,51,1)
(33,8,1)
(33,21,2)
(35,2,2)
(11,33,2)
(24,2,2)
(25,33,2)
(25,2,2)
(40,39,2)
(7,2,2)
(43,21,2)
(37,33,2)
(41,33,2)
(27,33,2)
(28,33,2)
(35,33,2)
(51,18,2)
(1,33,2)
(4,45,2)
(46,45,2)
(27,38,2)
(39,18,2)
(24,33,2)
(23,45,2)
(39,22,2)
(39,33,2)
(36,33,2)
(4,51,2)
(42,24,2)
(16,33,2)
(2,27,2)
(44,33,2)
(7,33,2)
(48,33,2)
(31,45,2)
(22,33,2)
(50,32,2)
(27,40,2)
(40,33,2)
(51,45,2)
(33,8,2)
(3,21,2)
(29,33,2)
(2,33,2)
(32,24,2)
(33,18,2)
(8,21,2)
(17,33,2)
(50,24,2)
-----------------------------------
(0,)
(1,char)
(2,myString = (char *)
(3,data)
(4,fscanf(stdin, "%zu", &data)
(5,if (data > strlen(HELLO_STRING)
(6,)
(7,printLine(myString)
(8,strlen(HELLO_STRING)
(9,if(staticTrue)
(10,)
(11,NULL)
(12,)
(13,)
(14,myString)
(15,RET)
(16,data)
(17,HELLO_STRING)
(18,data = 0)
(19,0)
(20,)
(21,staticTrue)
(22,sizeof(char)
(23,data)
(24,myString == NULL)
(25,strcpy(myString, HELLO_STRING)
(26,data)
(27,(char *)
(28,myString)
(29,myString)
(30,if(staticTrue)
(31,stdin)
(32,-1)
(33,data > strlen(HELLO_STRING)
(34,)
(35,free(myString)
(36,myString)
(37,myString)
(38,char *)
(39,data*sizeof(char)
(40,malloc(data*sizeof(char)
(41,printLine("Input is less than the length of the source string")
(42,1)
(43,HELLO_STRING)
(44,myString)
(45,staticTrue)
(46,"%zu")
(47,data)
(48,"Input is less than the length of the source string")
(49,if (myString == NULL)
(50,exit(-1)
(51,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^