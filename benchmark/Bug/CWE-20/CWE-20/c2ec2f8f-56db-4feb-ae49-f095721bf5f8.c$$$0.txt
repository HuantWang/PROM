-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    while(1)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
        break;
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        memcpy(dest, data, strlen(data)*sizeof(char));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
53,55
56,57
57,58
57,59
58,59
58,60
59,60
61,62
61,63
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,49,51,52,54,55,60,62,63,64,65,69,71,73,75,79,81,83,87,89,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
53,54
53,55
57,58
57,59
61,62
61,63
84,85
84,86
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    while(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    while(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
while(1)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    }
1
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
break;
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        memcpy(dest, data, strlen(data)*sizeof(char));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
memcpy(dest, data, strlen(data)*sizeof(char));
memcpy(dest, data, strlen(data)*sizeof(char))
memcpy
memcpy
dest
dest
data
data
strlen(data)*sizeof(char)
strlen(data)
strlen
strlen
data
data
sizeof(char)
char
char

dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(14,33,0)
(6,1,0)
(1,50,0)
(56,11,0)
(25,8,0)
(52,30,0)
(41,8,0)
(20,36,0)
(55,13,0)
(2,16,0)
(34,54,0)
(21,60,0)
(13,59,0)
(49,8,0)
(47,17,0)
(24,60,0)
(9,43,0)
(1,0,0)
(5,16,0)
(59,36,0)
(57,37,0)
(1,6,0)
(30,52,0)
(51,43,0)
(59,13,0)
(33,16,0)
(28,43,0)
(45,13,0)
(44,2,0)
(38,0,0)
(23,46,0)
(60,0,0)
(8,43,0)
(57,11,0)
(11,57,0)
(2,8,0)
(16,2,0)
(27,59,0)
(2,25,0)
(42,25,0)
(46,25,0)
(4,15,0)
(32,6,0)
(17,8,0)
(50,36,0)
(46,49,0)
(31,59,0)
(7,6,0)
(15,4,0)
(17,0,0)
(37,30,0)
(16,33,0)
(29,49,0)
(10,1,0)
(37,57,0)
(2,0,0)
(59,0,0)
(54,46,0)
(30,0,0)
(0,30,0)
(40,41,0)
(18,8,0)
(3,25,0)
(35,2,0)
(12,50,0)
(15,22,0)
(16,5,0)
(5,0,0)
(39,4,0)
(19,57,0)
(46,54,0)
(41,0,0)
(30,37,0)
(58,54,0)
(48,5,0)
(0,43,0)
(46,25,1)
(17,47,1)
(1,6,1)
(30,52,1)
(35,44,1)
(41,0,1)
(24,0,1)
(10,59,1)
(53,60,1)
(5,0,1)
(12,1,1)
(14,5,1)
(58,34,1)
(13,55,1)
(48,35,1)
(47,49,1)
(49,29,1)
(30,37,1)
(2,0,1)
(5,48,1)
(2,25,1)
(15,4,1)
(23,2,1)
(34,23,1)
(25,42,1)
(21,24,1)
(11,56,1)
(4,39,1)
(41,40,1)
(3,20,1)
(45,27,1)
(29,46,1)
(2,16,1)
(57,11,1)
(17,0,1)
(50,12,1)
(3,53,1)
(32,7,1)
(7,10,1)
(40,17,1)
(16,33,1)
(20,50,1)
(16,5,1)
(1,0,1)
(19,38,1)
(0,30,1)
(46,54,1)
(53,15,1)
(44,25,1)
(26,41,1)
(54,58,1)
(6,32,1)
(56,19,1)
(59,0,1)
(60,0,1)
(55,45,1)
(59,13,1)
(42,3,1)
(31,53,1)
(27,31,1)
(60,21,1)
(37,57,1)
(39,60,1)
(33,14,1)
(31,53,2)
(10,53,2)
(57,11,2)
(20,53,2)
(15,4,2)
(32,53,2)
(45,53,2)
(59,53,2)
(59,0,2)
(16,5,2)
(7,53,2)
(5,0,2)
(55,53,2)
(37,57,2)
(6,53,2)
(1,0,2)
(16,33,2)
(15,60,2)
(30,37,2)
(27,53,2)
(12,53,2)
(2,25,2)
(2,16,2)
(46,25,2)
(50,53,2)
(41,0,2)
(4,60,2)
(59,13,2)
(0,30,2)
(39,60,2)
(46,54,2)
(1,53,2)
(13,53,2)
(2,0,2)
(17,0,2)
(30,52,2)
(1,6,2)
(60,0,2)
-----------------------------------
(0,data = (char *)
(1,data[100-1])
(2,memcpy(dest, data, strlen(data)
(3,dest)
(4,-1)
(5,strlen(data)
(6,100-1)
(7,100)
(8,)
(9,while(1)
(10,data)
(11,sizeof(char)
(12,\\\'\\\\0\\\')
(13,100-1)
(14,char)
(15,exit(-1)
(16,strlen(data)
(17,printLine(data)
(18,dest)
(19,100)
(20,break;)
(21,NULL)
(22,)
(23,dest)
(24,data)
(25,dest[50] = "")
(26,RET)
(27,\\\'A\\\')
(28,if (data == NULL)
(29,\\\'\\\\0\\\')
(30,(char *)
(31,data)
(32,1)
(33,sizeof(char)
(34,50)
(35,data)
(36,)
(37,malloc(100*sizeof(char)
(38,data)
(39,1)
(40,data)
(41,free(data)
(42,"")
(43,)
(44,dest)
(45,100)
(46,dest[50-1])
(47,data)
(48,data)
(49,dest[50-1] = \\\'\\\\0\\\')
(50,data[100-1] = \\\'\\\\0\\\')
(51,data)
(52,char *)
(53,1)
(54,50-1)
(55,1)
(56,char)
(57,100*sizeof(char)
(58,1)
(59,memset(data, \\\'A\\\', 100-1)
(60,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^