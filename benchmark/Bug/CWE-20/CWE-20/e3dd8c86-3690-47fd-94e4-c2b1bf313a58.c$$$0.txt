-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        strncat(data, source, 100);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,97,101,103,107,109
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        strncat(data, source, 100);        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncat(data, source, 100);
strncat(data, source, 100)
strncat
strncat
data
data
source
source
100
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(57,15,0)
(37,6,0)
(42,19,0)
(49,52,0)
(40,50,0)
(6,45,0)
(48,49,0)
(30,11,0)
(41,22,0)
(2,51,0)
(24,16,0)
(8,17,0)
(58,0,0)
(4,45,0)
(46,43,0)
(25,43,0)
(16,24,0)
(6,49,0)
(38,49,0)
(36,4,0)
(13,45,0)
(11,4,0)
(5,50,0)
(49,15,0)
(17,19,0)
(38,45,0)
(33,6,0)
(5,39,0)
(1,7,0)
(3,24,0)
(20,12,0)
(52,39,0)
(51,15,0)
(23,7,0)
(6,22,0)
(0,49,0)
(52,14,0)
(17,8,0)
(9,5,0)
(47,6,0)
(22,43,0)
(4,11,0)
(44,38,0)
(53,11,0)
(55,45,0)
(13,49,0)
(52,49,0)
(45,43,0)
(34,0,0)
(27,8,0)
(39,5,0)
(12,49,0)
(29,22,0)
(50,5,0)
(19,45,0)
(39,52,0)
(38,22,0)
(0,51,0)
(16,32,0)
(14,52,0)
(21,12,0)
(18,17,0)
(35,13,0)
(10,4,0)
(31,8,0)
(13,22,0)
(49,52,1)
(50,40,1)
(6,49,1)
(7,1,1)
(17,8,1)
(3,12,1)
(22,29,1)
(34,16,1)
(13,22,1)
(47,19,1)
(16,24,1)
(11,30,1)
(52,14,1)
(5,50,1)
(13,35,1)
(19,42,1)
(38,49,1)
(51,2,1)
(6,22,1)
(44,13,1)
(13,49,1)
(21,49,1)
(9,48,1)
(10,36,1)
(8,31,1)
(38,44,1)
(53,10,1)
(2,0,1)
(24,3,1)
(30,53,1)
(0,58,1)
(4,11,1)
(0,49,1)
(28,38,1)
(20,21,1)
(34,12,1)
(39,5,1)
(18,4,1)
(42,17,1)
(48,7,1)
(6,33,1)
(1,23,1)
(12,49,1)
(27,18,1)
(38,22,1)
(12,20,1)
(40,9,1)
(29,41,1)
(31,27,1)
(52,39,1)
(36,7,1)
(23,22,1)
(36,51,1)
(33,37,1)
(58,34,1)
(35,6,1)
(37,47,1)
(5,50,2)
(12,49,2)
(4,11,2)
(13,22,2)
(34,7,2)
(40,7,2)
(20,7,2)
(2,7,2)
(24,12,2)
(38,22,2)
(5,7,2)
(48,7,2)
(51,7,2)
(50,7,2)
(6,49,2)
(52,14,2)
(49,7,2)
(38,49,2)
(3,12,2)
(39,5,2)
(21,7,2)
(9,7,2)
(16,24,2)
(17,8,2)
(58,7,2)
(0,49,2)
(12,7,2)
(0,7,2)
(13,49,2)
(6,22,2)
(39,7,2)
(49,52,2)
(16,12,2)
(52,39,2)
(52,7,2)
-----------------------------------
(0,data[0])
(1,5)
(2,'\\\\0')
(3,1)
(4,memset(source, \'C\', 100-1)
(5,50*sizeof(char)
(6,strncat(data, source, 100)
(7,staticFive==5)
(8,100-1)
(9,50)
(10,'C')
(11,100-1)
(12,data == NULL)
(13,printLine(data)
(14,char *)
(15,)
(16,exit(-1)
(17,source[100-1])
(18,source)
(19,source[100-1] = '\\\\0')
(20,NULL)
(21,data)
(22,data = NULL)
(23,staticFive)
(24,-1)
(25,data)
(26,memset(source, 'C', 100-1)
(27,100)
(28,RET)
(29,NULL)
(30,1)
(31,1)
(32,)
(33,100)
(34,data)
(35,data)
(36,source)
(37,source)
(38,free(data)
(39,malloc(50*sizeof(char)
(40,char)
(41,data)
(42,'\\\\0')
(43,)
(44,data)
(45,)
(46,if(staticFive==5)
(47,data)
(48,data)
(49,data = (char *)
(50,sizeof(char)
(51,data[0] = \'\\\\0\')
(52,(char *)
(53,100)
(54,data[0] = '\\\\0')
(55,source)
(56,\'\\\\0\')
(57,if (data == NULL)
(58,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^