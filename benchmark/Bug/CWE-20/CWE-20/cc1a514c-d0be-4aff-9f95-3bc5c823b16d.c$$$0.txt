-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (wchar_t *)malloc(50*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    data[0] = L'\0'; /* null terminate */
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,52
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (wchar_t *)malloc(50*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data[0] = L'\0'; /* null terminate */    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (wchar_t *)malloc(50*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data[0] = L'\0'; /* null terminate */    return data;}
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
return data;
data
data
-----joern-----
(3,7,0)
(8,14,0)
(14,0,0)
(17,12,0)
(5,12,0)
(19,8,0)
(10,12,0)
(22,13,0)
(14,8,0)
(15,14,0)
(20,16,0)
(2,10,0)
(16,6,0)
(4,3,0)
(16,12,0)
(6,18,0)
(16,9,0)
(7,3,0)
(13,9,0)
(10,16,0)
(21,10,0)
(10,9,0)
(6,0,0)
(7,11,0)
(6,16,0)
(0,14,0)
(1,13,0)
(0,6,0)
(13,16,0)
(18,6,0)
(10,9,1)
(3,4,1)
(7,3,1)
(16,9,1)
(4,13,1)
(1,16,1)
(16,6,1)
(15,20,1)
(10,21,1)
(14,8,1)
(13,22,1)
(13,16,1)
(17,7,1)
(8,19,1)
(6,0,1)
(0,14,1)
(6,18,1)
(10,16,1)
(13,9,1)
(21,17,1)
(22,1,1)
(2,10,1)
(19,15,1)
(17,13,1)
(10,16,2)
(4,13,2)
(16,6,2)
(13,9,2)
(16,9,2)
(14,8,2)
(7,3,2)
(10,9,2)
(6,18,2)
(3,13,2)
(0,14,2)
(7,13,2)
(2,10,2)
(13,16,2)
(6,0,2)
-----------------------------------
(0,malloc(50*sizeof(wchar_t)
(1,data)
(2,RET)
(3,-1)
(4,1)
(5,if (data == NULL)
(6,(wchar_t *)
(7,exit(-1)
(8,sizeof(wchar_t)
(9,wchar_t * data)
(10,return data;)
(11,)
(12,)
(13,data == NULL)
(14,50*sizeof(wchar_t)
(15,50)
(16,data = (wchar_t *)
(17,'\\\\0')
(18,wchar_t *)
(19,wchar_t)
(20,data)
(21,data)
(22,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^