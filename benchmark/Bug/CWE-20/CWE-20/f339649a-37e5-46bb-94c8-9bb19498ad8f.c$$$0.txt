-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
58,59
58,60
58,61
60,61
61,62
61,63
64,65
65,66
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,62,63,66,70,72,74,78,80,84,86
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
5==5
5
5
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,0,0)
(21,38,0)
(4,28,0)
(20,8,0)
(27,24,0)
(36,1,0)
(6,35,0)
(37,4,0)
(24,27,0)
(35,36,0)
(0,3,0)
(19,36,0)
(25,38,0)
(21,28,0)
(33,15,0)
(31,30,0)
(27,10,0)
(14,30,0)
(17,21,0)
(20,1,0)
(28,20,0)
(1,36,0)
(7,25,0)
(29,3,0)
(13,28,0)
(16,24,0)
(25,0,0)
(25,15,0)
(32,25,0)
(39,0,0)
(18,38,0)
(4,0,0)
(38,3,0)
(36,35,0)
(34,38,0)
(21,0,0)
(1,20,0)
(8,20,0)
(2,5,0)
(25,28,0)
(26,15,0)
(4,38,0)
(9,3,0)
(12,23,0)
(20,28,0)
(28,23,0)
(22,5,0)
(5,28,0)
(4,37,1)
(25,28,1)
(21,28,1)
(6,19,1)
(4,38,1)
(4,28,1)
(28,20,1)
(17,4,1)
(32,7,1)
(35,6,1)
(16,5,1)
(31,38,1)
(26,30,1)
(15,33,1)
(11,21,1)
(1,36,1)
(14,31,1)
(21,38,1)
(2,28,1)
(22,2,1)
(38,34,1)
(30,14,1)
(25,38,1)
(7,15,1)
(13,30,1)
(20,8,1)
(20,1,1)
(36,35,1)
(26,5,1)
(26,27,1)
(24,16,1)
(25,32,1)
(19,13,1)
(21,17,1)
(37,25,1)
(33,26,1)
(25,15,1)
(27,24,1)
(5,28,1)
(34,18,1)
(5,22,1)
(16,5,2)
(2,30,2)
(22,30,2)
(20,1,2)
(25,38,2)
(28,30,2)
(36,35,2)
(25,15,2)
(21,28,2)
(27,24,2)
(24,5,2)
(5,28,2)
(1,36,2)
(4,28,2)
(5,30,2)
(21,38,2)
(1,30,2)
(20,30,2)
(27,5,2)
(25,28,2)
(36,30,2)
(4,38,2)
(6,30,2)
(19,30,2)
(20,8,2)
(28,20,2)
(35,30,2)
(13,30,2)
-----------------------------------
(0,)
(1,malloc(10*sizeof(char)
(2,data)
(3,)
(4,printLine(data)
(5,data == NULL)
(6,char)
(7,data)
(8,char *)
(9,if(5==5)
(10,)
(11,RET)
(12,if (data == NULL)
(13,data)
(14,5)
(15,source[10+1] = SRC_STRING)
(16,1)
(17,data)
(18,data)
(19,10)
(20,(char *)
(21,free(data)
(22,NULL)
(23,)
(24,-1)
(25,strcpy(data, source)
(26,source)
(27,exit(-1)
(28,data = (char *)
(29,data)
(30,5==5)
(31,5)
(32,source)
(33,SRC_STRING)
(34,NULL)
(35,sizeof(char)
(36,10*sizeof(char)
(37,data)
(38,data = NULL)
(39,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^