-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad()
{
    if(1)
    {
        {
            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
            if (structCharVoid == NULL) {exit(-1);}
            structCharVoid->voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid->voidSecond */
            printLine((char *)structCharVoid->voidSecond);
            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid->charFirst);
            printLine((char *)structCharVoid->voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
28,29
28,30
29,30
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
52,54
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
68,69
71,72
72,73
72,74
72,75
72,76
73,74
75,76
75,77
76,77
79,80
81,82
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
95,96
95,97
96,97
97,98
98,99
98,100
99,100
102,103
103,104
103,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
115,116
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
125,127
126,127
126,128
128,129
130,131
130,132
131,132
-----nextToken-----
2,4,7,13,15,16,21,23,26,30,31,35,37,42,44,49,50,53,55,57,61,64,66,69,70,74,77,78,80,85,91,92,100,101,104,105,106,107,111,114,116,119,120,124,127,129,132,133
-----computeFrom-----
33,34
33,35
46,47
46,48
87,88
87,89
93,94
93,95
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad(){    if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad()
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02_bad
{    if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }}
if(1)    {        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
1
{        {            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }    }
{            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));            if (structCharVoid == NULL) {exit(-1);}            structCharVoid->voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid->voidSecond */            printLine((char *)structCharVoid->voidSecond);            /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid->charFirst);            printLine((char *)structCharVoid->voidSecond);        }
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
charVoid
charVoid
* structCharVoid = (charVoid *)malloc(sizeof(charVoid))
*
structCharVoid
= (charVoid *)malloc(sizeof(charVoid))
(charVoid *)malloc(sizeof(charVoid))
charVoid *
charVoid
charVoid
*
*
malloc(sizeof(charVoid))
malloc
malloc
sizeof(charVoid)
charVoid
charVoid
charVoid

if (structCharVoid == NULL) {exit(-1);}
structCharVoid == NULL
structCharVoid
structCharVoid
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
structCharVoid->voidSecond = (void *)SRC_STR;
structCharVoid->voidSecond = (void *)SRC_STR
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid))
memmove
memmove
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(*structCharVoid)
(*structCharVoid)
*structCharVoid
structCharVoid
structCharVoid
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0';
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'
structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1]
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid->charFirst)/sizeof(char))-1
(sizeof(structCharVoid->charFirst)/sizeof(char))
sizeof(structCharVoid->charFirst)/sizeof(char)
sizeof(structCharVoid->charFirst)
(structCharVoid->charFirst)
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid->charFirst);
printLine((char *)structCharVoid->charFirst)
printLine
printLine
(char *)structCharVoid->charFirst
char *
char
*
*
structCharVoid->charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid->voidSecond);
printLine((char *)structCharVoid->voidSecond)
printLine
printLine
(char *)structCharVoid->voidSecond
char *
char
*
*
structCharVoid->voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(66,54,0)
(47,53,0)
(25,48,0)
(13,33,0)
(45,27,0)
(16,5,0)
(9,56,0)
(53,16,0)
(5,50,0)
(46,37,0)
(27,49,0)
(59,0,0)
(58,13,0)
(27,45,0)
(24,48,0)
(0,59,0)
(62,16,0)
(54,26,0)
(54,31,0)
(18,31,0)
(64,27,0)
(29,25,0)
(5,51,0)
(46,65,0)
(47,9,0)
(22,16,0)
(57,16,0)
(3,45,0)
(25,54,0)
(19,31,0)
(45,16,0)
(12,48,0)
(51,5,0)
(20,26,0)
(10,17,0)
(65,46,0)
(14,66,0)
(37,46,0)
(50,5,0)
(70,53,0)
(43,34,0)
(8,62,0)
(56,16,0)
(59,8,0)
(61,49,0)
(47,26,0)
(59,64,0)
(13,58,0)
(37,26,0)
(25,16,0)
(56,9,0)
(60,47,0)
(36,0,0)
(28,55,0)
(26,39,0)
(64,59,0)
(42,66,0)
(6,62,0)
(30,33,0)
(40,22,0)
(44,45,0)
(8,59,0)
(5,16,0)
(66,16,0)
(2,26,0)
(33,16,0)
(55,54,0)
(48,12,0)
(35,25,0)
(21,1,0)
(53,47,0)
(63,13,0)
(31,19,0)
(12,26,0)
(23,22,0)
(31,54,0)
(66,46,0)
(4,17,0)
(1,50,0)
(55,16,0)
(52,62,0)
(63,26,0)
(46,66,0)
(10,41,0)
(7,64,0)
(68,55,0)
(38,56,0)
(9,47,0)
(48,24,0)
(49,26,0)
(50,1,0)
(48,25,0)
(27,64,0)
(16,26,0)
(17,10,0)
(62,8,0)
(11,53,0)
(33,13,0)
(32,33,0)
(13,63,0)
(25,35,1)
(38,60,1)
(10,17,1)
(55,28,1)
(47,53,1)
(68,22,1)
(59,0,1)
(40,16,1)
(64,59,1)
(22,16,1)
(13,33,1)
(9,56,1)
(56,16,1)
(18,55,1)
(0,36,1)
(32,30,1)
(35,29,1)
(64,7,1)
(62,52,1)
(48,24,1)
(28,68,1)
(16,5,1)
(5,51,1)
(33,16,1)
(69,15,1)
(8,62,1)
(60,53,1)
(54,31,1)
(69,37,1)
(55,16,1)
(63,13,1)
(31,18,1)
(42,63,1)
(44,47,1)
(68,10,1)
(5,50,1)
(46,66,1)
(49,61,1)
(33,32,1)
(21,57,1)
(30,49,1)
(22,23,1)
(7,59,1)
(4,22,1)
(14,42,1)
(53,11,1)
(12,48,1)
(36,8,1)
(37,46,1)
(66,16,1)
(66,54,1)
(25,16,1)
(45,3,1)
(25,54,1)
(56,38,1)
(23,40,1)
(45,16,1)
(3,44,1)
(31,19,1)
(62,16,1)
(1,21,1)
(27,64,1)
(46,65,1)
(13,58,1)
(48,25,1)
(59,8,1)
(61,27,1)
(50,1,1)
(29,54,1)
(53,16,1)
(57,15,1)
(66,14,1)
(27,45,1)
(52,6,1)
(70,12,1)
(17,4,1)
(6,45,1)
(11,70,1)
(47,9,1)
(50,1,2)
(62,15,2)
(6,15,2)
(10,17,2)
(55,16,2)
(37,15,2)
(44,15,2)
(13,33,2)
(14,15,2)
(12,48,2)
(27,15,2)
(10,22,2)
(25,16,2)
(56,16,2)
(50,15,2)
(3,15,2)
(16,5,2)
(5,50,2)
(46,65,2)
(33,16,2)
(22,16,2)
(4,22,2)
(5,15,2)
(46,15,2)
(49,15,2)
(29,15,2)
(27,45,2)
(45,16,2)
(12,15,2)
(52,15,2)
(37,46,2)
(48,25,2)
(9,56,2)
(64,15,2)
(25,54,2)
(64,59,2)
(46,66,2)
(48,15,2)
(32,15,2)
(56,15,2)
(63,13,2)
(38,15,2)
(8,15,2)
(40,15,2)
(47,15,2)
(11,15,2)
(18,15,2)
(27,64,2)
(31,19,2)
(68,15,2)
(47,53,2)
(23,15,2)
(61,15,2)
(13,58,2)
(59,0,2)
(13,15,2)
(35,15,2)
(66,54,2)
(1,15,2)
(53,15,2)
(17,22,2)
(47,9,2)
(22,15,2)
(7,15,2)
(59,8,2)
(21,15,2)
(57,15,2)
(16,15,2)
(54,15,2)
(8,62,2)
(54,31,2)
(59,15,2)
(28,15,2)
(33,15,2)
(36,15,2)
(9,15,2)
(42,15,2)
(25,15,2)
(45,15,2)
(31,15,2)
(55,15,2)
(62,16,2)
(66,15,2)
(63,15,2)
(0,15,2)
(30,15,2)
(48,24,2)
(53,16,2)
(70,15,2)
(66,16,2)
(5,51,2)
(60,15,2)
-----------------------------------
(0,sizeof(char)
(1,sizeof(charVoid)
(2,if (structCharVoid == NULL)
(3,charFirst)
(4,1)
(5,(charVoid *)
(6,structCharVoid)
(7,1)
(8,sizeof(structCharVoid->charFirst)
(9,sizeof(*structCharVoid)
(10,exit(-1)
(11,charFirst)
(12,printLine((char *)
(13,(char *)
(14,voidSecond)
(15,1)
(16,* structCharVoid = (charVoid *)
(17,-1)
(18,SRC_STR)
(19,void *)
(20,structCharVoid)
(21,charVoid)
(22,structCharVoid == NULL)
(23,NULL)
(24,char *)
(25,structCharVoid->voidSecond)
(26,)
(27,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(28,voidSecond)
(29,structCharVoid)
(30,structCharVoid)
(31,(void *)
(32,charFirst)
(33,structCharVoid->charFirst)
(34,)
(35,voidSecond)
(36,char)
(37,printLine((char *)
(38,structCharVoid)
(39,)
(40,structCharVoid)
(41,)
(42,structCharVoid)
(43,if(1)
(44,structCharVoid)
(45,structCharVoid->charFirst)
(46,(char *)
(47,memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid)
(48,(char *)
(49,structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)
(50,malloc(sizeof(charVoid)
(51,charVoid *)
(52,charFirst)
(53,structCharVoid->charFirst)
(54,structCharVoid->voidSecond = (void *)
(55,structCharVoid->voidSecond)
(56,*structCharVoid)
(57,structCharVoid)
(58,char *)
(59,sizeof(structCharVoid->charFirst)
(60,SRC_STR)
(61,\'\\\\0\')
(62,structCharVoid->charFirst)
(63,printLine((char *)
(64,(sizeof(structCharVoid->charFirst)
(65,char *)
(66,structCharVoid->voidSecond)
(67,'\\\\0')
(68,structCharVoid)
(69,RET)
(70,structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^