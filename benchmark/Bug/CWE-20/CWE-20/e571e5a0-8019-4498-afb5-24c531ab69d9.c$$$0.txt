-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
53,54
54,55
54,56
56,57
56,58
56,59
58,59
59,60
59,61
62,63
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
73,75
74,75
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,60,61,64,68,70,72,78,80,81,84,85,89,91,95,97
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
73,74
73,75
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memmove
memmove
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,8,0)
(14,33,0)
(36,35,0)
(2,3,0)
(14,38,0)
(29,7,0)
(5,14,0)
(25,35,0)
(39,12,0)
(27,15,0)
(38,14,0)
(23,30,0)
(40,19,0)
(42,4,0)
(8,0,0)
(4,32,0)
(33,4,0)
(4,25,0)
(12,0,0)
(12,25,0)
(7,30,0)
(30,23,0)
(18,37,0)
(19,41,0)
(4,37,0)
(0,3,0)
(16,32,0)
(15,29,0)
(9,25,0)
(44,38,0)
(29,15,0)
(7,29,0)
(31,0,0)
(13,29,0)
(43,25,0)
(33,14,0)
(22,33,0)
(28,32,0)
(38,32,0)
(19,40,0)
(4,33,0)
(33,22,0)
(6,37,0)
(30,7,0)
(32,37,0)
(21,6,0)
(1,22,0)
(30,0,0)
(17,40,0)
(26,4,0)
(6,0,0)
(24,8,0)
(34,35,0)
(0,30,0)
(12,37,0)
(4,0,0)
(37,35,0)
(6,25,0)
(14,5,1)
(17,8,1)
(28,16,1)
(24,0,1)
(26,32,1)
(27,13,1)
(42,26,1)
(16,8,1)
(30,23,1)
(13,31,1)
(10,25,1)
(6,21,1)
(38,44,1)
(25,9,1)
(9,43,1)
(15,27,1)
(31,10,1)
(4,32,1)
(16,19,1)
(38,32,1)
(20,24,1)
(19,40,1)
(6,0,1)
(39,4,1)
(8,0,1)
(32,28,1)
(4,0,1)
(0,30,1)
(44,42,1)
(11,6,1)
(7,29,1)
(6,25,1)
(12,25,1)
(1,14,1)
(8,20,1)
(4,25,1)
(4,33,1)
(16,10,1)
(29,15,1)
(12,0,1)
(22,1,1)
(40,17,1)
(5,38,1)
(33,14,1)
(21,12,1)
(33,22,1)
(30,7,1)
(14,38,1)
(12,39,1)
(4,32,2)
(13,10,2)
(6,0,2)
(30,7,2)
(14,38,2)
(7,10,2)
(40,8,2)
(27,10,2)
(0,10,2)
(8,0,2)
(4,25,2)
(30,10,2)
(12,25,2)
(30,23,2)
(20,10,2)
(0,30,2)
(31,10,2)
(38,32,2)
(19,8,2)
(24,10,2)
(4,33,2)
(4,0,2)
(7,29,2)
(33,22,2)
(29,15,2)
(6,25,2)
(19,40,2)
(17,8,2)
(15,10,2)
(12,0,2)
(33,14,2)
(29,10,2)
(8,10,2)
-----------------------------------
(0,data = (wchar_t *)
(1,wchar_t)
(2,if (data == NULL)
(3,)
(4,memmove(data, source, (wcslen(source)
(5,1)
(6,free(data)
(7,malloc(10*sizeof(wchar_t)
(8,data == NULL)
(9,NULL)
(10,1)
(11,RET)
(12,printWLine(data)
(13,10)
(14,wcslen(source)
(15,sizeof(wchar_t)
(16,source)
(17,1)
(18,source)
(19,exit(-1)
(20,NULL)
(21,data)
(22,sizeof(wchar_t)
(23,wchar_t *)
(24,data)
(25,data = NULL)
(26,data)
(27,wchar_t)
(28,SRC_STRING)
(29,10*sizeof(wchar_t)
(30,(wchar_t *)
(31,data)
(32,source[10+1] = SRC_STRING)
(33,(wcslen(source)
(34,if(1)
(35,)
(36,data)
(37,)
(38,wcslen(source)
(39,data)
(40,-1)
(41,)
(42,source)
(43,data)
(44,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^