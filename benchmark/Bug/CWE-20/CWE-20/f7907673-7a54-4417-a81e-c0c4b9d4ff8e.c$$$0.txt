-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int_15_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    switch(6)
    {
    case 6:
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
62,63
63,64
63,65
64,65
68,69
68,70
70,71
70,72
70,73
70,74
70,75
70,76
71,72
73,74
74,75
74,76
75,76
77,78
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,61,65,66,67,69,72,76,78,79,80,84,85,86
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int_15_bad(){    int * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE415_Double_Free__malloc_free_int_15_bad()
CWE415_Double_Free__malloc_free_int_15_bad
{    int * data;    /* Initialize data */    data = NULL;    switch(6)    {    case 6:        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,7,0)
(31,0,0)
(28,0,0)
(4,7,0)
(23,41,0)
(3,6,0)
(17,41,0)
(27,4,0)
(8,4,0)
(38,2,0)
(19,41,0)
(9,30,0)
(15,6,0)
(42,6,0)
(44,25,0)
(35,6,0)
(12,42,0)
(24,30,0)
(41,0,0)
(17,30,0)
(37,0,0)
(34,6,0)
(33,40,0)
(7,1,0)
(29,30,0)
(5,30,0)
(7,6,0)
(21,38,0)
(2,22,0)
(44,40,0)
(16,2,0)
(22,2,0)
(11,30,0)
(22,1,0)
(42,7,0)
(2,38,0)
(17,7,0)
(10,6,0)
(1,22,0)
(1,36,0)
(1,7,0)
(32,35,0)
(14,17,0)
(40,44,0)
(20,6,0)
(36,1,0)
(13,5,0)
(8,27,1)
(39,20,1)
(4,8,1)
(41,19,1)
(14,39,1)
(24,17,1)
(5,13,1)
(17,7,1)
(35,32,1)
(44,40,1)
(22,2,1)
(17,14,1)
(2,38,1)
(26,29,1)
(32,43,1)
(43,41,1)
(7,1,1)
(27,7,1)
(4,7,1)
(19,23,1)
(29,5,1)
(1,22,1)
(16,18,1)
(40,33,1)
(20,42,1)
(21,16,1)
(42,7,1)
(18,43,1)
(39,15,1)
(17,41,1)
(26,24,1)
(12,44,1)
(33,4,1)
(38,21,1)
(13,39,1)
(15,35,1)
(1,36,1)
(42,12,1)
(12,4,1)
(1,36,2)
(13,39,2)
(20,43,2)
(29,39,2)
(12,43,2)
(44,4,2)
(22,2,2)
(8,43,2)
(4,43,2)
(17,39,2)
(15,43,2)
(38,43,2)
(16,43,2)
(14,39,2)
(2,38,2)
(24,39,2)
(1,22,2)
(7,43,2)
(7,1,2)
(42,43,2)
(27,43,2)
(22,43,2)
(35,43,2)
(17,41,2)
(18,43,2)
(40,4,2)
(21,43,2)
(33,4,2)
(2,43,2)
(42,7,2)
(4,7,2)
(32,43,2)
(5,39,2)
(17,7,2)
(1,43,2)
(44,40,2)
-----------------------------------
(0,)
(1,(int *)
(2,100*sizeof(int)
(3,if (data == NULL)
(4,data == NULL)
(5,printLine("Benign, fixed string")
(6,)
(7,data = (int *)
(8,NULL)
(9,default:)
(10,case 6:)
(11,case 7:)
(12,data)
(13,"Benign, fixed string")
(14,data)
(15,break;)
(16,100)
(17,free(data)
(18,data)
(19,NULL)
(20,break;)
(21,int)
(22,malloc(100*sizeof(int)
(23,data)
(24,break;)
(25,)
(26,RET)
(27,data)
(28,switch(7)
(29,break;)
(30,)
(31,data)
(32,"Benign, fixed string")
(33,1)
(34,default:)
(35,printLine("Benign, fixed string")
(36,int *)
(37,switch(6)
(38,sizeof(int)
(39,7)
(40,-1)
(41,data = NULL)
(42,free(data)
(43,6)
(44,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^