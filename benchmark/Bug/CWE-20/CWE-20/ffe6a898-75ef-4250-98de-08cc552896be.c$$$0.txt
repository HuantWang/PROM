-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    else
    {
        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        strcpy(dest, data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
47,48
47,49
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
67,68
67,69
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
87,89
87,90
87,91
88,89
89,90
89,91
91,92
91,93
91,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,46,51,53,54,56,57,62,64,65,66,71,73,74,76,77,82,84,85,86,90,92,94,96,100,102,104,108,110,114,116
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
75,76
75,77
79,80
79,81
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(globalReturnsTrueOrFalse())    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    else    {        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        /* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        strcpy(dest, data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strcpy(dest, data);
strcpy(dest, data)
strcpy
strcpy
dest
dest
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(11,37,0)
(8,9,0)
(54,37,0)
(29,14,0)
(20,48,0)
(17,35,0)
(55,37,0)
(59,46,0)
(42,9,0)
(49,51,0)
(54,45,0)
(16,45,0)
(37,38,0)
(48,8,0)
(18,28,0)
(2,51,0)
(53,9,0)
(12,36,0)
(30,54,0)
(41,11,0)
(61,31,0)
(58,8,0)
(47,18,0)
(39,25,0)
(4,8,0)
(27,45,0)
(55,56,0)
(38,37,0)
(51,2,0)
(35,28,0)
(2,12,0)
(19,48,0)
(38,24,0)
(59,38,0)
(21,55,0)
(14,8,0)
(33,35,0)
(60,1,0)
(7,56,0)
(35,17,0)
(10,51,0)
(40,46,0)
(55,18,0)
(2,37,0)
(24,38,0)
(1,46,0)
(32,54,0)
(52,25,0)
(48,37,0)
(46,59,0)
(6,56,0)
(14,37,0)
(37,9,0)
(0,37,0)
(34,58,0)
(13,17,0)
(54,36,0)
(46,1,0)
(56,55,0)
(45,54,0)
(48,25,0)
(23,35,0)
(61,5,0)
(22,17,0)
(38,59,0)
(26,11,0)
(43,12,0)
(58,37,0)
(31,61,0)
(25,8,0)
(3,9,0)
(35,37,0)
(15,31,0)
(57,2,0)
(2,51,1)
(59,46,1)
(52,18,1)
(25,39,1)
(50,11,1)
(51,49,1)
(13,23,1)
(31,15,1)
(37,38,1)
(55,37,1)
(17,22,1)
(20,19,1)
(48,25,1)
(33,50,1)
(29,58,1)
(57,54,1)
(56,7,1)
(48,37,1)
(26,37,1)
(38,24,1)
(16,30,1)
(27,16,1)
(46,1,1)
(50,61,1)
(14,37,1)
(30,32,1)
(15,11,1)
(21,35,1)
(12,43,1)
(19,25,1)
(61,31,1)
(11,41,1)
(18,47,1)
(44,14,1)
(48,20,1)
(41,26,1)
(43,2,1)
(39,52,1)
(23,33,1)
(22,13,1)
(35,37,1)
(1,60,1)
(55,56,1)
(52,12,1)
(11,37,1)
(47,55,1)
(40,0,1)
(38,59,1)
(45,27,1)
(6,21,1)
(14,29,1)
(54,45,1)
(35,17,1)
(2,37,1)
(10,57,1)
(34,48,1)
(32,50,1)
(58,34,1)
(54,37,1)
(7,6,1)
(60,40,1)
(49,10,1)
(58,37,1)
(43,50,2)
(55,37,2)
(2,37,2)
(48,25,2)
(10,50,2)
(58,37,2)
(49,50,2)
(46,1,2)
(37,38,2)
(61,11,2)
(61,31,2)
(31,11,2)
(51,50,2)
(7,50,2)
(38,24,2)
(17,50,2)
(23,50,2)
(12,50,2)
(16,50,2)
(32,50,2)
(59,46,2)
(30,50,2)
(18,50,2)
(35,50,2)
(13,50,2)
(14,37,2)
(54,45,2)
(6,50,2)
(35,37,2)
(55,56,2)
(22,50,2)
(45,50,2)
(47,50,2)
(35,17,2)
(38,59,2)
(27,50,2)
(15,11,2)
(55,50,2)
(21,50,2)
(11,37,2)
(2,50,2)
(56,50,2)
(33,50,2)
(54,50,2)
(57,50,2)
(48,37,2)
(54,37,2)
(2,51,2)
-----------------------------------
(0,data)
(1,sizeof(char)
(2,data[50-1])
(3,if (data == NULL)
(4,dest)
(5,)
(6,100)
(7,1)
(8,)
(9,)
(10,50)
(11,data == NULL)
(12,data[50-1] = \\\'\\\\0\\\')
(13,100)
(14,free(data)
(15,1)
(16,50)
(17,100-1)
(18,data[100-1] = \\\'\\\\0\\\')
(19,dest)
(20,data)
(21,data)
(22,1)
(23,\\\'A\\\')
(24,char *)
(25,dest[50] = "")
(26,data)
(27,1)
(28,)
(29,data)
(30,\\\'A\\\')
(31,-1)
(32,data)
(33,data)
(34,data)
(35,memset(data, \\\'A\\\', 100-1)
(36,)
(37,data = (char *)
(38,(char *)
(39,"")
(40,100)
(41,NULL)
(42,data)
(43,\\\'\\\\0\\\')
(44,RET)
(45,50-1)
(46,100*sizeof(char)
(47,\\\'\\\\0\\\')
(48,strcpy(dest, data)
(49,1)
(50,globalReturnsTrueOrFalse()
(51,50-1)
(52,dest)
(53,if(globalReturnsTrueOrFalse()
(54,memset(data, \\\'A\\\', 50-1)
(55,data[100-1])
(56,100-1)
(57,data)
(58,printLine(data)
(59,malloc(100*sizeof(char)
(60,char)
(61,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^