-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
60,62
60,63
60,64
60,65
60,66
60,67
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
75,76
75,77
78,79
79,80
79,81
80,81
80,82
81,82
83,84
83,85
87,88
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
95,97
97,98
98,99
98,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
106,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,65,67,71,73,74,76,77,82,84,85,86,90,92,94,96,99,100,105,107,108,109,113,115,119,121
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
75,76
75,77
79,80
79,81
83,84
83,85
95,96
95,97
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalTrue
globalTrue
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,4,0)
(57,50,0)
(10,6,0)
(41,52,0)
(7,11,0)
(48,57,0)
(47,11,0)
(62,51,0)
(4,42,0)
(61,38,0)
(40,11,0)
(19,66,0)
(7,38,0)
(23,13,0)
(64,28,0)
(35,18,0)
(2,38,0)
(13,23,0)
(36,35,0)
(25,50,0)
(44,42,0)
(55,47,0)
(53,31,0)
(31,42,0)
(47,55,0)
(37,7,0)
(22,31,0)
(8,47,0)
(3,28,0)
(26,19,0)
(65,19,0)
(0,51,0)
(60,34,0)
(23,4,0)
(49,55,0)
(21,16,0)
(51,0,0)
(66,23,0)
(28,11,0)
(28,6,0)
(20,47,0)
(15,11,0)
(57,4,0)
(28,38,0)
(57,15,0)
(6,28,0)
(16,4,0)
(18,35,0)
(19,65,0)
(30,5,0)
(23,66,0)
(14,55,0)
(54,0,0)
(16,11,0)
(34,11,0)
(4,23,0)
(66,19,0)
(17,0,0)
(18,1,0)
(51,34,0)
(39,4,0)
(32,4,0)
(45,53,0)
(11,52,0)
(53,4,0)
(27,50,0)
(5,6,0)
(6,5,0)
(57,38,0)
(29,53,0)
(24,32,0)
(59,15,0)
(63,32,0)
(43,65,0)
(28,4,0)
(16,38,0)
(33,52,0)
(38,52,0)
(50,57,0)
(9,38,1)
(32,4,1)
(26,39,1)
(31,22,1)
(36,32,1)
(53,29,1)
(57,50,1)
(7,4,1)
(7,38,1)
(55,14,1)
(64,3,1)
(30,10,1)
(16,21,1)
(57,38,1)
(28,38,1)
(38,2,1)
(50,25,1)
(39,9,1)
(37,16,1)
(15,59,1)
(7,37,1)
(2,61,1)
(23,66,1)
(66,19,1)
(51,0,1)
(35,36,1)
(43,26,1)
(59,57,1)
(6,5,1)
(45,18,1)
(19,65,1)
(20,31,1)
(29,45,1)
(21,15,1)
(28,6,1)
(17,54,1)
(54,62,1)
(5,30,1)
(63,4,1)
(3,34,1)
(57,4,1)
(16,38,1)
(4,23,1)
(23,13,1)
(32,24,1)
(16,4,1)
(65,43,1)
(27,48,1)
(48,28,1)
(62,47,1)
(8,20,1)
(10,64,1)
(12,7,1)
(34,60,1)
(47,55,1)
(25,27,1)
(45,32,1)
(28,4,1)
(20,9,1)
(24,63,1)
(49,8,1)
(0,17,1)
(22,53,1)
(14,49,1)
(18,35,1)
(53,4,1)
(60,51,1)
(28,6,2)
(7,4,2)
(28,38,2)
(26,9,2)
(63,9,2)
(4,9,2)
(18,35,2)
(43,9,2)
(6,5,2)
(23,9,2)
(36,32,2)
(32,9,2)
(23,13,2)
(39,9,2)
(19,9,2)
(29,9,2)
(35,32,2)
(16,38,2)
(51,0,2)
(18,32,2)
(45,9,2)
(66,19,2)
(57,4,2)
(31,9,2)
(47,55,2)
(28,4,2)
(23,66,2)
(4,23,2)
(57,38,2)
(57,50,2)
(53,4,2)
(24,9,2)
(7,38,2)
(19,65,2)
(32,4,2)
(53,9,2)
(22,9,2)
(65,9,2)
(66,9,2)
(16,4,2)
-----------------------------------
(0,100-1)
(1,)
(2,NULL)
(3,data)
(4,data = (char *)
(5,sizeof(char)
(6,100*sizeof(char)
(7,free(data)
(8,'C')
(9,globalTrue)
(10,100)
(11,)
(12,RET)
(13,char *)
(14,1)
(15,data[100-1] = '\\\\0')
(16,printLine(data)
(17,1)
(18,exit(-1)
(19,50*sizeof(char)
(20,source)
(21,data)
(22,\'\\\\0\')
(23,(char *)
(24,NULL)
(25,1)
(26,50)
(27,100)
(28,memcpy(data, source, 100*sizeof(char)
(29,0)
(30,char)
(31,data[0] = '\\\\0')
(32,data == NULL)
(33,data)
(34,source[100-1] = '\\\\0')
(35,-1)
(36,1)
(37,data)
(38,data = NULL)
(39,data)
(40,source)
(41,if(globalTrue)
(42,)
(43,char)
(44,if (data == NULL)
(45,data)
(46,data[0] = \'\\\\0\')
(47,memset(source, 'C', 100-1)
(48,data)
(49,100)
(50,100-1)
(51,source[100-1])
(52,)
(53,data[0])
(54,100)
(55,100-1)
(56,'\\\\0')
(57,data[100-1])
(58,memset(source, \'C\', 100-1)
(59,'\\\\0')
(60,'\\\\0')
(61,data)
(62,source)
(63,data)
(64,source)
(65,sizeof(char)
(66,malloc(50*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^