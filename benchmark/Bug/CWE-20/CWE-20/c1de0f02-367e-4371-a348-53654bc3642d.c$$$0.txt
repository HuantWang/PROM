-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_popen_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_popen_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_popen_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_popen_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_popen_22_badGlobal
CWE78_OS_Command_Injection__char_console_popen_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(6,56,0)
(16,26,0)
(55,17,0)
(0,58,0)
(25,20,0)
(44,60,0)
(65,8,0)
(23,61,0)
(41,20,0)
(46,60,0)
(14,6,0)
(51,34,0)
(23,58,0)
(58,23,0)
(30,38,0)
(3,26,0)
(4,18,0)
(33,32,0)
(28,12,0)
(47,33,0)
(9,51,0)
(16,60,0)
(37,14,0)
(15,19,0)
(52,53,0)
(45,61,0)
(31,44,0)
(46,39,0)
(44,17,0)
(17,44,0)
(14,60,0)
(18,35,0)
(36,26,0)
(19,15,0)
(48,14,0)
(43,38,0)
(59,19,0)
(53,36,0)
(20,8,0)
(66,16,0)
(2,26,0)
(20,19,0)
(33,60,0)
(26,36,0)
(32,33,0)
(16,19,0)
(24,17,0)
(19,18,0)
(1,16,0)
(15,60,0)
(40,53,0)
(57,6,0)
(32,30,0)
(14,19,0)
(54,60,0)
(13,39,0)
(63,30,0)
(53,19,0)
(36,21,0)
(44,58,0)
(11,5,0)
(17,30,0)
(42,32,0)
(58,44,0)
(50,46,0)
(10,46,0)
(22,61,0)
(61,30,0)
(8,20,0)
(54,30,0)
(21,36,0)
(49,54,0)
(64,3,0)
(7,18,0)
(5,56,0)
(26,3,0)
(61,23,0)
(26,16,0)
(62,15,0)
(36,53,0)
(30,54,0)
(27,32,0)
(33,51,0)
(66,1,1)
(58,44,1)
(20,25,1)
(17,30,1)
(6,57,1)
(50,29,1)
(44,17,1)
(26,36,1)
(32,42,1)
(22,45,1)
(26,2,1)
(59,29,1)
(53,52,1)
(50,8,1)
(50,51,1)
(37,48,1)
(5,11,1)
(14,37,1)
(52,40,1)
(1,8,1)
(30,54,1)
(64,26,1)
(65,20,1)
(63,3,1)
(27,47,1)
(23,61,1)
(48,5,1)
(33,60,1)
(46,60,1)
(41,19,1)
(42,27,1)
(40,16,1)
(26,16,1)
(61,22,1)
(61,30,1)
(47,23,1)
(33,32,1)
(19,15,1)
(53,19,1)
(16,66,1)
(0,44,1)
(62,59,1)
(45,30,1)
(17,55,1)
(10,46,1)
(20,19,1)
(36,21,1)
(54,60,1)
(54,49,1)
(49,63,1)
(8,20,1)
(23,58,1)
(16,60,1)
(51,9,1)
(31,61,1)
(50,23,1)
(2,36,1)
(11,3,1)
(16,19,1)
(25,41,1)
(15,60,1)
(46,50,1)
(3,64,1)
(15,62,1)
(50,6,1)
(55,24,1)
(36,53,1)
(24,31,1)
(32,30,1)
(14,19,1)
(8,65,1)
(57,14,1)
(58,0,1)
(3,26,1)
(44,60,1)
(14,60,1)
(9,33,1)
(22,3,2)
(59,29,2)
(58,61,2)
(62,29,2)
(26,36,2)
(33,32,2)
(44,61,2)
(14,60,2)
(36,21,2)
(42,23,2)
(61,30,2)
(37,3,2)
(26,8,2)
(6,3,2)
(63,3,2)
(44,60,2)
(11,3,2)
(46,60,2)
(0,61,2)
(47,23,2)
(8,20,2)
(61,3,2)
(14,19,2)
(23,58,2)
(20,19,2)
(23,3,2)
(41,29,2)
(53,8,2)
(15,60,2)
(30,54,2)
(26,16,2)
(33,23,2)
(36,8,2)
(23,61,2)
(25,29,2)
(19,29,2)
(10,46,2)
(8,29,2)
(16,19,2)
(66,8,2)
(53,19,2)
(1,8,2)
(31,61,2)
(2,8,2)
(32,23,2)
(48,3,2)
(30,3,2)
(17,61,2)
(24,61,2)
(45,3,2)
(44,17,2)
(51,23,2)
(33,60,2)
(54,3,2)
(16,8,2)
(57,3,2)
(32,30,2)
(3,8,2)
(15,29,2)
(19,15,2)
(40,8,2)
(36,53,2)
(58,44,2)
(5,3,2)
(54,60,2)
(17,30,2)
(3,26,2)
(20,29,2)
(52,8,2)
(27,23,2)
(64,8,2)
(16,60,2)
(9,23,2)
(49,3,2)
(55,61,2)
(14,3,2)
(65,29,2)
-----------------------------------
(0,\\\'\\\\n\\\')
(1,data)
(2,stdin)
(3,fgets(data+dataLen, (int)
(4,if (100-dataLen > 1)
(5,printLine("fgets()
(6,data[dataLen] = \\\'\\\\0\\\')
(7,dataLen)
(8,100-dataLen > 1)
(9,\\\'\\\\0\\\')
(10,RET)
(11,"fgets()
(12,)
(13,if(CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)
(14,data[dataLen])
(15,strlen(data)
(16,data+dataLen)
(17,dataLen-1)
(18,)
(19,dataLen = strlen(data)
(20,100-dataLen)
(21,int)
(22,0)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,dataLen)
(25,dataLen)
(26,fgets(data+dataLen, (int)
(27,dataLen)
(28,if (fgets(data+dataLen, (int)
(29,CWE78_OS_Command_Injection__char_console_popen_22_badGlobal)
(30,dataLen = strlen(data)
(31,data)
(32,dataLen-1)
(33,data[dataLen-1])
(34,)
(35,)
(36,(int)
(37,dataLen)
(38,)
(39,)
(40,100)
(41,100)
(42,1)
(43,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(44,data[dataLen-1])
(45,dataLen)
(46,return data;)
(47,data)
(48,data)
(49,data)
(50,data)
(51,data[dataLen-1] = \\\'\\\\0\\\')
(52,dataLen)
(53,100-dataLen)
(54,strlen(data)
(55,1)
(56,)
(57,\\\'\\\\0\\\')
(58,data[dataLen-1] == \\\'\\\\n\\\')
(59,dataLen)
(60,char * data)
(61,dataLen > 0)
(62,data)
(63,dataLen)
(64,NULL)
(65,1)
(66,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^