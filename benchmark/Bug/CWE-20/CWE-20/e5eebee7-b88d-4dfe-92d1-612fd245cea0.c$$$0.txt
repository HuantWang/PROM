-----label-----
1
-----code-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_bad()
{
    wchar_t * data;
    CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType myUnion;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = wcslen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
                fclose(pFile);
            }
        }
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t dest[100] = L"";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printWLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
54,56
55,56
55,57
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
92,93
93,94
93,95
95,96
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
129,130
129,131
130,131
131,132
131,133
133,134
133,135
133,136
136,137
137,138
137,139
138,139
141,142
141,143
141,144
142,143
143,144
143,145
145,146
145,147
145,148
147,148
149,150
151,152
152,153
152,154
152,155
152,156
153,154
155,156
157,158
157,159
160,161
162,163
163,164
163,165
164,165
166,167
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,26,30,32,37,39,43,45,49,51,52,56,58,59,64,67,69,70,74,76,82,85,87,90,91,94,96,98,100,105,106,111,113,114,118,120,125,126,128,132,134,135,139,140,144,146,148,150,154,156,158,159,161,165,167
-----computeFrom-----
28,29
28,30
54,55
54,56
55,56
55,57
62,63
62,64
72,73
72,74
79,80
79,81
83,84
83,85
93,94
93,95
108,109
108,110
122,123
122,124
157,158
157,159
-----guardedBy-----
58,113
76,100
74,120
85,111
96,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_bad(){    wchar_t * data;    CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType myUnion;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
void
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_bad()
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_bad
{    wchar_t * data;    CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType myUnion;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType myUnion;
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType myUnion;
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_34_unionType
myUnion
myUnion
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = wcslen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }                fclose(pFile);            }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(68,9,0)
(40,6,0)
(65,7,0)
(20,16,0)
(8,45,0)
(12,8,0)
(60,9,0)
(42,55,0)
(8,12,0)
(53,49,0)
(68,7,0)
(23,7,0)
(49,55,0)
(32,39,0)
(3,12,0)
(61,34,0)
(50,61,0)
(49,23,0)
(62,35,0)
(55,49,0)
(37,10,0)
(15,64,0)
(40,8,0)
(43,13,0)
(19,6,0)
(8,13,0)
(4,8,0)
(43,64,0)
(72,46,0)
(31,6,0)
(69,16,0)
(54,46,0)
(55,9,0)
(51,14,0)
(71,40,0)
(24,61,0)
(22,68,0)
(44,9,0)
(11,70,0)
(10,34,0)
(8,40,0)
(47,1,0)
(14,13,0)
(29,50,0)
(63,23,0)
(30,35,0)
(18,34,0)
(70,16,0)
(26,23,0)
(27,7,0)
(52,43,0)
(40,71,0)
(9,7,0)
(10,39,0)
(39,10,0)
(50,10,0)
(56,29,0)
(16,49,0)
(34,7,0)
(50,29,0)
(17,13,0)
(33,45,0)
(35,68,0)
(6,40,0)
(48,29,0)
(41,24,0)
(45,49,0)
(66,14,0)
(13,17,0)
(59,50,0)
(13,1,0)
(25,72,0)
(28,61,0)
(21,50,0)
(57,45,0)
(2,17,0)
(5,13,0)
(45,9,0)
(45,8,0)
(6,49,0)
(58,39,0)
(36,23,0)
(0,17,0)
(16,70,0)
(67,7,0)
(72,25,1)
(0,2,1)
(43,13,1)
(39,32,1)
(49,55,1)
(10,39,1)
(50,10,1)
(32,58,1)
(11,16,1)
(22,35,1)
(30,43,1)
(62,30,1)
(52,54,1)
(24,41,1)
(14,13,1)
(14,51,1)
(51,66,1)
(4,40,1)
(8,4,1)
(69,49,1)
(20,69,1)
(19,45,1)
(40,71,1)
(38,24,1)
(68,22,1)
(16,20,1)
(45,49,1)
(53,9,1)
(58,37,1)
(12,3,1)
(28,10,1)
(29,48,1)
(54,72,1)
(68,9,1)
(41,50,1)
(17,0,1)
(8,13,1)
(33,14,1)
(21,28,1)
(45,9,1)
(70,16,1)
(8,45,1)
(25,12,1)
(12,8,1)
(30,14,1)
(56,21,1)
(44,60,1)
(8,40,1)
(70,11,1)
(9,44,1)
(59,29,1)
(60,65,1)
(55,42,1)
(6,31,1)
(45,57,1)
(16,49,1)
(43,52,1)
(13,17,1)
(50,59,1)
(40,6,1)
(2,5,1)
(35,62,1)
(31,19,1)
(5,70,1)
(57,33,1)
(66,13,1)
(6,49,1)
(52,12,1)
(55,9,1)
(37,68,1)
(48,56,1)
(42,53,1)
(30,70,1)
(3,8,1)
(50,29,1)
(40,6,2)
(72,12,2)
(13,17,2)
(8,13,2)
(12,8,2)
(2,70,2)
(45,14,2)
(4,14,2)
(70,16,2)
(16,49,2)
(52,14,2)
(66,70,2)
(3,14,2)
(45,49,2)
(10,39,2)
(14,13,2)
(0,70,2)
(8,45,2)
(50,10,2)
(51,70,2)
(14,70,2)
(54,12,2)
(33,14,2)
(43,14,2)
(40,71,2)
(55,9,2)
(25,12,2)
(31,14,2)
(5,70,2)
(8,14,2)
(6,14,2)
(40,14,2)
(8,40,2)
(43,13,2)
(17,70,2)
(6,49,2)
(57,14,2)
(13,70,2)
(19,14,2)
(12,14,2)
(50,29,2)
(49,55,2)
(45,9,2)
(68,9,2)
-----------------------------------
(0,"r")
(1,)
(2,FILENAME)
(3,NULL)
(4,pFile)
(5,pFile)
(6,100-dataLen)
(7,)
(8,fgetws(data+dataLen, (int)
(9,data = dataBuffer)
(10,* data = myUnion.unionSecond)
(11,1)
(12,fgetws(data+dataLen, (int)
(13,pFile = fopen(FILENAME, "r")
(14,pFile != NULL)
(15,if (fgetws(data+dataLen, (int)
(16,100-dataLen)
(17,fopen(FILENAME, "r")
(18,data)
(19,100)
(20,dataLen)
(21,dest)
(22,data)
(23,)
(24,printWLine(dest)
(25,"fgetws()
(26,dataLen)
(27,myUnion)
(28,"")
(29,100-1)
(30,myUnion)
(31,dataLen)
(32,unionSecond)
(33,data)
(34,)
(35,myUnion.unionFirst)
(36,if (100-dataLen > 1)
(37,data)
(38,RET)
(39,myUnion.unionSecond)
(40,(int)
(41,dest)
(42,data)
(43,fclose(pFile)
(44,dataBuffer)
(45,data+dataLen)
(46,)
(47,if (pFile != NULL)
(48,1)
(49,dataLen = wcslen(data)
(50,SNPRINTF(dest, 100-1, data)
(51,NULL)
(52,pFile)
(53,dataLen)
(54,\\\'\\\\0\\\')
(55,wcslen(data)
(56,100)
(57,dataLen)
(58,myUnion)
(59,data)
(60,data)
(61,)
(62,unionFirst)
(63,pFile)
(64,)
(65,"")
(66,pFile)
(67,data)
(68,myUnion.unionFirst = data)
(69,100)
(70,100-dataLen > 1)
(71,int)
(72,printLine("fgetws()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^