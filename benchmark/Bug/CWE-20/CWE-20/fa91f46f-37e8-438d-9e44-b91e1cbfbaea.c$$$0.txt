-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    if(badStatic)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* Append null terminator */
                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
                /* Eliminate CRLF */
                replace = wcschr(data, L'\r');
                if (replace)
                {
                    *replace = L'\0';
                }
                replace = wcschr(data, L'\n');
                if (replace)
                {
                    *replace = L'\0';
                }
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
65,68
65,69
65,70
65,71
65,72
65,73
65,74
65,75
65,76
65,77
65,78
65,79
65,80
65,81
65,82
66,67
67,68
67,69
68,69
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
92,93
95,96
96,97
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
123,125
124,125
126,127
128,129
128,130
129,130
129,131
130,131
130,132
130,133
130,134
131,132
133,134
135,136
135,137
136,137
136,138
137,138
139,140
141,142
142,143
144,145
145,146
146,147
148,149
150,151
152,153
152,154
153,154
153,155
154,155
154,156
154,157
155,156
157,158
159,160
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
169,172
169,173
170,171
172,173
174,175
176,177
178,179
178,180
179,180
179,181
180,181
182,183
184,185
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
190,195
191,192
193,194
195,196
195,197
196,197
196,198
198,199
200,201
201,202
201,203
202,203
204,205
206,207
206,208
207,208
208,209
208,210
211,212
212,213
212,214
213,214
213,215
215,216
219,220
219,221
220,221
220,222
221,222
221,223
222,223
224,225
226,227
226,228
227,228
230,231
232,233
233,234
233,235
234,235
234,236
235,236
237,238
237,239
238,239
240,241
240,242
241,242
243,244
244,245
244,246
248,249
249,250
249,251
250,251
252,253
252,254
252,255
253,254
255,256
258,259
258,260
259,260
261,262
262,263
263,264
263,265
264,265
265,266
268,269
269,270
269,271
270,271
272,273
272,274
272,275
273,274
275,276
278,279
278,280
279,280
281,282
282,283
283,284
283,285
284,285
285,286
289,290
289,291
290,291
290,292
291,292
293,294
295,296
296,297
297,298
297,299
298,299
300,301
302,303
302,304
303,304
303,305
304,305
306,307
308,309
309,310
310,311
310,312
311,312
313,314
315,316
316,317
-----nextToken-----
2,4,5,7,9,10,14,19,21,25,27,30,32,33,37,39,42,46,48,51,55,57,61,63,69,72,74,76,78,82,84,86,90,93,94,98,103,104,106,112,113,114,116,121,122,125,127,132,134,138,140,143,147,149,151,156,158,160,162,164,168,171,173,175,177,181,183,185,189,192,194,197,199,203,205,209,210,214,216,217,218,223,225,228,229,231,236,239,242,245,246,247,251,254,256,257,260,266,267,271,274,276,277,280,286,287,288,292,294,299,301,305,307,312,314,317
-----computeFrom-----
67,68
67,69
80,81
80,82
100,101
100,102
108,109
108,110
118,119
118,120
129,130
129,131
153,154
153,155
166,167
166,168
179,180
179,181
187,188
187,189
201,202
201,203
206,207
206,208
212,213
212,214
213,214
213,215
220,221
220,222
221,222
221,223
226,227
226,228
233,234
233,235
237,238
237,239
240,241
240,242
249,250
249,251
263,264
263,265
269,270
269,271
283,284
283,285
290,291
290,292
303,304
303,305
-----guardedBy-----
292,301
305,314
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    return data;}
if(badStatic)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
badStatic
badStatic
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            wchar_t *replace;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            size_t dataLen = wcslen(data);            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* Append null terminator */                data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';                /* Eliminate CRLF */                replace = wcschr(data, L'\r');                if (replace)                {                    *replace = L'\0';                }                replace = wcschr(data, L'\n');                if (replace)                {                    *replace = L'\0';                }            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)                {                    *replace = L'\0';                }
replace
replace
{                    *replace = L'\0';                }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
return data;
data
data
-----joern-----
(171,135,0)
(66,128,0)
(13,60,0)
(47,170,0)
(165,24,0)
(4,128,0)
(168,135,0)
(53,11,0)
(30,55,0)
(146,88,0)
(40,74,0)
(173,63,0)
(138,51,0)
(44,73,0)
(42,45,0)
(161,170,0)
(147,146,0)
(168,48,0)
(70,143,0)
(2,135,0)
(94,48,0)
(75,145,0)
(104,155,0)
(5,44,0)
(16,70,0)
(170,161,0)
(138,111,0)
(7,140,0)
(149,88,0)
(59,135,0)
(76,57,0)
(148,55,0)
(163,145,0)
(55,96,0)
(126,77,0)
(142,18,0)
(28,68,0)
(106,27,0)
(140,59,0)
(128,69,0)
(92,144,0)
(155,73,0)
(137,135,0)
(159,63,0)
(88,138,0)
(144,56,0)
(72,0,0)
(111,56,0)
(101,26,0)
(159,11,0)
(67,96,0)
(156,26,0)
(128,66,0)
(51,138,0)
(132,51,0)
(170,47,0)
(32,138,0)
(161,51,0)
(59,0,0)
(61,0,0)
(97,71,0)
(64,168,0)
(87,82,0)
(88,146,0)
(127,43,0)
(136,118,0)
(169,60,0)
(48,168,0)
(56,111,0)
(158,110,0)
(162,135,0)
(88,149,0)
(73,155,0)
(111,138,0)
(18,50,0)
(79,138,0)
(55,148,0)
(110,74,0)
(118,159,0)
(146,123,0)
(55,135,0)
(20,135,0)
(9,143,0)
(45,73,0)
(1,45,0)
(82,168,0)
(98,169,0)
(121,145,0)
(93,33,0)
(159,118,0)
(3,125,0)
(38,124,0)
(95,145,0)
(110,145,0)
(139,135,0)
(111,33,0)
(144,110,0)
(22,135,0)
(64,17,0)
(167,59,0)
(105,66,0)
(117,66,0)
(73,45,0)
(41,139,0)
(18,59,0)
(8,124,0)
(122,18,0)
(160,102,0)
(96,55,0)
(48,59,0)
(169,168,0)
(131,161,0)
(133,135,0)
(56,144,0)
(134,48,0)
(27,8,0)
(89,140,0)
(91,82,0)
(12,70,0)
(0,59,0)
(74,110,0)
(86,159,0)
(129,145,0)
(74,123,0)
(51,135,0)
(114,27,0)
(103,167,0)
(60,145,0)
(43,11,0)
(11,43,0)
(157,48,0)
(11,53,0)
(62,125,0)
(107,145,0)
(125,145,0)
(130,145,0)
(138,168,0)
(31,60,0)
(52,144,0)
(81,59,0)
(167,83,0)
(35,2,0)
(39,135,0)
(33,111,0)
(23,56,0)
(119,47,0)
(54,115,0)
(50,18,0)
(80,145,0)
(120,146,0)
(6,64,0)
(172,135,0)
(108,125,0)
(63,159,0)
(70,123,0)
(11,159,0)
(90,145,0)
(21,90,0)
(73,44,0)
(138,88,0)
(109,0,0)
(47,51,0)
(46,69,0)
(152,135,0)
(159,59,0)
(65,2,0)
(112,164,0)
(36,145,0)
(69,135,0)
(145,85,0)
(64,60,0)
(34,169,0)
(113,90,0)
(108,59,0)
(124,8,0)
(26,139,0)
(146,110,0)
(78,145,0)
(29,50,0)
(49,148,0)
(8,135,0)
(141,108,0)
(25,161,0)
(151,168,0)
(150,47,0)
(154,108,0)
(99,14,0)
(10,145,0)
(167,125,0)
(166,145,0)
(47,150,1)
(92,52,1)
(84,97,1)
(128,66,1)
(87,168,1)
(169,60,1)
(64,60,1)
(16,70,1)
(1,84,1)
(167,125,1)
(116,19,1)
(169,34,1)
(89,7,1)
(64,168,1)
(157,134,1)
(27,106,1)
(170,47,1)
(128,4,1)
(108,59,1)
(160,170,1)
(21,15,1)
(60,13,1)
(146,147,1)
(0,61,1)
(108,154,1)
(151,50,1)
(18,59,1)
(81,2,1)
(3,62,1)
(138,168,1)
(72,81,1)
(84,116,1)
(65,35,1)
(37,64,1)
(4,66,1)
(2,65,1)
(76,19,1)
(91,87,1)
(155,104,1)
(161,51,1)
(111,56,1)
(62,90,1)
(88,149,1)
(168,48,1)
(132,82,1)
(86,8,1)
(147,120,1)
(141,112,1)
(82,91,1)
(12,15,1)
(32,111,1)
(141,28,1)
(52,23,1)
(42,1,1)
(50,18,1)
(146,110,1)
(167,103,1)
(35,44,1)
(104,45,1)
(7,59,1)
(109,72,1)
(159,11,1)
(73,45,1)
(50,29,1)
(33,93,1)
(25,131,1)
(61,109,1)
(48,59,1)
(140,59,1)
(167,59,1)
(41,26,1)
(114,69,1)
(110,74,1)
(30,96,1)
(111,33,1)
(141,160,1)
(66,117,1)
(161,25,1)
(19,39,1)
(134,94,1)
(154,141,1)
(124,38,1)
(101,55,1)
(138,88,1)
(140,89,1)
(138,111,1)
(12,37,1)
(98,108,1)
(170,161,1)
(173,159,1)
(6,169,1)
(142,122,1)
(88,146,1)
(13,31,1)
(46,128,1)
(18,142,1)
(156,101,1)
(63,173,1)
(141,126,1)
(45,42,1)
(5,73,1)
(105,139,1)
(144,110,1)
(47,51,1)
(98,167,1)
(70,123,1)
(55,148,1)
(26,156,1)
(79,132,1)
(49,30,1)
(136,11,1)
(113,21,1)
(139,41,1)
(97,116,1)
(48,157,1)
(39,170,1)
(29,18,1)
(103,108,1)
(38,27,1)
(37,169,1)
(116,76,1)
(31,125,1)
(63,159,1)
(126,82,1)
(159,118,1)
(11,43,1)
(1,110,1)
(94,151,1)
(69,46,1)
(43,127,1)
(82,168,1)
(169,168,1)
(125,3,1)
(108,125,1)
(96,67,1)
(148,49,1)
(165,50,1)
(93,88,1)
(64,6,1)
(12,54,1)
(120,79,1)
(8,124,1)
(74,40,1)
(146,123,1)
(51,138,1)
(138,32,1)
(34,98,1)
(56,144,1)
(150,119,1)
(28,140,1)
(74,123,1)
(67,140,1)
(70,12,1)
(54,37,1)
(127,86,1)
(106,114,1)
(119,161,1)
(73,155,1)
(141,84,1)
(90,113,1)
(99,63,1)
(11,53,1)
(59,0,1)
(122,63,1)
(23,33,1)
(117,105,1)
(158,60,1)
(44,5,1)
(141,99,1)
(55,96,1)
(40,158,1)
(159,59,1)
(131,51,1)
(44,73,1)
(141,165,1)
(144,92,1)
(112,44,1)
(118,136,1)
(104,84,2)
(155,15,2)
(119,161,2)
(112,44,2)
(101,140,2)
(50,18,2)
(41,140,2)
(136,140,2)
(39,170,2)
(63,140,2)
(64,169,2)
(168,50,2)
(42,15,2)
(126,82,2)
(111,33,2)
(60,15,2)
(168,48,2)
(6,169,2)
(45,84,2)
(105,140,2)
(155,84,2)
(1,15,2)
(88,146,2)
(81,44,2)
(151,50,2)
(13,15,2)
(98,15,2)
(69,140,2)
(170,161,2)
(144,82,2)
(16,70,2)
(51,82,2)
(31,15,2)
(140,44,2)
(90,15,2)
(134,50,2)
(131,82,2)
(62,15,2)
(138,168,2)
(73,155,2)
(4,140,2)
(8,124,2)
(63,159,2)
(108,59,2)
(74,15,2)
(11,53,2)
(93,82,2)
(146,123,2)
(173,140,2)
(45,15,2)
(159,118,2)
(169,168,2)
(124,140,2)
(170,82,2)
(111,82,2)
(113,15,2)
(138,82,2)
(11,43,2)
(92,82,2)
(61,44,2)
(34,15,2)
(32,82,2)
(19,170,2)
(2,44,2)
(159,59,2)
(8,140,2)
(5,84,2)
(52,82,2)
(158,15,2)
(67,140,2)
(48,50,2)
(5,15,2)
(59,44,2)
(161,82,2)
(142,63,2)
(114,140,2)
(88,149,2)
(147,82,2)
(33,82,2)
(1,84,2)
(86,140,2)
(47,161,2)
(141,15,2)
(167,125,2)
(165,50,2)
(56,82,2)
(44,15,2)
(51,138,2)
(138,88,2)
(38,140,2)
(50,63,2)
(89,44,2)
(7,44,2)
(125,15,2)
(99,63,2)
(156,140,2)
(167,108,2)
(65,44,2)
(46,140,2)
(43,140,2)
(73,84,2)
(128,140,2)
(111,56,2)
(159,11,2)
(74,123,2)
(169,15,2)
(148,140,2)
(47,51,2)
(44,84,2)
(110,74,2)
(106,140,2)
(128,66,2)
(56,144,2)
(167,59,2)
(108,125,2)
(76,19,2)
(132,82,2)
(29,63,2)
(44,73,2)
(159,140,2)
(55,140,2)
(96,140,2)
(82,50,2)
(25,82,2)
(26,140,2)
(138,111,2)
(54,37,2)
(117,140,2)
(161,51,2)
(37,15,2)
(88,82,2)
(3,15,2)
(104,15,2)
(79,82,2)
(116,170,2)
(48,59,2)
(87,50,2)
(169,60,2)
(64,60,2)
(40,15,2)
(150,161,2)
(120,82,2)
(139,140,2)
(0,44,2)
(64,168,2)
(140,59,2)
(146,82,2)
(122,63,2)
(55,96,2)
(21,15,2)
(160,170,2)
(73,15,2)
(94,50,2)
(127,140,2)
(30,140,2)
(35,44,2)
(97,116,2)
(49,140,2)
(11,140,2)
(42,84,2)
(84,170,2)
(157,50,2)
(59,0,2)
(103,108,2)
(82,168,2)
(146,110,2)
(108,15,2)
(109,44,2)
(73,45,2)
(55,148,2)
(170,47,2)
(91,50,2)
(23,82,2)
(18,59,2)
(110,15,2)
(70,123,2)
(72,44,2)
(154,15,2)
(118,140,2)
(28,140,2)
(144,110,2)
(18,63,2)
(27,140,2)
(66,140,2)
-----------------------------------
(0,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(1,2)
(2,wsaDataInit = 1)
(3,INVALID_SOCKET)
(4,s_addr)
(5,NO_ERROR)
(6,acceptSocket)
(7,listenSocket)
(8,service.sin_port = htons(TCP_PORT)
(9,if(badStatic)
(10,recvResult)
(11,(struct sockaddr*)
(12,data)
(13,INVALID_SOCKET)
(14,)
(15,badStatic)
(16,RET)
(17,)
(18,listen(listenSocket, LISTEN_BACKLOG)
(19,replace)
(20,if (recvResult == SOCKET_ERROR || recvResult == 0)
(21,wsaDataInit)
(22,if (acceptSocket == SOCKET_ERROR)
(23,100)
(24,)
(25,SOCKET_ERROR)
(26,service.sin_family)
(27,service.sin_port)
(28,break;)
(29,SOCKET_ERROR)
(30,0)
(31,acceptSocket)
(32,0)
(33,sizeof(wchar_t)
(34,INVALID_SOCKET)
(35,wsaDataInit)
(36,if (acceptSocket != INVALID_SOCKET)
(37,wsaDataInit)
(38,TCP_PORT)
(39,\'\\\\0\')
(40,data)
(41,AF_INET)
(42,2)
(43,&service)
(44,WSAStartup(MAKEWORD(2,2)
(45,MAKEWORD(2,2)
(46,INADDR_ANY)
(47,recvResult == 0)
(48,accept(listenSocket, NULL, NULL)
(49,service)
(50,listen(listenSocket, LISTEN_BACKLOG)
(51,recvResult = recv(acceptSocket, (char *)
(52,dataLen)
(53,struct sockaddr*)
(54,WSACleanup()
(55,memset(&service, 0, sizeof(service)
(56,100 - dataLen - 1)
(57,)
(58,'\\\\0')
(59,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(60,acceptSocket = INVALID_SOCKET)
(61,IPPROTO_TCP)
(62,listenSocket)
(63,bind(listenSocket, (struct sockaddr*)
(64,CLOSE_SOCKET(acceptSocket)
(65,1)
(66,service.sin_addr)
(67,service)
(68,)
(69,service.sin_addr.s_addr = INADDR_ANY)
(70,return data;)
(71,)
(72,AF_INET)
(73,WSAStartup(MAKEWORD(2,2)
(74,wcslen(data)
(75,do)
(76,'\\\\0')
(77,)
(78,listenSocket)
(79,acceptSocket)
(80,wsaData)
(81,listenSocket)
(82,acceptSocket == SOCKET_ERROR)
(83,)
(84,0)
(85,)
(86,listenSocket)
(87,acceptSocket)
(88,(char *)
(89,INVALID_SOCKET)
(90,wsaDataInit = 0)
(91,SOCKET_ERROR)
(92,1)
(93,wchar_t)
(94,listenSocket)
(95,acceptSocket)
(96,&service)
(97,\'\\\\0\')
(98,acceptSocket)
(99,break;)
(100,'\\\\0')
(101,service)
(102,)
(103,listenSocket)
(104,wsaData)
(105,service)
(106,sin_port)
(107,replace)
(108,listenSocket != INVALID_SOCKET)
(109,SOCK_STREAM)
(110,dataLen = wcslen(data)
(111,sizeof(wchar_t)
(112,break;)
(113,0)
(114,service)
(115,)
(116,replace)
(117,sin_addr)
(118,sizeof(service)
(119,recvResult)
(120,data)
(121,if (listenSocket != INVALID_SOCKET)
(122,listenSocket)
(123,wchar_t * data)
(124,htons(TCP_PORT)
(125,listenSocket = INVALID_SOCKET)
(126,break;)
(127,service)
(128,service.sin_addr.s_addr)
(129,wsaDataInit)
(130,if (wsaDataInit)
(131,recvResult)
(132,recvResult)
(133,if (listen(listenSocket, LISTEN_BACKLOG)
(134,NULL)
(135,)
(136,service)
(137,if (bind(listenSocket, (struct sockaddr*)
(138,recv(acceptSocket, (char *)
(139,service.sin_family = AF_INET)
(140,listenSocket == INVALID_SOCKET)
(141,listenSocket)
(142,LISTEN_BACKLOG)
(143,)
(144,dataLen - 1)
(145,)
(146,data + dataLen)
(147,dataLen)
(148,sizeof(service)
(149,char *)
(150,0)
(151,acceptSocket)
(152,if (replace)
(153,\'\\\\0\')
(154,INVALID_SOCKET)
(155,&wsaData)
(156,sin_family)
(157,NULL)
(158,dataLen)
(159,bind(listenSocket, (struct sockaddr*)
(160,break;)
(161,recvResult == SOCKET_ERROR)
(162,if (WSAStartup(MAKEWORD(2,2)
(163,service)
(164,)
(165,break;)
(166,dataLen)
(167,CLOSE_SOCKET(listenSocket)
(168,acceptSocket = accept(listenSocket, NULL, NULL)
(169,acceptSocket != INVALID_SOCKET)
(170,recvResult == SOCKET_ERROR || recvResult == 0)
(171,if (replace)
(172,if (listenSocket == INVALID_SOCKET)
(173,SOCKET_ERROR)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^