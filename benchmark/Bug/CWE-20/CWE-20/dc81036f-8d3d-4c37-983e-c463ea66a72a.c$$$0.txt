-----label-----
1
-----code-----
twoIntsStruct * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badSource(twoIntsStruct * data)
{
    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
14,16
15,16
17,18
17,19
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
-----nextToken-----
3,5,6,9,11,12,16,21,25,27,30,32,36,37,41,43,48,50,53
-----computeFrom-----
19,20
19,21
31,32
31,33
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
twoIntsStruct * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badSource(twoIntsStruct * data){    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    return data;}
twoIntsStruct
twoIntsStruct
* CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badSource(twoIntsStruct * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }    return data;}
if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}    }
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(22,13,0)
(19,15,0)
(2,1,0)
(5,16,0)
(20,8,0)
(7,1,0)
(13,5,0)
(6,9,0)
(23,3,0)
(12,8,0)
(15,8,0)
(11,24,0)
(3,24,0)
(3,16,0)
(14,5,0)
(18,14,0)
(14,18,0)
(1,2,0)
(8,20,0)
(14,20,0)
(2,0,0)
(21,13,0)
(13,16,0)
(20,14,0)
(3,5,0)
(5,9,0)
(5,14,0)
(8,15,0)
(4,5,0)
(17,3,0)
(4,10,1)
(22,5,1)
(3,16,1)
(13,21,1)
(1,7,1)
(3,5,1)
(23,10,1)
(19,12,1)
(13,16,1)
(5,16,1)
(21,22,1)
(5,14,1)
(23,2,1)
(3,23,1)
(17,3,1)
(2,1,1)
(7,13,1)
(14,20,1)
(23,13,1)
(8,15,1)
(13,5,1)
(12,4,1)
(15,19,1)
(14,18,1)
(20,8,1)
(13,16,2)
(20,8,2)
(17,3,2)
(14,20,2)
(2,13,2)
(5,14,2)
(5,10,2)
(14,10,2)
(14,18,2)
(3,16,2)
(19,10,2)
(5,16,2)
(13,10,2)
(15,10,2)
(22,10,2)
(7,13,2)
(8,10,2)
(13,5,2)
(2,1,2)
(4,10,2)
(1,13,2)
(12,10,2)
(21,10,2)
(20,10,2)
(8,15,2)
(3,5,2)
-----------------------------------
(0,)
(1,-1)
(2,exit(-1)
(3,return data;)
(4,data)
(5,data = (twoIntsStruct *)
(6,if (data == NULL)
(7,1)
(8,50*sizeof(twoIntsStruct)
(9,)
(10,CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)
(11,if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22_badGlobal)
(12,50)
(13,data == NULL)
(14,(twoIntsStruct *)
(15,sizeof(twoIntsStruct)
(16,twoIntsStruct * data)
(17,RET)
(18,twoIntsStruct *)
(19,twoIntsStruct)
(20,malloc(50*sizeof(twoIntsStruct)
(21,NULL)
(22,data)
(23,data)
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^