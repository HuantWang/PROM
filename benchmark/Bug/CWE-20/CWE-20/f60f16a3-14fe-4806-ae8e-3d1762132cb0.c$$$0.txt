-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad()
{
    wchar_t * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;
    data = NULL;
    /* FLAW: Did not leave space for a null terminator */
    data = (wchar_t *)malloc(10*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
79,80
79,81
79,82
81,82
82,83
82,84
85,86
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
99,101
100,101
102,103
105,106
106,107
106,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,62,66,68,69,73,74,78,80,83,84,87,91,93,95,101,103,104,107,108,112,114,118,120
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
82,83
82,84
96,97
96,98
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad(){    wchar_t * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad
{    wchar_t * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;    data = NULL;    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,37,0)
(37,53,0)
(49,9,0)
(7,0,0)
(2,10,0)
(35,40,0)
(29,44,0)
(6,19,0)
(9,49,0)
(49,11,0)
(33,52,0)
(6,16,0)
(5,47,0)
(30,44,0)
(40,31,0)
(53,9,0)
(11,49,0)
(31,14,0)
(38,47,0)
(37,47,0)
(50,52,0)
(22,37,0)
(8,11,0)
(29,6,0)
(3,16,0)
(41,47,0)
(23,44,0)
(32,44,0)
(24,47,0)
(50,36,0)
(42,22,0)
(48,12,0)
(26,0,0)
(54,2,0)
(30,6,0)
(10,23,0)
(24,37,0)
(10,2,0)
(16,47,0)
(31,2,0)
(1,22,0)
(14,23,0)
(0,24,0)
(31,40,0)
(27,23,0)
(9,53,0)
(34,10,0)
(53,28,0)
(4,19,0)
(14,44,0)
(39,6,0)
(44,16,0)
(45,14,0)
(12,47,0)
(52,50,0)
(15,30,0)
(13,12,0)
(46,14,0)
(53,37,0)
(17,24,0)
(14,31,0)
(2,31,0)
(14,6,0)
(18,19,0)
(51,23,0)
(20,29,0)
(28,53,0)
(21,49,0)
(19,6,0)
(31,2,1)
(29,6,1)
(40,35,1)
(21,25,1)
(53,9,1)
(14,31,1)
(30,6,1)
(18,4,1)
(42,1,1)
(22,42,1)
(11,8,1)
(48,13,1)
(26,7,1)
(37,53,1)
(4,39,1)
(24,37,1)
(8,21,1)
(10,34,1)
(31,40,1)
(22,37,1)
(23,51,1)
(12,48,1)
(30,15,1)
(14,6,1)
(7,22,1)
(33,22,1)
(10,23,1)
(39,24,1)
(34,45,1)
(17,0,1)
(49,11,1)
(2,54,1)
(45,46,1)
(14,23,1)
(25,12,1)
(43,29,1)
(51,27,1)
(20,30,1)
(50,52,1)
(7,50,1)
(2,10,1)
(29,20,1)
(46,23,1)
(54,10,1)
(52,33,1)
(35,2,1)
(27,6,1)
(53,28,1)
(0,26,1)
(1,37,1)
(6,19,1)
(24,17,1)
(15,14,1)
(19,18,1)
(9,49,1)
(31,2,2)
(30,6,2)
(14,31,2)
(2,10,2)
(53,28,2)
(50,52,2)
(33,22,2)
(10,23,2)
(29,6,2)
(37,53,2)
(53,9,2)
(31,40,2)
(49,11,2)
(6,19,2)
(9,49,2)
(14,23,2)
(24,37,2)
(22,37,2)
(50,22,2)
(14,6,2)
(52,22,2)
-----------------------------------
(0,myUnion.unionFirst)
(1,data)
(2,wcslen(source)
(3,data)
(4,myUnion)
(5,data)
(6,* data = myUnion.unionSecond)
(7,myUnion)
(8,wchar_t)
(9,malloc(10*sizeof(wchar_t)
(10,wcslen(source)
(11,sizeof(wchar_t)
(12,data = NULL)
(13,data)
(14,memcpy(data, source, (wcslen(source)
(15,data)
(16,)
(17,data)
(18,unionSecond)
(19,myUnion.unionSecond)
(20,data)
(21,10)
(22,data == NULL)
(23,source[10+1] = SRC_STRING)
(24,myUnion.unionFirst = data)
(25,data)
(26,unionFirst)
(27,source)
(28,wchar_t *)
(29,free(data)
(30,printWLine(data)
(31,(wcslen(source)
(32,source)
(33,1)
(34,source)
(35,wchar_t)
(36,)
(37,data = (wchar_t *)
(38,if (data == NULL)
(39,data)
(40,sizeof(wchar_t)
(41,myUnion)
(42,NULL)
(43,RET)
(44,)
(45,source)
(46,data)
(47,)
(48,NULL)
(49,10*sizeof(wchar_t)
(50,exit(-1)
(51,SRC_STRING)
(52,-1)
(53,(wchar_t *)
(54,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^