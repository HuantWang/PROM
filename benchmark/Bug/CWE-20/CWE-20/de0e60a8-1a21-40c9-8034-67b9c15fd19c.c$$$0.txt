-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memcpy(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
69,71
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,68,70,73,74,78,81,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memcpy(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memcpy(data, source, 10*sizeof(int));
memcpy(data, source, 10*sizeof(int))
memcpy
memcpy
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(26,9,0)
(0,13,0)
(3,26,0)
(1,19,0)
(15,35,0)
(11,29,0)
(10,30,0)
(14,41,0)
(14,11,0)
(4,11,0)
(27,26,0)
(27,19,0)
(21,3,0)
(36,19,0)
(9,20,0)
(17,29,0)
(12,26,0)
(34,15,0)
(11,26,0)
(23,27,0)
(9,26,0)
(16,32,0)
(35,31,0)
(28,2,0)
(5,40,0)
(11,19,0)
(37,14,0)
(40,9,0)
(39,17,0)
(6,29,0)
(8,41,0)
(20,9,0)
(11,14,0)
(38,13,0)
(41,14,0)
(22,27,0)
(23,29,0)
(26,30,0)
(7,11,0)
(25,27,0)
(35,15,0)
(27,23,0)
(19,2,0)
(9,40,0)
(29,2,0)
(3,19,0)
(24,32,0)
(18,2,0)
(13,26,0)
(3,29,0)
(11,17,0)
(39,13,1)
(34,13,1)
(41,8,1)
(33,3,1)
(4,17,1)
(11,17,1)
(27,19,1)
(15,34,1)
(37,7,1)
(3,26,1)
(16,24,1)
(0,38,1)
(36,1,1)
(3,19,1)
(26,9,1)
(14,41,1)
(38,26,1)
(9,20,1)
(8,37,1)
(24,19,1)
(5,12,1)
(12,32,1)
(32,16,1)
(19,36,1)
(9,40,1)
(27,26,1)
(7,4,1)
(11,14,1)
(25,22,1)
(23,27,1)
(39,35,1)
(35,15,1)
(22,11,1)
(17,39,1)
(3,21,1)
(39,32,1)
(27,25,1)
(11,26,1)
(40,5,1)
(13,26,1)
(11,19,1)
(21,23,1)
(13,0,1)
(9,20,2)
(40,32,2)
(26,32,2)
(9,40,2)
(13,32,2)
(13,26,2)
(26,9,2)
(9,32,2)
(11,14,2)
(27,26,2)
(27,19,2)
(11,26,2)
(35,15,2)
(15,13,2)
(38,32,2)
(14,41,2)
(11,19,2)
(11,17,2)
(34,13,2)
(5,32,2)
(23,27,2)
(12,32,2)
(35,13,2)
(0,32,2)
(3,19,2)
(3,26,2)
-----------------------------------
(0,NULL)
(1,data)
(2,)
(3,free(data)
(4,data)
(5,10)
(6,source)
(7,source)
(8,int)
(9,(int *)
(10,if (data == NULL)
(11,memcpy(data, source, 10*sizeof(int)
(12,data)
(13,data == NULL)
(14,10*sizeof(int)
(15,-1)
(16,5)
(17,source[10] = {0})
(18,data)
(19,data = NULL)
(20,int *)
(21,data)
(22,data)
(23,printIntLine(data[0])
(24,GLOBAL_CONST_FIVE)
(25,0)
(26,data = (int *)
(27,data[0])
(28,if(GLOBAL_CONST_FIVE==5)
(29,)
(30,)
(31,)
(32,GLOBAL_CONST_FIVE==5)
(33,RET)
(34,1)
(35,exit(-1)
(36,NULL)
(37,10)
(38,data)
(39,source)
(40,malloc(10)
(41,sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^