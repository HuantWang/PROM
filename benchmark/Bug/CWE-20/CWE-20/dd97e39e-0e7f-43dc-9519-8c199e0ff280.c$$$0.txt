-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
83,85
83,86
84,85
84,86
85,86
88,89
88,90
89,90
90,91
90,92
91,92
91,93
92,93
94,95
97,98
97,99
97,100
97,101
98,99
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
110,111
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,29,31,32,36,38,41,43,46,47,51,53,58,60,65,66,69,70,73,79,81,82,86,87,93,95,96,101,102,105,106,109,114,117,119,124,125,129,131
-----computeFrom-----
42,43
42,44
49,50
49,51
63,64
63,65
67,68
67,69
76,77
76,78
84,85
84,86
90,91
90,92
99,100
99,101
103,104
103,105
-----guardedBy-----
86,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink(int dataArray[])
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(20,57,0)
(68,63,0)
(52,13,0)
(24,44,0)
(33,59,0)
(48,38,0)
(35,62,0)
(56,24,0)
(43,45,0)
(60,15,0)
(12,67,0)
(30,57,0)
(8,34,0)
(1,4,0)
(38,49,0)
(51,36,0)
(20,40,0)
(28,27,0)
(21,65,0)
(27,40,0)
(9,57,0)
(2,9,0)
(31,36,0)
(27,15,0)
(34,8,0)
(65,44,0)
(18,65,0)
(12,27,0)
(54,4,0)
(20,44,0)
(61,57,0)
(62,13,0)
(17,44,0)
(33,62,0)
(69,27,0)
(71,53,0)
(36,62,0)
(59,45,0)
(53,15,0)
(27,12,0)
(66,40,0)
(25,9,0)
(63,68,0)
(14,4,0)
(40,42,0)
(62,22,0)
(29,61,0)
(46,22,0)
(41,20,0)
(27,44,0)
(55,14,0)
(44,4,0)
(64,4,0)
(47,59,0)
(32,13,0)
(13,62,0)
(16,60,0)
(39,53,0)
(63,70,0)
(11,34,0)
(0,68,0)
(23,33,0)
(24,70,0)
(7,33,0)
(19,4,0)
(58,20,0)
(44,24,0)
(37,15,0)
(33,44,0)
(24,56,0)
(13,72,0)
(26,15,0)
(4,22,0)
(50,63,0)
(8,5,0)
(14,44,0)
(3,57,0)
(70,24,0)
(70,63,0)
(6,4,0)
(11,65,1)
(18,44,1)
(27,69,1)
(20,41,1)
(33,23,1)
(15,26,1)
(53,15,1)
(27,40,1)
(23,7,1)
(69,28,1)
(68,0,1)
(20,57,1)
(27,44,1)
(55,38,1)
(63,68,1)
(33,62,1)
(12,27,1)
(2,57,1)
(58,9,1)
(48,36,1)
(8,34,1)
(57,3,1)
(59,47,1)
(70,63,1)
(40,66,1)
(21,18,1)
(7,36,1)
(32,52,1)
(47,33,1)
(53,39,1)
(13,72,1)
(37,59,1)
(16,12,1)
(41,58,1)
(71,15,1)
(28,53,1)
(3,30,1)
(31,51,1)
(25,2,1)
(52,35,1)
(34,11,1)
(0,50,1)
(61,29,1)
(27,15,1)
(24,70,1)
(9,57,1)
(38,48,1)
(39,71,1)
(30,8,1)
(26,37,1)
(24,56,1)
(65,44,1)
(2,61,1)
(71,60,1)
(62,13,1)
(33,44,1)
(13,32,1)
(9,25,1)
(14,44,1)
(65,21,1)
(60,16,1)
(50,17,1)
(14,55,1)
(44,24,1)
(60,15,1)
(29,40,1)
(20,44,1)
(36,31,1)
(66,20,1)
(51,9,1)
(17,62,1)
(10,14,1)
(30,65,1)
(61,57,1)
(36,62,1)
(55,53,1)
(38,36,2)
(59,36,2)
(63,68,2)
(24,70,2)
(27,15,2)
(70,63,2)
(14,44,2)
(69,53,2)
(7,36,2)
(2,9,2)
(27,44,2)
(71,53,2)
(8,34,2)
(60,53,2)
(41,9,2)
(15,36,2)
(47,36,2)
(53,53,2)
(39,53,2)
(71,36,2)
(12,53,2)
(8,65,2)
(12,27,2)
(20,44,2)
(33,44,2)
(20,57,2)
(24,56,2)
(11,65,2)
(9,57,2)
(9,9,2)
(27,53,2)
(25,9,2)
(66,9,2)
(65,44,2)
(40,9,2)
(26,36,2)
(48,36,2)
(44,24,2)
(33,62,2)
(60,15,2)
(62,13,2)
(61,57,2)
(29,9,2)
(37,36,2)
(16,53,2)
(39,36,2)
(27,40,2)
(28,53,2)
(36,62,2)
(13,72,2)
(53,36,2)
(33,36,2)
(34,65,2)
(53,15,2)
(61,9,2)
(23,36,2)
(58,9,2)
(20,9,2)
-----------------------------------
(0,int)
(1,if (buffer == NULL)
(2,i)
(3,0)
(4,)
(5,)
(6,buffer)
(7,buffer)
(8,exit(-1)
(9,i < 10)
(10,RET)
(11,1)
(12,printIntLine(buffer[i])
(13,dataArray[2])
(14,free(buffer)
(15,i = 0)
(16,i)
(17,buffer)
(18,buffer)
(19,if (data >= 0)
(20,buffer[i])
(21,NULL)
(22,)
(23,data)
(24,(int *)
(25,10)
(26,0)
(27,buffer[i])
(28,buffer)
(29,i)
(30,i)
(31,0)
(32,2)
(33,buffer[data])
(34,-1)
(35,data)
(36,data >= 0)
(37,i)
(38,printLine("ERROR: Array index is negative.")
(39,10)
(40,buffer[i] = 0)
(41,i)
(42,)
(43,for(i = 0; i < 10; i++)
(44,* buffer = (int *)
(45,)
(46,data)
(47,1)
(48,"ERROR: Array index is negative.")
(49,)
(50,10)
(51,data)
(52,dataArray)
(53,i < 10)
(54,i)
(55,buffer)
(56,int *)
(57,i = 0)
(58,buffer)
(59,buffer[data] = 1)
(60,i++)
(61,i++)
(62,data = dataArray[2])
(63,10 * sizeof(int)
(64,for (i = 0; i < 10; i++)
(65,buffer == NULL)
(66,0)
(67,)
(68,sizeof(int)
(69,i)
(70,malloc(10 * sizeof(int)
(71,i)
(72,int dataArray[])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^