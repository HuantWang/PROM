-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))
        {
            int64_t result = data * data;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
60,61
60,62
61,62
61,63
62,63
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,25,27,32,33,37,43,45,49,51,55,57,63,67,68,70,73,75,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
23,24
23,25
30,31
30,32
47,48
47,49
60,61
60,62
84,85
84,86
-----guardedBy-----
70,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_12_bad()
CWE190_Integer_Overflow__int64_t_max_square_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX)
imaxabs((intmax_t)data)
imaxabs
imaxabs
(intmax_t)data
intmax_t
intmax_t
intmax_t

data
data
sqrtl(LLONG_MAX)
sqrtl
sqrtl
LLONG_MAX
LLONG_MAX
{            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,38,0)
(28,13,0)
(24,34,0)
(11,24,0)
(2,3,0)
(46,13,0)
(29,14,0)
(34,24,0)
(33,24,0)
(23,35,0)
(41,18,0)
(39,38,0)
(10,27,0)
(38,10,0)
(20,16,0)
(44,43,0)
(30,10,0)
(26,42,0)
(19,13,0)
(35,4,0)
(9,26,0)
(45,22,0)
(40,43,0)
(38,26,0)
(3,40,0)
(22,4,0)
(3,43,0)
(17,40,0)
(35,25,0)
(24,33,0)
(34,29,0)
(7,26,0)
(29,34,0)
(38,40,0)
(4,32,0)
(15,25,0)
(22,35,0)
(1,25,0)
(21,10,0)
(25,35,0)
(31,14,0)
(0,13,0)
(5,20,0)
(6,38,0)
(14,29,0)
(25,26,0)
(25,10,0)
(12,4,0)
(24,26,0)
(24,10,0)
(29,34,1)
(34,24,1)
(25,15,1)
(24,11,1)
(2,40,1)
(17,29,1)
(5,29,1)
(20,5,1)
(29,14,1)
(35,25,1)
(36,26,1)
(14,31,1)
(3,2,1)
(36,10,1)
(31,34,1)
(8,22,1)
(21,30,1)
(9,37,1)
(11,36,1)
(38,10,1)
(15,1,1)
(1,23,1)
(45,35,1)
(8,20,1)
(25,26,1)
(23,36,1)
(3,40,1)
(10,21,1)
(24,26,1)
(40,38,1)
(25,10,1)
(22,35,1)
(39,17,1)
(24,33,1)
(30,37,1)
(26,7,1)
(38,26,1)
(38,6,1)
(24,10,1)
(22,45,1)
(7,9,1)
(8,3,1)
(6,39,1)
(37,0,1)
(40,29,2)
(40,38,2)
(25,26,2)
(35,36,2)
(22,35,2)
(38,26,2)
(7,37,2)
(6,29,2)
(29,14,2)
(24,36,2)
(1,36,2)
(21,37,2)
(26,37,2)
(25,36,2)
(3,29,2)
(15,36,2)
(3,40,2)
(20,29,2)
(24,33,2)
(29,34,2)
(39,29,2)
(38,10,2)
(2,29,2)
(31,36,2)
(14,36,2)
(25,10,2)
(35,25,2)
(10,37,2)
(9,37,2)
(30,37,2)
(22,36,2)
(34,36,2)
(24,10,2)
(5,29,2)
(34,24,2)
(23,36,2)
(45,36,2)
(29,36,2)
(24,26,2)
(17,29,2)
(38,29,2)
(11,36,2)
-----------------------------------
(0,L)
(1,data)
(2,result)
(3,printLongLongLine(result)
(4,)
(5,"data value is too large to perform arithmetic safely.")
(6,data)
(7,2)
(8,RET)
(9,data)
(10,data = LLONG_MAX)
(11,data)
(12,result)
(13,)
(14,sqrtl(LLONG_MAX)
(15,data)
(16,)
(17,result)
(18,)
(19,data)
(20,printLine("data value is too large to perform arithmetic safely.")
(21,LLONG_MAX)
(22,printLongLongLine(result)
(23,result)
(24,(intmax_t)
(25,data * data)
(26,data = 2)
(27,)
(28,if(globalReturnsTrueOrFalse()
(29,imaxabs((intmax_t)
(30,data)
(31,LLONG_MAX)
(32,)
(33,intmax_t)
(34,imaxabs((intmax_t)
(35,result = data * data)
(36,globalReturnsTrueOrFalse()
(37,globalReturnsTrueOrFalse()
(38,data * data)
(39,data)
(40,result = data * data)
(41,if (imaxabs((intmax_t)
(42,)
(43,)
(44,result)
(45,result)
(46,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^