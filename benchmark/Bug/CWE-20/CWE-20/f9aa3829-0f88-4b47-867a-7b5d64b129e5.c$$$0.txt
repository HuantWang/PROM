-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_postinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            data++;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
67,68
67,69
67,70
68,69
69,70
71,72
72,73
72,74
72,75
73,74
74,75
75,76
77,78
78,79
78,80
80,81
80,82
82,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
92,95
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
101,102
103,104
104,105
104,106
106,107
106,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
119,120
119,121
120,121
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,65,66,70,76,79,81,84,88,90,95,97,102,105,107,110,114,116,121,122
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
63,64
63,65
93,94
93,95
-----guardedBy-----
38,54
95,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_postinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fgets_postinc_12_bad()
CWE190_Integer_Overflow__int_fgets_postinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(4,48,0)
(58,10,0)
(14,26,0)
(24,44,0)
(19,48,0)
(55,33,0)
(29,17,0)
(45,30,0)
(61,51,0)
(49,48,0)
(51,20,0)
(51,24,0)
(21,44,0)
(55,48,0)
(23,56,0)
(31,48,0)
(19,24,0)
(4,33,0)
(30,9,0)
(4,30,0)
(28,49,0)
(3,17,0)
(40,31,0)
(55,17,0)
(0,30,0)
(25,48,0)
(5,52,0)
(2,6,0)
(18,49,0)
(39,29,0)
(55,30,0)
(53,23,0)
(48,19,0)
(20,51,0)
(57,29,0)
(37,20,0)
(29,23,0)
(41,44,0)
(36,17,0)
(44,47,0)
(35,51,0)
(32,52,0)
(39,23,0)
(4,17,0)
(11,24,0)
(31,17,0)
(49,30,0)
(34,51,0)
(29,30,0)
(8,33,0)
(27,55,0)
(49,17,0)
(38,58,0)
(13,55,0)
(12,39,0)
(43,4,0)
(7,2,0)
(31,23,0)
(46,19,0)
(17,52,0)
(48,16,0)
(59,24,0)
(26,55,0)
(26,33,0)
(60,29,0)
(1,52,0)
(31,30,0)
(29,48,0)
(15,42,0)
(29,17,1)
(49,28,1)
(40,54,1)
(30,0,1)
(29,30,1)
(39,12,1)
(20,51,1)
(57,31,1)
(55,30,1)
(13,27,1)
(31,17,1)
(58,38,1)
(43,49,1)
(4,30,1)
(31,30,1)
(19,24,1)
(39,29,1)
(38,20,1)
(55,17,1)
(31,48,1)
(0,45,1)
(61,35,1)
(28,18,1)
(54,48,1)
(46,25,1)
(50,39,1)
(29,48,1)
(37,51,1)
(55,48,1)
(17,3,1)
(14,55,1)
(50,2,1)
(59,22,1)
(45,22,1)
(50,26,1)
(19,46,1)
(51,24,1)
(11,59,1)
(7,49,1)
(55,13,1)
(34,61,1)
(49,30,1)
(60,57,1)
(26,14,1)
(24,11,1)
(20,37,1)
(4,17,1)
(49,17,1)
(18,54,1)
(27,4,1)
(54,58,1)
(26,55,1)
(35,24,1)
(2,7,1)
(3,36,1)
(22,17,1)
(51,34,1)
(4,43,1)
(12,29,1)
(4,48,1)
(48,19,1)
(31,40,1)
(29,60,1)
(25,20,1)
(49,48,1)
(54,30,1)
(59,22,2)
(38,20,2)
(31,17,2)
(27,49,2)
(19,24,2)
(31,30,2)
(24,22,2)
(45,22,2)
(18,54,2)
(4,17,2)
(13,49,2)
(61,22,2)
(51,24,2)
(0,22,2)
(26,49,2)
(34,22,2)
(49,30,2)
(49,48,2)
(55,30,2)
(29,17,2)
(29,54,2)
(46,20,2)
(35,22,2)
(48,19,2)
(30,22,2)
(37,22,2)
(48,20,2)
(2,49,2)
(57,54,2)
(29,48,2)
(43,49,2)
(7,49,2)
(4,30,2)
(55,17,2)
(39,29,2)
(51,22,2)
(4,49,2)
(40,54,2)
(12,54,2)
(49,17,2)
(25,20,2)
(55,49,2)
(19,20,2)
(4,48,2)
(49,54,2)
(20,22,2)
(60,54,2)
(31,54,2)
(26,55,2)
(29,30,2)
(28,54,2)
(20,51,2)
(14,49,2)
(58,20,2)
(39,54,2)
(11,22,2)
(55,48,2)
(31,48,2)
-----------------------------------
(0,2)
(1,if(globalReturnsTrueOrFalse()
(2,printLine("data value is too large to perform arithmetic safely.")
(3,0)
(4,data++)
(5,if(globalReturnsTrueOrFalse()
(6,)
(7,"data value is too large to perform arithmetic safely.")
(8,result)
(9,)
(10,)
(11,"")
(12,result)
(13,data)
(14,result)
(15,if (data < INT_MAX)
(16,)
(17,data = 0)
(18,data)
(19,atoi(inputBuffer)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,inputBuffer)
(22,globalReturnsTrueOrFalse()
(23,)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,data)
(26,printIntLine(result)
(27,result)
(28,INT_MAX)
(29,result = data)
(30,data = 2)
(31,data++)
(32,data)
(33,)
(34,stdin)
(35,inputBuffer)
(36,data)
(37,NULL)
(38,"fgets()
(39,printIntLine(result)
(40,data)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,)
(43,data)
(44,)
(45,data)
(46,inputBuffer)
(47,)
(48,data = atoi(inputBuffer)
(49,data < INT_MAX)
(50,RET)
(51,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(52,)
(53,result)
(54,globalReturnsTrueOrFalse()
(55,result = data)
(56,)
(57,result)
(58,printLine("fgets()
(59,inputBuffer)
(60,data)
(61,CHAR_ARRAY_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^