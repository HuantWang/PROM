-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticFive==5)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
41,42
41,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
89,90
90,91
92,93
93,94
94,95
94,96
95,96
95,97
96,97
98,99
101,102
101,103
101,104
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
115,117
115,118
115,119
116,117
117,118
117,119
118,119
121,122
121,123
122,123
125,126
126,127
128,129
129,130
130,131
130,132
131,132
133,134
133,135
134,135
136,137
138,139
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,42,44,47,49,50,54,56,59,61,64,65,69,71,76,78,83,84,87,88,91,97,99,100,104,105,111,113,114,119,120,123,124,127,132,135,137,142,143,147,149
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
60,61
60,62
67,68
67,69
81,82
81,83
85,86
85,87
94,95
94,96
102,103
102,104
108,109
108,110
117,118
117,119
121,122
121,123
-----guardedBy-----
104,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad(){    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07_bad
{    int data;    /* Initialize data */    data = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticFive==5)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
staticFive==5
staticFive
staticFive
5
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(12,9,0)
(82,72,0)
(45,41,0)
(70,8,0)
(9,72,0)
(1,15,0)
(66,47,0)
(65,47,0)
(27,63,0)
(39,48,0)
(12,21,0)
(11,67,0)
(21,41,0)
(49,41,0)
(32,7,0)
(24,50,0)
(64,48,0)
(23,21,0)
(74,12,0)
(50,21,0)
(24,18,0)
(7,15,0)
(37,6,0)
(15,61,0)
(13,3,0)
(85,20,0)
(80,57,0)
(44,35,0)
(19,28,0)
(84,18,0)
(55,31,0)
(15,7,0)
(79,28,0)
(10,21,0)
(6,8,0)
(50,24,0)
(60,41,0)
(20,18,0)
(48,22,0)
(73,63,0)
(28,25,0)
(34,45,0)
(31,55,0)
(5,4,0)
(46,35,0)
(14,16,0)
(18,20,0)
(28,21,0)
(78,23,0)
(7,55,0)
(54,47,0)
(25,52,0)
(56,50,0)
(33,4,0)
(71,22,0)
(40,15,0)
(51,76,0)
(25,28,0)
(55,57,0)
(38,31,0)
(21,50,0)
(48,47,0)
(17,12,0)
(30,9,0)
(18,24,0)
(22,26,0)
(28,22,0)
(51,67,0)
(67,51,0)
(81,41,0)
(43,55,0)
(36,65,0)
(0,23,0)
(69,77,0)
(75,57,0)
(2,57,0)
(58,41,0)
(77,83,0)
(45,21,0)
(48,21,0)
(41,29,0)
(28,8,0)
(35,8,0)
(4,55,0)
(50,56,0)
(3,47,0)
(62,3,0)
(42,41,0)
(12,55,0)
(53,16,0)
(68,8,0)
(4,55,1)
(18,20,1)
(73,27,1)
(35,8,1)
(4,33,1)
(77,69,1)
(25,28,1)
(69,4,1)
(74,4,1)
(7,32,1)
(50,24,1)
(3,47,1)
(79,19,1)
(35,44,1)
(21,50,1)
(28,8,1)
(34,35,1)
(16,14,1)
(48,39,1)
(54,23,1)
(6,8,1)
(22,71,1)
(23,0,1)
(37,25,1)
(15,7,1)
(66,54,1)
(9,30,1)
(38,43,1)
(84,10,1)
(64,3,1)
(33,5,1)
(44,46,1)
(45,34,1)
(70,9,1)
(51,67,1)
(40,1,1)
(48,47,1)
(24,18,1)
(68,70,1)
(27,55,1)
(32,40,1)
(46,6,1)
(67,11,1)
(13,47,1)
(6,37,1)
(10,16,1)
(36,22,1)
(59,45,1)
(53,15,1)
(46,8,1)
(59,16,1)
(62,13,1)
(28,21,1)
(45,21,1)
(20,85,1)
(7,55,1)
(65,47,1)
(30,12,1)
(12,21,1)
(28,22,1)
(17,74,1)
(12,55,1)
(47,66,1)
(65,36,1)
(55,31,1)
(5,3,1)
(34,77,1)
(0,78,1)
(50,56,1)
(8,68,1)
(39,64,1)
(63,73,1)
(23,21,1)
(71,48,1)
(13,65,1)
(48,21,1)
(54,51,1)
(53,63,1)
(85,84,1)
(12,17,1)
(11,23,1)
(3,62,1)
(78,21,1)
(19,35,1)
(28,79,1)
(14,53,1)
(1,63,1)
(31,38,1)
(47,16,2)
(19,35,2)
(71,3,2)
(39,3,2)
(4,16,2)
(9,4,2)
(28,8,2)
(51,23,2)
(35,35,2)
(84,16,2)
(12,4,2)
(11,23,2)
(33,16,2)
(3,16,2)
(44,35,2)
(12,21,2)
(13,3,2)
(66,16,2)
(23,16,2)
(23,21,2)
(50,24,2)
(24,16,2)
(55,31,2)
(28,22,2)
(12,55,2)
(65,3,2)
(30,4,2)
(7,63,2)
(28,21,2)
(46,4,2)
(4,55,2)
(3,47,2)
(34,16,2)
(69,4,2)
(18,16,2)
(37,35,2)
(6,35,2)
(15,63,2)
(64,3,2)
(8,4,2)
(15,7,2)
(40,63,2)
(48,47,2)
(21,50,2)
(70,4,2)
(67,23,2)
(51,67,2)
(0,16,2)
(74,4,2)
(35,8,2)
(20,16,2)
(68,4,2)
(10,16,2)
(7,55,2)
(1,63,2)
(3,3,2)
(45,21,2)
(28,35,2)
(44,4,2)
(5,16,2)
(77,4,2)
(79,35,2)
(25,35,2)
(65,47,2)
(6,8,2)
(62,3,2)
(85,16,2)
(50,56,2)
(21,16,2)
(78,16,2)
(54,16,2)
(18,20,2)
(17,4,2)
(25,28,2)
(24,18,2)
(35,4,2)
(62,16,2)
(22,3,2)
(46,35,2)
(45,16,2)
(50,16,2)
(48,21,2)
(48,3,2)
(32,63,2)
(13,16,2)
(36,3,2)
-----------------------------------
(0,NULL)
(1,stdin)
(2,data)
(3,i < 10)
(4,data >= 0)
(5,data)
(6,i++)
(7,&data)
(8,i = 0)
(9,buffer[data] = 1)
(10,buffer)
(11,1)
(12,buffer[data])
(13,i)
(14,5)
(15,fscanf(stdin, "%d", &data)
(16,staticFive==5)
(17,data)
(18,10 * sizeof(int)
(19,buffer)
(20,sizeof(int)
(21,* buffer = (int *)
(22,buffer[i] = 0)
(23,buffer == NULL)
(24,malloc(10 * sizeof(int)
(25,printIntLine(buffer[i])
(26,)
(27,staticFive)
(28,buffer[i])
(29,)
(30,1)
(31,-1)
(32,data)
(33,0)
(34,buffer)
(35,i < 10)
(36,i)
(37,i)
(38,1)
(39,i)
(40,"%d")
(41,)
(42,i)
(43,data)
(44,10)
(45,free(buffer)
(46,i)
(47,i = 0)
(48,buffer[i])
(49,if (buffer == NULL)
(50,(int *)
(51,exit(-1)
(52,)
(53,staticFive)
(54,i)
(55,data = -1)
(56,int *)
(57,)
(58,buffer)
(59,RET)
(60,if (data >= 0)
(61,)
(62,10)
(63,staticFive==5)
(64,buffer)
(65,i++)
(66,0)
(67,-1)
(68,0)
(69,"ERROR: Array index is negative.")
(70,i)
(71,0)
(72,)
(73,5)
(74,buffer)
(75,if(staticFive==5)
(76,)
(77,printLine("ERROR: Array index is negative.")
(78,buffer)
(79,i)
(80,if(staticFive==5)
(81,for (i = 0; i < 10; i++)
(82,for(i = 0; i < 10; i++)
(83,)
(84,10)
(85,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^