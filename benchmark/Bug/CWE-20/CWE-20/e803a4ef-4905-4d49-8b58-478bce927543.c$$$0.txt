-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
        {
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
76,77
76,78
77,78
79,80
79,81
80,81
80,82
83,84
85,86
85,87
86,87
87,88
87,89
89,90
89,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,68,69,71,74,75,78,81,82,84,88,90,94,96,100,102,107,108
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
92,93
92,94
-----guardedBy-----
71,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) < (long)sqrt((double)UINT_MAX))        {            unsigned int result = data * data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) < (long)sqrt((double)UINT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)UINT_MAX)
long
long

sqrt((double)UINT_MAX)
sqrt
sqrt
(double)UINT_MAX
double
double

UINT_MAX
UINT_MAX
{            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,15,0)
(37,43,0)
(47,15,0)
(4,54,0)
(2,0,0)
(21,48,0)
(35,0,0)
(15,43,0)
(19,27,0)
(31,41,0)
(31,3,0)
(44,21,0)
(15,27,0)
(10,2,0)
(5,27,0)
(39,28,0)
(11,32,0)
(37,27,0)
(51,43,0)
(42,52,0)
(38,8,0)
(45,20,0)
(12,31,0)
(6,34,0)
(17,48,0)
(9,6,0)
(14,43,0)
(50,8,0)
(48,27,0)
(1,41,0)
(41,1,0)
(43,25,0)
(21,26,0)
(8,37,0)
(37,8,0)
(24,11,0)
(27,16,0)
(7,21,0)
(1,54,0)
(42,33,0)
(31,27,0)
(2,28,0)
(54,4,0)
(28,15,0)
(33,42,0)
(28,0,0)
(3,31,0)
(29,16,0)
(13,16,0)
(41,31,0)
(31,43,0)
(53,50,0)
(46,42,0)
(54,33,0)
(52,42,0)
(50,11,0)
(36,37,0)
(15,28,0)
(54,1,0)
(8,11,0)
(33,54,0)
(18,37,0)
(48,21,0)
(23,16,0)
(41,31,1)
(54,4,1)
(50,8,1)
(2,10,1)
(7,44,1)
(12,22,1)
(9,1,1)
(30,2,1)
(40,47,1)
(49,27,1)
(38,22,1)
(37,43,1)
(15,27,1)
(31,3,1)
(17,7,1)
(30,6,1)
(1,54,1)
(27,5,1)
(39,1,1)
(15,43,1)
(10,28,1)
(31,43,1)
(53,8,1)
(36,38,1)
(37,27,1)
(48,17,1)
(31,12,1)
(37,18,1)
(6,9,1)
(47,39,1)
(15,40,1)
(48,27,1)
(1,41,1)
(50,53,1)
(22,21,1)
(2,28,1)
(14,49,1)
(8,37,1)
(31,27,1)
(21,48,1)
(5,19,1)
(33,42,1)
(42,46,1)
(22,43,1)
(51,14,1)
(46,41,1)
(44,49,1)
(42,52,1)
(43,51,1)
(30,50,1)
(28,15,1)
(18,36,1)
(54,33,1)
(1,22,2)
(1,41,2)
(43,49,2)
(44,49,2)
(12,22,2)
(8,22,2)
(54,4,2)
(37,27,2)
(50,8,2)
(2,1,2)
(2,28,2)
(17,49,2)
(28,15,2)
(33,42,2)
(21,48,2)
(48,27,2)
(9,1,2)
(33,22,2)
(15,1,2)
(15,43,2)
(54,22,2)
(7,49,2)
(36,22,2)
(42,52,2)
(51,49,2)
(41,31,2)
(10,1,2)
(50,22,2)
(47,1,2)
(53,22,2)
(37,43,2)
(31,3,2)
(28,1,2)
(1,54,2)
(31,22,2)
(38,22,2)
(8,37,2)
(14,49,2)
(54,33,2)
(31,43,2)
(39,1,2)
(42,22,2)
(41,22,2)
(18,22,2)
(31,27,2)
(37,22,2)
(40,1,2)
(48,49,2)
(6,1,2)
(21,49,2)
(15,27,2)
(46,22,2)
-----------------------------------
(0,)
(1,abs((long)
(2,printUnsignedLine(result)
(3,long)
(4,long)
(5,0)
(6,printLine("data value is too large to perform arithmetic safely.")
(7,"%u")
(8,result = data * data)
(9,"data value is too large to perform arithmetic safely.")
(10,result)
(11,)
(12,data)
(13,if(globalReturnsTrueOrFalse()
(14,data)
(15,data * data)
(16,)
(17,data)
(18,data)
(19,data)
(20,)
(21,fscanf (stdin, "%u", &data)
(22,globalReturnsTrueOrFalse()
(23,data)
(24,result)
(25,)
(26,)
(27,data = 0)
(28,result = data * data)
(29,if(globalReturnsTrueOrFalse()
(30,RET)
(31,(long)
(32,)
(33,sqrt((double)
(34,)
(35,result)
(36,data)
(37,data * data)
(38,result)
(39,result)
(40,data)
(41,abs((long)
(42,(double)
(43,data = 2)
(44,stdin)
(45,if (abs((long)
(46,UINT_MAX)
(47,data)
(48,&data)
(49,globalReturnsTrueOrFalse()
(50,printUnsignedLine(result)
(51,2)
(52,double)
(53,result)
(54,(long)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^