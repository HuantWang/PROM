-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(1)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
182,183
184,185
187,188
187,189
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
200,201
200,202
202,203
203,204
203,205
203,206
203,207
203,208
203,209
204,205
205,206
205,207
207,208
209,210
210,211
210,212
212,213
212,214
212,215
215,216
216,217
216,218
217,218
217,219
219,220
221,222
221,223
222,223
224,225
224,226
226,227
227,228
227,229
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
243,245
243,246
243,247
244,245
245,246
245,247
246,247
249,250
249,251
250,251
253,254
254,255
256,257
257,258
258,259
258,260
259,260
259,261
260,261
262,263
265,266
265,267
265,268
266,267
266,268
267,268
270,271
270,272
271,272
272,273
272,274
273,274
273,275
274,275
276,277
279,280
279,281
279,282
279,283
280,281
281,282
281,283
282,283
285,286
285,287
286,287
289,290
290,291
292,293
293,294
294,295
294,296
295,296
297,298
297,299
298,299
300,301
302,303
303,304
304,305
304,306
305,306
308,309
309,310
309,311
310,311
312,313
-----nextToken-----
2,4,8,10,14,16,18,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,186,190,192,197,199,201,206,208,211,213,214,218,220,223,225,228,229,233,235,240,242,247,248,251,252,255,261,263,264,268,269,275,277,278,283,284,287,288,291,296,299,301,306,307,311,313
-----computeFrom-----
12,13
12,14
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
188,189
188,190
224,225
224,226
231,232
231,233
245,246
245,247
249,250
249,251
258,259
258,260
266,267
266,268
272,273
272,274
281,282
281,283
285,286
285,287
-----guardedBy-----
190,199
268,277
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad(){    int data;    /* Initialize data */    data = -1;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02_bad
{    int data;    /* Initialize data */    data = -1;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(1)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
1
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(148,146,0)
(194,176,0)
(177,45,0)
(174,54,0)
(83,15,0)
(139,53,0)
(56,139,0)
(150,4,0)
(64,140,0)
(6,72,0)
(190,83,0)
(2,54,0)
(102,54,0)
(29,7,0)
(161,68,0)
(13,38,0)
(188,148,0)
(140,101,0)
(166,114,0)
(66,72,0)
(61,55,0)
(132,129,0)
(120,105,0)
(129,132,0)
(14,103,0)
(115,36,0)
(105,32,0)
(129,41,0)
(135,106,0)
(38,27,0)
(164,156,0)
(2,4,0)
(70,49,0)
(191,38,0)
(173,53,0)
(43,20,0)
(73,52,0)
(41,129,0)
(28,143,0)
(22,191,0)
(81,26,0)
(146,12,0)
(141,39,0)
(34,140,0)
(128,20,0)
(11,80,0)
(124,152,0)
(176,114,0)
(91,12,0)
(144,53,0)
(23,48,0)
(103,14,0)
(92,114,0)
(90,104,0)
(83,54,0)
(84,12,0)
(126,39,0)
(149,82,0)
(83,68,0)
(141,102,0)
(93,47,0)
(94,116,0)
(79,150,0)
(138,166,0)
(49,189,0)
(82,19,0)
(74,117,0)
(20,12,0)
(39,48,0)
(35,38,0)
(100,120,0)
(62,124,0)
(3,152,0)
(39,141,0)
(26,146,0)
(193,83,0)
(76,74,0)
(161,114,0)
(143,71,0)
(157,12,0)
(18,71,0)
(183,185,0)
(179,14,0)
(111,67,0)
(54,102,0)
(102,141,0)
(88,191,0)
(91,67,0)
(187,12,0)
(180,11,0)
(82,71,0)
(77,104,0)
(99,7,0)
(40,158,0)
(91,51,0)
(55,146,0)
(124,146,0)
(192,140,0)
(22,146,0)
(7,29,0)
(48,39,0)
(72,66,0)
(167,45,0)
(86,124,0)
(21,4,0)
(107,147,0)
(2,74,0)
(4,52,0)
(106,103,0)
(152,124,0)
(47,38,0)
(131,117,0)
(65,12,0)
(178,124,0)
(7,80,0)
(137,174,0)
(103,95,0)
(30,49,0)
(124,71,0)
(15,145,0)
(118,19,0)
(71,124,0)
(104,12,0)
(125,143,0)
(162,161,0)
(83,53,0)
(19,12,0)
(2,104,0)
(168,91,0)
(49,129,0)
(36,172,0)
(9,112,0)
(184,16,0)
(4,156,0)
(49,70,0)
(10,161,0)
(153,187,0)
(55,191,0)
(151,70,0)
(37,95,0)
(85,29,0)
(186,52,0)
(89,38,0)
(60,51,0)
(105,120,0)
(5,77,0)
(24,132,0)
(51,91,0)
(109,22,0)
(129,49,0)
(167,143,0)
(50,29,0)
(189,49,0)
(72,12,0)
(150,104,0)
(103,106,0)
(119,114,0)
(175,191,0)
(16,187,0)
(78,45,0)
(147,53,0)
(1,106,0)
(45,71,0)
(155,68,0)
(116,140,0)
(45,167,0)
(160,38,0)
(97,148,0)
(71,12,0)
(181,47,0)
(25,16,0)
(15,83,0)
(95,103,0)
(75,12,0)
(121,63,0)
(98,54,0)
(182,55,0)
(8,150,0)
(67,91,0)
(33,38,0)
(163,38,0)
(46,102,0)
(154,66,0)
(156,4,0)
(102,46,0)
(17,2,0)
(113,38,0)
(69,147,0)
(87,166,0)
(31,38,0)
(143,167,0)
(57,6,0)
(134,108,0)
(42,146,0)
(116,54,0)
(0,140,0)
(123,189,0)
(104,77,0)
(127,174,0)
(133,152,0)
(161,54,0)
(80,11,0)
(68,136,0)
(80,12,0)
(110,52,0)
(58,26,0)
(165,2,0)
(54,140,0)
(195,148,0)
(130,140,0)
(146,148,0)
(170,82,0)
(22,44,0)
(171,6,0)
(122,38,0)
(49,146,0)
(95,37,1)
(83,193,1)
(173,74,1)
(195,188,1)
(154,6,1)
(114,92,1)
(188,42,1)
(26,146,1)
(183,26,1)
(4,156,1)
(156,164,1)
(40,167,1)
(139,53,1)
(115,150,1)
(86,18,1)
(124,146,1)
(10,166,1)
(123,49,1)
(68,155,1)
(126,98,1)
(53,144,1)
(176,194,1)
(20,43,1)
(39,48,1)
(97,195,1)
(138,176,1)
(143,125,1)
(87,138,1)
(147,53,1)
(70,151,1)
(92,119,1)
(142,22,1)
(82,71,1)
(150,79,1)
(191,175,1)
(174,54,1)
(137,54,1)
(29,50,1)
(51,60,1)
(11,180,1)
(134,14,1)
(60,168,1)
(105,120,1)
(36,115,1)
(47,93,1)
(23,126,1)
(107,139,1)
(135,59,1)
(182,59,1)
(37,106,1)
(111,26,1)
(129,132,1)
(138,114,1)
(80,11,1)
(182,9,1)
(49,70,1)
(94,36,1)
(78,143,1)
(9,189,1)
(69,107,1)
(79,8,1)
(91,67,1)
(103,95,1)
(139,56,1)
(121,142,1)
(26,81,1)
(49,129,1)
(54,102,1)
(187,153,1)
(150,4,1)
(5,90,1)
(151,129,1)
(83,68,1)
(24,30,1)
(168,67,1)
(170,149,1)
(116,54,1)
(83,54,1)
(118,82,1)
(59,104,1)
(62,152,1)
(149,167,1)
(159,96,1)
(167,45,1)
(88,47,1)
(15,83,1)
(161,114,1)
(179,103,1)
(96,121,1)
(83,53,1)
(42,20,1)
(175,88,1)
(128,14,1)
(96,169,1)
(81,58,1)
(22,109,1)
(2,104,1)
(96,142,1)
(165,17,1)
(14,103,1)
(94,147,1)
(16,25,1)
(124,62,1)
(120,100,1)
(1,135,1)
(162,10,1)
(144,173,1)
(135,191,1)
(176,114,1)
(155,161,1)
(74,76,1)
(6,57,1)
(166,87,1)
(48,23,1)
(104,77,1)
(2,4,1)
(45,71,1)
(90,19,1)
(182,183,1)
(58,146,1)
(100,174,1)
(143,71,1)
(2,165,1)
(49,146,1)
(61,182,1)
(174,127,1)
(103,106,1)
(178,86,1)
(159,116,1)
(85,187,1)
(189,123,1)
(119,105,1)
(43,128,1)
(99,29,1)
(133,178,1)
(127,137,1)
(106,1,1)
(181,169,1)
(146,148,1)
(57,171,1)
(184,91,1)
(125,28,1)
(14,179,1)
(17,150,1)
(3,133,1)
(109,55,1)
(25,184,1)
(72,66,1)
(153,16,1)
(19,118,1)
(142,55,1)
(141,39,1)
(182,134,1)
(189,49,1)
(55,146,1)
(98,96,1)
(167,143,1)
(93,181,1)
(2,54,1)
(129,41,1)
(71,124,1)
(7,99,1)
(50,85,1)
(102,141,1)
(171,80,1)
(30,72,1)
(166,114,1)
(91,51,1)
(150,104,1)
(148,97,1)
(82,170,1)
(18,189,1)
(55,191,1)
(180,7,1)
(76,2,1)
(124,152,1)
(116,94,1)
(161,54,1)
(132,24,1)
(194,68,1)
(102,46,1)
(22,146,1)
(28,71,1)
(164,21,1)
(22,191,1)
(161,162,1)
(147,69,1)
(45,177,1)
(193,190,1)
(55,61,1)
(77,5,1)
(190,147,1)
(67,111,1)
(7,29,1)
(177,78,1)
(56,15,1)
(66,154,1)
(119,174,1)
(152,3,1)
(182,40,1)
(8,166,1)
(169,4,1)
(107,53,1)
(152,189,2)
(54,96,2)
(5,167,2)
(138,96,2)
(82,167,2)
(151,26,2)
(91,67,2)
(36,150,2)
(124,152,2)
(77,167,2)
(182,169,2)
(103,59,2)
(72,26,2)
(141,96,2)
(15,147,2)
(14,59,2)
(98,96,2)
(114,96,2)
(190,147,2)
(55,146,2)
(142,169,2)
(40,167,2)
(104,167,2)
(193,147,2)
(115,150,2)
(121,142,2)
(167,45,2)
(39,96,2)
(129,132,2)
(18,189,2)
(179,169,2)
(144,150,2)
(120,174,2)
(155,166,2)
(22,146,2)
(148,14,2)
(55,169,2)
(78,143,2)
(49,70,2)
(49,129,2)
(56,147,2)
(167,143,2)
(10,166,2)
(106,169,2)
(62,189,2)
(184,26,2)
(187,26,2)
(129,26,2)
(91,51,2)
(154,26,2)
(146,148,2)
(55,191,2)
(22,191,2)
(68,166,2)
(76,150,2)
(80,26,2)
(147,147,2)
(6,26,2)
(42,14,2)
(2,150,2)
(104,77,2)
(150,104,2)
(93,169,2)
(161,114,2)
(2,104,2)
(109,55,2)
(123,26,2)
(189,26,2)
(162,166,2)
(15,83,2)
(54,102,2)
(107,150,2)
(11,26,2)
(188,14,2)
(167,189,2)
(14,103,2)
(161,54,2)
(23,96,2)
(80,11,2)
(83,53,2)
(177,143,2)
(103,106,2)
(166,114,2)
(87,166,2)
(183,26,2)
(9,189,2)
(14,169,2)
(103,169,2)
(147,150,2)
(132,26,2)
(61,169,2)
(1,169,2)
(176,166,2)
(86,189,2)
(124,189,2)
(195,14,2)
(173,150,2)
(129,41,2)
(139,53,2)
(81,14,2)
(170,167,2)
(135,169,2)
(67,26,2)
(8,96,2)
(150,96,2)
(3,189,2)
(178,189,2)
(94,96,2)
(24,26,2)
(111,26,2)
(57,26,2)
(7,29,2)
(20,14,2)
(29,26,2)
(37,59,2)
(127,96,2)
(141,39,2)
(92,96,2)
(30,26,2)
(147,53,2)
(87,96,2)
(82,71,2)
(2,4,2)
(39,48,2)
(19,167,2)
(134,14,2)
(139,147,2)
(102,141,2)
(106,59,2)
(26,146,2)
(71,189,2)
(95,59,2)
(95,169,2)
(25,26,2)
(102,96,2)
(150,4,2)
(99,26,2)
(149,167,2)
(143,71,2)
(100,174,2)
(133,189,2)
(176,114,2)
(85,26,2)
(17,150,2)
(79,96,2)
(135,59,2)
(26,14,2)
(119,96,2)
(171,26,2)
(105,120,2)
(191,169,2)
(118,167,2)
(43,14,2)
(97,14,2)
(143,189,2)
(116,54,2)
(165,150,2)
(175,169,2)
(189,49,2)
(168,26,2)
(138,166,2)
(174,96,2)
(181,169,2)
(83,147,2)
(2,54,2)
(69,147,2)
(49,26,2)
(102,46,2)
(37,169,2)
(48,96,2)
(59,167,2)
(179,59,2)
(116,96,2)
(58,14,2)
(7,26,2)
(74,150,2)
(88,169,2)
(128,14,2)
(45,143,2)
(70,26,2)
(71,124,2)
(174,54,2)
(69,150,2)
(137,96,2)
(83,68,2)
(180,26,2)
(124,146,2)
(107,147,2)
(166,96,2)
(153,26,2)
(146,14,2)
(1,59,2)
(126,96,2)
(50,26,2)
(49,146,2)
(83,54,2)
(60,26,2)
(22,55,2)
(72,66,2)
(28,189,2)
(51,26,2)
(47,169,2)
(53,150,2)
(66,26,2)
(45,71,2)
(91,26,2)
(125,189,2)
(4,156,2)
(194,166,2)
(90,167,2)
(103,95,2)
(161,166,2)
(16,26,2)
(166,166,2)
(105,174,2)
-----------------------------------
(0,if (data >= 0)
(1,2)
(2,buffer[data])
(3,1)
(4,data = -1)
(5,inputBuffer)
(6,service.sin_port)
(7,service.sin_addr.s_addr)
(8,data)
(9,break;)
(10,buffer)
(11,inet_addr(IP_ADDRESS)
(12,)
(13,wsaDataInit)
(14,WSAStartup(MAKEWORD(2,2)
(15,printIntLine(buffer[i])
(16,service.sin_family)
(17,buffer)
(18,recvResult)
(19,inputBuffer[recvResult] = \\\'\\\\0\\\')
(20,wsaDataInit = 1)
(21,data)
(22,CLOSE_SOCKET(connectSocket)
(23,int)
(24,service)
(25,sin_family)
(26,connectSocket == INVALID_SOCKET)
(27,)
(28,recvResult)
(29,service.sin_addr)
(30,connectSocket)
(31,if (connectSocket != INVALID_SOCKET)
(32,)
(33,inputBuffer)
(34,for (i = 0; i < 10; i++)
(35,do)
(36,printLine("ERROR: Array index is negative.")
(37,wsaData)
(38,)
(39,10 * sizeof(int)
(40,break;)
(41,struct sockaddr*)
(42,connectSocket)
(43,1)
(44,)
(45,recvResult == 0)
(46,int *)
(47,wsaDataInit = 0)
(48,sizeof(int)
(49,connect(connectSocket, (struct sockaddr*)
(50,sin_addr)
(51,sizeof(service)
(52,)
(53,i = 0)
(54,* buffer = (int *)
(55,connectSocket != INVALID_SOCKET)
(56,i)
(57,sin_port)
(58,connectSocket)
(59,0)
(60,service)
(61,INVALID_SOCKET)
(62,0)
(63,)
(64,if (buffer == NULL)
(65,if (connectSocket == INVALID_SOCKET)
(66,htons(TCP_PORT)
(67,&service)
(68,buffer[i] = 0)
(69,10)
(70,sizeof(service)
(71,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(72,service.sin_port = htons(TCP_PORT)
(73,if(1)
(74,buffer[data] = 1)
(75,if (recvResult == SOCKET_ERROR || recvResult == 0)
(76,1)
(77,atoi(inputBuffer)
(78,recvResult)
(79,0)
(80,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(81,INVALID_SOCKET)
(82,inputBuffer[recvResult])
(83,buffer[i])
(84,if (connect(connectSocket, (struct sockaddr*)
(85,service)
(86,connectSocket)
(87,10)
(88,connectSocket)
(89,connectSocket)
(90,data)
(91,memset(&service, 0, sizeof(service)
(92,0)
(93,0)
(94,buffer)
(95,&wsaData)
(96,1)
(97,IPPROTO_TCP)
(98,buffer)
(99,s_addr)
(100,1)
(101,)
(102,(int *)
(103,WSAStartup(MAKEWORD(2,2)
(104,data = atoi(inputBuffer)
(105,exit(-1)
(106,MAKEWORD(2,2)
(107,i)
(108,)
(109,connectSocket)
(110,if(1)
(111,service)
(112,)
(113,if (wsaDataInit)
(114,i = 0)
(115,"ERROR: Array index is negative.")
(116,free(buffer)
(117,)
(118,\\\'\\\\0\\\')
(119,i)
(120,-1)
(121,WSACleanup()
(122,service)
(123,SOCKET_ERROR)
(124,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(125,SOCKET_ERROR)
(126,10)
(127,NULL)
(128,wsaDataInit)
(129,(struct sockaddr*)
(130,i)
(131,for(i = 0; i < 10; i++)
(132,&service)
(133,CHAR_ARRAY_SIZE)
(134,break;)
(135,2)
(136,)
(137,buffer)
(138,i)
(139,i++)
(140,)
(141,malloc(10 * sizeof(int)
(142,wsaDataInit)
(143,recvResult == SOCKET_ERROR)
(144,0)
(145,)
(146,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(147,i < 10)
(148,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(149,inputBuffer)
(150,data >= 0)
(151,service)
(152,CHAR_ARRAY_SIZE - 1)
(153,AF_INET)
(154,TCP_PORT)
(155,0)
(156,-1)
(157,if (WSAStartup(MAKEWORD(2,2)
(158,)
(159,RET)
(160,wsaData)
(161,buffer[i])
(162,i)
(163,recvResult)
(164,1)
(165,data)
(166,i < 10)
(167,recvResult == SOCKET_ERROR || recvResult == 0)
(168,0)
(169,1)
(170,recvResult)
(171,service)
(172,)
(173,i)
(174,buffer == NULL)
(175,INVALID_SOCKET)
(176,i++)
(177,0)
(178,inputBuffer)
(179,NO_ERROR)
(180,IP_ADDRESS)
(181,wsaDataInit)
(182,connectSocket)
(183,break;)
(184,service)
(185,)
(186,data)
(187,service.sin_family = AF_INET)
(188,AF_INET)
(189,connect(connectSocket, (struct sockaddr*)
(190,buffer)
(191,connectSocket = INVALID_SOCKET)
(192,buffer)
(193,i)
(194,i)
(195,SOCK_STREAM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^