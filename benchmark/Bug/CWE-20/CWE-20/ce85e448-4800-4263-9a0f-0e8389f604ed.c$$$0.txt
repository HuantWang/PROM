-----label-----
1
-----code-----
static void badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink()
badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(36,26,0)
(14,30,0)
(17,18,0)
(25,35,0)
(35,30,0)
(34,8,0)
(0,8,0)
(18,30,0)
(0,27,0)
(5,23,0)
(10,34,0)
(40,27,0)
(16,7,0)
(18,19,0)
(17,0,0)
(7,16,0)
(20,34,0)
(4,8,0)
(34,10,0)
(9,30,0)
(31,26,0)
(21,8,0)
(16,24,0)
(37,7,0)
(8,23,0)
(30,26,0)
(30,18,0)
(38,9,0)
(3,22,0)
(19,18,0)
(9,26,0)
(33,10,0)
(27,0,0)
(15,14,0)
(2,1,0)
(1,28,0)
(32,22,0)
(0,17,0)
(29,36,0)
(6,0,0)
(11,30,0)
(36,30,0)
(39,35,0)
(18,17,0)
(22,23,0)
(13,14,0)
(35,26,0)
(2,34,1)
(25,16,1)
(12,1,1)
(38,36,1)
(13,30,1)
(18,17,1)
(1,2,1)
(27,40,1)
(7,37,1)
(29,35,1)
(11,34,1)
(33,20,1)
(10,33,1)
(18,19,1)
(20,8,1)
(9,38,1)
(21,4,1)
(39,25,1)
(0,27,1)
(16,7,1)
(15,13,1)
(25,14,1)
(34,8,1)
(6,11,1)
(0,8,1)
(9,30,1)
(35,30,1)
(34,10,1)
(12,9,1)
(37,14,1)
(14,15,1)
(36,29,1)
(35,39,1)
(36,30,1)
(30,18,1)
(40,6,1)
(14,30,1)
(17,0,1)
(8,21,1)
(15,34,2)
(39,34,2)
(35,34,2)
(9,34,2)
(0,27,2)
(13,34,2)
(36,30,2)
(0,8,2)
(34,10,2)
(0,34,2)
(14,30,2)
(37,14,2)
(25,34,2)
(6,34,2)
(34,8,2)
(17,0,2)
(30,34,2)
(14,34,2)
(18,19,2)
(16,14,2)
(2,34,2)
(9,30,2)
(35,30,2)
(27,34,2)
(29,34,2)
(11,34,2)
(18,34,2)
(7,14,2)
(17,34,2)
(30,18,2)
(1,34,2)
(38,34,2)
(40,34,2)
(16,7,2)
(18,17,2)
(36,34,2)
-----------------------------------
(0,data*sizeof(wchar_t)
(1,printLine("Input is less than the length of the source string")
(2,"Input is less than the length of the source string")
(3,if (data > wcslen(HELLO_STRING)
(4,data)
(5,data)
(6,data)
(7,-1)
(8,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData)
(9,free(myString)
(10,wcslen(HELLO_STRING)
(11,myString)
(12,RET)
(13,myString)
(14,myString == NULL)
(15,NULL)
(16,exit(-1)
(17,malloc(data*sizeof(wchar_t)
(18,(wchar_t *)
(19,wchar_t *)
(20,data)
(21,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_badData)
(22,)
(23,)
(24,)
(25,myString)
(26,)
(27,sizeof(wchar_t)
(28,)
(29,myString)
(30,myString = (wchar_t *)
(31,if (myString == NULL)
(32,myString)
(33,HELLO_STRING)
(34,data > wcslen(HELLO_STRING)
(35,wcscpy(myString, HELLO_STRING)
(36,printWLine(myString)
(37,1)
(38,myString)
(39,HELLO_STRING)
(40,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^