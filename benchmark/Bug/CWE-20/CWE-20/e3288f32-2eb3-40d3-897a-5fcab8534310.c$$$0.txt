-----label-----
1
-----code-----
static int64_t * badSource(int64_t * data)
{
    if(badStatic)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
14,16
15,16
17,18
17,19
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
-----nextToken-----
3,5,6,9,11,12,16,21,25,27,30,32,36,37,41,43,48,50,53
-----computeFrom-----
19,20
19,21
31,32
31,33
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * badSource(int64_t * data){    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    return data;}
static int64_t
int64_t
* badSource(int64_t * data)
*
badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    return data;}
if(badStatic)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
badStatic
badStatic
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(17,3,0)
(11,10,0)
(17,1,0)
(21,15,0)
(3,1,0)
(0,3,0)
(23,0,0)
(18,7,0)
(2,15,0)
(7,10,0)
(6,11,0)
(3,20,0)
(19,14,0)
(18,22,0)
(7,18,0)
(4,20,0)
(22,18,0)
(10,7,0)
(12,3,0)
(21,13,0)
(16,17,0)
(15,21,0)
(10,11,0)
(9,0,0)
(17,14,0)
(5,10,0)
(24,17,0)
(18,3,0)
(0,1,0)
(3,18,0)
(16,0,1)
(0,23,1)
(11,6,1)
(18,22,1)
(3,1,1)
(10,11,1)
(3,18,1)
(21,15,1)
(16,21,1)
(18,7,1)
(17,3,1)
(6,5,1)
(23,9,1)
(7,10,1)
(9,3,1)
(2,0,1)
(5,12,1)
(17,1,1)
(12,8,1)
(15,2,1)
(0,3,1)
(0,1,1)
(17,16,1)
(24,17,1)
(16,8,1)
(18,7,2)
(3,1,2)
(0,3,2)
(5,8,2)
(10,8,2)
(10,11,2)
(7,8,2)
(7,10,2)
(21,15,2)
(18,22,2)
(6,8,2)
(21,0,2)
(18,8,2)
(2,0,2)
(0,8,2)
(12,8,2)
(11,8,2)
(17,1,2)
(15,0,2)
(3,18,2)
(9,8,2)
(3,8,2)
(24,17,2)
(17,3,2)
(23,8,2)
(0,1,2)
-----------------------------------
(0,data == NULL)
(1,int64_t * data)
(2,1)
(3,data = (int64_t *)
(4,if (data == NULL)
(5,50)
(6,int64_t)
(7,malloc(50*sizeof(int64_t)
(8,badStatic)
(9,data)
(10,50*sizeof(int64_t)
(11,sizeof(int64_t)
(12,data)
(13,)
(14,)
(15,-1)
(16,data)
(17,return data;)
(18,(int64_t *)
(19,if(badStatic)
(20,)
(21,exit(-1)
(22,int64_t *)
(23,NULL)
(24,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^