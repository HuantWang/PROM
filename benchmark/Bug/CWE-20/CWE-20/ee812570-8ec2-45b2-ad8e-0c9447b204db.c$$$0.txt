-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_wchar_t_09_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_wchar_t_09_bad(){    wchar_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_wchar_t_09_bad()
CWE415_Double_Free__malloc_free_wchar_t_09_bad
{    wchar_t * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(27,8,0)
(20,27,0)
(23,27,0)
(18,21,0)
(13,12,0)
(11,27,0)
(28,25,0)
(5,27,0)
(22,8,0)
(8,27,0)
(9,5,0)
(30,28,0)
(8,19,0)
(27,32,0)
(21,29,0)
(1,25,0)
(5,32,0)
(31,11,0)
(0,29,0)
(28,19,0)
(24,29,0)
(10,32,0)
(19,28,0)
(6,29,0)
(25,28,0)
(14,23,0)
(11,15,0)
(11,21,0)
(19,8,0)
(26,12,0)
(3,21,0)
(8,22,0)
(12,26,0)
(7,23,0)
(26,2,0)
(5,9,1)
(23,27,1)
(3,18,1)
(11,27,1)
(8,19,1)
(1,30,1)
(26,12,1)
(16,17,1)
(9,23,1)
(7,14,1)
(20,17,1)
(21,3,1)
(4,11,1)
(27,8,1)
(16,5,1)
(4,16,1)
(30,20,1)
(12,13,1)
(25,1,1)
(8,22,1)
(9,26,1)
(5,27,1)
(23,7,1)
(13,23,1)
(17,21,1)
(11,21,1)
(28,25,1)
(14,27,1)
(31,16,1)
(19,28,1)
(11,31,1)
(27,8,2)
(8,19,2)
(30,17,2)
(9,17,2)
(13,23,2)
(26,12,2)
(25,17,2)
(23,17,2)
(31,16,2)
(11,16,2)
(28,25,2)
(11,21,2)
(7,17,2)
(5,27,2)
(27,17,2)
(8,22,2)
(14,17,2)
(26,23,2)
(5,17,2)
(12,23,2)
(11,27,2)
(28,17,2)
(19,28,2)
(20,17,2)
(8,17,2)
(23,27,2)
(1,17,2)
(19,17,2)
-----------------------------------
(0,if(GLOBAL_CONST_TRUE)
(1,wchar_t)
(2,)
(3,NULL)
(4,RET)
(5,free(data)
(6,data)
(7,NULL)
(8,(wchar_t *)
(9,data)
(10,if (data == NULL)
(11,free(data)
(12,-1)
(13,1)
(14,data)
(15,)
(16,GLOBAL_CONST_TRUE)
(17,GLOBAL_CONST_TRUE)
(18,data)
(19,malloc(100*sizeof(wchar_t)
(20,data)
(21,data = NULL)
(22,wchar_t *)
(23,data == NULL)
(24,if(GLOBAL_CONST_TRUE)
(25,sizeof(wchar_t)
(26,exit(-1)
(27,data = (wchar_t *)
(28,100*sizeof(wchar_t)
(29,)
(30,100)
(31,data)
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^