-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    else
    {
        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
100,101
100,102
100,103
100,104
100,105
100,106
100,107
101,102
102,103
102,104
104,105
104,106
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
115,116
115,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
135,136
135,137
137,138
138,139
138,140
141,142
142,143
142,144
143,144
143,145
144,145
146,147
146,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
157,159
158,159
160,161
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,65,68,70,73,75,78,79,83,85,90,92,97,98,99,103,105,107,111,113,114,116,117,122,124,125,126,130,132,134,136,139,140,145,147,148,149,153,155,159,161
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
63,64
63,65
74,75
74,76
81,82
81,83
94,95
94,96
115,116
115,117
119,120
119,121
123,124
123,125
135,136
135,137
142,143
142,144
146,147
146,148
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(45,50,0)
(6,14,0)
(10,35,0)
(33,82,0)
(23,63,0)
(72,18,0)
(86,87,0)
(67,2,0)
(71,17,0)
(17,45,0)
(85,27,0)
(16,33,0)
(21,70,0)
(30,28,0)
(2,57,0)
(25,27,0)
(3,38,0)
(83,13,0)
(74,70,0)
(72,27,0)
(28,42,0)
(38,3,0)
(82,52,0)
(9,32,0)
(35,80,0)
(91,67,0)
(56,6,0)
(27,57,0)
(13,6,0)
(69,45,0)
(31,13,0)
(81,67,0)
(31,27,0)
(26,73,0)
(63,31,0)
(60,62,0)
(73,70,0)
(70,42,0)
(15,32,0)
(49,14,0)
(27,72,0)
(40,25,0)
(29,22,0)
(75,17,0)
(90,10,0)
(36,68,0)
(64,9,0)
(79,3,0)
(72,88,0)
(79,87,0)
(1,6,0)
(20,14,0)
(12,14,0)
(65,27,0)
(50,6,0)
(88,72,0)
(19,63,0)
(39,38,0)
(38,39,0)
(31,70,0)
(53,1,0)
(68,70,0)
(35,10,0)
(41,79,0)
(67,27,0)
(37,73,0)
(58,46,0)
(18,72,0)
(22,1,0)
(66,18,0)
(7,74,0)
(65,6,0)
(66,46,0)
(31,63,0)
(32,68,0)
(76,12,0)
(4,1,0)
(32,9,0)
(47,25,0)
(84,57,0)
(70,38,0)
(1,22,0)
(24,22,0)
(0,74,0)
(68,32,0)
(87,79,0)
(3,79,0)
(11,50,0)
(34,42,0)
(8,12,0)
(51,2,0)
(62,6,0)
(73,28,0)
(55,66,0)
(78,31,0)
(46,66,0)
(68,27,0)
(68,6,0)
(54,65,0)
(82,33,0)
(45,17,0)
(62,27,0)
(38,70,0)
(18,66,0)
(62,70,0)
(43,68,0)
(65,70,0)
(60,13,1)
(27,72,1)
(8,76,1)
(91,82,1)
(68,32,1)
(73,37,1)
(41,21,1)
(24,4,1)
(0,7,1)
(38,3,1)
(19,23,1)
(74,0,1)
(85,5,1)
(38,39,1)
(15,36,1)
(18,66,1)
(3,79,1)
(25,40,1)
(70,38,1)
(43,50,1)
(51,67,1)
(35,10,1)
(21,5,1)
(4,53,1)
(2,51,1)
(17,71,1)
(58,55,1)
(64,15,1)
(62,70,1)
(55,85,1)
(62,60,1)
(91,25,1)
(31,63,1)
(28,30,1)
(46,58,1)
(65,27,1)
(29,24,1)
(73,70,1)
(45,17,1)
(13,83,1)
(67,81,1)
(68,70,1)
(1,22,1)
(54,62,1)
(78,68,1)
(31,70,1)
(72,88,1)
(50,11,1)
(63,19,1)
(82,33,1)
(26,35,1)
(68,27,1)
(31,27,1)
(40,47,1)
(71,75,1)
(11,45,1)
(10,90,1)
(23,78,1)
(32,9,1)
(86,41,1)
(90,74,1)
(5,12,1)
(89,65,1)
(33,16,1)
(22,29,1)
(72,18,1)
(69,1,1)
(9,64,1)
(7,70,1)
(16,25,1)
(65,70,1)
(30,73,1)
(83,31,1)
(36,43,1)
(53,28,1)
(37,26,1)
(87,86,1)
(74,70,1)
(65,54,1)
(12,8,1)
(75,69,1)
(79,87,1)
(25,27,1)
(67,27,1)
(62,27,1)
(26,74,1)
(66,46,1)
(53,2,1)
(81,91,1)
(47,27,1)
(79,87,2)
(10,74,2)
(2,5,2)
(73,70,2)
(38,5,2)
(68,32,2)
(38,39,2)
(25,27,2)
(0,5,2)
(68,27,2)
(21,5,2)
(1,22,2)
(18,5,2)
(30,5,2)
(33,25,2)
(18,66,2)
(81,5,2)
(31,27,2)
(67,5,2)
(45,17,2)
(82,25,2)
(55,5,2)
(74,5,2)
(79,5,2)
(31,63,2)
(66,46,2)
(3,79,2)
(51,5,2)
(82,33,2)
(28,5,2)
(72,88,2)
(25,5,2)
(40,5,2)
(41,5,2)
(47,5,2)
(90,74,2)
(38,3,2)
(26,5,2)
(73,5,2)
(74,70,2)
(58,5,2)
(87,5,2)
(7,5,2)
(27,5,2)
(46,5,2)
(70,5,2)
(65,70,2)
(66,5,2)
(70,38,2)
(91,5,2)
(85,5,2)
(35,10,2)
(72,5,2)
(3,5,2)
(62,70,2)
(62,27,2)
(72,18,2)
(35,74,2)
(27,72,2)
(68,70,2)
(65,27,2)
(37,5,2)
(31,70,2)
(67,27,2)
(32,9,2)
(16,25,2)
(86,5,2)
-----------------------------------
(0,NULL)
(1,memset(source, \'C\', 100-1)
(2,data[0] = \'\\\\0\')
(3,malloc(50*sizeof(char)
(4,'C')
(5,globalReturnsTrueOrFalse()
(6,)
(7,data)
(8,NULL)
(9,sizeof(char)
(10,-1)
(11,'\\\\0')
(12,data = NULL)
(13,data[100-1] = '\\\\0')
(14,)
(15,100)
(16,1)
(17,100-1)
(18,malloc(100*sizeof(char)
(19,1)
(20,data)
(21,data)
(22,100-1)
(23,100)
(24,100)
(25,data == NULL)
(26,data)
(27,data = (char *)
(28,data[0] = \'\\\\0\')
(29,1)
(30,\'\\\\0\')
(31,data[100-1])
(32,100*sizeof(char)
(33,-1)
(34,if (data == NULL)
(35,exit(-1)
(36,source)
(37,0)
(38,(char *)
(39,char *)
(40,NULL)
(41,50)
(42,)
(43,data)
(44,data[0] = '\\\\0')
(45,source[100-1])
(46,sizeof(char)
(47,data)
(48,memset(source, 'C', 100-1)
(49,if(globalReturnsTrueOrFalse()
(50,source[100-1] = '\\\\0')
(51,'\\\\0')
(52,)
(53,source)
(54,data)
(55,100)
(56,source)
(57,)
(58,char)
(59,\'\\\\0\')
(60,data)
(61,'\\\\0')
(62,printLine(data)
(63,100-1)
(64,char)
(65,free(data)
(66,100*sizeof(char)
(67,data[0])
(68,memcpy(data, source, 100*sizeof(char)
(69,source)
(70,data = (char *)
(71,1)
(72,(char *)
(73,data[0])
(74,data == NULL)
(75,100)
(76,data)
(77,data[0] = '\\\\0')
(78,data)
(79,50*sizeof(char)
(80,)
(81,0)
(82,exit(-1)
(83,'\\\\0')
(84,if (data == NULL)
(85,data)
(86,char)
(87,sizeof(char)
(88,char *)
(89,RET)
(90,1)
(91,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^