-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_bad()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
52,53
52,54
52,55
54,55
56,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
71,72
71,73
72,73
75,76
76,77
78,79
79,80
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,38,40,45,47,51,53,55,58,62,64,69,70,73,74,77,83,85,88,90,94,97,98,102,104
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
67,68
67,69
71,72
71,73
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_bad(){    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04_bad
{    int * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(30,32,0)
(28,27,0)
(3,39,0)
(6,18,0)
(38,8,0)
(27,40,0)
(35,13,0)
(25,12,0)
(42,49,0)
(21,18,0)
(17,15,0)
(4,8,0)
(1,22,0)
(50,7,0)
(15,18,0)
(23,40,0)
(15,33,0)
(15,49,0)
(34,13,0)
(29,7,0)
(8,40,0)
(31,7,0)
(49,15,0)
(31,40,0)
(22,40,0)
(11,7,0)
(42,40,0)
(37,1,0)
(40,10,0)
(36,13,0)
(39,30,0)
(19,42,0)
(24,21,0)
(41,35,0)
(44,18,0)
(30,39,0)
(33,7,0)
(47,22,0)
(7,13,0)
(2,42,0)
(49,48,0)
(8,38,0)
(22,1,0)
(26,27,0)
(42,18,0)
(9,10,0)
(8,35,0)
(38,7,0)
(12,18,0)
(22,47,0)
(14,12,0)
(42,35,0)
(16,33,0)
(0,31,0)
(40,22,0)
(5,8,0)
(45,15,0)
(31,35,0)
(20,35,0)
(27,40,1)
(44,33,1)
(4,5,1)
(18,6,1)
(42,40,1)
(31,40,1)
(26,28,1)
(33,16,1)
(0,38,1)
(38,8,1)
(45,42,1)
(30,39,1)
(22,1,1)
(22,47,1)
(8,40,1)
(42,35,1)
(31,35,1)
(28,40,1)
(1,37,1)
(6,44,1)
(21,18,1)
(31,0,1)
(17,45,1)
(37,23,1)
(24,49,1)
(15,33,1)
(14,25,1)
(15,18,1)
(21,24,1)
(2,12,1)
(43,31,1)
(40,22,1)
(39,3,1)
(49,15,1)
(25,18,1)
(12,14,1)
(15,17,1)
(23,46,1)
(8,4,1)
(19,2,1)
(20,41,1)
(35,20,1)
(16,30,1)
(16,27,1)
(16,46,1)
(5,12,1)
(42,19,1)
(25,21,1)
(42,18,1)
(3,27,1)
(12,18,1)
(46,35,1)
(8,35,1)
(27,26,1)
(30,39,2)
(21,18,2)
(31,35,2)
(26,46,2)
(15,33,2)
(42,18,2)
(28,46,2)
(21,12,2)
(12,12,2)
(22,47,2)
(15,18,2)
(27,40,2)
(49,12,2)
(49,15,2)
(22,46,2)
(15,12,2)
(17,12,2)
(37,46,2)
(24,12,2)
(27,46,2)
(12,18,2)
(19,12,2)
(2,12,2)
(8,35,2)
(42,40,2)
(39,27,2)
(40,22,2)
(3,27,2)
(22,1,2)
(42,12,2)
(1,46,2)
(42,35,2)
(40,46,2)
(30,27,2)
(8,40,2)
(45,12,2)
(38,8,2)
(14,12,2)
(31,40,2)
(23,46,2)
(25,12,2)
-----------------------------------
(0,data)
(1,malloc(10)
(2,data)
(3,1)
(4,0)
(5,data)
(6,0)
(7,)
(8,data[0])
(9,if (data == NULL)
(10,)
(11,i)
(12,i < 10)
(13,)
(14,10)
(15,source[i])
(16,source)
(17,i)
(18,i = 0)
(19,i)
(20,NULL)
(21,i++)
(22,(int *)
(23,data)
(24,i)
(25,i)
(26,NULL)
(27,data == NULL)
(28,data)
(29,for (i = 0; i < 10; i++)
(30,exit(-1)
(31,free(data)
(32,)
(33,source[10] = {0})
(34,data)
(35,data = NULL)
(36,if(STATIC_CONST_TRUE)
(37,10)
(38,printIntLine(data[0])
(39,-1)
(40,data = (int *)
(41,data)
(42,data[i])
(43,RET)
(44,i)
(45,source)
(46,STATIC_CONST_TRUE)
(47,int *)
(48,)
(49,data[i] = source[i])
(50,source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^