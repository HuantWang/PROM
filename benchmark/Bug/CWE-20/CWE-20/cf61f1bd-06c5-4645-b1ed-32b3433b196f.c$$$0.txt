-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_execlp_64_bad()
CWE78_OS_Command_Injection__char_console_execlp_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_execlp_64b_badSink
CWE78_OS_Command_Injection__char_console_execlp_64b_badSink
&data
data
data
-----joern-----
(17,26,0)
(38,28,0)
(34,71,0)
(9,32,0)
(9,63,0)
(24,55,0)
(12,39,0)
(10,62,0)
(16,56,0)
(34,33,0)
(54,71,0)
(55,39,0)
(36,5,0)
(19,68,0)
(37,68,0)
(32,39,0)
(64,7,0)
(18,30,0)
(20,69,0)
(15,66,0)
(42,22,0)
(49,62,0)
(5,36,0)
(26,33,0)
(49,36,0)
(67,46,0)
(7,41,0)
(45,66,0)
(45,39,0)
(28,45,0)
(21,32,0)
(9,19,0)
(63,9,0)
(66,60,0)
(70,29,0)
(3,44,0)
(31,18,0)
(32,36,0)
(6,49,0)
(47,34,0)
(13,69,0)
(12,0,0)
(65,26,0)
(29,30,0)
(35,43,0)
(40,63,0)
(48,36,0)
(69,22,0)
(59,49,0)
(39,44,0)
(11,32,0)
(27,43,0)
(43,39,0)
(61,44,0)
(7,71,0)
(53,39,0)
(55,33,0)
(33,56,0)
(0,22,0)
(33,55,0)
(57,12,0)
(4,33,0)
(0,12,0)
(62,49,0)
(43,36,0)
(51,68,0)
(19,8,0)
(41,26,0)
(25,28,0)
(44,22,0)
(5,39,0)
(26,41,0)
(41,7,0)
(39,22,0)
(19,9,0)
(2,39,0)
(32,9,0)
(68,36,0)
(68,19,0)
(50,34,0)
(71,7,0)
(45,28,0)
(28,33,0)
(8,19,0)
(71,39,0)
(71,34,0)
(58,45,0)
(36,69,0)
(23,22,0)
(1,5,0)
(14,9,0)
(43,18,0)
(45,28,1)
(31,43,1)
(62,10,1)
(26,33,1)
(55,39,1)
(43,39,1)
(17,65,1)
(9,14,1)
(35,27,1)
(44,61,1)
(5,39,1)
(18,31,1)
(1,48,1)
(12,39,1)
(10,49,1)
(36,5,1)
(24,4,1)
(52,0,1)
(11,21,1)
(7,71,1)
(27,29,1)
(2,44,1)
(63,40,1)
(49,36,1)
(51,32,1)
(39,53,1)
(37,51,1)
(62,49,1)
(57,62,1)
(65,33,1)
(43,36,1)
(64,71,1)
(50,47,1)
(43,35,1)
(34,50,1)
(28,38,1)
(57,18,1)
(19,8,1)
(59,36,1)
(68,37,1)
(9,32,1)
(54,26,1)
(39,44,1)
(15,45,1)
(4,63,1)
(19,68,1)
(32,39,1)
(57,66,1)
(32,36,1)
(12,57,1)
(21,62,1)
(0,12,1)
(45,39,1)
(25,58,1)
(33,55,1)
(26,17,1)
(29,70,1)
(48,39,1)
(9,19,1)
(40,9,1)
(71,39,1)
(7,64,1)
(14,19,1)
(41,7,1)
(71,34,1)
(32,11,1)
(61,3,1)
(28,33,1)
(70,63,1)
(6,59,1)
(68,36,1)
(66,15,1)
(47,54,1)
(53,2,1)
(34,33,1)
(41,26,1)
(58,41,1)
(5,1,1)
(63,9,1)
(57,41,1)
(55,24,1)
(38,25,1)
(49,6,1)
(12,39,2)
(58,41,2)
(70,63,2)
(21,62,2)
(55,63,2)
(68,36,2)
(36,5,2)
(41,26,2)
(45,41,2)
(64,26,2)
(32,62,2)
(43,39,2)
(35,63,2)
(17,63,2)
(5,39,2)
(4,63,2)
(19,8,2)
(34,26,2)
(32,39,2)
(7,26,2)
(71,34,2)
(43,63,2)
(26,63,2)
(66,41,2)
(39,44,2)
(47,26,2)
(51,62,2)
(63,9,2)
(49,36,2)
(25,41,2)
(71,39,2)
(9,19,2)
(41,7,2)
(26,33,2)
(28,33,2)
(68,62,2)
(15,41,2)
(62,49,2)
(24,63,2)
(45,39,2)
(9,62,2)
(34,33,2)
(18,63,2)
(7,71,2)
(50,26,2)
(14,62,2)
(11,62,2)
(33,55,2)
(65,63,2)
(40,62,2)
(63,62,2)
(43,36,2)
(54,26,2)
(28,41,2)
(9,32,2)
(55,39,2)
(41,63,2)
(0,12,2)
(33,63,2)
(32,36,2)
(45,28,2)
(71,26,2)
(31,63,2)
(37,62,2)
(19,68,2)
(27,63,2)
(29,63,2)
(38,41,2)
(19,62,2)
-----------------------------------
(0,CWE78_OS_Command_Injection__char_console_execlp_64b_badSink(&data)
(1,data)
(2,data)
(3,dataBuffer)
(4,dataLen)
(5,strlen(data)
(6,dataLen)
(7,data[dataLen-1] == \\\'\\\\n\\\')
(8,int)
(9,fgets(data+dataLen, (int)
(10,1)
(11,dataLen)
(12,&data)
(13,dataLen)
(14,stdin)
(15,\\\'\\\\0\\\')
(16,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,0)
(18,data[dataLen] = \\\'\\\\0\\\')
(19,(int)
(20,if (100-dataLen > 1)
(21,data)
(22,)
(23,dataBuffer)
(24,data)
(25,dataLen)
(26,dataLen > 0)
(27,data)
(28,dataLen-1)
(29,printLine("fgets()
(30,)
(31,\\\'\\\\0\\\')
(32,data+dataLen)
(33,dataLen = strlen(data)
(34,dataLen-1)
(35,dataLen)
(36,dataLen = strlen(data)
(37,dataLen)
(38,1)
(39,data = dataBuffer)
(40,NULL)
(41,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,data)
(43,data[dataLen])
(44,dataBuffer[100] = COMMAND_ARG2)
(45,data[dataLen-1])
(46,)
(47,dataLen)
(48,dataLen)
(49,100-dataLen)
(50,1)
(51,100)
(52,RET)
(53,dataBuffer)
(54,data)
(55,strlen(data)
(56,)
(57,data)
(58,data)
(59,100)
(60,)
(61,COMMAND_ARG2)
(62,100-dataLen > 1)
(63,fgets(data+dataLen, (int)
(64,\\\'\\\\n\\\')
(65,dataLen)
(66,data[dataLen-1] = \\\'\\\\0\\\')
(67,if (fgets(data+dataLen, (int)
(68,100-dataLen)
(69,)
(70,"fgets()
(71,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^