-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
        {
            int result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
78,79
78,80
79,80
81,82
81,83
82,83
82,84
85,86
87,88
87,89
88,89
89,90
89,91
91,92
91,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,67,71,73,76,77,80,83,84,86,90,92,96,98,102,104,109,110
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
63,64
63,65
68,69
68,70
94,95
94,96
-----guardedBy-----
73,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_12_bad()
CWE190_Integer_Overflow__int_fscanf_square_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX)
data > INT_MIN
data
data
INT_MIN
INT_MIN
abs(data) < (long)sqrt((double)INT_MAX)
abs(data)
abs
abs
data
data
(long)sqrt((double)INT_MAX)
long
long

sqrt((double)INT_MAX)
sqrt
sqrt
(double)INT_MAX
double
double

INT_MAX
INT_MAX
{            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,2,0)
(43,39,0)
(33,0,0)
(49,8,0)
(51,15,0)
(56,42,0)
(7,25,0)
(7,2,0)
(15,40,0)
(55,25,0)
(34,2,0)
(29,49,0)
(37,25,0)
(35,48,0)
(52,2,0)
(0,22,0)
(54,7,0)
(8,49,0)
(8,2,0)
(49,41,0)
(1,11,0)
(55,2,0)
(37,51,0)
(20,55,0)
(2,19,0)
(3,11,0)
(30,51,0)
(11,3,0)
(46,52,0)
(56,55,0)
(51,37,0)
(39,42,0)
(10,56,0)
(48,41,0)
(55,56,0)
(16,25,0)
(11,40,0)
(52,24,0)
(50,25,0)
(38,24,0)
(44,19,0)
(39,56,0)
(27,24,0)
(31,8,0)
(12,7,0)
(15,51,0)
(40,15,0)
(48,49,0)
(40,11,0)
(36,19,0)
(32,37,0)
(7,30,0)
(30,7,0)
(15,45,0)
(8,25,0)
(17,6,0)
(45,15,0)
(4,19,0)
(24,52,0)
(51,30,0)
(24,26,0)
(47,55,0)
(53,8,0)
(14,42,0)
(23,41,0)
(41,28,0)
(25,9,0)
(37,2,0)
(20,10,1)
(52,46,1)
(24,52,1)
(27,13,1)
(39,56,1)
(5,24,1)
(30,7,1)
(39,43,1)
(55,2,1)
(13,2,1)
(8,25,1)
(8,31,1)
(55,47,1)
(37,25,1)
(11,1,1)
(53,29,1)
(40,11,1)
(35,49,1)
(32,7,1)
(18,39,1)
(38,27,1)
(21,34,1)
(0,33,1)
(48,35,1)
(55,25,1)
(18,48,1)
(10,30,1)
(11,3,1)
(16,50,1)
(49,8,1)
(1,37,1)
(48,49,1)
(46,38,1)
(7,25,1)
(7,2,1)
(15,45,1)
(37,2,1)
(15,40,1)
(25,16,1)
(30,51,1)
(29,5,1)
(18,0,1)
(52,2,1)
(54,12,1)
(43,56,1)
(37,32,1)
(56,55,1)
(31,53,1)
(7,54,1)
(8,2,1)
(50,13,1)
(5,25,1)
(51,37,1)
(2,21,1)
(47,20,1)
(51,15,1)
(33,30,1)
(12,5,1)
(49,5,2)
(50,13,2)
(7,5,2)
(11,3,2)
(30,5,2)
(15,7,2)
(55,25,2)
(55,2,2)
(8,25,2)
(27,13,2)
(51,37,2)
(40,11,2)
(24,13,2)
(16,13,2)
(52,2,2)
(24,52,2)
(32,7,2)
(51,7,2)
(54,5,2)
(33,30,2)
(37,2,2)
(7,25,2)
(43,30,2)
(52,13,2)
(49,8,2)
(25,13,2)
(48,5,2)
(37,25,2)
(56,30,2)
(30,7,2)
(51,15,2)
(10,30,2)
(37,7,2)
(47,30,2)
(46,13,2)
(8,2,2)
(8,5,2)
(7,2,2)
(48,49,2)
(15,45,2)
(56,55,2)
(39,30,2)
(38,13,2)
(35,5,2)
(0,30,2)
(53,5,2)
(55,30,2)
(20,30,2)
(30,51,2)
(40,7,2)
(12,5,2)
(1,7,2)
(11,7,2)
(31,5,2)
(39,56,2)
(15,40,2)
(29,5,2)
-----------------------------------
(0,printLine("data value is too large to perform arithmetic safely.")
(1,INT_MAX)
(2,data = 0)
(3,double)
(4,data)
(5,globalReturnsTrueOrFalse()
(6,)
(7,data > INT_MIN)
(8,data * data)
(9,)
(10,result)
(11,(double)
(12,data)
(13,globalReturnsTrueOrFalse()
(14,result)
(15,(long)
(16,2)
(17,if (data > INT_MIN && abs(data)
(18,RET)
(19,)
(20,data)
(21,0)
(22,)
(23,result)
(24,fscanf(stdin, "%d", &data)
(25,data = 2)
(26,)
(27,stdin)
(28,)
(29,result)
(30,data > INT_MIN && abs(data)
(31,data)
(32,data)
(33,"data value is too large to perform arithmetic safely.")
(34,data)
(35,result)
(36,if(globalReturnsTrueOrFalse()
(37,abs(data)
(38,"%d")
(39,printIntLine(result)
(40,sqrt((double)
(41,)
(42,)
(43,result)
(44,if(globalReturnsTrueOrFalse()
(45,long)
(46,data)
(47,data)
(48,printIntLine(result)
(49,result = data * data)
(50,data)
(51,abs(data)
(52,&data)
(53,data)
(54,INT_MIN)
(55,data * data)
(56,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^