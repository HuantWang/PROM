-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int_14_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(globalFive==5)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printIntLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
75,76
76,77
77,78
77,79
78,79
78,80
79,80
81,82
84,85
85,86
85,87
86,87
88,89
90,91
90,92
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
100,101
100,102
101,102
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,61,66,67,70,71,74,80,82,83,87,89,93,94,99,102,103
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
64,65
64,66
68,69
68,70
77,78
77,79
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int_14_bad(){    int * data;    /* Initialize data */    data = NULL;    if(globalFive==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int_14_bad()
CWE416_Use_After_Free__malloc_free_int_14_bad
{    int * data;    /* Initialize data */    data = NULL;    if(globalFive==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalFive==5
globalFive
globalFive
5
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5;            }
data[i] = 5;
data[i] = 5
data[i]
data
data
i
i
5
free(data);
free(data)
free
free
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
-----joern-----
(0,52,0)
(32,22,0)
(3,6,0)
(29,42,0)
(41,3,0)
(55,34,0)
(19,44,0)
(3,24,0)
(7,50,0)
(20,26,0)
(11,38,0)
(36,42,0)
(51,27,0)
(40,6,0)
(30,18,0)
(3,13,0)
(6,23,0)
(45,13,0)
(44,19,0)
(24,10,0)
(47,18,0)
(50,38,0)
(1,3,0)
(17,54,0)
(27,13,0)
(25,0,0)
(13,44,0)
(18,47,0)
(33,23,0)
(39,23,0)
(20,8,0)
(54,38,0)
(12,52,0)
(50,22,0)
(48,37,0)
(34,38,0)
(5,0,0)
(21,23,0)
(47,19,0)
(4,6,0)
(35,13,0)
(24,3,0)
(26,20,0)
(43,27,0)
(44,13,0)
(16,37,0)
(9,44,0)
(46,38,0)
(45,52,0)
(31,45,0)
(14,47,0)
(22,53,0)
(2,54,0)
(13,52,0)
(28,50,0)
(19,47,0)
(50,13,0)
(44,9,0)
(49,26,0)
(1,42,1)
(36,45,1)
(29,36,1)
(49,27,1)
(42,29,1)
(28,54,1)
(11,27,1)
(31,54,1)
(45,31,1)
(26,49,1)
(32,50,1)
(27,43,1)
(18,30,1)
(48,6,1)
(17,38,1)
(3,6,1)
(22,32,1)
(14,35,1)
(2,17,1)
(3,41,1)
(20,26,1)
(54,38,1)
(54,2,1)
(51,13,1)
(44,19,1)
(43,51,1)
(4,40,1)
(47,18,1)
(34,38,1)
(35,37,1)
(41,1,1)
(3,13,1)
(15,24,1)
(36,37,1)
(50,38,1)
(15,42,1)
(16,48,1)
(27,13,1)
(38,46,1)
(34,55,1)
(55,22,1)
(44,9,1)
(37,16,1)
(17,34,1)
(6,4,1)
(19,47,1)
(30,14,1)
(13,44,1)
(45,13,1)
(50,7,1)
(24,3,1)
(46,11,1)
(11,20,1)
(50,13,1)
(7,28,1)
(28,54,2)
(51,37,2)
(50,54,2)
(30,37,2)
(27,37,2)
(24,42,2)
(45,13,2)
(32,54,2)
(22,54,2)
(44,19,2)
(43,37,2)
(27,13,2)
(20,26,2)
(34,54,2)
(47,18,2)
(49,27,2)
(26,27,2)
(50,38,2)
(1,42,2)
(20,27,2)
(3,42,2)
(47,37,2)
(2,37,2)
(44,37,2)
(13,37,2)
(54,54,2)
(19,37,2)
(3,6,2)
(18,37,2)
(17,37,2)
(11,37,2)
(19,47,2)
(41,42,2)
(3,13,2)
(31,37,2)
(2,54,2)
(55,54,2)
(50,13,2)
(14,37,2)
(7,54,2)
(24,3,2)
(13,44,2)
(44,9,2)
(45,37,2)
(54,38,2)
(35,37,2)
(54,37,2)
(17,54,2)
(38,37,2)
(34,38,2)
(46,37,2)
-----------------------------------
(0,)
(1,data)
(2,100)
(3,data[0])
(4,NULL)
(5,for(i = 0; i < 100; i++)
(6,data = NULL)
(7,i)
(8,)
(9,int *)
(10,)
(11,i)
(12,if (data == NULL)
(13,data = (int *)
(14,100)
(15,RET)
(16,5)
(17,i)
(18,sizeof(int)
(19,malloc(100*sizeof(int)
(20,exit(-1)
(21,if(globalFive==5)
(22,data[i] = 5)
(23,)
(24,printIntLine(data[0])
(25,i)
(26,-1)
(27,data == NULL)
(28,data)
(29,5)
(30,int)
(31,data)
(32,5)
(33,data)
(34,i++)
(35,data)
(36,globalFive)
(37,globalFive==5)
(38,i = 0)
(39,if(globalFive==5)
(40,data)
(41,0)
(42,globalFive==5)
(43,NULL)
(44,(int *)
(45,free(data)
(46,0)
(47,100*sizeof(int)
(48,globalFive)
(49,1)
(50,data[i])
(51,data)
(52,)
(53,)
(54,i < 100)
(55,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^