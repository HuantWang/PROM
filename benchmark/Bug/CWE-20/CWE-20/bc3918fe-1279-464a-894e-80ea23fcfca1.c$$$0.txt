-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_14_bad()
{
    int64_t data;
    data = 0LL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
25,27
26,27
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,9,11,15,16,20,21,27,28,34,36,40,42,46,48
-----computeFrom-----
13,14
13,15
18,19
18,20
25,26
25,27
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_14_bad(){    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_14_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_14_bad
{    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(2,18,0)
(13,1,0)
(17,13,0)
(3,0,0)
(6,0,0)
(19,13,0)
(11,10,0)
(16,17,0)
(18,2,0)
(18,13,0)
(8,10,0)
(5,2,0)
(17,18,0)
(21,2,0)
(14,18,0)
(15,4,0)
(7,4,0)
(20,4,0)
(9,4,0)
(11,7,1)
(17,18,1)
(14,0,1)
(10,8,1)
(12,0,1)
(18,2,1)
(6,3,1)
(17,16,1)
(0,6,1)
(16,18,1)
(21,14,1)
(3,10,1)
(12,17,1)
(2,5,1)
(5,21,1)
(8,11,1)
(14,0,2)
(16,0,2)
(17,0,2)
(2,0,2)
(18,2,2)
(5,0,2)
(18,0,2)
(21,0,2)
(17,18,2)
-----------------------------------
(0,globalFive==5)
(1,)
(2,data * data)
(3,globalFive)
(4,)
(5,data)
(6,5)
(7,L)
(8,5)
(9,if(globalFive==5)
(10,globalFive==5)
(11,globalFive)
(12,RET)
(13,)
(14,result)
(15,if(globalFive==5)
(16,result)
(17,printLongLongLine(result)
(18,result = data * data)
(19,result)
(20,data)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^