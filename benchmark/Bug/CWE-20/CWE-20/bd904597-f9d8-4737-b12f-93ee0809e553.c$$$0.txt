-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad()
{
    int * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (int *)malloc(50*sizeof(int));
    if (data == NULL) {exit(-1);}
    {
        int source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
50,51
51,52
51,53
53,54
53,55
53,56
55,56
57,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
67,71
68,69
69,70
69,71
70,71
73,74
73,75
74,75
77,78
78,79
80,81
81,82
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,56,59,64,66,71,72,75,76,79,85,87,90,92,96,99,100,104,106
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
69,70
69,71
73,74
73,75
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad(){    int * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad
{    int * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    {        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printIntLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(25,44,0)
(23,33,0)
(34,30,0)
(46,6,0)
(37,19,0)
(26,16,0)
(1,50,0)
(18,47,0)
(22,6,0)
(15,3,0)
(16,9,0)
(13,19,0)
(27,22,0)
(17,4,0)
(22,38,0)
(41,46,0)
(11,46,0)
(32,22,0)
(29,30,0)
(39,5,0)
(51,31,0)
(6,44,0)
(10,5,0)
(31,40,0)
(45,17,0)
(42,40,0)
(38,43,0)
(38,5,0)
(4,17,0)
(21,48,0)
(23,48,0)
(3,50,0)
(30,34,0)
(20,28,0)
(0,6,0)
(36,9,0)
(4,50,0)
(50,25,0)
(6,30,0)
(12,44,0)
(17,6,0)
(5,40,0)
(2,25,0)
(5,47,0)
(30,6,0)
(24,28,0)
(47,25,0)
(5,38,0)
(35,17,0)
(29,16,0)
(48,23,0)
(7,44,0)
(14,40,0)
(30,29,0)
(22,40,0)
(16,29,0)
(19,40,0)
(3,6,0)
(28,44,0)
(9,16,0)
(49,50,0)
(42,14,1)
(19,37,1)
(46,11,1)
(48,21,1)
(8,3,1)
(22,40,1)
(22,6,1)
(30,29,1)
(38,5,1)
(15,4,1)
(5,40,1)
(3,6,1)
(0,28,1)
(46,6,1)
(37,13,1)
(5,10,1)
(13,40,1)
(47,18,1)
(18,46,1)
(21,46,1)
(26,0,1)
(19,40,1)
(13,31,1)
(31,40,1)
(40,42,1)
(24,20,1)
(17,6,1)
(10,39,1)
(51,38,1)
(45,35,1)
(32,27,1)
(5,47,1)
(39,22,1)
(31,51,1)
(6,30,1)
(41,6,1)
(22,32,1)
(28,24,1)
(9,36,1)
(29,16,1)
(4,17,1)
(11,41,1)
(30,34,1)
(35,19,1)
(17,45,1)
(14,47,1)
(18,23,1)
(27,19,1)
(16,9,1)
(36,26,1)
(23,48,1)
(3,15,1)
(31,19,2)
(10,19,2)
(19,19,2)
(19,40,2)
(29,16,2)
(3,6,2)
(51,19,2)
(22,6,2)
(23,48,2)
(30,29,2)
(5,19,2)
(17,6,2)
(13,19,2)
(38,19,2)
(6,30,2)
(4,17,2)
(30,34,2)
(38,5,2)
(22,19,2)
(37,19,2)
(27,19,2)
(23,46,2)
(5,40,2)
(32,19,2)
(22,40,2)
(46,6,2)
(21,46,2)
(16,9,2)
(39,19,2)
(48,46,2)
(31,40,2)
(5,47,2)
-----------------------------------
(0,data)
(1,for (i = 0; i < 100; i++)
(2,source)
(3,free(data)
(4,printIntLine(data[0])
(5,source[i])
(6,data = (int *)
(7,data)
(8,RET)
(9,sizeof(int)
(10,i)
(11,NULL)
(12,if (data == NULL)
(13,i)
(14,i)
(15,data)
(16,50*sizeof(int)
(17,data[0])
(18,source)
(19,i < 100)
(20,data)
(21,1)
(22,data[i])
(23,exit(-1)
(24,NULL)
(25,)
(26,50)
(27,data)
(28,data = NULL)
(29,malloc(50*sizeof(int)
(30,(int *)
(31,i++)
(32,i)
(33,)
(34,int *)
(35,data)
(36,int)
(37,100)
(38,data[i] = source[i])
(39,source)
(40,i = 0)
(41,data)
(42,0)
(43,)
(44,)
(45,0)
(46,data == NULL)
(47,source[100] = {0})
(48,-1)
(49,i)
(50,)
(51,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^