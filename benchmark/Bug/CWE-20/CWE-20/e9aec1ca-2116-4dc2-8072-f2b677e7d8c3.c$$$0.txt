-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_square_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,30,32,36,38
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_square_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_connect_socket_square_66b_badSink(int dataArray[])
CWE190_Integer_Overflow__int_connect_socket_square_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,6,0)
(10,7,0)
(2,7,0)
(11,12,0)
(1,10,0)
(11,16,0)
(12,14,0)
(12,11,0)
(17,14,0)
(3,10,0)
(15,11,0)
(5,6,0)
(7,14,0)
(6,12,0)
(0,12,0)
(9,3,0)
(4,11,0)
(3,7,0)
(6,10,0)
(10,6,0)
(6,12,1)
(3,9,1)
(15,4,1)
(8,3,1)
(4,0,1)
(3,10,1)
(6,5,1)
(5,13,1)
(9,10,1)
(13,1,1)
(10,6,1)
(11,16,1)
(11,15,1)
(12,11,1)
(1,12,1)
(6,12,2)
(10,6,2)
(3,10,2)
(11,16,2)
(12,11,2)
-----------------------------------
(0,data)
(1,result)
(2,result)
(3,printIntLine(result)
(4,dataArray)
(5,data)
(6,data * data)
(7,)
(8,RET)
(9,result)
(10,result = data * data)
(11,dataArray[2])
(12,data = dataArray[2])
(13,data)
(14,)
(15,2)
(16,int dataArray[])
(17,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^