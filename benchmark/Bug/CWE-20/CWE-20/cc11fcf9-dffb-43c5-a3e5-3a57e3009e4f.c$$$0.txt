-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
{
    size_t data = myStruct.structFirst;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,7,9,14,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct){    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink(CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType
myStruct
myStruct
{    size_t data = myStruct.structFirst;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = myStruct.structFirst;
size_t data = myStruct.structFirst;
size_t
size_t
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(36,26,0)
(1,30,0)
(14,7,0)
(22,28,0)
(39,27,0)
(33,7,0)
(16,27,0)
(28,39,0)
(15,3,0)
(14,3,0)
(9,14,0)
(21,26,0)
(31,36,0)
(23,4,0)
(17,31,0)
(38,2,0)
(7,20,0)
(10,5,0)
(42,2,0)
(40,24,0)
(4,39,0)
(16,39,0)
(31,17,0)
(37,28,0)
(24,39,0)
(13,4,0)
(4,27,0)
(18,7,0)
(8,35,0)
(24,27,0)
(43,27,0)
(12,17,0)
(34,42,0)
(39,26,0)
(35,10,0)
(2,42,0)
(19,11,0)
(30,3,0)
(7,14,0)
(11,0,0)
(29,30,0)
(32,16,0)
(26,21,0)
(41,39,0)
(25,31,0)
(42,14,0)
(26,39,0)
(36,31,0)
(10,35,0)
(26,36,0)
(31,14,0)
(4,23,1)
(41,42,1)
(2,38,1)
(16,39,1)
(14,7,1)
(37,22,1)
(42,2,1)
(42,14,1)
(19,42,1)
(6,24,1)
(38,34,1)
(28,37,1)
(26,21,1)
(24,40,1)
(6,11,1)
(10,35,1)
(31,17,1)
(17,12,1)
(39,26,1)
(28,39,1)
(13,10,1)
(18,33,1)
(40,16,1)
(7,20,1)
(35,8,1)
(7,18,1)
(31,14,1)
(16,32,1)
(11,19,1)
(32,4,1)
(22,39,1)
(8,28,1)
(23,13,1)
(24,39,1)
(34,14,1)
(36,31,1)
(26,36,1)
(4,39,1)
(25,41,1)
(12,25,1)
(33,9,1)
(13,28,1)
(11,42,2)
(36,42,2)
(28,42,2)
(26,42,2)
(16,42,2)
(31,42,2)
(28,39,2)
(4,39,2)
(19,42,2)
(7,20,2)
(39,42,2)
(42,2,2)
(37,42,2)
(10,35,2)
(16,39,2)
(32,42,2)
(17,42,2)
(26,36,2)
(41,42,2)
(26,21,2)
(31,17,2)
(24,39,2)
(31,14,2)
(10,28,2)
(12,42,2)
(13,42,2)
(39,26,2)
(25,42,2)
(14,7,2)
(8,28,2)
(23,42,2)
(42,14,2)
(24,42,2)
(35,28,2)
(4,42,2)
(22,42,2)
(36,31,2)
(40,42,2)
-----------------------------------
(0,)
(1,if (data > strlen(HELLO_STRING)
(2,strlen(HELLO_STRING)
(3,)
(4,strcpy(myString, HELLO_STRING)
(5,)
(6,RET)
(7,myStruct.structFirst)
(8,1)
(9,data)
(10,exit(-1)
(11,printLine("Input is less than the length of the source string")
(12,char)
(13,myString)
(14,data = myStruct.structFirst)
(15,data)
(16,printLine(myString)
(17,sizeof(char)
(18,structFirst)
(19,"Input is less than the length of the source string")
(20,CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_67_structType myStruct)
(21,char *)
(22,myString)
(23,HELLO_STRING)
(24,free(myString)
(25,data)
(26,(char *)
(27,)
(28,myString == NULL)
(29,myString)
(30,)
(31,data*sizeof(char)
(32,myString)
(33,myStruct)
(34,data)
(35,-1)
(36,malloc(data*sizeof(char)
(37,NULL)
(38,HELLO_STRING)
(39,myString = (char *)
(40,myString)
(41,myString)
(42,data > strlen(HELLO_STRING)
(43,if (myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^