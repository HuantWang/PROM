-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        char source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,52,56,58,61,62,65,69,71,73,77,79,83,85
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad(){    char * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad
{    char * data;    data = NULL;    while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}        break;    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(33,8,0)
(38,0,0)
(29,13,0)
(26,15,0)
(5,34,0)
(4,21,0)
(17,28,0)
(20,0,0)
(38,28,0)
(19,32,0)
(8,18,0)
(28,32,0)
(25,13,0)
(9,1,0)
(9,23,0)
(21,28,0)
(25,27,0)
(38,13,0)
(13,25,0)
(13,34,0)
(21,0,0)
(1,25,0)
(3,14,0)
(6,15,0)
(10,17,0)
(8,33,0)
(17,15,0)
(0,32,0)
(36,32,0)
(23,9,0)
(12,28,0)
(27,25,0)
(17,0,0)
(31,38,0)
(1,9,0)
(16,28,0)
(37,23,0)
(14,13,0)
(22,9,0)
(21,13,0)
(11,17,0)
(25,1,0)
(30,14,0)
(7,34,0)
(2,33,0)
(15,0,0)
(17,13,0)
(37,22,1)
(31,21,1)
(14,13,1)
(8,33,1)
(26,7,1)
(15,6,1)
(38,28,1)
(33,2,1)
(9,23,1)
(28,16,1)
(35,28,1)
(21,13,1)
(11,10,1)
(23,37,1)
(17,11,1)
(26,35,1)
(17,15,1)
(3,13,1)
(21,4,1)
(13,25,1)
(38,31,1)
(17,28,1)
(7,14,1)
(24,38,1)
(30,3,1)
(2,14,1)
(6,26,1)
(29,35,1)
(22,29,1)
(4,17,1)
(21,28,1)
(16,12,1)
(14,30,1)
(1,9,1)
(25,27,1)
(10,15,1)
(17,13,1)
(7,8,1)
(25,1,1)
(38,13,1)
(25,27,2)
(38,13,2)
(23,35,2)
(9,35,2)
(13,35,2)
(14,35,2)
(21,28,2)
(30,35,2)
(22,35,2)
(17,13,2)
(25,35,2)
(29,35,2)
(9,23,2)
(33,14,2)
(3,35,2)
(17,28,2)
(2,14,2)
(21,13,2)
(8,33,2)
(25,1,2)
(38,28,2)
(8,14,2)
(37,35,2)
(14,13,2)
(17,15,2)
(1,9,2)
(7,35,2)
(13,25,2)
(1,35,2)
-----------------------------------
(0,)
(1,malloc(10*sizeof(char)
(2,1)
(3,data)
(4,data)
(5,if (data == NULL)
(6,SRC_STRING)
(7,break;)
(8,exit(-1)
(9,10*sizeof(char)
(10,data)
(11,source)
(12,data)
(13,data = (char *)
(14,data == NULL)
(15,source[10+1] = SRC_STRING)
(16,NULL)
(17,strcpy(data, source)
(18,)
(19,while(1)
(20,source)
(21,printLine(data)
(22,10)
(23,sizeof(char)
(24,RET)
(25,(char *)
(26,source)
(27,char *)
(28,data = NULL)
(29,data)
(30,NULL)
(31,data)
(32,)
(33,-1)
(34,)
(35,1)
(36,data)
(37,char)
(38,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^