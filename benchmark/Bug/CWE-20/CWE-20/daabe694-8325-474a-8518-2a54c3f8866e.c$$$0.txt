-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,45
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    return data;}
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(4,20,0)
(9,2,0)
(17,13,0)
(13,18,0)
(13,7,0)
(0,14,0)
(21,20,0)
(5,2,0)
(10,16,0)
(16,12,0)
(2,9,0)
(14,9,0)
(8,21,0)
(12,16,0)
(7,5,0)
(21,7,0)
(5,15,0)
(1,7,0)
(9,14,0)
(7,18,0)
(15,5,0)
(12,3,0)
(11,21,0)
(6,9,0)
(19,13,0)
(7,20,0)
(5,7,0)
(2,5,0)
(21,18,0)
(9,14,1)
(21,7,1)
(19,17,1)
(17,7,1)
(8,12,1)
(5,15,1)
(12,16,1)
(13,19,1)
(13,18,1)
(5,2,1)
(14,0,1)
(21,8,1)
(16,10,1)
(6,1,1)
(13,7,1)
(21,18,1)
(7,18,1)
(7,5,1)
(8,13,1)
(10,13,1)
(0,6,1)
(2,9,1)
(11,21,1)
(5,15,2)
(11,21,2)
(12,13,2)
(16,13,2)
(21,7,2)
(13,18,2)
(5,2,2)
(2,9,2)
(13,7,2)
(9,14,2)
(12,16,2)
(21,18,2)
(7,5,2)
(7,18,2)
(10,13,2)
-----------------------------------
(0,char)
(1,data)
(2,malloc(10*sizeof(char)
(3,)
(4,if (data == NULL)
(5,(char *)
(6,10)
(7,data = (char *)
(8,data)
(9,10*sizeof(char)
(10,1)
(11,RET)
(12,exit(-1)
(13,data == NULL)
(14,sizeof(char)
(15,char *)
(16,-1)
(17,data)
(18,char * data)
(19,NULL)
(20,)
(21,return data;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^