-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (wchar_t *)malloc(50*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    data[0] = L'\0'; /* null terminate */
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        {
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with L'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            SNPRINTF(data, 100, L"%s", source);
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
56,58
56,59
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
73,74
75,76
75,77
75,78
75,79
75,80
75,81
76,77
77,78
77,79
79,80
79,81
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
103,104
103,105
103,106
103,107
103,108
104,105
106,107
110,111
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,61,62,65,68,70,71,74,78,80,82,86,88,89,91,92,97,99,100,101,105,107,108,109,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
90,91
90,92
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31_bad(){    wchar_t * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (wchar_t *)malloc(50*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data[0] = L'\0'; /* null terminate */    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31_bad
{    wchar_t * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (wchar_t *)malloc(50*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    data[0] = L'\0'; /* null terminate */    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);            free(data);        }    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);            free(data);        }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,35,0)
(30,26,0)
(36,8,0)
(20,23,0)
(4,10,0)
(1,32,0)
(4,21,0)
(23,3,0)
(32,3,0)
(26,36,0)
(18,26,0)
(35,6,0)
(8,38,0)
(22,35,0)
(21,4,0)
(9,6,0)
(3,18,0)
(12,6,0)
(37,30,0)
(5,36,0)
(31,38,0)
(33,18,0)
(25,35,0)
(2,30,0)
(17,35,0)
(19,25,0)
(36,5,0)
(28,6,0)
(39,28,0)
(29,21,0)
(27,28,0)
(16,18,0)
(24,6,0)
(7,25,0)
(32,25,0)
(38,14,0)
(18,35,0)
(26,6,0)
(38,8,0)
(11,3,0)
(0,14,0)
(23,25,0)
(8,36,0)
(34,3,0)
(14,38,0)
(13,26,0)
(36,26,0)
(30,2,1)
(23,20,1)
(30,26,1)
(38,14,1)
(28,39,1)
(31,13,1)
(32,1,1)
(2,37,1)
(24,4,1)
(33,16,1)
(37,26,1)
(4,21,1)
(3,11,1)
(20,7,1)
(14,0,1)
(21,29,1)
(29,30,1)
(34,18,1)
(24,30,1)
(11,34,1)
(36,8,1)
(32,3,1)
(26,36,1)
(3,18,1)
(36,5,1)
(1,23,1)
(15,32,1)
(18,26,1)
(23,3,1)
(39,27,1)
(0,31,1)
(13,28,1)
(8,38,1)
(18,33,1)
(16,24,1)
(7,3,1)
(38,14,2)
(4,21,2)
(36,5,2)
(23,3,2)
(29,30,2)
(36,8,2)
(3,18,2)
(30,26,2)
(18,26,2)
(8,38,2)
(4,30,2)
(32,3,2)
(26,36,2)
(21,30,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,NULL)
(3,* data = dataCopy)
(4,exit(-1)
(5,wchar_t *)
(6,)
(7,'\\\\0')
(8,malloc(50*sizeof(wchar_t)
(9,if (data == NULL)
(10,)
(11,dataCopy)
(12,data)
(13,data)
(14,sizeof(wchar_t)
(15,RET)
(16,dataCopy)
(17,data)
(18,* dataCopy = data)
(19,source)
(20,data)
(21,-1)
(22,dataCopy)
(23,printWLine(data)
(24,'\\\\0')
(25,)
(26,data = (wchar_t *)
(27,data)
(28,data = NULL)
(29,1)
(30,data == NULL)
(31,50)
(32,free(data)
(33,data)
(34,data)
(35,)
(36,(wchar_t *)
(37,data)
(38,50*sizeof(wchar_t)
(39,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^