-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17_bad()
{
    int i;
    wchar_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
36,38
36,39
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
75,76
75,77
75,78
75,79
75,80
75,81
76,77
77,78
77,79
79,80
79,81
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
90,91
90,92
93,94
94,95
94,96
95,96
95,97
96,97
98,99
98,100
102,103
103,104
103,105
103,106
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,13,15,16,20,22,27,28,31,32,35,40,43,45,48,50,53,54,58,60,65,67,72,73,74,78,80,82,86,88,89,91,92,97,99,100,101,105,107,109,113,115,119,121
-----computeFrom-----
18,19
18,20
25,26
25,27
29,30
29,31
38,39
38,40
49,50
49,51
56,57
56,58
69,70
69,71
90,91
90,92
94,95
94,96
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17_bad(){    int i;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17_bad
{    int i;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,18,0)
(42,24,0)
(34,27,0)
(16,41,0)
(43,3,0)
(29,18,0)
(24,32,0)
(20,31,0)
(29,0,0)
(13,36,0)
(23,3,0)
(44,33,0)
(33,28,0)
(21,43,0)
(30,14,0)
(12,33,0)
(26,29,0)
(13,14,0)
(17,18,0)
(37,42,0)
(19,31,0)
(27,18,0)
(2,35,0)
(14,13,0)
(22,3,0)
(42,18,0)
(2,0,0)
(38,28,0)
(27,24,0)
(0,29,0)
(15,41,0)
(11,32,0)
(1,28,0)
(4,2,0)
(45,35,0)
(43,18,0)
(27,3,0)
(3,32,0)
(6,9,0)
(35,2,0)
(18,41,0)
(18,29,0)
(7,32,0)
(9,28,0)
(8,32,0)
(10,43,0)
(42,3,0)
(5,24,0)
(0,2,0)
(43,24,0)
(29,26,0)
(40,24,0)
(9,6,1)
(18,29,1)
(2,35,1)
(42,37,1)
(34,42,1)
(17,33,1)
(21,40,1)
(27,3,1)
(1,3,1)
(12,44,1)
(43,18,1)
(43,3,1)
(38,1,1)
(10,21,1)
(45,4,1)
(3,22,1)
(29,0,1)
(42,3,1)
(20,19,1)
(31,20,1)
(33,28,1)
(39,27,1)
(6,15,1)
(15,31,1)
(27,18,1)
(9,28,1)
(13,14,1)
(40,33,1)
(43,10,1)
(28,38,1)
(27,34,1)
(37,43,1)
(14,30,1)
(30,31,1)
(31,18,1)
(33,12,1)
(44,28,1)
(35,45,1)
(0,2,1)
(29,26,1)
(22,23,1)
(15,13,1)
(19,18,1)
(42,18,1)
(44,9,1)
(4,17,1)
(6,33,2)
(33,28,2)
(29,26,2)
(9,33,2)
(31,18,2)
(27,3,2)
(43,18,2)
(30,31,2)
(45,33,2)
(2,35,2)
(2,33,2)
(44,33,2)
(9,28,2)
(17,33,2)
(43,3,2)
(31,33,2)
(29,0,2)
(0,33,2)
(19,33,2)
(27,18,2)
(18,29,2)
(33,33,2)
(42,18,2)
(20,33,2)
(4,33,2)
(15,33,2)
(13,31,2)
(14,31,2)
(42,3,2)
(29,33,2)
(0,2,2)
(35,33,2)
(12,33,2)
(13,14,2)
(18,33,2)
-----------------------------------
(0,malloc(50*sizeof(wchar_t)
(1,i)
(2,50*sizeof(wchar_t)
(3,data = NULL)
(4,50)
(5,source)
(6,i)
(7,data)
(8,i)
(9,i++)
(10,source)
(11,for(i = 0; i < 1; i++)
(12,1)
(13,exit(-1)
(14,-1)
(15,'\\\\0')
(16,if (data == NULL)
(17,data)
(18,data = (wchar_t *)
(19,data)
(20,NULL)
(21,data)
(22,NULL)
(23,data)
(24,)
(25,\'\\\\0\')
(26,wchar_t *)
(27,free(data)
(28,i = 0)
(29,(wchar_t *)
(30,1)
(31,data == NULL)
(32,)
(33,i < 1)
(34,data)
(35,sizeof(wchar_t)
(36,)
(37,data)
(38,0)
(39,RET)
(40,'\\\\0')
(41,)
(42,printWLine(data)
(43,wcscpy(data, source)
(44,i)
(45,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^