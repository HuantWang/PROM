-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
89,90
91,92
93,94
93,95
94,95
95,96
95,97
97,98
97,99
99,100
100,101
101,102
103,104
103,105
104,105
105,106
105,107
107,108
107,109
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,79,84,85,90,92,96,98,102,106,108,112,114,118,120
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
87,88
87,89
110,111
110,112
-----guardedBy-----
63,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_32_bad()
CWE190_Integer_Overflow__int_fgets_square_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(40,28,0)
(42,35,0)
(5,12,0)
(23,31,0)
(43,47,0)
(17,19,0)
(20,28,0)
(53,30,0)
(59,24,0)
(30,45,0)
(58,29,0)
(3,45,0)
(28,51,0)
(19,40,0)
(12,45,0)
(40,55,0)
(34,56,0)
(56,45,0)
(13,47,0)
(21,6,0)
(6,29,0)
(29,12,0)
(41,33,0)
(22,13,0)
(55,32,0)
(51,45,0)
(40,51,0)
(60,54,0)
(24,51,0)
(1,54,0)
(46,12,0)
(18,55,0)
(50,13,0)
(32,33,0)
(32,55,0)
(13,33,0)
(6,54,0)
(36,40,0)
(38,33,0)
(48,51,0)
(33,24,0)
(0,45,0)
(14,26,0)
(55,11,0)
(35,28,0)
(27,56,0)
(9,6,0)
(9,29,0)
(37,45,0)
(26,30,0)
(28,35,0)
(49,0,0)
(16,13,0)
(0,31,0)
(57,49,0)
(54,6,0)
(10,25,0)
(19,30,0)
(31,0,0)
(44,24,0)
(8,9,0)
(15,46,0)
(49,46,0)
(47,13,0)
(7,32,0)
(35,30,0)
(25,4,0)
(2,0,0)
(30,26,0)
(39,45,0)
(54,46,0)
(46,49,0)
(16,50,1)
(30,26,1)
(47,13,1)
(52,9,1)
(15,40,1)
(28,35,1)
(49,0,1)
(38,28,1)
(42,20,1)
(54,46,1)
(50,33,1)
(36,19,1)
(21,46,1)
(33,41,1)
(54,60,1)
(14,53,1)
(34,27,1)
(40,55,1)
(13,22,1)
(60,1,1)
(46,49,1)
(17,25,1)
(23,2,1)
(26,14,1)
(9,6,1)
(10,47,1)
(35,30,1)
(6,54,1)
(18,47,1)
(40,36,1)
(35,42,1)
(40,28,1)
(57,15,1)
(49,57,1)
(19,17,1)
(0,31,1)
(13,33,1)
(32,7,1)
(47,43,1)
(9,8,1)
(7,18,1)
(19,30,1)
(1,21,1)
(17,55,1)
(8,6,1)
(55,32,1)
(25,10,1)
(56,34,1)
(43,13,1)
(22,16,1)
(32,33,1)
(31,23,1)
(20,56,1)
(2,30,1)
(41,38,1)
(27,0,1)
(19,30,2)
(13,33,2)
(46,49,2)
(10,47,2)
(7,47,2)
(40,28,2)
(49,0,2)
(54,46,2)
(35,30,2)
(40,55,2)
(25,47,2)
(55,47,2)
(28,35,2)
(47,13,2)
(55,32,2)
(9,6,2)
(32,47,2)
(32,33,2)
(0,31,2)
(30,26,2)
(6,54,2)
(18,47,2)
-----------------------------------
(0,*dataPtr2 = &data)
(1,data)
(2,dataPtr2)
(3,dataPtr2)
(4,)
(5,data)
(6,result = data * data)
(7,inputBuffer)
(8,result)
(9,printIntLine(result)
(10,"fgets()
(11,)
(12,)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,data)
(15,data)
(16,CHAR_ARRAY_SIZE)
(17,dataPtr1)
(18,data)
(19,*dataPtr1)
(20,data)
(21,result)
(22,stdin)
(23,data)
(24,)
(25,printLine("fgets()
(26,&data)
(27,data)
(28,data = *dataPtr1)
(29,)
(30,*dataPtr1 = &data)
(31,&data)
(32,atoi(inputBuffer)
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,0)
(35,*dataPtr1)
(36,data)
(37,dataPtr1)
(38,inputBuffer)
(39,data)
(40,*dataPtr1 = data)
(41,"")
(42,dataPtr1)
(43,NULL)
(44,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,)
(46,data = *dataPtr2)
(47,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,data)
(49,*dataPtr2)
(50,inputBuffer)
(51,)
(52,RET)
(53,dataPtr1)
(54,data * data)
(55,data = atoi(inputBuffer)
(56,data = 0)
(57,dataPtr2)
(58,result)
(59,inputBuffer)
(60,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^