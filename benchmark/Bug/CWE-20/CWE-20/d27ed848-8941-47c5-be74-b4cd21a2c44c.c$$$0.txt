-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(int data)
{
    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
15,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
55,56
56,57
56,58
57,58
60,61
60,62
61,62
64,65
65,66
67,68
68,69
69,70
69,71
70,71
70,72
71,72
73,74
76,77
76,78
76,79
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,6,8,12,17,19,22,24,25,29,31,34,36,39,40,44,46,51,53,58,59,62,63,66,72,74,75,79,80,86,88,89,94,95,98,99,102,107,110,112,117,118,122,124
-----computeFrom-----
35,36
35,37
42,43
42,44
56,57
56,58
60,61
60,62
69,70
69,71
77,78
77,79
83,84
83,85
92,93
92,94
96,97
96,98
-----guardedBy-----
79,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(int data){    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badSink
int data
int
data
data
{    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(42,58,0)
(29,3,0)
(62,67,0)
(67,57,0)
(38,21,0)
(34,3,0)
(35,41,0)
(14,28,0)
(15,8,0)
(26,49,0)
(52,32,0)
(27,1,0)
(48,69,0)
(4,14,0)
(39,41,0)
(23,32,0)
(60,35,0)
(3,50,0)
(51,57,0)
(37,32,0)
(46,45,0)
(44,32,0)
(49,50,0)
(9,37,0)
(56,19,0)
(1,18,0)
(2,46,0)
(39,57,0)
(67,62,0)
(65,41,0)
(47,21,0)
(24,39,0)
(69,5,0)
(31,2,0)
(49,21,0)
(50,21,0)
(69,50,0)
(30,21,0)
(62,7,0)
(40,5,0)
(39,50,0)
(57,6,0)
(21,25,0)
(19,56,0)
(54,67,0)
(11,21,0)
(17,8,0)
(13,21,0)
(5,43,0)
(68,37,0)
(36,39,0)
(50,56,0)
(69,12,0)
(16,56,0)
(56,16,0)
(18,1,0)
(59,69,0)
(10,67,0)
(55,23,0)
(33,35,0)
(64,41,0)
(20,41,0)
(67,50,0)
(67,32,0)
(8,12,0)
(0,43,0)
(22,65,0)
(18,19,0)
(66,18,0)
(46,2,0)
(19,18,0)
(56,50,0)
(63,50,0)
(41,64,1)
(23,55,1)
(69,12,1)
(55,62,1)
(61,53,1)
(24,36,1)
(39,24,1)
(54,10,1)
(20,46,1)
(29,50,1)
(19,18,1)
(69,50,1)
(56,16,1)
(67,50,1)
(60,41,1)
(20,3,1)
(31,3,1)
(2,31,1)
(15,35,1)
(44,5,1)
(39,50,1)
(32,52,1)
(56,19,1)
(23,32,1)
(9,68,1)
(37,9,1)
(35,41,1)
(49,50,1)
(63,53,1)
(66,63,1)
(39,41,1)
(22,57,1)
(1,27,1)
(52,44,1)
(4,8,1)
(64,20,1)
(14,4,1)
(69,59,1)
(48,8,1)
(68,23,1)
(59,48,1)
(34,29,1)
(3,34,1)
(65,22,1)
(37,32,1)
(26,14,1)
(3,50,1)
(50,56,1)
(67,57,1)
(27,66,1)
(8,17,1)
(61,49,1)
(33,60,1)
(49,26,1)
(18,1,1)
(17,15,1)
(65,41,1)
(67,32,1)
(40,69,1)
(57,51,1)
(8,12,1)
(26,37,1)
(68,32,1)
(46,2,1)
(5,40,1)
(67,54,1)
(51,39,1)
(60,65,1)
(62,67,1)
(35,33,1)
(36,35,1)
(10,37,1)
(33,53,2)
(46,3,2)
(34,53,2)
(57,35,2)
(49,53,2)
(65,35,2)
(62,67,2)
(3,53,2)
(20,53,2)
(4,8,2)
(67,32,2)
(41,53,2)
(27,53,2)
(29,53,2)
(39,50,2)
(60,35,2)
(68,8,2)
(31,3,2)
(69,8,2)
(17,53,2)
(23,32,2)
(1,53,2)
(24,35,2)
(18,1,2)
(62,37,2)
(63,53,2)
(35,41,2)
(50,56,2)
(52,8,2)
(59,8,2)
(9,8,2)
(3,50,2)
(8,12,2)
(50,53,2)
(32,8,2)
(56,19,2)
(65,41,2)
(19,18,2)
(48,8,2)
(64,53,2)
(67,57,2)
(44,8,2)
(39,41,2)
(69,50,2)
(8,53,2)
(2,3,2)
(56,16,2)
(9,37,2)
(35,53,2)
(68,37,2)
(67,50,2)
(23,37,2)
(66,53,2)
(10,37,2)
(54,37,2)
(51,35,2)
(26,53,2)
(60,53,2)
(49,50,2)
(67,37,2)
(14,8,2)
(39,35,2)
(35,35,2)
(15,53,2)
(18,53,2)
(69,12,2)
(37,32,2)
(22,35,2)
(5,8,2)
(46,2,2)
(40,8,2)
(55,37,2)
(36,35,2)
(37,8,2)
(19,53,2)
(56,53,2)
(33,35,2)
(37,37,2)
-----------------------------------
(0,for(i = 0; i < 10; i++)
(1,sizeof(int)
(2,-1)
(3,buffer == NULL)
(4,"ERROR: Array index is negative.")
(5,buffer[data] = 1)
(6,)
(7,)
(8,data >= 0)
(9,10)
(10,buffer)
(11,i)
(12,int data)
(13,buffer)
(14,printLine("ERROR: Array index is negative.")
(15,data)
(16,int *)
(17,0)
(18,10 * sizeof(int)
(19,malloc(10 * sizeof(int)
(20,i)
(21,)
(22,i)
(23,i++)
(24,i)
(25,)
(26,buffer)
(27,int)
(28,)
(29,buffer)
(30,if (data >= 0)
(31,1)
(32,i = 0)
(33,10)
(34,NULL)
(35,i < 10)
(36,buffer)
(37,i < 10)
(38,for (i = 0; i < 10; i++)
(39,buffer[i])
(40,1)
(41,i = 0)
(42,if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)
(43,)
(44,i)
(45,)
(46,exit(-1)
(47,if (buffer == NULL)
(48,buffer)
(49,free(buffer)
(50,* buffer = (int *)
(51,0)
(52,0)
(53,CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22_badGlobal)
(54,i)
(55,i)
(56,(int *)
(57,buffer[i] = 0)
(58,)
(59,data)
(60,i)
(61,RET)
(62,printIntLine(buffer[i])
(63,buffer)
(64,0)
(65,i++)
(66,10)
(67,buffer[i])
(68,i)
(69,buffer[data])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^