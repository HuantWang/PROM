-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
        break;
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memcpy(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
61,62
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
72,74
74,75
75,76
75,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,52,56,58,60,63,67,69,71,73,76,77,81,84,85,89,91
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad(){    int * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad
{    int * data;    data = NULL;    while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    }
1
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        break;    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
break;
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memcpy(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memcpy(data, source, 100*sizeof(int));
memcpy(data, source, 100*sizeof(int))
memcpy
memcpy
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(39,3,0)
(38,27,0)
(13,15,0)
(42,28,0)
(12,27,0)
(8,32,0)
(12,28,0)
(13,30,0)
(27,43,0)
(34,30,0)
(38,13,0)
(14,27,0)
(9,12,0)
(19,43,0)
(12,15,0)
(36,6,0)
(31,13,0)
(6,26,0)
(12,30,0)
(18,8,0)
(17,11,0)
(11,18,0)
(1,8,0)
(11,15,0)
(24,3,0)
(13,38,0)
(15,5,0)
(7,27,0)
(0,43,0)
(18,11,0)
(28,21,0)
(29,15,0)
(3,15,0)
(21,28,0)
(26,6,0)
(32,8,0)
(26,40,0)
(10,5,0)
(37,27,0)
(28,12,0)
(20,14,0)
(30,43,0)
(14,15,0)
(4,32,0)
(8,18,0)
(33,30,0)
(16,13,0)
(14,30,0)
(2,21,0)
(15,11,0)
(11,17,0)
(22,7,0)
(35,5,0)
(12,7,0)
(23,12,0)
(3,39,1)
(21,2,1)
(24,15,1)
(11,18,1)
(14,15,1)
(7,22,1)
(42,9,1)
(31,16,1)
(2,42,1)
(22,35,1)
(23,7,1)
(14,30,1)
(30,34,1)
(29,25,1)
(11,17,1)
(12,30,1)
(15,11,1)
(36,3,1)
(13,31,1)
(8,32,1)
(26,6,1)
(12,28,1)
(20,38,1)
(41,14,1)
(12,15,1)
(34,33,1)
(4,1,1)
(1,29,1)
(32,4,1)
(18,8,1)
(35,3,1)
(35,26,1)
(38,13,1)
(39,24,1)
(14,20,1)
(13,30,1)
(22,25,1)
(12,7,1)
(16,12,1)
(13,15,1)
(9,23,1)
(25,30,1)
(28,21,1)
(6,36,1)
(3,15,1)
(8,32,2)
(11,25,2)
(18,25,2)
(26,6,2)
(12,28,2)
(12,15,2)
(14,15,2)
(18,8,2)
(32,25,2)
(3,25,2)
(11,18,2)
(1,25,2)
(36,3,2)
(35,25,2)
(12,7,2)
(28,21,2)
(15,25,2)
(24,25,2)
(13,30,2)
(13,15,2)
(26,3,2)
(11,17,2)
(14,30,2)
(6,3,2)
(3,15,2)
(29,25,2)
(8,25,2)
(4,25,2)
(38,13,2)
(12,30,2)
(15,11,2)
(39,25,2)
-----------------------------------
(0,data)
(1,50)
(2,int)
(3,data == NULL)
(4,int)
(5,)
(6,-1)
(7,source[100] = {0})
(8,50*sizeof(int)
(9,source)
(10,if (data == NULL)
(11,(int *)
(12,memcpy(data, source, 100*sizeof(int)
(13,data[0])
(14,free(data)
(15,data = (int *)
(16,data)
(17,int *)
(18,malloc(50*sizeof(int)
(19,while(1)
(20,data)
(21,sizeof(int)
(22,source)
(23,data)
(24,data)
(25,1)
(26,exit(-1)
(27,)
(28,100*sizeof(int)
(29,data)
(30,data = NULL)
(31,0)
(32,sizeof(int)
(33,data)
(34,NULL)
(35,break;)
(36,1)
(37,source)
(38,printIntLine(data[0])
(39,NULL)
(40,)
(41,RET)
(42,100)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^