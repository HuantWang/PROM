-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    if(staticReturnsTrue())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(staticReturnsTrue())
    {
        {
            int i;
            int * buffer = (int *)malloc(10 * sizeof(int));
            if (buffer == NULL) {exit(-1);}
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
             * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                for(i = 0; i < 10; i++)
                {
                    printIntLine(buffer[i]);
                }
            }
            else
            {
                printLine("ERROR: Array index is negative.");
            }
            free(buffer);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
197,198
197,199
198,199
200,201
202,203
202,204
203,204
204,205
206,207
207,208
207,209
207,210
207,211
207,212
207,213
208,209
209,210
209,211
211,212
213,214
214,215
214,216
216,217
216,218
216,219
219,220
220,221
220,222
221,222
221,223
223,224
225,226
225,227
226,227
228,229
228,230
230,231
231,232
231,233
234,235
234,236
235,236
235,237
236,237
238,239
240,241
241,242
242,243
242,244
243,244
245,246
247,248
247,249
247,250
247,251
248,249
249,250
249,251
250,251
253,254
253,255
254,255
257,258
258,259
260,261
261,262
262,263
262,264
263,264
263,265
264,265
266,267
269,270
269,271
269,272
270,271
270,272
271,272
274,275
274,276
275,276
276,277
276,278
277,278
277,279
278,279
280,281
283,284
283,285
283,286
283,287
284,285
285,286
285,287
286,287
289,290
289,291
290,291
293,294
294,295
296,297
297,298
298,299
298,300
299,300
301,302
301,303
302,303
304,305
306,307
307,308
308,309
308,310
309,310
312,313
313,314
313,315
314,315
316,317
-----nextToken-----
2,4,8,10,14,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,188,192,194,199,201,205,210,212,215,217,218,222,224,227,229,232,233,237,239,244,246,251,252,255,256,259,265,267,268,272,273,279,281,282,287,288,291,292,295,300,303,305,310,311,315,317
-----computeFrom-----
12,13
12,14
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
190,191
190,192
228,229
228,230
235,236
235,237
249,250
249,251
253,254
253,255
262,263
262,264
270,271
270,272
276,277
276,278
285,286
285,287
289,290
289,291
-----guardedBy-----
192,201
272,281
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad(){    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08_bad
{    int data;    /* Initialize data */    data = -1;    if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
if(staticReturnsTrue())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(staticReturnsTrue())    {        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }    }
{            int i;            int * buffer = (int *)malloc(10 * sizeof(int));            if (buffer == NULL) {exit(-1);}            /* initialize buffer */            for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound             * This code does check to see if the array index is negative */            if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }            free(buffer);        }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)            {                buffer[i] = 0;            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                buffer[i] = 0;            }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)            {                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }            else            {                printLine("ERROR: Array index is negative.");            }
data >= 0
data
data
0
{                buffer[data] = 1;                /* Print the array values */                for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }            }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)                {                    printIntLine(buffer[i]);                }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                    printIntLine(buffer[i]);                }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{                printLine("ERROR: Array index is negative.");            }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(62,117,0)
(96,188,0)
(44,110,0)
(187,24,0)
(66,52,0)
(10,192,0)
(166,37,0)
(96,104,0)
(172,11,0)
(139,171,0)
(25,68,0)
(17,62,0)
(115,39,0)
(35,130,0)
(159,117,0)
(130,120,0)
(141,89,0)
(44,12,0)
(113,102,0)
(88,5,0)
(33,75,0)
(46,127,0)
(146,130,0)
(155,188,0)
(151,163,0)
(126,116,0)
(147,164,0)
(127,97,0)
(181,168,0)
(90,14,0)
(18,107,0)
(145,188,0)
(77,132,0)
(109,73,0)
(140,63,0)
(91,155,0)
(175,164,0)
(44,104,0)
(104,168,0)
(103,24,0)
(107,24,0)
(10,116,0)
(102,24,0)
(149,104,0)
(84,96,0)
(136,130,0)
(99,0,0)
(186,39,0)
(167,39,0)
(63,20,0)
(58,96,0)
(53,24,0)
(12,52,0)
(180,121,0)
(105,54,0)
(131,24,0)
(15,178,0)
(51,89,0)
(38,43,0)
(179,94,0)
(64,105,0)
(110,0,0)
(116,24,0)
(101,65,0)
(138,156,0)
(41,22,0)
(114,192,0)
(37,150,0)
(92,168,0)
(74,68,0)
(184,134,0)
(29,73,0)
(148,89,0)
(37,192,0)
(14,110,0)
(94,115,0)
(3,30,0)
(101,78,0)
(189,112,0)
(98,20,0)
(19,24,0)
(97,127,0)
(55,97,0)
(71,164,0)
(76,37,0)
(34,134,0)
(106,151,0)
(79,59,0)
(45,75,0)
(78,54,0)
(108,60,0)
(177,56,0)
(125,148,0)
(159,110,0)
(39,115,0)
(96,151,0)
(48,168,0)
(20,24,0)
(13,46,0)
(21,112,0)
(148,118,0)
(137,0,0)
(143,121,0)
(31,10,0)
(110,14,0)
(141,107,0)
(19,11,0)
(150,124,0)
(174,44,0)
(158,72,0)
(178,107,0)
(69,75,0)
(170,130,0)
(27,121,0)
(89,130,0)
(1,78,0)
(176,56,0)
(117,62,0)
(135,130,0)
(72,54,0)
(78,101,0)
(80,54,0)
(122,10,0)
(50,107,0)
(195,117,0)
(67,130,0)
(20,171,0)
(100,130,0)
(134,19,0)
(124,192,0)
(123,72,0)
(43,38,0)
(127,46,0)
(87,89,0)
(78,104,0)
(47,18,0)
(22,95,0)
(148,107,0)
(160,129,0)
(178,156,0)
(9,44,0)
(28,4,0)
(75,107,0)
(194,159,0)
(73,102,0)
(168,153,0)
(112,188,0)
(182,130,0)
(152,43,0)
(121,27,0)
(150,37,0)
(178,43,0)
(164,107,0)
(165,46,0)
(59,115,0)
(95,83,0)
(164,175,0)
(185,16,0)
(191,16,0)
(61,175,0)
(129,169,0)
(82,164,0)
(20,63,0)
(8,110,0)
(42,168,0)
(142,141,0)
(43,152,0)
(36,124,0)
(2,0,0)
(40,12,0)
(11,19,0)
(93,24,0)
(107,75,0)
(95,22,0)
(111,152,0)
(68,130,0)
(44,117,0)
(97,104,0)
(164,192,0)
(81,53,0)
(119,13,0)
(56,104,0)
(78,151,0)
(128,141,0)
(192,24,0)
(124,150,0)
(16,24,0)
(53,81,0)
(171,20,0)
(117,24,0)
(162,18,0)
(115,59,0)
(157,168,0)
(26,78,0)
(7,92,0)
(190,27,0)
(192,164,0)
(86,124,0)
(49,144,0)
(104,97,0)
(43,178,0)
(178,4,0)
(27,53,0)
(183,54,0)
(173,188,0)
(4,178,0)
(6,130,0)
(193,168,0)
(97,55,0)
(70,159,0)
(46,13,0)
(154,81,0)
(115,94,0)
(92,104,0)
(156,178,0)
(57,175,0)
(81,154,1)
(155,188,1)
(179,39,1)
(46,13,1)
(121,180,1)
(41,56,1)
(110,14,1)
(11,172,1)
(43,38,1)
(117,62,1)
(26,72,1)
(114,4,1)
(90,8,1)
(143,102,1)
(78,54,1)
(116,126,1)
(10,192,1)
(70,112,1)
(112,21,1)
(87,51,1)
(59,79,1)
(124,86,1)
(78,1,1)
(56,104,1)
(176,177,1)
(56,176,1)
(180,143,1)
(154,27,1)
(44,104,1)
(23,141,1)
(107,75,1)
(20,63,1)
(82,175,1)
(134,184,1)
(162,47,1)
(115,39,1)
(96,104,1)
(92,7,1)
(109,29,1)
(47,107,1)
(102,113,1)
(49,4,1)
(9,159,1)
(96,58,1)
(7,72,1)
(105,54,1)
(20,171,1)
(161,117,1)
(75,69,1)
(95,22,1)
(23,148,1)
(44,174,1)
(92,104,1)
(189,155,1)
(133,85,1)
(138,43,1)
(76,166,1)
(167,161,1)
(156,138,1)
(125,141,1)
(111,15,1)
(53,81,1)
(74,25,1)
(191,59,1)
(139,18,1)
(189,188,1)
(183,12,1)
(15,19,1)
(178,107,1)
(29,20,1)
(78,151,1)
(172,134,1)
(63,140,1)
(112,188,1)
(150,124,1)
(177,104,1)
(101,78,1)
(173,145,1)
(142,88,1)
(141,89,1)
(10,122,1)
(44,117,1)
(27,121,1)
(148,125,1)
(85,32,1)
(104,97,1)
(97,127,1)
(105,64,1)
(43,152,1)
(171,139,1)
(167,89,1)
(123,105,1)
(127,46,1)
(151,106,1)
(57,61,1)
(190,121,1)
(175,57,1)
(145,56,1)
(142,77,1)
(4,178,1)
(147,114,1)
(140,98,1)
(148,89,1)
(152,111,1)
(73,109,1)
(45,33,1)
(72,54,1)
(62,17,1)
(84,112,1)
(113,73,1)
(71,147,1)
(164,82,1)
(7,129,1)
(155,91,1)
(108,23,1)
(54,80,1)
(61,71,1)
(129,160,1)
(1,26,1)
(88,150,1)
(18,107,1)
(89,87,1)
(21,189,1)
(14,90,1)
(12,40,1)
(188,173,1)
(27,190,1)
(145,95,1)
(148,107,1)
(160,159,1)
(72,158,1)
(184,34,1)
(122,31,1)
(194,70,1)
(141,107,1)
(17,195,1)
(115,94,1)
(78,104,1)
(37,192,1)
(119,165,1)
(186,167,1)
(64,101,1)
(22,41,1)
(166,124,1)
(98,171,1)
(80,183,1)
(13,119,1)
(40,44,1)
(178,43,1)
(141,128,1)
(85,108,1)
(94,179,1)
(59,115,1)
(192,164,1)
(97,55,1)
(159,194,1)
(79,115,1)
(4,28,1)
(51,68,1)
(50,16,1)
(3,18,1)
(106,96,1)
(142,161,1)
(91,151,1)
(178,156,1)
(164,175,1)
(133,92,1)
(25,32,1)
(159,117,1)
(68,74,1)
(44,110,1)
(31,150,1)
(18,162,1)
(85,23,1)
(165,149,1)
(142,49,1)
(16,185,1)
(39,186,1)
(185,191,1)
(158,123,1)
(142,3,1)
(36,192,1)
(164,107,1)
(159,110,1)
(28,178,1)
(128,142,1)
(150,37,1)
(96,188,1)
(123,54,1)
(32,110,1)
(34,53,1)
(58,84,1)
(86,36,1)
(69,45,1)
(33,50,1)
(149,85,1)
(124,192,1)
(77,59,1)
(37,76,1)
(195,116,1)
(126,10,1)
(19,11,1)
(174,9,1)
(189,85,2)
(94,32,2)
(78,54,2)
(160,159,2)
(1,72,2)
(72,72,2)
(179,32,2)
(49,4,2)
(69,59,2)
(186,32,2)
(123,72,2)
(17,150,2)
(126,150,2)
(124,4,2)
(114,4,2)
(12,159,2)
(148,89,2)
(117,62,2)
(51,32,2)
(92,85,2)
(127,46,2)
(36,4,2)
(19,11,2)
(19,18,2)
(15,18,2)
(72,159,2)
(76,124,2)
(150,124,2)
(87,32,2)
(20,18,2)
(25,32,2)
(89,32,2)
(97,127,2)
(20,171,2)
(40,159,2)
(102,18,2)
(95,22,2)
(105,72,2)
(147,4,2)
(70,85,2)
(178,156,2)
(109,18,2)
(186,161,2)
(152,18,2)
(94,161,2)
(23,32,2)
(159,110,2)
(113,18,2)
(86,4,2)
(150,4,2)
(167,161,2)
(145,85,2)
(143,18,2)
(108,23,2)
(185,59,2)
(10,150,2)
(178,18,2)
(53,81,2)
(98,18,2)
(105,54,2)
(171,18,2)
(159,85,2)
(96,188,2)
(173,85,2)
(107,59,2)
(44,159,2)
(16,59,2)
(192,4,2)
(53,18,2)
(62,150,2)
(74,32,2)
(88,150,2)
(68,32,2)
(106,112,2)
(124,192,2)
(189,112,2)
(164,4,2)
(179,161,2)
(127,85,2)
(73,18,2)
(150,37,2)
(148,107,2)
(95,56,2)
(78,104,2)
(61,4,2)
(27,121,2)
(96,112,2)
(81,18,2)
(121,18,2)
(107,75,2)
(194,85,2)
(4,18,2)
(37,124,2)
(3,18,2)
(7,85,2)
(21,112,2)
(141,89,2)
(47,59,2)
(46,13,2)
(37,192,2)
(13,85,2)
(72,54,2)
(188,85,2)
(101,78,2)
(184,18,2)
(195,150,2)
(39,32,2)
(41,56,2)
(165,85,2)
(84,112,2)
(26,72,2)
(21,85,2)
(112,112,2)
(142,32,2)
(115,39,2)
(111,18,2)
(34,18,2)
(112,85,2)
(4,178,2)
(18,107,2)
(96,104,2)
(129,159,2)
(82,4,2)
(11,18,2)
(43,152,2)
(110,14,2)
(151,112,2)
(29,18,2)
(139,18,2)
(92,104,2)
(44,117,2)
(97,55,2)
(43,18,2)
(191,59,2)
(58,112,2)
(128,32,2)
(175,4,2)
(154,18,2)
(44,110,2)
(57,4,2)
(22,56,2)
(97,85,2)
(125,141,2)
(59,32,2)
(141,32,2)
(18,59,2)
(172,18,2)
(45,59,2)
(39,161,2)
(176,85,2)
(161,150,2)
(101,72,2)
(104,85,2)
(141,107,2)
(115,94,2)
(9,159,2)
(77,59,2)
(115,32,2)
(10,192,2)
(115,161,2)
(178,43,2)
(158,72,2)
(28,18,2)
(192,164,2)
(166,124,2)
(44,104,2)
(104,97,2)
(167,32,2)
(46,85,2)
(123,159,2)
(56,104,2)
(183,159,2)
(155,188,2)
(119,85,2)
(31,150,2)
(27,18,2)
(80,159,2)
(33,59,2)
(148,141,2)
(164,175,2)
(50,59,2)
(174,159,2)
(75,59,2)
(180,18,2)
(91,112,2)
(56,85,2)
(117,150,2)
(122,150,2)
(20,63,2)
(54,159,2)
(59,161,2)
(134,18,2)
(140,18,2)
(64,72,2)
(178,107,2)
(112,188,2)
(71,4,2)
(149,85,2)
(158,159,2)
(177,85,2)
(116,150,2)
(162,59,2)
(63,18,2)
(79,161,2)
(138,18,2)
(155,112,2)
(43,38,2)
(78,151,2)
(78,72,2)
(156,18,2)
(190,18,2)
(59,115,2)
(164,107,2)
(159,117,2)
(79,32,2)
-----------------------------------
(0,)
(1,i)
(2,if(staticReturnsTrue()
(3,break;)
(4,connect(connectSocket, (struct sockaddr*)
(5,)
(6,do)
(7,buffer)
(8,data)
(9,buffer)
(10,inputBuffer[recvResult])
(11,htons(TCP_PORT)
(12,buffer[data] = 1)
(13,sizeof(int)
(14,-1)
(15,connectSocket)
(16,wsaDataInit = 1)
(17,inputBuffer)
(18,connectSocket == INVALID_SOCKET)
(19,service.sin_port = htons(TCP_PORT)
(20,memset(&service, 0, sizeof(service)
(21,10)
(22,-1)
(23,wsaDataInit)
(24,)
(25,wsaDataInit)
(26,buffer)
(27,service.sin_addr.s_addr)
(28,SOCKET_ERROR)
(29,service)
(30,)
(31,inputBuffer)
(32,staticReturnsTrue()
(33,AF_INET)
(34,service)
(35,service)
(36,recvResult)
(37,recvResult == 0)
(38,struct sockaddr*)
(39,MAKEWORD(2,2)
(40,1)
(41,1)
(42,if (data >= 0)
(43,(struct sockaddr*)
(44,buffer[data])
(45,SOCK_STREAM)
(46,10 * sizeof(int)
(47,connectSocket)
(48,if (buffer == NULL)
(49,break;)
(50,connectSocket)
(51,connectSocket)
(52,)
(53,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(54,i = 0)
(55,int *)
(56,buffer == NULL)
(57,1)
(58,i)
(59,WSAStartup(MAKEWORD(2,2)
(60,)
(61,CHAR_ARRAY_SIZE)
(62,atoi(inputBuffer)
(63,sizeof(service)
(64,i)
(65,)
(66,for(i = 0; i < 10; i++)
(67,recvResult)
(68,wsaDataInit = 0)
(69,IPPROTO_TCP)
(70,data)
(71,inputBuffer)
(72,i < 10)
(73,service.sin_family)
(74,0)
(75,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(76,0)
(77,break;)
(78,buffer[i])
(79,NO_ERROR)
(80,0)
(81,inet_addr(IP_ADDRESS)
(82,0)
(83,)
(84,buffer)
(85,staticReturnsTrue()
(86,SOCKET_ERROR)
(87,INVALID_SOCKET)
(88,break;)
(89,connectSocket = INVALID_SOCKET)
(90,1)
(91,i)
(92,free(buffer)
(93,if (connect(connectSocket, (struct sockaddr*)
(94,&wsaData)
(95,exit(-1)
(96,buffer[i])
(97,(int *)
(98,0)
(99,if(staticReturnsTrue()
(100,if (connectSocket != INVALID_SOCKET)
(101,printIntLine(buffer[i])
(102,service.sin_family = AF_INET)
(103,if (WSAStartup(MAKEWORD(2,2)
(104,* buffer = (int *)
(105,i++)
(106,0)
(107,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(108,WSACleanup()
(109,sin_family)
(110,data = -1)
(111,service)
(112,i < 10)
(113,AF_INET)
(114,recvResult)
(115,WSAStartup(MAKEWORD(2,2)
(116,inputBuffer[recvResult] = \\\'\\\\0\\\')
(117,data = atoi(inputBuffer)
(118,)
(119,int)
(120,)
(121,service.sin_addr)
(122,recvResult)
(123,i)
(124,recvResult == SOCKET_ERROR)
(125,connectSocket)
(126,\\\'\\\\0\\\')
(127,malloc(10 * sizeof(int)
(128,INVALID_SOCKET)
(129,printLine("ERROR: Array index is negative.")
(130,)
(131,if (connectSocket == INVALID_SOCKET)
(132,)
(133,RET)
(134,service.sin_port)
(135,if (wsaDataInit)
(136,inputBuffer)
(137,data)
(138,service)
(139,service)
(140,service)
(141,connectSocket != INVALID_SOCKET)
(142,connectSocket)
(143,service)
(144,)
(145,i)
(146,wsaData)
(147,connectSocket)
(148,CLOSE_SOCKET(connectSocket)
(149,buffer)
(150,recvResult == SOCKET_ERROR || recvResult == 0)
(151,buffer[i] = 0)
(152,&service)
(153,)
(154,IP_ADDRESS)
(155,i++)
(156,sizeof(service)
(157,buffer)
(158,10)
(159,data >= 0)
(160,"ERROR: Array index is negative.")
(161,0)
(162,INVALID_SOCKET)
(163,)
(164,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(165,10)
(166,recvResult)
(167,2)
(168,)
(169,)
(170,connectSocket)
(171,&service)
(172,TCP_PORT)
(173,0)
(174,data)
(175,CHAR_ARRAY_SIZE - 1)
(176,NULL)
(177,buffer)
(178,connect(connectSocket, (struct sockaddr*)
(179,wsaData)
(180,sin_addr)
(181,for (i = 0; i < 10; i++)
(182,wsaDataInit)
(183,i)
(184,sin_port)
(185,1)
(186,2)
(187,if (recvResult == SOCKET_ERROR || recvResult == 0)
(188,i = 0)
(189,i)
(190,s_addr)
(191,wsaDataInit)
(192,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(193,i)
(194,0)
(195,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^