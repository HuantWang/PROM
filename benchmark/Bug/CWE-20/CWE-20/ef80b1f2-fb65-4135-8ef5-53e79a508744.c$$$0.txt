-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData
CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(17,25,0)
(67,63,0)
(36,72,0)
(59,35,0)
(8,65,0)
(4,51,0)
(12,29,0)
(42,51,0)
(16,56,0)
(62,49,0)
(9,70,0)
(14,24,0)
(68,11,0)
(11,51,0)
(72,36,0)
(4,44,0)
(5,31,0)
(31,5,0)
(38,2,0)
(51,65,0)
(60,70,0)
(16,72,0)
(64,11,0)
(27,2,0)
(5,17,0)
(24,14,0)
(36,27,0)
(63,27,0)
(15,16,0)
(58,51,0)
(68,29,0)
(22,13,0)
(43,27,0)
(33,25,0)
(18,24,0)
(1,27,0)
(27,13,0)
(25,17,0)
(29,12,0)
(17,39,0)
(25,27,0)
(37,13,0)
(3,51,0)
(44,4,0)
(12,27,0)
(40,25,0)
(2,13,0)
(41,11,0)
(26,13,0)
(72,70,0)
(63,13,0)
(44,59,0)
(6,58,0)
(23,63,0)
(21,56,0)
(34,45,0)
(69,12,0)
(53,14,0)
(17,5,0)
(12,42,0)
(71,4,0)
(24,72,0)
(20,17,0)
(47,44,0)
(46,42,0)
(10,36,0)
(44,27,0)
(5,30,0)
(45,54,0)
(58,27,0)
(56,54,0)
(51,58,0)
(70,13,0)
(48,42,0)
(50,31,0)
(28,16,0)
(0,72,0)
(42,12,0)
(57,31,0)
(25,72,0)
(7,29,0)
(19,24,0)
(32,4,0)
(55,59,0)
(39,17,0)
(66,39,0)
(52,2,0)
(29,68,0)
(30,5,0)
(16,27,0)
(11,68,0)
(31,72,0)
(25,27,1)
(41,64,1)
(5,31,1)
(68,11,1)
(40,33,1)
(25,72,1)
(17,25,1)
(42,46,1)
(29,7,1)
(50,57,1)
(23,67,1)
(39,66,1)
(28,15,1)
(67,68,1)
(27,2,1)
(26,63,1)
(0,27,1)
(39,17,1)
(67,59,1)
(24,72,1)
(56,21,1)
(4,51,1)
(58,27,1)
(61,26,1)
(31,50,1)
(21,16,1)
(55,44,1)
(6,3,1)
(25,40,1)
(29,12,1)
(16,27,1)
(64,51,1)
(46,48,1)
(45,34,1)
(14,53,1)
(4,32,1)
(59,55,1)
(69,11,1)
(57,25,1)
(42,51,1)
(31,72,1)
(17,20,1)
(19,72,1)
(34,39,1)
(33,14,1)
(32,71,1)
(16,28,1)
(68,29,1)
(58,6,1)
(7,12,1)
(36,10,1)
(67,14,1)
(18,19,1)
(67,56,1)
(12,27,1)
(16,72,1)
(15,45,1)
(48,69,1)
(44,27,1)
(36,27,1)
(63,27,1)
(11,41,1)
(14,24,1)
(72,36,1)
(1,43,1)
(10,0,1)
(71,47,1)
(20,5,1)
(43,2,1)
(12,42,1)
(2,52,1)
(53,24,1)
(27,1,1)
(51,58,1)
(11,51,1)
(24,18,1)
(66,17,1)
(63,23,1)
(17,5,1)
(5,30,1)
(52,38,1)
(3,39,1)
(44,4,1)
(47,68,1)
(29,11,2)
(20,14,2)
(42,51,2)
(17,14,2)
(64,39,2)
(34,39,2)
(21,39,2)
(28,39,2)
(72,36,2)
(6,39,2)
(68,39,2)
(12,42,2)
(33,14,2)
(42,11,2)
(45,39,2)
(3,39,2)
(4,51,2)
(16,39,2)
(68,11,2)
(25,14,2)
(51,58,2)
(39,14,2)
(40,14,2)
(31,14,2)
(27,2,2)
(44,4,2)
(39,17,2)
(59,68,2)
(51,39,2)
(58,39,2)
(50,14,2)
(5,31,2)
(47,68,2)
(66,14,2)
(12,27,2)
(44,27,2)
(71,68,2)
(24,72,2)
(46,11,2)
(12,11,2)
(16,72,2)
(44,68,2)
(14,24,2)
(5,30,2)
(16,27,2)
(31,72,2)
(69,11,2)
(4,68,2)
(11,51,2)
(25,72,2)
(29,12,2)
(68,29,2)
(5,14,2)
(7,11,2)
(25,27,2)
(41,39,2)
(58,27,2)
(55,68,2)
(11,39,2)
(32,68,2)
(15,39,2)
(63,27,2)
(17,5,2)
(48,11,2)
(56,39,2)
(57,14,2)
(36,27,2)
(17,25,2)
-----------------------------------
(0,dataLen)
(1,dataBuffer)
(2,dataBuffer[100] = COMMAND_ARG2)
(3,dataLen)
(4,dataLen-1)
(5,(int)
(6,data)
(7,\\\'\\\\n\\\')
(8,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(9,if (100-dataLen > 1)
(10,data)
(11,dataLen > 0)
(12,data[dataLen-1])
(13,)
(14,100-dataLen > 1)
(15,data)
(16,data[dataLen])
(17,fgets(data+dataLen, (int)
(18,dataLen)
(19,100)
(20,stdin)
(21,\\\'\\\\0\\\')
(22,dataBuffer)
(23,data)
(24,100-dataLen)
(25,data+dataLen)
(26,badSink()
(27,data = dataBuffer)
(28,dataLen)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,int)
(31,100-dataLen)
(32,1)
(33,data)
(34,"fgets()
(35,)
(36,strlen(data)
(37,data)
(38,dataBuffer)
(39,fgets(data+dataLen, (int)
(40,dataLen)
(41,0)
(42,dataLen-1)
(43,data)
(44,data[dataLen-1])
(45,printLine("fgets()
(46,1)
(47,data)
(48,dataLen)
(49,)
(50,dataLen)
(51,dataLen = strlen(data)
(52,COMMAND_ARG2)
(53,1)
(54,)
(55,\\\'\\\\0\\\')
(56,data[dataLen] = \\\'\\\\0\\\')
(57,100)
(58,strlen(data)
(59,data[dataLen-1] = \\\'\\\\0\\\')
(60,dataLen)
(61,RET)
(62,if (fgets(data+dataLen, (int)
(63,CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData = data)
(64,dataLen)
(65,)
(66,NULL)
(67,CWE78_OS_Command_Injection__char_console_w32_spawnlp_45_badData)
(68,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(69,data)
(70,)
(71,dataLen)
(72,dataLen = strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^