-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    else
    {
        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        wcsncpy(data, source, 100-1);
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
100,101
100,102
100,103
100,104
100,105
100,106
100,107
101,102
102,103
102,104
104,105
104,106
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
115,116
115,117
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
135,136
135,137
138,139
139,140
139,141
140,141
140,142
141,142
143,144
143,145
147,148
148,149
148,150
149,150
151,152
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,65,68,70,73,75,78,79,83,85,90,92,97,98,99,103,105,107,111,113,114,116,117,122,124,125,126,130,132,134,136,137,142,144,145,146,150,152,156,158
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
63,64
63,65
74,75
74,76
81,82
81,83
94,95
94,96
115,116
115,117
119,120
119,121
123,124
123,125
135,136
135,137
139,140
139,141
143,144
143,145
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    else    {        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        /* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        wcsncpy(data, source, 100-1);        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcsncpy(data, source, 100-1);
wcsncpy(data, source, 100-1)
wcsncpy
wcsncpy
data
data
source
source
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(30,12,0)
(16,2,0)
(12,5,0)
(21,30,0)
(53,32,0)
(43,15,0)
(54,56,0)
(53,48,0)
(11,45,0)
(26,15,0)
(30,4,0)
(3,4,0)
(29,19,0)
(3,2,0)
(30,9,0)
(6,20,0)
(37,49,0)
(49,12,0)
(38,4,0)
(29,22,0)
(17,12,0)
(12,58,0)
(16,12,0)
(9,30,0)
(61,0,0)
(16,4,0)
(51,2,0)
(52,2,0)
(40,16,0)
(11,19,0)
(58,12,0)
(13,22,0)
(44,0,0)
(35,56,0)
(0,4,0)
(24,9,0)
(10,1,0)
(15,56,0)
(55,9,0)
(45,11,0)
(20,6,0)
(6,58,0)
(36,20,0)
(34,8,0)
(31,58,0)
(50,49,0)
(27,48,0)
(58,6,0)
(10,25,0)
(22,29,0)
(11,4,0)
(39,46,0)
(28,5,0)
(20,46,0)
(4,11,0)
(3,12,0)
(2,56,0)
(18,8,0)
(7,1,0)
(33,2,0)
(42,3,0)
(19,11,0)
(48,53,0)
(46,20,0)
(14,30,0)
(58,31,0)
(30,2,0)
(59,5,0)
(19,29,0)
(57,29,0)
(1,10,0)
(4,8,0)
(3,12,1)
(11,45,1)
(36,17,1)
(23,16,1)
(30,4,1)
(57,38,1)
(47,15,1)
(1,7,1)
(19,29,1)
(15,26,1)
(44,4,1)
(6,20,1)
(49,37,1)
(38,47,1)
(33,34,1)
(33,28,1)
(28,53,1)
(30,9,1)
(34,10,1)
(11,19,1)
(13,57,1)
(61,44,1)
(37,50,1)
(22,13,1)
(14,33,1)
(0,4,1)
(3,4,1)
(0,61,1)
(42,52,1)
(20,46,1)
(58,6,1)
(26,43,1)
(52,30,1)
(16,12,1)
(40,3,1)
(53,48,1)
(49,12,1)
(4,11,1)
(7,0,1)
(3,42,1)
(50,12,1)
(46,39,1)
(27,49,1)
(21,14,1)
(17,47,1)
(28,49,1)
(58,31,1)
(10,1,1)
(24,55,1)
(16,4,1)
(9,24,1)
(55,21,1)
(39,36,1)
(16,40,1)
(29,22,1)
(12,58,1)
(34,0,1)
(30,12,1)
(48,27,1)
(61,47,2)
(36,47,2)
(38,47,2)
(29,22,2)
(44,47,2)
(49,12,2)
(58,47,2)
(58,6,2)
(30,12,2)
(16,4,2)
(12,58,2)
(10,1,2)
(57,47,2)
(7,0,2)
(6,47,2)
(11,45,2)
(1,0,2)
(53,49,2)
(17,47,2)
(11,19,2)
(28,47,2)
(0,4,2)
(3,4,2)
(13,47,2)
(10,0,2)
(29,47,2)
(16,12,2)
(4,11,2)
(22,47,2)
(3,12,2)
(12,47,2)
(30,9,2)
(53,48,2)
(34,47,2)
(27,49,2)
(4,47,2)
(39,47,2)
(6,20,2)
(20,47,2)
(0,47,2)
(37,47,2)
(19,47,2)
(20,46,2)
(19,29,2)
(58,31,2)
(48,49,2)
(30,4,2)
(49,47,2)
(46,47,2)
(50,47,2)
(11,47,2)
-----------------------------------
(0,data == NULL)
(1,-1)
(2,)
(3,printWLine(data)
(4,data = (wchar_t *)
(5,)
(6,malloc(100*sizeof(wchar_t)
(7,1)
(8,)
(9,100-1)
(10,exit(-1)
(11,(wchar_t *)
(12,data = (wchar_t *)
(13,wchar_t)
(14,data)
(15,data = NULL)
(16,free(data)
(17,data)
(18,if (data == NULL)
(19,malloc(50*sizeof(wchar_t)
(20,100*sizeof(wchar_t)
(21,source)
(22,sizeof(wchar_t)
(23,RET)
(24,1)
(25,)
(26,NULL)
(27,1)
(28,'\\\\0')
(29,50*sizeof(wchar_t)
(30,wcsncpy(data, source, 100-1)
(31,wchar_t *)
(32,)
(33,'\\\\0')
(34,'\\\\0')
(35,if(globalReturnsTrueOrFalse()
(36,100)
(37,NULL)
(38,data)
(39,wchar_t)
(40,data)
(41,\'\\\\0\')
(42,data)
(43,data)
(44,data)
(45,wchar_t *)
(46,sizeof(wchar_t)
(47,globalReturnsTrueOrFalse()
(48,-1)
(49,data == NULL)
(50,data)
(51,source)
(52,'\\\\0')
(53,exit(-1)
(54,data)
(55,100)
(56,)
(57,50)
(58,(wchar_t *)
(59,if (data == NULL)
(60,\'\\\\0\')
(61,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^