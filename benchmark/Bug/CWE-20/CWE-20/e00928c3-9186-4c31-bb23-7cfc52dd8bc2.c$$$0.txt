-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink(int data)
{
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
65,66
65,67
66,67
66,68
67,68
69,70
72,73
72,74
72,75
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
80,81
80,82
81,82
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
96,97
97,98
99,100
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,6,8,13,15,18,20,21,25,27,30,32,35,36,40,42,47,49,54,55,58,59,62,68,70,71,75,76,82,84,85,90,91,94,95,98,103,106,108,113,114,118,120
-----computeFrom-----
31,32
31,33
38,39
38,40
52,53
52,54
56,57
56,58
65,66
65,67
73,74
73,75
79,80
79,81
88,89
88,90
92,93
92,94
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink(int data){    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink(int data)
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b_badSink
int data
int
data
data
{    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }}
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
-----joern-----
(6,13,0)
(14,10,0)
(30,58,0)
(5,4,0)
(6,64,0)
(62,10,0)
(59,11,0)
(56,54,0)
(48,13,0)
(13,6,0)
(28,24,0)
(40,9,0)
(8,61,0)
(0,31,0)
(27,62,0)
(53,0,0)
(57,26,0)
(44,58,0)
(36,18,0)
(38,59,0)
(60,17,0)
(37,23,0)
(34,45,0)
(49,24,0)
(66,58,0)
(8,58,0)
(61,26,0)
(54,11,0)
(9,58,0)
(13,10,0)
(35,33,0)
(0,8,0)
(0,17,0)
(52,0,0)
(42,33,0)
(2,17,0)
(28,51,0)
(63,31,0)
(19,60,0)
(7,45,0)
(15,59,0)
(57,4,0)
(47,10,0)
(22,8,0)
(33,17,0)
(24,28,0)
(13,8,0)
(20,47,0)
(16,55,0)
(45,8,0)
(61,8,0)
(61,46,0)
(21,10,0)
(23,39,0)
(4,57,0)
(59,55,0)
(9,8,0)
(50,17,0)
(12,13,0)
(46,61,0)
(26,61,0)
(26,57,0)
(65,58,0)
(55,18,0)
(43,58,0)
(29,57,0)
(59,8,0)
(13,31,0)
(32,54,0)
(25,62,0)
(58,41,0)
(31,3,0)
(60,17,1)
(7,8,1)
(2,45,1)
(61,26,1)
(1,9,1)
(2,28,1)
(59,8,1)
(32,56,1)
(53,52,1)
(27,25,1)
(8,61,1)
(49,45,1)
(48,62,1)
(57,4,1)
(63,0,1)
(15,54,1)
(23,37,1)
(9,8,1)
(54,11,1)
(9,40,1)
(61,46,1)
(55,16,1)
(25,10,1)
(25,47,1)
(34,7,1)
(47,10,1)
(33,17,1)
(59,38,1)
(14,55,1)
(54,32,1)
(40,23,1)
(26,57,1)
(40,62,1)
(0,53,1)
(20,6,1)
(62,10,1)
(59,11,1)
(5,29,1)
(56,33,1)
(0,8,1)
(0,17,1)
(31,63,1)
(60,19,1)
(21,14,1)
(35,17,1)
(50,2,1)
(28,24,1)
(47,20,1)
(24,49,1)
(12,48,1)
(38,15,1)
(17,50,1)
(33,42,1)
(13,10,1)
(42,35,1)
(16,59,1)
(45,8,1)
(13,31,1)
(37,54,1)
(10,21,1)
(13,12,1)
(62,27,1)
(19,31,1)
(29,22,1)
(4,5,1)
(52,33,1)
(35,60,1)
(6,13,1)
(45,34,1)
(13,8,1)
(6,13,2)
(63,33,2)
(59,54,2)
(0,8,2)
(12,62,2)
(48,62,2)
(61,46,2)
(33,17,2)
(8,61,2)
(42,33,2)
(59,11,2)
(10,54,2)
(6,62,2)
(9,8,2)
(13,62,2)
(21,54,2)
(59,8,2)
(27,54,2)
(0,33,2)
(28,45,2)
(25,62,2)
(38,54,2)
(26,57,2)
(13,8,2)
(0,17,2)
(33,33,2)
(19,33,2)
(24,45,2)
(15,54,2)
(60,17,2)
(52,33,2)
(62,54,2)
(61,26,2)
(27,62,2)
(13,31,2)
(31,33,2)
(60,33,2)
(25,54,2)
(55,54,2)
(16,54,2)
(62,10,2)
(45,8,2)
(47,10,2)
(13,10,2)
(49,45,2)
(53,33,2)
(57,4,2)
(20,62,2)
(28,24,2)
(62,62,2)
(14,54,2)
(54,11,2)
(47,62,2)
(35,33,2)
(37,54,2)
(23,54,2)
-----------------------------------
(0,buffer[i])
(1,RET)
(2,i)
(3,)
(4,sizeof(int)
(5,int)
(6,printIntLine(buffer[i])
(7,buffer)
(8,* buffer = (int *)
(9,free(buffer)
(10,i = 0)
(11,int data)
(12,i)
(13,buffer[i])
(14,i)
(15,buffer)
(16,1)
(17,i = 0)
(18,)
(19,i)
(20,i)
(21,0)
(22,buffer)
(23,printLine("ERROR: Array index is negative.")
(24,-1)
(25,i)
(26,malloc(10 * sizeof(int)
(27,10)
(28,exit(-1)
(29,10)
(30,i)
(31,buffer[i] = 0)
(32,0)
(33,i < 10)
(34,NULL)
(35,i)
(36,for(i = 0; i < 10; i++)
(37,"ERROR: Array index is negative.")
(38,data)
(39,)
(40,buffer)
(41,)
(42,10)
(43,for (i = 0; i < 10; i++)
(44,if (data >= 0)
(45,buffer == NULL)
(46,int *)
(47,i++)
(48,buffer)
(49,1)
(50,0)
(51,)
(52,buffer)
(53,i)
(54,data >= 0)
(55,buffer[data] = 1)
(56,data)
(57,10 * sizeof(int)
(58,)
(59,buffer[data])
(60,i++)
(61,(int *)
(62,i < 10)
(63,0)
(64,)
(65,buffer)
(66,if (buffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^