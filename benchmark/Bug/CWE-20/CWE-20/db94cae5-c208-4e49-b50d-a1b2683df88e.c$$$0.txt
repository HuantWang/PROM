-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_bad()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType myUnion;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* Append null terminator */
            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
            /* Eliminate CRLF */
            replace = wcschr(data, L'\r');
            if (replace)
            {
                *replace = L'\0';
            }
            replace = wcschr(data, L'\n');
            if (replace)
            {
                *replace = L'\0';
            }
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wspawnvp - searches for the location of the command among
             * the directories specified by the PATH environment variable */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _wspawnvp(_P_WAIT, COMMAND_INT, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
34,38
34,39
34,40
34,41
34,42
34,43
35,36
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
83,86
83,87
83,88
83,89
83,90
83,91
83,92
83,93
83,94
83,95
83,96
83,97
83,98
83,99
83,100
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
93,94
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
105,106
106,107
106,108
106,109
106,110
107,108
109,110
110,111
113,114
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
141,143
142,143
144,145
146,147
146,148
147,148
147,149
148,149
148,150
148,151
148,152
149,150
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
162,163
163,164
164,165
166,167
168,169
170,171
170,172
171,172
171,173
172,173
172,174
172,175
173,174
175,176
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
188,189
190,191
192,193
194,195
196,197
196,198
197,198
197,199
198,199
200,201
202,203
204,205
205,206
205,207
206,207
208,209
208,210
208,211
208,212
208,213
209,210
211,212
213,214
213,215
214,215
214,216
216,217
218,219
219,220
219,221
220,221
222,223
224,225
224,226
225,226
226,227
226,228
229,230
230,231
230,232
231,232
231,233
233,234
237,238
237,239
238,239
238,240
239,240
239,241
240,241
242,243
244,245
244,246
245,246
248,249
250,251
251,252
251,253
252,253
252,254
253,254
255,256
255,257
256,257
258,259
258,260
259,260
261,262
262,263
262,264
266,267
267,268
267,269
268,269
270,271
270,272
270,273
271,272
273,274
276,277
276,278
277,278
279,280
280,281
281,282
281,283
282,283
283,284
286,287
287,288
287,289
288,289
290,291
290,292
290,293
291,292
293,294
296,297
296,298
297,298
299,300
300,301
301,302
301,303
302,303
303,304
307,308
307,309
308,309
308,310
309,310
311,312
313,314
314,315
315,316
315,317
316,317
318,319
320,321
320,322
321,322
321,323
322,323
324,325
326,327
327,328
328,329
328,330
329,330
331,332
333,334
334,335
334,336
335,336
335,337
336,337
339,340
341,342
341,343
342,343
343,344
343,345
345,346
345,347
345,348
348,349
349,350
349,351
350,351
353,354
353,355
354,355
355,356
355,357
357,358
357,359
357,360
357,361
361,362
362,363
362,364
362,365
362,366
363,364
365,366
367,368
369,370
371,372
372,373
372,374
372,375
372,376
373,374
375,376
377,378
379,380
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,37,39,43,45,48,50,51,55,57,60,64,66,69,73,75,79,81,87,90,92,94,96,100,102,104,108,111,112,116,121,122,124,130,131,132,134,139,140,143,145,150,152,156,158,161,165,167,169,174,176,178,180,182,186,189,191,193,195,199,201,203,207,210,212,215,217,221,223,227,228,232,234,235,236,241,243,246,247,249,254,257,260,263,264,265,269,272,274,275,278,284,285,289,292,294,295,298,304,305,306,310,312,317,319,323,325,330,332,337,338,340,344,346,347,351,352,356,358,359,360,364,366,368,370,374,376,378,380
-----computeFrom-----
29,30
29,31
85,86
85,87
98,99
98,100
118,119
118,120
126,127
126,128
136,137
136,138
147,148
147,149
171,172
171,173
184,185
184,186
197,198
197,199
205,206
205,207
219,220
219,221
224,225
224,226
230,231
230,232
231,232
231,233
238,239
238,240
239,240
239,241
244,245
244,246
251,252
251,253
255,256
255,257
258,259
258,260
267,268
267,269
281,282
281,283
287,288
287,289
301,302
301,303
308,309
308,310
321,322
321,323
334,335
334,336
-----guardedBy-----
310,319
323,332
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_bad(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_bad()
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_bad
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType
CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_34_unionType
myUnion
myUnion
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        wchar_t *replace;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        size_t dataLen = wcslen(data);        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
wchar_t *replace;
wchar_t *replace;
wchar_t
*replace
*
replace
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* Append null terminator */            data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';            /* Eliminate CRLF */            replace = wcschr(data, L'\r');            if (replace)            {                *replace = L'\0';            }            replace = wcschr(data, L'\n');            if (replace)            {                *replace = L'\0';            }        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);
recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recvResult
recvResult
recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0)
recv
recv
acceptSocket
acceptSocket
(char *)(data + dataLen)
char *
char
*
*
(data + dataLen)
data + dataLen
data
data
dataLen
dataLen
sizeof(wchar_t) * (100 - dataLen - 1)
sizeof(wchar_t)
wchar_t
wchar_t

(100 - dataLen - 1)
100 - dataLen - 1
100 - dataLen
100
dataLen
dataLen
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0';
data[dataLen + recvResult / sizeof(wchar_t)] = L'\0'
data[dataLen + recvResult / sizeof(wchar_t)]
data
data
dataLen + recvResult / sizeof(wchar_t)
dataLen
dataLen
recvResult / sizeof(wchar_t)
recvResult
recvResult
sizeof(wchar_t)
wchar_t
wchar_t

L'\0'
replace = wcschr(data, L'\r');
replace = wcschr(data, L'\r')
replace
replace
wcschr(data, L'\r')
wcschr
wcschr
data
data
L'\r'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
replace = wcschr(data, L'\n');
replace = wcschr(data, L'\n')
replace
replace
wcschr(data, L'\n')
wcschr
wcschr
data
data
L'\n'
if (replace)            {                *replace = L'\0';            }
replace
replace
{                *replace = L'\0';            }
*replace = L'\0';
*replace = L'\0'
*replace
replace
replace
L'\0'
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnvp(_P_WAIT, COMMAND_INT, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnvp(_P_WAIT, COMMAND_INT, args);
_wspawnvp(_P_WAIT, COMMAND_INT, args)
_wspawnvp
_wspawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(108,142,0)
(103,142,0)
(67,128,0)
(165,167,0)
(134,80,0)
(39,175,0)
(95,123,0)
(168,23,0)
(112,44,0)
(24,142,0)
(27,24,0)
(189,41,0)
(5,165,0)
(81,41,0)
(187,112,0)
(15,87,0)
(65,165,0)
(51,34,0)
(145,0,0)
(62,170,0)
(128,67,0)
(42,43,0)
(194,142,0)
(102,115,0)
(104,159,0)
(128,167,0)
(146,134,0)
(116,112,0)
(121,194,0)
(88,175,0)
(16,123,0)
(79,188,0)
(80,134,0)
(144,193,0)
(107,80,0)
(50,97,0)
(164,29,0)
(36,109,0)
(43,154,0)
(184,15,0)
(182,48,0)
(183,118,0)
(55,187,0)
(44,41,0)
(143,41,0)
(18,142,0)
(131,87,0)
(87,15,0)
(183,166,0)
(38,135,0)
(118,183,0)
(0,154,0)
(80,142,0)
(74,109,0)
(43,145,0)
(105,128,0)
(120,82,0)
(91,155,0)
(41,154,0)
(159,34,0)
(141,44,0)
(170,82,0)
(159,97,0)
(95,183,0)
(165,24,0)
(87,131,0)
(54,36,0)
(123,95,0)
(48,138,0)
(70,142,0)
(114,95,0)
(13,41,0)
(60,167,0)
(149,131,0)
(175,167,0)
(129,67,0)
(84,142,0)
(60,195,0)
(181,41,0)
(97,159,0)
(193,195,0)
(83,132,0)
(137,103,0)
(31,177,0)
(34,159,0)
(123,142,0)
(93,34,0)
(167,142,0)
(126,135,0)
(3,99,0)
(139,170,0)
(138,48,0)
(170,24,0)
(22,142,0)
(173,24,0)
(178,41,0)
(145,154,0)
(110,161,0)
(63,118,0)
(9,66,0)
(166,147,0)
(29,177,0)
(101,41,0)
(11,174,0)
(167,135,0)
(83,46,0)
(112,145,0)
(94,69,0)
(152,80,0)
(195,41,0)
(17,147,0)
(8,135,0)
(158,131,0)
(56,46,0)
(89,154,0)
(23,123,0)
(147,44,0)
(183,95,0)
(162,132,0)
(53,23,0)
(34,176,0)
(172,41,0)
(78,41,0)
(20,89,0)
(66,24,0)
(113,194,0)
(147,166,0)
(100,16,0)
(34,93,0)
(186,191,0)
(176,34,0)
(180,83,0)
(125,93,0)
(24,165,0)
(119,193,0)
(76,66,0)
(60,130,0)
(73,142,0)
(127,95,0)
(86,112,0)
(132,89,0)
(151,128,0)
(75,41,0)
(25,83,0)
(64,142,0)
(95,24,0)
(34,167,0)
(21,142,0)
(52,26,0)
(1,16,0)
(27,148,0)
(26,44,0)
(133,103,0)
(95,187,0)
(4,142,0)
(82,41,0)
(112,187,0)
(16,168,0)
(40,85,0)
(27,82,0)
(7,142,0)
(117,43,0)
(23,168,0)
(163,165,0)
(196,117,0)
(135,167,0)
(169,22,0)
(68,82,0)
(177,29,0)
(150,154,0)
(77,0,0)
(109,36,0)
(45,167,0)
(37,147,0)
(61,145,0)
(72,41,0)
(30,154,0)
(156,60,0)
(2,83,0)
(14,152,0)
(99,138,0)
(33,109,0)
(187,95,0)
(28,92,0)
(153,29,0)
(177,22,0)
(44,26,0)
(166,183,0)
(192,176,0)
(71,41,0)
(124,99,0)
(59,154,0)
(36,89,0)
(140,172,0)
(19,195,0)
(35,133,0)
(87,92,0)
(6,166,0)
(46,132,0)
(57,145,0)
(92,87,0)
(47,0,0)
(168,16,0)
(190,117,0)
(185,195,0)
(193,167,0)
(171,27,0)
(187,55,0)
(179,122,0)
(157,172,0)
(159,104,0)
(10,23,0)
(26,145,0)
(12,123,0)
(98,133,0)
(80,152,0)
(138,142,0)
(96,41,0)
(95,183,1)
(128,151,1)
(91,168,1)
(169,177,1)
(23,10,1)
(44,26,1)
(109,74,1)
(157,145,1)
(60,167,1)
(2,180,1)
(67,129,1)
(76,9,1)
(190,196,1)
(68,120,1)
(145,61,1)
(184,131,1)
(196,58,1)
(93,125,1)
(168,23,1)
(0,47,1)
(166,147,1)
(119,40,1)
(193,195,1)
(106,49,1)
(167,135,1)
(110,49,1)
(149,158,1)
(9,24,1)
(86,127,1)
(103,137,1)
(34,176,1)
(34,167,1)
(82,68,1)
(158,44,1)
(27,82,1)
(58,170,1)
(124,3,1)
(175,88,1)
(165,5,1)
(87,131,1)
(39,167,1)
(29,164,1)
(16,123,1)
(186,58,1)
(15,184,1)
(138,48,1)
(152,14,1)
(134,146,1)
(135,126,1)
(111,79,1)
(67,128,1)
(12,66,1)
(11,67,1)
(106,110,1)
(156,193,1)
(34,159,1)
(14,175,1)
(37,6,1)
(102,92,1)
(125,34,1)
(105,93,1)
(56,36,1)
(66,76,1)
(83,46,1)
(33,54,1)
(196,186,1)
(117,190,1)
(57,0,1)
(111,106,1)
(141,82,1)
(32,83,1)
(49,64,1)
(118,63,1)
(51,138,1)
(180,46,1)
(129,128,1)
(53,16,1)
(27,171,1)
(120,195,1)
(163,173,1)
(119,111,1)
(144,119,1)
(80,134,1)
(153,103,1)
(147,44,1)
(60,195,1)
(38,45,1)
(43,42,1)
(19,185,1)
(61,57,1)
(24,165,1)
(170,139,1)
(88,39,1)
(1,100,1)
(114,183,1)
(54,43,1)
(185,172,1)
(119,94,1)
(92,28,1)
(183,118,1)
(170,82,1)
(26,52,1)
(95,114,1)
(171,170,1)
(192,159,1)
(126,8,1)
(99,124,1)
(119,102,1)
(40,66,1)
(17,37,1)
(36,109,1)
(168,16,1)
(62,193,1)
(173,67,1)
(22,169,1)
(100,123,1)
(74,33,1)
(112,116,1)
(93,34,1)
(140,157,1)
(60,156,1)
(23,123,1)
(66,24,1)
(65,163,1)
(177,31,1)
(48,182,1)
(170,24,1)
(27,24,1)
(92,87,1)
(119,11,1)
(127,12,1)
(177,29,1)
(128,167,1)
(172,140,1)
(119,91,1)
(58,27,1)
(95,24,1)
(176,192,1)
(182,99,1)
(3,22,1)
(112,145,1)
(193,144,1)
(26,145,1)
(175,167,1)
(146,107,1)
(195,19,1)
(10,53,1)
(52,141,1)
(62,60,1)
(158,111,1)
(79,106,1)
(121,113,1)
(63,187,1)
(28,87,1)
(159,97,1)
(164,153,1)
(139,62,1)
(50,51,1)
(123,95,1)
(45,194,1)
(43,145,1)
(187,112,1)
(159,104,1)
(95,187,1)
(47,77,1)
(119,179,1)
(183,166,1)
(31,29,1)
(97,50,1)
(179,175,1)
(80,152,1)
(98,35,1)
(6,118,1)
(112,44,1)
(165,167,1)
(25,2,1)
(145,0,1)
(5,65,1)
(83,25,1)
(94,93,1)
(16,1,1)
(194,121,1)
(46,56,1)
(193,167,1)
(187,55,1)
(137,133,1)
(116,86,1)
(107,152,1)
(35,80,1)
(87,15,1)
(151,105,1)
(133,98,1)
(64,168,1)
(131,149,1)
(8,38,1)
(113,92,1)
(147,17,1)
(42,117,1)
(168,66,2)
(93,175,2)
(193,195,2)
(87,131,2)
(170,24,2)
(159,104,2)
(145,0,2)
(91,168,2)
(60,167,2)
(113,92,2)
(53,16,2)
(149,111,2)
(1,66,2)
(50,175,2)
(166,66,2)
(66,24,2)
(133,175,2)
(114,66,2)
(112,44,2)
(23,123,2)
(26,145,2)
(184,111,2)
(116,66,2)
(164,175,2)
(67,128,2)
(137,175,2)
(95,187,2)
(125,175,2)
(37,66,2)
(170,82,2)
(92,111,2)
(6,66,2)
(128,93,2)
(34,167,2)
(183,166,2)
(22,175,2)
(45,92,2)
(88,92,2)
(192,175,2)
(111,168,2)
(103,175,2)
(193,167,2)
(10,16,2)
(175,167,2)
(8,92,2)
(158,111,2)
(36,109,2)
(167,92,2)
(110,49,2)
(83,46,2)
(23,16,2)
(123,95,2)
(187,66,2)
(64,168,2)
(147,44,2)
(176,175,2)
(66,67,2)
(27,24,2)
(112,145,2)
(121,92,2)
(156,193,2)
(67,93,2)
(63,66,2)
(183,66,2)
(118,66,2)
(97,175,2)
(16,123,2)
(102,92,2)
(95,24,2)
(100,66,2)
(60,193,2)
(48,175,2)
(124,175,2)
(95,183,2)
(29,175,2)
(34,175,2)
(24,165,2)
(79,106,2)
(147,66,2)
(12,66,2)
(152,175,2)
(167,135,2)
(129,93,2)
(175,92,2)
(15,111,2)
(95,66,2)
(166,147,2)
(49,168,2)
(16,66,2)
(35,175,2)
(169,175,2)
(24,67,2)
(105,93,2)
(80,134,2)
(5,67,2)
(151,93,2)
(34,176,2)
(112,66,2)
(34,159,2)
(87,15,2)
(138,48,2)
(134,175,2)
(183,118,2)
(128,167,2)
(86,66,2)
(11,67,2)
(80,152,2)
(94,93,2)
(127,66,2)
(182,175,2)
(153,175,2)
(3,175,2)
(126,92,2)
(159,175,2)
(43,145,2)
(14,175,2)
(28,111,2)
(138,175,2)
(27,170,2)
(177,175,2)
(40,66,2)
(168,23,2)
(107,175,2)
(135,92,2)
(179,175,2)
(173,67,2)
(39,92,2)
(17,66,2)
(99,175,2)
(80,175,2)
(186,58,2)
(93,34,2)
(194,92,2)
(44,26,2)
(168,16,2)
(123,66,2)
(98,175,2)
(38,92,2)
(92,87,2)
(31,175,2)
(187,112,2)
(76,67,2)
(131,111,2)
(159,97,2)
(165,167,2)
(51,175,2)
(187,55,2)
(165,67,2)
(171,170,2)
(106,168,2)
(27,82,2)
(87,111,2)
(9,67,2)
(60,195,2)
(163,67,2)
(65,67,2)
(177,29,2)
(146,175,2)
-----------------------------------
(0,dataBuffer[100] = COMMAND_ARG2)
(1,SOCKET_ERROR)
(2,COMMAND_INT)
(3,service)
(4,if (listenSocket == INVALID_SOCKET)
(5,NULL)
(6,100)
(7,if (replace)
(8,SOCK_STREAM)
(9,acceptSocket)
(10,0)
(11,break;)
(12,recvResult)
(13,replace)
(14,service)
(15,&wsaData)
(16,recvResult == SOCKET_ERROR)
(17,1)
(18,if (WSAStartup(MAKEWORD(2,2)
(19,INVALID_SOCKET)
(20,data)
(21,if (recvResult == SOCKET_ERROR || recvResult == 0)
(22,service.sin_addr.s_addr = INADDR_ANY)
(23,recvResult == 0)
(24,acceptSocket = accept(listenSocket, NULL, NULL)
(25,args)
(26,wcslen(data)
(27,CLOSE_SOCKET(acceptSocket)
(28,NO_ERROR)
(29,service.sin_addr)
(30,myUnion)
(31,s_addr)
(32,RET)
(33,myUnion)
(34,bind(listenSocket, (struct sockaddr*)
(35,service)
(36,* data = myUnion.unionSecond)
(37,dataLen)
(38,AF_INET)
(39,listenSocket)
(40,break;)
(41,)
(42,data)
(43,myUnion.unionFirst = data)
(44,dataLen = wcslen(data)
(45,listenSocket)
(46,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(47,COMMAND_ARG2)
(48,htons(TCP_PORT)
(49,replace)
(50,service)
(51,listenSocket)
(52,data)
(53,recvResult)
(54,data)
(55,char *)
(56,args)
(57,data)
(58,wsaDataInit)
(59,dataBuffer)
(60,CLOSE_SOCKET(listenSocket)
(61,dataBuffer)
(62,acceptSocket)
(63,wchar_t)
(64,\'\\\\0\')
(65,NULL)
(66,acceptSocket == SOCKET_ERROR)
(67,listen(listenSocket, LISTEN_BACKLOG)
(68,INVALID_SOCKET)
(69,)
(70,if (listen(listenSocket, LISTEN_BACKLOG)
(71,if (listenSocket != INVALID_SOCKET)
(72,recvResult)
(73,if (acceptSocket == SOCKET_ERROR)
(74,unionSecond)
(75,acceptSocket)
(76,SOCKET_ERROR)
(77,dataBuffer)
(78,do)
(79,'\\\\0')
(80,memset(&service, 0, sizeof(service)
(81,wsaData)
(82,acceptSocket = INVALID_SOCKET)
(83,_wspawnvp(_P_WAIT, COMMAND_INT, args)
(84,if (bind(listenSocket, (struct sockaddr*)
(85,)
(86,data)
(87,WSAStartup(MAKEWORD(2,2)
(88,INVALID_SOCKET)
(89,)
(90,'\\\\0')
(91,break;)
(92,WSAStartup(MAKEWORD(2,2)
(93,bind(listenSocket, (struct sockaddr*)
(94,break;)
(95,recv(acceptSocket, (char *)
(96,listenSocket)
(97,&service)
(98,sin_family)
(99,service.sin_port)
(100,recvResult)
(101,wsaDataInit)
(102,break;)
(103,service.sin_family = AF_INET)
(104,struct sockaddr*)
(105,listenSocket)
(106,replace)
(107,0)
(108,if (replace)
(109,myUnion.unionSecond)
(110,'\\\\0')
(111,0)
(112,data + dataLen)
(113,wsaDataInit)
(114,0)
(115,)
(116,dataLen)
(117,myUnion.unionFirst)
(118,sizeof(wchar_t)
(119,listenSocket)
(120,acceptSocket)
(121,1)
(122,)
(123,recvResult = recv(acceptSocket, (char *)
(124,sin_port)
(125,SOCKET_ERROR)
(126,IPPROTO_TCP)
(127,acceptSocket)
(128,listen(listenSocket, LISTEN_BACKLOG)
(129,SOCKET_ERROR)
(130,)
(131,MAKEWORD(2,2)
(132,)
(133,service.sin_family)
(134,sizeof(service)
(135,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(136,\'\\\\0\')
(137,AF_INET)
(138,service.sin_port = htons(TCP_PORT)
(139,INVALID_SOCKET)
(140,0)
(141,dataLen)
(142,)
(143,dataLen)
(144,INVALID_SOCKET)
(145,data = dataBuffer)
(146,service)
(147,dataLen - 1)
(148,)
(149,2)
(150,data)
(151,LISTEN_BACKLOG)
(152,&service)
(153,service)
(154,)
(155,)
(156,listenSocket)
(157,wsaDataInit)
(158,2)
(159,(struct sockaddr*)
(160,\'\\\\0\')
(161,)
(162,args)
(163,listenSocket)
(164,sin_addr)
(165,accept(listenSocket, NULL, NULL)
(166,100 - dataLen - 1)
(167,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(168,recvResult == SOCKET_ERROR || recvResult == 0)
(169,INADDR_ANY)
(170,acceptSocket != INVALID_SOCKET)
(171,acceptSocket)
(172,wsaDataInit = 0)
(173,acceptSocket)
(174,)
(175,listenSocket == INVALID_SOCKET)
(176,sizeof(service)
(177,service.sin_addr.s_addr)
(178,if (acceptSocket != INVALID_SOCKET)
(179,break;)
(180,_P_WAIT)
(181,if (wsaDataInit)
(182,TCP_PORT)
(183,sizeof(wchar_t)
(184,wsaData)
(185,listenSocket)
(186,WSACleanup()
(187,(char *)
(188,)
(189,service)
(190,unionFirst)
(191,)
(192,service)
(193,listenSocket != INVALID_SOCKET)
(194,wsaDataInit = 1)
(195,listenSocket = INVALID_SOCKET)
(196,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^