-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad()
{
    char * data;
    data = NULL;
    data = badSource(data);
    {
        char source[10+1] = SRC_STRING;
        size_t i, sourceLen;
        sourceLen = strlen(source);
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        for (i = 0; i < sourceLen + 1; i++)
        {
            data[i] = source[i];
        }
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
28,29
29,30
29,31
31,32
31,33
31,34
33,34
34,35
34,36
37,38
38,39
40,41
41,42
41,43
41,44
42,43
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,30,32,35,36,39,43,45,47,51,54,56,61,62,65,68,69,72,78,80,83,85,89,91,95,97
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
59,60
59,61
63,64
63,65
66,67
66,68
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad(){    char * data;    data = NULL;    data = badSource(data);    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42_bad
{    char * data;    data = NULL;    data = badSource(data);    {        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        char source[10+1] = SRC_STRING;        size_t i, sourceLen;        sourceLen = strlen(source);        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
size_t i, sourceLen;
size_t i, sourceLen;
size_t
size_t
i
i
sourceLen
sourceLen
sourceLen = strlen(source);
sourceLen = strlen(source)
sourceLen
sourceLen
strlen(source)
strlen
strlen
source
source
for (i = 0; i < sourceLen + 1; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < sourceLen + 1
i
i
sourceLen + 1
sourceLen
sourceLen
1
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(1,6,0)
(3,1,0)
(41,43,0)
(21,36,0)
(27,43,0)
(34,43,0)
(12,24,0)
(36,33,0)
(32,8,0)
(2,6,0)
(38,43,0)
(26,13,0)
(20,33,0)
(22,2,0)
(0,36,0)
(31,37,0)
(1,38,0)
(10,43,0)
(29,5,0)
(5,36,0)
(7,5,0)
(4,9,0)
(14,6,0)
(6,1,0)
(13,36,0)
(9,24,0)
(6,43,0)
(18,38,0)
(0,8,0)
(30,24,0)
(17,24,0)
(9,25,0)
(13,43,0)
(19,43,0)
(5,24,0)
(9,38,0)
(15,8,0)
(36,0,0)
(41,36,0)
(2,12,0)
(11,9,0)
(28,0,0)
(12,2,0)
(25,42,0)
(5,25,0)
(23,12,0)
(43,33,0)
(40,2,0)
(25,9,0)
(16,41,0)
(35,38,0)
(8,33,0)
(37,24,0)
(12,2,1)
(15,32,1)
(14,38,1)
(5,7,1)
(4,5,1)
(26,12,1)
(9,24,1)
(11,4,1)
(0,28,1)
(5,36,1)
(9,11,1)
(23,37,1)
(9,38,1)
(37,31,1)
(21,8,1)
(40,22,1)
(2,40,1)
(2,6,1)
(22,23,1)
(37,24,1)
(16,13,1)
(8,15,1)
(25,9,1)
(31,25,1)
(3,14,1)
(6,1,1)
(18,35,1)
(12,24,1)
(7,29,1)
(29,12,1)
(13,26,1)
(17,30,1)
(5,24,1)
(41,36,1)
(1,3,1)
(30,6,1)
(1,38,1)
(0,8,1)
(24,17,1)
(28,21,1)
(41,16,1)
(35,36,1)
(13,36,1)
(39,41,1)
(23,24,1)
(36,0,1)
(38,18,1)
(37,24,2)
(9,24,2)
(9,38,2)
(6,1,2)
(2,6,2)
(5,12,2)
(23,12,2)
(11,12,2)
(41,36,2)
(2,12,2)
(40,12,2)
(5,36,2)
(12,12,2)
(36,0,2)
(1,38,2)
(31,12,2)
(0,8,2)
(25,9,2)
(12,2,2)
(25,12,2)
(12,24,2)
(13,36,2)
(29,12,2)
(5,24,2)
(4,12,2)
(37,12,2)
(7,12,2)
(9,12,2)
(22,12,2)
-----------------------------------
(0,badSource(data)
(1,strlen(source)
(2,sourceLen + 1)
(3,source)
(4,source)
(5,data[i])
(6,sourceLen = strlen(source)
(7,i)
(8,data = NULL)
(9,source[i])
(10,for (i = 0; i < sourceLen + 1; i++)
(11,i)
(12,i < sourceLen + 1)
(13,printLine(data)
(14,sourceLen)
(15,NULL)
(16,data)
(17,0)
(18,SRC_STRING)
(19,source)
(20,data)
(21,data)
(22,sourceLen)
(23,i)
(24,i = 0)
(25,data[i] = source[i])
(26,data)
(27,i)
(28,data)
(29,data)
(30,i)
(31,i)
(32,data)
(33,)
(34,sourceLen)
(35,source)
(36,data = badSource(data)
(37,i++)
(38,source[10+1] = SRC_STRING)
(39,RET)
(40,1)
(41,free(data)
(42,)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^