-----label-----
1
-----code-----
int64_t * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badSource(int64_t * data)
{
    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
14,16
15,16
17,18
17,19
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
-----nextToken-----
3,5,6,9,11,12,16,21,25,27,30,32,36,37,41,43,48,50,53
-----computeFrom-----
19,20
19,21
31,32
31,33
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int64_t * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badSource(int64_t * data){    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    return data;}
int64_t
int64_t
* CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badSource(int64_t * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    return data;}
if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(6,4,0)
(4,6,0)
(6,18,0)
(17,8,0)
(24,20,0)
(3,6,0)
(22,15,0)
(13,11,0)
(5,11,0)
(10,4,0)
(21,24,0)
(20,10,0)
(10,20,0)
(7,19,0)
(6,19,0)
(16,20,0)
(8,18,0)
(11,6,0)
(4,9,0)
(1,2,0)
(14,8,0)
(2,0,0)
(8,15,0)
(4,10,0)
(0,12,0)
(11,18,0)
(0,2,0)
(9,4,0)
(8,6,0)
(20,24,0)
(11,5,1)
(14,23,1)
(4,9,1)
(5,13,1)
(11,6,1)
(20,24,1)
(10,20,1)
(4,10,1)
(3,23,1)
(1,11,1)
(8,6,1)
(0,2,1)
(2,1,1)
(13,6,1)
(24,21,1)
(16,3,1)
(21,16,1)
(14,0,1)
(14,11,1)
(6,4,1)
(8,18,1)
(6,18,1)
(8,14,1)
(11,18,1)
(17,8,1)
(8,6,2)
(4,9,2)
(20,23,2)
(6,18,2)
(17,8,2)
(8,18,2)
(5,23,2)
(13,23,2)
(20,24,2)
(16,23,2)
(11,23,2)
(2,11,2)
(10,23,2)
(11,18,2)
(21,23,2)
(10,20,2)
(6,4,2)
(4,10,2)
(4,23,2)
(3,23,2)
(0,11,2)
(24,23,2)
(6,23,2)
(1,11,2)
(11,6,2)
(0,2,2)
-----------------------------------
(0,exit(-1)
(1,1)
(2,-1)
(3,data)
(4,(int64_t *)
(5,NULL)
(6,data = (int64_t *)
(7,if (data == NULL)
(8,return data;)
(9,int64_t *)
(10,malloc(50*sizeof(int64_t)
(11,data == NULL)
(12,)
(13,data)
(14,data)
(15,)
(16,50)
(17,RET)
(18,int64_t * data)
(19,)
(20,50*sizeof(int64_t)
(21,int64_t)
(22,if(CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)
(23,CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22_badGlobal)
(24,sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^