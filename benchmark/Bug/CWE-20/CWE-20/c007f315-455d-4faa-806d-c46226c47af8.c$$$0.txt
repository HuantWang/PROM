-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int_09_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int_09_bad(){    int * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int_09_bad()
CWE415_Double_Free__malloc_free_int_09_bad
{    int * data;    /* Initialize data */    data = NULL;    if(GLOBAL_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(20,3,0)
(5,26,0)
(18,19,0)
(3,20,0)
(12,19,0)
(27,3,0)
(28,14,0)
(28,10,0)
(25,9,0)
(3,10,0)
(22,15,0)
(26,0,0)
(24,0,0)
(21,6,0)
(3,27,0)
(6,17,0)
(28,9,0)
(17,30,0)
(31,29,0)
(8,15,0)
(19,10,0)
(2,29,0)
(31,20,0)
(32,28,0)
(23,31,0)
(9,15,0)
(7,9,0)
(20,31,0)
(17,6,0)
(10,3,0)
(10,0,0)
(11,10,0)
(29,31,0)
(13,15,0)
(26,10,0)
(18,12,1)
(23,11,1)
(28,10,1)
(6,21,1)
(17,6,1)
(9,25,1)
(26,10,1)
(20,31,1)
(2,23,1)
(25,7,1)
(10,3,1)
(19,18,1)
(26,5,1)
(5,17,1)
(3,20,1)
(11,16,1)
(29,2,1)
(3,27,1)
(12,10,1)
(28,32,1)
(19,10,1)
(1,16,1)
(31,29,1)
(1,26,1)
(21,19,1)
(16,9,1)
(5,19,1)
(4,1,1)
(4,28,1)
(32,1,1)
(28,9,1)
(12,16,2)
(19,16,2)
(3,16,2)
(10,16,2)
(11,16,2)
(3,27,2)
(5,16,2)
(29,16,2)
(31,29,2)
(26,10,2)
(20,31,2)
(18,16,2)
(17,19,2)
(6,19,2)
(2,16,2)
(17,6,2)
(19,10,2)
(21,19,2)
(3,20,2)
(28,10,2)
(28,9,2)
(20,16,2)
(31,16,2)
(26,16,2)
(23,16,2)
(10,3,2)
(28,1,2)
(32,1,2)
-----------------------------------
(0,)
(1,GLOBAL_CONST_TRUE)
(2,int)
(3,(int *)
(4,RET)
(5,data)
(6,-1)
(7,data)
(8,if(GLOBAL_CONST_TRUE)
(9,data = NULL)
(10,data = (int *)
(11,data)
(12,data)
(13,if(GLOBAL_CONST_TRUE)
(14,)
(15,)
(16,GLOBAL_CONST_TRUE)
(17,exit(-1)
(18,NULL)
(19,data == NULL)
(20,malloc(100*sizeof(int)
(21,1)
(22,data)
(23,100)
(24,if (data == NULL)
(25,NULL)
(26,free(data)
(27,int *)
(28,free(data)
(29,sizeof(int)
(30,)
(31,100*sizeof(int)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^