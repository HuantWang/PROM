-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (char *)malloc(10*sizeof(char));
        if (data == NULL) {exit(-1);}
    }
    {
        char source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        strcpy(data, source);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,79,81,85,87
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }    {        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Did not leave space for a null terminator */        data = (char *)malloc(10*sizeof(char));        if (data == NULL) {exit(-1);}    }
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        strcpy(data, source);        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
strcpy(data, source);
strcpy(data, source)
strcpy
strcpy
data
data
source
source
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(14,28,0)
(25,28,0)
(32,17,0)
(2,20,0)
(23,26,0)
(4,13,0)
(14,17,0)
(36,3,0)
(1,9,0)
(5,8,0)
(22,34,0)
(13,17,0)
(10,28,0)
(33,25,0)
(24,22,0)
(34,22,0)
(11,20,0)
(39,38,0)
(11,34,0)
(17,9,0)
(29,13,0)
(25,23,0)
(7,34,0)
(20,23,0)
(20,11,0)
(14,23,0)
(6,9,0)
(35,23,0)
(18,19,0)
(25,17,0)
(0,16,0)
(23,20,0)
(37,16,0)
(20,2,0)
(27,14,0)
(38,23,0)
(19,36,0)
(34,11,0)
(21,26,0)
(28,9,0)
(38,17,0)
(36,19,0)
(16,23,0)
(38,28,0)
(12,28,0)
(30,38,0)
(15,8,0)
(38,13,0)
(27,38,1)
(33,14,1)
(14,28,1)
(38,13,1)
(20,11,1)
(0,37,1)
(24,7,1)
(16,0,1)
(18,16,1)
(16,23,1)
(25,33,1)
(19,18,1)
(29,8,1)
(14,23,1)
(29,36,1)
(12,10,1)
(38,28,1)
(35,8,1)
(36,19,1)
(15,28,1)
(13,4,1)
(39,13,1)
(11,34,1)
(28,12,1)
(8,5,1)
(14,27,1)
(31,25,1)
(25,23,1)
(38,23,1)
(7,35,1)
(4,29,1)
(5,15,1)
(37,23,1)
(22,24,1)
(34,22,1)
(30,39,1)
(29,16,1)
(38,30,1)
(23,20,1)
(20,2,1)
(25,28,1)
(23,8,2)
(19,16,2)
(34,8,2)
(36,16,2)
(22,8,2)
(23,20,2)
(14,28,2)
(11,8,2)
(25,23,2)
(35,8,2)
(7,8,2)
(24,8,2)
(25,28,2)
(20,2,2)
(18,16,2)
(16,8,2)
(38,23,2)
(36,19,2)
(38,28,2)
(20,11,2)
(0,8,2)
(34,22,2)
(38,13,2)
(11,34,2)
(16,23,2)
(20,8,2)
(14,23,2)
(37,8,2)
-----------------------------------
(0,NULL)
(1,if(GLOBAL_CONST_FIVE==5)
(2,char *)
(3,)
(4,SRC_STRING)
(5,5)
(6,data)
(7,10)
(8,GLOBAL_CONST_FIVE==5)
(9,)
(10,data)
(11,malloc(10*sizeof(char)
(12,NULL)
(13,source[10+1] = SRC_STRING)
(14,printLine(data)
(15,GLOBAL_CONST_FIVE)
(16,data == NULL)
(17,)
(18,1)
(19,-1)
(20,(char *)
(21,if (data == NULL)
(22,sizeof(char)
(23,data = (char *)
(24,char)
(25,free(data)
(26,)
(27,data)
(28,data = NULL)
(29,source)
(30,source)
(31,RET)
(32,source)
(33,data)
(34,10*sizeof(char)
(35,data)
(36,exit(-1)
(37,data)
(38,strcpy(data, source)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^