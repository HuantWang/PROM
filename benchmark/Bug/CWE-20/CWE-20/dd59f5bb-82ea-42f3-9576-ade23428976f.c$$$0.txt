-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09_bad()
{
    wchar_t * data;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        wmemset(data, L'A', 100-1); /* fill with L'A's */
        data[100-1] = L'\0'; /* null terminate */
    }
    {
        wchar_t dest[50] = L"";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        wcscpy(dest, data);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,83,87,89,93,95
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09_bad(){    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09_bad()
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09_bad
{    wchar_t * data;    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }    {        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        wmemset(data, L'A', 100-1); /* fill with L'A's */        data[100-1] = L'\0'; /* null terminate */    }
wmemset(data, L'A', 100-1);
wmemset(data, L'A', 100-1)
wmemset
wmemset
data
data
L'A'
100-1
100
1
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
{        wchar_t dest[50] = L"";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        wcscpy(dest, data);        printWLine(data);        free(data);    }
wchar_t dest[50] = L"";
wchar_t dest[50] = L"";
wchar_t
dest[50] = L""
dest
[50]
50
= L""
L""
wcscpy(dest, data);
wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(22,24,0)
(4,13,0)
(25,29,0)
(5,11,0)
(6,32,0)
(15,31,0)
(8,23,0)
(21,2,0)
(14,2,0)
(31,23,0)
(6,13,0)
(13,4,0)
(9,8,0)
(1,31,0)
(23,2,0)
(3,27,0)
(20,28,0)
(24,19,0)
(12,19,0)
(29,19,0)
(7,23,0)
(4,27,0)
(29,23,0)
(30,4,0)
(23,6,0)
(19,2,0)
(10,16,0)
(5,28,0)
(17,2,0)
(28,5,0)
(31,19,0)
(6,23,0)
(18,8,0)
(13,6,0)
(32,6,0)
(24,23,0)
(27,4,0)
(23,6,1)
(22,31,1)
(24,23,1)
(8,23,1)
(4,27,1)
(10,0,1)
(9,18,1)
(29,23,1)
(6,13,1)
(28,20,1)
(8,9,1)
(5,28,1)
(15,12,1)
(29,25,1)
(31,1,1)
(12,10,1)
(25,24,1)
(30,7,1)
(18,23,1)
(13,4,1)
(24,22,1)
(27,3,1)
(26,29,1)
(1,15,1)
(3,30,1)
(0,5,1)
(12,0,1)
(31,23,1)
(20,8,1)
(6,32,1)
(0,8,1)
(6,13,2)
(4,27,2)
(23,6,2)
(24,23,2)
(29,23,2)
(5,28,2)
(13,4,2)
(31,23,2)
(8,23,2)
(28,8,2)
(6,32,2)
(10,0,2)
(5,8,2)
(20,8,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,data)
(2,)
(3,wchar_t)
(4,100*sizeof(wchar_t)
(5,exit(-1)
(6,(wchar_t *)
(7,data)
(8,data == NULL)
(9,NULL)
(10,\\\'\\\\0\\\')
(11,)
(12,"")
(13,malloc(100*sizeof(wchar_t)
(14,if (data == NULL)
(15,dest)
(16,)
(17,if(GLOBAL_CONST_TRUE)
(18,data)
(19,)
(20,1)
(21,data)
(22,data)
(23,data = (wchar_t *)
(24,printWLine(data)
(25,data)
(26,RET)
(27,sizeof(wchar_t)
(28,-1)
(29,free(data)
(30,100)
(31,wcscpy(dest, data)
(32,wchar_t *)
(33,\\'\\\\0\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^