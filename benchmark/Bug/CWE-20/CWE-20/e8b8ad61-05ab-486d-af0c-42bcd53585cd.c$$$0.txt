-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */
        wcscat(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,100,102,106,108
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06_bad()
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        data[0] = L'\0'; /* null terminate */    }
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */        wcscat(data, source);        printWLine(data);        free(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
wcscat(data, source);
wcscat(data, source)
wcscat
wcscat
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,35,0)
(26,35,0)
(4,26,0)
(33,32,0)
(35,26,0)
(19,26,0)
(11,6,0)
(21,38,0)
(18,24,0)
(17,24,0)
(6,18,0)
(16,32,0)
(23,18,0)
(6,32,0)
(19,32,0)
(35,8,0)
(0,27,0)
(16,18,0)
(34,37,0)
(28,2,0)
(6,26,0)
(2,28,0)
(31,27,0)
(25,18,0)
(15,6,0)
(19,18,0)
(28,13,0)
(26,37,0)
(10,12,0)
(27,26,0)
(16,26,0)
(38,9,0)
(13,28,0)
(5,12,0)
(35,2,0)
(22,28,0)
(39,24,0)
(14,37,0)
(9,38,0)
(9,3,0)
(2,35,0)
(36,19,0)
(7,32,0)
(29,13,0)
(30,16,0)
(32,24,0)
(16,32,1)
(14,27,1)
(22,4,1)
(15,25,1)
(16,30,1)
(26,35,1)
(10,32,1)
(25,14,1)
(1,16,1)
(7,33,1)
(2,28,1)
(29,22,1)
(6,32,1)
(14,9,1)
(9,38,1)
(19,36,1)
(19,32,1)
(27,0,1)
(25,12,1)
(16,26,1)
(19,26,1)
(6,26,1)
(12,5,1)
(31,26,1)
(36,6,1)
(6,11,1)
(21,27,1)
(30,19,1)
(38,21,1)
(11,15,1)
(35,2,1)
(35,8,1)
(0,31,1)
(5,10,1)
(32,7,1)
(13,29,1)
(28,13,1)
(27,26,1)
(4,12,1)
(31,12,2)
(14,12,2)
(16,26,2)
(4,12,2)
(27,26,2)
(28,12,2)
(6,26,2)
(2,28,2)
(26,12,2)
(35,2,2)
(9,27,2)
(27,12,2)
(2,12,2)
(38,27,2)
(19,32,2)
(16,32,2)
(9,38,2)
(13,12,2)
(35,12,2)
(28,13,2)
(26,35,2)
(6,32,2)
(21,27,2)
(29,12,2)
(35,8,2)
(22,12,2)
(19,26,2)
(0,12,2)
-----------------------------------
(0,NULL)
(1,RET)
(2,malloc(50*sizeof(wchar_t)
(3,)
(4,data)
(5,5)
(6,wcscat(data, source)
(7,NULL)
(8,wchar_t *)
(9,exit(-1)
(10,STATIC_CONST_FIVE)
(11,source)
(12,STATIC_CONST_FIVE==5)
(13,sizeof(wchar_t)
(14,'\\\\0')
(15,data)
(16,free(data)
(17,if(STATIC_CONST_FIVE==5)
(18,)
(19,printWLine(data)
(20,\'\\\\0\')
(21,1)
(22,50)
(23,source)
(24,)
(25,'\\\\0')
(26,data = (wchar_t *)
(27,data == NULL)
(28,50*sizeof(wchar_t)
(29,wchar_t)
(30,data)
(31,data)
(32,data = NULL)
(33,data)
(34,if (data == NULL)
(35,(wchar_t *)
(36,data)
(37,)
(38,-1)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^