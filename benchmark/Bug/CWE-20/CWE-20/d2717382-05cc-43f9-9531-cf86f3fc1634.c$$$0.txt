-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink
&data
data
data
-----joern-----
(12,7,0)
(16,43,0)
(22,43,0)
(68,7,0)
(25,7,0)
(28,45,0)
(11,31,0)
(65,59,0)
(59,7,0)
(18,27,0)
(49,12,0)
(30,33,0)
(15,8,0)
(63,8,0)
(34,6,0)
(48,14,0)
(59,65,0)
(35,47,0)
(19,25,0)
(29,20,0)
(40,6,0)
(31,27,0)
(31,42,0)
(70,34,0)
(38,57,0)
(43,6,0)
(17,5,0)
(1,63,0)
(63,1,0)
(60,5,0)
(14,20,0)
(42,6,0)
(54,57,0)
(1,52,0)
(50,38,0)
(12,31,0)
(46,65,0)
(12,5,0)
(37,31,0)
(70,7,0)
(5,17,0)
(66,4,0)
(41,47,0)
(52,67,0)
(7,6,0)
(47,52,0)
(8,63,0)
(5,12,0)
(62,11,0)
(7,43,0)
(53,5,0)
(4,23,0)
(58,61,0)
(59,8,0)
(21,60,0)
(69,67,0)
(14,7,0)
(0,1,0)
(55,59,0)
(3,7,0)
(44,42,0)
(57,31,0)
(34,70,0)
(32,70,0)
(56,65,0)
(14,47,0)
(17,13,0)
(25,61,0)
(52,33,0)
(5,60,0)
(17,11,0)
(20,26,0)
(25,31,0)
(8,59,0)
(67,7,0)
(47,14,0)
(71,6,0)
(13,17,0)
(2,52,0)
(36,12,0)
(24,1,0)
(61,23,0)
(65,52,0)
(10,11,0)
(9,57,0)
(67,52,0)
(27,31,0)
(27,7,0)
(64,42,0)
(51,25,0)
(57,38,0)
(11,17,0)
(7,43,1)
(5,12,1)
(35,48,1)
(56,55,1)
(25,19,1)
(27,18,1)
(65,46,1)
(59,7,1)
(20,29,1)
(12,31,1)
(47,52,1)
(38,50,1)
(5,17,1)
(37,7,1)
(46,56,1)
(7,68,1)
(39,34,1)
(1,52,1)
(57,31,1)
(8,59,1)
(2,60,1)
(61,58,1)
(21,5,1)
(27,7,1)
(54,31,1)
(1,24,1)
(4,66,1)
(50,57,1)
(22,16,1)
(59,65,1)
(17,11,1)
(32,20,1)
(52,67,1)
(67,7,1)
(32,63,1)
(47,41,1)
(11,62,1)
(63,1,1)
(32,61,1)
(67,69,1)
(38,57,1)
(9,54,1)
(12,49,1)
(24,0,1)
(69,2,1)
(60,5,1)
(70,32,1)
(5,53,1)
(0,52,1)
(51,4,1)
(58,25,1)
(68,3,1)
(29,14,1)
(63,8,1)
(49,36,1)
(36,38,1)
(25,7,1)
(57,9,1)
(48,63,1)
(19,51,1)
(60,21,1)
(32,38,1)
(55,1,1)
(66,60,1)
(10,12,1)
(11,31,1)
(8,15,1)
(18,37,1)
(14,7,1)
(62,10,1)
(70,7,1)
(15,59,1)
(25,31,1)
(17,13,1)
(34,70,1)
(3,43,1)
(65,52,1)
(43,22,1)
(31,27,1)
(14,47,1)
(41,35,1)
(12,7,1)
(53,17,1)
(56,1,2)
(17,11,2)
(67,60,2)
(66,60,2)
(51,60,2)
(21,38,2)
(38,57,2)
(65,52,2)
(17,13,2)
(35,63,2)
(59,1,2)
(63,1,2)
(5,17,2)
(55,1,2)
(67,7,2)
(14,63,2)
(60,38,2)
(5,38,2)
(1,52,2)
(25,7,2)
(27,7,2)
(14,7,2)
(47,52,2)
(10,38,2)
(11,38,2)
(52,60,2)
(31,27,2)
(29,63,2)
(20,63,2)
(15,1,2)
(8,1,2)
(59,7,2)
(25,60,2)
(2,60,2)
(36,38,2)
(46,1,2)
(8,59,2)
(12,7,2)
(17,38,2)
(5,12,2)
(4,60,2)
(57,31,2)
(11,31,2)
(1,60,2)
(63,60,2)
(34,70,2)
(0,60,2)
(48,63,2)
(60,5,2)
(61,60,2)
(19,60,2)
(52,67,2)
(63,8,2)
(70,7,2)
(58,60,2)
(69,60,2)
(25,31,2)
(49,38,2)
(65,1,2)
(12,31,2)
(41,63,2)
(62,38,2)
(24,60,2)
(47,63,2)
(59,65,2)
(14,47,2)
(53,38,2)
(7,43,2)
(12,38,2)
-----------------------------------
(0,dataLen)
(1,dataLen > 0)
(2,dataLen)
(3,data)
(4,printLine("fgets()
(5,fgets(data+dataLen, (int)
(6,)
(7,data = dataBuffer)
(8,data[dataLen-1] == \\\'\\\\n\\\')
(9,dataLen)
(10,100)
(11,100-dataLen)
(12,data+dataLen)
(13,int)
(14,data[dataLen-1])
(15,\\\'\\\\n\\\')
(16,dataBuffer)
(17,(int)
(18,data)
(19,dataLen)
(20,data[dataLen-1] = \\\'\\\\0\\\')
(21,NULL)
(22,COMMAND_ARG2)
(23,)
(24,0)
(25,data[dataLen])
(26,)
(27,strlen(data)
(28,if (fgets(data+dataLen, (int)
(29,\\\'\\\\0\\\')
(30,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(31,dataLen = strlen(data)
(32,data)
(33,)
(34,CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data)
(35,dataLen)
(36,data)
(37,dataLen)
(38,100-dataLen > 1)
(39,RET)
(40,data)
(41,1)
(42,)
(43,dataBuffer[100] = COMMAND_ARG2)
(44,if (100-dataLen > 1)
(45,)
(46,1)
(47,dataLen-1)
(48,data)
(49,dataLen)
(50,1)
(51,data)
(52,dataLen = strlen(data)
(53,stdin)
(54,100)
(55,data)
(56,dataLen)
(57,100-dataLen)
(58,\\\'\\\\0\\\')
(59,data[dataLen-1])
(60,fgets(data+dataLen, (int)
(61,data[dataLen] = \\\'\\\\0\\\')
(62,dataLen)
(63,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(64,dataLen)
(65,dataLen-1)
(66,"fgets()
(67,strlen(data)
(68,dataBuffer)
(69,data)
(70,&data)
(71,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^