-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
63,64
64,65
64,66
65,66
69,70
69,71
69,72
69,73
69,74
69,75
69,76
70,71
71,72
71,73
73,74
73,75
75,76
77,78
78,79
78,80
78,81
78,82
79,80
81,82
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
92,93
92,94
96,97
97,98
97,99
97,100
97,101
98,99
100,101
102,103
104,105
104,106
106,107
107,108
107,109
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
119,120
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
129,130
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,61,62,66,67,68,72,74,76,80,82,83,85,86,91,93,94,95,99,101,103,105,108,109,114,116,117,118,122,124,128,130
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
84,85
84,86
88,89
88,90
92,93
92,94
104,105
104,106
111,112
111,113
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(13,28,0)
(6,2,0)
(53,19,0)
(15,31,0)
(8,55,0)
(56,19,0)
(25,23,0)
(22,4,0)
(24,43,0)
(47,30,0)
(67,15,0)
(7,51,0)
(31,14,0)
(65,61,0)
(10,23,0)
(31,15,0)
(58,23,0)
(40,35,0)
(4,22,0)
(35,19,0)
(59,53,0)
(1,10,0)
(19,53,0)
(53,17,0)
(56,10,0)
(16,39,0)
(36,22,0)
(56,13,0)
(30,19,0)
(16,23,0)
(30,23,0)
(69,23,0)
(0,16,0)
(69,19,0)
(38,28,0)
(68,16,0)
(60,13,0)
(32,30,0)
(34,13,0)
(45,58,0)
(39,16,0)
(63,51,0)
(47,61,0)
(61,47,0)
(11,35,0)
(60,23,0)
(55,56,0)
(17,4,0)
(52,2,0)
(48,13,0)
(2,19,0)
(66,45,0)
(45,29,0)
(50,51,0)
(4,17,0)
(49,55,0)
(26,51,0)
(54,19,0)
(43,51,0)
(37,69,0)
(21,29,0)
(18,60,0)
(17,53,0)
(5,4,0)
(33,47,0)
(30,47,0)
(60,19,0)
(53,59,0)
(42,56,0)
(23,28,0)
(19,51,0)
(2,43,0)
(56,55,0)
(29,45,0)
(9,29,0)
(69,13,0)
(64,39,0)
(57,51,0)
(44,51,0)
(27,58,0)
(30,13,0)
(41,39,0)
(12,28,0)
(3,30,0)
(20,26,0)
(30,13,1)
(11,40,1)
(67,35,1)
(24,2,1)
(53,17,1)
(35,19,1)
(68,0,1)
(49,8,1)
(60,19,1)
(56,19,1)
(6,52,1)
(2,19,1)
(1,56,1)
(17,4,1)
(69,37,1)
(19,53,1)
(46,60,1)
(0,63,1)
(30,19,1)
(31,15,1)
(15,67,1)
(3,32,1)
(9,21,1)
(55,49,1)
(66,16,1)
(56,13,1)
(60,13,1)
(35,11,1)
(5,54,1)
(53,59,1)
(48,34,1)
(36,5,1)
(69,19,1)
(8,42,1)
(16,39,1)
(39,41,1)
(63,26,1)
(26,20,1)
(30,47,1)
(29,9,1)
(61,65,1)
(18,69,1)
(10,1,1)
(60,18,1)
(52,35,1)
(47,61,1)
(62,13,1)
(37,10,1)
(41,64,1)
(13,48,1)
(64,68,1)
(43,24,1)
(40,19,1)
(69,13,1)
(65,33,1)
(58,27,1)
(44,43,1)
(52,31,1)
(2,6,1)
(0,44,1)
(56,55,1)
(54,62,1)
(33,3,1)
(32,58,1)
(27,45,1)
(42,30,1)
(22,36,1)
(21,66,1)
(20,62,1)
(45,29,1)
(4,22,1)
(20,62,2)
(53,59,2)
(63,62,2)
(11,62,2)
(19,53,2)
(60,19,2)
(16,39,2)
(31,35,2)
(44,62,2)
(19,62,2)
(54,62,2)
(53,62,2)
(56,13,2)
(47,61,2)
(31,15,2)
(2,19,2)
(67,35,2)
(30,13,2)
(45,29,2)
(15,35,2)
(30,19,2)
(69,13,2)
(24,62,2)
(17,62,2)
(4,62,2)
(35,62,2)
(52,62,2)
(53,17,2)
(6,62,2)
(36,62,2)
(17,4,2)
(40,62,2)
(22,62,2)
(56,55,2)
(35,19,2)
(56,19,2)
(30,47,2)
(43,62,2)
(2,62,2)
(4,22,2)
(69,19,2)
(5,62,2)
(26,62,2)
(60,13,2)
-----------------------------------
(0,source)
(1,\\\'\\\\0\\\')
(2,data[0])
(3,source)
(4,50*sizeof(char)
(5,50)
(6,0)
(7,if (data == NULL)
(8,100)
(9,1)
(10,data[100-1] = \\\'\\\\0\\\')
(11,NULL)
(12,switch(6)
(13,data = NULL)
(14,)
(15,-1)
(16,memset(source, \\\'C\\\', 100-1)
(17,malloc(50*sizeof(char)
(18,data)
(19,data = (char *)
(20,"Benign, fixed string")
(21,100)
(22,sizeof(char)
(23,)
(24,\\\'\\\\0\\\')
(25,source)
(26,printLine("Benign, fixed string")
(27,\\\'\\\\0\\\')
(28,)
(29,100-1)
(30,memmove(data, source, 100*sizeof(char)
(31,exit(-1)
(32,data)
(33,100)
(34,data)
(35,data == NULL)
(36,char)
(37,data)
(38,data)
(39,100-1)
(40,data)
(41,1)
(42,data)
(43,data[0] = \\\'\\\\0\\\')
(44,break;)
(45,source[100-1])
(46,RET)
(47,100*sizeof(char)
(48,NULL)
(49,1)
(50,default:)
(51,)
(52,data)
(53,(char *)
(54,data)
(55,100-1)
(56,data[100-1])
(57,case 6:)
(58,source[100-1] = \\\'\\\\0\\\')
(59,char *)
(60,free(data)
(61,sizeof(char)
(62,6)
(63,break;)
(64,100)
(65,char)
(66,source)
(67,1)
(68,\\\'C\\\')
(69,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^