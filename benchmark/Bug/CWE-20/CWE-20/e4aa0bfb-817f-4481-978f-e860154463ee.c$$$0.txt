-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        memmove(data, source, 10*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
54,55
54,56
54,57
56,57
58,59
59,60
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
69,71
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,40,42,47,49,53,55,57,60,64,66,68,70,73,74,78,81,82,86,88
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        memmove(data, source, 10*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
memmove(data, source, 10*sizeof(int));
memmove(data, source, 10*sizeof(int))
memmove
memmove
data
data
source
source
10*sizeof(int)
10
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(27,38,0)
(26,29,0)
(7,35,0)
(23,37,0)
(35,15,0)
(18,39,0)
(1,15,0)
(6,36,0)
(41,7,0)
(3,11,0)
(6,10,0)
(10,37,0)
(7,37,0)
(14,10,0)
(27,24,0)
(13,19,0)
(37,19,0)
(9,38,0)
(40,26,0)
(39,35,0)
(8,35,0)
(27,35,0)
(18,0,0)
(5,36,0)
(31,35,0)
(0,19,0)
(39,37,0)
(10,0,0)
(10,11,0)
(39,18,0)
(12,8,0)
(16,39,0)
(35,27,0)
(22,10,0)
(38,27,0)
(34,19,0)
(33,39,0)
(32,21,0)
(17,0,0)
(10,6,0)
(11,0,0)
(25,37,0)
(2,21,0)
(4,40,0)
(26,40,0)
(24,27,0)
(20,6,0)
(7,0,0)
(36,6,0)
(10,35,0)
(30,8,0)
(40,4,1)
(21,32,1)
(39,35,1)
(16,10,1)
(26,40,1)
(7,35,1)
(11,3,1)
(12,30,1)
(28,7,1)
(27,24,1)
(25,23,1)
(5,20,1)
(33,16,1)
(7,41,1)
(31,21,1)
(22,11,1)
(4,8,1)
(18,39,1)
(30,35,1)
(2,37,1)
(20,14,1)
(10,37,1)
(35,27,1)
(14,22,1)
(10,6,1)
(7,37,1)
(37,25,1)
(10,11,1)
(41,18,1)
(8,12,1)
(3,8,1)
(3,26,1)
(39,33,1)
(3,21,1)
(27,38,1)
(36,5,1)
(39,37,1)
(32,2,1)
(38,9,1)
(9,31,1)
(8,35,1)
(10,35,1)
(6,36,1)
(12,21,2)
(40,8,2)
(31,21,2)
(39,37,2)
(9,21,2)
(30,21,2)
(27,21,2)
(8,35,2)
(10,11,2)
(26,8,2)
(10,35,2)
(10,6,2)
(39,35,2)
(35,27,2)
(18,39,2)
(26,40,2)
(4,8,2)
(7,37,2)
(27,38,2)
(6,36,2)
(35,21,2)
(10,37,2)
(7,35,2)
(8,21,2)
(38,21,2)
(27,24,2)
-----------------------------------
(0,)
(1,if (data == NULL)
(2,GLOBAL_CONST_FIVE)
(3,source)
(4,1)
(5,int)
(6,10*sizeof(int)
(7,free(data)
(8,data == NULL)
(9,10)
(10,memmove(data, source, 10*sizeof(int)
(11,source[10] = {0})
(12,NULL)
(13,data)
(14,source)
(15,)
(16,data)
(17,source)
(18,printIntLine(data[0])
(19,)
(20,10)
(21,GLOBAL_CONST_FIVE==5)
(22,data)
(23,data)
(24,int *)
(25,NULL)
(26,exit(-1)
(27,(int *)
(28,RET)
(29,)
(30,data)
(31,data)
(32,5)
(33,0)
(34,if(GLOBAL_CONST_FIVE==5)
(35,data = (int *)
(36,sizeof(int)
(37,data = NULL)
(38,malloc(10)
(39,data[0])
(40,-1)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^