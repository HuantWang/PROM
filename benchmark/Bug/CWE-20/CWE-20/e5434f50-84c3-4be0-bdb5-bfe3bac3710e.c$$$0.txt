-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_char_10_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,66,68
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_char_10_bad(){    char * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_char_10_bad()
CWE415_Double_Free__malloc_free_char_10_bad
{    char * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
globalTrue
globalTrue
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,16,0)
(6,18,0)
(24,12,0)
(27,9,0)
(9,3,0)
(17,9,0)
(29,6,0)
(10,20,0)
(19,30,0)
(30,19,0)
(2,16,0)
(12,2,0)
(12,0,0)
(32,10,0)
(22,2,0)
(32,30,0)
(22,16,0)
(15,3,0)
(13,3,0)
(30,2,0)
(11,20,0)
(18,31,0)
(2,30,0)
(8,10,0)
(30,32,0)
(26,4,0)
(10,32,0)
(20,10,0)
(12,9,0)
(7,22,0)
(4,2,0)
(18,6,0)
(21,2,0)
(28,4,0)
(23,3,0)
(4,28,1)
(7,18,1)
(29,4,1)
(12,24,1)
(2,30,1)
(10,20,1)
(7,4,1)
(20,11,1)
(12,9,1)
(4,2,1)
(14,12,1)
(22,7,1)
(30,32,1)
(26,2,1)
(5,22,1)
(8,21,1)
(12,2,1)
(17,27,1)
(28,26,1)
(14,5,1)
(21,1,1)
(24,5,1)
(6,29,1)
(32,10,1)
(9,17,1)
(30,19,1)
(11,8,1)
(22,2,1)
(18,6,1)
(1,9,1)
(5,1,1)
(18,4,2)
(11,1,2)
(22,2,2)
(28,1,2)
(12,5,2)
(8,1,2)
(4,2,2)
(32,10,2)
(30,19,2)
(2,30,2)
(32,1,2)
(7,1,2)
(12,9,2)
(29,4,2)
(10,1,2)
(30,32,2)
(21,1,2)
(18,6,2)
(24,5,2)
(22,1,2)
(4,1,2)
(20,1,2)
(30,1,2)
(2,1,2)
(10,20,2)
(26,1,2)
(6,4,2)
(12,2,2)
-----------------------------------
(0,)
(1,globalTrue)
(2,data = (char *)
(3,)
(4,data == NULL)
(5,globalTrue)
(6,-1)
(7,data)
(8,100)
(9,data = NULL)
(10,100*sizeof(char)
(11,char)
(12,free(data)
(13,if(globalTrue)
(14,RET)
(15,data)
(16,)
(17,NULL)
(18,exit(-1)
(19,char *)
(20,sizeof(char)
(21,data)
(22,free(data)
(23,if(globalTrue)
(24,data)
(25,if (data == NULL)
(26,data)
(27,data)
(28,NULL)
(29,1)
(30,(char *)
(31,)
(32,malloc(100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^