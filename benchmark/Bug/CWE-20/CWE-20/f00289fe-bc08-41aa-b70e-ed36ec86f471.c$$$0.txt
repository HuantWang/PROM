-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBadBuffer[50];
    wchar_t dataGoodBuffer[100];
    {
        wchar_t * data = *dataPtr1;
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t source[100];
            wmemset(source, L'C', 100-1); /* fill with L'C's */
            source[100-1] = L'\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
            SNPRINTF(data, 100, L"%s", source);
            printWLine(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
72,73
73,74
73,75
74,75
75,76
77,78
79,80
79,81
80,81
81,82
81,83
83,84
83,85
83,86
86,87
87,88
88,89
90,91
90,92
90,93
90,94
90,95
91,92
92,93
92,94
94,95
94,96
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
105,107
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
117,118
118,119
118,120
118,121
118,122
118,123
119,120
121,122
125,126
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,45,47,51,53,54,58,62,64,69,70,71,76,78,82,84,85,89,93,95,97,101,103,104,106,107,112,114,115,116,120,122,123,124,126,130,132
-----computeFrom-----
60,61
60,62
66,67
66,68
73,74
73,75
105,106
105,107
109,110
109,111
113,114
113,115
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    {        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_32_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBadBuffer[50];    wchar_t dataGoodBuffer[100];    {        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBadBuffer[50];
wchar_t dataBadBuffer[50];
wchar_t
dataBadBuffer[50]
dataBadBuffer
[50]
50
wchar_t dataGoodBuffer[100];
wchar_t dataGoodBuffer[100];
wchar_t
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
{        wchar_t * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t source[100];            wmemset(source, L'C', 100-1); /* fill with L'C's */            source[100-1] = L'\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */            SNPRINTF(data, 100, L"%s", source);            printWLine(data);        }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(23,25,0)
(37,30,0)
(26,30,0)
(9,13,0)
(29,6,0)
(16,29,0)
(6,29,0)
(27,20,0)
(13,26,0)
(18,11,0)
(26,13,0)
(32,6,0)
(2,36,0)
(22,1,0)
(33,36,0)
(13,29,0)
(21,5,0)
(17,36,0)
(0,36,0)
(14,19,0)
(39,30,0)
(3,14,0)
(20,25,0)
(11,30,0)
(29,36,0)
(30,36,0)
(35,4,0)
(19,14,0)
(12,19,0)
(25,36,0)
(5,39,0)
(4,14,0)
(25,20,0)
(15,36,0)
(8,2,0)
(24,30,0)
(31,11,0)
(38,26,0)
(19,25,0)
(7,1,0)
(14,2,0)
(5,29,0)
(4,1,0)
(10,36,0)
(1,2,0)
(39,11,0)
(28,39,0)
(31,18,1)
(23,29,1)
(4,35,1)
(29,6,1)
(5,21,1)
(4,14,1)
(28,5,1)
(7,14,1)
(20,27,1)
(12,3,1)
(19,12,1)
(39,28,1)
(14,19,1)
(13,29,1)
(38,25,1)
(11,31,1)
(37,11,1)
(26,13,1)
(6,32,1)
(3,39,1)
(25,20,1)
(13,9,1)
(27,23,1)
(19,25,1)
(9,38,1)
(34,4,1)
(21,37,1)
(18,26,1)
(32,16,1)
(39,11,1)
(5,29,1)
(35,7,1)
(29,6,2)
(14,19,2)
(5,29,2)
(19,25,2)
(4,14,2)
(26,13,2)
(25,20,2)
(39,11,2)
(13,29,2)
-----------------------------------
(0,dataPtr2)
(1,)
(2,)
(3,data)
(4,printWLine(data)
(5,*dataPtr1)
(6,&data)
(7,'\\\\0')
(8,data)
(9,dataPtr1)
(10,dataPtr1)
(11,data = dataBadBuffer)
(12,dataPtr2)
(13,*dataPtr1)
(14,* data = *dataPtr2)
(15,dataGoodBuffer)
(16,dataPtr1)
(17,data)
(18,data)
(19,*dataPtr2)
(20,&data)
(21,dataPtr1)
(22,source)
(23,dataPtr2)
(24,data)
(25,* *dataPtr2 = &data)
(26,* data = *dataPtr1)
(27,data)
(28,data)
(29,* *dataPtr1 = &data)
(30,)
(31,dataBadBuffer)
(32,data)
(33,dataBadBuffer)
(34,RET)
(35,data)
(36,)
(37,'\\\\0')
(38,data)
(39,*dataPtr1 = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^