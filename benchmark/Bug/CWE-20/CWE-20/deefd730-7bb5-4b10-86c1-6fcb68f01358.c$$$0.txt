-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    /* Initialize data */
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (twoIntsStruct *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        data->intOne = 1;
        data->intTwo = 2;
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
        printStructLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
69,70
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
87,89
88,89
92,93
93,94
93,95
94,95
94,96
95,96
99,100
100,101
100,102
101,102
102,103
104,105
106,107
106,108
106,109
107,108
108,109
108,110
109,110
111,112
111,113
111,114
114,115
115,116
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,71,75,77,82,84,89,90,91,96,97,98,103,105,110,112,113,117,121,123,127,129
-----computeFrom-----
38,39
38,40
56,57
56,58
73,74
73,75
86,87
86,88
93,94
93,95
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    /* Initialize data */    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */        printStructLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32_bad
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    /* Initialize data */    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */        printStructLine(data);        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        twoIntsStruct * data = *dataPtr1;        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (twoIntsStruct *)malloc(sizeof(data));
data = (twoIntsStruct *)malloc(sizeof(data))
data
data
(twoIntsStruct *)malloc(sizeof(data))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 1;
data->intOne = 1
data->intOne
data
data
intOne
1
data->intTwo = 2;
data->intTwo = 2
data->intTwo
data
data
intTwo
2
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */        printStructLine(data);        free(data);    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
printStructLine(data);
printStructLine(data)
printStructLine
printStructLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(24,55,0)
(34,20,0)
(53,48,0)
(25,35,0)
(60,45,0)
(58,25,0)
(44,49,0)
(54,42,0)
(38,35,0)
(16,30,0)
(40,35,0)
(48,55,0)
(2,27,0)
(59,25,0)
(5,3,0)
(15,49,0)
(13,7,0)
(46,7,0)
(17,8,0)
(7,45,0)
(60,43,0)
(23,38,0)
(43,55,0)
(55,42,0)
(37,46,0)
(47,11,0)
(33,48,0)
(14,3,0)
(43,42,0)
(0,31,0)
(3,14,0)
(8,14,0)
(25,58,0)
(19,42,0)
(52,24,0)
(30,55,0)
(1,24,0)
(51,35,0)
(12,60,0)
(9,58,0)
(3,5,0)
(42,49,0)
(8,46,0)
(55,3,0)
(35,49,0)
(56,31,0)
(57,42,0)
(51,25,0)
(29,43,0)
(11,45,0)
(22,18,0)
(36,41,0)
(31,49,0)
(18,42,0)
(6,51,0)
(4,30,0)
(2,41,0)
(7,46,0)
(20,49,0)
(45,49,0)
(20,34,0)
(32,54,0)
(38,25,0)
(30,18,0)
(50,34,0)
(21,49,0)
(28,20,0)
(58,20,0)
(14,8,0)
(24,54,0)
(45,11,0)
(10,45,0)
(46,42,0)
(3,55,0)
(41,2,0)
(39,55,0)
(43,29,1)
(8,17,1)
(24,1,1)
(8,46,1)
(41,36,1)
(47,10,1)
(29,60,1)
(36,48,1)
(3,14,1)
(54,32,1)
(23,51,1)
(7,45,1)
(22,30,1)
(28,45,1)
(9,59,1)
(52,2,1)
(60,45,1)
(45,11,1)
(58,9,1)
(38,25,1)
(53,55,1)
(17,39,1)
(6,25,1)
(30,55,1)
(11,47,1)
(32,24,1)
(60,12,1)
(14,8,1)
(24,55,1)
(33,53,1)
(25,58,1)
(39,46,1)
(52,48,1)
(30,16,1)
(4,54,1)
(51,6,1)
(37,31,1)
(55,3,1)
(31,0,1)
(16,4,1)
(38,23,1)
(12,18,1)
(51,25,1)
(20,34,1)
(56,20,1)
(3,5,1)
(43,55,1)
(34,50,1)
(26,38,1)
(2,41,1)
(59,43,1)
(48,55,1)
(48,33,1)
(1,52,1)
(13,37,1)
(50,28,1)
(0,56,1)
(58,20,1)
(7,13,1)
(18,22,1)
(46,7,1)
(3,5,2)
(48,55,2)
(38,25,2)
(25,58,2)
(3,14,2)
(20,34,2)
(2,41,2)
(58,20,2)
(24,55,2)
(41,48,2)
(30,55,2)
(2,48,2)
(51,25,2)
(8,46,2)
(46,7,2)
(55,3,2)
(43,55,2)
(45,11,2)
(14,8,2)
(60,45,2)
(7,45,2)
(36,48,2)
-----------------------------------
(0,NULL)
(1,intOne)
(2,exit(-1)
(3,(twoIntsStruct *)
(4,data)
(5,twoIntsStruct *)
(6,data)
(7,*dataPtr1)
(8,sizeof(data)
(9,dataPtr2)
(10,dataPtr1)
(11,&data)
(12,dataPtr1)
(13,dataPtr1)
(14,malloc(sizeof(data)
(15,data)
(16,intTwo)
(17,data)
(18,data->intTwo = 2)
(19,if (data == NULL)
(20,* *dataPtr2 = &data)
(21,dataPtr2)
(22,2)
(23,data)
(24,data->intOne)
(25,* data = *dataPtr2)
(26,RET)
(27,)
(28,dataPtr2)
(29,data)
(30,data->intTwo)
(31,data = NULL)
(32,1)
(33,NULL)
(34,&data)
(35,)
(36,1)
(37,data)
(38,free(data)
(39,data)
(40,data)
(41,-1)
(42,)
(43,*dataPtr1 = data)
(44,dataPtr1)
(45,* *dataPtr1 = &data)
(46,* data = *dataPtr1)
(47,data)
(48,data == NULL)
(49,)
(50,data)
(51,printStructLine(data)
(52,data)
(53,data)
(54,data->intOne = 1)
(55,data = (twoIntsStruct *)
(56,data)
(57,data)
(58,*dataPtr2)
(59,data)
(60,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^