-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_03_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,14,0)
(5,27,0)
(6,7,0)
(14,0,0)
(22,24,0)
(29,3,0)
(11,20,0)
(25,22,0)
(16,14,0)
(13,14,0)
(8,0,0)
(22,4,0)
(9,29,0)
(18,0,0)
(21,1,0)
(23,4,0)
(12,27,0)
(20,29,0)
(9,20,0)
(7,29,0)
(10,22,0)
(15,29,0)
(2,1,0)
(17,0,0)
(26,20,0)
(4,22,0)
(4,14,0)
(20,14,0)
(19,9,0)
(28,9,1)
(19,20,1)
(6,27,1)
(2,14,1)
(12,5,1)
(22,4,1)
(10,1,1)
(1,21,1)
(21,2,1)
(20,11,1)
(25,10,1)
(9,20,1)
(23,25,1)
(26,7,1)
(20,14,1)
(27,12,1)
(4,23,1)
(11,26,1)
(28,27,1)
(4,14,1)
(9,19,1)
(7,6,1)
(14,13,1)
(13,16,1)
(5,22,1)
(5,1,1)
(7,14,1)
(11,27,2)
(7,14,2)
(4,1,2)
(26,27,2)
(9,27,2)
(6,27,2)
(4,14,2)
(22,4,2)
(19,27,2)
(10,1,2)
(23,1,2)
(9,20,2)
(25,1,2)
(20,14,2)
(20,27,2)
(22,1,2)
(7,27,2)
-----------------------------------
(0,)
(1,5==5)
(2,5)
(3,)
(4,&data)
(5,5)
(6,data)
(7,++data)
(8,if(5==5)
(9,printHexCharLine(result)
(10,stdin)
(11,data)
(12,5)
(13,\\\' \\\')
(14,data = \\\' \\\')
(15,result)
(16,data)
(17,data)
(18,if(5==5)
(19,result)
(20,result = data)
(21,5)
(22,fscanf (stdin, "%c", &data)
(23,data)
(24,)
(25,"%c")
(26,result)
(27,5==5)
(28,RET)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^