-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_68_badData = data;
    CWE78_OS_Command_Injection__char_console_execl_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_68_badData = data;    CWE78_OS_Command_Injection__char_console_execl_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_execl_68_bad()
CWE78_OS_Command_Injection__char_console_execl_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_68_badData = data;    CWE78_OS_Command_Injection__char_console_execl_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_68_badData = data;
CWE78_OS_Command_Injection__char_console_execl_68_badData = data
CWE78_OS_Command_Injection__char_console_execl_68_badData
CWE78_OS_Command_Injection__char_console_execl_68_badData
data
data
CWE78_OS_Command_Injection__char_console_execl_68b_badSink();
CWE78_OS_Command_Injection__char_console_execl_68b_badSink()
CWE78_OS_Command_Injection__char_console_execl_68b_badSink
CWE78_OS_Command_Injection__char_console_execl_68b_badSink
-----joern-----
(32,27,0)
(70,32,0)
(60,46,0)
(28,46,0)
(38,49,0)
(19,46,0)
(36,18,0)
(7,43,0)
(31,34,0)
(27,53,0)
(37,22,0)
(64,53,0)
(22,56,0)
(34,31,0)
(55,19,0)
(46,72,0)
(53,27,0)
(10,72,0)
(29,46,0)
(55,21,0)
(69,34,0)
(13,69,0)
(22,46,0)
(28,65,0)
(38,46,0)
(4,69,0)
(67,41,0)
(54,31,0)
(6,46,0)
(18,60,0)
(33,53,0)
(43,41,0)
(57,58,0)
(17,65,0)
(69,55,0)
(40,2,0)
(15,33,0)
(3,27,0)
(59,35,0)
(58,56,0)
(61,28,0)
(19,55,0)
(30,27,0)
(27,3,0)
(18,55,0)
(24,38,0)
(28,68,0)
(66,56,0)
(33,49,0)
(20,49,0)
(35,2,0)
(31,60,0)
(49,58,0)
(27,32,0)
(26,40,0)
(60,31,0)
(65,55,0)
(32,46,0)
(11,18,0)
(45,59,0)
(60,18,0)
(46,56,0)
(9,33,0)
(39,59,0)
(12,25,0)
(32,49,0)
(47,56,0)
(59,46,0)
(62,22,0)
(65,28,0)
(14,21,0)
(71,68,0)
(52,58,0)
(53,64,0)
(50,60,0)
(53,33,0)
(49,38,0)
(8,41,0)
(41,49,0)
(44,19,0)
(16,56,0)
(41,43,0)
(68,23,0)
(72,56,0)
(63,55,0)
(34,69,0)
(1,72,0)
(59,49,0)
(0,32,0)
(51,65,0)
(42,35,0)
(5,3,0)
(65,55,1)
(59,49,1)
(33,9,1)
(69,13,1)
(60,18,1)
(3,5,1)
(31,60,1)
(40,26,1)
(71,28,1)
(38,24,1)
(27,53,1)
(34,31,1)
(11,50,1)
(37,68,1)
(45,40,1)
(18,55,1)
(5,27,1)
(29,6,1)
(0,70,1)
(50,69,1)
(17,61,1)
(22,46,1)
(51,17,1)
(30,53,1)
(37,34,1)
(69,55,1)
(19,46,1)
(27,32,1)
(65,51,1)
(32,46,1)
(53,33,1)
(59,46,1)
(72,1,1)
(63,3,1)
(37,35,1)
(54,60,1)
(42,59,1)
(27,30,1)
(15,32,1)
(3,27,1)
(38,46,1)
(60,46,1)
(9,15,1)
(13,4,1)
(4,55,1)
(28,65,1)
(22,62,1)
(49,38,1)
(46,72,1)
(55,19,1)
(32,0,1)
(24,20,1)
(28,46,1)
(37,43,1)
(6,72,1)
(8,67,1)
(18,36,1)
(62,37,1)
(68,71,1)
(46,29,1)
(1,10,1)
(35,42,1)
(44,63,1)
(43,7,1)
(39,45,1)
(61,34,1)
(41,8,1)
(48,47,1)
(19,44,1)
(43,41,1)
(36,11,1)
(41,49,1)
(53,64,1)
(47,22,1)
(7,41,1)
(32,49,1)
(31,54,1)
(26,3,1)
(70,43,1)
(34,69,1)
(67,49,1)
(20,46,1)
(59,39,1)
(33,49,1)
(9,43,2)
(51,34,2)
(61,34,2)
(46,72,2)
(19,46,2)
(45,3,2)
(28,46,2)
(5,43,2)
(39,3,2)
(11,69,2)
(43,41,2)
(32,46,2)
(30,43,2)
(3,43,2)
(59,46,2)
(60,46,2)
(71,34,2)
(31,60,2)
(0,43,2)
(26,3,2)
(59,3,2)
(68,34,2)
(27,53,2)
(18,69,2)
(35,3,2)
(40,3,2)
(36,69,2)
(53,33,2)
(63,3,2)
(55,3,2)
(44,3,2)
(69,55,2)
(41,49,2)
(27,32,2)
(17,34,2)
(4,3,2)
(3,27,2)
(59,49,2)
(33,43,2)
(50,69,2)
(19,3,2)
(55,19,2)
(32,43,2)
(18,55,2)
(34,69,2)
(65,55,2)
(33,49,2)
(53,64,2)
(31,69,2)
(49,38,2)
(28,65,2)
(34,31,2)
(69,3,2)
(65,34,2)
(34,3,2)
(42,3,2)
(32,49,2)
(60,18,2)
(38,46,2)
(27,43,2)
(22,46,2)
(53,43,2)
(70,43,2)
(13,3,2)
(54,69,2)
(15,43,2)
(60,69,2)
(28,34,2)
-----------------------------------
(0,dataLen)
(1,COMMAND_ARG2)
(2,)
(3,fgets(data+dataLen, (int)
(4,dataLen)
(5,NULL)
(6,data)
(7,1)
(8,dataLen)
(9,dataLen)
(10,dataBuffer)
(11,dataLen)
(12,if (fgets(data+dataLen, (int)
(13,0)
(14,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(15,100)
(16,dataBuffer)
(17,dataLen)
(18,dataLen-1)
(19,strlen(data)
(20,dataLen)
(21,)
(22,CWE78_OS_Command_Injection__char_console_execl_68_badData = data)
(23,)
(24,data)
(25,)
(26,"fgets()
(27,fgets(data+dataLen, (int)
(28,data[dataLen-1])
(29,dataBuffer)
(30,stdin)
(31,data[dataLen-1] == \\\'\\\\n\\\')
(32,data+dataLen)
(33,100-dataLen)
(34,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(35,data[dataLen] = \\\'\\\\0\\\')
(36,1)
(37,CWE78_OS_Command_Injection__char_console_execl_68_badData)
(38,strlen(data)
(39,dataLen)
(40,printLine("fgets()
(41,100-dataLen)
(42,\\\'\\\\0\\\')
(43,100-dataLen > 1)
(44,data)
(45,data)
(46,data = dataBuffer)
(47,CWE78_OS_Command_Injection__char_console_execl_68b_badSink()
(48,RET)
(49,dataLen = strlen(data)
(50,data)
(51,1)
(52,if (100-dataLen > 1)
(53,(int)
(54,\\\'\\\\n\\\')
(55,dataLen = strlen(data)
(56,)
(57,dataLen)
(58,)
(59,data[dataLen])
(60,data[dataLen-1])
(61,data)
(62,data)
(63,dataLen)
(64,int)
(65,dataLen-1)
(66,data)
(67,100)
(68,data[dataLen-1] = \\\'\\\\0\\\')
(69,dataLen > 0)
(70,data)
(71,\\\'\\\\0\\\')
(72,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^