-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memcpy(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
globalFive==5
globalFive
globalFive
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memcpy(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memcpy(data, source, 100*sizeof(char));
memcpy(data, source, 100*sizeof(char))
memcpy
memcpy
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(38,62,0)
(29,62,0)
(57,12,0)
(14,58,0)
(17,27,0)
(0,58,0)
(65,62,0)
(68,41,0)
(9,19,0)
(8,0,0)
(10,27,0)
(44,29,0)
(65,13,0)
(27,58,0)
(36,52,0)
(50,56,0)
(11,39,0)
(38,58,0)
(4,66,0)
(46,25,0)
(33,25,0)
(54,12,0)
(20,29,0)
(7,6,0)
(10,36,0)
(10,41,0)
(19,58,0)
(61,62,0)
(26,36,0)
(43,56,0)
(10,62,0)
(64,52,0)
(0,36,0)
(39,58,0)
(37,51,0)
(30,11,0)
(65,28,0)
(0,62,0)
(31,39,0)
(38,36,0)
(2,19,0)
(42,52,0)
(59,26,0)
(48,61,0)
(49,36,0)
(51,66,0)
(45,36,0)
(56,50,0)
(25,46,0)
(55,61,0)
(62,6,0)
(28,66,0)
(56,26,0)
(47,19,0)
(13,65,0)
(3,22,0)
(11,12,0)
(1,2,0)
(66,51,0)
(26,62,0)
(5,18,0)
(26,56,0)
(58,52,0)
(24,2,0)
(46,60,0)
(28,65,0)
(34,22,0)
(32,38,0)
(12,11,0)
(23,62,0)
(41,10,0)
(62,65,0)
(66,28,0)
(61,18,0)
(18,6,0)
(19,2,0)
(35,10,0)
(63,26,0)
(26,58,0)
(67,41,0)
(53,50,0)
(26,62,1)
(59,39,1)
(9,18,1)
(28,66,1)
(12,57,1)
(26,36,1)
(38,32,1)
(55,46,1)
(46,25,1)
(29,62,1)
(34,36,1)
(5,61,1)
(57,54,1)
(36,45,1)
(65,28,1)
(35,26,1)
(54,30,1)
(65,13,1)
(17,10,1)
(26,56,1)
(32,27,1)
(61,62,1)
(22,3,1)
(11,12,1)
(51,37,1)
(55,29,1)
(66,51,1)
(27,17,1)
(16,0,1)
(33,29,1)
(56,50,1)
(10,62,1)
(61,48,1)
(63,59,1)
(50,53,1)
(10,36,1)
(9,22,1)
(0,62,1)
(1,47,1)
(18,5,1)
(39,31,1)
(48,55,1)
(2,24,1)
(3,34,1)
(41,67,1)
(23,22,1)
(68,35,1)
(25,33,1)
(20,62,1)
(44,20,1)
(24,1,1)
(38,36,1)
(31,11,1)
(29,44,1)
(45,49,1)
(37,4,1)
(67,68,1)
(38,62,1)
(53,43,1)
(47,9,1)
(30,19,1)
(10,41,1)
(8,38,1)
(43,63,1)
(62,65,1)
(4,23,1)
(19,2,1)
(0,36,1)
(0,8,1)
(26,56,2)
(62,65,2)
(56,50,2)
(0,36,2)
(28,66,2)
(18,22,2)
(5,22,2)
(61,62,2)
(38,62,2)
(65,13,2)
(19,2,2)
(38,36,2)
(29,62,2)
(33,29,2)
(20,22,2)
(62,22,2)
(51,22,2)
(66,22,2)
(26,62,2)
(0,62,2)
(46,25,2)
(61,22,2)
(10,62,2)
(26,36,2)
(37,22,2)
(23,22,2)
(48,22,2)
(10,41,2)
(65,28,2)
(28,22,2)
(10,36,2)
(44,22,2)
(46,29,2)
(66,51,2)
(65,22,2)
(55,22,2)
(11,12,2)
(29,22,2)
(4,22,2)
(25,29,2)
-----------------------------------
(0,free(data)
(1,100)
(2,100-1)
(3,5)
(4,50)
(5,\'\\\\0\')
(6,)
(7,if (data == NULL)
(8,data)
(9,source)
(10,data[100-1])
(11,source[100-1])
(12,100-1)
(13,char *)
(14,source)
(15,'\\\\0')
(16,RET)
(17,'\\\\0')
(18,data[0] = \'\\\\0\')
(19,memset(source, \'C\', 100-1)
(20,data)
(21,data[0] = '\\\\0')
(22,globalFive==5)
(23,data)
(24,1)
(25,-1)
(26,memcpy(data, source, 100*sizeof(char)
(27,data[100-1] = '\\\\0')
(28,malloc(50*sizeof(char)
(29,data == NULL)
(30,source)
(31,'\\\\0')
(32,data)
(33,1)
(34,globalFive)
(35,data)
(36,data = NULL)
(37,char)
(38,printLine(data)
(39,source[100-1] = '\\\\0')
(40,memset(source, 'C', 100-1)
(41,100-1)
(42,data)
(43,100)
(44,NULL)
(45,NULL)
(46,exit(-1)
(47,'C')
(48,0)
(49,data)
(50,sizeof(char)
(51,sizeof(char)
(52,)
(53,char)
(54,100)
(55,data)
(56,100*sizeof(char)
(57,1)
(58,)
(59,data)
(60,)
(61,data[0])
(62,data = (char *)
(63,source)
(64,if(globalFive==5)
(65,(char *)
(66,50*sizeof(char)
(67,1)
(68,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^