-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_31_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* execvp - searches for the location of the command among
             * the directories specified by the PATH environment variable */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            EXECVP(COMMAND_INT, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
61,64
61,65
62,63
64,65
64,66
65,66
67,68
69,70
71,72
71,73
72,73
72,74
74,75
77,78
77,79
77,80
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
87,88
88,89
88,90
90,91
90,92
90,93
93,94
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
100,104
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
115,118
116,117
118,119
120,121
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,43,45,46,50,52,56,58,63,66,68,70,73,75,76,80,82,83,86,89,91,92,95,99,101,102,103,107,109,111,113,117,119,121
-----computeFrom-----
23,24
23,25
54,55
54,56
64,65
64,66
71,72
71,73
72,73
72,74
-----guardedBy-----
56,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_31_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execvp_31_bad()
CWE78_OS_Command_Injection__char_environment_w32_execvp_31_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execvp - searches for the location of the command among             * the directories specified by the PATH environment variable */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECVP(COMMAND_INT, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(47,50,0)
(0,50,0)
(7,18,0)
(44,3,0)
(27,19,0)
(1,19,0)
(3,4,0)
(38,7,0)
(9,34,0)
(2,4,0)
(16,35,0)
(12,34,0)
(8,43,0)
(20,31,0)
(18,7,0)
(23,38,0)
(32,30,0)
(10,45,0)
(4,34,0)
(38,35,0)
(30,18,0)
(45,43,0)
(35,13,0)
(18,30,0)
(50,9,0)
(36,4,0)
(49,5,0)
(46,6,0)
(31,20,0)
(5,9,0)
(51,6,0)
(40,30,0)
(22,35,0)
(31,35,0)
(7,43,0)
(25,3,0)
(4,35,0)
(33,7,0)
(15,6,0)
(37,9,0)
(7,11,0)
(30,20,0)
(42,17,0)
(26,20,0)
(43,6,0)
(34,13,0)
(43,17,0)
(20,6,0)
(29,13,0)
(3,34,0)
(39,31,0)
(24,13,0)
(38,20,0)
(6,13,0)
(14,18,0)
(28,34,0)
(19,13,0)
(17,43,0)
(35,19,0)
(50,5,0)
(21,38,0)
(41,45,0)
(7,38,0)
(2,7,1)
(23,21,1)
(32,40,1)
(45,41,1)
(41,10,1)
(2,45,1)
(40,14,1)
(17,42,1)
(26,35,1)
(22,19,1)
(50,0,1)
(25,4,1)
(50,5,1)
(38,23,1)
(45,43,1)
(14,33,1)
(4,36,1)
(31,39,1)
(39,26,1)
(43,17,1)
(38,20,1)
(20,31,1)
(33,38,1)
(38,35,1)
(7,18,1)
(30,20,1)
(48,50,1)
(30,32,1)
(3,44,1)
(16,22,1)
(18,30,1)
(10,43,1)
(42,8,1)
(5,49,1)
(7,38,1)
(36,2,1)
(35,19,1)
(49,3,1)
(7,43,1)
(19,1,1)
(0,47,1)
(21,45,1)
(4,35,1)
(44,25,1)
(35,16,1)
(3,4,1)
(8,20,1)
(1,27,1)
(31,35,1)
(47,5,1)
(7,43,2)
(3,4,2)
(18,45,2)
(14,45,2)
(23,45,2)
(30,20,2)
(45,43,2)
(7,18,2)
(20,31,2)
(38,35,2)
(21,45,2)
(40,45,2)
(43,17,2)
(33,45,2)
(35,19,2)
(4,35,2)
(50,5,2)
(31,35,2)
(38,20,2)
(30,45,2)
(32,45,2)
(7,45,2)
(7,38,2)
(38,45,2)
(18,30,2)
-----------------------------------
(0,args)
(1,COMMAND_ARG2)
(2,dataCopy)
(3,* data = dataCopy)
(4,* dataCopy = data)
(5,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(6,)
(7,strncat(data+dataLen, environment, 100-dataLen-1)
(8,environment)
(9,)
(10,environment)
(11,)
(12,data)
(13,)
(14,100)
(15,environment)
(16,dataBuffer)
(17,GETENV(ENV_VARIABLE)
(18,100-dataLen-1)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,dataLen = strlen(data)
(21,data)
(22,data)
(23,dataLen)
(24,data)
(25,data)
(26,dataLen)
(27,dataBuffer)
(28,dataCopy)
(29,dataBuffer)
(30,dataLen-1)
(31,strlen(data)
(32,1)
(33,environment)
(34,)
(35,data = dataBuffer)
(36,data)
(37,args)
(38,data+dataLen)
(39,data)
(40,dataLen)
(41,NULL)
(42,ENV_VARIABLE)
(43,* environment = GETENV(ENV_VARIABLE)
(44,dataCopy)
(45,environment != NULL)
(46,if (environment != NULL)
(47,COMMAND_INT)
(48,RET)
(49,args)
(50,EXECVP(COMMAND_INT, args)
(51,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^