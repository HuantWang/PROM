-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    switch(6)
    {
    case 6:
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/
        strncat(dest, data, strlen(data));
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
45,46
45,47
45,48
45,49
45,50
45,51
45,52
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
55,56
55,57
58,59
59,60
59,61
60,61
60,62
61,62
63,64
63,65
69,70
70,71
70,72
71,72
75,76
75,77
75,78
75,79
75,80
76,77
77,78
77,79
79,80
79,81
79,82
81,82
83,84
85,86
86,87
86,88
86,89
86,90
87,88
89,90
91,92
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,44,47,51,53,54,56,57,62,64,65,66,67,68,72,73,74,78,80,82,84,88,90,92,95,97,102,104,105,106,110,112,116,118
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
55,56
55,57
59,60
59,61
63,64
63,65
99,100
99,101
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
switch(6)    {    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/        strncat(dest, data, strlen(data));        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
strncat(dest, data, strlen(data));
strncat(dest, data, strlen(data))
strncat
strncat
dest
dest
data
data
strlen(data)
strlen
strlen
data
data
dest[50-1] = '\0';
dest[50-1] = '\0'
dest[50-1]
dest
dest
50-1
50
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,53,0)
(41,1,0)
(31,44,0)
(35,13,0)
(48,13,0)
(40,10,0)
(0,7,0)
(7,40,0)
(32,49,0)
(46,11,0)
(58,34,0)
(17,23,0)
(3,8,0)
(7,0,0)
(60,58,0)
(8,27,0)
(4,52,0)
(37,27,0)
(62,27,0)
(33,52,0)
(37,40,0)
(55,9,0)
(24,9,0)
(51,44,0)
(25,7,0)
(11,40,0)
(47,55,0)
(39,40,0)
(30,27,0)
(7,25,0)
(56,11,0)
(53,40,0)
(27,10,0)
(8,23,0)
(53,27,0)
(48,19,0)
(14,29,0)
(8,13,0)
(13,27,0)
(2,10,0)
(42,49,0)
(55,52,0)
(29,52,0)
(36,62,0)
(22,19,0)
(40,7,0)
(44,41,0)
(20,13,0)
(61,55,0)
(23,40,0)
(50,42,0)
(57,1,0)
(9,55,0)
(42,25,0)
(28,52,0)
(1,52,0)
(15,41,0)
(34,26,0)
(54,8,0)
(55,40,0)
(21,48,0)
(12,52,0)
(49,42,0)
(6,9,0)
(19,48,0)
(41,40,0)
(16,10,0)
(38,37,0)
(23,8,0)
(8,40,0)
(59,19,0)
(34,58,0)
(25,42,0)
(48,62,0)
(41,44,0)
(45,10,0)
(11,46,1)
(15,55,1)
(20,4,1)
(36,48,1)
(21,8,1)
(9,6,1)
(42,49,1)
(20,28,1)
(50,39,1)
(13,35,1)
(23,40,1)
(59,21,1)
(29,14,1)
(22,59,1)
(32,50,1)
(41,40,1)
(14,43,1)
(23,17,1)
(5,53,1)
(35,20,1)
(31,15,1)
(53,40,1)
(34,58,1)
(7,0,1)
(55,9,1)
(18,37,1)
(11,40,1)
(37,40,1)
(24,47,1)
(46,56,1)
(61,43,1)
(8,40,1)
(60,11,1)
(47,61,1)
(53,18,1)
(25,42,1)
(58,60,1)
(4,1,1)
(38,62,1)
(41,44,1)
(8,23,1)
(48,19,1)
(37,38,1)
(1,57,1)
(48,13,1)
(44,51,1)
(40,7,1)
(7,25,1)
(19,22,1)
(17,54,1)
(6,24,1)
(28,29,1)
(55,40,1)
(49,32,1)
(51,31,1)
(56,40,1)
(57,41,1)
(43,34,1)
(3,13,1)
(54,3,1)
(43,11,1)
(8,13,1)
(62,36,1)
(23,40,2)
(8,23,2)
(6,43,2)
(55,9,2)
(1,43,2)
(34,58,2)
(44,43,2)
(53,40,2)
(14,43,2)
(24,43,2)
(42,49,2)
(41,43,2)
(7,25,2)
(48,13,2)
(8,40,2)
(48,19,2)
(11,40,2)
(51,43,2)
(15,43,2)
(34,11,2)
(58,11,2)
(4,43,2)
(8,13,2)
(41,44,2)
(55,40,2)
(29,43,2)
(9,43,2)
(25,42,2)
(60,11,2)
(55,43,2)
(47,43,2)
(28,43,2)
(37,40,2)
(57,43,2)
(40,7,2)
(31,43,2)
(7,0,2)
(41,40,2)
(61,43,2)
-----------------------------------
(0,char *)
(1,data[100-1] = \\\'\\\\0\\\')
(2,switch(6)
(3,dest)
(4,break;)
(5,RET)
(6,1)
(7,(char *)
(8,strncat(dest, data, strlen(data)
(9,100-1)
(10,)
(11,data == NULL)
(12,default:)
(13,dest[50] = "")
(14,"Benign, fixed string")
(15,data)
(16,data)
(17,data)
(18,data)
(19,50-1)
(20,dest)
(21,dest)
(22,1)
(23,strlen(data)
(24,100)
(25,malloc(100*sizeof(char)
(26,)
(27,)
(28,break;)
(29,printLine("Benign, fixed string")
(30,dest)
(31,100)
(32,char)
(33,case 6:)
(34,exit(-1)
(35,"")
(36,\\\'\\\\0\\\')
(37,printLine(data)
(38,data)
(39,data)
(40,data = (char *)
(41,data[100-1])
(42,100*sizeof(char)
(43,6)
(44,100-1)
(45,if (data == NULL)
(46,NULL)
(47,\\\'A\\\')
(48,dest[50-1])
(49,sizeof(char)
(50,100)
(51,1)
(52,)
(53,free(data)
(54,data)
(55,memset(data, \\\'A\\\', 100-1)
(56,data)
(57,\\\'\\\\0\\\')
(58,-1)
(59,50)
(60,1)
(61,data)
(62,dest[50-1] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^