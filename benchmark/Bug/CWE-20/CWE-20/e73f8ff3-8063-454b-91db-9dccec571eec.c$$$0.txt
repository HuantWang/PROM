-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad()
{
    int i;
    int * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
68,72
69,70
70,71
70,72
72,73
72,74
72,75
74,75
76,77
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
87,89
89,90
90,91
90,92
93,94
94,95
94,96
95,96
97,98
97,99
98,99
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,13,15,16,20,22,27,28,31,32,35,40,43,45,48,50,53,54,58,60,65,67,71,73,75,78,82,84,86,88,91,92,96,99,100,104,106
-----computeFrom-----
18,19
18,20
25,26
25,27
29,30
29,31
38,39
38,40
49,50
49,51
56,57
56,58
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad(){    int i;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad
{    int i;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
int i;
int i;
int
i
i
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(32,43,0)
(45,33,0)
(18,43,0)
(7,17,0)
(2,19,0)
(32,24,0)
(48,41,0)
(32,33,0)
(14,16,0)
(3,27,0)
(17,50,0)
(38,37,0)
(25,32,0)
(34,24,0)
(49,43,0)
(13,9,0)
(32,2,0)
(10,16,0)
(6,44,0)
(15,49,0)
(9,13,0)
(33,41,0)
(29,41,0)
(43,9,0)
(4,32,0)
(35,37,0)
(30,50,0)
(28,44,0)
(11,20,0)
(18,24,0)
(20,33,0)
(42,37,0)
(9,43,0)
(5,35,0)
(21,18,0)
(31,49,0)
(49,24,0)
(37,38,0)
(36,24,0)
(47,26,0)
(49,31,0)
(40,43,0)
(26,43,0)
(31,33,0)
(19,2,0)
(1,50,0)
(24,41,0)
(18,33,0)
(12,19,0)
(44,28,0)
(43,27,0)
(16,50,0)
(32,20,0)
(0,2,0)
(46,49,0)
(2,32,0)
(8,26,0)
(38,9,0)
(37,35,0)
(9,38,0)
(22,41,0)
(28,23,0)
(1,24,1)
(44,6,1)
(14,50,1)
(18,43,1)
(32,2,1)
(16,50,1)
(37,35,1)
(14,17,1)
(47,8,1)
(12,0,1)
(50,30,1)
(28,44,1)
(0,4,1)
(19,12,1)
(25,20,1)
(30,1,1)
(35,5,1)
(7,26,1)
(17,7,1)
(49,24,1)
(16,10,1)
(39,18,1)
(7,28,1)
(4,25,1)
(24,34,1)
(43,9,1)
(20,11,1)
(26,43,1)
(32,43,1)
(8,43,1)
(34,36,1)
(18,21,1)
(10,14,1)
(40,16,1)
(38,37,1)
(42,40,1)
(18,24,1)
(46,15,1)
(5,42,1)
(17,50,1)
(21,31,1)
(15,32,1)
(6,26,1)
(49,46,1)
(11,16,1)
(49,43,1)
(32,24,1)
(32,20,1)
(2,19,1)
(9,38,1)
(26,47,1)
(9,13,1)
(31,49,1)
(43,16,2)
(6,26,2)
(18,43,2)
(32,2,2)
(49,43,2)
(18,24,2)
(26,16,2)
(37,35,2)
(43,9,2)
(26,43,2)
(28,26,2)
(42,16,2)
(38,16,2)
(44,26,2)
(16,16,2)
(14,16,2)
(17,16,2)
(40,16,2)
(16,50,2)
(28,44,2)
(49,24,2)
(47,16,2)
(9,16,2)
(17,50,2)
(2,19,2)
(31,49,2)
(38,37,2)
(7,16,2)
(10,16,2)
(5,16,2)
(32,20,2)
(9,38,2)
(32,43,2)
(9,13,2)
(32,24,2)
(35,16,2)
(37,16,2)
(8,16,2)
-----------------------------------
(0,100)
(1,i)
(2,100*sizeof(int)
(3,if (data == NULL)
(4,source)
(5,int)
(6,1)
(7,i)
(8,data)
(9,(int *)
(10,1)
(11,source)
(12,int)
(13,int *)
(14,i)
(15,data)
(16,i < 1)
(17,i++)
(18,free(data)
(19,sizeof(int)
(20,source[100] = {0})
(21,data)
(22,for(i = 0; i < 1; i++)
(23,)
(24,data = NULL)
(25,data)
(26,data == NULL)
(27,)
(28,exit(-1)
(29,data)
(30,0)
(31,printIntLine(data[0])
(32,memmove(data, source, 100*sizeof(int)
(33,)
(34,NULL)
(35,sizeof(int)
(36,data)
(37,50*sizeof(int)
(38,malloc(50*sizeof(int)
(39,RET)
(40,data)
(41,)
(42,50)
(43,data = (int *)
(44,-1)
(45,source)
(46,0)
(47,NULL)
(48,i)
(49,data[0])
(50,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^