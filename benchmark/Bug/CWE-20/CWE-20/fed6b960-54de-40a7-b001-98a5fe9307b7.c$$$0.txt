-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad()
{
    int data;
    /* Initialize data */
    data = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        if (buffer == NULL) {exit(-1);}
        /* initialize buffer */
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
         * This code does check to see if the array index is negative */
        if (data >= 0)
        {
            buffer[data] = 1;
            /* Print the array values */
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
45,48
45,49
45,50
45,51
46,47
47,48
47,49
49,50
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
95,96
96,97
98,99
99,100
100,101
100,102
101,102
101,103
102,103
104,105
107,108
107,109
107,110
108,109
108,110
109,110
112,113
112,114
113,114
114,115
114,116
115,116
115,117
116,117
118,119
121,122
121,123
121,124
121,125
122,123
123,124
123,125
124,125
127,128
127,129
128,129
131,132
132,133
134,135
135,136
136,137
136,138
137,138
139,140
139,141
140,141
142,143
144,145
145,146
146,147
146,148
147,148
150,151
151,152
151,153
152,153
154,155
158,159
159,160
159,161
160,161
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,50,53,55,56,60,62,65,67,70,71,75,77,82,84,89,90,93,94,97,103,105,106,110,111,117,119,120,125,126,129,130,133,138,141,143,148,149,153,155,156,157,161,162,163
-----computeFrom-----
12,13
12,14
66,67
66,68
73,74
73,75
87,88
87,89
91,92
91,93
100,101
100,102
108,109
108,110
114,115
114,116
123,124
123,125
127,128
127,129
-----guardedBy-----
110,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad(){    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15_bad
{    int data;    /* Initialize data */    data = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = -1;
data = -1
data
data
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        int i;        int * buffer = (int *)malloc(10 * sizeof(int));        if (buffer == NULL) {exit(-1);}        /* initialize buffer */        for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }        /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound         * This code does check to see if the array index is negative */        if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }        free(buffer);    }
int i;
int i;
int
i
i
int * buffer = (int *)malloc(10 * sizeof(int));
int * buffer = (int *)malloc(10 * sizeof(int));
int
* buffer = (int *)malloc(10 * sizeof(int))
*
buffer
= (int *)malloc(10 * sizeof(int))
(int *)malloc(10 * sizeof(int))
int *
int
*
*
malloc(10 * sizeof(int))
malloc
malloc
10 * sizeof(int)
10
sizeof(int)
int
int

if (buffer == NULL) {exit(-1);}
buffer == NULL
buffer
buffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
for (i = 0; i < 10; i++)        {            buffer[i] = 0;        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            buffer[i] = 0;        }
buffer[i] = 0;
buffer[i] = 0
buffer[i]
buffer
buffer
i
i
0
if (data >= 0)        {            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }        else        {            printLine("ERROR: Array index is negative.");        }
data >= 0
data
data
0
{            buffer[data] = 1;            /* Print the array values */            for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }        }
buffer[data] = 1;
buffer[data] = 1
buffer[data]
buffer
buffer
data
data
1
for(i = 0; i < 10; i++)            {                printIntLine(buffer[i]);            }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{                printIntLine(buffer[i]);            }
printIntLine(buffer[i]);
printIntLine(buffer[i])
printIntLine
printIntLine
buffer[i]
buffer
buffer
i
i
{            printLine("ERROR: Array index is negative.");        }
printLine("ERROR: Array index is negative.");
printLine("ERROR: Array index is negative.")
printLine
printLine
"ERROR: Array index is negative."
free(buffer);
free(buffer)
free
free
buffer
buffer
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(54,38,0)
(93,74,0)
(50,24,0)
(42,51,0)
(74,79,0)
(33,18,0)
(78,44,0)
(38,90,0)
(83,4,0)
(29,6,0)
(21,45,0)
(60,79,0)
(62,30,0)
(41,37,0)
(13,63,0)
(68,29,0)
(86,66,0)
(70,88,0)
(65,75,0)
(26,27,0)
(24,42,0)
(57,34,0)
(25,9,0)
(58,29,0)
(35,13,0)
(44,66,0)
(92,44,0)
(24,74,0)
(49,24,0)
(44,42,0)
(40,87,0)
(72,45,0)
(12,38,0)
(63,9,0)
(39,51,0)
(73,12,0)
(76,37,0)
(48,31,0)
(46,57,0)
(63,13,0)
(77,9,0)
(0,41,0)
(47,52,0)
(8,75,0)
(89,66,0)
(27,30,0)
(34,63,0)
(51,68,0)
(57,30,0)
(18,45,0)
(52,42,0)
(55,52,0)
(14,57,0)
(88,7,0)
(83,12,0)
(15,30,0)
(31,53,0)
(51,42,0)
(24,63,0)
(56,75,0)
(6,29,0)
(32,75,0)
(68,51,0)
(44,38,0)
(65,42,0)
(85,84,0)
(23,45,0)
(82,63,0)
(1,6,0)
(22,66,0)
(43,42,0)
(16,65,0)
(69,30,0)
(42,75,0)
(5,36,0)
(71,89,0)
(61,45,0)
(20,48,0)
(31,48,0)
(28,84,0)
(75,45,0)
(34,57,0)
(51,39,0)
(12,37,0)
(29,68,0)
(3,75,0)
(59,9,0)
(19,37,0)
(80,12,0)
(87,37,0)
(84,63,0)
(12,83,0)
(11,89,0)
(17,41,0)
(36,66,0)
(64,30,0)
(91,75,0)
(67,34,0)
(12,42,0)
(17,87,1)
(13,35,1)
(80,73,1)
(26,81,1)
(65,42,1)
(83,12,1)
(18,33,1)
(12,37,1)
(63,13,1)
(6,1,1)
(52,42,1)
(68,29,1)
(76,74,1)
(5,38,1)
(55,47,1)
(24,42,1)
(84,63,1)
(16,88,1)
(43,2,1)
(14,46,1)
(87,40,1)
(86,22,1)
(21,65,1)
(12,80,1)
(40,83,1)
(31,48,1)
(87,37,1)
(10,61,1)
(46,81,1)
(47,42,1)
(1,58,1)
(41,0,1)
(12,42,1)
(38,54,1)
(48,20,1)
(73,41,1)
(88,70,1)
(36,5,1)
(29,6,1)
(67,14,1)
(54,44,1)
(58,43,1)
(89,11,1)
(50,84,1)
(89,66,1)
(34,63,1)
(61,18,1)
(34,67,1)
(33,2,1)
(85,28,1)
(24,63,1)
(17,37,1)
(74,93,1)
(44,42,1)
(35,82,1)
(41,37,1)
(44,92,1)
(22,52,1)
(10,21,1)
(81,63,1)
(11,71,1)
(44,66,1)
(0,17,1)
(71,66,1)
(27,26,1)
(22,31,1)
(92,78,1)
(16,41,1)
(84,85,1)
(37,19,1)
(78,89,1)
(20,52,1)
(28,89,1)
(71,36,1)
(52,55,1)
(2,62,1)
(57,34,1)
(70,84,1)
(15,57,1)
(24,49,1)
(51,68,1)
(36,66,1)
(19,76,1)
(42,51,1)
(93,24,1)
(51,39,1)
(2,15,1)
(66,86,1)
(62,27,1)
(12,38,1)
(65,16,1)
(49,50,1)
(17,84,2)
(84,2,2)
(57,81,2)
(70,84,2)
(14,81,2)
(65,42,2)
(54,89,2)
(24,63,2)
(57,34,2)
(42,2,2)
(0,41,2)
(27,81,2)
(12,38,2)
(6,2,2)
(67,81,2)
(62,81,2)
(76,84,2)
(80,41,2)
(58,2,2)
(83,41,2)
(44,42,2)
(43,2,2)
(36,89,2)
(51,39,2)
(11,2,2)
(66,2,2)
(89,66,2)
(44,89,2)
(38,89,2)
(34,63,2)
(88,84,2)
(37,84,2)
(84,63,2)
(5,89,2)
(24,42,2)
(41,84,2)
(29,2,2)
(44,66,2)
(71,2,2)
(89,2,2)
(21,2,2)
(1,2,2)
(49,84,2)
(12,41,2)
(41,37,2)
(48,52,2)
(65,2,2)
(11,89,2)
(0,84,2)
(68,2,2)
(55,2,2)
(16,2,2)
(78,89,2)
(31,48,2)
(87,37,2)
(87,41,2)
(26,81,2)
(29,6,2)
(12,42,2)
(89,89,2)
(41,41,2)
(92,89,2)
(46,81,2)
(12,37,2)
(86,2,2)
(22,2,2)
(18,2,2)
(17,41,2)
(52,42,2)
(42,51,2)
(52,2,2)
(68,29,2)
(33,2,2)
(40,41,2)
(93,84,2)
(24,84,2)
(31,52,2)
(71,89,2)
(34,81,2)
(85,2,2)
(36,66,2)
(63,13,2)
(19,84,2)
(50,84,2)
(83,12,2)
(28,2,2)
(73,41,2)
(51,68,2)
(61,2,2)
(47,2,2)
(20,52,2)
(51,2,2)
(74,84,2)
(15,81,2)
-----------------------------------
(0,10)
(1,int)
(2,7)
(3,for (i = 0; i < 10; i++)
(4,)
(5,i)
(6,sizeof(int)
(7,)
(8,if (buffer == NULL)
(9,)
(10,RET)
(11,10)
(12,buffer[i])
(13,-1)
(14,"%d")
(15,break;)
(16,buffer)
(17,i)
(18,printLine("Benign, fixed string")
(19,0)
(20,1)
(21,break;)
(22,i)
(23,default:)
(24,buffer[data])
(25,data)
(26,"Benign, fixed string")
(27,printLine("Benign, fixed string")
(28,data)
(29,10 * sizeof(int)
(30,)
(31,exit(-1)
(32,buffer)
(33,"Benign, fixed string")
(34,&data)
(35,1)
(36,i++)
(37,i = 0)
(38,buffer[i] = 0)
(39,int *)
(40,i)
(41,i < 10)
(42,* buffer = (int *)
(43,buffer)
(44,buffer[i])
(45,)
(46,stdin)
(47,buffer)
(48,-1)
(49,data)
(50,buffer)
(51,(int *)
(52,buffer == NULL)
(53,)
(54,0)
(55,NULL)
(56,if (data >= 0)
(57,fscanf(stdin, "%d", &data)
(58,10)
(59,switch(7)
(60,for(i = 0; i < 10; i++)
(61,break;)
(62,break;)
(63,data = -1)
(64,case 6:)
(65,free(buffer)
(66,i = 0)
(67,data)
(68,malloc(10 * sizeof(int)
(69,default:)
(70,"ERROR: Array index is negative.")
(71,i)
(72,case 7:)
(73,buffer)
(74,buffer[data] = 1)
(75,)
(76,i)
(77,switch(6)
(78,buffer)
(79,)
(80,i)
(81,6)
(82,data)
(83,printIntLine(buffer[i])
(84,data >= 0)
(85,0)
(86,0)
(87,i++)
(88,printLine("ERROR: Array index is negative.")
(89,i < 10)
(90,)
(91,i)
(92,i)
(93,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^