-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
16,20
16,21
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
58,59
58,60
61,62
62,63
62,64
63,64
63,65
64,65
66,67
66,68
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
-----nextToken-----
2,4,5,7,9,10,14,19,21,22,26,28,31,33,36,37,41,43,48,50,54,56,57,59,60,65,67,68,69,73,76,77,80
-----computeFrom-----
32,33
32,34
39,40
39,41
58,59
58,60
62,63
62,64
66,67
66,68
71,72
71,73
74,75
74,76
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }    return data;}
if(badStatic)    {        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
badStatic
badStatic
{        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }    }
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
return data;
data
data
-----joern-----
(34,36,0)
(29,37,0)
(4,15,0)
(18,36,0)
(40,13,0)
(34,15,0)
(34,18,0)
(17,40,0)
(3,6,0)
(21,5,0)
(18,6,0)
(32,22,0)
(28,18,0)
(22,30,0)
(25,13,0)
(8,7,0)
(26,6,0)
(0,30,0)
(0,7,0)
(5,6,0)
(12,8,0)
(13,40,0)
(24,40,0)
(2,38,0)
(7,0,0)
(11,0,0)
(47,30,0)
(44,38,0)
(37,8,0)
(16,5,0)
(46,22,0)
(33,45,0)
(42,34,0)
(27,13,0)
(13,6,0)
(30,0,0)
(35,30,0)
(9,34,0)
(38,44,0)
(6,39,0)
(41,47,0)
(30,6,0)
(45,16,0)
(22,18,0)
(7,8,0)
(16,45,0)
(0,11,0)
(18,22,0)
(19,47,0)
(16,30,0)
(44,1,0)
(14,45,0)
(8,37,0)
(13,30,0)
(10,16,0)
(17,24,1)
(2,47,1)
(35,20,1)
(18,22,1)
(0,11,1)
(16,30,1)
(14,33,1)
(30,0,1)
(22,46,1)
(32,28,1)
(41,30,1)
(34,42,1)
(38,2,1)
(18,36,1)
(9,34,1)
(0,7,1)
(37,29,1)
(33,10,1)
(25,44,1)
(27,25,1)
(34,36,1)
(42,20,1)
(22,30,1)
(45,14,1)
(44,38,1)
(5,21,1)
(8,37,1)
(42,18,1)
(40,17,1)
(21,16,1)
(19,41,1)
(29,12,1)
(28,5,1)
(24,27,1)
(13,40,1)
(12,35,1)
(47,19,1)
(13,30,1)
(25,47,1)
(10,13,1)
(46,32,1)
(34,18,1)
(16,45,1)
(7,8,1)
(47,30,1)
(16,45,2)
(18,36,2)
(38,47,2)
(44,47,2)
(19,20,2)
(28,20,2)
(33,20,2)
(16,20,2)
(5,20,2)
(22,30,2)
(14,20,2)
(9,34,2)
(18,22,2)
(47,20,2)
(17,20,2)
(35,20,2)
(16,30,2)
(2,47,2)
(18,20,2)
(27,20,2)
(41,20,2)
(37,20,2)
(7,20,2)
(44,38,2)
(8,20,2)
(21,20,2)
(10,20,2)
(30,0,2)
(7,8,2)
(13,30,2)
(0,20,2)
(30,20,2)
(34,36,2)
(29,20,2)
(25,20,2)
(40,20,2)
(45,20,2)
(34,18,2)
(0,7,2)
(12,20,2)
(47,30,2)
(0,11,2)
(32,20,2)
(24,20,2)
(22,20,2)
(13,20,2)
(8,37,2)
(13,40,2)
(46,20,2)
-----------------------------------
(0,(char *)
(1,)
(2,1)
(3,if (dataBuffer == NULL)
(4,if(badStatic)
(5,dataBuffer[100-1] = \'\\\\0\')
(6,)
(7,malloc(100*sizeof(char)
(8,100*sizeof(char)
(9,RET)
(10,dataBuffer)
(11,char *)
(12,100)
(13,memset(dataBuffer, \'A\', 100-1)
(14,1)
(15,)
(16,dataBuffer[100-1])
(17,1)
(18,data = dataBuffer - 8)
(19,NULL)
(20,badStatic)
(21,\'\\\\0\')
(22,dataBuffer - 8)
(23,memset(dataBuffer, 'A', 100-1)
(24,100)
(25,dataBuffer)
(26,dataBuffer)
(27,\'A\')
(28,data)
(29,char)
(30,* dataBuffer = (char *)
(31,'\\\\0')
(32,dataBuffer)
(33,100)
(34,return data;)
(35,dataBuffer)
(36,char * data)
(37,sizeof(char)
(38,-1)
(39,)
(40,100-1)
(41,dataBuffer)
(42,data)
(43,'A')
(44,exit(-1)
(45,100-1)
(46,8)
(47,dataBuffer == NULL)
(48,dataBuffer[100-1] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^