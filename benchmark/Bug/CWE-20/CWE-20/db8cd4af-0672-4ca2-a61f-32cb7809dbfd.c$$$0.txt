-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(30,26,0)
(29,36,0)
(2,20,0)
(18,35,0)
(36,14,0)
(3,14,0)
(35,26,0)
(21,9,0)
(31,37,0)
(1,36,0)
(10,9,0)
(32,37,0)
(20,37,0)
(12,26,0)
(24,37,0)
(5,37,0)
(13,2,0)
(34,20,0)
(19,26,0)
(16,17,0)
(25,32,0)
(7,9,0)
(33,2,0)
(23,13,0)
(0,9,0)
(17,20,0)
(6,10,0)
(15,2,0)
(4,9,0)
(14,35,0)
(36,9,0)
(2,35,0)
(11,37,0)
(22,35,0)
(17,35,0)
(13,20,0)
(14,36,0)
(13,2,1)
(1,27,1)
(10,6,1)
(3,29,1)
(21,10,1)
(16,8,1)
(4,36,1)
(15,17,1)
(35,18,1)
(14,35,1)
(17,16,1)
(31,13,1)
(8,21,1)
(33,15,1)
(28,31,1)
(25,8,1)
(2,35,1)
(36,14,1)
(5,32,1)
(17,35,1)
(14,3,1)
(28,5,1)
(2,33,1)
(27,35,1)
(13,23,1)
(29,1,1)
(6,27,1)
(23,2,1)
(32,25,1)
(18,22,1)
(8,4,1)
(3,27,2)
(2,8,2)
(17,35,2)
(10,27,2)
(1,27,2)
(23,8,2)
(31,8,2)
(17,8,2)
(13,2,2)
(36,27,2)
(36,14,2)
(25,8,2)
(15,8,2)
(14,27,2)
(29,27,2)
(14,35,2)
(21,27,2)
(33,8,2)
(2,35,2)
(4,27,2)
(32,8,2)
(16,8,2)
(5,8,2)
(6,27,2)
(13,8,2)
-----------------------------------
(0,case 6:)
(1,stdin)
(2,result = data)
(3,data)
(4,break;)
(5,break;)
(6,"Benign, fixed string")
(7,default:)
(8,7)
(9,)
(10,printLine("Benign, fixed string")
(11,default:)
(12,switch(6)
(13,printIntLine(result)
(14,&data)
(15,result)
(16,data)
(17,++data)
(18,0)
(19,data)
(20,)
(21,break;)
(22,data)
(23,result)
(24,case 7:)
(25,"Benign, fixed string")
(26,)
(27,6)
(28,RET)
(29,"%d")
(30,switch(7)
(31,break;)
(32,printLine("Benign, fixed string")
(33,data)
(34,result)
(35,data = 0)
(36,fscanf(stdin, "%d", &data)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^