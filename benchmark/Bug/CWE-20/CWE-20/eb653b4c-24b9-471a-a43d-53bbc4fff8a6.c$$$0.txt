-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05_bad()
{
    char * data;
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    if(staticTrue)
    {
        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */
        memset(data, 'A', 100-1); /* fill with 'A's */
        data[100-1] = '\0'; /* null terminate */
    }
    {
        char dest[50] = "";
        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */
        SNPRINTF(dest, strlen(data), "%s", data);
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
46,47
46,48
47,48
48,49
48,50
48,51
48,52
49,50
51,52
54,55
54,56
57,58
58,59
58,60
59,60
59,61
60,61
62,63
62,64
66,67
66,68
66,69
66,70
67,68
68,69
68,70
70,71
70,72
70,73
72,73
74,75
76,77
77,78
77,79
77,80
77,81
77,82
78,79
80,81
82,83
82,84
83,84
85,86
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
-----nextToken-----
2,4,8,10,11,15,18,20,23,25,28,29,33,35,40,42,45,50,52,53,55,56,61,63,64,65,69,71,73,75,79,81,84,86,87,89,93,95,99,101
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
54,55
54,56
58,59
58,60
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05_bad(){    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05_bad
{    char * data;    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }    {        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
if(staticTrue)    {        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
staticTrue
staticTrue
{        /* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */        memset(data, 'A', 100-1); /* fill with 'A's */        data[100-1] = '\0'; /* null terminate */    }
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
{        char dest[50] = "";        /* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */        SNPRINTF(dest, strlen(data), "%s", data);        printLine(data);        free(data);    }
char dest[50] = "";
char dest[50] = "";
char
dest[50] = ""
dest
[50]
50
= ""
""
SNPRINTF(dest, strlen(data), "%s", data);
SNPRINTF(dest, strlen(data), "%s", data)
SNPRINTF
SNPRINTF
dest
dest
strlen(data)
strlen
strlen
data
data
"%s"
data
data
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(9,34,0)
(50,33,0)
(20,34,0)
(1,34,0)
(37,25,0)
(4,17,0)
(27,34,0)
(42,28,0)
(38,37,0)
(41,42,0)
(32,44,0)
(17,9,0)
(44,9,0)
(22,34,0)
(36,33,0)
(11,47,0)
(47,9,0)
(2,8,0)
(31,47,0)
(29,9,0)
(35,17,0)
(42,9,0)
(6,46,0)
(15,16,0)
(0,20,0)
(26,17,0)
(48,42,0)
(17,46,0)
(33,50,0)
(43,41,0)
(45,28,0)
(29,20,0)
(17,23,0)
(16,33,0)
(25,45,0)
(33,16,0)
(23,17,0)
(10,42,0)
(44,20,0)
(25,37,0)
(12,45,0)
(15,21,0)
(3,19,0)
(46,20,0)
(3,8,0)
(40,25,0)
(15,9,0)
(42,41,0)
(7,46,0)
(8,3,0)
(18,50,0)
(16,15,0)
(9,15,0)
(25,9,0)
(14,41,0)
(49,37,0)
(23,9,0)
(24,29,0)
(30,9,0)
(21,15,0)
(17,20,0)
(13,23,0)
(33,50,1)
(39,29,1)
(18,36,1)
(26,46,1)
(11,9,1)
(49,40,1)
(23,9,1)
(13,26,1)
(36,30,1)
(17,46,1)
(16,33,1)
(47,31,1)
(12,25,1)
(41,43,1)
(7,5,1)
(50,18,1)
(8,2,1)
(35,23,1)
(42,41,1)
(2,47,1)
(17,4,1)
(15,21,1)
(25,37,1)
(44,32,1)
(32,17,1)
(38,49,1)
(6,7,1)
(23,13,1)
(4,35,1)
(46,6,1)
(17,9,1)
(5,3,1)
(48,10,1)
(40,42,1)
(45,12,1)
(17,23,1)
(14,48,1)
(29,24,1)
(29,9,1)
(25,9,1)
(3,8,1)
(31,11,1)
(42,9,1)
(9,15,1)
(37,38,1)
(24,44,1)
(5,47,1)
(43,14,1)
(44,9,1)
(15,16,1)
(7,45,1)
(10,5,1)
(47,9,1)
(47,9,2)
(37,5,2)
(16,33,2)
(17,46,2)
(25,9,2)
(2,47,2)
(45,5,2)
(15,21,2)
(17,9,2)
(42,9,2)
(10,5,2)
(14,5,2)
(25,5,2)
(12,5,2)
(25,37,2)
(15,16,2)
(42,41,2)
(44,9,2)
(41,5,2)
(9,15,2)
(3,47,2)
(38,5,2)
(48,5,2)
(40,5,2)
(29,9,2)
(8,47,2)
(49,5,2)
(3,8,2)
(23,9,2)
(42,5,2)
(43,5,2)
(17,23,2)
(33,50,2)
-----------------------------------
(0,dest)
(1,if(staticTrue)
(2,1)
(3,exit(-1)
(4,data)
(5,staticTrue)
(6,"")
(7,dest)
(8,-1)
(9,data = (char *)
(10,data)
(11,data)
(12,\\\'\\\\0\\\')
(13,data)
(14,100)
(15,(char *)
(16,malloc(100*sizeof(char)
(17,SNPRINTF(dest, strlen(data)
(18,char)
(19,)
(20,)
(21,char *)
(22,data)
(23,strlen(data)
(24,data)
(25,data[100-1])
(26,dest)
(27,if (data == NULL)
(28,)
(29,free(data)
(30,data)
(31,NULL)
(32,data)
(33,100*sizeof(char)
(34,)
(35,"%s")
(36,100)
(37,100-1)
(38,1)
(39,RET)
(40,data)
(41,100-1)
(42,memset(data, \\\'A\\\', 100-1)
(43,1)
(44,printLine(data)
(45,data[100-1] = \\\'\\\\0\\\')
(46,dest[50] = "")
(47,data == NULL)
(48,\\\'A\\\')
(49,100)
(50,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^