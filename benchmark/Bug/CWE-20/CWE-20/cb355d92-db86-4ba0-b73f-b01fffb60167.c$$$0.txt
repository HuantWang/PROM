-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,73,76,78,81,85,87
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_32_bad()
CWE190_Integer_Overflow__char_max_postinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(36,2,0)
(6,39,0)
(34,0,0)
(30,39,0)
(14,32,0)
(5,3,0)
(32,30,0)
(8,28,0)
(0,32,0)
(21,35,0)
(20,39,0)
(12,41,0)
(4,41,0)
(29,34,0)
(36,19,0)
(35,41,0)
(35,36,0)
(28,36,0)
(4,28,0)
(17,6,0)
(38,31,0)
(6,17,0)
(19,36,0)
(19,6,0)
(1,33,0)
(3,31,0)
(16,2,0)
(24,9,0)
(23,36,0)
(9,31,0)
(31,9,0)
(26,30,0)
(2,39,0)
(34,31,0)
(22,0,0)
(40,6,0)
(7,33,0)
(13,32,0)
(25,3,0)
(27,28,0)
(11,19,0)
(42,39,0)
(43,4,0)
(0,30,0)
(31,39,0)
(3,5,0)
(41,2,0)
(5,30,0)
(28,41,0)
(33,39,0)
(37,17,0)
(15,5,0)
(10,39,0)
(9,24,1)
(7,6,1)
(11,23,1)
(19,11,1)
(0,32,1)
(3,25,1)
(36,19,1)
(4,43,1)
(27,8,1)
(25,15,1)
(15,33,1)
(40,31,1)
(34,29,1)
(4,28,1)
(28,27,1)
(22,34,1)
(14,5,1)
(24,38,1)
(28,36,1)
(13,14,1)
(6,17,1)
(35,36,1)
(21,36,1)
(5,3,1)
(33,1,1)
(19,6,1)
(1,7,1)
(0,22,1)
(32,13,1)
(8,35,1)
(31,9,1)
(23,0,1)
(34,31,1)
(35,21,1)
(29,32,1)
(3,31,1)
(17,37,1)
(18,4,1)
(37,40,1)
(43,28,1)
(3,31,2)
(34,31,2)
(5,3,2)
(36,19,2)
(4,28,2)
(31,9,2)
(6,17,2)
(28,36,2)
(19,6,2)
(0,32,2)
(35,36,2)
-----------------------------------
(0,*dataPtr1 = data)
(1,' ')
(2,)
(3,*dataPtr1)
(4,printHexCharLine(result)
(5,data = *dataPtr1)
(6,*dataPtr2 = &data)
(7,data)
(8,result)
(9,&data)
(10,dataPtr1)
(11,dataPtr2)
(12,result)
(13,CHAR_MAX)
(14,data)
(15,data)
(16,data)
(17,&data)
(18,RET)
(19,*dataPtr2)
(20,dataPtr2)
(21,data)
(22,data)
(23,data)
(24,data)
(25,dataPtr1)
(26,data)
(27,data)
(28,result = data)
(29,dataPtr1)
(30,)
(31,*dataPtr1 = &data)
(32,data = CHAR_MAX)
(33,data = ' ')
(34,*dataPtr1)
(35,data++)
(36,data = *dataPtr2)
(37,data)
(38,dataPtr1)
(39,)
(40,dataPtr2)
(41,)
(42,data)
(43,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^