-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int_06_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,64,65,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int_06_bad(){    int * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int_06_bad()
CWE415_Double_Free__malloc_free_int_06_bad
{    int * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(35,16,0)
(1,23,0)
(2,28,0)
(22,28,0)
(3,23,0)
(9,5,0)
(2,3,0)
(20,19,0)
(36,34,0)
(20,10,0)
(5,12,0)
(19,20,0)
(34,36,0)
(25,2,0)
(4,32,0)
(7,19,0)
(28,27,0)
(6,3,0)
(24,28,0)
(13,0,0)
(28,36,0)
(10,20,0)
(21,0,0)
(14,23,0)
(0,28,0)
(29,20,0)
(31,16,0)
(36,28,0)
(10,36,0)
(8,32,0)
(30,3,0)
(36,10,0)
(12,18,0)
(12,5,0)
(2,15,0)
(17,22,0)
(33,23,0)
(22,27,0)
(11,27,0)
(9,0,1)
(30,6,1)
(22,28,1)
(21,28,1)
(35,22,1)
(4,3,1)
(26,16,1)
(2,3,1)
(5,9,1)
(13,21,1)
(8,4,1)
(35,32,1)
(10,20,1)
(24,32,1)
(26,2,1)
(2,25,1)
(28,36,1)
(12,5,1)
(19,7,1)
(3,30,1)
(25,16,1)
(0,28,1)
(0,13,1)
(36,34,1)
(20,19,1)
(7,29,1)
(17,0,1)
(22,17,1)
(29,24,1)
(2,28,1)
(17,12,1)
(36,10,1)
(16,31,1)
(32,8,1)
(31,35,1)
(12,5,2)
(0,28,2)
(19,32,2)
(13,32,2)
(29,32,2)
(2,3,2)
(25,16,2)
(28,32,2)
(9,0,2)
(36,10,2)
(28,36,2)
(2,16,2)
(24,32,2)
(22,32,2)
(20,19,2)
(17,32,2)
(12,0,2)
(21,32,2)
(5,0,2)
(36,32,2)
(10,20,2)
(10,32,2)
(7,32,2)
(22,28,2)
(20,32,2)
(0,32,2)
(2,28,2)
(36,34,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,free(data)
(3,data = NULL)
(4,STATIC_CONST_FIVE)
(5,-1)
(6,data)
(7,int)
(8,5)
(9,1)
(10,malloc(100*sizeof(int)
(11,if (data == NULL)
(12,exit(-1)
(13,NULL)
(14,if(STATIC_CONST_FIVE==5)
(15,)
(16,STATIC_CONST_FIVE==5)
(17,data)
(18,)
(19,sizeof(int)
(20,100*sizeof(int)
(21,data)
(22,free(data)
(23,)
(24,data)
(25,data)
(26,RET)
(27,)
(28,data = (int *)
(29,100)
(30,NULL)
(31,5)
(32,STATIC_CONST_FIVE==5)
(33,if(STATIC_CONST_FIVE==5)
(34,int *)
(35,STATIC_CONST_FIVE)
(36,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^