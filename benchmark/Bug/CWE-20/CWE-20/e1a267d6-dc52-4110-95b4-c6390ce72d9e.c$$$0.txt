-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_struct_02_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
57,58
57,59
58,59
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
79,81
80,81
82,83
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
92,93
96,97
97,98
97,99
98,99
100,101
102,103
102,104
104,105
105,106
106,107
106,108
107,108
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,61,66,67,70,71,74,81,83,84,85,91,93,94,95,99,101,103,108,112,113
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
64,65
64,66
68,69
68,70
77,78
77,79
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_struct_02_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_struct_02_bad()
CWE416_Use_After_Free__malloc_free_struct_02_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
1
{        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i].intOne = 1;                data[i].intTwo = 2;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i].intOne = 1;                data[i].intTwo = 2;            }
data[i].intOne = 1;
data[i].intOne = 1
data[i].intOne
data[i]
data
data
i
i
intOne
1
data[i].intTwo = 2;
data[i].intTwo = 2
data[i].intTwo
data[i]
data
data
i
i
intTwo
2
free(data);
free(data)
free
free
data
data
if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printStructLine(&data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(60,26,0)
(4,59,0)
(46,3,0)
(49,10,0)
(55,17,0)
(49,58,0)
(41,36,0)
(35,38,0)
(39,31,0)
(31,39,0)
(57,42,0)
(59,5,0)
(46,49,0)
(33,5,0)
(58,49,0)
(23,13,0)
(28,27,0)
(9,27,0)
(18,42,0)
(11,38,0)
(8,47,0)
(10,49,0)
(32,26,0)
(27,55,0)
(31,7,0)
(53,17,0)
(27,5,0)
(43,57,0)
(61,24,0)
(37,15,0)
(26,46,0)
(2,26,0)
(54,55,0)
(26,2,0)
(13,30,0)
(19,30,0)
(55,27,0)
(13,58,0)
(41,2,0)
(42,46,0)
(25,42,0)
(52,45,0)
(15,46,0)
(29,11,0)
(47,5,0)
(49,46,0)
(58,13,0)
(27,46,0)
(26,11,0)
(22,3,0)
(45,3,0)
(42,5,0)
(1,46,0)
(15,3,0)
(6,47,0)
(16,38,0)
(24,14,0)
(57,24,0)
(40,21,0)
(48,11,0)
(2,41,0)
(51,45,0)
(34,5,0)
(0,39,0)
(17,14,0)
(44,38,0)
(12,21,0)
(42,57,0)
(30,13,0)
(21,46,0)
(50,20,1)
(25,47,1)
(26,46,1)
(27,46,1)
(42,5,1)
(31,39,1)
(8,6,1)
(33,34,1)
(56,41,1)
(41,2,1)
(28,9,1)
(50,15,1)
(6,59,1)
(34,31,1)
(59,5,1)
(5,33,1)
(55,54,1)
(60,32,1)
(15,37,1)
(53,55,1)
(27,28,1)
(59,4,1)
(23,1,1)
(13,30,1)
(0,21,1)
(49,58,1)
(6,5,1)
(42,46,1)
(9,24,1)
(26,11,1)
(55,27,1)
(40,12,1)
(49,10,1)
(48,29,1)
(58,13,1)
(37,47,1)
(47,8,1)
(61,57,1)
(57,42,1)
(27,5,1)
(46,49,1)
(54,27,1)
(57,43,1)
(19,23,1)
(11,48,1)
(24,61,1)
(2,26,1)
(32,50,1)
(43,42,1)
(47,5,1)
(15,46,1)
(21,40,1)
(42,18,1)
(56,50,1)
(30,19,1)
(18,25,1)
(1,20,1)
(39,0,1)
(20,11,1)
(34,21,1)
(4,17,1)
(12,46,1)
(17,53,1)
(21,46,1)
(26,60,1)
(30,20,2)
(57,42,2)
(53,47,2)
(27,5,2)
(6,47,2)
(9,47,2)
(57,47,2)
(1,20,2)
(26,46,2)
(4,47,2)
(37,20,2)
(28,47,2)
(17,47,2)
(27,47,2)
(40,20,2)
(21,46,2)
(49,10,2)
(55,27,2)
(13,20,2)
(58,20,2)
(12,20,2)
(46,20,2)
(26,11,2)
(26,50,2)
(41,2,2)
(42,46,2)
(55,47,2)
(13,30,2)
(42,47,2)
(49,20,2)
(24,47,2)
(27,46,2)
(34,20,2)
(47,20,2)
(25,47,2)
(32,50,2)
(8,20,2)
(5,20,2)
(41,50,2)
(2,50,2)
(2,26,2)
(46,49,2)
(8,47,2)
(0,21,2)
(18,47,2)
(15,20,2)
(60,50,2)
(43,47,2)
(47,47,2)
(6,20,2)
(15,46,2)
(49,58,2)
(59,5,2)
(21,20,2)
(54,47,2)
(61,47,2)
(42,5,2)
(47,5,2)
(31,39,2)
(59,47,2)
(31,21,2)
(39,21,2)
(23,20,2)
(58,13,2)
(33,20,2)
(19,20,2)
-----------------------------------
(0,1)
(1,data)
(2,&data[0])
(3,)
(4,i)
(5,i = 0)
(6,i)
(7,)
(8,100)
(9,data)
(10,twoIntsStruct *)
(11,data = NULL)
(12,data)
(13,100*sizeof(twoIntsStruct)
(14,)
(15,free(data)
(16,if(1)
(17,data[i].intTwo = 2)
(18,i)
(19,twoIntsStruct)
(20,1)
(21,data == NULL)
(22,if (data == NULL)
(23,100)
(24,data[i].intOne = 1)
(25,data)
(26,data[0])
(27,data[i])
(28,i)
(29,data)
(30,sizeof(twoIntsStruct)
(31,exit(-1)
(32,data)
(33,0)
(34,i)
(35,if(1)
(36,)
(37,data)
(38,)
(39,-1)
(40,NULL)
(41,printStructLine(&data[0])
(42,data[i])
(43,intOne)
(44,data)
(45,)
(46,data = (twoIntsStruct *)
(47,i < 100)
(48,NULL)
(49,(twoIntsStruct *)
(50,1)
(51,i)
(52,for(i = 0; i < 100; i++)
(53,2)
(54,intTwo)
(55,data[i].intTwo)
(56,RET)
(57,data[i].intOne)
(58,malloc(100*sizeof(twoIntsStruct)
(59,i++)
(60,0)
(61,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^