-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_17_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(33,38,0)
(27,25,0)
(20,10,0)
(0,37,0)
(11,23,0)
(13,10,0)
(5,25,0)
(28,19,0)
(6,38,0)
(1,23,0)
(36,26,0)
(8,38,0)
(12,41,0)
(26,34,0)
(41,19,0)
(23,35,0)
(23,25,0)
(30,23,0)
(18,25,0)
(37,19,0)
(17,35,0)
(7,4,0)
(35,22,0)
(11,35,0)
(26,4,0)
(14,18,0)
(3,15,0)
(29,13,0)
(2,19,0)
(21,38,0)
(32,11,0)
(4,26,0)
(16,26,0)
(4,25,0)
(39,13,0)
(9,10,0)
(31,37,0)
(18,35,0)
(25,38,0)
(15,10,0)
(24,38,0)
(2,13,1)
(31,41,1)
(37,19,1)
(15,10,1)
(4,7,1)
(9,25,1)
(1,30,1)
(13,39,1)
(11,32,1)
(20,9,1)
(39,29,1)
(18,14,1)
(13,10,1)
(3,26,1)
(27,5,1)
(15,3,1)
(31,19,1)
(26,4,1)
(7,16,1)
(25,27,1)
(4,25,1)
(28,2,1)
(14,37,1)
(23,25,1)
(19,28,1)
(37,0,1)
(23,1,1)
(0,31,1)
(41,19,1)
(29,15,1)
(29,10,1)
(40,37,1)
(30,18,1)
(11,23,1)
(18,25,1)
(10,20,1)
(41,12,1)
(12,11,1)
(36,13,1)
(16,36,1)
(32,23,1)
(15,10,2)
(41,19,2)
(29,13,2)
(37,19,2)
(0,37,2)
(39,13,2)
(1,37,2)
(18,37,2)
(16,13,2)
(12,37,2)
(41,37,2)
(23,25,2)
(13,13,2)
(18,25,2)
(11,23,2)
(30,37,2)
(26,4,2)
(7,13,2)
(23,37,2)
(3,13,2)
(15,13,2)
(26,13,2)
(37,37,2)
(31,37,2)
(13,10,2)
(4,25,2)
(4,13,2)
(14,37,2)
(32,37,2)
(11,37,2)
(36,13,2)
-----------------------------------
(0,1)
(1,data)
(2,j)
(3,i)
(4,&data)
(5,data)
(6,data)
(7,data)
(8,for(i = 0; i < 1; i++)
(9,i)
(10,i = 0)
(11,printHexCharLine(result)
(12,j)
(13,i < 1)
(14,data)
(15,i++)
(16,"%c")
(17,result)
(18,data++)
(19,j = 0)
(20,0)
(21,for(j = 0; j < 1; j++)
(22,)
(23,result = data)
(24,i)
(25,data = \\\' \\\')
(26,fscanf (stdin, "%c", &data)
(27,\\\' \\\')
(28,0)
(29,i)
(30,result)
(31,j)
(32,result)
(33,j)
(34,)
(35,)
(36,stdin)
(37,j < 1)
(38,)
(39,1)
(40,RET)
(41,j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^