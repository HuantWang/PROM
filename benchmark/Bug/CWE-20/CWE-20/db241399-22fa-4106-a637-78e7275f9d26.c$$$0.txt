-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16_bad()
{
    while(1)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
18,19
18,20
19,20
22,23
22,24
23,24
23,25
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
42,43
43,44
43,45
43,46
43,47
44,45
46,47
46,48
47,48
50,51
52,53
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
63,64
63,65
64,65
65,66
65,67
66,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
95,97
96,97
96,98
98,99
100,101
100,102
101,102
-----nextToken-----
2,4,7,13,15,20,21,24,26,28,32,35,37,40,41,45,48,49,51,55,61,62,70,71,74,75,76,77,81,84,86,89,90,94,97,99,102,103,104
-----computeFrom-----
17,18
17,19
57,58
57,59
63,64
63,65
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16_bad(){    while(1)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }        break;    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16_bad
{    while(1)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }        break;    }}
while(1)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }        break;    }
1
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }        break;    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
break;
-----joern-----
(9,34,0)
(38,17,0)
(19,25,0)
(5,30,0)
(30,23,0)
(14,16,0)
(34,30,0)
(27,32,0)
(1,3,0)
(2,13,0)
(4,30,0)
(29,2,0)
(41,3,0)
(37,31,0)
(31,25,0)
(7,23,0)
(25,31,0)
(35,14,0)
(40,16,0)
(32,7,0)
(4,32,0)
(31,23,0)
(16,14,0)
(3,30,0)
(31,28,0)
(11,34,0)
(13,2,0)
(10,25,0)
(15,28,0)
(33,23,0)
(8,23,0)
(32,4,0)
(14,26,0)
(2,34,0)
(13,23,0)
(2,29,0)
(24,6,0)
(14,35,0)
(30,5,0)
(32,27,0)
(36,16,0)
(22,5,0)
(23,17,0)
(28,31,0)
(7,32,0)
(0,4,0)
(34,2,0)
(5,18,0)
(18,5,0)
(35,23,0)
(39,4,0)
(26,14,0)
(35,14,1)
(41,1,1)
(32,4,1)
(38,7,1)
(14,16,1)
(16,36,1)
(39,35,1)
(2,29,1)
(32,27,1)
(1,20,1)
(19,10,1)
(31,25,1)
(7,32,1)
(4,0,1)
(40,8,1)
(5,22,1)
(34,9,1)
(5,18,1)
(10,13,1)
(11,30,1)
(34,30,1)
(13,2,1)
(31,28,1)
(28,15,1)
(15,37,1)
(30,5,1)
(14,26,1)
(0,39,1)
(4,30,1)
(37,25,1)
(22,3,1)
(36,40,1)
(21,20,1)
(3,41,1)
(25,19,1)
(21,38,1)
(2,34,1)
(9,11,1)
(8,31,1)
(31,25,2)
(2,34,2)
(31,20,2)
(11,20,2)
(7,32,2)
(30,5,2)
(35,14,2)
(3,20,2)
(2,29,2)
(36,20,2)
(5,18,2)
(10,20,2)
(1,20,2)
(34,20,2)
(14,26,2)
(4,20,2)
(34,30,2)
(14,20,2)
(40,20,2)
(14,16,2)
(13,20,2)
(41,20,2)
(32,20,2)
(16,20,2)
(35,20,2)
(5,20,2)
(31,28,2)
(9,20,2)
(8,20,2)
(30,20,2)
(7,20,2)
(37,20,2)
(13,2,2)
(38,20,2)
(22,20,2)
(32,27,2)
(4,30,2)
(0,20,2)
(19,20,2)
(28,20,2)
(39,20,2)
(25,20,2)
(15,20,2)
(32,4,2)
(2,20,2)
-----------------------------------
(0,voidSecond)
(1,structCharVoid)
(2,(wchar_t *)
(3,structCharVoid.voidSecond)
(4,structCharVoid.voidSecond)
(5,(void *)
(6,)
(7,printWLine((wchar_t *)
(8,\'\\\\0\')
(9,voidSecond)
(10,structCharVoid)
(11,structCharVoid)
(12,'\\\\0')
(13,printWLine((wchar_t *)
(14,(wchar_t *)
(15,structCharVoid)
(16,structCharVoid.charFirst)
(17,)
(18,void *)
(19,charFirst)
(20,1)
(21,RET)
(22,SRC_STR)
(23,)
(24,while(1)
(25,structCharVoid.charFirst)
(26,wchar_t *)
(27,wchar_t *)
(28,sizeof(structCharVoid)
(29,wchar_t *)
(30,structCharVoid.voidSecond = (void *)
(31,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(32,(wchar_t *)
(33,structCharVoid)
(34,structCharVoid.voidSecond)
(35,printWLine((wchar_t *)
(36,charFirst)
(37,SRC_STR)
(38,break;)
(39,structCharVoid)
(40,structCharVoid)
(41,voidSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^