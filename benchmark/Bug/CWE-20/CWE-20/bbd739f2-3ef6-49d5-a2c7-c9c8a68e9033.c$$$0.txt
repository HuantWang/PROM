-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,59,61,65,67,71,73
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
63,64
63,65
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_01_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_square_01_bad()
CWE190_Integer_Overflow__int_fgets_square_01_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,32,0)
(29,19,0)
(14,32,0)
(1,27,0)
(34,2,0)
(6,7,0)
(11,28,0)
(13,5,0)
(21,19,0)
(24,2,0)
(8,20,0)
(12,26,0)
(19,27,0)
(25,26,0)
(30,5,0)
(22,23,0)
(26,30,0)
(2,20,0)
(33,20,0)
(19,2,0)
(4,7,0)
(12,30,0)
(18,32,0)
(3,12,0)
(17,28,0)
(32,16,0)
(7,26,0)
(7,28,0)
(28,5,0)
(27,19,0)
(31,30,0)
(10,19,0)
(32,18,0)
(20,5,0)
(18,2,0)
(15,22,0)
(0,18,0)
(26,7,0)
(19,2,1)
(3,26,1)
(26,7,1)
(19,29,1)
(28,11,1)
(15,27,1)
(0,14,1)
(21,10,1)
(22,15,1)
(4,25,1)
(2,34,1)
(27,1,1)
(14,27,1)
(7,32,1)
(7,6,1)
(34,24,1)
(12,26,1)
(25,32,1)
(18,2,1)
(12,3,1)
(7,28,1)
(6,4,1)
(32,18,1)
(9,12,1)
(18,0,1)
(29,21,1)
(1,19,1)
(27,19,1)
(10,2,1)
(24,28,1)
(11,17,1)
(25,22,1)
(7,28,2)
(14,27,2)
(22,27,2)
(32,27,2)
(18,2,2)
(27,19,2)
(0,27,2)
(15,27,2)
(26,7,2)
(12,26,2)
(32,18,2)
(18,27,2)
(7,32,2)
(19,2,2)
-----------------------------------
(0,inputBuffer)
(1,NULL)
(2,inputBuffer[CHAR_ARRAY_SIZE] = "")
(3,result)
(4,data)
(5,)
(6,data)
(7,data * data)
(8,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,RET)
(10,inputBuffer)
(11,0)
(12,printIntLine(result)
(13,data)
(14,data)
(15,"fgets()
(16,)
(17,data)
(18,atoi(inputBuffer)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,)
(21,CHAR_ARRAY_SIZE)
(22,printLine("fgets()
(23,)
(24,inputBuffer)
(25,result)
(26,result = data * data)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,data = 0)
(29,stdin)
(30,)
(31,result)
(32,data = atoi(inputBuffer)
(33,inputBuffer)
(34,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^