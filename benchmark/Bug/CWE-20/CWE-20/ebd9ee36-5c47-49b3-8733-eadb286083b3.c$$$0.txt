-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(28,14,0)
(8,56,0)
(9,33,0)
(3,41,0)
(17,69,0)
(21,33,0)
(4,19,0)
(13,2,0)
(65,56,0)
(37,17,0)
(21,19,0)
(36,2,0)
(67,53,0)
(35,59,0)
(68,33,0)
(31,55,0)
(52,0,0)
(38,65,0)
(28,37,0)
(65,11,0)
(41,25,0)
(19,23,0)
(15,24,0)
(6,36,0)
(5,56,0)
(25,28,0)
(2,40,0)
(39,36,0)
(0,52,0)
(23,19,0)
(30,0,0)
(45,25,0)
(47,11,0)
(2,72,0)
(17,24,0)
(69,65,0)
(44,37,0)
(63,59,0)
(59,65,0)
(24,11,0)
(62,42,0)
(53,62,0)
(20,17,0)
(18,52,0)
(22,53,0)
(0,17,0)
(26,45,0)
(32,69,0)
(7,65,0)
(19,21,0)
(12,27,0)
(50,62,0)
(40,65,0)
(54,65,0)
(70,11,0)
(58,11,0)
(36,38,0)
(27,2,0)
(38,55,0)
(66,72,0)
(55,48,0)
(1,46,0)
(40,2,0)
(45,65,0)
(10,38,0)
(56,11,0)
(27,23,0)
(29,21,0)
(51,0,0)
(38,36,0)
(69,17,0)
(25,41,0)
(33,2,0)
(59,11,0)
(53,17,0)
(53,65,0)
(45,17,0)
(71,37,0)
(46,42,0)
(34,40,0)
(14,28,0)
(33,21,0)
(43,27,0)
(64,24,0)
(25,45,0)
(60,61,0)
(28,25,0)
(57,25,0)
(37,28,0)
(21,65,0)
(23,27,0)
(16,45,0)
(8,5,1)
(65,7,1)
(10,23,1)
(41,25,1)
(45,17,1)
(45,16,1)
(20,65,1)
(63,52,1)
(19,21,1)
(3,25,1)
(59,65,1)
(29,27,1)
(50,53,1)
(62,50,1)
(52,0,1)
(27,2,1)
(28,37,1)
(68,29,1)
(6,39,1)
(33,9,1)
(33,2,1)
(21,33,1)
(0,51,1)
(39,10,1)
(22,67,1)
(53,17,1)
(57,28,1)
(17,69,1)
(9,68,1)
(40,34,1)
(51,30,1)
(38,65,1)
(25,28,1)
(41,3,1)
(36,6,1)
(46,1,1)
(37,44,1)
(7,54,1)
(63,23,1)
(18,0,1)
(27,43,1)
(25,45,1)
(23,27,1)
(37,17,1)
(53,22,1)
(23,19,1)
(26,52,1)
(59,35,1)
(13,41,1)
(40,65,1)
(38,36,1)
(63,62,1)
(36,2,1)
(25,57,1)
(16,26,1)
(35,63,1)
(47,59,1)
(2,40,1)
(45,65,1)
(53,65,1)
(63,55,1)
(54,56,1)
(55,31,1)
(1,41,1)
(0,17,1)
(12,2,1)
(30,17,1)
(32,20,1)
(52,18,1)
(4,21,1)
(71,45,1)
(43,12,1)
(44,71,1)
(69,65,1)
(28,14,1)
(21,65,1)
(19,4,1)
(49,47,1)
(65,56,1)
(34,13,1)
(69,32,1)
(31,38,1)
(67,46,1)
(56,8,1)
(4,27,2)
(10,23,2)
(0,17,2)
(6,23,2)
(38,36,2)
(69,65,2)
(28,14,2)
(62,41,2)
(50,41,2)
(19,27,2)
(29,27,2)
(31,23,2)
(38,65,2)
(25,28,2)
(33,2,2)
(1,41,2)
(26,52,2)
(12,41,2)
(25,45,2)
(40,41,2)
(23,19,2)
(67,41,2)
(19,21,2)
(23,41,2)
(45,52,2)
(71,52,2)
(36,2,2)
(25,52,2)
(36,23,2)
(65,56,2)
(2,40,2)
(45,65,2)
(9,27,2)
(28,37,2)
(27,2,2)
(33,27,2)
(21,33,2)
(21,65,2)
(34,41,2)
(53,17,2)
(13,41,2)
(59,65,2)
(46,41,2)
(45,17,2)
(27,41,2)
(53,65,2)
(41,25,2)
(57,52,2)
(21,27,2)
(2,41,2)
(37,17,2)
(40,65,2)
(39,23,2)
(3,52,2)
(41,52,2)
(52,0,2)
(23,27,2)
(38,23,2)
(55,23,2)
(43,41,2)
(17,69,2)
(28,52,2)
(22,41,2)
(53,41,2)
(44,52,2)
(37,52,2)
(68,27,2)
(16,52,2)
-----------------------------------
(0,100-dataLen)
(1,"fgets()
(2,dataLen = strlen(data)
(3,NULL)
(4,\\\'\\\\n\\\')
(5,dataBuffer)
(6,1)
(7,dataBuffer)
(8,COMMAND_ARG2)
(9,1)
(10,data)
(11,)
(12,dataLen)
(13,dataLen)
(14,int)
(15,dataLen)
(16,dataLen)
(17,dataLen = strlen(data)
(18,1)
(19,data[dataLen-1] == \\\'\\\\n\\\')
(20,dataLen)
(21,data[dataLen-1])
(22,dataLen)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,)
(25,fgets(data+dataLen, (int)
(26,data)
(27,dataLen > 0)
(28,(int)
(29,data)
(30,100)
(31,\\\'\\\\0\\\')
(32,data)
(33,dataLen-1)
(34,data)
(35,data)
(36,dataLen-1)
(37,100-dataLen)
(38,data[dataLen-1])
(39,dataLen)
(40,strlen(data)
(41,fgets(data+dataLen, (int)
(42,)
(43,0)
(44,dataLen)
(45,data+dataLen)
(46,printLine("fgets()
(47,badSink()
(48,)
(49,RET)
(50,\\\'\\\\0\\\')
(51,dataLen)
(52,100-dataLen > 1)
(53,data[dataLen])
(54,data)
(55,data[dataLen-1] = \\\'\\\\0\\\')
(56,dataBuffer[100] = COMMAND_ARG2)
(57,stdin)
(58,dataBuffer)
(59,CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data)
(60,if (fgets(data+dataLen, (int)
(61,)
(62,data[dataLen] = \\\'\\\\0\\\')
(63,CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData)
(64,if (100-dataLen > 1)
(65,data = dataBuffer)
(66,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(67,data)
(68,dataLen)
(69,strlen(data)
(70,data)
(71,100)
(72,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^