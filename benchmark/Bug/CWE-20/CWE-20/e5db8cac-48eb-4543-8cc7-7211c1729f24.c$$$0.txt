-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_04_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
    }
    {
        size_t i, destLen;
        char dest[100];
        memset(dest, 'C', 100-1);
        dest[100-1] = '\0'; /* null terminate */
        destLen = strlen(dest);
        /* POTENTIAL FLAW: using length of the dest where data
         * could be smaller than dest causing buffer overread */
        for (i = 0; i < destLen; i++)
        {
            dest[i] = data[i];
        }
        dest[100-1] = '\0';
        printLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
68,69
68,70
72,73
72,74
72,75
72,76
72,77
72,78
72,79
72,80
72,81
73,74
74,75
74,76
74,77
75,76
77,78
79,80
81,82
82,83
82,84
84,85
84,86
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
95,96
95,97
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
107,108
108,109
108,110
109,110
111,112
111,113
112,113
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
125,126
127,128
128,129
130,131
131,132
132,133
132,134
133,134
133,135
134,135
136,137
138,139
138,140
139,140
141,142
143,144
144,145
144,146
145,146
145,147
146,147
148,149
148,150
152,153
153,154
153,155
154,155
156,157
158,159
159,160
159,161
160,161
162,163
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,61,62,67,69,70,71,76,78,80,83,85,87,91,93,94,96,97,102,104,105,106,110,113,115,120,121,124,126,129,135,137,140,142,147,149,150,151,155,157,161,163
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
64,65
64,66
68,69
68,70
95,96
95,97
99,100
99,101
103,104
103,105
108,109
108,110
118,119
118,120
122,123
122,124
132,133
132,134
144,145
144,146
148,149
148,150
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_04_bad(){    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_char_loop_04_bad()
CWE126_Buffer_Overread__malloc_char_loop_04_bad
{    char * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }    {        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
{        size_t i, destLen;        char dest[100];        memset(dest, 'C', 100-1);        dest[100-1] = '\0'; /* null terminate */        destLen = strlen(dest);        /* POTENTIAL FLAW: using length of the dest where data         * could be smaller than dest causing buffer overread */        for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }        dest[100-1] = '\0';        printLine(dest);        free(data);    }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)        {            dest[i] = data[i];        }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{            dest[i] = data[i];        }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(5,79,0)
(26,18,0)
(58,2,0)
(31,20,0)
(91,46,0)
(22,89,0)
(18,60,0)
(83,79,0)
(67,79,0)
(24,83,0)
(4,12,0)
(84,60,0)
(61,0,0)
(79,83,0)
(41,61,0)
(6,77,0)
(45,89,0)
(87,60,0)
(46,91,0)
(45,72,0)
(47,4,0)
(76,60,0)
(70,59,0)
(61,72,0)
(42,60,0)
(9,8,0)
(2,27,0)
(8,9,0)
(5,89,0)
(51,13,0)
(45,0,0)
(36,9,0)
(79,12,0)
(68,79,0)
(72,45,0)
(44,46,0)
(66,82,0)
(40,5,0)
(63,46,0)
(8,79,0)
(54,27,0)
(80,55,0)
(28,68,0)
(86,68,0)
(43,16,0)
(23,67,0)
(71,86,0)
(65,86,0)
(50,45,0)
(3,0,0)
(48,27,0)
(5,60,0)
(89,77,0)
(68,86,0)
(53,0,0)
(35,8,0)
(88,19,0)
(59,60,0)
(60,77,0)
(73,0,0)
(29,13,0)
(56,55,0)
(81,56,0)
(27,2,0)
(37,87,0)
(16,59,0)
(56,60,0)
(34,67,0)
(51,87,0)
(15,19,0)
(52,89,0)
(32,51,0)
(7,43,0)
(64,79,0)
(33,45,0)
(75,68,0)
(16,43,0)
(91,83,0)
(92,61,0)
(2,60,0)
(45,79,0)
(72,57,0)
(31,82,0)
(46,44,0)
(19,0,0)
(74,2,0)
(25,13,0)
(69,44,0)
(30,73,0)
(39,60,0)
(90,12,0)
(8,4,0)
(17,77,0)
(13,51,0)
(19,56,0)
(1,16,0)
(85,9,0)
(82,31,0)
(83,24,0)
(10,43,0)
(68,12,0)
(55,56,0)
(83,91,0)
(82,66,1)
(46,44,1)
(75,67,1)
(33,50,1)
(4,47,1)
(70,16,1)
(5,40,1)
(35,68,1)
(73,30,1)
(51,13,1)
(87,37,1)
(67,79,1)
(15,0,1)
(58,38,1)
(80,81,1)
(68,79,1)
(65,28,1)
(29,25,1)
(69,63,1)
(52,22,1)
(15,73,1)
(45,33,1)
(36,85,1)
(44,69,1)
(47,8,1)
(64,38,1)
(45,0,1)
(14,5,1)
(68,86,1)
(5,79,1)
(92,19,1)
(25,32,1)
(16,43,1)
(91,46,1)
(31,82,1)
(34,23,1)
(41,92,1)
(43,7,1)
(83,24,1)
(7,10,1)
(0,3,1)
(83,91,1)
(58,4,1)
(45,79,1)
(55,80,1)
(89,52,1)
(23,79,1)
(61,41,1)
(40,18,1)
(74,58,1)
(5,89,1)
(50,61,1)
(72,45,1)
(38,89,1)
(63,64,1)
(86,71,1)
(71,65,1)
(19,88,1)
(8,9,1)
(59,70,1)
(18,26,1)
(48,54,1)
(10,1,1)
(53,56,1)
(19,0,1)
(3,53,1)
(66,67,1)
(81,59,1)
(79,83,1)
(61,0,1)
(13,29,1)
(1,2,1)
(19,56,1)
(30,72,1)
(2,27,1)
(37,51,1)
(9,36,1)
(67,34,1)
(54,74,1)
(32,19,1)
(73,0,1)
(27,48,1)
(56,55,1)
(45,89,1)
(8,79,1)
(85,35,1)
(75,31,1)
(88,15,1)
(26,87,1)
(28,75,1)
(73,0,2)
(63,38,2)
(72,19,2)
(45,0,2)
(8,38,2)
(5,89,2)
(64,38,2)
(4,38,2)
(50,19,2)
(68,79,2)
(2,27,2)
(69,38,2)
(33,19,2)
(85,38,2)
(45,89,2)
(66,67,2)
(72,45,2)
(83,38,2)
(92,19,2)
(75,38,2)
(47,38,2)
(46,38,2)
(86,38,2)
(31,82,2)
(19,56,2)
(46,44,2)
(67,79,2)
(88,19,2)
(83,91,2)
(8,9,2)
(61,19,2)
(79,38,2)
(16,43,2)
(91,46,2)
(31,67,2)
(83,24,2)
(8,79,2)
(56,55,2)
(9,38,2)
(91,38,2)
(82,67,2)
(15,19,2)
(51,13,2)
(19,0,2)
(73,19,2)
(30,19,2)
(23,38,2)
(68,86,2)
(5,79,2)
(36,38,2)
(41,19,2)
(35,38,2)
(45,19,2)
(45,79,2)
(61,0,2)
(28,38,2)
(67,38,2)
(44,38,2)
(34,38,2)
(19,19,2)
(71,38,2)
(68,38,2)
(65,38,2)
(79,83,2)
-----------------------------------
(0,i = 0)
(1,dest)
(2,memset(dest, \'C\', 100-1)
(3,0)
(4,data[50-1] = '\\\\0')
(5,free(data)
(6,if(STATIC_CONST_TRUE)
(7,1)
(8,data[50-1])
(9,50-1)
(10,100)
(11,memset(dest, 'C', 100-1)
(12,)
(13,100-1)
(14,RET)
(15,i)
(16,dest[100-1])
(17,data)
(18,printLine(dest)
(19,i < destLen)
(20,)
(21,data[50-1] = \'\\\\0\')
(22,data)
(23,data)
(24,char *)
(25,100)
(26,dest)
(27,100-1)
(28,\'A\')
(29,1)
(30,i)
(31,exit(-1)
(32,dest)
(33,i)
(34,NULL)
(35,data)
(36,1)
(37,'\\\\0')
(38,STATIC_CONST_TRUE)
(39,dest)
(40,data)
(41,i)
(42,for (i = 0; i < destLen; i++)
(43,100-1)
(44,sizeof(char)
(45,data[i])
(46,50*sizeof(char)
(47,'\\\\0')
(48,1)
(49,'A')
(50,data)
(51,dest[100-1])
(52,NULL)
(53,i)
(54,100)
(55,strlen(dest)
(56,destLen = strlen(dest)
(57,)
(58,dest)
(59,dest[100-1] = '\\\\0')
(60,)
(61,dest[i])
(62,\'\\\\0\')
(63,50)
(64,data)
(65,50)
(66,1)
(67,data == NULL)
(68,memset(data, 'A', 50-1)
(69,char)
(70,'\\\\0')
(71,1)
(72,dest[i] = data[i])
(73,i++)
(74,'C')
(75,data)
(76,destLen)
(77,)
(78,memset(data, \'A\', 50-1)
(79,data = (char *)
(80,dest)
(81,destLen)
(82,-1)
(83,(char *)
(84,i)
(85,50)
(86,50-1)
(87,dest[100-1] = '\\\\0')
(88,destLen)
(89,data = NULL)
(90,if (data == NULL)
(91,malloc(50*sizeof(char)
(92,dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^