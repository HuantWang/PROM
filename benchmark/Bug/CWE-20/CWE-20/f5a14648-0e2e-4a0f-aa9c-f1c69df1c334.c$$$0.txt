-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t source[10+1] = SRC_STRING;
            /* Copy length + 1 to include NUL terminator from source */
            /* POTENTIAL FLAW: data may not have enough space to hold source */
            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
104,105
104,106
104,107
106,107
107,108
107,109
110,111
111,112
113,114
114,115
114,116
114,117
114,118
115,116
117,118
119,120
121,122
121,123
122,123
123,124
123,125
124,125
124,126
125,126
127,128
130,131
131,132
131,133
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
144,145
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,88,92,94,95,99,103,105,108,109,112,116,118,120,126,128,129,132,133,137,139,143,145
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
107,108
107,109
121,122
121,123
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t source[10+1] = SRC_STRING;            /* Copy length + 1 to include NUL terminator from source */            /* POTENTIAL FLAW: data may not have enough space to hold source */            memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));            printWLine(data);            free(data);        }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,35,0)
(65,48,0)
(9,55,0)
(55,9,0)
(64,55,0)
(63,13,0)
(60,24,0)
(44,13,0)
(53,48,0)
(52,45,0)
(12,36,0)
(7,59,0)
(43,65,0)
(19,22,0)
(58,57,0)
(2,39,0)
(41,66,0)
(57,36,0)
(3,48,0)
(29,48,0)
(57,4,0)
(30,65,0)
(59,45,0)
(18,24,0)
(49,41,0)
(59,22,0)
(21,65,0)
(22,59,0)
(38,26,0)
(47,41,0)
(56,60,0)
(10,23,0)
(47,65,0)
(39,2,0)
(60,56,0)
(36,61,0)
(67,30,0)
(31,44,0)
(61,48,0)
(41,47,0)
(16,11,0)
(50,38,0)
(60,62,0)
(23,13,0)
(6,66,0)
(45,36,0)
(13,61,0)
(4,0,0)
(17,18,0)
(55,62,0)
(13,44,0)
(0,4,0)
(43,18,0)
(32,63,0)
(14,11,0)
(33,47,0)
(46,13,0)
(66,48,0)
(28,45,0)
(23,36,0)
(11,24,0)
(22,4,0)
(34,43,0)
(24,66,0)
(4,22,0)
(51,57,0)
(26,38,0)
(57,45,0)
(8,0,0)
(65,30,0)
(62,60,0)
(42,61,0)
(62,55,0)
(25,39,0)
(5,66,0)
(27,26,0)
(37,24,0)
(1,9,0)
(63,36,0)
(15,53,0)
(40,53,0)
(44,38,0)
(18,66,0)
(57,13,0)
(38,48,0)
(54,48,0)
(24,60,0)
(4,57,0)
(45,52,1)
(20,23,1)
(57,45,1)
(16,14,1)
(22,59,1)
(18,17,1)
(47,65,1)
(24,60,1)
(1,64,1)
(13,44,1)
(38,26,1)
(55,9,1)
(63,32,1)
(46,18,1)
(23,13,1)
(30,67,1)
(51,45,1)
(57,13,1)
(53,15,1)
(8,22,1)
(37,41,1)
(59,45,1)
(44,31,1)
(34,11,1)
(49,53,1)
(50,65,1)
(4,22,1)
(22,19,1)
(34,2,1)
(47,33,1)
(18,24,1)
(33,49,1)
(58,51,1)
(28,13,1)
(15,40,1)
(32,57,1)
(52,28,1)
(25,11,1)
(39,25,1)
(4,0,1)
(2,39,1)
(67,21,1)
(23,10,1)
(19,59,1)
(57,4,1)
(26,27,1)
(11,16,1)
(0,8,1)
(60,56,1)
(9,1,1)
(17,43,1)
(59,7,1)
(27,50,1)
(64,37,1)
(62,55,1)
(65,30,1)
(14,24,1)
(43,34,1)
(11,24,1)
(7,58,1)
(44,38,1)
(31,46,1)
(41,47,1)
(10,63,1)
(63,13,1)
(43,65,1)
(40,38,1)
(60,62,1)
(44,38,2)
(65,30,2)
(62,55,2)
(13,44,2)
(57,45,2)
(38,26,2)
(4,22,2)
(2,11,2)
(43,65,2)
(57,4,2)
(41,47,2)
(24,60,2)
(4,0,2)
(2,39,2)
(39,11,2)
(57,13,2)
(22,59,2)
(63,13,2)
(60,56,2)
(25,11,2)
(55,9,2)
(11,24,2)
(59,45,2)
(47,65,2)
(60,62,2)
(18,24,2)
(23,13,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,wchar_t)
(2,exit(-1)
(3,dataPtr1)
(4,(wcslen(source)
(5,if (data == NULL)
(6,data)
(7,source)
(8,wchar_t)
(9,sizeof(wchar_t)
(10,data)
(11,data == NULL)
(12,source)
(13,* data = *dataPtr2)
(14,data)
(15,NULL)
(16,NULL)
(17,data)
(18,*dataPtr1 = data)
(19,1)
(20,RET)
(21,dataPtr1)
(22,wcslen(source)
(23,free(data)
(24,data = (wchar_t *)
(25,1)
(26,&data)
(27,data)
(28,source)
(29,dataPtr2)
(30,&data)
(31,dataPtr2)
(32,data)
(33,dataPtr1)
(34,dataPtr1)
(35,)
(36,)
(37,data)
(38,* *dataPtr2 = &data)
(39,-1)
(40,data)
(41,* data = *dataPtr1)
(42,data)
(43,*dataPtr1)
(44,*dataPtr2)
(45,source[10+1] = SRC_STRING)
(46,data)
(47,*dataPtr1)
(48,)
(49,data)
(50,dataPtr2)
(51,data)
(52,SRC_STRING)
(53,data = NULL)
(54,data)
(55,10*sizeof(wchar_t)
(56,wchar_t *)
(57,memcpy(data, source, (wcslen(source)
(58,source)
(59,wcslen(source)
(60,(wchar_t *)
(61,)
(62,malloc(10*sizeof(wchar_t)
(63,printWLine(data)
(64,10)
(65,* *dataPtr1 = &data)
(66,)
(67,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^