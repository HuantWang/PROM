-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */
        /* FLAW: Using sizeof the pointer and not the data type in malloc() */
        data = (twoIntsStruct *)malloc(sizeof(data));
        if (data == NULL) {exit(-1);}
        data->intOne = 1;
        data->intTwo = 2;
    }
    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */
    printStructLine(data);
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
39,40
40,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
64,66
65,66
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,41,45,47,52,54,59,60,61,66,67,68,72,74,78,80
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
43,44
43,45
56,57
56,58
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07_bad(){    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
void
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07_bad()
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07_bad
{    twoIntsStruct * data;    /* Initialize data */    data = NULL;    if(staticFive==5)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }    /* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */    printStructLine(data);    free(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
staticFive==5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */        /* FLAW: Using sizeof the pointer and not the data type in malloc() */        data = (twoIntsStruct *)malloc(sizeof(data));        if (data == NULL) {exit(-1);}        data->intOne = 1;        data->intTwo = 2;    }
data = (twoIntsStruct *)malloc(sizeof(data));
data = (twoIntsStruct *)malloc(sizeof(data))
data
data
(twoIntsStruct *)malloc(sizeof(data))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(sizeof(data))
malloc
malloc
sizeof(data)
(data)
data
data
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data->intOne = 1;
data->intOne = 1
data->intOne
data
data
intOne
1
data->intTwo = 2;
data->intTwo = 2
data->intTwo
data
data
intTwo
2
printStructLine(data);
printStructLine(data)
printStructLine
printStructLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(7,14,0)
(11,25,0)
(11,27,0)
(30,8,0)
(12,30,0)
(17,34,0)
(39,28,0)
(35,24,0)
(21,13,0)
(23,27,0)
(33,11,0)
(29,39,0)
(22,28,0)
(19,28,0)
(15,13,0)
(8,30,0)
(5,1,0)
(25,32,0)
(6,9,0)
(14,13,0)
(18,11,0)
(28,13,0)
(36,25,0)
(2,21,0)
(38,9,0)
(30,25,0)
(3,36,0)
(14,25,0)
(31,20,0)
(39,12,0)
(25,30,0)
(37,13,0)
(17,20,0)
(21,28,0)
(10,25,0)
(21,25,0)
(14,28,0)
(26,32,0)
(16,1,0)
(24,32,0)
(12,39,0)
(1,24,0)
(20,17,0)
(27,32,0)
(1,25,0)
(4,36,0)
(30,12,0)
(30,12,1)
(24,35,1)
(12,39,1)
(6,38,1)
(36,3,1)
(4,25,1)
(11,33,1)
(36,25,1)
(31,36,1)
(28,19,1)
(33,18,1)
(10,9,1)
(20,31,1)
(1,16,1)
(16,5,1)
(5,17,1)
(17,20,1)
(5,36,1)
(14,28,1)
(14,7,1)
(9,6,1)
(29,10,1)
(21,2,1)
(25,30,1)
(39,28,1)
(19,22,1)
(2,27,1)
(18,24,1)
(38,28,1)
(2,9,1)
(35,1,1)
(11,25,1)
(23,11,1)
(39,29,1)
(3,4,1)
(27,23,1)
(7,21,1)
(1,25,1)
(21,25,1)
(0,14,1)
(30,8,1)
(21,28,1)
(14,25,1)
(12,9,2)
(33,9,2)
(1,9,2)
(1,25,2)
(18,9,2)
(14,28,2)
(36,25,2)
(25,9,2)
(17,20,2)
(36,9,2)
(27,9,2)
(11,9,2)
(39,28,2)
(24,9,2)
(23,9,2)
(11,25,2)
(30,8,2)
(4,9,2)
(20,36,2)
(14,25,2)
(30,9,2)
(10,9,2)
(5,9,2)
(21,28,2)
(29,9,2)
(21,25,2)
(16,9,2)
(12,39,2)
(30,12,2)
(25,30,2)
(17,36,2)
(35,9,2)
(3,9,2)
(31,36,2)
(39,9,2)
-----------------------------------
(0,RET)
(1,data->intOne)
(2,data)
(3,NULL)
(4,data)
(5,data)
(6,5)
(7,data)
(8,twoIntsStruct *)
(9,staticFive==5)
(10,data)
(11,data->intTwo)
(12,malloc(sizeof(data)
(13,)
(14,free(data)
(15,data)
(16,intOne)
(17,exit(-1)
(18,data)
(19,NULL)
(20,-1)
(21,printStructLine(data)
(22,data)
(23,2)
(24,data->intOne = 1)
(25,data = (twoIntsStruct *)
(26,if (data == NULL)
(27,data->intTwo = 2)
(28,data = NULL)
(29,data)
(30,(twoIntsStruct *)
(31,1)
(32,)
(33,intTwo)
(34,)
(35,1)
(36,data == NULL)
(37,if(staticFive==5)
(38,staticFive)
(39,sizeof(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^