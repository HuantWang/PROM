-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17_bad()
{
    int i;
    int64_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
    }
    {
        int64_t source[100] = {0}; /* fill with 0's */
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printLongLongLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
15,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
76,79
78,79
80,81
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
120,122
121,122
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,17,21,23,28,29,32,33,36,41,45,47,50,52,56,57,61,63,68,70,75,77,79,82,87,89,94,95,98,99,102,108,110,113,115,119,122,123,127,129
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
51,52
51,53
59,60
59,61
92,93
92,94
96,97
96,98
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17_bad(){    int i;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17_bad
{    int i;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }    {        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }}
int i;
int i;
int
i
i
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}    }
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int64_t source[100] = {0}; /* fill with 0's */        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }    }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printLongLongLine(data[0]);            free(data);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(5,42,0)
(27,9,0)
(3,39,0)
(35,20,0)
(26,12,0)
(16,28,0)
(19,11,0)
(49,13,0)
(47,39,0)
(25,27,0)
(24,43,0)
(53,2,0)
(35,36,0)
(13,49,0)
(23,2,0)
(33,15,0)
(13,17,0)
(28,2,0)
(45,54,0)
(55,28,0)
(59,13,0)
(8,36,0)
(54,11,0)
(0,58,0)
(61,42,0)
(1,12,0)
(48,52,0)
(46,27,0)
(30,9,0)
(52,15,0)
(22,32,0)
(50,44,0)
(31,32,0)
(37,53,0)
(6,11,0)
(18,30,0)
(41,44,0)
(39,58,0)
(28,13,0)
(19,49,0)
(62,15,0)
(49,4,0)
(40,34,0)
(11,54,0)
(22,28,0)
(27,13,0)
(10,12,0)
(21,9,0)
(11,19,0)
(32,10,0)
(40,39,0)
(53,13,0)
(36,35,0)
(42,13,0)
(49,19,0)
(44,9,0)
(29,9,0)
(4,49,0)
(27,40,0)
(43,15,0)
(2,12,0)
(58,10,0)
(53,32,0)
(39,9,0)
(51,12,0)
(39,40,0)
(27,2,0)
(14,52,0)
(28,22,0)
(38,2,0)
(57,32,0)
(7,17,0)
(56,10,0)
(59,52,1)
(60,53,1)
(50,30,1)
(27,13,1)
(53,13,1)
(5,13,1)
(40,39,1)
(27,2,1)
(28,2,1)
(15,33,1)
(16,44,1)
(50,9,1)
(38,23,1)
(42,61,1)
(33,62,1)
(3,27,1)
(35,36,1)
(46,44,1)
(25,46,1)
(24,35,1)
(54,45,1)
(6,59,1)
(8,42,1)
(36,8,1)
(42,13,1)
(39,58,1)
(28,55,1)
(19,11,1)
(0,52,1)
(28,13,1)
(52,14,1)
(49,4,1)
(13,49,1)
(39,9,1)
(52,15,1)
(29,21,1)
(55,16,1)
(27,25,1)
(14,48,1)
(44,41,1)
(27,9,1)
(39,47,1)
(30,18,1)
(41,50,1)
(47,3,1)
(48,43,1)
(9,29,1)
(30,9,1)
(62,2,1)
(21,58,1)
(53,2,1)
(37,22,1)
(49,19,1)
(43,15,1)
(61,5,1)
(11,54,1)
(43,24,1)
(48,15,1)
(22,28,1)
(24,42,1)
(18,40,1)
(58,0,1)
(2,38,1)
(44,9,1)
(53,37,1)
(45,6,1)
(39,44,2)
(46,44,2)
(40,44,2)
(27,9,2)
(22,28,2)
(27,2,2)
(44,44,2)
(13,49,2)
(14,52,2)
(52,52,2)
(8,42,2)
(13,52,2)
(35,42,2)
(3,44,2)
(30,9,2)
(42,13,2)
(61,52,2)
(35,36,2)
(18,44,2)
(50,44,2)
(25,44,2)
(30,44,2)
(28,13,2)
(49,52,2)
(44,9,2)
(53,13,2)
(39,9,2)
(11,54,2)
(19,52,2)
(5,52,2)
(41,44,2)
(48,52,2)
(43,52,2)
(27,13,2)
(53,2,2)
(43,15,2)
(40,39,2)
(28,2,2)
(11,52,2)
(27,44,2)
(39,58,2)
(19,11,2)
(49,4,2)
(47,44,2)
(54,52,2)
(59,52,2)
(24,52,2)
(42,52,2)
(45,52,2)
(36,42,2)
(52,15,2)
(49,19,2)
(6,52,2)
-----------------------------------
(0,source)
(1,for(i = 0; i < 1; i++)
(2,data = NULL)
(3,source)
(4,int64_t *)
(5,data)
(6,50)
(7,if (data == NULL)
(8,1)
(9,i = 0)
(10,)
(11,50*sizeof(int64_t)
(12,)
(13,data = (int64_t *)
(14,1)
(15,i = 0)
(16,data)
(17,)
(18,i)
(19,malloc(50*sizeof(int64_t)
(20,)
(21,i)
(22,printLongLongLine(data[0])
(23,data)
(24,i)
(25,i)
(26,i)
(27,data[i])
(28,data[0])
(29,0)
(30,i++)
(31,for (i = 0; i < 100; i++)
(32,)
(33,0)
(34,)
(35,exit(-1)
(36,-1)
(37,data)
(38,NULL)
(39,source[i])
(40,data[i] = source[i])
(41,100)
(42,data == NULL)
(43,i++)
(44,i < 100)
(45,int64_t)
(46,data)
(47,i)
(48,i)
(49,(int64_t *)
(50,i)
(51,data)
(52,i < 1)
(53,free(data)
(54,sizeof(int64_t)
(55,0)
(56,source)
(57,i)
(58,source[100] = {0})
(59,data)
(60,RET)
(61,NULL)
(62,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^