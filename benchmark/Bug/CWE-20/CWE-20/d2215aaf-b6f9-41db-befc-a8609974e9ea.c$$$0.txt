-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01_bad()
{
    char * data;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        strncpy(data, source, 100-1);
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
56,58
56,59
56,60
56,61
56,62
56,63
57,58
58,59
58,60
60,61
60,62
62,63
64,65
65,66
65,67
65,68
65,69
66,67
68,69
71,72
71,73
74,75
75,76
75,77
76,77
76,78
77,78
79,80
79,81
83,84
84,85
84,86
84,87
84,88
85,86
87,88
89,90
91,92
91,93
94,95
95,96
95,97
96,97
96,98
97,98
99,100
99,101
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,61,63,67,69,70,72,73,78,80,81,82,86,88,90,92,93,98,100,101,102,106,108,112,114
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
71,72
71,73
75,76
75,77
79,80
79,81
91,92
91,93
95,96
95,97
99,100
99,101
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01_bad(){    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01_bad
{    char * data;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        strncpy(data, source, 100-1);        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,51,0)
(35,47,0)
(15,22,0)
(47,35,0)
(6,19,0)
(26,39,0)
(13,39,0)
(3,55,0)
(2,20,0)
(23,32,0)
(49,58,0)
(32,35,0)
(23,50,0)
(38,17,0)
(24,60,0)
(54,22,0)
(10,60,0)
(48,60,0)
(60,58,0)
(46,20,0)
(19,27,0)
(44,25,0)
(59,51,0)
(12,10,0)
(27,19,0)
(32,23,0)
(39,51,0)
(27,51,0)
(51,23,0)
(55,51,0)
(43,48,0)
(55,29,0)
(18,35,0)
(24,51,0)
(27,60,0)
(33,26,0)
(35,32,0)
(15,52,0)
(8,10,0)
(4,29,0)
(17,60,0)
(23,51,0)
(0,52,0)
(56,22,0)
(10,1,0)
(16,58,0)
(48,51,0)
(22,15,0)
(34,24,0)
(39,17,0)
(28,49,0)
(7,47,0)
(52,60,0)
(11,55,0)
(41,27,0)
(29,58,0)
(5,27,0)
(1,10,0)
(45,26,0)
(25,44,0)
(39,26,0)
(31,15,0)
(50,23,0)
(25,40,0)
(51,58,0)
(30,58,0)
(14,60,0)
(57,19,0)
(42,1,0)
(9,1,0)
(37,49,0)
(36,44,0)
(6,57,1)
(21,24,1)
(27,51,1)
(0,15,1)
(22,54,1)
(2,51,1)
(43,17,1)
(33,45,1)
(25,44,1)
(27,19,1)
(1,42,1)
(15,22,1)
(29,4,1)
(51,23,1)
(59,49,1)
(31,10,1)
(3,20,1)
(56,31,1)
(23,50,1)
(19,6,1)
(12,8,1)
(44,36,1)
(24,51,1)
(48,51,1)
(46,2,1)
(20,46,1)
(9,12,1)
(35,47,1)
(47,7,1)
(55,11,1)
(26,33,1)
(52,0,1)
(45,13,1)
(3,25,1)
(39,51,1)
(10,1,1)
(24,34,1)
(32,35,1)
(48,43,1)
(13,27,1)
(49,37,1)
(20,51,1)
(42,9,1)
(39,26,1)
(34,48,1)
(38,39,1)
(36,20,1)
(17,38,1)
(7,18,1)
(8,29,1)
(41,5,1)
(37,28,1)
(4,55,1)
(18,59,1)
(23,32,1)
(55,51,1)
(57,41,1)
(54,56,1)
(5,52,1)
(11,3,1)
(35,47,2)
(24,51,2)
(10,1,2)
(27,19,2)
(25,20,2)
(39,51,2)
(27,51,2)
(23,32,2)
(55,51,2)
(15,22,2)
(39,26,2)
(23,50,2)
(25,44,2)
(44,20,2)
(36,20,2)
(51,23,2)
(20,51,2)
(32,35,2)
(48,51,2)
-----------------------------------
(0,'\\\\0')
(1,100-1)
(2,data)
(3,data)
(4,'\\\\0')
(5,data)
(6,1)
(7,char)
(8,source)
(9,100)
(10,memset(source, 'C', 100-1)
(11,0)
(12,'C')
(13,data)
(14,source)
(15,source[100-1])
(16,if (data == NULL)
(17,data[100-1] = '\\\\0')
(18,50)
(19,100-1)
(20,data == NULL)
(21,RET)
(22,100-1)
(23,(char *)
(24,free(data)
(25,exit(-1)
(26,100-1)
(27,strncpy(data, source, 100-1)
(28,data)
(29,data[0] = '\\\\0')
(30,data)
(31,source)
(32,malloc(50*sizeof(char)
(33,1)
(34,data)
(35,50*sizeof(char)
(36,1)
(37,NULL)
(38,'\\\\0')
(39,data[100-1])
(40,)
(41,source)
(42,1)
(43,data)
(44,-1)
(45,100)
(46,NULL)
(47,sizeof(char)
(48,printLine(data)
(49,data = NULL)
(50,char *)
(51,data = (char *)
(52,source[100-1] = '\\\\0')
(53,memset(source, \'C\', 100-1)
(54,1)
(55,data[0])
(56,100)
(57,100)
(58,)
(59,data)
(60,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^