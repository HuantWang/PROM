-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(41,51,0)
(13,19,0)
(18,41,0)
(36,46,0)
(24,40,0)
(6,28,0)
(40,21,0)
(33,39,0)
(13,28,0)
(42,11,0)
(19,14,0)
(39,47,0)
(0,47,0)
(51,41,0)
(32,30,0)
(24,17,0)
(37,15,0)
(7,40,0)
(44,30,0)
(29,22,0)
(15,40,0)
(43,15,0)
(45,24,0)
(38,51,0)
(26,40,0)
(26,12,0)
(19,13,0)
(49,11,0)
(11,13,0)
(9,17,0)
(11,14,0)
(51,13,0)
(22,26,0)
(46,39,0)
(4,10,0)
(10,40,0)
(20,28,0)
(27,23,0)
(2,12,0)
(46,14,0)
(26,11,0)
(26,22,0)
(50,27,0)
(27,14,0)
(22,30,0)
(34,46,0)
(30,22,0)
(31,0,0)
(28,23,0)
(46,13,0)
(16,26,0)
(22,29,0)
(8,28,0)
(3,21,0)
(11,26,0)
(25,27,0)
(48,10,0)
(40,10,0)
(5,13,0)
(35,51,0)
(30,13,0)
(12,26,0)
(1,19,0)
(15,40,1)
(51,35,1)
(46,14,1)
(50,15,1)
(46,34,1)
(27,50,1)
(26,16,1)
(37,43,1)
(39,33,1)
(31,12,1)
(42,15,1)
(33,46,1)
(26,11,1)
(0,31,1)
(25,27,1)
(48,7,1)
(24,40,1)
(40,10,1)
(35,38,1)
(26,22,1)
(45,39,1)
(4,48,1)
(1,5,1)
(50,41,1)
(7,41,1)
(27,14,1)
(34,36,1)
(2,26,1)
(41,51,1)
(49,42,1)
(38,13,1)
(11,13,1)
(18,51,1)
(26,40,1)
(32,44,1)
(22,29,1)
(12,2,1)
(10,4,1)
(11,14,1)
(43,40,1)
(15,37,1)
(19,1,1)
(51,13,1)
(30,13,1)
(36,0,1)
(24,45,1)
(46,13,1)
(12,26,1)
(16,22,1)
(44,11,1)
(11,49,1)
(50,24,1)
(22,30,1)
(30,32,1)
(41,18,1)
(19,14,1)
(13,19,1)
(45,12,1)
(31,12,2)
(37,41,2)
(42,15,2)
(30,13,2)
(45,15,2)
(15,40,2)
(48,41,2)
(39,12,2)
(40,41,2)
(43,41,2)
(0,12,2)
(4,41,2)
(22,29,2)
(41,51,2)
(16,15,2)
(46,13,2)
(7,41,2)
(24,40,2)
(36,12,2)
(51,13,2)
(12,26,2)
(22,30,2)
(26,15,2)
(15,41,2)
(30,15,2)
(33,12,2)
(44,15,2)
(24,15,2)
(12,15,2)
(34,12,2)
(26,40,2)
(25,27,2)
(22,15,2)
(26,11,2)
(11,15,2)
(26,22,2)
(11,14,2)
(19,14,2)
(40,10,2)
(32,15,2)
(2,15,2)
(10,41,2)
(11,13,2)
(46,12,2)
(49,15,2)
(27,14,2)
(46,14,2)
(13,19,2)
-----------------------------------
(0,printLine("fgets()
(1,data)
(2,NULL)
(3,if (pFile != NULL)
(4,"r")
(5,dataLen)
(6,dataLen)
(7,pFile)
(8,pFile)
(9,if (fgets(data+dataLen, (int)
(10,fopen(FILENAME, "r")
(11,data+dataLen)
(12,fgets(data+dataLen, (int)
(13,dataLen = strlen(data)
(14,char * data)
(15,pFile != NULL)
(16,pFile)
(17,)
(18,1)
(19,strlen(data)
(20,if (100-dataLen > 1)
(21,)
(22,(int)
(23,)
(24,fclose(pFile)
(25,RET)
(26,fgets(data+dataLen, (int)
(27,return data;)
(28,)
(29,int)
(30,100-dataLen)
(31,"fgets()
(32,dataLen)
(33,\\\'\\\\0\\\')
(34,dataLen)
(35,dataLen)
(36,data)
(37,NULL)
(38,100)
(39,data[dataLen] = \\\'\\\\0\\\')
(40,pFile = fopen(FILENAME, "r")
(41,100-dataLen > 1)
(42,data)
(43,pFile)
(44,100)
(45,pFile)
(46,data[dataLen])
(47,)
(48,FILENAME)
(49,dataLen)
(50,data)
(51,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^