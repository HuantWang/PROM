-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int *)malloc(50*sizeof(int));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        {
            int source[100] = {0}; /* fill with 0's */
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(int));
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
104,105
104,106
104,107
106,107
108,109
109,110
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
119,120
119,121
121,122
122,123
122,124
125,126
126,127
126,128
127,128
129,130
129,131
130,131
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,88,92,94,95,99,103,105,107,110,114,116,118,120,123,124,128,131,132,136,138
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
119,120
119,121
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        {            int source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int));            printIntLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        {            int source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int));            printIntLine(data[0]);            free(data);        }    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int *)malloc(50*sizeof(int));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        {            int source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int));            printIntLine(data[0]);            free(data);        }    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            int source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int));            printIntLine(data[0]);            free(data);        }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(6,60,0)
(24,50,0)
(30,44,0)
(28,56,0)
(61,12,0)
(6,13,0)
(48,40,0)
(26,21,0)
(16,22,0)
(32,60,0)
(37,4,0)
(31,47,0)
(17,13,0)
(36,45,0)
(19,51,0)
(1,53,0)
(0,58,0)
(60,6,0)
(49,16,0)
(24,6,0)
(23,51,0)
(21,13,0)
(25,35,0)
(39,24,0)
(22,16,0)
(63,56,0)
(43,34,0)
(31,2,0)
(38,23,0)
(12,4,0)
(62,0,0)
(45,16,0)
(8,59,0)
(51,23,0)
(50,45,0)
(11,4,0)
(20,35,0)
(9,48,0)
(56,11,0)
(0,22,0)
(33,40,0)
(22,0,0)
(7,47,0)
(55,50,0)
(35,13,0)
(65,58,0)
(53,35,0)
(3,30,0)
(64,29,0)
(16,49,0)
(1,6,0)
(57,9,0)
(56,48,0)
(15,21,0)
(29,48,0)
(59,30,0)
(46,6,0)
(5,53,0)
(48,29,0)
(54,13,0)
(18,44,0)
(59,48,0)
(52,1,0)
(10,34,0)
(58,0,0)
(59,12,0)
(30,59,0)
(29,23,0)
(50,35,0)
(11,56,0)
(14,59,0)
(41,48,0)
(40,13,0)
(44,30,0)
(53,1,0)
(23,13,0)
(16,45,0)
(27,13,0)
(34,45,0)
(4,40,0)
(9,4,0)
(45,35,0)
(47,31,0)
(59,4,0)
(24,6,1)
(60,32,1)
(6,60,1)
(22,0,1)
(5,21,1)
(10,45,1)
(62,36,1)
(11,56,1)
(50,55,1)
(34,43,1)
(3,8,1)
(48,29,1)
(21,15,1)
(45,16,1)
(12,61,1)
(42,9,1)
(34,45,1)
(9,57,1)
(31,47,1)
(50,45,1)
(24,39,1)
(59,30,1)
(0,58,1)
(39,31,1)
(47,7,1)
(61,48,1)
(65,62,1)
(59,48,1)
(16,22,1)
(38,6,1)
(30,44,1)
(39,34,1)
(36,53,1)
(55,24,1)
(59,12,1)
(16,49,1)
(52,5,1)
(44,18,1)
(8,14,1)
(15,26,1)
(57,11,1)
(28,59,1)
(58,65,1)
(7,34,1)
(56,63,1)
(29,23,1)
(51,19,1)
(29,64,1)
(14,12,1)
(64,41,1)
(41,50,1)
(1,6,1)
(9,48,1)
(18,3,1)
(26,23,1)
(43,10,1)
(63,28,1)
(53,1,1)
(23,51,1)
(56,48,1)
(32,46,1)
(19,38,1)
(1,52,1)
(59,30,2)
(48,29,2)
(0,58,2)
(16,22,2)
(31,34,2)
(9,48,2)
(16,49,2)
(29,23,2)
(59,48,2)
(1,6,2)
(24,6,2)
(23,51,2)
(53,1,2)
(22,0,2)
(11,56,2)
(45,16,2)
(56,48,2)
(59,12,2)
(50,45,2)
(7,34,2)
(31,47,2)
(47,34,2)
(6,60,2)
(34,45,2)
(30,44,2)
-----------------------------------
(0,50*sizeof(int)
(1,*dataPtr1)
(2,)
(3,100)
(4,)
(5,data)
(6,* *dataPtr1 = &data)
(7,1)
(8,source)
(9,free(data)
(10,data)
(11,printIntLine(data[0])
(12,source[100] = {0})
(13,)
(14,data)
(15,NULL)
(16,(int *)
(17,dataPtr2)
(18,int)
(19,data)
(20,if (data == NULL)
(21,data = NULL)
(22,malloc(50*sizeof(int)
(23,* *dataPtr2 = &data)
(24,*dataPtr1)
(25,data)
(26,data)
(27,data)
(28,data)
(29,*dataPtr2)
(30,100*sizeof(int)
(31,exit(-1)
(32,data)
(33,data)
(34,data == NULL)
(35,)
(36,data)
(37,source)
(38,dataPtr2)
(39,dataPtr1)
(40,)
(41,data)
(42,RET)
(43,NULL)
(44,sizeof(int)
(45,data = (int *)
(46,dataPtr1)
(47,-1)
(48,* data = *dataPtr2)
(49,int *)
(50,*dataPtr1 = data)
(51,&data)
(52,dataPtr1)
(53,* data = *dataPtr1)
(54,dataPtr1)
(55,data)
(56,data[0])
(57,data)
(58,sizeof(int)
(59,memmove(data, source, 100*sizeof(int)
(60,&data)
(61,source)
(62,50)
(63,0)
(64,dataPtr2)
(65,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^