-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
58,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,61,64,66,69,73,75
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_17_bad()
CWE190_Integer_Overflow__char_max_preinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(22,34,0)
(3,22,0)
(15,10,0)
(39,35,0)
(27,18,0)
(14,3,0)
(29,3,0)
(33,19,0)
(38,35,0)
(3,32,0)
(13,22,0)
(5,22,0)
(28,18,0)
(20,18,0)
(19,10,0)
(5,32,0)
(16,6,0)
(36,10,0)
(9,37,0)
(30,32,0)
(3,6,0)
(37,35,0)
(2,39,0)
(6,18,0)
(21,15,0)
(4,18,0)
(17,15,0)
(8,3,0)
(31,10,0)
(40,37,0)
(0,6,0)
(1,18,0)
(26,35,0)
(5,6,0)
(23,5,0)
(12,29,0)
(29,32,0)
(24,22,0)
(32,7,0)
(0,16,1)
(35,38,1)
(6,0,1)
(24,13,1)
(13,15,1)
(15,21,1)
(39,35,1)
(33,22,1)
(5,22,1)
(10,31,1)
(12,3,1)
(17,10,1)
(14,8,1)
(8,5,1)
(19,33,1)
(3,22,1)
(40,39,1)
(38,26,1)
(37,35,1)
(37,9,1)
(25,37,1)
(5,23,1)
(3,6,1)
(15,10,1)
(3,14,1)
(17,19,1)
(5,6,1)
(9,40,1)
(29,3,1)
(26,15,1)
(21,17,1)
(31,36,1)
(19,10,1)
(2,29,1)
(29,12,1)
(23,37,1)
(39,2,1)
(40,35,1)
(36,6,1)
(22,24,1)
(22,15,2)
(3,37,2)
(29,37,2)
(14,37,2)
(5,6,2)
(15,10,2)
(9,37,2)
(3,22,2)
(5,37,2)
(33,15,2)
(8,37,2)
(37,37,2)
(19,10,2)
(39,37,2)
(37,35,2)
(13,15,2)
(21,15,2)
(17,15,2)
(40,37,2)
(12,37,2)
(29,3,2)
(23,37,2)
(5,22,2)
(3,6,2)
(19,15,2)
(39,35,2)
(24,15,2)
(2,37,2)
(15,15,2)
-----------------------------------
(0,' ')
(1,data)
(2,j)
(3,result = data)
(4,j)
(5,++data)
(6,data = ' ')
(7,)
(8,result)
(9,1)
(10,i = 0)
(11,data = \' \')
(12,result)
(13,data)
(14,data)
(15,i < 1)
(16,data)
(17,i)
(18,)
(19,i++)
(20,for(i = 0; i < 1; i++)
(21,1)
(22,data = CHAR_MAX)
(23,data)
(24,CHAR_MAX)
(25,RET)
(26,j)
(27,for(j = 0; j < 1; j++)
(28,i)
(29,printHexCharLine(result)
(30,result)
(31,0)
(32,)
(33,i)
(34,)
(35,j = 0)
(36,i)
(37,j < 1)
(38,0)
(39,j++)
(40,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^