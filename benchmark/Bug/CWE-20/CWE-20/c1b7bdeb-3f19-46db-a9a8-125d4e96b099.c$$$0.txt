-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15_bad()
{
    switch(6)
    {
    case 6:
    {
        charVoid structCharVoid;
        structCharVoid.voidSecond = (void *)SRC_STR;
        /* Print the initial block pointed to by structCharVoid.voidSecond */
        printWLine((wchar_t *)structCharVoid.voidSecond);
        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
        printWLine((wchar_t *)structCharVoid.charFirst);
        printWLine((wchar_t *)structCharVoid.voidSecond);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
24,25
24,26
25,26
25,27
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
38,39
40,41
40,42
41,42
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
52,53
54,55
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
87,88
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
100,101
102,103
102,104
103,104
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,7,10,15,17,22,23,26,28,30,34,37,39,42,43,47,50,51,53,57,63,64,72,73,76,77,78,79,83,86,88,91,92,96,99,101,104,105,106,107,111,112,113
-----computeFrom-----
19,20
19,21
59,60
59,61
65,66
65,67
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15_bad(){    switch(6)    {    case 6:    {        charVoid structCharVoid;        structCharVoid.voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid.voidSecond */        printWLine((wchar_t *)structCharVoid.voidSecond);        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */        printWLine((wchar_t *)structCharVoid.charFirst);        printWLine((wchar_t *)structCharVoid.voidSecond);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15_bad
{    switch(6)    {    case 6:    {        charVoid structCharVoid;        structCharVoid.voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid.voidSecond */        printWLine((wchar_t *)structCharVoid.voidSecond);        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */        printWLine((wchar_t *)structCharVoid.charFirst);        printWLine((wchar_t *)structCharVoid.voidSecond);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        charVoid structCharVoid;        structCharVoid.voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid.voidSecond */        printWLine((wchar_t *)structCharVoid.voidSecond);        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */        printWLine((wchar_t *)structCharVoid.charFirst);        printWLine((wchar_t *)structCharVoid.voidSecond);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        charVoid structCharVoid;        structCharVoid.voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid.voidSecond */        printWLine((wchar_t *)structCharVoid.voidSecond);        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */        printWLine((wchar_t *)structCharVoid.charFirst);        printWLine((wchar_t *)structCharVoid.voidSecond);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        charVoid structCharVoid;        structCharVoid.voidSecond = (void *)SRC_STR;        /* Print the initial block pointed to by structCharVoid.voidSecond */        printWLine((wchar_t *)structCharVoid.voidSecond);        /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));        structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */        printWLine((wchar_t *)structCharVoid.charFirst);        printWLine((wchar_t *)structCharVoid.voidSecond);    }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,4,0)
(18,11,0)
(17,3,0)
(2,19,0)
(23,34,0)
(45,7,0)
(0,19,0)
(24,3,0)
(1,0,0)
(11,27,0)
(22,27,0)
(31,3,0)
(19,0,0)
(43,5,0)
(13,30,0)
(36,26,0)
(41,26,0)
(40,25,0)
(21,26,0)
(4,27,0)
(27,26,0)
(5,12,0)
(30,13,0)
(34,36,0)
(22,38,0)
(16,4,0)
(34,23,0)
(34,11,0)
(19,26,0)
(13,6,0)
(25,5,0)
(33,3,0)
(29,3,0)
(5,43,0)
(9,11,0)
(27,22,0)
(35,0,0)
(13,7,0)
(10,8,0)
(32,25,0)
(25,27,0)
(6,26,0)
(6,13,0)
(26,3,0)
(5,25,0)
(19,28,0)
(39,33,0)
(28,19,0)
(44,28,0)
(12,5,0)
(7,13,0)
(20,7,0)
(11,34,0)
(38,22,0)
(36,34,0)
(43,26,0)
(15,22,0)
(19,0,1)
(17,43,1)
(16,14,1)
(2,0,1)
(13,30,1)
(19,28,1)
(22,38,1)
(37,31,1)
(5,12,1)
(7,20,1)
(25,40,1)
(32,6,1)
(18,27,1)
(9,18,1)
(28,44,1)
(36,34,1)
(33,39,1)
(34,11,1)
(13,7,1)
(35,1,1)
(31,33,1)
(4,16,1)
(11,9,1)
(5,25,1)
(45,21,1)
(43,5,1)
(15,4,1)
(0,35,1)
(20,45,1)
(11,27,1)
(1,36,1)
(39,42,1)
(27,22,1)
(44,2,1)
(37,17,1)
(25,27,1)
(6,13,1)
(22,15,1)
(34,23,1)
(14,42,1)
(21,19,1)
(40,32,1)
(36,42,2)
(32,42,2)
(44,42,2)
(1,42,2)
(14,42,2)
(27,22,2)
(34,42,2)
(16,42,2)
(13,30,2)
(5,42,2)
(43,42,2)
(9,42,2)
(19,0,2)
(17,42,2)
(22,38,2)
(34,11,2)
(39,42,2)
(35,42,2)
(28,42,2)
(25,27,2)
(36,34,2)
(15,42,2)
(21,42,2)
(22,42,2)
(11,42,2)
(6,42,2)
(13,42,2)
(11,27,2)
(13,7,2)
(19,42,2)
(40,42,2)
(18,42,2)
(5,12,2)
(5,25,2)
(7,42,2)
(33,42,2)
(31,42,2)
(20,42,2)
(4,42,2)
(27,42,2)
(43,5,2)
(19,28,2)
(6,13,2)
(34,23,2)
(2,42,2)
(25,42,2)
(0,42,2)
(45,42,2)
-----------------------------------
(0,structCharVoid.charFirst)
(1,structCharVoid)
(2,SRC_STR)
(3,)
(4,structCharVoid.voidSecond)
(5,(wchar_t *)
(6,printWLine((wchar_t *)
(7,structCharVoid.charFirst)
(8,)
(9,voidSecond)
(10,switch(6)
(11,structCharVoid.voidSecond)
(12,wchar_t *)
(13,(wchar_t *)
(14,structCharVoid)
(15,SRC_STR)
(16,voidSecond)
(17,break;)
(18,structCharVoid)
(19,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(20,charFirst)
(21,\\\'\\\\0\\\')
(22,(void *)
(23,wchar_t *)
(24,default:)
(25,structCharVoid.voidSecond)
(26,)
(27,structCharVoid.voidSecond = (void *)
(28,sizeof(structCharVoid)
(29,case 6:)
(30,wchar_t *)
(31,break;)
(32,structCharVoid)
(33,printLine("Benign, fixed string")
(34,(wchar_t *)
(35,charFirst)
(36,printWLine((wchar_t *)
(37,RET)
(38,void *)
(39,"Benign, fixed string")
(40,voidSecond)
(41,structCharVoid)
(42,6)
(43,printWLine((wchar_t *)
(44,structCharVoid)
(45,structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^