-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
            strncpy(data, source, 100-1);
            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
92,93
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
107,113
107,114
108,109
109,110
109,111
111,112
111,113
113,114
115,116
116,117
116,118
116,119
116,120
117,118
119,120
122,123
122,124
125,126
126,127
126,128
127,128
127,129
128,129
130,131
130,132
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
142,144
145,146
146,147
146,148
147,148
147,149
148,149
150,151
150,152
154,155
155,156
155,157
156,157
158,159
160,161
161,162
161,163
162,163
164,165
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,87,88,93,95,99,101,102,106,110,112,114,118,120,121,123,124,129,131,132,133,137,139,141,143,144,149,151,152,153,157,159,163,165
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
90,91
90,92
122,123
122,124
126,127
126,128
130,131
130,132
142,143
142,144
146,147
146,148
150,151
150,152
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */            strncpy(data, source, 100-1);            data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */            printLine(data);            free(data);        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(4,23,0)
(9,27,0)
(28,27,0)
(82,37,0)
(49,27,0)
(75,14,0)
(12,26,0)
(71,21,0)
(50,15,0)
(44,65,0)
(25,27,0)
(60,51,0)
(79,3,0)
(55,73,0)
(76,26,0)
(73,3,0)
(68,52,0)
(64,45,0)
(59,71,0)
(46,65,0)
(71,73,0)
(73,71,0)
(4,45,0)
(80,30,0)
(83,3,0)
(40,23,0)
(5,26,0)
(53,6,0)
(51,9,0)
(35,69,0)
(29,27,0)
(11,15,0)
(13,30,0)
(23,9,0)
(54,29,0)
(32,29,0)
(56,23,0)
(10,56,0)
(70,77,0)
(86,12,0)
(41,73,0)
(71,59,0)
(84,23,0)
(81,1,0)
(7,39,0)
(69,10,0)
(52,23,0)
(1,81,0)
(77,73,0)
(61,41,0)
(66,81,0)
(33,41,0)
(36,4,0)
(45,4,0)
(19,81,0)
(65,52,0)
(21,71,0)
(57,14,0)
(41,47,0)
(67,23,0)
(26,27,0)
(15,50,0)
(31,10,0)
(13,51,0)
(67,51,0)
(81,27,0)
(37,39,0)
(76,72,0)
(62,56,0)
(51,66,0)
(47,3,0)
(2,9,0)
(39,59,0)
(52,65,0)
(66,51,0)
(38,84,0)
(48,52,0)
(43,13,0)
(52,51,0)
(17,45,0)
(6,51,0)
(13,84,0)
(10,69,0)
(63,76,0)
(30,13,0)
(14,3,0)
(72,3,0)
(20,47,0)
(14,57,0)
(42,66,0)
(22,69,0)
(85,4,0)
(24,67,0)
(26,12,0)
(8,57,0)
(39,37,0)
(57,26,0)
(74,30,0)
(78,1,0)
(50,16,0)
(58,72,0)
(3,27,0)
(72,73,0)
(6,23,0)
(18,77,0)
(59,39,0)
(33,77,1)
(31,4,1)
(73,71,1)
(6,53,1)
(37,82,1)
(71,59,1)
(10,69,1)
(76,63,1)
(64,85,1)
(66,81,1)
(84,38,1)
(11,77,1)
(50,15,1)
(51,66,1)
(7,55,1)
(22,31,1)
(67,24,1)
(72,73,1)
(32,54,1)
(57,8,1)
(76,26,1)
(58,76,1)
(81,1,1)
(56,62,1)
(59,39,1)
(75,29,1)
(77,18,1)
(6,51,1)
(0,67,1)
(26,12,1)
(67,51,1)
(52,51,1)
(85,36,1)
(82,7,1)
(45,17,1)
(41,61,1)
(17,64,1)
(78,19,1)
(20,41,1)
(33,50,1)
(13,30,1)
(65,46,1)
(63,47,1)
(47,20,1)
(13,51,1)
(43,52,1)
(62,10,1)
(86,5,1)
(38,13,1)
(15,11,1)
(71,21,1)
(52,65,1)
(35,22,1)
(66,42,1)
(39,37,1)
(29,32,1)
(19,26,1)
(46,44,1)
(8,75,1)
(72,58,1)
(30,80,1)
(80,74,1)
(61,33,1)
(24,6,1)
(48,56,1)
(12,86,1)
(18,70,1)
(44,68,1)
(68,48,1)
(53,84,1)
(42,60,1)
(69,35,1)
(41,73,1)
(57,26,1)
(77,73,1)
(55,14,1)
(54,81,1)
(4,45,1)
(60,72,1)
(74,43,1)
(70,73,1)
(1,78,1)
(14,57,1)
(36,51,1)
(66,81,2)
(41,73,2)
(52,65,2)
(81,1,2)
(4,45,2)
(59,39,2)
(71,59,2)
(13,51,2)
(11,77,2)
(13,30,2)
(67,51,2)
(76,26,2)
(50,77,2)
(14,57,2)
(39,37,2)
(50,15,2)
(10,69,2)
(26,12,2)
(51,66,2)
(77,73,2)
(52,51,2)
(15,77,2)
(6,51,2)
(72,73,2)
(57,26,2)
(71,21,2)
(73,71,2)
-----------------------------------
(0,RET)
(1,&data)
(2,data)
(3,)
(4,memset(source, 'C', 100-1)
(5,dataPtr1)
(6,printLine(data)
(7,50)
(8,dataPtr1)
(9,)
(10,source[100-1])
(11,1)
(12,&data)
(13,data[100-1])
(14,* data = *dataPtr1)
(15,-1)
(16,)
(17,1)
(18,NULL)
(19,dataPtr2)
(20,'\\\\0')
(21,char *)
(22,100)
(23,)
(24,data)
(25,dataPtr1)
(26,* *dataPtr1 = &data)
(27,)
(28,dataPtr2)
(29,data = NULL)
(30,100-1)
(31,source)
(32,NULL)
(33,data)
(34,memset(source, \'C\', 100-1)
(35,1)
(36,source)
(37,sizeof(char)
(38,'\\\\0')
(39,50*sizeof(char)
(40,source)
(41,data[0])
(42,dataPtr2)
(43,data)
(44,100)
(45,100-1)
(46,1)
(47,data[0] = '\\\\0')
(48,data)
(49,data)
(50,exit(-1)
(51,* data = *dataPtr2)
(52,strncpy(data, source, 100-1)
(53,data)
(54,data)
(55,data)
(56,source[100-1] = '\\\\0')
(57,*dataPtr1)
(58,data)
(59,malloc(50*sizeof(char)
(60,data)
(61,0)
(62,'\\\\0')
(63,dataPtr1)
(64,100)
(65,100-1)
(66,*dataPtr2)
(67,free(data)
(68,source)
(69,100-1)
(70,data)
(71,(char *)
(72,*dataPtr1 = data)
(73,data = (char *)
(74,100)
(75,data)
(76,*dataPtr1)
(77,data == NULL)
(78,data)
(79,if (data == NULL)
(80,1)
(81,* *dataPtr2 = &data)
(82,char)
(83,data)
(84,data[100-1] = '\\\\0')
(85,'C')
(86,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^