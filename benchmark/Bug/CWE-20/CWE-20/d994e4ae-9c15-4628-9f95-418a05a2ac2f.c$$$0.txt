-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_char_ncpy_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        {
            char * dataBuffer = (char *)malloc(100*sizeof(char));
            if (dataBuffer == NULL) {exit(-1);}
            memset(dataBuffer, 'A', 100-1);
            dataBuffer[100-1] = '\0';
            /* FLAW: Set data pointer to before the allocated memory buffer */
            data = dataBuffer - 8;
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char source[100];
            memset(source, 'C', 100-1); /* fill with 'C's */
            source[100-1] = '\0'; /* null terminate */
            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
            strncpy(data, source, 100-1);
            /* Ensure the destination buffer is null terminated */
            data[100-1] = '\0';
            printLine(data);
            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
             * returned by malloc() so can't safely call free() on it */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
87,91
88,89
90,91
93,94
93,95
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
105,106
106,107
106,108
107,108
109,110
109,111
110,111
113,114
114,115
114,116
115,116
116,117
118,119
120,121
120,122
121,122
122,123
122,124
124,125
124,126
124,127
127,128
128,129
129,130
131,132
131,133
131,134
131,135
131,136
131,137
132,133
133,134
133,135
135,136
135,137
137,138
139,140
140,141
140,142
140,143
140,144
141,142
143,144
146,147
146,148
149,150
150,151
150,152
151,152
151,153
152,153
154,155
154,156
158,159
159,160
159,161
159,162
159,163
160,161
162,163
164,165
166,167
166,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
174,176
178,179
179,180
179,181
180,181
182,183
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,61,63,66,68,71,72,76,78,83,85,89,91,92,94,95,100,102,103,104,108,111,112,117,119,123,125,126,130,134,136,138,142,144,145,147,148,153,155,156,157,161,163,165,167,168,173,175,176,177,181,183
-----computeFrom-----
35,36
35,37
67,68
67,69
74,75
74,76
93,94
93,95
97,98
97,99
101,102
101,103
106,107
106,108
109,110
109,111
114,115
114,116
146,147
146,148
150,151
150,152
154,155
154,156
166,167
166,168
170,171
170,172
174,175
174,176
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_char_ncpy_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            strncpy(data, source, 100-1);            /* Ensure the destination buffer is null terminated */            data[100-1] = '\0';            printLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
void
CWE124_Buffer_Underwrite__malloc_char_ncpy_32_bad()
CWE124_Buffer_Underwrite__malloc_char_ncpy_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            strncpy(data, source, 100-1);            /* Ensure the destination buffer is null terminated */            data[100-1] = '\0';            printLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        {            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char * dataBuffer = (char *)malloc(100*sizeof(char));            if (dataBuffer == NULL) {exit(-1);}            memset(dataBuffer, 'A', 100-1);            dataBuffer[100-1] = '\0';            /* FLAW: Set data pointer to before the allocated memory buffer */            data = dataBuffer - 8;        }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            strncpy(data, source, 100-1);            /* Ensure the destination buffer is null terminated */            data[100-1] = '\0';            printLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char source[100];            memset(source, 'C', 100-1); /* fill with 'C's */            source[100-1] = '\0'; /* null terminate */            /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */            strncpy(data, source, 100-1);            /* Ensure the destination buffer is null terminated */            data[100-1] = '\0';            printLine(data);            /* INCIDENTAL CWE-401: Memory Leak - data may not point to location             * returned by malloc() so can't safely call free() on it */        }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
strncpy(data, source, 100-1);
strncpy(data, source, 100-1)
strncpy
strncpy
data
data
source
source
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(87,90,0)
(25,28,0)
(46,24,0)
(4,14,0)
(69,24,0)
(20,78,0)
(100,87,0)
(12,33,0)
(16,67,0)
(33,14,0)
(38,58,0)
(13,78,0)
(65,79,0)
(81,20,0)
(24,69,0)
(84,58,0)
(88,27,0)
(0,27,0)
(90,50,0)
(30,0,0)
(28,3,0)
(23,3,0)
(76,33,0)
(90,87,0)
(64,20,0)
(86,92,0)
(36,18,0)
(17,70,0)
(26,43,0)
(49,44,0)
(11,85,0)
(11,63,0)
(71,58,0)
(34,18,0)
(26,38,0)
(51,57,0)
(32,64,0)
(68,80,0)
(90,59,0)
(35,24,0)
(43,26,0)
(47,91,0)
(29,100,0)
(43,67,0)
(42,63,0)
(38,99,0)
(89,27,0)
(51,80,0)
(3,78,0)
(15,26,0)
(95,63,0)
(41,99,0)
(60,100,0)
(78,67,0)
(24,87,0)
(63,73,0)
(74,67,0)
(62,73,0)
(67,58,0)
(45,42,0)
(56,78,0)
(20,87,0)
(69,78,0)
(50,90,0)
(14,33,0)
(80,51,0)
(92,58,0)
(85,11,0)
(53,11,0)
(40,91,0)
(59,90,0)
(6,38,0)
(79,62,0)
(39,85,0)
(16,69,0)
(48,63,0)
(28,72,0)
(20,64,0)
(27,0,0)
(8,38,0)
(47,58,0)
(7,85,0)
(36,44,0)
(10,36,0)
(22,69,0)
(73,58,0)
(77,73,0)
(52,72,0)
(8,16,0)
(83,47,0)
(54,92,0)
(2,43,0)
(27,63,0)
(99,38,0)
(91,47,0)
(5,0,0)
(11,62,0)
(21,16,0)
(19,20,0)
(36,62,0)
(95,62,0)
(14,42,0)
(28,87,0)
(62,79,0)
(18,36,0)
(94,95,0)
(66,58,0)
(97,64,0)
(44,63,0)
(31,1,0)
(75,8,0)
(87,78,0)
(79,47,0)
(9,62,0)
(37,18,0)
(1,70,0)
(55,87,0)
(1,59,0)
(59,1,0)
(72,28,0)
(70,1,0)
(93,72,0)
(82,11,0)
(23,28,1)
(38,99,1)
(20,87,1)
(100,87,1)
(51,80,1)
(94,44,1)
(91,40,1)
(93,25,1)
(35,46,1)
(39,7,1)
(76,12,1)
(53,42,1)
(16,21,1)
(62,79,1)
(92,54,1)
(75,69,1)
(14,33,1)
(28,72,1)
(85,39,1)
(42,45,1)
(28,87,1)
(95,94,1)
(4,27,1)
(81,19,1)
(33,76,1)
(79,65,1)
(24,35,1)
(37,34,1)
(8,75,1)
(17,31,1)
(69,24,1)
(70,17,1)
(79,47,1)
(97,32,1)
(27,0,1)
(11,85,1)
(82,53,1)
(0,30,1)
(1,70,1)
(49,36,1)
(16,69,1)
(19,100,1)
(90,50,1)
(26,15,1)
(90,59,1)
(9,16,1)
(40,83,1)
(31,55,1)
(65,9,1)
(11,62,1)
(54,86,1)
(22,3,1)
(34,10,1)
(3,23,1)
(89,88,1)
(86,47,1)
(30,5,1)
(98,95,1)
(8,38,1)
(83,38,1)
(41,6,1)
(25,20,1)
(5,89,1)
(12,4,1)
(46,22,1)
(60,87,1)
(24,87,1)
(36,62,1)
(21,8,1)
(68,100,1)
(80,68,1)
(20,64,1)
(95,62,1)
(99,41,1)
(36,18,1)
(59,1,1)
(64,97,1)
(10,11,1)
(55,43,1)
(43,26,1)
(7,82,1)
(100,29,1)
(15,2,1)
(72,52,1)
(19,51,1)
(52,93,1)
(47,91,1)
(45,14,1)
(29,60,1)
(18,37,1)
(87,90,1)
(2,92,1)
(88,62,1)
(32,81,1)
(44,49,1)
(26,38,1)
(14,33,2)
(8,38,2)
(90,50,2)
(80,100,2)
(68,100,2)
(79,47,2)
(90,59,2)
(20,64,2)
(20,87,2)
(36,18,2)
(51,100,2)
(51,80,2)
(38,99,2)
(27,0,2)
(28,87,2)
(1,70,2)
(16,69,2)
(11,62,2)
(28,72,2)
(62,79,2)
(24,87,2)
(36,62,2)
(59,1,2)
(95,62,2)
(26,38,2)
(87,90,2)
(47,91,2)
(11,85,2)
(100,87,2)
(69,24,2)
(43,26,2)
-----------------------------------
(0,100-1)
(1,100*sizeof(char)
(2,data)
(3,dataBuffer[100-1] = '\\\\0')
(4,source)
(5,100)
(6,dataPtr1)
(7,100)
(8,*dataPtr1)
(9,data)
(10,data)
(11,strncpy(data, source, 100-1)
(12,100)
(13,if (dataBuffer == NULL)
(14,source[100-1])
(15,dataPtr1)
(16,*dataPtr1 = data)
(17,char)
(18,100-1)
(19,dataBuffer)
(20,memset(dataBuffer, \'A\', 100-1)
(21,data)
(22,data)
(23,'\\\\0')
(24,dataBuffer - 8)
(25,dataBuffer)
(26,*dataPtr1)
(27,memset(source, \'C\', 100-1)
(28,dataBuffer[100-1])
(29,NULL)
(30,1)
(31,100)
(32,100)
(33,100-1)
(34,100)
(35,8)
(36,data[100-1])
(37,1)
(38,* *dataPtr1 = &data)
(39,1)
(40,data)
(41,data)
(42,source[100-1] = '\\\\0')
(43,* data = *dataPtr1)
(44,data[100-1] = '\\\\0')
(45,'\\\\0')
(46,dataBuffer)
(47,* *dataPtr2 = &data)
(48,source)
(49,'\\\\0')
(50,char *)
(51,exit(-1)
(52,1)
(53,data)
(54,NULL)
(55,dataBuffer)
(56,dataBuffer)
(57,)
(58,)
(59,malloc(100*sizeof(char)
(60,dataBuffer)
(61,memset(source, 'C', 100-1)
(62,* data = *dataPtr2)
(63,)
(64,100-1)
(65,dataPtr2)
(66,data)
(67,)
(68,1)
(69,data = dataBuffer - 8)
(70,sizeof(char)
(71,dataPtr1)
(72,100-1)
(73,)
(74,data)
(75,dataPtr1)
(76,1)
(77,data)
(78,)
(79,*dataPtr2)
(80,-1)
(81,'A')
(82,source)
(83,dataPtr2)
(84,dataPtr2)
(85,100-1)
(86,data)
(87,* dataBuffer = (char *)
(88,source)
(89,'C')
(90,(char *)
(91,&data)
(92,data = NULL)
(93,100)
(94,data)
(95,printLine(data)
(96,memset(dataBuffer, 'A', 100-1)
(97,1)
(98,RET)
(99,&data)
(100,dataBuffer == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^