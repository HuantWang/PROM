-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42_bad()
{
    wchar_t * data;
    data = NULL;
    data = badSource(data);
    {
        size_t i;
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
42,45
42,46
43,44
45,46
48,49
48,50
51,52
52,53
52,54
53,54
53,55
54,55
56,57
56,58
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,31,33,36,38,40,44,46,47,49,50,55,57,58,59,64,65,68,69,72,78,80,83,85,90,92,93,94,98,100,104,106
-----computeFrom-----
13,14
13,15
19,20
19,21
48,49
48,50
52,53
52,54
56,57
56,58
62,63
62,64
66,67
66,68
75,76
75,77
87,88
87,89
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42_bad(){    wchar_t * data;    data = NULL;    data = badSource(data);    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42_bad
{    wchar_t * data;    data = NULL;    data = badSource(data);    {        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        size_t i;        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */        printWLine(data);        free(data);    }
size_t i;
size_t i;
size_t
size_t
i
i
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = L'\0';
data[100-1] = L'\0'
data[100-1]
data
data
100-1
100
1
L'\0'
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,31,0)
(3,31,0)
(28,9,0)
(25,24,0)
(10,24,0)
(11,16,0)
(22,17,0)
(8,15,0)
(32,34,0)
(23,24,0)
(15,9,0)
(28,17,0)
(0,5,0)
(7,9,0)
(21,25,0)
(20,34,0)
(30,23,0)
(6,25,0)
(4,17,0)
(34,30,0)
(33,23,0)
(13,24,0)
(29,9,0)
(9,5,0)
(23,30,0)
(34,9,0)
(15,31,0)
(2,31,0)
(31,5,0)
(14,31,0)
(17,5,0)
(29,31,0)
(35,28,0)
(1,31,0)
(9,28,0)
(34,24,0)
(19,23,0)
(30,27,0)
(16,24,0)
(12,29,0)
(11,30,1)
(29,9,1)
(6,16,1)
(16,24,1)
(14,25,1)
(23,24,1)
(19,34,1)
(21,6,1)
(29,12,1)
(34,24,1)
(28,35,1)
(9,28,1)
(18,29,1)
(7,17,1)
(8,14,1)
(13,3,1)
(28,17,1)
(15,9,1)
(6,24,1)
(34,9,1)
(24,10,1)
(16,11,1)
(17,22,1)
(3,9,1)
(15,8,1)
(22,4,1)
(10,13,1)
(35,7,1)
(23,33,1)
(25,24,1)
(20,25,1)
(30,23,1)
(34,32,1)
(12,15,1)
(25,21,1)
(32,20,1)
(33,19,1)
(21,25,2)
(30,23,2)
(25,24,2)
(16,24,2)
(16,25,2)
(15,9,2)
(20,25,2)
(30,25,2)
(32,25,2)
(33,25,2)
(11,25,2)
(34,24,2)
(19,25,2)
(28,17,2)
(6,25,2)
(29,9,2)
(23,24,2)
(23,25,2)
(34,25,2)
(25,25,2)
(34,9,2)
(9,28,2)
-----------------------------------
(0,data)
(1,i)
(2,for (i = 0; i < 100; i++)
(3,'\\\\0')
(4,data)
(5,)
(6,i)
(7,data)
(8,data)
(9,data = badSource(data)
(10,0)
(11,i)
(12,data)
(13,i)
(14,'\\\\0')
(15,printWLine(data)
(16,i++)
(17,data = NULL)
(18,RET)
(19,source)
(20,data)
(21,100)
(22,NULL)
(23,source[i])
(24,i = 0)
(25,i < 100)
(26,source)
(27,)
(28,badSource(data)
(29,free(data)
(30,data[i] = source[i])
(31,)
(32,i)
(33,i)
(34,data[i])
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^