-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Did not leave space for a null terminator */
    data = (char *)malloc(10*sizeof(char));
    if (data == NULL) {exit(-1);}
    {
        char source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memmove(data, source, (strlen(source) + 1) * sizeof(char));
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
74,76
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,79,81,82,85,86,90,92,96,98
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
74,75
74,76
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad(){    char * data;    data = NULL;    goto source;source:    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad
{    char * data;    data = NULL;    goto source;source:    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));    if (data == NULL) {exit(-1);}    {        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Did not leave space for a null terminator */    data = (char *)malloc(10*sizeof(char));
source
data = (char *)malloc(10*sizeof(char));
data = (char *)malloc(10*sizeof(char))
data
data
(char *)malloc(10*sizeof(char))
char *
char
*
*
malloc(10*sizeof(char))
malloc
malloc
10*sizeof(char)
10
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        char source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memmove(data, source, (strlen(source) + 1) * sizeof(char));        printLine(data);        free(data);    }
char source[10+1] = SRC_STRING;
char source[10+1] = SRC_STRING;
char
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memmove(data, source, (strlen(source) + 1) * sizeof(char));
memmove(data, source, (strlen(source) + 1) * sizeof(char))
memmove
memmove
data
data
source
source
(strlen(source) + 1) * sizeof(char)
(strlen(source) + 1)
strlen(source) + 1
strlen(source)
strlen
strlen
source
source
1
sizeof(char)
char
char

printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(11,34,0)
(26,20,0)
(27,34,0)
(2,14,0)
(0,34,0)
(2,15,0)
(6,5,0)
(36,40,0)
(7,25,0)
(24,38,0)
(0,40,0)
(28,11,0)
(32,18,0)
(39,42,0)
(3,37,0)
(15,2,0)
(22,5,0)
(35,5,0)
(17,38,0)
(37,34,0)
(12,29,0)
(33,40,0)
(30,15,0)
(1,0,0)
(25,7,0)
(4,11,0)
(34,5,0)
(37,25,0)
(18,7,0)
(43,10,0)
(25,29,0)
(37,20,0)
(31,33,0)
(38,41,0)
(33,34,0)
(17,39,0)
(37,40,0)
(39,34,0)
(39,17,0)
(40,5,0)
(23,37,0)
(8,7,0)
(9,10,0)
(29,25,0)
(25,37,0)
(42,39,0)
(38,17,0)
(18,20,0)
(20,40,0)
(19,20,0)
(10,5,0)
(13,41,0)
(16,5,0)
(41,38,0)
(34,39,0)
(7,18,0)
(25,7,1)
(37,34,1)
(34,39,1)
(10,43,1)
(23,3,1)
(25,29,1)
(33,34,1)
(18,32,1)
(27,16,1)
(15,30,1)
(29,12,1)
(13,24,1)
(26,19,1)
(24,27,1)
(12,7,1)
(7,18,1)
(39,17,1)
(18,20,1)
(1,37,1)
(39,42,1)
(38,41,1)
(37,20,1)
(21,33,1)
(28,4,1)
(32,23,1)
(0,1,1)
(41,13,1)
(0,34,1)
(4,34,1)
(20,26,1)
(33,31,1)
(19,11,1)
(7,8,1)
(43,9,1)
(30,11,1)
(11,28,1)
(19,2,1)
(2,15,1)
(31,0,1)
(17,38,1)
(11,34,1)
(8,18,1)
(16,10,1)
(3,20,1)
(37,25,1)
(25,29,2)
(39,42,2)
(39,17,2)
(34,39,2)
(38,41,2)
(17,38,2)
(37,20,2)
(25,7,2)
(37,34,2)
(18,20,2)
(30,11,2)
(2,11,2)
(33,34,2)
(2,15,2)
(15,11,2)
(7,18,2)
(37,25,2)
(0,34,2)
(11,34,2)
-----------------------------------
(0,printLine(data)
(1,data)
(2,exit(-1)
(3,data)
(4,data)
(5,)
(6,data)
(7,strlen(source)
(8,1)
(9,data)
(10,data = NULL)
(11,data == NULL)
(12,char)
(13,char)
(14,)
(15,-1)
(16,goto source;)
(17,malloc(10*sizeof(char)
(18,strlen(source)
(19,source)
(20,source[10+1] = SRC_STRING)
(21,RET)
(22,source:)
(23,source)
(24,10)
(25,(strlen(source)
(26,SRC_STRING)
(27,data)
(28,NULL)
(29,sizeof(char)
(30,1)
(31,data)
(32,source)
(33,free(data)
(34,data = (char *)
(35,if (data == NULL)
(36,source)
(37,memmove(data, source, (strlen(source)
(38,10*sizeof(char)
(39,(char *)
(40,)
(41,sizeof(char)
(42,char *)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^