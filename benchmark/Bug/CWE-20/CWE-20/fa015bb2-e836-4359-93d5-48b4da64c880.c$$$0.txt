-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int64_t_10_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(globalTrue)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
87,88
89,90
91,92
91,93
92,93
94,95
95,96
96,97
96,98
97,98
99,100
99,101
100,101
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,60,62,67,68,71,72,75,81,83,84,88,90,93,98,101,102
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
65,66
65,67
69,70
69,71
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int64_t_10_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int64_t_10_bad()
CWE416_Use_After_Free__malloc_free_int64_t_10_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(globalTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalTrue
globalTrue
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5LL;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5LL;            }
data[i] = 5LL;
data[i] = 5LL
data[i]
data
data
i
i
5LL
free(data);
free(data)
free
free
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLongLongLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
-----joern-----
(29,24,0)
(14,37,0)
(45,16,0)
(38,44,0)
(7,41,0)
(27,30,0)
(3,1,0)
(34,16,0)
(25,35,0)
(24,34,0)
(16,34,0)
(46,34,0)
(7,24,0)
(21,44,0)
(8,5,0)
(18,8,0)
(0,9,0)
(26,1,0)
(22,5,0)
(10,31,0)
(1,45,0)
(39,24,0)
(17,31,0)
(11,40,0)
(24,7,0)
(19,13,0)
(2,44,0)
(1,3,0)
(4,3,0)
(9,34,0)
(30,34,0)
(20,11,0)
(34,5,0)
(45,1,0)
(33,36,0)
(31,13,0)
(24,37,0)
(9,5,0)
(15,37,0)
(35,13,0)
(12,13,0)
(11,20,0)
(47,20,0)
(32,16,0)
(37,44,0)
(43,8,0)
(16,32,0)
(16,45,0)
(28,30,0)
(39,29,1)
(30,34,1)
(42,37,1)
(45,1,1)
(34,16,1)
(10,17,1)
(47,30,1)
(16,32,1)
(23,9,1)
(20,47,1)
(13,12,1)
(37,14,1)
(4,26,1)
(19,30,1)
(12,19,1)
(1,3,1)
(17,13,1)
(9,0,1)
(16,45,1)
(0,31,1)
(35,13,1)
(29,23,1)
(7,24,1)
(24,39,1)
(30,27,1)
(24,37,1)
(6,7,1)
(27,28,1)
(31,13,1)
(24,34,1)
(3,4,1)
(6,23,1)
(19,11,1)
(23,42,1)
(9,34,1)
(26,46,1)
(33,31,1)
(28,34,1)
(17,35,1)
(11,20,1)
(25,33,1)
(35,25,1)
(14,15,1)
(31,10,1)
(46,42,1)
(31,13,2)
(34,16,2)
(13,42,2)
(11,30,2)
(30,34,2)
(3,42,2)
(29,23,2)
(47,30,2)
(7,24,2)
(9,34,2)
(27,42,2)
(31,42,2)
(12,42,2)
(7,23,2)
(24,34,2)
(30,42,2)
(11,20,2)
(16,32,2)
(1,3,2)
(17,31,2)
(17,42,2)
(31,31,2)
(28,42,2)
(45,42,2)
(25,31,2)
(35,31,2)
(10,31,2)
(0,42,2)
(1,42,2)
(16,42,2)
(34,42,2)
(9,42,2)
(26,42,2)
(24,37,2)
(16,45,2)
(35,13,2)
(33,31,2)
(39,23,2)
(46,42,2)
(24,23,2)
(4,42,2)
(20,30,2)
(45,1,2)
(19,42,2)
(10,42,2)
-----------------------------------
(0,data)
(1,100*sizeof(int64_t)
(2,data)
(3,sizeof(int64_t)
(4,int64_t)
(5,)
(6,RET)
(7,printLongLongLine(data[0])
(8,)
(9,free(data)
(10,100)
(11,exit(-1)
(12,0)
(13,i = 0)
(14,NULL)
(15,data)
(16,(int64_t *)
(17,i)
(18,i)
(19,i)
(20,-1)
(21,if(globalTrue)
(22,if (data == NULL)
(23,globalTrue)
(24,data[0])
(25,i)
(26,100)
(27,NULL)
(28,data)
(29,data)
(30,data == NULL)
(31,i < 100)
(32,int64_t *)
(33,L)
(34,data = (int64_t *)
(35,i++)
(36,)
(37,data = NULL)
(38,if(globalTrue)
(39,0)
(40,)
(41,)
(42,globalTrue)
(43,for(i = 0; i < 100; i++)
(44,)
(45,malloc(100*sizeof(int64_t)
(46,data)
(47,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^