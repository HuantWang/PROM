-----label-----
1
-----code-----
static void badSink(int * data)
{
    {
        int source[100] = {0}; /* fill with 0's */
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        memmove(data, source, 100*sizeof(int));
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,6,8,9,14,16,18,21,25,27,29,31,34,35,39,42,43,47,49
-----computeFrom-----
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int * data){    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
static void
badSink(int * data)
badSink
int * data
int
* data
*
data
{    {        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }}
{        int source[100] = {0}; /* fill with 0's */        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */        memmove(data, source, 100*sizeof(int));        printIntLine(data[0]);        free(data);    }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int));
memmove(data, source, 100*sizeof(int))
memmove
memmove
data
data
source
source
100*sizeof(int)
100
sizeof(int)
int
int

printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(7,3,0)
(4,0,0)
(17,16,0)
(4,1,0)
(15,16,0)
(4,3,0)
(5,19,0)
(19,12,0)
(4,19,0)
(1,6,0)
(10,4,0)
(15,19,0)
(1,4,0)
(16,15,0)
(11,16,0)
(8,9,0)
(18,4,0)
(9,19,0)
(6,1,0)
(2,1,0)
(13,6,0)
(9,0,0)
(16,0,0)
(3,19,0)
(15,16,1)
(8,15,1)
(14,9,1)
(4,1,1)
(11,4,1)
(1,6,1)
(13,2,1)
(9,8,1)
(4,3,1)
(17,11,1)
(2,10,1)
(10,18,1)
(9,0,1)
(16,17,1)
(16,0,1)
(3,7,1)
(4,0,1)
(18,3,1)
(6,13,1)
(4,1,2)
(4,0,2)
(16,0,2)
(9,0,2)
(15,16,2)
(1,6,2)
(4,3,2)
-----------------------------------
(0,int * data)
(1,100*sizeof(int)
(2,100)
(3,source[100] = {0})
(4,memmove(data, source, 100*sizeof(int)
(5,source)
(6,sizeof(int)
(7,source)
(8,data)
(9,free(data)
(10,source)
(11,data)
(12,)
(13,int)
(14,RET)
(15,printIntLine(data[0])
(16,data[0])
(17,0)
(18,data)
(19,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^