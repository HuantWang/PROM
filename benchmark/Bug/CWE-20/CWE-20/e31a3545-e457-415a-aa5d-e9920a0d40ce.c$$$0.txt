-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07_bad()
{
    if(staticFive==5)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printWLine((wchar_t *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */
            printWLine((wchar_t *)structCharVoid.charFirst);
            printWLine((wchar_t *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
26,28
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
45,46
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
55,56
56,57
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
88,89
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
101,102
103,104
103,105
104,105
-----nextToken-----
2,4,9,10,16,18,23,24,27,29,31,35,38,40,43,44,48,51,52,54,58,64,65,73,74,77,78,79,80,84,87,89,92,93,97,100,102,105,106
-----computeFrom-----
7,8
7,9
20,21
20,22
60,61
60,62
66,67
66,68
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07_bad(){    if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07_bad()
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07_bad
{    if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }}
if(staticFive==5)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
staticFive==5
staticFive
staticFive
5
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printWLine((wchar_t *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'; /* null terminate the string */            printWLine((wchar_t *)structCharVoid.charFirst);            printWLine((wchar_t *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1] = L'\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))-1
(sizeof(structCharVoid.charFirst)/sizeof(wchar_t))
sizeof(structCharVoid.charFirst)/sizeof(wchar_t)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(wchar_t)
wchar_t
wchar_t

1
L'\0'
printWLine((wchar_t *)structCharVoid.charFirst);
printWLine((wchar_t *)structCharVoid.charFirst)
printWLine
printWLine
(wchar_t *)structCharVoid.charFirst
wchar_t *
wchar_t
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printWLine((wchar_t *)structCharVoid.voidSecond);
printWLine((wchar_t *)structCharVoid.voidSecond)
printWLine
printWLine
(wchar_t *)structCharVoid.voidSecond
wchar_t *
wchar_t
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(31,23,0)
(41,26,0)
(17,16,0)
(18,8,0)
(19,35,0)
(1,16,0)
(35,8,0)
(35,19,0)
(10,23,0)
(28,3,0)
(32,11,0)
(39,17,0)
(35,24,0)
(9,23,0)
(29,4,0)
(16,17,0)
(24,35,0)
(6,29,0)
(14,3,0)
(11,10,0)
(10,15,0)
(5,20,0)
(29,31,0)
(27,1,0)
(10,11,0)
(31,29,0)
(19,23,0)
(33,23,0)
(13,33,0)
(38,8,0)
(30,17,0)
(21,26,0)
(13,7,0)
(8,35,0)
(3,16,0)
(1,13,0)
(12,15,0)
(8,16,0)
(34,1,0)
(40,15,0)
(42,4,0)
(33,13,0)
(17,39,0)
(16,23,0)
(0,10,0)
(4,29,0)
(37,23,0)
(29,6,0)
(13,1,0)
(2,4,0)
(7,13,0)
(23,22,0)
(15,10,0)
(10,11,1)
(40,12,1)
(10,15,1)
(19,35,1)
(1,16,1)
(25,19,1)
(33,13,1)
(26,21,1)
(28,26,1)
(34,16,1)
(30,3,1)
(25,26,1)
(8,18,1)
(18,38,1)
(13,7,1)
(0,15,1)
(15,40,1)
(35,8,1)
(42,9,1)
(3,14,1)
(32,0,1)
(11,32,1)
(31,29,1)
(29,6,1)
(38,31,1)
(12,33,1)
(9,10,1)
(14,28,1)
(35,24,1)
(4,2,1)
(29,4,1)
(21,41,1)
(8,16,1)
(13,1,1)
(17,39,1)
(2,42,1)
(17,30,1)
(1,27,1)
(27,34,1)
(16,17,1)
(1,16,2)
(12,26,2)
(31,26,2)
(33,26,2)
(17,26,2)
(3,26,2)
(28,26,2)
(32,26,2)
(2,26,2)
(9,26,2)
(13,26,2)
(38,26,2)
(1,26,2)
(29,4,2)
(29,6,2)
(16,17,2)
(42,26,2)
(35,24,2)
(29,26,2)
(40,26,2)
(18,26,2)
(35,26,2)
(10,11,2)
(13,1,2)
(19,35,2)
(10,15,2)
(35,8,2)
(15,26,2)
(19,26,2)
(17,39,2)
(4,26,2)
(10,26,2)
(8,26,2)
(8,16,2)
(27,26,2)
(33,13,2)
(34,26,2)
(30,26,2)
(16,26,2)
(14,26,2)
(13,7,2)
(31,29,2)
(0,26,2)
(11,26,2)
-----------------------------------
(0,SRC_STR)
(1,structCharVoid.voidSecond)
(2,charFirst)
(3,structCharVoid.voidSecond)
(4,structCharVoid.charFirst)
(5,if(staticFive==5)
(6,wchar_t *)
(7,wchar_t *)
(8,structCharVoid.voidSecond)
(9,'\\\\0')
(10,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(11,sizeof(structCharVoid)
(12,structCharVoid)
(13,(wchar_t *)
(14,voidSecond)
(15,structCharVoid.charFirst)
(16,structCharVoid.voidSecond = (void *)
(17,(void *)
(18,voidSecond)
(19,printWLine((wchar_t *)
(20,)
(21,5)
(22,)
(23,)
(24,wchar_t *)
(25,RET)
(26,staticFive==5)
(27,voidSecond)
(28,structCharVoid)
(29,(wchar_t *)
(30,SRC_STR)
(31,printWLine((wchar_t *)
(32,structCharVoid)
(33,printWLine((wchar_t *)
(34,structCharVoid)
(35,(wchar_t *)
(36,\'\\\\0\')
(37,structCharVoid)
(38,structCharVoid)
(39,void *)
(40,charFirst)
(41,staticFive)
(42,structCharVoid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^