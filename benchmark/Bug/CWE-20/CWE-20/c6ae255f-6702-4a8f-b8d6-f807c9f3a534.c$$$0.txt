-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,83,85
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,9,0)
(32,24,0)
(13,32,0)
(26,33,0)
(15,24,0)
(23,13,0)
(21,13,0)
(1,32,0)
(36,24,0)
(2,20,0)
(19,24,0)
(2,25,0)
(15,25,0)
(8,4,0)
(30,29,0)
(37,17,0)
(33,3,0)
(25,17,0)
(2,31,0)
(9,35,0)
(0,25,0)
(33,20,0)
(36,4,0)
(5,36,0)
(13,4,0)
(20,33,0)
(9,12,0)
(4,29,0)
(25,2,0)
(18,4,0)
(14,12,0)
(6,25,0)
(15,4,0)
(22,32,0)
(24,29,0)
(13,25,0)
(36,25,0)
(16,6,0)
(11,15,0)
(20,2,0)
(28,3,0)
(10,29,0)
(7,6,0)
(31,2,0)
(13,24,0)
(3,33,0)
(15,11,1)
(4,8,1)
(12,14,1)
(36,4,1)
(1,27,1)
(36,5,1)
(2,31,1)
(15,4,1)
(13,25,1)
(0,27,1)
(28,26,1)
(34,15,1)
(6,7,1)
(8,18,1)
(27,4,1)
(13,21,1)
(15,25,1)
(22,1,1)
(26,0,1)
(6,25,1)
(16,25,1)
(13,4,1)
(1,6,1)
(14,6,1)
(11,36,1)
(36,25,1)
(3,28,1)
(5,13,1)
(25,2,1)
(33,3,1)
(20,33,1)
(9,12,1)
(1,9,1)
(7,16,1)
(2,20,1)
(32,22,1)
(23,32,1)
(13,32,1)
(21,23,1)
(3,27,2)
(9,6,2)
(6,25,2)
(13,25,2)
(25,2,2)
(2,31,2)
(2,27,2)
(25,27,2)
(2,20,2)
(36,4,2)
(9,12,2)
(14,6,2)
(20,27,2)
(36,25,2)
(6,27,2)
(33,27,2)
(13,32,2)
(13,4,2)
(28,27,2)
(12,6,2)
(7,27,2)
(20,33,2)
(26,27,2)
(15,4,2)
(33,3,2)
(15,25,2)
(0,27,2)
(16,27,2)
-----------------------------------
(0,data)
(1,source)
(2,(wchar_t *)
(3,sizeof(wchar_t)
(4,data = NULL)
(5,data)
(6,data == NULL)
(7,NULL)
(8,NULL)
(9,exit(-1)
(10,if(STATIC_CONST_TRUE)
(11,data)
(12,-1)
(13,wcscpy(data, source)
(14,1)
(15,free(data)
(16,data)
(17,)
(18,data)
(19,source)
(20,malloc(10*sizeof(wchar_t)
(21,source)
(22,SRC_STRING)
(23,data)
(24,)
(25,data = (wchar_t *)
(26,10)
(27,STATIC_CONST_TRUE)
(28,wchar_t)
(29,)
(30,data)
(31,wchar_t *)
(32,source[10+1] = SRC_STRING)
(33,10*sizeof(wchar_t)
(34,RET)
(35,)
(36,printWLine(data)
(37,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^