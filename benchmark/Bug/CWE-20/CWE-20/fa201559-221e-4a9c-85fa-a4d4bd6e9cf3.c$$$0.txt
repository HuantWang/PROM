-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(twoIntsStruct));
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
107,112
108,109
109,110
109,111
110,111
112,113
112,114
114,115
116,117
116,118
117,118
118,119
118,120
119,120
121,122
123,124
123,125
123,126
123,127
124,125
125,126
125,127
126,127
129,130
129,131
130,131
133,134
134,135
136,137
136,138
137,138
138,139
138,140
139,140
139,141
140,141
140,142
141,142
143,144
147,148
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
157,158
158,159
158,160
158,161
158,162
159,160
161,162
163,164
165,166
165,167
167,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
177,178
177,179
178,179
181,182
182,183
182,184
183,184
185,186
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,92,94,99,101,102,106,111,113,115,120,122,127,128,131,132,135,142,144,145,146,152,154,155,156,160,162,164,166,170,171,175,179,180,184,186
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
89,90
89,91
125,126
125,127
129,130
129,131
138,139
138,140
148,149
148,150
165,166
165,167
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32_bad(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32_bad
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        twoIntsStruct * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(50*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(50*sizeof(twoIntsStruct))
malloc
malloc
50*sizeof(twoIntsStruct)
50
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);            free(data);        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(88,9,0)
(52,70,0)
(86,61,0)
(27,82,0)
(54,36,0)
(43,23,0)
(84,5,0)
(85,84,0)
(63,1,0)
(37,40,0)
(89,66,0)
(82,52,0)
(50,24,0)
(58,25,0)
(61,68,0)
(9,88,0)
(59,9,0)
(22,61,0)
(88,30,0)
(77,40,0)
(44,1,0)
(23,34,0)
(81,65,0)
(80,0,0)
(57,34,0)
(33,70,0)
(70,34,0)
(61,39,0)
(69,22,0)
(53,70,0)
(2,68,0)
(1,34,0)
(41,45,0)
(32,5,0)
(66,49,0)
(14,42,0)
(38,39,0)
(51,54,0)
(39,38,0)
(31,44,0)
(33,52,0)
(26,33,0)
(45,18,0)
(4,61,0)
(84,0,0)
(39,57,0)
(60,84,0)
(56,66,0)
(5,42,0)
(51,68,0)
(13,68,0)
(10,22,0)
(17,37,0)
(24,67,0)
(25,0,0)
(15,72,0)
(49,66,0)
(44,33,0)
(68,57,0)
(36,39,0)
(52,24,0)
(35,38,0)
(45,70,0)
(28,21,0)
(47,49,0)
(78,18,0)
(74,23,0)
(18,1,0)
(67,24,0)
(46,69,0)
(12,36,0)
(83,0,0)
(62,34,0)
(29,81,0)
(64,34,0)
(40,37,0)
(48,52,0)
(24,52,0)
(90,34,0)
(19,8,0)
(79,82,0)
(7,13,0)
(71,34,0)
(8,68,0)
(24,50,0)
(72,0,0)
(42,65,0)
(76,71,0)
(16,71,0)
(22,69,0)
(54,51,0)
(66,0,0)
(38,71,0)
(75,8,0)
(20,76,0)
(36,54,0)
(13,39,0)
(1,21,0)
(67,37,0)
(87,72,0)
(55,39,0)
(71,76,0)
(6,70,0)
(37,67,0)
(18,45,0)
(61,22,0)
(3,36,0)
(21,1,0)
(5,84,0)
(11,57,0)
(49,81,0)
(72,0,1)
(56,89,1)
(24,50,1)
(9,59,1)
(38,35,1)
(49,47,1)
(67,37,1)
(42,14,1)
(86,4,1)
(35,55,1)
(39,38,1)
(43,71,1)
(60,81,1)
(84,85,1)
(52,24,1)
(88,9,1)
(18,1,1)
(58,42,1)
(0,83,1)
(31,88,1)
(37,40,1)
(36,39,1)
(25,58,1)
(44,31,1)
(36,3,1)
(83,80,1)
(73,13,1)
(38,71,1)
(66,0,1)
(32,84,1)
(3,12,1)
(44,1,1)
(54,36,1)
(33,52,1)
(46,10,1)
(22,69,1)
(12,61,1)
(80,39,1)
(84,0,1)
(59,82,1)
(31,82,1)
(47,66,1)
(51,54,1)
(15,0,1)
(61,22,1)
(82,52,1)
(48,45,1)
(85,60,1)
(14,5,1)
(87,15,1)
(1,21,1)
(82,27,1)
(66,56,1)
(77,17,1)
(23,74,1)
(21,28,1)
(41,23,1)
(26,44,1)
(13,7,1)
(69,46,1)
(79,52,1)
(16,1,1)
(25,0,1)
(89,72,1)
(5,84,1)
(27,79,1)
(28,63,1)
(40,77,1)
(81,29,1)
(61,39,1)
(5,32,1)
(33,26,1)
(10,86,1)
(24,67,1)
(45,18,1)
(76,20,1)
(4,72,1)
(74,43,1)
(18,78,1)
(13,39,1)
(72,87,1)
(49,66,1)
(15,25,1)
(29,49,1)
(17,48,1)
(7,51,1)
(55,33,1)
(78,41,1)
(71,76,1)
(20,16,1)
(52,24,2)
(56,72,2)
(25,0,2)
(89,72,2)
(33,52,2)
(1,21,2)
(58,72,2)
(88,82,2)
(60,72,2)
(82,52,2)
(71,76,2)
(36,39,2)
(88,9,2)
(38,71,2)
(24,50,2)
(49,66,2)
(87,72,2)
(13,39,2)
(54,36,2)
(51,54,2)
(84,0,2)
(47,72,2)
(84,72,2)
(72,72,2)
(49,72,2)
(72,0,2)
(32,72,2)
(14,72,2)
(22,69,2)
(39,38,2)
(5,72,2)
(61,22,2)
(67,37,2)
(59,82,2)
(25,72,2)
(18,1,2)
(66,0,2)
(24,67,2)
(85,72,2)
(37,40,2)
(42,72,2)
(45,18,2)
(15,72,2)
(61,39,2)
(9,82,2)
(44,1,2)
(81,72,2)
(5,84,2)
(29,72,2)
(66,72,2)
-----------------------------------
(0,i = 0)
(1,* *dataPtr1 = &data)
(2,source)
(3,0)
(4,data)
(5,source[i].intTwo)
(6,if (data == NULL)
(7,data)
(8,)
(9,-1)
(10,100)
(11,data)
(12,data)
(13,free(data)
(14,0)
(15,i)
(16,dataPtr2)
(17,50)
(18,*dataPtr1)
(19,for (i = 0; i < 100; i++)
(20,data)
(21,&data)
(22,100*sizeof(twoIntsStruct)
(23,data = NULL)
(24,(twoIntsStruct *)
(25,i++)
(26,data)
(27,NULL)
(28,data)
(29,0)
(30,)
(31,dataPtr1)
(32,intTwo)
(33,*dataPtr1 = data)
(34,)
(35,dataPtr2)
(36,data[0])
(37,50*sizeof(twoIntsStruct)
(38,*dataPtr2)
(39,* data = *dataPtr2)
(40,sizeof(twoIntsStruct)
(41,data)
(42,source[i].intTwo = 0)
(43,data)
(44,*dataPtr1)
(45,* data = *dataPtr1)
(46,twoIntsStruct)
(47,intOne)
(48,data)
(49,source[i].intOne)
(50,twoIntsStruct *)
(51,printStructLine(&data[0])
(52,data = (twoIntsStruct *)
(53,data)
(54,&data[0])
(55,data)
(56,i)
(57,)
(58,i)
(59,1)
(60,source)
(61,memmove(data, source, 100*sizeof(twoIntsStruct)
(62,dataPtr1)
(63,dataPtr1)
(64,dataPtr2)
(65,)
(66,source[i])
(67,malloc(50*sizeof(twoIntsStruct)
(68,)
(69,sizeof(twoIntsStruct)
(70,)
(71,* *dataPtr2 = &data)
(72,i < 100)
(73,RET)
(74,NULL)
(75,i)
(76,&data)
(77,twoIntsStruct)
(78,dataPtr1)
(79,data)
(80,i)
(81,source[i].intOne = 0)
(82,data == NULL)
(83,0)
(84,source[i])
(85,i)
(86,source)
(87,100)
(88,exit(-1)
(89,source)
(90,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^