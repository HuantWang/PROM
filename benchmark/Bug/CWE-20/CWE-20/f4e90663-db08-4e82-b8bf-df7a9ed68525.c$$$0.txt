-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_06_bad()
{
    wchar_t * data;
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    if(STATIC_CONST_FIVE==5)
    {
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        data[0] = L'\0'; /* null terminate */
    }
    {
        wchar_t source[100];
        wmemset(source, L'C', 100-1); /* fill with L'C's */
        source[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        SNPRINTF(data, 100, L"%s", source);
        printWLine(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
54,55
54,56
55,56
55,57
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
68,70
69,70
73,74
73,75
73,76
73,77
73,78
74,75
75,76
75,77
77,78
77,79
79,80
81,82
82,83
82,84
82,85
82,86
83,84
85,86
88,89
88,90
91,92
92,93
92,94
93,94
93,95
94,95
96,97
96,98
100,101
101,102
101,103
101,104
101,105
101,106
102,103
104,105
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,14,16,17,21,23,26,28,31,32,35,37,38,42,44,47,49,52,53,57,58,63,65,70,71,72,76,78,80,84,86,87,89,90,95,97,98,99,103,105,106,107,109,113,115
-----computeFrom-----
27,28
27,29
48,49
48,50
55,56
55,57
61,62
61,63
67,68
67,69
88,89
88,90
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_06_bad(){    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_06_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_06_bad
{    wchar_t * data;    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }    {        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
wchar_t
* dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t))
*
dataBadBuffer
= (wchar_t *)ALLOCA(50*sizeof(wchar_t))
(wchar_t *)ALLOCA(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(50*sizeof(wchar_t))
ALLOCA
ALLOCA
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
dataGoodBuffer
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if(STATIC_CONST_FIVE==5)    {        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        data[0] = L'\0'; /* null terminate */    }
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
data[0] = L'\0';
data[0] = L'\0'
data[0]
data
data
0
L'\0'
{        wchar_t source[100];        wmemset(source, L'C', 100-1); /* fill with L'C's */        source[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */        SNPRINTF(data, 100, L"%s", source);        printWLine(data);    }
wchar_t source[100];
wchar_t source[100];
wchar_t
source[100]
source
[100]
100
wmemset(source, L'C', 100-1);
wmemset(source, L'C', 100-1)
wmemset
wmemset
source
source
L'C'
100-1
100
1
source[100-1] = L'\0';
source[100-1] = L'\0'
source[100-1]
source
source
100-1
100
1
L'\0'
SNPRINTF(data, 100, L"%s", source);
SNPRINTF(data, 100, L"%s", source)
SNPRINTF
SNPRINTF
data
data
100
L"%s"
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
-----joern-----
(35,22,0)
(11,34,0)
(17,37,0)
(22,15,0)
(3,20,0)
(33,23,0)
(12,21,0)
(29,20,0)
(28,8,0)
(11,2,0)
(8,22,0)
(34,11,0)
(5,15,0)
(11,5,0)
(7,3,0)
(20,29,0)
(0,3,0)
(18,15,0)
(10,23,0)
(9,15,0)
(2,11,0)
(14,0,0)
(20,3,0)
(31,15,0)
(25,29,0)
(23,33,0)
(19,21,0)
(1,22,0)
(36,37,0)
(29,21,0)
(12,30,0)
(27,15,0)
(8,12,0)
(34,33,0)
(4,12,0)
(16,30,0)
(32,12,0)
(21,15,0)
(26,33,0)
(21,29,0)
(29,25,0)
(5,11,0)
(3,0,0)
(6,5,0)
(33,34,0)
(36,17,1)
(29,25,1)
(11,2,1)
(23,10,1)
(28,35,1)
(16,12,1)
(29,20,1)
(37,36,1)
(17,5,1)
(34,33,1)
(10,26,1)
(14,7,1)
(35,37,1)
(5,11,1)
(8,28,1)
(26,6,1)
(35,16,1)
(0,14,1)
(7,19,1)
(8,12,1)
(21,29,1)
(32,4,1)
(13,8,1)
(3,0,1)
(33,23,1)
(12,32,1)
(6,21,1)
(11,34,1)
(4,37,1)
(20,3,1)
(12,21,1)
(5,11,2)
(12,37,2)
(21,29,2)
(29,25,2)
(20,3,2)
(3,0,2)
(12,21,2)
(34,33,2)
(11,34,2)
(11,2,2)
(33,23,2)
(4,37,2)
(8,12,2)
(32,37,2)
(29,20,2)
(16,37,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,source)
(2,wchar_t *)
(3,50*sizeof(wchar_t)
(4,data)
(5,* dataGoodBuffer = (wchar_t *)
(6,dataGoodBuffer)
(7,50)
(8,printWLine(data)
(9,dataGoodBuffer)
(10,wchar_t)
(11,(wchar_t *)
(12,data = dataBadBuffer)
(13,RET)
(14,wchar_t)
(15,)
(16,'\\\\0')
(17,STATIC_CONST_FIVE)
(18,data)
(19,dataBadBuffer)
(20,ALLOCA(50*sizeof(wchar_t)
(21,* dataBadBuffer = (wchar_t *)
(22,)
(23,sizeof(wchar_t)
(24,\'\\\\0\')
(25,wchar_t *)
(26,100)
(27,if(STATIC_CONST_FIVE==5)
(28,data)
(29,(wchar_t *)
(30,)
(31,dataBadBuffer)
(32,dataBadBuffer)
(33,100*sizeof(wchar_t)
(34,ALLOCA(100*sizeof(wchar_t)
(35,'\\\\0')
(36,5)
(37,STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^