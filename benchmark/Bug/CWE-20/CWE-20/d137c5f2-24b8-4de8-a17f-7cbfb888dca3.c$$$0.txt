-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        data[0] = '\0'; /* null terminate */
    }
    {
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */
        memmove(data, source, 100*sizeof(char));
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
77,79
80,81
81,82
81,83
82,83
82,84
83,84
85,86
85,87
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
97,99
99,100
100,101
100,102
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
112,113
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,67,69,73,75,76,78,79,84,86,87,88,92,94,96,98,101,102,107,109,110,111,115,117,121,123
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
77,78
77,79
81,82
81,83
85,86
85,87
97,98
97,99
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }    {        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        data[0] = '\0'; /* null terminate */    }
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
{        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */        memmove(data, source, 100*sizeof(char));        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */        printLine(data);        free(data);    }
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
memmove(data, source, 100*sizeof(char));
memmove(data, source, 100*sizeof(char))
memmove
memmove
data
data
source
source
100*sizeof(char)
100
sizeof(char)
char
char

data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,40,0)
(26,57,0)
(4,9,0)
(51,1,0)
(57,46,0)
(15,59,0)
(4,27,0)
(67,33,0)
(55,1,0)
(52,27,0)
(1,51,0)
(1,55,0)
(58,59,0)
(62,2,0)
(53,48,0)
(13,52,0)
(54,4,0)
(9,4,0)
(28,58,0)
(48,36,0)
(0,64,0)
(62,50,0)
(45,1,0)
(37,52,0)
(8,37,0)
(27,61,0)
(32,9,0)
(17,4,0)
(30,9,0)
(33,51,0)
(50,62,0)
(21,51,0)
(40,59,0)
(10,8,0)
(46,59,0)
(42,57,0)
(57,26,0)
(29,22,0)
(38,46,0)
(40,11,0)
(25,39,0)
(22,40,0)
(51,44,0)
(49,8,0)
(12,11,0)
(63,64,0)
(16,46,0)
(40,22,0)
(68,22,0)
(6,21,0)
(58,27,0)
(47,0,0)
(46,51,0)
(23,37,0)
(46,27,0)
(18,27,0)
(34,21,0)
(5,61,0)
(58,51,0)
(37,8,0)
(48,51,0)
(56,61,0)
(40,51,0)
(59,61,0)
(19,26,0)
(35,39,0)
(45,0,0)
(24,51,0)
(1,45,0)
(46,57,0)
(14,36,0)
(7,59,0)
(36,44,0)
(33,27,0)
(0,45,0)
(33,59,0)
(41,48,0)
(20,50,0)
(11,27,0)
(65,44,0)
(64,0,0)
(38,16,1)
(49,10,1)
(11,12,1)
(42,38,1)
(12,40,1)
(28,11,1)
(52,13,1)
(46,59,1)
(30,32,1)
(41,53,1)
(45,0,1)
(57,26,1)
(31,33,1)
(35,59,1)
(58,59,1)
(53,21,1)
(39,25,1)
(17,54,1)
(37,8,1)
(51,1,1)
(48,41,1)
(24,39,1)
(22,29,1)
(26,19,1)
(19,42,1)
(9,30,1)
(58,28,1)
(62,50,1)
(63,47,1)
(40,51,1)
(21,51,1)
(0,64,1)
(46,57,1)
(16,52,1)
(46,51,1)
(50,20,1)
(13,37,1)
(58,51,1)
(21,6,1)
(7,15,1)
(40,59,1)
(32,17,1)
(8,49,1)
(1,45,1)
(54,36,1)
(53,62,1)
(48,51,1)
(54,39,1)
(23,4,1)
(40,22,1)
(68,3,1)
(20,21,1)
(59,7,1)
(64,63,1)
(47,24,1)
(33,51,1)
(3,46,1)
(67,58,1)
(1,55,1)
(33,67,1)
(29,68,1)
(34,51,1)
(10,23,1)
(14,48,1)
(6,34,1)
(25,35,1)
(36,14,1)
(4,9,1)
(33,59,1)
(51,1,2)
(24,39,2)
(53,39,2)
(1,39,2)
(40,51,2)
(62,21,2)
(36,39,2)
(1,55,2)
(33,59,2)
(37,8,2)
(20,21,2)
(41,39,2)
(46,51,2)
(0,39,2)
(21,51,2)
(50,21,2)
(62,50,2)
(51,39,2)
(40,22,2)
(40,59,2)
(45,0,2)
(0,64,2)
(33,51,2)
(34,39,2)
(45,39,2)
(48,51,2)
(63,39,2)
(46,59,2)
(4,9,2)
(14,39,2)
(1,45,2)
(6,39,2)
(57,26,2)
(58,59,2)
(46,57,2)
(58,51,2)
(48,39,2)
(47,39,2)
(21,39,2)
(64,39,2)
-----------------------------------
(0,50*sizeof(char)
(1,(char *)
(2,)
(3,data)
(4,memset(source, \'C\', 100-1)
(5,data)
(6,NULL)
(7,NULL)
(8,100-1)
(9,100-1)
(10,100)
(11,data[100-1] = '\\\\0')
(12,'\\\\0')
(13,'\\\\0')
(14,'\\\\0')
(15,data)
(16,data)
(17,'C')
(18,source)
(19,char)
(20,1)
(21,data == NULL)
(22,100-1)
(23,source)
(24,data)
(25,5)
(26,sizeof(char)
(27,)
(28,data)
(29,1)
(30,1)
(31,RET)
(32,100)
(33,free(data)
(34,data)
(35,GLOBAL_CONST_FIVE)
(36,data[0] = \'\\\\0\')
(37,source[100-1])
(38,source)
(39,GLOBAL_CONST_FIVE==5)
(40,data[100-1])
(41,0)
(42,100)
(43,data[0] = '\\\\0')
(44,)
(45,malloc(50*sizeof(char)
(46,memmove(data, source, 100*sizeof(char)
(47,50)
(48,data[0])
(49,1)
(50,-1)
(51,data = (char *)
(52,source[100-1] = '\\\\0')
(53,data)
(54,source)
(55,char *)
(56,if(GLOBAL_CONST_FIVE==5)
(57,100*sizeof(char)
(58,printLine(data)
(59,data = NULL)
(60,\'\\\\0\')
(61,)
(62,exit(-1)
(63,char)
(64,sizeof(char)
(65,if (data == NULL)
(66,memset(source, 'C', 100-1)
(67,data)
(68,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^