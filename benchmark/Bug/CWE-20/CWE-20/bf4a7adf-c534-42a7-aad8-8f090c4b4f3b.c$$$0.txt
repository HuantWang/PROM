-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_07_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticFive==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_07_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_07_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_07_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticFive==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(43,15,0)
(31,15,0)
(24,46,0)
(4,26,0)
(16,50,0)
(21,34,0)
(34,21,0)
(46,52,0)
(15,23,0)
(33,6,0)
(15,46,0)
(44,45,0)
(18,23,0)
(25,1,0)
(13,50,0)
(35,48,0)
(32,2,0)
(51,30,0)
(52,46,0)
(46,24,0)
(3,34,0)
(24,13,0)
(2,10,0)
(6,15,0)
(42,19,0)
(43,23,0)
(31,23,0)
(46,15,0)
(5,43,0)
(45,48,0)
(34,27,0)
(8,0,0)
(25,49,0)
(50,19,0)
(39,13,0)
(13,34,0)
(38,1,0)
(11,50,0)
(45,50,0)
(45,34,0)
(41,19,0)
(1,25,0)
(47,40,0)
(17,19,0)
(28,23,0)
(20,6,0)
(12,26,0)
(13,0,0)
(29,40,0)
(22,28,0)
(0,13,0)
(28,15,0)
(48,45,0)
(36,15,0)
(13,24,0)
(7,43,0)
(30,14,0)
(37,31,0)
(53,30,0)
(13,50,1)
(6,15,1)
(0,8,1)
(13,34,1)
(4,50,1)
(45,34,1)
(15,46,1)
(1,38,1)
(13,0,1)
(43,5,1)
(29,34,1)
(2,32,1)
(5,7,1)
(43,15,1)
(50,11,1)
(39,36,1)
(45,50,1)
(11,16,1)
(6,33,1)
(36,45,1)
(46,52,1)
(22,31,1)
(3,26,1)
(21,3,1)
(25,1,1)
(29,26,1)
(28,22,1)
(31,15,1)
(45,48,1)
(8,39,1)
(28,15,1)
(33,20,1)
(7,6,1)
(47,29,1)
(46,24,1)
(20,15,1)
(26,12,1)
(9,28,1)
(9,2,1)
(38,6,1)
(31,37,1)
(40,47,1)
(24,13,1)
(48,35,1)
(37,43,1)
(44,40,1)
(7,25,1)
(32,45,1)
(35,44,1)
(12,4,1)
(9,40,1)
(34,21,1)
(8,45,2)
(36,45,2)
(0,45,2)
(15,46,2)
(33,45,2)
(31,45,2)
(46,45,2)
(34,21,2)
(21,26,2)
(28,15,2)
(13,34,2)
(46,24,2)
(45,40,2)
(24,13,2)
(45,50,2)
(38,6,2)
(3,26,2)
(46,52,2)
(45,34,2)
(15,45,2)
(24,45,2)
(25,6,2)
(43,15,2)
(6,45,2)
(13,0,2)
(45,48,2)
(13,45,2)
(37,45,2)
(2,45,2)
(28,45,2)
(25,1,2)
(34,26,2)
(44,40,2)
(20,45,2)
(39,45,2)
(7,45,2)
(13,50,2)
(43,45,2)
(22,45,2)
(1,6,2)
(5,45,2)
(32,45,2)
(6,15,2)
(48,40,2)
(35,40,2)
(31,15,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,-1)
(2,printLine("Input is less than the length of the source string")
(3,data)
(4,staticFive)
(5,HELLO_STRING)
(6,myString == NULL)
(7,myString)
(8,wchar_t)
(9,RET)
(10,)
(11,0)
(12,5)
(13,data*sizeof(wchar_t)
(14,)
(15,myString = (wchar_t *)
(16,data)
(17,if(staticFive==5)
(18,if (myString == NULL)
(19,)
(20,myString)
(21,rand()
(22,myString)
(23,)
(24,malloc(data*sizeof(wchar_t)
(25,exit(-1)
(26,staticFive==5)
(27,)
(28,free(myString)
(29,staticFive)
(30,)
(31,printWLine(myString)
(32,"Input is less than the length of the source string")
(33,NULL)
(34,data = rand()
(35,HELLO_STRING)
(36,myString)
(37,myString)
(38,1)
(39,data)
(40,staticFive==5)
(41,data)
(42,if(staticFive==5)
(43,wcscpy(myString, HELLO_STRING)
(44,data)
(45,data > wcslen(HELLO_STRING)
(46,(wchar_t *)
(47,5)
(48,wcslen(HELLO_STRING)
(49,)
(50,data = 0)
(51,if (data > wcslen(HELLO_STRING)
(52,wchar_t *)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^