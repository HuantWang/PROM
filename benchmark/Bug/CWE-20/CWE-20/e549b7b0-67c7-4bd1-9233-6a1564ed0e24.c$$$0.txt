-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
45,48
46,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,49,52,54,57,61,63,64,65,69,70,71
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_rand_postinc_15_bad()
CWE190_Integer_Overflow__char_rand_postinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,26,0)
(29,18,0)
(30,2,0)
(34,29,0)
(12,7,0)
(24,23,0)
(4,37,0)
(36,33,0)
(31,33,0)
(20,35,0)
(19,37,0)
(29,7,0)
(11,2,0)
(0,30,0)
(23,7,0)
(13,33,0)
(6,8,0)
(32,19,0)
(1,37,0)
(2,37,0)
(23,2,0)
(7,35,0)
(6,7,0)
(16,17,0)
(26,6,0)
(27,37,0)
(10,35,0)
(30,23,0)
(22,18,0)
(17,35,0)
(29,2,0)
(18,33,0)
(23,18,0)
(25,35,0)
(28,23,0)
(8,6,0)
(9,18,0)
(21,37,0)
(3,35,0)
(7,6,0)
(23,28,1)
(1,30,1)
(10,7,1)
(23,7,1)
(28,24,1)
(25,17,1)
(23,18,1)
(19,32,1)
(5,10,1)
(6,8,1)
(27,19,1)
(26,12,1)
(7,6,1)
(16,15,1)
(34,5,1)
(29,18,1)
(15,18,1)
(6,26,1)
(14,27,1)
(0,23,1)
(24,29,1)
(29,7,1)
(30,0,1)
(17,16,1)
(32,5,1)
(22,9,1)
(18,22,1)
(5,25,1)
(12,15,1)
(14,1,1)
(30,23,1)
(29,34,1)
(27,5,2)
(19,5,2)
(7,6,2)
(6,26,2)
(6,8,2)
(6,15,2)
(10,15,2)
(34,5,2)
(28,5,2)
(23,5,2)
(24,5,2)
(32,5,2)
(23,18,2)
(29,7,2)
(23,7,2)
(12,15,2)
(17,15,2)
(0,5,2)
(30,23,2)
(7,15,2)
(29,18,2)
(30,5,2)
(29,5,2)
(16,15,2)
(1,5,2)
(26,15,2)
(25,15,2)
-----------------------------------
(0,result)
(1,break;)
(2,)
(3,default:)
(4,case 7:)
(5,7)
(6,(char)
(7,data = (char)
(8,char)
(9,data)
(10,break;)
(11,result)
(12,data)
(13,switch(6)
(14,RET)
(15,6)
(16,"Benign, fixed string")
(17,printLine("Benign, fixed string")
(18,data = \\\' \\\')
(19,printLine("Benign, fixed string")
(20,case 6:)
(21,default:)
(22,\\\' \\\')
(23,result = data)
(24,result)
(25,break;)
(26,RAND32()
(27,break;)
(28,data)
(29,data++)
(30,printHexCharLine(result)
(31,switch(7)
(32,"Benign, fixed string")
(33,)
(34,data)
(35,)
(36,data)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^