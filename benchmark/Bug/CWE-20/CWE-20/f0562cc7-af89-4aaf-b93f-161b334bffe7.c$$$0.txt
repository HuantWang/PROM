-----label-----
1
-----code-----
void CWE415_Double_Free__malloc_free_int64_t_06_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
        free(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Possibly freeing memory twice */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,61,63,67,68,73,75
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE415_Double_Free__malloc_free_int64_t_06_bad(){    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
void
CWE415_Double_Free__malloc_free_int64_t_06_bad()
CWE415_Double_Free__malloc_free_int64_t_06_bad
{    int64_t * data;    /* Initialize data */    data = NULL;    if(STATIC_CONST_FIVE==5)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */        free(data);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Possibly freeing memory twice */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(4,35,0)
(0,15,0)
(35,28,0)
(17,15,0)
(13,17,0)
(33,19,0)
(15,18,0)
(18,15,0)
(35,4,0)
(13,2,0)
(20,4,0)
(3,17,0)
(32,2,0)
(6,12,0)
(16,33,0)
(19,33,0)
(29,9,0)
(15,0,0)
(34,9,0)
(15,17,0)
(24,27,0)
(17,2,0)
(36,12,0)
(10,27,0)
(14,23,0)
(8,3,0)
(27,9,0)
(22,17,0)
(12,17,0)
(7,23,0)
(33,0,0)
(25,19,0)
(26,31,0)
(3,1,0)
(3,27,0)
(21,9,0)
(5,31,0)
(30,13,0)
(0,33,0)
(25,16,1)
(15,18,1)
(13,30,1)
(4,20,1)
(3,8,1)
(12,17,1)
(33,19,1)
(22,31,1)
(3,27,1)
(6,17,1)
(27,10,1)
(3,17,1)
(19,25,1)
(5,26,1)
(35,4,1)
(7,14,1)
(15,0,1)
(13,17,1)
(0,33,1)
(30,35,1)
(11,23,1)
(17,15,1)
(36,6,1)
(11,3,1)
(10,24,1)
(14,31,1)
(26,27,1)
(30,12,1)
(8,23,1)
(20,12,1)
(31,5,1)
(12,36,1)
(14,13,1)
(23,7,1)
(16,22,1)
(22,31,2)
(3,23,2)
(12,17,2)
(25,31,2)
(19,31,2)
(0,33,2)
(20,12,2)
(16,31,2)
(3,17,2)
(15,31,2)
(35,12,2)
(8,23,2)
(15,18,2)
(17,31,2)
(0,31,2)
(12,31,2)
(6,31,2)
(33,19,2)
(13,31,2)
(30,31,2)
(35,4,2)
(17,15,2)
(33,31,2)
(36,31,2)
(3,27,2)
(13,17,2)
(15,0,2)
(4,12,2)
-----------------------------------
(0,malloc(100*sizeof(int64_t)
(1,)
(2,)
(3,free(data)
(4,-1)
(5,5)
(6,data)
(7,5)
(8,data)
(9,)
(10,NULL)
(11,RET)
(12,data == NULL)
(13,free(data)
(14,STATIC_CONST_FIVE)
(15,(int64_t *)
(16,100)
(17,data = (int64_t *)
(18,int64_t *)
(19,sizeof(int64_t)
(20,1)
(21,if(STATIC_CONST_FIVE==5)
(22,data)
(23,STATIC_CONST_FIVE==5)
(24,data)
(25,int64_t)
(26,STATIC_CONST_FIVE)
(27,data = NULL)
(28,)
(29,if(STATIC_CONST_FIVE==5)
(30,data)
(31,STATIC_CONST_FIVE==5)
(32,if (data == NULL)
(33,100*sizeof(int64_t)
(34,data)
(35,exit(-1)
(36,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^