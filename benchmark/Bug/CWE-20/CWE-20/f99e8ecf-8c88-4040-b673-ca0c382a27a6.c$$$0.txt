-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32_bad()
{
    int64_t * data;
    int64_t * *dataPtr1 = &data;
    int64_t * *dataPtr2 = &data;
    data = NULL;
    {
        int64_t * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (int64_t *)malloc(50*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        int64_t * data = *dataPtr2;
        {
            int64_t source[100] = {0}; /* fill with 0's */
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(int64_t));
            printLongLongLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
91,92
93,94
95,96
95,97
96,97
97,98
97,99
98,99
100,101
100,102
100,103
103,104
104,105
105,106
107,108
107,109
107,110
107,111
108,109
109,110
109,111
110,111
112,113
112,114
112,115
114,115
116,117
117,118
119,120
120,121
120,122
120,123
120,124
121,122
123,124
125,126
127,128
127,129
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
138,140
139,140
142,143
143,144
143,145
144,145
146,147
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,92,94,99,101,102,106,111,113,115,118,122,124,126,128,132,133,137,140,141,145,147
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
89,90
89,91
127,128
127,129
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32_bad(){    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        {            int64_t source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int64_t));            printLongLongLine(data[0]);            free(data);        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32_bad
{    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        {            int64_t source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int64_t));            printLongLongLine(data[0]);            free(data);        }    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
int64_t * *dataPtr1 = &data;
int64_t * *dataPtr1 = &data;
int64_t
int64_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int64_t * *dataPtr2 = &data;
int64_t * *dataPtr2 = &data;
int64_t
int64_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int64_t * data = *dataPtr1;        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */        data = (int64_t *)malloc(50*sizeof(int64_t));        if (data == NULL) {exit(-1);}        *dataPtr1 = data;    }
int64_t * data = *dataPtr1;
int64_t * data = *dataPtr1;
int64_t
int64_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t *)malloc(50*sizeof(int64_t));
data = (int64_t *)malloc(50*sizeof(int64_t))
data
data
(int64_t *)malloc(50*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(50*sizeof(int64_t))
malloc
malloc
50*sizeof(int64_t)
50
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t * data = *dataPtr2;        {            int64_t source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int64_t));            printLongLongLine(data[0]);            free(data);        }    }
int64_t * data = *dataPtr2;
int64_t * data = *dataPtr2;
int64_t
int64_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            int64_t source[100] = {0}; /* fill with 0's */            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(int64_t));            printLongLongLine(data[0]);            free(data);        }
int64_t source[100] = {0};
int64_t source[100] = {0};
int64_t
int64_t
source[100] = {0}
source
[100]
100
= {0}
{0}
0
memmove(data, source, 100*sizeof(int64_t));
memmove(data, source, 100*sizeof(int64_t))
memmove
memmove
data
data
source
source
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(5,18,0)
(14,59,0)
(60,44,0)
(17,2,0)
(10,17,0)
(27,3,0)
(31,25,0)
(6,32,0)
(38,9,0)
(19,48,0)
(43,2,0)
(34,2,0)
(63,2,0)
(45,23,0)
(23,12,0)
(26,9,0)
(62,30,0)
(31,1,0)
(35,23,0)
(33,62,0)
(62,13,0)
(44,6,0)
(20,47,0)
(59,17,0)
(58,49,0)
(11,30,0)
(56,63,0)
(13,24,0)
(30,11,0)
(65,47,0)
(12,63,0)
(24,1,0)
(30,2,0)
(28,9,0)
(9,12,0)
(40,11,0)
(25,53,0)
(9,54,0)
(17,48,0)
(6,44,0)
(21,23,0)
(9,28,0)
(59,12,0)
(47,20,0)
(23,35,0)
(36,2,0)
(47,30,0)
(61,63,0)
(41,54,0)
(48,17,0)
(18,56,0)
(35,56,0)
(7,30,0)
(1,24,0)
(16,49,0)
(18,12,0)
(4,1,0)
(53,25,0)
(54,56,0)
(20,49,0)
(52,34,0)
(3,28,0)
(8,37,0)
(55,34,0)
(42,28,0)
(13,49,0)
(15,24,0)
(49,2,0)
(28,3,0)
(1,31,0)
(9,56,0)
(12,59,0)
(0,2,0)
(51,12,0)
(25,31,0)
(37,24,0)
(50,20,0)
(46,53,0)
(22,25,0)
(39,37,0)
(24,49,0)
(29,56,0)
(64,13,0)
(1,4,0)
(11,40,1)
(39,8,1)
(48,19,1)
(40,7,1)
(51,13,1)
(35,23,1)
(26,54,1)
(23,12,1)
(12,59,1)
(33,37,1)
(10,30,1)
(37,24,1)
(62,33,1)
(64,62,1)
(9,54,1)
(31,25,1)
(65,50,1)
(46,22,1)
(57,18,1)
(38,26,1)
(62,30,1)
(59,17,1)
(34,52,1)
(24,1,1)
(9,28,1)
(18,12,1)
(30,11,1)
(9,12,1)
(59,14,1)
(13,64,1)
(25,53,1)
(53,46,1)
(6,44,1)
(47,30,1)
(41,12,1)
(60,37,1)
(55,17,1)
(18,5,1)
(28,3,1)
(52,55,1)
(23,45,1)
(1,4,1)
(5,35,1)
(37,39,1)
(1,31,1)
(33,6,1)
(14,51,1)
(19,10,1)
(3,27,1)
(15,20,1)
(20,47,1)
(27,42,1)
(13,24,1)
(8,24,1)
(21,9,1)
(22,15,1)
(50,34,1)
(45,21,1)
(44,60,1)
(54,41,1)
(47,65,1)
(17,48,1)
(42,38,1)
(20,47,2)
(1,4,2)
(24,1,2)
(25,53,2)
(9,54,2)
(62,30,2)
(9,28,2)
(23,12,2)
(35,23,2)
(1,31,2)
(60,37,2)
(59,17,2)
(13,24,2)
(6,44,2)
(30,11,2)
(44,37,2)
(37,24,2)
(9,12,2)
(17,48,2)
(31,25,2)
(6,37,2)
(12,59,2)
(18,12,2)
(47,30,2)
(28,3,2)
-----------------------------------
(0,dataPtr1)
(1,(int64_t *)
(2,)
(3,sizeof(int64_t)
(4,int64_t *)
(5,data)
(6,exit(-1)
(7,dataPtr1)
(8,data)
(9,memmove(data, source, 100*sizeof(int64_t)
(10,dataPtr2)
(11,&data)
(12,* data = *dataPtr2)
(13,*dataPtr1 = data)
(14,dataPtr2)
(15,data)
(16,if (data == NULL)
(17,* *dataPtr2 = &data)
(18,free(data)
(19,data)
(20,* data = *dataPtr1)
(21,data)
(22,50)
(23,data[0])
(24,data = (int64_t *)
(25,50*sizeof(int64_t)
(26,data)
(27,int64_t)
(28,100*sizeof(int64_t)
(29,source)
(30,* *dataPtr1 = &data)
(31,malloc(50*sizeof(int64_t)
(32,)
(33,dataPtr1)
(34,data = NULL)
(35,printLongLongLine(data[0])
(36,data)
(37,data == NULL)
(38,source)
(39,NULL)
(40,data)
(41,source)
(42,100)
(43,dataPtr2)
(44,-1)
(45,0)
(46,int64_t)
(47,*dataPtr1)
(48,&data)
(49,)
(50,data)
(51,data)
(52,NULL)
(53,sizeof(int64_t)
(54,source[100] = {0})
(55,data)
(56,)
(57,RET)
(58,data)
(59,*dataPtr2)
(60,1)
(61,data)
(62,*dataPtr1)
(63,)
(64,data)
(65,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^