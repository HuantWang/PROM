-----label-----
1
-----code-----
int * CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource(int * data)
{
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)malloc(10);
    if (data == NULL) {exit(-1);}
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
25,26
25,27
26,27
26,28
27,28
29,30
31,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,28,30,35,37,40
-----computeFrom-----
13,14
13,15
26,27
26,28
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource(int * data){    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    return data;}
int
* CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource(int * data)
*
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource
int * data
int
* data
*
data
{    /* FLAW: Allocate memory without using sizeof(int) */    data = (int *)malloc(10);    if (data == NULL) {exit(-1);}    return data;}
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
return data;
data
data
-----joern-----
(8,0,0)
(4,2,0)
(0,16,0)
(14,7,0)
(0,9,0)
(2,4,0)
(4,9,0)
(11,10,0)
(7,14,0)
(4,16,0)
(18,9,0)
(7,5,0)
(1,0,0)
(10,16,0)
(0,4,0)
(2,3,0)
(12,2,0)
(6,10,0)
(15,12,0)
(2,12,0)
(13,4,0)
(3,2,0)
(17,14,0)
(10,4,0)
(10,16,1)
(4,16,1)
(0,8,1)
(0,16,1)
(12,15,1)
(0,4,1)
(17,10,1)
(10,4,1)
(2,12,1)
(14,17,1)
(7,14,1)
(4,2,1)
(10,11,1)
(8,10,1)
(8,7,1)
(1,0,1)
(15,13,1)
(2,3,1)
(6,4,1)
(11,6,1)
(10,16,2)
(4,16,2)
(4,2,2)
(7,10,2)
(2,3,2)
(10,4,2)
(7,14,2)
(14,10,2)
(0,4,2)
(17,10,2)
(0,16,2)
(2,12,2)
(1,0,2)
-----------------------------------
(0,return data;)
(1,RET)
(2,(int *)
(3,int *)
(4,data = (int *)
(5,)
(6,data)
(7,exit(-1)
(8,data)
(9,)
(10,data == NULL)
(11,NULL)
(12,malloc(10)
(13,data)
(14,-1)
(15,10)
(16,int * data)
(17,1)
(18,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^