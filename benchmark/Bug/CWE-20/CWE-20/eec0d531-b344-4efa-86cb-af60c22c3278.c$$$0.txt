-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_bad()
{
    int * data;
    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType myUnion;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (int *)malloc(50*sizeof(int));
    if (data == NULL) {exit(-1);}
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        {
            int source[100] = {0}; /* fill with 0's */
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
81,82
83,84
84,85
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
91,92
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
103,104
104,105
106,107
107,108
108,109
108,110
109,110
109,111
110,111
112,113
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,62,66,68,69,73,74,78,80,82,85,90,92,97,98,101,102,105,111,113,116,118,122,125,126,130,132
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
95,96
95,97
99,100
99,101
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_bad(){    int * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        {            int source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_bad
{    int * data;    CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType myUnion;    data = NULL;    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (int *)malloc(50*sizeof(int));    if (data == NULL) {exit(-1);}    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        {            int source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printIntLine(data[0]);                free(data);            }        }    }}
int * data;
int * data;
int
* data
*
data
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType myUnion;
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(50*sizeof(int));
data = (int *)malloc(50*sizeof(int))
data
data
(int *)malloc(50*sizeof(int))
int *
int
*
*
malloc(50*sizeof(int))
malloc
malloc
50*sizeof(int)
50
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        {            int source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printIntLine(data[0]);                free(data);            }        }    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            int source[100] = {0}; /* fill with 0's */            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printIntLine(data[0]);                free(data);            }        }
int source[100] = {0};
int source[100] = {0};
int
source[100] = {0}
source
[100]
100
= {0}
{0}
0
{                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printIntLine(data[0]);                free(data);            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    data[i] = source[i];                }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(23,46,0)
(35,42,0)
(52,12,0)
(2,23,0)
(30,31,0)
(15,48,0)
(44,39,0)
(25,10,0)
(39,44,0)
(1,6,0)
(49,46,0)
(12,54,0)
(42,46,0)
(59,33,0)
(21,8,0)
(29,17,0)
(45,17,0)
(44,62,0)
(37,54,0)
(34,48,0)
(9,34,0)
(34,32,0)
(13,23,0)
(53,61,0)
(33,57,0)
(53,62,0)
(64,53,0)
(48,34,0)
(47,58,0)
(58,57,0)
(27,34,0)
(24,54,0)
(17,46,0)
(43,57,0)
(3,6,0)
(60,22,0)
(42,44,0)
(27,57,0)
(27,40,0)
(55,32,0)
(6,42,0)
(41,27,0)
(20,48,0)
(32,46,0)
(4,16,0)
(0,31,0)
(62,53,0)
(40,31,0)
(31,57,0)
(22,60,0)
(56,22,0)
(22,34,0)
(5,57,0)
(26,32,0)
(31,8,0)
(18,55,0)
(8,55,0)
(60,54,0)
(25,16,0)
(36,27,0)
(44,42,0)
(50,46,0)
(16,25,0)
(63,22,0)
(51,61,0)
(14,46,0)
(23,42,0)
(31,40,0)
(61,53,0)
(40,7,0)
(38,2,0)
(62,44,0)
(19,58,0)
(54,55,0)
(28,2,0)
(12,34,0)
(57,43,1)
(13,2,1)
(33,59,1)
(62,53,1)
(53,61,1)
(3,42,1)
(58,19,1)
(11,12,1)
(23,42,1)
(41,58,1)
(12,34,1)
(42,44,1)
(9,23,1)
(19,47,1)
(6,1,1)
(38,28,1)
(8,21,1)
(16,4,1)
(44,39,1)
(60,22,1)
(23,13,1)
(12,52,1)
(33,57,1)
(31,0,1)
(0,30,1)
(6,42,1)
(31,57,1)
(15,20,1)
(47,57,1)
(22,34,1)
(21,34,1)
(25,16,1)
(64,35,1)
(27,36,1)
(29,45,1)
(63,58,1)
(44,62,1)
(31,8,1)
(4,6,1)
(5,8,1)
(47,33,1)
(28,6,1)
(40,31,1)
(22,56,1)
(2,38,1)
(28,25,1)
(35,17,1)
(61,51,1)
(52,60,1)
(43,5,1)
(36,41,1)
(58,57,1)
(56,63,1)
(30,27,1)
(27,57,1)
(1,3,1)
(51,64,1)
(17,29,1)
(27,34,1)
(59,40,1)
(34,48,1)
(48,15,1)
(20,9,1)
(40,31,2)
(27,34,2)
(53,61,2)
(25,6,2)
(6,42,2)
(12,34,2)
(25,16,2)
(31,8,2)
(31,57,2)
(27,58,2)
(42,44,2)
(16,6,2)
(44,62,2)
(27,57,2)
(58,58,2)
(23,42,2)
(30,58,2)
(62,53,2)
(4,6,2)
(0,58,2)
(33,58,2)
(58,57,2)
(31,58,2)
(33,57,2)
(41,58,2)
(60,22,2)
(19,58,2)
(34,48,2)
(22,34,2)
(47,58,2)
(44,39,2)
(59,58,2)
(36,58,2)
(40,58,2)
-----------------------------------
(0,i)
(1,NULL)
(2,myUnion.unionFirst)
(3,data)
(4,1)
(5,i)
(6,data == NULL)
(7,)
(8,source[100] = {0})
(9,data)
(10,)
(11,RET)
(12,free(data)
(13,data)
(14,if (data == NULL)
(15,unionSecond)
(16,-1)
(17,data = NULL)
(18,source)
(19,100)
(20,myUnion)
(21,source)
(22,data[0])
(23,myUnion.unionFirst = data)
(24,for (i = 0; i < 100; i++)
(25,exit(-1)
(26,data)
(27,data[i])
(28,myUnion)
(29,NULL)
(30,source)
(31,source[i])
(32,)
(33,i++)
(34,* data = myUnion.unionSecond)
(35,data)
(36,i)
(37,i)
(38,unionFirst)
(39,int *)
(40,data[i] = source[i])
(41,data)
(42,data = (int *)
(43,0)
(44,(int *)
(45,data)
(46,)
(47,i)
(48,myUnion.unionSecond)
(49,myUnion)
(50,data)
(51,int)
(52,data)
(53,50*sizeof(int)
(54,)
(55,)
(56,0)
(57,i = 0)
(58,i < 100)
(59,i)
(60,printIntLine(data[0])
(61,sizeof(int)
(62,malloc(50*sizeof(int)
(63,data)
(64,50)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^