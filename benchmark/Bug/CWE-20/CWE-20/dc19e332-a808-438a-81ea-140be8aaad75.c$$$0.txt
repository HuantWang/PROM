-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
60,61
63,64
64,65
64,66
64,67
65,66
65,67
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
78,79
79,80
79,81
81,82
83,84
85,86
87,88
87,89
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
112,113
113,114
114,115
114,116
115,116
115,117
116,117
118,119
118,120
119,120
123,124
123,125
124,125
125,126
125,127
126,127
129,130
130,131
130,132
131,132
131,133
132,133
134,135
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,36,40,42,47,49,53,55,59,61,62,68,71,73,76,77,80,82,84,86,91,94,96,101,102,106,109,110,111,117,120,121,122,127,128,133,135,136,140,142
-----computeFrom-----
38,39
38,40
57,58
57,59
58,59
58,60
65,66
65,67
69,70
69,71
79,80
79,81
89,90
89,91
98,99
98,100
99,100
99,101
103,104
103,105
107,108
107,109
114,115
114,116
118,119
118,120
130,131
130,132
-----guardedBy-----
61,135
71,117
82,120
106,117
109,120
-----guardedByNegation-----
71,133
82,135
-----lastLexicalUse-----
71,133
82,135
-----jump-----
71,133
82,135
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE78_OS_Command_Injection__wchar_t_console_execlp_44_bad()
CWE78_OS_Command_Injection__wchar_t_console_execlp_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(11,13,0)
(45,46,0)
(10,30,0)
(1,52,0)
(46,32,0)
(36,12,0)
(43,3,0)
(16,52,0)
(20,31,0)
(18,37,0)
(2,41,0)
(49,41,0)
(41,5,0)
(38,44,0)
(22,34,0)
(23,49,0)
(34,5,0)
(35,37,0)
(26,13,0)
(44,18,0)
(29,5,0)
(18,28,0)
(37,20,0)
(51,6,0)
(47,10,0)
(52,5,0)
(48,5,0)
(8,30,0)
(6,5,0)
(18,44,0)
(14,34,0)
(24,20,0)
(9,18,0)
(25,17,0)
(40,5,0)
(19,20,0)
(39,44,0)
(4,28,0)
(37,18,0)
(28,18,0)
(17,41,0)
(49,8,0)
(20,37,0)
(31,17,0)
(33,5,0)
(0,33,0)
(17,31,0)
(8,49,0)
(13,31,0)
(50,8,0)
(7,6,0)
(15,31,0)
(33,41,0)
(37,35,0)
(31,6,0)
(27,32,0)
(12,13,0)
(42,41,0)
(13,12,0)
(41,34,0)
(44,41,0)
(44,31,0)
(42,2,1)
(23,50,1)
(0,27,1)
(46,45,1)
(47,8,1)
(28,4,1)
(0,47,1)
(18,44,1)
(12,36,1)
(18,37,1)
(12,13,1)
(11,26,1)
(45,28,1)
(38,39,1)
(52,1,1)
(25,15,1)
(33,0,1)
(37,20,1)
(24,19,1)
(41,34,1)
(20,24,1)
(34,22,1)
(15,41,1)
(17,25,1)
(27,46,1)
(26,31,1)
(41,42,1)
(49,41,1)
(33,41,1)
(18,9,1)
(49,23,1)
(44,31,1)
(31,17,1)
(37,35,1)
(13,11,1)
(8,49,1)
(19,44,1)
(28,18,1)
(17,41,1)
(2,34,1)
(22,14,1)
(1,16,1)
(44,38,1)
(13,31,1)
(0,12,1)
(14,52,1)
(50,28,1)
(39,12,1)
(44,41,1)
(21,33,1)
(4,18,1)
(36,13,1)
(20,31,1)
(9,37,1)
(18,12,2)
(18,37,2)
(28,18,2)
(47,28,2)
(4,12,2)
(38,12,2)
(8,49,2)
(44,12,2)
(24,12,2)
(9,12,2)
(17,41,2)
(50,28,2)
(20,31,2)
(20,12,2)
(33,41,2)
(19,12,2)
(46,28,2)
(28,12,2)
(18,44,2)
(37,35,2)
(27,28,2)
(13,31,2)
(49,41,2)
(44,31,2)
(39,12,2)
(31,17,2)
(37,12,2)
(23,28,2)
(8,28,2)
(49,28,2)
(41,34,2)
(44,41,2)
(45,28,2)
(12,13,2)
(37,20,2)
-----------------------------------
(0,data)
(1,badSink)
(2,data)
(3,)
(4,NULL)
(5,)
(6,)
(7,dataLen)
(8,dataLen = wcslen(data)
(9,stdin)
(10,)
(11,dataLen)
(12,100-dataLen > 1)
(13,100-dataLen)
(14,dataBuffer)
(15,dataLen)
(16,funcPtr)
(17,wcslen(data)
(18,fgetws(data+dataLen, (int)
(19,100)
(20,100-dataLen)
(21,RET)
(22,COMMAND_ARG2)
(23,data)
(24,dataLen)
(25,data)
(26,100)
(27,\\\'\\\\0\\\')
(28,fgetws(data+dataLen, (int)
(29,data)
(30,)
(31,dataLen = wcslen(data)
(32,)
(33,funcPtr(data)
(34,dataBuffer[100] = COMMAND_ARG2)
(35,int)
(36,1)
(37,(int)
(38,dataLen)
(39,data)
(40,funcPtr)
(41,data = dataBuffer)
(42,dataBuffer)
(43,if (fgetws(data+dataLen, (int)
(44,data+dataLen)
(45,"fgetws()
(46,printLine("fgetws()
(47,\\\'\\\\0\\\')
(48,dataBuffer)
(49,wcslen(data)
(50,dataLen)
(51,if (100-dataLen > 1)
(52,(*funcPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^