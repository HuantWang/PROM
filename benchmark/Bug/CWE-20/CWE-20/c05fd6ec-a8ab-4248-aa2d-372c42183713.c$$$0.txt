-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_int_11_bad()
{
    int * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrue())
    {
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printIntLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
64,65
67,68
67,69
68,69
71,72
72,73
74,75
75,76
76,77
76,78
77,78
77,79
78,79
80,81
83,84
84,85
84,86
85,86
87,88
89,90
89,91
90,91
91,92
93,94
94,95
95,96
95,97
96,97
98,99
98,100
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,60,65,66,69,70,73,79,81,82,86,88,92,97,100,101
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
63,64
63,65
67,68
67,69
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_int_11_bad(){    int * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_int_11_bad()
CWE416_Use_After_Free__malloc_free_int_11_bad
{    int * data;    /* Initialize data */    data = NULL;    if(globalReturnsTrue())    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        {            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{            size_t i;            for(i = 0; i < 100; i++)            {                data[i] = 5;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for(i = 0; i < 100; i++)            {                data[i] = 5;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = 5;            }
data[i] = 5;
data[i] = 5
data[i]
data
data
i
i
5
free(data);
free(data)
free
free
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printIntLine(data[0]);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
-----joern-----
(47,4,0)
(50,16,0)
(10,19,0)
(0,47,0)
(11,44,0)
(33,11,0)
(25,42,0)
(9,29,0)
(43,3,0)
(18,32,0)
(21,7,0)
(24,47,0)
(39,45,0)
(38,17,0)
(6,21,0)
(49,50,0)
(3,16,0)
(29,2,0)
(31,48,0)
(48,2,0)
(3,38,0)
(3,44,0)
(1,11,0)
(4,15,0)
(41,45,0)
(26,45,0)
(47,16,0)
(40,2,0)
(32,16,0)
(5,19,0)
(42,45,0)
(19,5,0)
(20,44,0)
(48,16,0)
(12,32,0)
(13,50,0)
(16,50,0)
(23,44,0)
(46,42,0)
(30,16,0)
(7,21,0)
(27,44,0)
(16,2,0)
(4,47,0)
(34,27,0)
(35,5,0)
(28,38,0)
(36,3,0)
(50,13,0)
(13,5,0)
(47,42,0)
(7,14,0)
(51,29,0)
(50,49,0)
(5,13,0)
(7,21,1)
(12,16,1)
(48,16,1)
(22,4,1)
(3,16,1)
(50,49,1)
(34,38,1)
(1,27,1)
(0,24,1)
(5,19,1)
(42,25,1)
(32,18,1)
(21,6,1)
(43,11,1)
(25,46,1)
(32,16,1)
(50,13,1)
(20,23,1)
(16,50,1)
(23,32,1)
(1,44,1)
(3,36,1)
(47,0,1)
(44,20,1)
(47,42,1)
(8,42,1)
(28,3,1)
(31,11,1)
(35,30,1)
(4,47,1)
(13,5,1)
(37,8,1)
(27,44,1)
(36,43,1)
(11,44,1)
(22,37,1)
(3,44,1)
(24,37,1)
(30,8,1)
(38,28,1)
(47,16,1)
(23,7,1)
(37,48,1)
(33,1,1)
(27,34,1)
(48,31,1)
(6,32,1)
(19,10,1)
(10,35,1)
(18,12,1)
(11,33,1)
(3,44,2)
(7,32,2)
(1,8,2)
(5,19,2)
(6,32,2)
(48,16,2)
(43,11,2)
(11,8,2)
(4,47,2)
(27,11,2)
(28,11,2)
(38,11,2)
(12,8,2)
(4,37,2)
(47,42,2)
(31,8,2)
(18,8,2)
(11,44,2)
(5,8,2)
(24,37,2)
(21,32,2)
(50,13,2)
(23,8,2)
(35,8,2)
(20,8,2)
(36,11,2)
(16,8,2)
(11,11,2)
(47,37,2)
(32,8,2)
(19,8,2)
(47,16,2)
(30,8,2)
(34,11,2)
(27,44,2)
(1,11,2)
(33,8,2)
(44,8,2)
(13,5,2)
(50,8,2)
(48,8,2)
(33,11,2)
(0,37,2)
(10,8,2)
(7,21,2)
(3,16,2)
(3,11,2)
(32,16,2)
(50,49,2)
(16,50,2)
(13,8,2)
-----------------------------------
(0,0)
(1,i)
(2,)
(3,data[i])
(4,printIntLine(data[0])
(5,100*sizeof(int)
(6,1)
(7,exit(-1)
(8,globalReturnsTrue()
(9,for(i = 0; i < 100; i++)
(10,int)
(11,i < 100)
(12,data)
(13,malloc(100*sizeof(int)
(14,)
(15,)
(16,data = (int *)
(17,)
(18,NULL)
(19,sizeof(int)
(20,0)
(21,-1)
(22,RET)
(23,i)
(24,data)
(25,NULL)
(26,if(globalReturnsTrue()
(27,i++)
(28,5)
(29,)
(30,data)
(31,data)
(32,data == NULL)
(33,100)
(34,i)
(35,100)
(36,i)
(37,globalReturnsTrue()
(38,data[i] = 5)
(39,data)
(40,if (data == NULL)
(41,if(globalReturnsTrue()
(42,data = NULL)
(43,data)
(44,i = 0)
(45,)
(46,data)
(47,data[0])
(48,free(data)
(49,int *)
(50,(int *)
(51,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^