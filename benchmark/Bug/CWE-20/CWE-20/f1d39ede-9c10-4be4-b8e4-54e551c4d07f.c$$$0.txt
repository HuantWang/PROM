-----label-----
1
-----code-----
static void badSink(twoIntsStruct * data)
{
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
34,35
34,36
35,36
38,39
39,40
41,42
41,43
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
58,59
62,63
62,64
62,65
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,7,9,10,16,18,20,25,27,32,33,36,37,40,47,49,50,51,57,59,60,61,66,68,73,74,77,78,81,87,89,92,94,98,102,103
-----computeFrom-----
30,31
30,32
34,35
34,36
43,44
43,45
53,54
53,55
71,72
71,73
75,76
75,77
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(twoIntsStruct * data){    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
static void
badSink(twoIntsStruct * data)
badSink
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(31,3,0)
(50,27,0)
(39,30,0)
(47,18,0)
(51,47,0)
(15,12,0)
(1,45,0)
(0,35,0)
(45,6,0)
(21,14,0)
(7,34,0)
(32,48,0)
(34,5,0)
(50,10,0)
(47,51,0)
(18,29,0)
(45,15,0)
(42,50,0)
(4,3,0)
(30,14,0)
(14,30,0)
(43,6,0)
(33,27,0)
(24,38,0)
(36,47,0)
(38,6,0)
(8,29,0)
(17,51,0)
(2,3,0)
(3,5,0)
(9,45,0)
(11,38,0)
(15,45,0)
(51,48,0)
(23,50,0)
(13,51,0)
(53,33,0)
(33,15,0)
(28,5,0)
(35,48,0)
(33,6,0)
(16,6,0)
(10,31,0)
(20,54,0)
(25,8,0)
(52,33,0)
(19,34,0)
(37,6,0)
(26,35,0)
(10,50,0)
(22,18,0)
(46,14,0)
(49,16,0)
(14,48,0)
(54,48,0)
(5,44,0)
(41,48,0)
(31,10,0)
(30,8,0)
(46,18,1)
(18,22,1)
(26,0,1)
(49,15,1)
(16,6,1)
(21,46,1)
(15,45,1)
(23,42,1)
(1,33,1)
(0,54,1)
(54,48,1)
(33,6,1)
(20,8,1)
(50,23,1)
(41,32,1)
(22,47,1)
(43,37,1)
(14,48,1)
(33,27,1)
(30,14,1)
(47,51,1)
(30,39,1)
(50,27,1)
(6,43,1)
(36,51,1)
(13,17,1)
(48,41,1)
(35,26,1)
(53,38,1)
(33,52,1)
(11,6,1)
(38,6,1)
(37,35,1)
(40,31,1)
(47,36,1)
(9,1,1)
(39,14,1)
(24,11,1)
(52,53,1)
(10,50,1)
(16,49,1)
(25,30,1)
(42,38,1)
(35,48,1)
(51,48,1)
(38,24,1)
(54,20,1)
(8,25,1)
(14,21,1)
(45,6,1)
(17,35,1)
(51,13,1)
(45,9,1)
(11,16,1)
(31,10,1)
(0,48,1)
(18,35,2)
(45,38,2)
(10,50,2)
(26,35,2)
(15,45,2)
(35,35,2)
(30,14,2)
(16,38,2)
(54,35,2)
(11,38,2)
(1,38,2)
(49,38,2)
(33,6,2)
(54,48,2)
(17,35,2)
(53,38,2)
(31,10,2)
(36,35,2)
(35,48,2)
(38,6,2)
(13,35,2)
(30,35,2)
(16,6,2)
(47,51,2)
(25,35,2)
(21,35,2)
(24,38,2)
(33,27,2)
(39,35,2)
(45,6,2)
(46,35,2)
(22,35,2)
(51,48,2)
(47,35,2)
(15,38,2)
(14,35,2)
(52,38,2)
(9,38,2)
(51,35,2)
(50,27,2)
(8,35,2)
(20,35,2)
(14,48,2)
(0,35,2)
(33,38,2)
(38,38,2)
-----------------------------------
(0,i)
(1,source)
(2,for (i = 0; i < 100; i++)
(3,)
(4,i)
(5,)
(6,i = 0)
(7,for (i = 0; i < 100; i++)
(8,source[i].intTwo = 0)
(9,i)
(10,&data[0])
(11,i)
(12,)
(13,i)
(14,source[i])
(15,data[i] = source[i])
(16,i++)
(17,source)
(18,source[i].intOne = 0)
(19,i)
(20,i)
(21,i)
(22,0)
(23,0)
(24,100)
(25,0)
(26,100)
(27,twoIntsStruct * data)
(28,source)
(29,)
(30,source[i].intTwo)
(31,printStructLine(&data[0])
(32,i)
(33,data[i])
(34,)
(35,i < 100)
(36,intOne)
(37,i)
(38,i < 100)
(39,intTwo)
(40,RET)
(41,0)
(42,data)
(43,0)
(44,)
(45,source[i])
(46,source)
(47,source[i].intOne)
(48,i = 0)
(49,i)
(50,data[0])
(51,source[i])
(52,i)
(53,data)
(54,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^