-----label-----
1
-----code-----
static int * badSource(int * data)
{
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
    free(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,51
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */    free(data);    return data;}
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
free(data);
free(data)
free
free
data
data
return data;
data
data
-----joern-----
(0,17,0)
(9,13,0)
(22,9,0)
(9,1,0)
(21,10,0)
(22,1,0)
(16,14,0)
(15,17,0)
(9,17,0)
(6,9,0)
(4,12,0)
(10,4,0)
(23,22,0)
(17,0,0)
(18,9,0)
(15,19,0)
(19,5,0)
(8,18,0)
(4,10,0)
(14,13,0)
(19,15,0)
(5,19,0)
(3,14,0)
(18,13,0)
(11,18,0)
(17,15,0)
(17,9,0)
(22,13,0)
(7,1,0)
(2,5,0)
(14,1,0)
(20,19,0)
(14,9,0)
(23,18,1)
(18,13,1)
(10,21,1)
(14,16,1)
(14,9,1)
(22,23,1)
(20,6,1)
(11,8,1)
(4,10,1)
(5,2,1)
(14,13,1)
(17,0,1)
(19,5,1)
(9,13,1)
(21,18,1)
(22,9,1)
(9,17,1)
(18,11,1)
(16,22,1)
(17,15,1)
(23,4,1)
(2,20,1)
(18,9,1)
(8,9,1)
(3,14,1)
(22,13,1)
(15,19,1)
(21,18,2)
(3,14,2)
(4,10,2)
(9,13,2)
(9,17,2)
(18,13,2)
(18,9,2)
(17,0,2)
(14,13,2)
(15,19,2)
(22,13,2)
(10,18,2)
(22,9,2)
(19,5,2)
(4,18,2)
(14,9,2)
(17,15,2)
-----------------------------------
(0,int *)
(1,)
(2,int)
(3,RET)
(4,exit(-1)
(5,sizeof(int)
(6,data)
(7,if (data == NULL)
(8,data)
(9,data = (int *)
(10,-1)
(11,NULL)
(12,)
(13,int * data)
(14,return data;)
(15,malloc(100*sizeof(int)
(16,data)
(17,(int *)
(18,data == NULL)
(19,100*sizeof(int)
(20,100)
(21,1)
(22,free(data)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^