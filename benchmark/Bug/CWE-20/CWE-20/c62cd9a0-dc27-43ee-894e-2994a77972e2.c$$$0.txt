-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,30,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_03_bad()
CWE190_Integer_Overflow__int_rand_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,22,0)
(17,1,0)
(19,15,0)
(18,17,0)
(3,22,0)
(5,3,0)
(4,19,0)
(5,17,0)
(10,7,0)
(23,22,0)
(25,13,0)
(3,19,0)
(9,15,0)
(22,27,0)
(21,18,0)
(3,5,0)
(22,26,0)
(12,7,0)
(11,19,0)
(16,17,0)
(18,5,0)
(8,5,0)
(6,13,0)
(20,3,0)
(0,15,0)
(2,15,0)
(14,3,0)
(14,20,1)
(25,22,1)
(5,3,1)
(26,23,1)
(8,13,1)
(24,13,1)
(24,18,1)
(18,21,1)
(23,7,1)
(12,10,1)
(20,8,1)
(11,4,1)
(22,26,1)
(7,12,1)
(3,19,1)
(25,7,1)
(6,25,1)
(3,14,1)
(21,5,1)
(19,11,1)
(10,19,1)
(3,22,1)
(18,5,1)
(13,6,1)
(20,13,2)
(3,19,2)
(18,13,2)
(22,26,2)
(18,5,2)
(5,3,2)
(3,13,2)
(8,13,2)
(5,13,2)
(21,13,2)
(14,13,2)
(22,7,2)
(23,7,2)
(26,7,2)
(3,22,2)
-----------------------------------
(0,data)
(1,)
(2,if(5==5)
(3,data * data)
(4,data)
(5,result = data * data)
(6,5)
(7,5==5)
(8,result)
(9,if(5==5)
(10,5)
(11,0)
(12,5)
(13,5==5)
(14,data)
(15,)
(16,result)
(17,)
(18,printIntLine(result)
(19,data = 0)
(20,data)
(21,result)
(22,data = RAND32()
(23,data)
(24,RET)
(25,5)
(26,RAND32()
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^