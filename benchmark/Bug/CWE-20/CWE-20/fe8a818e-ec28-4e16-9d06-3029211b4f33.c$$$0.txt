-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
    /* dereference dataPtr into data */
    twoIntsStruct * data = (*dataPtr);
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
41,42
41,43
41,44
42,43
43,44
43,45
44,45
46,47
46,48
48,49
50,51
50,52
51,52
52,53
52,54
53,54
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
63,64
63,65
64,65
67,68
68,69
70,71
70,72
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
77,78
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
87,88
91,92
91,93
91,94
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
98,102
99,100
100,101
100,102
101,102
104,105
104,106
105,106
108,109
109,110
111,112
112,113
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,45,47,49,54,56,61,62,65,66,69,76,78,79,80,86,88,89,90,95,97,102,103,106,107,110,116,118,121,123,127,131,132
-----computeFrom-----
59,60
59,61
63,64
63,65
72,73
72,74
82,83
82,84
100,101
100,102
104,105
104,106
113,114
113,115
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64b_badSink(void * dataVoidPtr)
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    twoIntsStruct * data = (*dataPtr);    {        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }}
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;
twoIntsStruct
twoIntsStruct
* * dataPtr = (twoIntsStruct * *)dataVoidPtr
*
*
dataPtr
= (twoIntsStruct * *)dataVoidPtr
(twoIntsStruct * *)dataVoidPtr
twoIntsStruct * *
twoIntsStruct
twoIntsStruct
* *
*
*
dataVoidPtr
dataVoidPtr
twoIntsStruct * data = (*dataPtr);
twoIntsStruct * data = (*dataPtr);
twoIntsStruct
twoIntsStruct
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        twoIntsStruct source[100];        {            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }        {            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }    }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{            size_t i;            /* Initialize array */            for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                source[i].intOne = 0;                source[i].intTwo = 0;            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                source[i].intOne = 0;                source[i].intTwo = 0;            }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{            size_t i;            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            for (i = 0; i < 100; i++)            {                data[i] = source[i];            }            printStructLine(&data[0]);        }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)            {                data[i] = source[i];            }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                data[i] = source[i];            }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(8,29,0)
(18,65,0)
(3,65,0)
(64,25,0)
(38,15,0)
(11,23,0)
(15,35,0)
(65,60,0)
(40,50,0)
(5,40,0)
(24,26,0)
(43,5,0)
(10,25,0)
(23,6,0)
(29,39,0)
(57,40,0)
(48,42,0)
(38,60,0)
(6,48,0)
(4,61,0)
(49,23,0)
(9,39,0)
(62,39,0)
(61,21,0)
(27,38,0)
(14,12,0)
(26,32,0)
(12,14,0)
(20,60,0)
(2,39,0)
(51,48,0)
(58,24,0)
(46,40,0)
(1,13,0)
(55,9,0)
(24,40,0)
(16,61,0)
(36,59,0)
(21,50,0)
(29,26,0)
(15,38,0)
(0,59,0)
(28,57,0)
(37,13,0)
(5,14,0)
(7,35,0)
(54,15,0)
(26,29,0)
(47,24,0)
(25,33,0)
(22,50,0)
(41,60,0)
(57,10,0)
(59,39,0)
(10,50,0)
(13,21,0)
(19,21,0)
(44,29,0)
(31,38,0)
(35,42,0)
(30,5,0)
(25,52,0)
(45,10,0)
(33,25,0)
(63,50,0)
(24,39,0)
(14,5,0)
(34,6,0)
(25,10,0)
(17,20,0)
(53,60,0)
(6,23,0)
(40,57,0)
(23,60,0)
(12,13,0)
(5,40,1)
(9,39,1)
(65,60,1)
(59,39,1)
(54,38,1)
(27,31,1)
(40,57,1)
(36,0,1)
(15,38,1)
(48,51,1)
(10,25,1)
(23,60,1)
(30,43,1)
(11,65,1)
(44,24,1)
(38,27,1)
(7,15,1)
(64,45,1)
(57,10,1)
(3,20,1)
(58,47,1)
(8,44,1)
(41,53,1)
(62,65,1)
(6,34,1)
(25,33,1)
(24,39,1)
(2,62,1)
(0,39,1)
(35,7,1)
(5,30,1)
(29,8,1)
(39,2,1)
(47,59,1)
(38,60,1)
(31,48,1)
(14,5,1)
(55,26,1)
(46,10,1)
(24,40,1)
(28,46,1)
(20,17,1)
(15,54,1)
(12,14,1)
(60,41,1)
(17,35,1)
(6,23,1)
(25,64,1)
(57,28,1)
(65,18,1)
(53,40,1)
(51,6,1)
(20,60,1)
(49,11,1)
(34,23,1)
(26,29,1)
(59,36,1)
(29,39,1)
(3,60,1)
(0,9,1)
(9,55,1)
(25,52,1)
(23,49,1)
(18,3,1)
(56,12,1)
(24,58,1)
(43,59,1)
(59,39,2)
(26,59,2)
(24,39,2)
(59,59,2)
(36,59,2)
(14,5,2)
(9,59,2)
(9,39,2)
(58,59,2)
(3,65,2)
(17,65,2)
(65,60,2)
(6,65,2)
(20,65,2)
(48,65,2)
(23,65,2)
(47,59,2)
(18,65,2)
(10,25,2)
(25,33,2)
(24,59,2)
(25,52,2)
(57,10,2)
(31,65,2)
(55,59,2)
(12,14,2)
(15,38,2)
(49,65,2)
(35,65,2)
(38,60,2)
(6,23,2)
(27,65,2)
(34,65,2)
(20,60,2)
(11,65,2)
(15,65,2)
(38,65,2)
(54,65,2)
(29,39,2)
(29,59,2)
(24,40,2)
(40,57,2)
(7,65,2)
(44,59,2)
(65,65,2)
(26,29,2)
(5,40,2)
(8,59,2)
(51,65,2)
(23,60,2)
(0,59,2)
-----------------------------------
(0,i)
(1,for (i = 0; i < 100; i++)
(2,0)
(3,i)
(4,i)
(5,data[0])
(6,source[i].intOne)
(7,0)
(8,i)
(9,i++)
(10,* * dataPtr = (twoIntsStruct * *)
(11,source)
(12,printStructLine(&data[0])
(13,)
(14,&data[0])
(15,source[i].intTwo)
(16,for (i = 0; i < 100; i++)
(17,i)
(18,100)
(19,source)
(20,i++)
(21,)
(22,data)
(23,source[i])
(24,data[i])
(25,(twoIntsStruct * *)
(26,data[i] = source[i])
(27,i)
(28,dataPtr)
(29,source[i])
(30,0)
(31,source)
(32,)
(33,twoIntsStruct * *)
(34,intOne)
(35,source[i].intTwo = 0)
(36,100)
(37,i)
(38,source[i])
(39,i = 0)
(40,* data = (*dataPtr)
(41,0)
(42,)
(43,data)
(44,source)
(45,dataPtr)
(46,data)
(47,data)
(48,source[i].intOne = 0)
(49,i)
(50,)
(51,0)
(52,void * dataVoidPtr)
(53,i)
(54,intTwo)
(55,i)
(56,RET)
(57,*dataPtr)
(58,i)
(59,i < 100)
(60,i = 0)
(61,)
(62,i)
(63,dataPtr)
(64,dataVoidPtr)
(65,i < 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^