-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_11_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(globalReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,25,28,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
23,24
23,25
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_11_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_11_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_rand_11_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(globalReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(25,8,0)
(22,33,0)
(21,44,0)
(20,46,0)
(38,14,0)
(43,21,0)
(6,7,0)
(16,20,0)
(7,6,0)
(35,21,0)
(49,6,0)
(48,46,0)
(46,5,0)
(49,44,0)
(4,8,0)
(18,34,0)
(38,25,0)
(20,25,0)
(30,44,0)
(0,17,0)
(31,38,0)
(38,46,0)
(14,38,0)
(30,49,0)
(46,15,0)
(6,1,0)
(9,25,0)
(29,44,0)
(45,17,0)
(19,16,0)
(6,49,0)
(36,12,0)
(3,30,0)
(37,33,0)
(12,36,0)
(32,25,0)
(28,8,0)
(12,27,0)
(2,47,0)
(42,14,0)
(20,16,0)
(47,49,0)
(1,6,0)
(47,44,0)
(38,7,0)
(21,49,0)
(7,38,0)
(24,49,0)
(15,46,0)
(39,8,0)
(11,20,0)
(17,49,0)
(23,36,0)
(33,10,0)
(40,18,0)
(41,13,1)
(41,46,1)
(30,49,1)
(26,41,1)
(20,16,1)
(17,45,1)
(38,14,1)
(36,23,1)
(15,48,1)
(31,24,1)
(46,15,1)
(47,49,1)
(42,31,1)
(25,32,1)
(6,1,1)
(26,30,1)
(11,41,1)
(21,49,1)
(2,21,1)
(16,19,1)
(19,11,1)
(13,25,1)
(17,49,1)
(21,43,1)
(49,6,1)
(20,25,1)
(14,42,1)
(38,25,1)
(24,20,1)
(35,12,1)
(40,20,1)
(35,17,1)
(43,35,1)
(47,2,1)
(12,36,1)
(20,46,1)
(23,17,1)
(32,9,1)
(18,40,1)
(7,38,1)
(48,13,1)
(6,7,1)
(3,47,1)
(26,18,1)
(0,49,1)
(38,46,1)
(30,3,1)
(45,0,1)
(40,20,2)
(38,14,2)
(7,38,2)
(6,7,2)
(20,46,2)
(31,20,2)
(38,20,2)
(2,20,2)
(14,20,2)
(17,49,2)
(12,36,2)
(24,20,2)
(35,20,2)
(46,15,2)
(19,41,2)
(17,20,2)
(7,20,2)
(21,20,2)
(38,25,2)
(21,49,2)
(18,20,2)
(15,13,2)
(23,17,2)
(43,20,2)
(30,20,2)
(36,17,2)
(6,20,2)
(45,20,2)
(0,20,2)
(47,49,2)
(20,25,2)
(49,6,2)
(20,16,2)
(12,17,2)
(6,1,2)
(46,13,2)
(48,13,2)
(16,41,2)
(3,20,2)
(20,41,2)
(42,20,2)
(11,41,2)
(49,20,2)
(47,20,2)
(30,49,2)
(38,46,2)
-----------------------------------
(0,myString)
(1,wchar_t *)
(2,myString)
(3,myString)
(4,if(globalReturnsTrue()
(5,)
(6,(wchar_t *)
(7,malloc(data*sizeof(wchar_t)
(8,)
(9,data)
(10,)
(11,data)
(12,exit(-1)
(13,globalReturnsTrue()
(14,sizeof(wchar_t)
(15,rand()
(16,wcslen(HELLO_STRING)
(17,myString == NULL)
(18,printLine("Input is less than the length of the source string")
(19,HELLO_STRING)
(20,data > wcslen(HELLO_STRING)
(21,wcscpy(myString, HELLO_STRING)
(22,if (data > wcslen(HELLO_STRING)
(23,1)
(24,myString)
(25,data = 0)
(26,RET)
(27,)
(28,if(globalReturnsTrue()
(29,if (myString == NULL)
(30,free(myString)
(31,data)
(32,0)
(33,)
(34,)
(35,myString)
(36,-1)
(37,myString)
(38,data*sizeof(wchar_t)
(39,data)
(40,"Input is less than the length of the source string")
(41,globalReturnsTrue()
(42,wchar_t)
(43,HELLO_STRING)
(44,)
(45,NULL)
(46,data = rand()
(47,printWLine(myString)
(48,data)
(49,myString = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^