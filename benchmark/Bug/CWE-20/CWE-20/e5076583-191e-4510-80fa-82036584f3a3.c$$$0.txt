-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_32_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    {
        twoIntsStruct * data = *dataPtr1;
        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
         * buffer in various memory copying functions using a "large" source buffer. */
        data = dataBadBuffer;
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(twoIntsStruct));
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
53,54
53,55
53,56
54,55
55,56
55,57
56,57
58,59
58,60
58,61
61,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
83,86
86,87
87,88
88,89
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
95,96
95,97
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
119,120
119,121
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
126,127
130,131
131,132
131,133
132,133
132,134
133,134
133,135
134,135
136,137
140,141
141,142
141,143
141,144
141,145
142,143
144,145
146,147
148,149
148,150
150,151
151,152
151,153
152,153
155,156
156,157
156,158
157,158
159,160
160,161
160,162
161,162
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,44,48,50,52,57,59,60,64,68,70,75,77,82,84,85,89,94,96,98,103,105,110,111,114,115,118,125,127,128,129,135,137,138,139,143,145,147,149,153,154,158,162,163
-----computeFrom-----
66,67
66,68
72,73
72,74
108,109
108,110
112,113
112,114
121,122
121,123
131,132
131,133
148,149
148,150
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_32_bad(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    {        twoIntsStruct * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_32_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_32_bad
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    {        twoIntsStruct * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
{        twoIntsStruct * data = *dataPtr1;        /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination         * buffer in various memory copying functions using a "large" source buffer. */        data = dataBadBuffer;        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(48,14,0)
(49,26,0)
(22,61,0)
(22,38,0)
(7,61,0)
(29,17,0)
(57,11,0)
(40,37,0)
(15,26,0)
(66,33,0)
(35,33,0)
(14,58,0)
(3,58,0)
(34,42,0)
(14,22,0)
(65,9,0)
(60,27,0)
(63,55,0)
(56,37,0)
(30,27,0)
(73,9,0)
(2,58,0)
(37,56,0)
(70,20,0)
(17,1,0)
(45,30,0)
(14,49,0)
(11,33,0)
(41,9,0)
(61,22,0)
(47,55,0)
(29,22,0)
(28,57,0)
(54,14,0)
(49,14,0)
(58,38,0)
(8,22,0)
(24,30,0)
(16,23,0)
(59,49,0)
(27,30,0)
(17,29,0)
(21,35,0)
(30,55,0)
(64,56,0)
(26,49,0)
(57,18,0)
(4,2,0)
(23,10,0)
(72,29,0)
(9,73,0)
(0,21,0)
(61,37,0)
(6,10,0)
(44,33,0)
(42,35,0)
(1,17,0)
(46,39,0)
(32,38,0)
(27,23,0)
(68,62,0)
(18,11,0)
(50,18,0)
(5,68,0)
(38,33,0)
(71,20,0)
(21,57,0)
(20,55,0)
(35,42,0)
(73,6,0)
(9,55,0)
(62,11,0)
(37,33,0)
(1,58,0)
(68,35,0)
(53,33,0)
(62,68,0)
(19,62,0)
(43,29,0)
(31,18,0)
(25,73,0)
(12,33,0)
(52,35,0)
(39,55,0)
(67,33,0)
(13,2,0)
(51,6,0)
(69,11,0)
(47,22,1)
(39,55,1)
(68,35,1)
(55,63,1)
(73,9,1)
(60,30,1)
(56,64,1)
(14,22,1)
(72,43,1)
(14,49,1)
(65,41,1)
(70,55,1)
(30,55,1)
(37,56,1)
(59,54,1)
(18,31,1)
(17,29,1)
(70,39,1)
(64,40,1)
(42,34,1)
(0,18,1)
(45,6,1)
(41,20,1)
(29,72,1)
(43,14,1)
(61,7,1)
(57,18,1)
(21,0,1)
(61,37,1)
(19,37,1)
(68,5,1)
(49,26,1)
(51,73,1)
(29,22,1)
(5,19,1)
(71,70,1)
(36,1,1)
(20,55,1)
(54,48,1)
(9,55,1)
(25,9,1)
(48,20,1)
(7,8,1)
(31,50,1)
(35,42,1)
(20,71,1)
(8,57,1)
(1,17,1)
(15,59,1)
(57,28,1)
(21,35,1)
(24,45,1)
(73,25,1)
(62,68,1)
(63,47,1)
(28,21,1)
(22,61,1)
(39,46,1)
(30,24,1)
(40,35,1)
(6,51,1)
(26,15,1)
(46,23,1)
(27,60,1)
(23,16,1)
(9,65,1)
(16,27,1)
(34,52,1)
(27,30,1)
(50,62,1)
(41,20,2)
(14,22,2)
(20,20,2)
(20,55,2)
(49,26,2)
(30,20,2)
(39,55,2)
(73,20,2)
(30,55,2)
(21,35,2)
(16,20,2)
(9,20,2)
(17,29,2)
(27,20,2)
(60,20,2)
(27,30,2)
(39,20,2)
(9,55,2)
(25,20,2)
(6,20,2)
(57,18,2)
(73,9,2)
(23,20,2)
(62,68,2)
(24,20,2)
(22,61,2)
(71,20,2)
(61,37,2)
(1,17,2)
(45,20,2)
(14,49,2)
(68,35,2)
(51,20,2)
(35,42,2)
(46,20,2)
(37,56,2)
(70,20,2)
(65,20,2)
(29,22,2)
-----------------------------------
(0,dataPtr1)
(1,printStructLine(&data[0])
(2,)
(3,source)
(4,i)
(5,dataPtr1)
(6,source[i].intOne = 0)
(7,dataPtr2)
(8,data)
(9,source[i])
(10,)
(11,)
(12,data)
(13,for (i = 0; i < 100; i++)
(14,memmove(data, source, 100*sizeof(twoIntsStruct)
(15,twoIntsStruct)
(16,0)
(17,&data[0])
(18,data = dataBadBuffer)
(19,data)
(20,i < 100)
(21,*dataPtr1)
(22,* data = *dataPtr2)
(23,source[i].intTwo = 0)
(24,i)
(25,intOne)
(26,sizeof(twoIntsStruct)
(27,source[i].intTwo)
(28,data)
(29,data[0])
(30,source[i])
(31,dataBadBuffer)
(32,data)
(33,)
(34,data)
(35,* *dataPtr1 = &data)
(36,RET)
(37,* *dataPtr2 = &data)
(38,)
(39,i++)
(40,dataPtr2)
(41,source)
(42,&data)
(43,data)
(44,dataPtr2)
(45,source)
(46,i)
(47,i)
(48,data)
(49,100*sizeof(twoIntsStruct)
(50,data)
(51,0)
(52,dataPtr1)
(53,dataPtr1)
(54,source)
(55,i = 0)
(56,&data)
(57,*dataPtr1 = data)
(58,)
(59,100)
(60,intTwo)
(61,*dataPtr2)
(62,* data = *dataPtr1)
(63,0)
(64,data)
(65,i)
(66,dataBadBuffer)
(67,dataGoodBuffer)
(68,*dataPtr1)
(69,data)
(70,i)
(71,100)
(72,0)
(73,source[i].intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^