-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_65b_badSink(char data)
{
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
11,12
12,13
13,14
15,16
16,17
16,18
18,19
18,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
-----nextToken-----
2,4,6,8,14,17,19,22,26,28
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_65b_badSink(char data){    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_65b_badSink(char data)
CWE190_Integer_Overflow__char_fscanf_postinc_65b_badSink
char data
char
data
data
{    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,7,0)
(10,8,0)
(8,9,0)
(1,8,0)
(3,0,0)
(6,7,0)
(7,8,0)
(4,1,0)
(0,8,0)
(0,5,0)
(7,5,0)
(1,7,0)
(6,0,1)
(0,3,1)
(0,5,1)
(4,7,1)
(7,11,1)
(1,4,1)
(2,1,1)
(11,6,1)
(1,7,1)
(7,5,1)
(0,5,2)
(1,7,2)
(7,5,2)
-----------------------------------
(0,data++)
(1,printHexCharLine(result)
(2,RET)
(3,data)
(4,result)
(5,char data)
(6,result)
(7,result = data)
(8,)
(9,)
(10,result)
(11,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^