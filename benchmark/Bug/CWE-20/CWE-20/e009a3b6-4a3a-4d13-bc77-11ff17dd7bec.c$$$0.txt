-----label-----
1
-----code-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b_badSource(char * data)
{
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (char *)malloc(50*sizeof(char));
    if (data == NULL) {exit(-1);}
    data[0] = '\0'; /* null terminate */
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,52
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b_badSource(char * data){    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    return data;}
char
* CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b_badSource(char * data)
*
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b_badSource
char * data
char
* data
*
data
{    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */    data = (char *)malloc(50*sizeof(char));    if (data == NULL) {exit(-1);}    data[0] = '\0'; /* null terminate */    return data;}
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = '\0';
data[0] = '\0'
data[0]
data
data
0
'\0'
return data;
data
data
-----joern-----
(25,23,0)
(3,12,0)
(18,10,0)
(8,21,0)
(0,21,0)
(2,17,0)
(14,6,0)
(25,26,0)
(20,25,0)
(4,6,0)
(7,25,0)
(2,5,0)
(9,2,0)
(26,17,0)
(24,12,0)
(2,23,0)
(8,16,0)
(1,2,0)
(21,10,0)
(19,5,0)
(22,17,0)
(5,23,0)
(13,16,0)
(10,21,0)
(24,15,0)
(16,8,0)
(5,17,0)
(11,26,0)
(6,23,0)
(21,8,0)
(12,24,0)
(16,13,0)
(25,5,0)
(16,5,0)
(6,5,0)
(5,16,0)
(0,19,1)
(7,24,1)
(14,5,1)
(11,25,1)
(24,12,1)
(25,20,1)
(18,0,1)
(16,8,1)
(6,23,1)
(26,11,1)
(21,10,1)
(6,4,1)
(25,5,1)
(2,9,1)
(5,16,1)
(2,5,1)
(9,26,1)
(2,23,1)
(4,14,1)
(12,3,1)
(1,2,1)
(6,5,1)
(8,21,1)
(10,18,1)
(20,7,1)
(3,6,1)
(7,6,1)
(25,23,1)
(16,13,1)
(5,23,1)
(2,5,2)
(5,23,2)
(24,12,2)
(6,5,2)
(1,2,2)
(16,8,2)
(25,5,2)
(6,23,2)
(2,23,2)
(16,13,2)
(25,23,2)
(3,6,2)
(12,6,2)
(21,10,2)
(24,6,2)
(8,21,2)
(5,16,2)
-----------------------------------
(0,50)
(1,RET)
(2,return data;)
(3,1)
(4,NULL)
(5,data = (char *)
(6,data == NULL)
(7,data)
(8,malloc(50*sizeof(char)
(9,data)
(10,sizeof(char)
(11,'\\\\0')
(12,-1)
(13,char *)
(14,data)
(15,)
(16,(char *)
(17,)
(18,char)
(19,data)
(20,0)
(21,50*sizeof(char)
(22,if (data == NULL)
(23,char * data)
(24,exit(-1)
(25,data[0])
(26,data[0] = '\\\\0')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^