-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            charVoid structCharVoid;
            structCharVoid.voidSecond = (void *)SRC_STR;
            /* Print the initial block pointed to by structCharVoid.voidSecond */
            printLine((char *)structCharVoid.voidSecond);
            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */
            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
            printLine((char *)structCharVoid.charFirst);
            printLine((char *)structCharVoid.voidSecond);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
24,26
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
37,38
39,40
39,41
40,41
43,44
44,45
44,46
44,47
44,48
45,46
47,48
47,49
48,49
51,52
53,54
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
67,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
99,100
101,102
101,103
102,103
-----nextToken-----
2,4,8,14,16,21,22,25,27,29,33,36,38,41,42,46,49,50,52,56,62,63,71,72,75,76,77,78,82,85,87,90,91,95,98,100,103,104
-----computeFrom-----
18,19
18,20
58,59
58,60
64,65
64,66
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad(){    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad()
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04_bad
{    if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }}
if(STATIC_CONST_TRUE)    {        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }    }
{            charVoid structCharVoid;            structCharVoid.voidSecond = (void *)SRC_STR;            /* Print the initial block pointed to by structCharVoid.voidSecond */            printLine((char *)structCharVoid.voidSecond);            /* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));            structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */            printLine((char *)structCharVoid.charFirst);            printLine((char *)structCharVoid.voidSecond);        }
charVoid structCharVoid;
charVoid structCharVoid;
charVoid
charVoid
structCharVoid
structCharVoid
structCharVoid.voidSecond = (void *)SRC_STR;
structCharVoid.voidSecond = (void *)SRC_STR
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
(void *)SRC_STR
void *
void
*
*
SRC_STR
SRC_STR
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));
memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid))
memcpy
memcpy
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
SRC_STR
SRC_STR
sizeof(structCharVoid)
(structCharVoid)
structCharVoid
structCharVoid
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0';
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1] = '\0'
structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)/sizeof(char))-1]
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
(sizeof(structCharVoid.charFirst)/sizeof(char))-1
(sizeof(structCharVoid.charFirst)/sizeof(char))
sizeof(structCharVoid.charFirst)/sizeof(char)
sizeof(structCharVoid.charFirst)
(structCharVoid.charFirst)
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
sizeof(char)
char
char

1
'\0'
printLine((char *)structCharVoid.charFirst);
printLine((char *)structCharVoid.charFirst)
printLine
printLine
(char *)structCharVoid.charFirst
char *
char
*
*
structCharVoid.charFirst
structCharVoid
structCharVoid
charFirst
printLine((char *)structCharVoid.voidSecond);
printLine((char *)structCharVoid.voidSecond)
printLine
printLine
(char *)structCharVoid.voidSecond
char *
char
*
*
structCharVoid.voidSecond
structCharVoid
structCharVoid
voidSecond
-----joern-----
(53,43,0)
(14,20,0)
(10,38,0)
(5,7,0)
(21,48,0)
(50,33,0)
(25,30,0)
(45,23,0)
(28,30,0)
(12,15,0)
(15,1,0)
(4,15,0)
(32,50,0)
(24,42,0)
(13,9,0)
(46,50,0)
(53,30,0)
(49,44,0)
(24,33,0)
(51,38,0)
(19,34,0)
(23,30,0)
(34,19,0)
(37,38,0)
(54,11,0)
(41,19,0)
(36,20,0)
(43,29,0)
(16,10,0)
(35,43,0)
(23,9,0)
(23,48,0)
(7,34,0)
(48,23,0)
(20,11,0)
(42,24,0)
(33,24,0)
(27,29,0)
(29,43,0)
(7,5,0)
(38,37,0)
(20,36,0)
(10,33,0)
(43,53,0)
(39,47,0)
(30,17,0)
(1,5,0)
(43,35,0)
(5,44,0)
(38,10,0)
(0,48,0)
(3,25,0)
(36,30,0)
(44,5,0)
(38,51,0)
(6,19,0)
(40,11,0)
(51,30,0)
(33,30,0)
(26,10,0)
(5,1,0)
(2,29,0)
(11,33,0)
(34,25,0)
(11,20,0)
(22,7,0)
(9,23,0)
(1,15,0)
(31,24,0)
(34,7,0)
(20,14,0)
(32,18,1)
(52,18,1)
(40,53,1)
(12,4,1)
(11,33,1)
(45,48,1)
(54,40,1)
(10,33,1)
(44,49,1)
(20,14,1)
(23,9,1)
(36,20,1)
(41,6,1)
(51,38,1)
(24,42,1)
(20,11,1)
(43,29,1)
(38,10,1)
(4,19,1)
(24,31,1)
(25,3,1)
(48,0,1)
(10,26,1)
(0,21,1)
(7,22,1)
(26,16,1)
(16,33,1)
(23,48,1)
(15,12,1)
(11,54,1)
(19,41,1)
(33,24,1)
(22,5,1)
(34,19,1)
(38,37,1)
(1,15,1)
(43,35,1)
(34,7,1)
(52,36,1)
(5,44,1)
(7,5,1)
(21,51,1)
(29,27,1)
(49,1,1)
(31,50,1)
(2,25,1)
(46,32,1)
(3,34,1)
(53,43,1)
(5,1,1)
(50,46,1)
(9,13,1)
(13,45,1)
(27,2,1)
(6,23,1)
(1,18,2)
(38,18,2)
(23,48,2)
(0,18,2)
(10,18,2)
(36,18,2)
(34,19,2)
(44,18,2)
(5,44,2)
(23,9,2)
(24,42,2)
(45,18,2)
(43,35,2)
(41,18,2)
(3,18,2)
(1,15,2)
(9,18,2)
(20,18,2)
(43,18,2)
(27,18,2)
(11,33,2)
(32,18,2)
(10,33,2)
(29,18,2)
(36,20,2)
(48,18,2)
(20,11,2)
(46,18,2)
(4,18,2)
(20,14,2)
(54,18,2)
(40,18,2)
(7,5,2)
(49,18,2)
(26,18,2)
(11,18,2)
(53,18,2)
(53,43,2)
(2,18,2)
(25,18,2)
(31,18,2)
(7,18,2)
(5,18,2)
(50,18,2)
(33,18,2)
(13,18,2)
(19,18,2)
(16,18,2)
(21,18,2)
(24,18,2)
(51,38,2)
(38,10,2)
(34,7,2)
(51,18,2)
(22,18,2)
(6,18,2)
(38,37,2)
(15,18,2)
(5,1,2)
(23,18,2)
(43,29,2)
(33,24,2)
(34,18,2)
(12,18,2)
-----------------------------------
(0,charFirst)
(1,sizeof(structCharVoid.charFirst)
(2,structCharVoid)
(3,'\\\\0')
(4,structCharVoid)
(5,sizeof(structCharVoid.charFirst)
(6,structCharVoid)
(7,(sizeof(structCharVoid.charFirst)
(8,\'\\\\0\')
(9,sizeof(structCharVoid)
(10,structCharVoid.voidSecond)
(11,structCharVoid.voidSecond)
(12,charFirst)
(13,structCharVoid)
(14,char *)
(15,structCharVoid.charFirst)
(16,structCharVoid)
(17,)
(18,STATIC_CONST_TRUE)
(19,structCharVoid.charFirst)
(20,(char *)
(21,structCharVoid)
(22,1)
(23,memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid)
(24,(void *)
(25,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(26,voidSecond)
(27,charFirst)
(28,structCharVoid)
(29,structCharVoid.charFirst)
(30,)
(31,SRC_STR)
(32,structCharVoid)
(33,structCharVoid.voidSecond = (void *)
(34,structCharVoid.charFirst[(sizeof(structCharVoid.charFirst)
(35,char *)
(36,printLine((char *)
(37,char *)
(38,(char *)
(39,if(STATIC_CONST_TRUE)
(40,structCharVoid)
(41,charFirst)
(42,void *)
(43,(char *)
(44,sizeof(char)
(45,SRC_STR)
(46,voidSecond)
(47,)
(48,structCharVoid.charFirst)
(49,char)
(50,structCharVoid.voidSecond)
(51,printLine((char *)
(52,RET)
(53,printLine((char *)
(54,voidSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^