-----label-----
1
-----code-----
static void badSink(void * data)
{
    if(badStatic)
    {
        {
            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */
            size_t dataLen = strlen((char *)data);
            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
            (void)wcscpy(dest, data);
            printLine((char *)dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
43,44
45,46
45,47
46,47
48,49
48,50
49,50
50,51
50,52
51,52
54,55
55,56
55,57
58,59
59,60
59,61
60,61
60,62
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
-----nextToken-----
2,4,6,8,9,13,19,21,25,28,30,32,35,37,38,42,44,47,52,53,56,57,61,62,65,67,69,73,76,78,80
-----computeFrom-----
48,49
48,50
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
static void badSink(void * data){    if(badStatic)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }}
static void
badSink(void * data)
badSink
void * data
void
* data
*
data
{    if(badStatic)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }}
if(badStatic)    {        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }
badStatic
badStatic
{        {            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }    }
{            /* POTENTIAL FLAW: treating pointer as a char* when it may point to a wide string */            size_t dataLen = strlen((char *)data);            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));            (void)wcscpy(dest, data);            printLine((char *)dest);        }
size_t dataLen = strlen((char *)data);
size_t dataLen = strlen((char *)data);
size_t
size_t
dataLen = strlen((char *)data)
dataLen
= strlen((char *)data)
strlen((char *)data)
strlen
strlen
(char *)data
char *
char
*
*
data
data
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));
void
* dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
*
dest
= (void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
(void *)ALLOCA((dataLen+1) * sizeof(wchar_t))
void *
void
*
*
ALLOCA((dataLen+1) * sizeof(wchar_t))
ALLOCA
ALLOCA
(dataLen+1) * sizeof(wchar_t)
(dataLen+1)
dataLen+1
dataLen
dataLen
1
sizeof(wchar_t)
wchar_t
wchar_t

(void)wcscpy(dest, data);
(void)wcscpy(dest, data)
void
void

wcscpy(dest, data)
wcscpy
wcscpy
dest
dest
data
data
printLine((char *)dest);
printLine((char *)dest)
printLine
printLine
(char *)dest
char *
char
*
*
dest
dest
-----joern-----
(3,20,0)
(6,30,0)
(1,11,0)
(20,3,0)
(18,9,0)
(32,7,0)
(7,30,0)
(34,24,0)
(19,32,0)
(16,34,0)
(24,0,0)
(14,19,0)
(9,13,0)
(21,0,0)
(5,23,0)
(30,27,0)
(29,9,0)
(32,19,0)
(3,25,0)
(8,0,0)
(12,3,0)
(17,21,0)
(9,29,0)
(30,7,0)
(9,33,0)
(10,24,0)
(32,11,0)
(22,0,0)
(15,19,0)
(27,30,0)
(30,6,0)
(2,34,0)
(31,6,0)
(24,34,0)
(25,3,0)
(29,21,0)
(34,13,0)
(34,6,0)
(24,10,0)
(3,6,0)
(11,32,0)
(6,0,0)
(19,21,0)
(20,0,0)
(21,29,0)
(33,9,0)
(7,32,0)
(0,4,0)
(14,31,1)
(11,1,1)
(9,33,1)
(30,7,1)
(20,3,1)
(34,2,1)
(1,19,1)
(29,9,1)
(3,12,1)
(32,19,1)
(28,20,1)
(12,24,1)
(30,27,1)
(3,6,1)
(17,26,1)
(19,21,1)
(7,32,1)
(19,15,1)
(24,10,1)
(21,29,1)
(31,21,1)
(34,13,1)
(6,30,1)
(28,26,1)
(15,14,1)
(9,18,1)
(16,6,1)
(3,25,1)
(9,13,1)
(2,16,1)
(24,34,1)
(34,6,1)
(18,17,1)
(32,11,1)
(3,25,2)
(6,30,2)
(18,26,2)
(24,26,2)
(30,7,2)
(9,13,2)
(7,26,2)
(17,26,2)
(9,33,2)
(30,27,2)
(21,26,2)
(11,26,2)
(7,32,2)
(15,26,2)
(34,13,2)
(32,19,2)
(34,26,2)
(12,26,2)
(16,26,2)
(31,26,2)
(29,26,2)
(20,26,2)
(3,26,2)
(19,26,2)
(3,6,2)
(32,26,2)
(24,10,2)
(34,6,2)
(30,26,2)
(29,9,2)
(6,26,2)
(19,21,2)
(20,3,2)
(2,26,2)
(14,26,2)
(1,26,2)
(21,29,2)
(24,34,2)
(9,26,2)
(32,11,2)
-----------------------------------
(0,)
(1,wchar_t)
(2,data)
(3,(char *)
(4,)
(5,if(badStatic)
(6,* dest = (void *)
(7,ALLOCA((dataLen+1)
(8,dataLen)
(9,(char *)
(10,void)
(11,sizeof(wchar_t)
(12,dest)
(13,void * data)
(14,dataLen)
(15,1)
(16,dest)
(17,dataLen)
(18,data)
(19,dataLen+1)
(20,printLine((char *)
(21,dataLen = strlen((char *)
(22,dest)
(23,)
(24,(void)
(25,char *)
(26,badStatic)
(27,void *)
(28,RET)
(29,strlen((char *)
(30,(void *)
(31,dest)
(32,(dataLen+1)
(33,char *)
(34,wcscpy(dest, data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^