-----label-----
1
-----code-----
void CWE124_Buffer_Underwrite__malloc_char_loop_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    {
        char * dataBuffer = (char *)malloc(100*sizeof(char));
        if (dataBuffer == NULL) {exit(-1);}
        memset(dataBuffer, 'A', 100-1);
        dataBuffer[100-1] = '\0';
        /* FLAW: Set data pointer to before the allocated memory buffer */
        data = dataBuffer - 8;
    }
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        /* Ensure the destination buffer is null terminated */
        data[100-1] = '\0';
        printLine(data);
        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location
         * returned by malloc() so can't safely call free() on it */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
26,27
26,28
26,29
29,30
30,31
30,32
31,32
31,33
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
64,65
64,66
67,68
68,69
68,70
69,70
69,71
70,71
72,73
72,74
76,77
77,78
77,79
78,79
80,81
80,82
81,82
84,85
84,86
84,87
84,88
84,89
84,90
84,91
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
94,95
94,96
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
105,107
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
117,118
117,119
117,120
117,121
118,119
119,120
119,121
120,121
123,124
123,125
124,125
127,128
128,129
130,131
131,132
132,133
132,134
133,134
133,135
134,135
136,137
138,139
138,140
139,140
141,142
143,144
144,145
144,146
145,146
145,147
146,147
148,149
148,150
152,153
153,154
153,155
154,155
156,157
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,27,28,32,34,37,39,42,43,47,49,54,56,60,62,63,65,66,71,73,74,75,79,82,83,88,90,93,95,97,101,103,104,106,107,112,114,115,116,121,122,125,126,129,135,137,140,142,147,149,150,151,155,157
-----computeFrom-----
13,14
13,15
38,39
38,40
45,46
45,47
64,65
64,66
68,69
68,70
72,73
72,74
77,78
77,79
80,81
80,82
105,106
105,107
109,110
109,111
113,114
113,115
119,120
119,121
123,124
123,125
132,133
132,134
144,145
144,146
148,149
148,150
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE124_Buffer_Underwrite__malloc_char_loop_18_bad(){    char * data;    data = NULL;    goto source;source:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
void
CWE124_Buffer_Underwrite__malloc_char_loop_18_bad()
CWE124_Buffer_Underwrite__malloc_char_loop_18_bad
{    char * data;    data = NULL;    goto source;source:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }    {        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    {        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
source
{        char * dataBuffer = (char *)malloc(100*sizeof(char));        if (dataBuffer == NULL) {exit(-1);}        memset(dataBuffer, 'A', 100-1);        dataBuffer[100-1] = '\0';        /* FLAW: Set data pointer to before the allocated memory buffer */        data = dataBuffer - 8;    }
char * dataBuffer = (char *)malloc(100*sizeof(char));
char * dataBuffer = (char *)malloc(100*sizeof(char));
char
* dataBuffer = (char *)malloc(100*sizeof(char))
*
dataBuffer
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (dataBuffer == NULL) {exit(-1);}
dataBuffer == NULL
dataBuffer
dataBuffer
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(dataBuffer, 'A', 100-1);
memset(dataBuffer, 'A', 100-1)
memset
memset
dataBuffer
dataBuffer
'A'
100-1
100
1
dataBuffer[100-1] = '\0';
dataBuffer[100-1] = '\0'
dataBuffer[100-1]
dataBuffer
dataBuffer
100-1
100
1
'\0'
data = dataBuffer - 8;
data = dataBuffer - 8
data
data
dataBuffer - 8
dataBuffer
dataBuffer
8
{        size_t i;        char source[100];        memset(source, 'C', 100-1); /* fill with 'C's */        source[100-1] = '\0'; /* null terminate */        /* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */        for (i = 0; i < 100; i++)        {            data[i] = source[i];        }        /* Ensure the destination buffer is null terminated */        data[100-1] = '\0';        printLine(data);        /* INCIDENTAL CWE-401: Memory Leak - data may not point to location         * returned by malloc() so can't safely call free() on it */    }
size_t i;
size_t i;
size_t
size_t
i
i
char source[100];
char source[100];
char
source[100]
source
[100]
100
memset(source, 'C', 100-1);
memset(source, 'C', 100-1)
memset
memset
source
source
'C'
100-1
100
1
source[100-1] = '\0';
source[100-1] = '\0'
source[100-1]
source
source
100-1
100
1
'\0'
for (i = 0; i < 100; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(67,62,0)
(69,70,0)
(60,47,0)
(63,25,0)
(52,55,0)
(80,62,0)
(45,19,0)
(75,21,0)
(9,12,0)
(86,5,0)
(36,46,0)
(24,69,0)
(6,23,0)
(30,87,0)
(25,5,0)
(65,8,0)
(85,51,0)
(47,79,0)
(40,21,0)
(84,42,0)
(55,87,0)
(14,10,0)
(15,19,0)
(53,28,0)
(76,43,0)
(10,42,0)
(72,42,0)
(43,17,0)
(7,77,0)
(77,46,0)
(49,30,0)
(51,8,0)
(52,1,0)
(83,46,0)
(51,75,0)
(79,87,0)
(20,21,0)
(78,25,0)
(17,43,0)
(12,19,0)
(68,44,0)
(18,79,0)
(2,4,0)
(70,69,0)
(39,5,0)
(79,47,0)
(73,33,0)
(82,23,0)
(41,47,0)
(1,52,0)
(80,23,0)
(21,75,0)
(54,78,0)
(25,78,0)
(74,5,0)
(16,78,0)
(58,4,0)
(5,46,0)
(26,30,0)
(19,46,0)
(44,75,0)
(32,77,0)
(29,26,0)
(79,12,0)
(62,5,0)
(17,31,0)
(21,87,0)
(55,0,0)
(3,86,0)
(55,52,0)
(81,8,0)
(59,75,0)
(13,69,0)
(57,26,0)
(30,19,0)
(8,51,0)
(10,75,0)
(70,48,0)
(61,33,0)
(10,70,0)
(87,55,0)
(22,25,0)
(66,87,0)
(37,46,0)
(33,42,0)
(34,80,0)
(56,84,0)
(1,28,0)
(69,42,0)
(87,19,0)
(50,30,0)
(38,42,0)
(23,80,0)
(44,5,0)
(75,19,0)
(11,1,0)
(27,10,0)
(30,26,0)
(51,86,0)
(88,5,0)
(28,1,0)
(4,87,0)
(0,55,0)
(13,24,1)
(52,1,1)
(84,42,1)
(78,54,1)
(66,83,1)
(68,86,1)
(56,70,1)
(51,8,1)
(76,4,1)
(12,9,1)
(20,59,1)
(47,60,1)
(4,87,1)
(59,12,1)
(61,73,1)
(80,23,1)
(10,75,1)
(26,57,1)
(53,11,1)
(54,16,1)
(84,56,1)
(55,52,1)
(60,41,1)
(35,44,1)
(11,66,1)
(83,77,1)
(69,13,1)
(23,6,1)
(21,40,1)
(21,87,1)
(38,72,1)
(51,75,1)
(86,3,1)
(67,80,1)
(33,42,1)
(73,42,1)
(17,43,1)
(44,68,1)
(18,30,1)
(77,7,1)
(87,55,1)
(50,4,1)
(50,17,1)
(63,22,1)
(30,87,1)
(10,42,1)
(29,49,1)
(6,82,1)
(75,21,1)
(3,51,1)
(79,47,1)
(40,20,1)
(28,53,1)
(9,79,1)
(8,65,1)
(1,28,1)
(72,62,1)
(70,69,1)
(81,85,1)
(7,32,1)
(65,81,1)
(30,26,1)
(73,84,1)
(44,75,1)
(69,42,1)
(43,76,1)
(57,29,1)
(58,87,1)
(82,34,1)
(49,50,1)
(55,0,1)
(16,63,1)
(62,67,1)
(2,58,1)
(34,25,1)
(25,78,1)
(4,2,1)
(24,10,1)
(27,33,1)
(79,87,1)
(41,18,1)
(42,38,1)
(14,27,1)
(10,14,1)
(22,75,1)
(33,61,1)
(85,33,1)
(55,0,2)
(10,42,2)
(55,52,2)
(51,8,2)
(79,87,2)
(4,87,2)
(14,33,2)
(33,33,2)
(70,33,2)
(52,1,2)
(30,87,2)
(84,42,2)
(21,87,2)
(84,33,2)
(17,4,2)
(43,4,2)
(79,47,2)
(75,21,2)
(69,33,2)
(44,75,2)
(24,33,2)
(69,42,2)
(73,33,2)
(13,33,2)
(25,78,2)
(80,23,2)
(70,69,2)
(51,75,2)
(30,26,2)
(1,28,2)
(87,55,2)
(10,33,2)
(27,33,2)
(56,33,2)
(76,4,2)
(17,43,2)
(10,75,2)
(61,33,2)
(33,42,2)
-----------------------------------
(0,char *)
(1,100*sizeof(char)
(2,NULL)
(3,'\\\\0')
(4,dataBuffer == NULL)
(5,)
(6,1)
(7,NULL)
(8,100-1)
(9,'\\\\0')
(10,data[i])
(11,100)
(12,dataBuffer[100-1] = '\\\\0')
(13,i)
(14,i)
(15,if (dataBuffer == NULL)
(16,100)
(17,exit(-1)
(18,dataBuffer)
(19,)
(20,dataBuffer)
(21,dataBuffer - 8)
(22,source)
(23,100-1)
(24,source)
(25,memset(source, 'C', 100-1)
(26,100-1)
(27,data)
(28,sizeof(char)
(29,100)
(30,memset(dataBuffer, \'A\', 100-1)
(31,)
(32,data)
(33,i < 100)
(34,source)
(35,RET)
(36,source:)
(37,data)
(38,0)
(39,for (i = 0; i < 100; i++)
(40,8)
(41,100)
(42,i = 0)
(43,-1)
(44,printLine(data)
(45,dataBuffer)
(46,)
(47,100-1)
(48,)
(49,'A')
(50,dataBuffer)
(51,data[100-1])
(52,malloc(100*sizeof(char)
(53,char)
(54,1)
(55,(char *)
(56,i)
(57,1)
(58,dataBuffer)
(59,data)
(60,1)
(61,100)
(62,source[100-1] = '\\\\0')
(63,'C')
(64,memset(source, \'C\', 100-1)
(65,1)
(66,dataBuffer)
(67,'\\\\0')
(68,data)
(69,source[i])
(70,data[i] = source[i])
(71,memset(dataBuffer, 'A', 100-1)
(72,i)
(73,i)
(74,source)
(75,data = dataBuffer - 8)
(76,1)
(77,data = NULL)
(78,100-1)
(79,dataBuffer[100-1])
(80,source[100-1])
(81,100)
(82,100)
(83,goto source;)
(84,i++)
(85,data)
(86,data[100-1] = '\\\\0')
(87,* dataBuffer = (char *)
(88,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^