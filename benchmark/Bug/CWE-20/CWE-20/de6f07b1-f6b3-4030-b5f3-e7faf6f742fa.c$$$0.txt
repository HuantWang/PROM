-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(23,63,0)
(17,42,0)
(26,43,0)
(41,9,0)
(12,18,0)
(22,12,0)
(16,44,0)
(61,23,0)
(3,4,0)
(36,38,0)
(25,42,0)
(27,44,0)
(4,13,0)
(52,54,0)
(38,53,0)
(35,5,0)
(40,5,0)
(44,58,0)
(47,60,0)
(30,9,0)
(37,33,0)
(28,40,0)
(55,44,0)
(24,60,0)
(27,43,0)
(6,48,0)
(43,26,0)
(30,18,0)
(31,60,0)
(47,4,0)
(40,23,0)
(56,38,0)
(38,18,0)
(5,40,0)
(32,26,0)
(5,9,0)
(26,11,0)
(42,53,0)
(43,27,0)
(10,5,0)
(59,33,0)
(57,21,0)
(29,54,0)
(50,21,0)
(20,12,0)
(51,27,0)
(40,28,0)
(33,44,0)
(50,9,0)
(60,47,0)
(33,11,0)
(46,50,0)
(9,42,0)
(30,23,0)
(23,30,0)
(2,50,0)
(45,58,0)
(0,29,0)
(49,30,0)
(12,52,0)
(44,55,0)
(55,18,0)
(11,26,0)
(62,52,0)
(47,18,0)
(15,43,0)
(1,9,0)
(34,27,0)
(43,18,0)
(8,1,0)
(19,55,0)
(7,63,0)
(1,18,0)
(23,40,0)
(63,23,0)
(14,47,0)
(60,44,0)
(21,50,0)
(39,30,0)
(12,9,0)
(9,1,0)
(11,33,0)
(5,10,1)
(63,23,1)
(30,9,1)
(50,46,1)
(5,9,1)
(3,47,1)
(10,35,1)
(52,62,1)
(33,59,1)
(40,5,1)
(55,19,1)
(16,63,1)
(2,9,1)
(59,37,1)
(20,22,1)
(32,43,1)
(63,7,1)
(37,44,1)
(49,21,1)
(51,34,1)
(33,44,1)
(12,20,1)
(34,15,1)
(36,21,1)
(62,12,1)
(29,0,1)
(26,32,1)
(15,33,1)
(27,51,1)
(47,60,1)
(23,61,1)
(55,18,1)
(60,24,1)
(43,18,1)
(22,29,1)
(36,4,1)
(30,39,1)
(1,18,1)
(9,1,1)
(39,49,1)
(12,9,1)
(21,50,1)
(47,18,1)
(19,16,1)
(8,41,1)
(35,30,1)
(1,8,1)
(60,44,1)
(24,31,1)
(12,18,1)
(14,11,1)
(21,57,1)
(43,27,1)
(26,43,1)
(36,11,1)
(11,26,1)
(27,44,1)
(61,40,1)
(44,55,1)
(7,23,1)
(30,18,1)
(31,14,1)
(11,33,1)
(23,40,1)
(46,2,1)
(56,38,1)
(50,9,1)
(23,30,1)
(40,28,1)
(57,50,1)
(38,18,1)
(4,3,1)
(38,36,1)
(36,52,1)
(0,63,1)
(39,21,2)
(29,63,2)
(30,18,2)
(7,21,2)
(12,63,2)
(38,18,2)
(60,11,2)
(50,9,2)
(55,63,2)
(59,63,2)
(47,18,2)
(14,11,2)
(43,33,2)
(51,33,2)
(15,33,2)
(19,63,2)
(3,11,2)
(26,33,2)
(52,63,2)
(23,40,2)
(49,21,2)
(26,43,2)
(30,9,2)
(47,11,2)
(23,30,2)
(5,21,2)
(44,55,2)
(60,44,2)
(35,21,2)
(9,1,2)
(16,63,2)
(22,63,2)
(44,63,2)
(0,63,2)
(1,18,2)
(31,11,2)
(33,63,2)
(40,28,2)
(43,27,2)
(63,23,2)
(11,63,2)
(34,33,2)
(21,50,2)
(11,33,2)
(20,63,2)
(24,11,2)
(32,33,2)
(63,21,2)
(5,9,2)
(23,21,2)
(56,38,2)
(12,9,2)
(4,11,2)
(40,21,2)
(33,44,2)
(10,21,2)
(27,33,2)
(40,5,2)
(37,63,2)
(30,21,2)
(12,18,2)
(61,21,2)
(43,18,2)
(62,63,2)
(47,60,2)
(27,44,2)
(55,18,2)
(11,26,2)
-----------------------------------
(0,"fgets()
(1,strlen(data)
(2,100)
(3,\\\'\\\\0\\\')
(4,data[dataLen-1] = \\\'\\\\0\\\')
(5,100-dataLen)
(6,if (fgets(data+dataLen, (int)
(7,NULL)
(8,data)
(9,dataLen = strlen(data)
(10,dataLen)
(11,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,data[dataLen])
(13,)
(14,data)
(15,data)
(16,dataLen)
(17,if (100-dataLen > 1)
(18,char * data)
(19,data)
(20,dataLen)
(21,100-dataLen > 1)
(22,data)
(23,fgets(data+dataLen, (int)
(24,1)
(25,dataLen)
(26,data[dataLen-1] == \\\'\\\\n\\\')
(27,dataLen-1)
(28,int)
(29,printLine("fgets()
(30,data+dataLen)
(31,dataLen)
(32,\\\'\\\\n\\\')
(33,dataLen > 0)
(34,dataLen)
(35,100)
(36,data)
(37,dataLen)
(38,return data;)
(39,dataLen)
(40,(int)
(41,dataLen)
(42,)
(43,data[dataLen-1])
(44,dataLen = strlen(data)
(45,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(46,dataLen)
(47,data[dataLen-1])
(48,)
(49,data)
(50,100-dataLen)
(51,1)
(52,data[dataLen] = \\\'\\\\0\\\')
(53,)
(54,)
(55,strlen(data)
(56,RET)
(57,1)
(58,)
(59,0)
(60,dataLen-1)
(61,stdin)
(62,\\\'\\\\0\\\')
(63,fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^