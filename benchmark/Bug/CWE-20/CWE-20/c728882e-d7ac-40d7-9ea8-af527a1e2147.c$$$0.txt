-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FLAW: Allocate memory without using sizeof(int) */
        data = (int *)malloc(10);
        if (data == NULL) {exit(-1);}
    }
    else
    {
        /* FIX: Allocate memory using sizeof(int) */
        data = (int *)malloc(10*sizeof(int));
        if (data == NULL) {exit(-1);}
    }
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        for (i = 0; i < 10; i++)
        {
            data[i] = source[i];
        }
        printIntLine(data[0]);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
62,64
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
81,83
81,84
81,85
81,86
82,83
83,84
83,85
85,86
85,87
85,88
87,88
89,90
90,91
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
98,102
99,100
100,101
100,102
101,102
104,105
104,106
105,106
108,109
109,110
111,112
112,113
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
129,130
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,39,41,46,48,53,56,58,61,63,66,67,71,73,78,80,84,86,88,91,95,97,102,103,106,107,110,116,118,121,123,127,130,131,135,137
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
51,52
51,53
62,63
62,64
69,70
69,71
100,101
100,102
104,105
104,106
113,114
113,115
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate memory using sizeof(int) */        data = (int *)malloc(10*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad()
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate memory using sizeof(int) */        data = (int *)malloc(10*sizeof(int));        if (data == NULL) {exit(-1);}    }    {        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }    else    {        /* FIX: Allocate memory using sizeof(int) */        data = (int *)malloc(10*sizeof(int));        if (data == NULL) {exit(-1);}    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FLAW: Allocate memory without using sizeof(int) */        data = (int *)malloc(10);        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10);
data = (int *)malloc(10)
data
data
(int *)malloc(10)
int *
int
*
*
malloc(10)
malloc
malloc
10
if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        /* FIX: Allocate memory using sizeof(int) */        data = (int *)malloc(10*sizeof(int));        if (data == NULL) {exit(-1);}    }
data = (int *)malloc(10*sizeof(int));
data = (int *)malloc(10*sizeof(int))
data
data
(int *)malloc(10*sizeof(int))
int *
int
*
*
malloc(10*sizeof(int))
malloc
malloc
10*sizeof(int)
10
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        int source[10] = {0};        size_t i;        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */        for (i = 0; i < 10; i++)        {            data[i] = source[i];        }        printIntLine(data[0]);        free(data);    }
int source[10] = {0};
int source[10] = {0};
int
source[10] = {0}
source
[10]
10
= {0}
{0}
0
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 10; i++)        {            data[i] = source[i];        }
i = 0;
i = 0
i
i
0
i < 10
i
i
10
i++
i
i
{            data[i] = source[i];        }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(23,16,0)
(54,8,0)
(4,21,0)
(59,6,0)
(62,21,0)
(18,56,0)
(3,37,0)
(64,6,0)
(44,53,0)
(16,43,0)
(56,49,0)
(42,41,0)
(25,31,0)
(51,23,0)
(8,54,0)
(30,54,0)
(60,23,0)
(39,34,0)
(12,58,0)
(53,41,0)
(4,26,0)
(54,2,0)
(31,28,0)
(37,28,0)
(7,28,0)
(61,4,0)
(45,12,0)
(9,2,0)
(17,27,0)
(21,4,0)
(17,48,0)
(10,13,0)
(47,31,0)
(50,66,0)
(27,17,0)
(33,30,0)
(30,28,0)
(12,23,0)
(57,8,0)
(12,54,0)
(16,26,0)
(19,18,0)
(58,53,0)
(11,66,0)
(66,50,0)
(8,46,0)
(40,41,0)
(56,18,0)
(15,57,0)
(0,17,0)
(63,17,0)
(43,16,0)
(58,12,0)
(26,4,0)
(32,48,0)
(8,57,0)
(55,28,0)
(17,28,0)
(26,16,0)
(50,67,0)
(29,12,0)
(16,23,0)
(27,5,0)
(14,35,0)
(36,35,0)
(6,41,0)
(46,8,0)
(48,53,0)
(1,60,0)
(22,60,0)
(30,27,0)
(20,30,0)
(68,53,0)
(34,53,0)
(35,54,0)
(34,23,0)
(38,53,0)
(65,54,0)
(30,23,0)
(34,54,0)
(23,13,0)
(61,51,1)
(11,60,1)
(35,54,1)
(47,37,1)
(33,20,1)
(30,28,1)
(3,27,1)
(63,0,1)
(35,14,1)
(58,12,1)
(15,65,1)
(45,31,1)
(32,60,1)
(28,7,1)
(16,43,1)
(59,64,1)
(66,11,1)
(25,47,1)
(23,16,1)
(62,61,1)
(19,35,1)
(34,54,1)
(65,24,1)
(36,54,1)
(17,28,1)
(14,36,1)
(24,6,1)
(17,48,1)
(31,25,1)
(32,35,1)
(60,22,1)
(55,48,1)
(34,39,1)
(48,32,1)
(8,46,1)
(32,56,1)
(60,23,1)
(27,17,1)
(31,28,1)
(20,31,1)
(56,18,1)
(8,57,1)
(34,23,1)
(0,30,1)
(30,23,1)
(12,23,1)
(26,4,1)
(7,55,1)
(16,26,1)
(21,62,1)
(50,66,1)
(30,54,1)
(57,15,1)
(29,45,1)
(51,24,1)
(6,59,1)
(37,28,1)
(12,54,1)
(12,29,1)
(4,21,1)
(1,23,1)
(52,34,1)
(32,50,1)
(54,8,1)
(47,28,1)
(18,19,1)
(22,1,1)
(37,3,1)
(39,58,1)
(30,33,1)
(17,63,1)
(25,31,2)
(50,66,2)
(3,31,2)
(11,60,2)
(26,24,2)
(35,54,2)
(63,31,2)
(27,31,2)
(16,24,2)
(60,24,2)
(54,24,2)
(35,24,2)
(56,18,2)
(58,12,2)
(8,24,2)
(4,21,2)
(37,28,2)
(50,60,2)
(30,28,2)
(4,24,2)
(22,24,2)
(8,46,2)
(16,43,2)
(56,35,2)
(30,54,2)
(51,24,2)
(57,24,2)
(23,16,2)
(34,54,2)
(19,35,2)
(17,48,2)
(8,57,2)
(12,23,2)
(54,8,2)
(12,54,2)
(14,24,2)
(60,23,2)
(17,31,2)
(20,31,2)
(34,23,2)
(33,31,2)
(16,26,2)
(1,24,2)
(21,24,2)
(36,24,2)
(31,28,2)
(30,31,2)
(65,24,2)
(15,24,2)
(0,31,2)
(66,60,2)
(37,31,2)
(30,23,2)
(23,24,2)
(17,28,2)
(47,31,2)
(18,35,2)
(31,31,2)
(61,24,2)
(26,4,2)
(62,24,2)
(27,17,2)
-----------------------------------
(0,source)
(1,data)
(2,)
(3,i)
(4,10*sizeof(int)
(5,)
(6,data = NULL)
(7,0)
(8,(int *)
(9,if (data == NULL)
(10,if (data == NULL)
(11,1)
(12,data[0])
(13,)
(14,NULL)
(15,10)
(16,(int *)
(17,source[i])
(18,-1)
(19,1)
(20,data)
(21,sizeof(int)
(22,NULL)
(23,data = (int *)
(24,globalReturnsTrueOrFalse()
(25,10)
(26,malloc(10*sizeof(int)
(27,data[i] = source[i])
(28,i = 0)
(29,0)
(30,data[i])
(31,i < 10)
(32,source)
(33,i)
(34,free(data)
(35,data == NULL)
(36,data)
(37,i++)
(38,source)
(39,data)
(40,data)
(41,)
(42,if(globalReturnsTrueOrFalse()
(43,int *)
(44,i)
(45,data)
(46,int *)
(47,i)
(48,source[10] = {0})
(49,)
(50,exit(-1)
(51,data)
(52,RET)
(53,)
(54,data = (int *)
(55,i)
(56,exit(-1)
(57,malloc(10)
(58,printIntLine(data[0])
(59,NULL)
(60,data == NULL)
(61,10)
(62,int)
(63,i)
(64,data)
(65,data)
(66,-1)
(67,)
(68,for (i = 0; i < 10; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^