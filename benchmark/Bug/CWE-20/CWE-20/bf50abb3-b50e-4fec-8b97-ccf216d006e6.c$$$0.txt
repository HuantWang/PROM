-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_03_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            unsigned int result = data;            printUnsignedLine(result);        }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(22,21,0)
(5,17,0)
(6,22,0)
(14,17,0)
(15,21,0)
(15,17,0)
(4,21,0)
(0,21,0)
(28,23,0)
(18,7,0)
(26,22,0)
(23,17,0)
(19,7,0)
(28,29,0)
(17,7,0)
(16,4,0)
(21,8,0)
(13,28,0)
(11,15,0)
(22,17,0)
(2,20,0)
(23,28,0)
(3,23,0)
(4,22,0)
(1,24,0)
(10,28,0)
(9,20,0)
(12,7,0)
(25,24,0)
(11,24,1)
(4,22,1)
(1,20,1)
(13,10,1)
(23,17,1)
(22,6,1)
(6,26,1)
(24,25,1)
(4,16,1)
(28,23,1)
(20,2,1)
(9,17,1)
(14,5,1)
(23,3,1)
(26,15,1)
(3,13,1)
(15,17,1)
(16,22,1)
(1,28,1)
(27,4,1)
(22,17,1)
(15,11,1)
(2,9,1)
(17,14,1)
(27,24,1)
(10,20,1)
(25,1,1)
(22,17,2)
(23,17,2)
(28,20,2)
(4,24,2)
(10,20,2)
(28,23,2)
(26,24,2)
(3,20,2)
(15,17,2)
(23,20,2)
(22,24,2)
(11,24,2)
(6,24,2)
(13,20,2)
(16,24,2)
(4,22,2)
(15,24,2)
-----------------------------------
(0,result)
(1,5)
(2,5)
(3,data)
(4,printUnsignedLine(result)
(5,data)
(6,data)
(7,)
(8,)
(9,5)
(10,stdin)
(11,data)
(12,if(5==5)
(13,"%u")
(14,0)
(15,++data)
(16,result)
(17,data = 0)
(18,if(5==5)
(19,data)
(20,5==5)
(21,)
(22,result = data)
(23,&data)
(24,5==5)
(25,5)
(26,result)
(27,RET)
(28,fscanf (stdin, "%u", &data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^