-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
        unsigned int result = data * data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_15_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(23,16,0)
(8,25,0)
(24,26,0)
(25,8,0)
(16,22,0)
(5,16,0)
(0,32,0)
(8,28,0)
(15,29,0)
(9,32,0)
(14,28,0)
(32,13,0)
(11,25,0)
(33,22,0)
(6,8,0)
(32,0,0)
(36,29,0)
(18,22,0)
(17,22,0)
(26,28,0)
(31,25,0)
(37,29,0)
(0,29,0)
(2,29,0)
(13,32,0)
(7,30,0)
(19,37,0)
(20,30,0)
(4,30,0)
(26,8,0)
(25,0,0)
(3,7,0)
(28,30,0)
(10,29,0)
(25,16,0)
(27,30,0)
(12,30,0)
(32,9,0)
(21,0,0)
(35,2,1)
(20,26,1)
(25,0,1)
(37,19,1)
(8,25,1)
(19,34,1)
(27,7,1)
(23,5,1)
(0,32,1)
(1,20,1)
(2,0,1)
(25,11,1)
(24,8,1)
(16,23,1)
(3,35,1)
(1,27,1)
(25,16,1)
(6,35,1)
(34,16,1)
(26,24,1)
(36,37,1)
(31,6,1)
(7,3,1)
(9,21,1)
(35,36,1)
(32,9,1)
(11,31,1)
(26,8,1)
(21,34,1)
(32,13,1)
(9,34,2)
(26,35,2)
(27,35,2)
(32,13,2)
(36,34,2)
(32,34,2)
(25,0,2)
(24,35,2)
(37,34,2)
(8,35,2)
(7,35,2)
(0,34,2)
(2,34,2)
(8,25,2)
(0,32,2)
(31,35,2)
(6,35,2)
(32,9,2)
(11,35,2)
(26,8,2)
(3,35,2)
(25,16,2)
(25,35,2)
(19,34,2)
(20,35,2)
(21,34,2)
-----------------------------------
(0,data = (unsigned int)
(1,RET)
(2,break;)
(3,"Benign, fixed string")
(4,default:)
(5,data)
(6,result)
(7,printLine("Benign, fixed string")
(8,result = data * data)
(9,RAND32()
(10,case 6:)
(11,data)
(12,case 7:)
(13,unsigned int)
(14,result)
(15,default:)
(16,data = 0)
(17,data)
(18,switch(7)
(19,"Benign, fixed string")
(20,break;)
(21,data)
(22,)
(23,0)
(24,result)
(25,data * data)
(26,printUnsignedLine(result)
(27,break;)
(28,)
(29,)
(30,)
(31,data)
(32,(unsigned int)
(33,switch(6)
(34,6)
(35,7)
(36,break;)
(37,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^