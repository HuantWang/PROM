-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FLAW: Did not leave space for a null terminator */
        data = (wchar_t *)malloc(10*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
    }
    {
        wchar_t source[10+1] = SRC_STRING;
        /* Copy length + 1 to include NUL terminator from source */
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
56,57
57,58
57,59
59,60
59,61
59,62
61,62
62,63
62,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
82,83
85,86
86,87
86,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,63,64,67,71,73,75,81,83,84,87,88,92,94,98,100
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
62,63
62,64
76,77
76,78
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad(){    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad
{    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }    {        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
staticFive==5
staticFive
staticFive
5
{        /* FLAW: Did not leave space for a null terminator */        data = (wchar_t *)malloc(10*sizeof(wchar_t));        if (data == NULL) {exit(-1);}    }
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* Copy length + 1 to include NUL terminator from source */        /* POTENTIAL FLAW: data may not have enough space to hold source */        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));
memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t))
memcpy
memcpy
data
data
source
source
(wcslen(source) + 1) * sizeof(wchar_t)
(wcslen(source) + 1)
wcslen(source) + 1
wcslen(source)
wcslen
wcslen
source
source
1
sizeof(wchar_t)
wchar_t
wchar_t

printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(29,18,0)
(45,9,0)
(31,39,0)
(1,8,0)
(36,37,0)
(33,18,0)
(27,5,0)
(26,17,0)
(30,11,0)
(41,45,0)
(15,13,0)
(39,31,0)
(40,3,0)
(42,5,0)
(18,12,0)
(46,11,0)
(9,35,0)
(16,26,0)
(6,26,0)
(32,28,0)
(34,13,0)
(3,45,0)
(31,38,0)
(29,26,0)
(3,18,0)
(34,25,0)
(37,45,0)
(37,18,0)
(3,17,0)
(25,28,0)
(38,31,0)
(45,7,0)
(29,25,0)
(25,34,0)
(42,2,0)
(22,8,0)
(9,45,0)
(29,45,0)
(43,38,0)
(17,12,0)
(20,31,0)
(4,29,0)
(37,17,0)
(28,25,0)
(29,17,0)
(10,18,0)
(5,42,0)
(24,29,0)
(25,29,0)
(9,39,0)
(14,34,0)
(0,17,0)
(35,9,0)
(8,45,0)
(23,12,0)
(39,9,0)
(44,12,0)
(13,34,0)
(13,26,0)
(21,7,0)
(40,37,1)
(8,45,1)
(19,3,1)
(13,15,1)
(36,29,1)
(34,13,1)
(4,26,1)
(29,45,1)
(24,4,1)
(32,34,1)
(31,38,1)
(37,36,1)
(46,18,1)
(27,8,1)
(18,10,1)
(45,9,1)
(8,1,1)
(25,34,1)
(14,13,1)
(3,40,1)
(1,22,1)
(37,45,1)
(13,26,1)
(29,26,1)
(37,18,1)
(15,24,1)
(16,11,1)
(34,14,1)
(10,33,1)
(20,41,1)
(5,27,1)
(22,45,1)
(43,20,1)
(9,39,1)
(42,5,1)
(25,28,1)
(29,25,1)
(39,31,1)
(3,45,1)
(38,43,1)
(16,8,1)
(11,30,1)
(3,18,1)
(28,32,1)
(29,18,1)
(26,6,1)
(9,35,1)
(6,16,1)
(16,42,1)
(41,11,1)
(30,46,1)
(41,11,2)
(34,13,2)
(25,34,2)
(22,11,2)
(37,18,2)
(1,11,2)
(31,38,2)
(5,8,2)
(38,11,2)
(42,8,2)
(29,25,2)
(9,35,2)
(9,39,2)
(29,45,2)
(29,18,2)
(20,11,2)
(3,45,2)
(39,31,2)
(42,5,2)
(43,11,2)
(3,18,2)
(45,9,2)
(45,11,2)
(9,11,2)
(29,26,2)
(13,26,2)
(37,45,2)
(8,11,2)
(39,11,2)
(31,11,2)
(27,8,2)
(8,45,2)
(25,28,2)
-----------------------------------
(0,source)
(1,NULL)
(2,)
(3,free(data)
(4,data)
(5,-1)
(6,SRC_STRING)
(7,)
(8,data == NULL)
(9,(wchar_t *)
(10,NULL)
(11,staticFive==5)
(12,)
(13,wcslen(source)
(14,1)
(15,source)
(16,source)
(17,)
(18,data = NULL)
(19,RET)
(20,10)
(21,if (data == NULL)
(22,data)
(23,if(staticFive==5)
(24,source)
(25,(wcslen(source)
(26,source[10+1] = SRC_STRING)
(27,1)
(28,sizeof(wchar_t)
(29,memcpy(data, source, (wcslen(source)
(30,5)
(31,10*sizeof(wchar_t)
(32,wchar_t)
(33,data)
(34,wcslen(source)
(35,wchar_t *)
(36,data)
(37,printWLine(data)
(38,sizeof(wchar_t)
(39,malloc(10*sizeof(wchar_t)
(40,data)
(41,data)
(42,exit(-1)
(43,wchar_t)
(44,data)
(45,data = (wchar_t *)
(46,staticFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^