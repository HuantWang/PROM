-----label-----
1
-----code-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18_bad()
{
    wchar_t * data;
    data = NULL;
    goto source;
source:
    /* FLAW: Did not leave space for a null terminator */
    data = (wchar_t *)malloc(10*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    {
        wchar_t source[10+1] = SRC_STRING;
        /* POTENTIAL FLAW: data may not have enough space to hold source */
        wcscpy(data, source);
        printWLine(data);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
54,55
55,56
55,57
57,58
57,59
57,60
59,60
60,61
60,62
63,64
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,56,58,61,62,65,69,71,73,77,79,83,85
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;LiteralExpression;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18_bad(){    wchar_t * data;    data = NULL;    goto source;source:    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
void
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18_bad()
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18_bad
{    wchar_t * data;    data = NULL;    goto source;source:    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    {        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FLAW: Did not leave space for a null terminator */    data = (wchar_t *)malloc(10*sizeof(wchar_t));
source
data = (wchar_t *)malloc(10*sizeof(wchar_t));
data = (wchar_t *)malloc(10*sizeof(wchar_t))
data
data
(wchar_t *)malloc(10*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(10*sizeof(wchar_t))
malloc
malloc
10*sizeof(wchar_t)
10
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
{        wchar_t source[10+1] = SRC_STRING;        /* POTENTIAL FLAW: data may not have enough space to hold source */        wcscpy(data, source);        printWLine(data);        free(data);    }
wchar_t source[10+1] = SRC_STRING;
wchar_t source[10+1] = SRC_STRING;
wchar_t
source[10+1] = SRC_STRING
source
[10+1]
10+1
10
1
= SRC_STRING
SRC_STRING
SRC_STRING
wcscpy(data, source);
wcscpy(data, source)
wcscpy
wcscpy
data
data
source
source
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,12,0)
(0,10,0)
(12,23,0)
(27,31,0)
(14,5,0)
(5,32,0)
(10,23,0)
(4,20,0)
(22,19,0)
(17,10,0)
(29,23,0)
(15,5,0)
(17,31,0)
(35,32,0)
(30,32,0)
(2,18,0)
(21,19,0)
(17,18,0)
(36,10,0)
(7,32,0)
(23,10,0)
(0,18,0)
(12,26,0)
(6,31,0)
(10,32,0)
(33,28,0)
(1,18,0)
(8,34,0)
(26,20,0)
(3,0,0)
(9,2,0)
(23,12,0)
(13,17,0)
(20,26,0)
(18,32,0)
(24,26,0)
(33,34,0)
(23,29,0)
(2,10,0)
(19,10,0)
(16,17,0)
(34,33,0)
(25,32,0)
(31,18,0)
(34,8,1)
(9,0,1)
(33,34,1)
(19,10,1)
(17,16,1)
(22,10,1)
(17,10,1)
(16,13,1)
(17,31,1)
(27,6,1)
(14,15,1)
(6,19,1)
(19,21,1)
(5,14,1)
(21,22,1)
(0,3,1)
(7,5,1)
(26,20,1)
(12,26,1)
(0,10,1)
(31,27,1)
(23,29,1)
(23,12,1)
(4,24,1)
(20,4,1)
(11,2,1)
(2,9,1)
(24,36,1)
(13,31,1)
(2,10,1)
(8,19,1)
(10,23,1)
(36,7,1)
(6,33,1)
(3,17,1)
(8,19,2)
(10,23,2)
(34,19,2)
(33,34,2)
(17,10,2)
(19,10,2)
(12,26,2)
(26,20,2)
(17,31,2)
(0,10,2)
(23,29,2)
(23,12,2)
(2,10,2)
(33,19,2)
-----------------------------------
(0,printWLine(data)
(1,source)
(2,free(data)
(3,data)
(4,wchar_t)
(5,data = NULL)
(6,source)
(7,goto source;)
(8,1)
(9,data)
(10,data = (wchar_t *)
(11,RET)
(12,malloc(10*sizeof(wchar_t)
(13,data)
(14,NULL)
(15,data)
(16,source)
(17,wcscpy(data, source)
(18,)
(19,data == NULL)
(20,sizeof(wchar_t)
(21,NULL)
(22,data)
(23,(wchar_t *)
(24,10)
(25,data)
(26,10*sizeof(wchar_t)
(27,SRC_STRING)
(28,)
(29,wchar_t *)
(30,if (data == NULL)
(31,source[10+1] = SRC_STRING)
(32,)
(33,exit(-1)
(34,-1)
(35,source:)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^