-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_wchar_t_memcpy_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FLAW: Use a small buffer */
        data = (wchar_t *)malloc(50*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wmemset(data, L'A', 50-1); /* fill with 'A's */
        data[50-1] = L'\0'; /* null terminate */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t dest[100];
        wmemset(dest, L'C', 100-1);
        dest[100-1] = L'\0'; /* null terminate */
        /* POTENTIAL FLAW: using memcpy with the length of the dest where data
         * could be smaller than dest causing buffer overread */
        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));
        dest[100-1] = L'\0';
        printWLine(dest);
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
55,59
56,57
58,59
61,62
61,63
64,65
65,66
65,67
66,67
66,68
67,68
69,70
69,71
75,76
76,77
76,78
77,78
81,82
81,83
81,84
81,85
81,86
81,87
81,88
82,83
83,84
83,85
85,86
85,87
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
96,97
96,98
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
116,118
117,118
117,119
118,119
120,121
122,123
123,124
123,125
126,127
127,128
127,129
128,129
128,130
129,130
131,132
131,133
135,136
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,62,63,68,70,71,72,73,74,78,79,80,84,86,88,92,94,95,97,98,103,105,106,107,111,113,115,119,121,124,125,130,132,133,134,138,140,144,146
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
61,62
61,63
65,66
65,67
69,70
69,71
96,97
96,98
100,101
100,102
104,105
104,106
116,117
116,118
127,128
127,129
131,132
131,133
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_wchar_t_memcpy_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
void
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_15_bad()
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FLAW: Use a small buffer */        data = (wchar_t *)malloc(50*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wmemset(data, L'A', 50-1); /* fill with 'A's */        data[50-1] = L'\0'; /* null terminate */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)malloc(50*sizeof(wchar_t));
data = (wchar_t *)malloc(50*sizeof(wchar_t))
data
data
(wchar_t *)malloc(50*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(50*sizeof(wchar_t))
malloc
malloc
50*sizeof(wchar_t)
50
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wmemset(data, L'A', 50-1);
wmemset(data, L'A', 50-1)
wmemset
wmemset
data
data
L'A'
50-1
50
1
data[50-1] = L'\0';
data[50-1] = L'\0'
data[50-1]
data
data
50-1
50
1
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t dest[100];        wmemset(dest, L'C', 100-1);        dest[100-1] = L'\0'; /* null terminate */        /* POTENTIAL FLAW: using memcpy with the length of the dest where data         * could be smaller than dest causing buffer overread */        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));        dest[100-1] = L'\0';        printWLine(dest);        free(data);    }
wchar_t dest[100];
wchar_t dest[100];
wchar_t
dest[100]
dest
[100]
100
wmemset(dest, L'C', 100-1);
wmemset(dest, L'C', 100-1)
wmemset
wmemset
dest
dest
L'C'
100-1
100
1
dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));
memcpy(dest, data, wcslen(dest)*sizeof(wchar_t))
memcpy
memcpy
dest
dest
data
data
wcslen(dest)*sizeof(wchar_t)
wcslen(dest)
wcslen
wcslen
dest
dest
sizeof(wchar_t)
wchar_t
wchar_t

dest[100-1] = L'\0';
dest[100-1] = L'\0'
dest[100-1]
dest
dest
100-1
100
1
L'\0'
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(33,28,0)
(31,6,0)
(36,44,0)
(47,19,0)
(20,14,0)
(43,34,0)
(36,39,0)
(44,36,0)
(26,11,0)
(38,34,0)
(37,48,0)
(23,29,0)
(45,34,0)
(11,34,0)
(30,34,0)
(33,44,0)
(25,11,0)
(15,5,0)
(26,6,0)
(16,6,0)
(16,48,0)
(32,39,0)
(24,37,0)
(7,16,0)
(28,33,0)
(0,19,0)
(13,12,0)
(9,26,0)
(6,19,0)
(8,23,0)
(40,6,0)
(14,6,0)
(5,48,0)
(23,8,0)
(16,0,0)
(11,33,0)
(48,16,0)
(46,0,0)
(41,30,0)
(12,11,0)
(22,19,0)
(2,12,0)
(10,34,0)
(16,11,0)
(35,34,0)
(3,8,0)
(48,5,0)
(21,0,0)
(48,37,0)
(42,6,0)
(27,36,0)
(4,34,0)
(26,0,0)
(1,16,0)
(33,11,0)
(44,33,0)
(39,36,0)
(21,46,1)
(32,27,1)
(40,43,1)
(13,2,1)
(26,9,1)
(2,11,1)
(0,21,1)
(16,48,1)
(7,40,1)
(23,8,1)
(44,36,1)
(33,28,1)
(45,23,1)
(16,11,1)
(41,18,1)
(12,13,1)
(48,5,1)
(48,37,1)
(30,41,1)
(16,0,1)
(15,37,1)
(8,3,1)
(26,0,1)
(36,39,1)
(24,1,1)
(33,44,1)
(1,7,1)
(14,20,1)
(18,0,1)
(20,42,1)
(25,18,1)
(45,12,1)
(37,24,1)
(39,32,1)
(40,35,1)
(42,16,1)
(5,15,1)
(35,45,1)
(43,30,1)
(26,11,1)
(12,11,1)
(17,26,1)
(3,12,1)
(9,14,1)
(27,25,1)
(11,33,1)
(41,18,2)
(16,0,2)
(27,18,2)
(39,18,2)
(12,18,2)
(16,48,2)
(12,11,2)
(45,18,2)
(30,18,2)
(11,18,2)
(36,39,2)
(13,18,2)
(23,12,2)
(26,11,2)
(33,18,2)
(33,44,2)
(25,18,2)
(44,18,2)
(33,28,2)
(11,33,2)
(26,0,2)
(2,18,2)
(48,37,2)
(44,36,2)
(16,11,2)
(8,12,2)
(36,18,2)
(35,18,2)
(48,5,2)
(23,8,2)
(3,12,2)
(43,18,2)
(32,18,2)
-----------------------------------
(0,data = NULL)
(1,data)
(2,data)
(3,1)
(4,if (data == NULL)
(5,sizeof(wchar_t)
(6,)
(7,dest)
(8,-1)
(9,data)
(10,default:)
(11,data = (wchar_t *)
(12,data == NULL)
(13,NULL)
(14,printWLine(dest)
(15,wchar_t)
(16,memcpy(dest, data, wcslen(dest)
(17,RET)
(18,6)
(19,)
(20,dest)
(21,NULL)
(22,switch(6)
(23,exit(-1)
(24,dest)
(25,data)
(26,free(data)
(27,50)
(28,wchar_t *)
(29,)
(30,printLine("Benign, fixed string")
(31,dest)
(32,wchar_t)
(33,(wchar_t *)
(34,)
(35,break;)
(36,50*sizeof(wchar_t)
(37,wcslen(dest)
(38,case 6:)
(39,sizeof(wchar_t)
(40,\\\'\\\\0\\\')
(41,"Benign, fixed string")
(42,\\\'\\\\0\\\')
(43,break;)
(44,malloc(50*sizeof(wchar_t)
(45,\\\'\\\\0\\\')
(46,data)
(47,data)
(48,wcslen(dest)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^