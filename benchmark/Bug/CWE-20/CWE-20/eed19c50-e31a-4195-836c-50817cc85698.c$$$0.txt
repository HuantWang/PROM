-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_bad()
{
    twoIntsStruct * data;
    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType myUnion;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printStructLine(&data[0]);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
63,64
64,65
64,66
65,66
67,68
67,69
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
91,93
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
98,99
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
108,109
112,113
112,114
112,115
113,114
114,115
114,116
115,116
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
125,126
125,127
126,127
129,130
130,131
132,133
133,134
134,135
134,136
135,136
135,137
136,137
138,139
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
150,151
150,152
151,152
-----nextToken-----
2,4,9,11,12,16,18,22,24,26,30,32,34,38,40,45,46,48,53,55,56,60,61,66,68,70,75,77,82,83,86,87,90,97,99,100,101,107,109,110,111,116,118,123,124,127,128,131,137,139,142,144,148,152,153
-----computeFrom-----
36,37
36,38
42,43
42,44
80,81
80,82
84,85
84,86
93,94
93,95
103,104
103,105
121,122
121,123
125,126
125,127
134,135
134,136
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_bad(){    twoIntsStruct * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType myUnion;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_bad
{    twoIntsStruct * data;    CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType myUnion;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType myUnion;
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34_unionType
myUnion
myUnion
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            {                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
{                size_t i;                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */                for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }                printStructLine(&data[0]);            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    data[i] = source[i];                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    data[i] = source[i];                }
data[i] = source[i];
data[i] = source[i]
data[i]
data
data
i
i
source[i]
source
source
i
i
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(49,14,0)
(60,14,0)
(18,54,0)
(61,46,0)
(54,56,0)
(43,11,0)
(48,56,0)
(3,36,0)
(14,49,0)
(64,0,0)
(51,22,0)
(9,56,0)
(65,38,0)
(11,26,0)
(71,54,0)
(2,7,0)
(12,17,0)
(25,59,0)
(42,58,0)
(14,26,0)
(6,26,0)
(22,17,0)
(36,63,0)
(37,14,0)
(51,46,0)
(72,63,0)
(1,7,0)
(70,26,0)
(16,7,0)
(23,72,0)
(61,35,0)
(11,22,0)
(22,58,0)
(17,22,0)
(32,0,0)
(59,58,0)
(21,69,0)
(62,54,0)
(52,59,0)
(34,26,0)
(29,62,0)
(19,38,0)
(38,62,0)
(30,17,0)
(49,41,0)
(67,25,0)
(11,49,0)
(2,23,0)
(35,59,0)
(31,1,0)
(20,51,0)
(0,7,0)
(40,11,0)
(47,35,0)
(33,2,0)
(39,2,0)
(62,56,0)
(69,26,0)
(45,35,0)
(32,36,0)
(5,25,0)
(55,56,0)
(68,1,0)
(10,56,0)
(44,6,0)
(8,6,0)
(58,56,0)
(50,7,0)
(24,22,0)
(27,50,0)
(15,7,0)
(57,0,0)
(23,2,0)
(0,32,0)
(46,61,0)
(46,51,0)
(13,32,0)
(4,72,0)
(53,51,0)
(28,23,0)
(22,17,1)
(30,12,1)
(32,0,1)
(53,20,1)
(70,34,1)
(57,64,1)
(34,1,1)
(62,54,1)
(68,50,1)
(7,16,1)
(17,30,1)
(66,61,1)
(6,26,1)
(11,43,1)
(29,38,1)
(12,24,1)
(49,14,1)
(2,33,1)
(54,18,1)
(28,2,1)
(51,53,1)
(23,2,1)
(62,29,1)
(19,54,1)
(20,6,1)
(11,26,1)
(2,7,1)
(0,57,1)
(0,7,1)
(13,0,1)
(64,72,1)
(37,60,1)
(72,4,1)
(32,13,1)
(46,51,1)
(18,71,1)
(8,69,1)
(26,70,1)
(14,37,1)
(6,44,1)
(14,26,1)
(39,1,1)
(15,22,1)
(23,28,1)
(40,6,1)
(50,7,1)
(50,27,1)
(51,22,1)
(21,49,1)
(38,65,1)
(69,21,1)
(27,36,1)
(1,7,1)
(31,68,1)
(16,15,1)
(36,3,1)
(68,7,1)
(11,22,1)
(65,19,1)
(24,62,1)
(33,39,1)
(44,8,1)
(69,26,1)
(60,11,1)
(43,40,1)
(1,31,1)
(61,46,1)
(3,32,1)
(8,26,1)
(4,23,1)
(23,1,2)
(49,14,2)
(40,6,2)
(36,1,2)
(11,26,2)
(28,1,2)
(46,51,2)
(0,1,2)
(43,6,2)
(6,6,2)
(1,1,2)
(3,1,2)
(61,46,2)
(22,17,2)
(69,26,2)
(14,6,2)
(0,7,2)
(27,1,2)
(1,7,2)
(14,26,2)
(50,1,2)
(11,6,2)
(6,26,2)
(8,6,2)
(68,1,2)
(72,1,2)
(51,22,2)
(62,54,2)
(39,1,2)
(49,6,2)
(33,1,2)
(4,1,2)
(32,1,2)
(32,0,2)
(37,6,2)
(2,7,2)
(60,6,2)
(69,6,2)
(23,2,2)
(2,1,2)
(57,1,2)
(44,6,2)
(21,6,2)
(50,7,2)
(13,1,2)
(31,1,2)
(64,1,2)
(11,22,2)
-----------------------------------
(0,source[i])
(1,i < 100)
(2,source[i])
(3,0)
(4,0)
(5,i)
(6,i < 100)
(7,i = 0)
(8,i)
(9,dataBadBuffer)
(10,data)
(11,data[i])
(12,myUnion)
(13,intTwo)
(14,source[i])
(15,i)
(16,0)
(17,myUnion.unionSecond)
(18,dataBadBuffer)
(19,myUnion)
(20,data)
(21,i)
(22,* data = myUnion.unionSecond)
(23,source[i].intOne)
(24,data)
(25,)
(26,i = 0)
(27,i)
(28,intOne)
(29,data)
(30,unionSecond)
(31,100)
(32,source[i].intTwo)
(33,i)
(34,i)
(35,)
(36,source[i].intTwo = 0)
(37,i)
(38,myUnion.unionFirst)
(39,source)
(40,data)
(41,)
(42,data)
(43,i)
(44,100)
(45,for (i = 0; i < 100; i++)
(46,&data[0])
(47,i)
(48,dataGoodBuffer)
(49,data[i] = source[i])
(50,i++)
(51,data[0])
(52,source)
(53,0)
(54,data = dataBadBuffer)
(55,myUnion)
(56,)
(57,i)
(58,)
(59,)
(60,source)
(61,printStructLine(&data[0])
(62,myUnion.unionFirst = data)
(63,)
(64,source)
(65,unionFirst)
(66,RET)
(67,for (i = 0; i < 100; i++)
(68,i)
(69,i++)
(70,0)
(71,data)
(72,source[i].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^