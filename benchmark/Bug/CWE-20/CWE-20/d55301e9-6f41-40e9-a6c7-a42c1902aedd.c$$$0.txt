-----label-----
1
-----code-----
void CWE126_Buffer_Overread__malloc_char_loop_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* FLAW: Use a small buffer */
        data = (char *)malloc(50*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 50-1); /* fill with 'A's */
        data[50-1] = '\0'; /* null terminate */
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            size_t i, destLen;
            char dest[100];
            memset(dest, 'C', 100-1);
            dest[100-1] = '\0'; /* null terminate */
            destLen = strlen(dest);
            /* POTENTIAL FLAW: using length of the dest where data
             * could be smaller than dest causing buffer overread */
            for (i = 0; i < destLen; i++)
            {
                dest[i] = data[i];
            }
            dest[100-1] = '\0';
            printLine(dest);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
89,90
89,91
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
101,102
102,103
102,104
103,104
104,105
106,107
108,109
108,110
109,110
110,111
110,112
112,113
112,114
112,115
115,116
116,117
117,118
119,120
119,121
119,122
119,123
119,124
119,125
119,126
119,127
119,128
120,121
121,122
121,123
121,124
122,123
124,125
126,127
128,129
129,130
129,131
131,132
131,133
133,134
135,136
136,137
136,138
136,139
136,140
137,138
139,140
142,143
142,144
145,146
146,147
146,148
147,148
147,149
148,149
150,151
150,152
154,155
155,156
155,157
156,157
158,159
158,160
159,160
161,162
163,164
163,165
163,166
163,167
164,165
165,166
165,167
166,167
169,170
169,171
170,171
172,173
174,175
175,176
177,178
178,179
179,180
179,181
180,181
180,182
181,182
183,184
185,186
185,187
186,187
188,189
190,191
191,192
191,193
192,193
192,194
193,194
195,196
195,197
199,200
200,201
200,202
201,202
203,204
205,206
206,207
206,208
207,208
209,210
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,85,87,88,90,91,96,98,99,100,105,107,111,113,114,118,123,125,127,130,132,134,138,140,141,143,144,149,151,152,153,157,160,162,167,168,171,173,176,182,184,187,189,194,196,197,198,202,204,208,210
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
89,90
89,91
93,94
93,95
97,98
97,99
102,103
102,104
142,143
142,144
146,147
146,148
150,151
150,152
155,156
155,157
165,166
165,167
169,170
169,171
179,180
179,181
191,192
191,193
195,196
195,197
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE126_Buffer_Overread__malloc_char_loop_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
void
CWE126_Buffer_Overread__malloc_char_loop_32_bad()
CWE126_Buffer_Overread__malloc_char_loop_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* FLAW: Use a small buffer */        data = (char *)malloc(50*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 50-1); /* fill with 'A's */        data[50-1] = '\0'; /* null terminate */        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(50*sizeof(char));
data = (char *)malloc(50*sizeof(char))
data
data
(char *)malloc(50*sizeof(char))
char *
char
*
*
malloc(50*sizeof(char))
malloc
malloc
50*sizeof(char)
50
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 50-1);
memset(data, 'A', 50-1)
memset
memset
data
data
'A'
50-1
50
1
data[50-1] = '\0';
data[50-1] = '\0'
data[50-1]
data
data
50-1
50
1
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            size_t i, destLen;            char dest[100];            memset(dest, 'C', 100-1);            dest[100-1] = '\0'; /* null terminate */            destLen = strlen(dest);            /* POTENTIAL FLAW: using length of the dest where data             * could be smaller than dest causing buffer overread */            for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }            dest[100-1] = '\0';            printLine(dest);            free(data);        }
size_t i, destLen;
size_t i, destLen;
size_t
size_t
i
i
destLen
destLen
char dest[100];
char dest[100];
char
dest[100]
dest
[100]
100
memset(dest, 'C', 100-1);
memset(dest, 'C', 100-1)
memset
memset
dest
dest
'C'
100-1
100
1
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
destLen = strlen(dest);
destLen = strlen(dest)
destLen
destLen
strlen(dest)
strlen
strlen
dest
dest
for (i = 0; i < destLen; i++)            {                dest[i] = data[i];            }
i = 0;
i = 0
i
i
0
i < destLen
i
i
destLen
destLen
i++
i
i
{                dest[i] = data[i];            }
dest[i] = data[i];
dest[i] = data[i]
dest[i]
dest
dest
i
i
data[i]
data
data
i
i
dest[100-1] = '\0';
dest[100-1] = '\0'
dest[100-1]
dest
dest
100-1
100
1
'\0'
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
free(data);
free(data)
free
free
data
data
-----joern-----
(16,26,0)
(56,48,0)
(69,89,0)
(78,77,0)
(88,53,0)
(8,48,0)
(8,71,0)
(73,46,0)
(82,12,0)
(67,31,0)
(28,89,0)
(41,103,0)
(102,79,0)
(65,89,0)
(93,24,0)
(93,94,0)
(46,105,0)
(22,25,0)
(98,93,0)
(75,31,0)
(20,43,0)
(76,87,0)
(6,14,0)
(27,50,0)
(21,107,0)
(77,105,0)
(59,15,0)
(4,23,0)
(16,14,0)
(77,21,0)
(94,79,0)
(23,97,0)
(31,71,0)
(53,89,0)
(21,46,0)
(42,67,0)
(92,77,0)
(64,108,0)
(87,15,0)
(38,45,0)
(97,79,0)
(48,8,0)
(57,31,0)
(70,60,0)
(34,31,0)
(9,49,0)
(49,82,0)
(63,110,0)
(79,102,0)
(51,27,0)
(12,110,0)
(61,12,0)
(7,105,0)
(15,45,0)
(80,3,0)
(10,30,0)
(36,81,0)
(67,97,0)
(43,2,0)
(52,89,0)
(109,90,0)
(94,93,0)
(11,90,0)
(1,105,0)
(2,43,0)
(40,34,0)
(97,31,0)
(67,90,0)
(106,97,0)
(112,87,0)
(50,27,0)
(103,71,0)
(58,105,0)
(49,103,0)
(13,71,0)
(81,62,0)
(75,97,0)
(55,89,0)
(91,8,0)
(25,23,0)
(33,31,0)
(79,94,0)
(111,25,0)
(60,75,0)
(50,55,0)
(44,46,0)
(89,103,0)
(23,25,0)
(35,2,0)
(96,3,0)
(15,87,0)
(30,97,0)
(47,30,0)
(12,71,0)
(3,105,0)
(99,55,0)
(3,81,0)
(60,8,0)
(100,49,0)
(23,66,0)
(0,2,0)
(46,49,0)
(37,71,0)
(79,97,0)
(62,81,0)
(74,82,0)
(91,34,0)
(29,43,0)
(90,67,0)
(83,62,0)
(82,49,0)
(9,89,0)
(14,16,0)
(110,12,0)
(85,1,0)
(54,66,0)
(66,31,0)
(18,75,0)
(86,50,0)
(104,27,0)
(108,71,0)
(34,91,0)
(46,21,0)
(24,93,0)
(45,89,0)
(39,24,0)
(68,67,0)
(2,89,0)
(5,8,0)
(17,9,0)
(19,108,0)
(101,91,0)
(72,71,0)
(81,89,0)
(11,42,1)
(70,66,1)
(99,50,1)
(30,47,1)
(14,6,1)
(66,54,1)
(23,97,1)
(62,83,1)
(83,36,1)
(90,109,1)
(3,105,1)
(25,22,1)
(91,101,1)
(22,111,1)
(18,60,1)
(34,91,1)
(87,76,1)
(20,0,1)
(67,97,1)
(96,105,1)
(58,7,1)
(74,100,1)
(1,85,1)
(50,27,1)
(44,77,1)
(16,14,1)
(3,81,1)
(46,73,1)
(78,92,1)
(1,105,1)
(64,12,1)
(56,5,1)
(43,29,1)
(29,20,1)
(100,75,1)
(97,79,1)
(108,19,1)
(23,25,1)
(39,98,1)
(77,105,1)
(0,35,1)
(68,30,1)
(105,58,1)
(67,90,1)
(76,112,1)
(45,38,1)
(40,108,1)
(112,59,1)
(109,11,1)
(88,55,1)
(110,63,1)
(21,46,1)
(86,3,1)
(85,21,1)
(81,62,1)
(9,49,1)
(53,88,1)
(75,18,1)
(73,44,1)
(9,17,1)
(91,8,1)
(94,93,1)
(4,67,1)
(46,105,1)
(2,43,1)
(101,40,1)
(15,87,1)
(7,81,1)
(82,12,1)
(82,74,1)
(59,2,1)
(12,110,1)
(27,104,1)
(60,8,1)
(30,97,1)
(35,49,1)
(79,102,1)
(6,30,1)
(96,1,1)
(46,49,1)
(80,96,1)
(79,94,1)
(24,39,1)
(42,68,1)
(77,78,1)
(19,64,1)
(68,16,1)
(61,8,1)
(10,97,1)
(36,45,1)
(63,61,1)
(98,106,1)
(93,24,1)
(32,9,1)
(60,70,1)
(8,48,1)
(75,97,1)
(106,34,1)
(47,10,1)
(92,3,1)
(49,82,1)
(17,53,1)
(51,86,1)
(111,4,1)
(55,99,1)
(104,51,1)
(38,15,1)
(54,23,1)
(3,80,1)
(48,56,1)
(78,3,2)
(94,93,2)
(9,49,2)
(79,102,2)
(30,97,2)
(81,62,2)
(46,49,2)
(67,97,2)
(79,94,2)
(85,3,2)
(46,105,2)
(93,24,2)
(1,105,2)
(44,3,2)
(46,3,2)
(77,3,2)
(73,3,2)
(75,97,2)
(60,8,2)
(3,81,2)
(97,79,2)
(1,3,2)
(8,48,2)
(91,8,2)
(3,3,2)
(21,3,2)
(16,14,2)
(34,91,2)
(77,105,2)
(15,87,2)
(67,90,2)
(12,110,2)
(6,30,2)
(2,43,2)
(96,3,2)
(23,97,2)
(82,12,2)
(14,30,2)
(23,25,2)
(80,3,2)
(50,27,2)
(92,3,2)
(16,30,2)
(3,105,2)
(21,46,2)
(49,82,2)
-----------------------------------
(0,'C')
(1,i++)
(2,memset(dest, 'C', 100-1)
(3,i < destLen)
(4,data)
(5,dataPtr1)
(6,1)
(7,i)
(8,* *dataPtr1 = &data)
(9,free(data)
(10,data)
(11,50)
(12,* *dataPtr2 = &data)
(13,dataPtr1)
(14,-1)
(15,dest[100-1])
(16,exit(-1)
(17,data)
(18,data)
(19,NULL)
(20,100)
(21,dest[i] = data[i])
(22,1)
(23,data[50-1])
(24,sizeof(char)
(25,50-1)
(26,)
(27,100-1)
(28,i)
(29,1)
(30,data == NULL)
(31,)
(32,RET)
(33,if (data == NULL)
(34,* data = *dataPtr1)
(35,dest)
(36,destLen)
(37,data)
(38,'\\\\0')
(39,char)
(40,data)
(41,data)
(42,'A')
(43,100-1)
(44,data)
(45,dest[100-1] = '\\\\0')
(46,data[i])
(47,NULL)
(48,&data)
(49,* data = *dataPtr2)
(50,dest[100-1])
(51,100)
(52,dest)
(53,printLine(dest)
(54,'\\\\0')
(55,dest[100-1] = '\\\\0')
(56,data)
(57,data)
(58,0)
(59,dest)
(60,*dataPtr1)
(61,dataPtr2)
(62,strlen(dest)
(63,data)
(64,data)
(65,for (i = 0; i < destLen; i++)
(66,data[50-1] = '\\\\0')
(67,memset(data, \'A\', 50-1)
(68,data)
(69,destLen)
(70,dataPtr1)
(71,)
(72,dataPtr2)
(73,i)
(74,dataPtr2)
(75,*dataPtr1 = data)
(76,1)
(77,dest[i])
(78,i)
(79,(char *)
(80,destLen)
(81,destLen = strlen(dest)
(82,*dataPtr2)
(83,dest)
(84,memset(data, 'A', 50-1)
(85,i)
(86,dest)
(87,100-1)
(88,dest)
(89,)
(90,50-1)
(91,*dataPtr1)
(92,dest)
(93,50*sizeof(char)
(94,malloc(50*sizeof(char)
(95,memset(dest, \'C\', 100-1)
(96,i)
(97,data = (char *)
(98,50)
(99,'\\\\0')
(100,data)
(101,dataPtr1)
(102,char *)
(103,)
(104,1)
(105,i = 0)
(106,data)
(107,)
(108,data = NULL)
(109,1)
(110,&data)
(111,50)
(112,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^