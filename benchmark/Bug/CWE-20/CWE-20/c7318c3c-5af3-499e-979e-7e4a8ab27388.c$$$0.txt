-----label-----
1
-----code-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_31_bad()
{
    twoIntsStruct * data;
    twoIntsStruct dataBadBuffer[50];
    twoIntsStruct dataGoodBuffer[100];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            memmove(data, source, 100*sizeof(twoIntsStruct));
            printStructLine(&data[0]);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
56,57
56,58
56,59
56,60
57,58
58,59
58,60
59,60
61,62
61,63
63,64
65,66
65,67
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
78,79
78,80
79,80
82,83
83,84
85,86
85,87
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
92,93
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
106,107
107,108
107,109
107,110
107,111
108,109
110,111
112,113
114,115
114,116
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
126,127
126,128
127,128
-----nextToken-----
2,4,9,11,12,16,18,20,24,26,28,32,34,39,41,42,45,49,51,52,55,60,62,64,69,71,76,77,80,81,84,91,93,94,95,101,103,104,105,109,111,113,115,119,120,124,128,129
-----computeFrom-----
30,31
30,32
74,75
74,76
78,79
78,80
87,88
87,89
97,98
97,99
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_31_bad(){    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
void
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_31_bad()
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_31_bad
{    twoIntsStruct * data;    twoIntsStruct dataBadBuffer[50];    twoIntsStruct dataGoodBuffer[100];    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination     * buffer in various memory copying functions using a "large" source buffer. */    data = dataBadBuffer;    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct dataBadBuffer[50];
twoIntsStruct dataBadBuffer[50];
twoIntsStruct
twoIntsStruct
dataBadBuffer[50]
dataBadBuffer
[50]
50
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct dataGoodBuffer[100];
twoIntsStruct
twoIntsStruct
dataGoodBuffer[100]
dataGoodBuffer
[100]
100
data = dataBadBuffer;
data = dataBadBuffer
data
data
dataBadBuffer
dataBadBuffer
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        {            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            twoIntsStruct source[100];            {                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */            memmove(data, source, 100*sizeof(twoIntsStruct));            printStructLine(&data[0]);        }
twoIntsStruct source[100];
twoIntsStruct source[100];
twoIntsStruct
twoIntsStruct
source[100]
source
[100]
100
{                size_t i;                /* Initialize array */                for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }            }
size_t i;
size_t i;
size_t
size_t
i
i
for (i = 0; i < 100; i++)                {                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
i = 0;
i = 0
i
i
0
i < 100
i
i
100
i++
i
i
{                    source[i].intOne = 0;                    source[i].intTwo = 0;                }
source[i].intOne = 0;
source[i].intOne = 0
source[i].intOne
source[i]
source
source
i
i
intOne
0
source[i].intTwo = 0;
source[i].intTwo = 0
source[i].intTwo
source[i]
source
source
i
i
intTwo
0
memmove(data, source, 100*sizeof(twoIntsStruct));
memmove(data, source, 100*sizeof(twoIntsStruct))
memmove
memmove
data
data
source
source
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
-----joern-----
(51,53,0)
(24,29,0)
(18,3,0)
(19,3,0)
(27,49,0)
(38,56,0)
(50,39,0)
(34,30,0)
(30,32,0)
(41,24,0)
(4,56,0)
(2,5,0)
(32,56,0)
(36,49,0)
(45,24,0)
(6,1,0)
(22,14,0)
(48,51,0)
(43,24,0)
(23,22,0)
(22,30,0)
(1,29,0)
(35,32,0)
(3,39,0)
(30,56,0)
(9,8,0)
(11,55,0)
(41,51,0)
(14,31,0)
(46,36,0)
(5,16,0)
(44,21,0)
(54,41,0)
(56,39,0)
(2,55,0)
(40,39,0)
(15,29,0)
(17,29,0)
(37,16,0)
(36,1,0)
(13,15,0)
(21,55,0)
(31,14,0)
(52,5,0)
(25,29,0)
(49,53,0)
(28,32,0)
(32,3,0)
(5,2,0)
(16,5,0)
(14,22,0)
(31,55,0)
(8,29,0)
(33,22,0)
(0,30,0)
(55,56,0)
(42,39,0)
(26,21,0)
(2,30,0)
(12,1,0)
(47,8,0)
(20,2,0)
(7,2,0)
(1,36,0)
(24,41,0)
(15,29,1)
(8,47,1)
(30,32,1)
(43,45,1)
(12,8,1)
(22,23,1)
(2,5,1)
(35,28,1)
(47,9,1)
(19,18,1)
(31,14,1)
(36,46,1)
(32,35,1)
(46,1,1)
(23,33,1)
(48,41,1)
(15,13,1)
(0,32,1)
(36,1,1)
(5,16,1)
(29,25,1)
(49,27,1)
(24,29,1)
(45,49,1)
(32,3,1)
(20,7,1)
(30,34,1)
(3,19,1)
(33,2,1)
(6,12,1)
(10,31,1)
(51,48,1)
(9,29,1)
(7,8,1)
(16,37,1)
(24,43,1)
(17,30,1)
(1,29,1)
(54,24,1)
(28,3,1)
(41,24,1)
(25,17,1)
(27,36,1)
(22,30,1)
(13,51,1)
(37,52,1)
(9,15,1)
(8,29,1)
(41,54,1)
(52,20,1)
(14,22,1)
(2,30,1)
(34,0,1)
(1,6,1)
(2,30,2)
(30,32,2)
(36,1,2)
(14,22,2)
(24,29,2)
(13,8,2)
(2,5,2)
(49,8,2)
(12,8,2)
(32,3,2)
(45,8,2)
(24,8,2)
(46,8,2)
(8,8,2)
(31,14,2)
(22,30,2)
(15,8,2)
(43,8,2)
(54,8,2)
(48,8,2)
(1,8,2)
(27,8,2)
(51,8,2)
(9,8,2)
(5,16,2)
(47,8,2)
(41,8,2)
(1,29,2)
(41,24,2)
(15,29,2)
(36,8,2)
(8,29,2)
(6,8,2)
-----------------------------------
(0,data)
(1,source[i])
(2,memmove(data, source, 100*sizeof(twoIntsStruct)
(3,data = dataBadBuffer)
(4,data)
(5,100*sizeof(twoIntsStruct)
(6,i)
(7,data)
(8,i < 100)
(9,i)
(10,RET)
(11,source)
(12,source)
(13,i)
(14,&data[0])
(15,i++)
(16,sizeof(twoIntsStruct)
(17,i)
(18,data)
(19,dataBadBuffer)
(20,source)
(21,)
(22,data[0])
(23,0)
(24,source[i])
(25,0)
(26,i)
(27,0)
(28,dataCopy)
(29,i = 0)
(30,* data = dataCopy)
(31,printStructLine(&data[0])
(32,* dataCopy = data)
(33,data)
(34,dataCopy)
(35,data)
(36,source[i].intOne)
(37,twoIntsStruct)
(38,dataCopy)
(39,)
(40,data)
(41,source[i].intTwo)
(42,dataGoodBuffer)
(43,i)
(44,for (i = 0; i < 100; i++)
(45,source)
(46,intOne)
(47,100)
(48,0)
(49,source[i].intOne = 0)
(50,dataBadBuffer)
(51,source[i].intTwo = 0)
(52,100)
(53,)
(54,intTwo)
(55,)
(56,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^