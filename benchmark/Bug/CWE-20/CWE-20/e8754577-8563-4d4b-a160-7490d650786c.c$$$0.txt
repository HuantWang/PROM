-----label-----
1
-----code-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_06_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t dest[100] = L"";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printWLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
54,56
55,56
55,57
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
92,93
93,94
93,95
95,96
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
126,127
127,128
127,129
127,130
128,129
129,130
129,131
131,132
131,133
131,134
133,134
135,136
137,138
138,139
138,140
138,141
138,142
139,140
141,142
143,144
143,145
146,147
148,149
149,150
149,151
150,151
152,153
-----nextToken-----
2,4,8,10,11,14,16,18,20,24,26,30,31,37,39,43,45,49,51,52,56,58,59,64,67,69,70,74,76,82,85,87,90,91,94,96,98,100,105,106,111,113,114,118,120,124,125,130,132,134,136,140,142,144,145,147,151,153
-----computeFrom-----
22,23
22,24
28,29
28,30
54,55
54,56
55,56
55,57
62,63
62,64
72,73
72,74
79,80
79,81
83,84
83,85
93,94
93,95
108,109
108,110
122,123
122,124
143,144
143,145
-----guardedBy-----
58,113
76,100
74,120
85,111
96,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_06_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
void
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_06_bad()
CWE134_Uncontrolled_Format_String__wchar_t_file_snprintf_06_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = L"";    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = L"";
wchar_t dataBuffer[100] = L"";
wchar_t
dataBuffer[100] = L""
dataBuffer
[100]
100
= L""
L""
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
if(STATIC_CONST_FIVE==5)    {        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }    }
{            wchar_t dest[100] = L"";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printWLine(dest);        }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(69,55,0)
(5,59,0)
(35,30,0)
(18,12,0)
(60,27,0)
(64,36,0)
(44,47,0)
(65,39,0)
(39,23,0)
(62,27,0)
(53,61,0)
(67,30,0)
(9,15,0)
(53,23,0)
(4,68,0)
(41,2,0)
(50,59,0)
(12,25,0)
(1,52,0)
(16,68,0)
(10,55,0)
(54,35,0)
(63,48,0)
(23,32,0)
(66,48,0)
(32,24,0)
(11,7,0)
(36,57,0)
(58,52,0)
(43,39,0)
(22,57,0)
(30,35,0)
(13,59,0)
(57,59,0)
(23,53,0)
(2,32,0)
(19,59,0)
(31,0,0)
(7,56,0)
(14,57,0)
(26,0,0)
(55,53,0)
(51,24,0)
(17,4,0)
(53,55,0)
(12,32,0)
(61,53,0)
(23,45,0)
(38,35,0)
(49,23,0)
(29,2,0)
(35,7,0)
(39,57,0)
(33,8,0)
(23,39,0)
(47,52,0)
(64,27,0)
(39,64,0)
(46,64,0)
(42,25,0)
(35,57,0)
(3,27,0)
(28,30,0)
(52,47,0)
(55,64,0)
(52,64,0)
(48,32,0)
(20,8,0)
(27,34,0)
(37,45,0)
(40,36,0)
(6,32,0)
(36,64,0)
(15,7,0)
(45,23,0)
(32,2,0)
(26,48,1)
(44,52,1)
(29,6,1)
(18,45,1)
(12,32,1)
(49,53,1)
(39,43,1)
(23,49,1)
(57,14,1)
(30,28,1)
(32,2,1)
(20,57,1)
(26,47,1)
(35,30,1)
(4,17,1)
(0,31,1)
(52,64,1)
(66,32,1)
(63,66,1)
(31,26,1)
(10,39,1)
(17,45,1)
(2,41,1)
(46,8,1)
(12,18,1)
(15,9,1)
(21,0,1)
(39,57,1)
(23,53,1)
(26,12,1)
(8,33,1)
(65,48,1)
(41,29,1)
(53,55,1)
(21,15,1)
(53,61,1)
(35,57,1)
(39,64,1)
(40,46,1)
(64,36,1)
(69,10,1)
(9,35,1)
(47,52,1)
(38,30,1)
(14,22,1)
(23,32,1)
(33,20,1)
(16,4,1)
(48,63,1)
(55,69,1)
(54,11,1)
(67,54,1)
(58,1,1)
(47,44,1)
(6,47,1)
(26,8,1)
(37,23,1)
(11,0,1)
(18,16,1)
(23,39,1)
(55,64,1)
(1,64,1)
(45,37,1)
(52,58,1)
(22,13,1)
(43,65,1)
(35,38,1)
(36,40,1)
(45,23,1)
(28,67,1)
(36,57,1)
(48,32,1)
(6,47,2)
(36,57,2)
(66,47,2)
(32,2,2)
(43,48,2)
(9,0,2)
(55,48,2)
(12,32,2)
(54,0,2)
(65,48,2)
(35,30,2)
(36,8,2)
(12,48,2)
(52,8,2)
(2,47,2)
(39,64,2)
(23,53,2)
(47,8,2)
(53,55,2)
(48,47,2)
(69,48,2)
(45,48,2)
(16,45,2)
(58,8,2)
(64,36,2)
(41,47,2)
(18,48,2)
(38,0,2)
(10,48,2)
(64,8,2)
(53,61,2)
(45,23,2)
(28,0,2)
(35,0,2)
(67,0,2)
(29,47,2)
(32,47,2)
(17,45,2)
(40,8,2)
(37,48,2)
(23,48,2)
(48,32,2)
(63,47,2)
(53,48,2)
(23,39,2)
(49,48,2)
(1,8,2)
(47,52,2)
(39,57,2)
(23,32,2)
(55,64,2)
(44,8,2)
(46,8,2)
(30,0,2)
(15,0,2)
(39,48,2)
(11,0,2)
(35,57,2)
(52,64,2)
(4,45,2)
-----------------------------------
(0,STATIC_CONST_FIVE==5)
(1,100)
(2,fopen(FILENAME, "r")
(3,if (100-dataLen > 1)
(4,printLine("fgetws()
(5,data)
(6,pFile)
(7,)
(8,STATIC_CONST_FIVE==5)
(9,dest)
(10,100)
(11,"")
(12,fclose(pFile)
(13,"")
(14,dataBuffer)
(15,printWLine(dest)
(16,\\\'\\\\0\\\')
(17,"fgetws()
(18,pFile)
(19,if(STATIC_CONST_FIVE==5)
(20,STATIC_CONST_FIVE)
(21,RET)
(22,data)
(23,fgetws(data+dataLen, (int)
(24,)
(25,)
(26,STATIC_CONST_FIVE)
(27,)
(28,1)
(29,FILENAME)
(30,100-1)
(31,5)
(32,pFile = fopen(FILENAME, "r")
(33,5)
(34,)
(35,SNPRINTF(dest, 100-1, data)
(36,wcslen(data)
(37,NULL)
(38,data)
(39,data+dataLen)
(40,data)
(41,"r")
(42,if (fgetws(data+dataLen, (int)
(43,dataLen)
(44,1)
(45,fgetws(data+dataLen, (int)
(46,dataLen)
(47,100-dataLen > 1)
(48,pFile != NULL)
(49,pFile)
(50,if(STATIC_CONST_FIVE==5)
(51,if (pFile != NULL)
(52,100-dataLen)
(53,(int)
(54,dest)
(55,100-dataLen)
(56,)
(57,data = dataBuffer)
(58,dataLen)
(59,)
(60,pFile)
(61,int)
(62,dataLen)
(63,NULL)
(64,dataLen = wcslen(data)
(65,data)
(66,pFile)
(67,100)
(68,)
(69,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^