-----label-----
1
-----code-----
void CWE416_Use_After_Free__malloc_free_char_02_bad()
{
    char * data;
    /* Initialize data */
    data = NULL;
    if(1)
    {
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        memset(data, 'A', 100-1);
        data[100-1] = '\0';
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLine(data);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
54,55
56,57
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
67,69
71,72
72,73
72,74
73,74
75,76
77,78
77,79
79,80
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,60,61,66,68,69,70,74,76,78,83,85
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
59,60
59,61
63,64
63,65
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE416_Use_After_Free__malloc_free_char_02_bad(){    char * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
void
CWE416_Use_After_Free__malloc_free_char_02_bad()
CWE416_Use_After_Free__malloc_free_char_02_bad
{    char * data;    /* Initialize data */    data = NULL;    if(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }    if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
1
{        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        memset(data, 'A', 100-1);        data[100-1] = '\0';        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */        free(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
memset(data, 'A', 100-1);
memset(data, 'A', 100-1)
memset
memset
data
data
'A'
100-1
100
1
data[100-1] = '\0';
data[100-1] = '\0'
data[100-1]
data
data
100-1
100
1
'\0'
free(data);
free(data)
free
free
data
data
if(1)    {        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
1
{        /* POTENTIAL FLAW: Use of data that may have been freed */        printLine(data);        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */    }
printLine(data);
printLine(data)
printLine
printLine
data
data
-----joern-----
(17,0,0)
(18,45,0)
(27,1,0)
(7,32,0)
(38,23,0)
(23,17,0)
(14,6,0)
(10,38,0)
(39,46,0)
(21,18,0)
(29,32,0)
(11,32,0)
(46,1,0)
(30,38,0)
(23,38,0)
(0,17,0)
(48,46,0)
(2,7,0)
(6,32,0)
(17,23,0)
(19,31,0)
(17,32,0)
(25,1,0)
(32,17,0)
(13,2,0)
(34,7,0)
(5,45,0)
(9,2,0)
(6,46,0)
(8,30,0)
(4,18,0)
(44,11,0)
(45,18,0)
(42,32,0)
(22,24,0)
(41,29,0)
(12,16,0)
(24,22,0)
(6,49,0)
(38,30,0)
(7,2,0)
(18,32,0)
(15,1,0)
(22,37,0)
(32,31,0)
(16,31,0)
(7,16,0)
(40,24,0)
(47,11,0)
(29,31,0)
(18,31,0)
(3,45,0)
(30,8,1)
(2,9,1)
(6,14,1)
(29,32,1)
(40,11,1)
(16,12,1)
(8,10,1)
(6,46,1)
(24,40,1)
(7,2,1)
(10,42,1)
(38,30,1)
(11,44,1)
(42,28,1)
(35,29,1)
(21,11,1)
(3,4,1)
(14,35,1)
(45,5,1)
(46,39,1)
(41,16,1)
(9,13,1)
(21,22,1)
(11,32,1)
(6,32,1)
(7,32,1)
(39,48,1)
(18,32,1)
(34,18,1)
(23,38,1)
(18,45,1)
(44,47,1)
(28,46,1)
(17,0,1)
(29,41,1)
(22,24,1)
(32,17,1)
(47,32,1)
(4,21,1)
(5,3,1)
(17,23,1)
(13,34,1)
(20,6,1)
(12,7,1)
(20,35,1)
(35,28,1)
(32,17,2)
(17,0,2)
(2,28,2)
(5,28,2)
(21,28,2)
(47,28,2)
(11,28,2)
(10,28,2)
(7,28,2)
(9,28,2)
(6,35,2)
(8,28,2)
(22,11,2)
(14,35,2)
(45,28,2)
(17,28,2)
(13,28,2)
(12,28,2)
(3,28,2)
(22,24,2)
(7,32,2)
(29,32,2)
(38,28,2)
(18,32,2)
(16,28,2)
(7,2,2)
(42,28,2)
(24,11,2)
(44,28,2)
(34,28,2)
(6,46,2)
(32,28,2)
(18,45,2)
(6,32,2)
(41,28,2)
(40,11,2)
(30,28,2)
(23,38,2)
(23,28,2)
(11,32,2)
(4,28,2)
(17,23,2)
(38,30,2)
(18,28,2)
(29,28,2)
-----------------------------------
(0,char *)
(1,)
(2,100-1)
(3,100)
(4,\'A\')
(5,1)
(6,printLine(data)
(7,data[100-1])
(8,char)
(9,1)
(10,100)
(11,data == NULL)
(12,'\\\\0')
(13,100)
(14,data)
(15,if(1)
(16,data[100-1] = \'\\\\0\')
(17,(char *)
(18,memset(data, 'A', 100-1)
(19,if (data == NULL)
(20,RET)
(21,data)
(22,exit(-1)
(23,malloc(100*sizeof(char)
(24,-1)
(25,data)
(26,'A')
(27,if(1)
(28,1)
(29,free(data)
(30,sizeof(char)
(31,)
(32,data = (char *)
(33,data[100-1] = '\\\\0')
(34,data)
(35,1)
(36,\'\\\\0\')
(37,)
(38,100*sizeof(char)
(39,NULL)
(40,1)
(41,data)
(42,data)
(43,memset(data, \'A\', 100-1)
(44,NULL)
(45,100-1)
(46,data = NULL)
(47,data)
(48,data)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^